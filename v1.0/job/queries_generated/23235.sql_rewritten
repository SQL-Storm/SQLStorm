WITH MovieDetails AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS cast_count,
        STRING_AGG(DISTINCT a.name, ', ') AS actor_names,
        AVG(CASE 
            WHEN m.info_type_id = (SELECT id FROM info_type WHERE info = 'duration') THEN CAST(m.info AS INTEGER) 
            ELSE NULL 
        END) OVER (PARTITION BY t.id) AS avg_duration,
        MAX(CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM aka_title 
                WHERE movie_id = t.id 
                AND title LIKE '%Blade%' ESCAPE '\' 
            ) THEN 'Has Blade' 
            ELSE 'No Blade' 
        END) AS blade_presence
    FROM 
        title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    LEFT JOIN 
        aka_name a ON c.person_id = a.person_id
    LEFT JOIN 
        movie_info m ON t.id = m.movie_id
    WHERE 
        (t.production_year IS NOT NULL AND t.production_year < 2023)
        AND (m.info_type_id IS NOT NULL OR m.note IS NULL)
    GROUP BY 
        t.id, t.title, t.production_year
    HAVING 
        COUNT(DISTINCT c.person_id) > 1
),
RecentMovies AS (
    SELECT 
        movie_id,
        title,
        production_year,
        cast_count,
        actor_names,
        avg_duration,
        blade_presence,
        ROW_NUMBER() OVER (ORDER BY AVG(avg_duration) DESC) AS rank
    FROM 
        MovieDetails
    WHERE 
        production_year >= 2020
)

SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    rm.cast_count,
    rm.actor_names,
    rm.avg_duration,
    rm.blade_presence,
    COALESCE(NULLIF(rm.cast_count, 0), 0) AS safe_cast_count,
    CASE 
        WHEN rm.avg_duration IS NULL THEN 'Duration Not Available'
        WHEN rm.avg_duration < 60 THEN 'Short Film'
        WHEN rm.avg_duration BETWEEN 60 AND 120 THEN 'Feature Film'
        ELSE 'Epic'
    END AS film_category
FROM 
    RecentMovies rm
WHERE 
    rm.rank <= 5
ORDER BY 
    rm.production_year DESC, rm.cast_count DESC;