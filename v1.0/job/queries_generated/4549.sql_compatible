
WITH RankedMovies AS (
    SELECT mt.id AS movie_id, mt.title, 
           ROW_NUMBER() OVER (PARTITION BY mt.production_year ORDER BY mt.production_year DESC) AS rn,
           COUNT(DISTINCT ci.person_id) OVER (PARTITION BY mt.id) AS actor_count
    FROM aka_title mt
    LEFT JOIN movie_companies mc ON mc.movie_id = mt.id
    LEFT JOIN company_name cn ON cn.id = mc.company_id
    WHERE mt.production_year >= 2000
),

FilteredMovies AS (
    SELECT rm.movie_id, rm.title, rm.actor_count
    FROM RankedMovies rm
    WHERE rm.actor_count > 5
),

MovieDetails AS (
    SELECT fm.movie_id,
           fm.title,
           MAX(mk.keyword) AS popular_keyword,
           STRING_AGG(DISTINCT ci.note, ', ') AS actor_notes,
           CASE 
               WHEN fm.actor_count > 10 THEN 'High'
               WHEN fm.actor_count BETWEEN 6 AND 10 THEN 'Medium'
               ELSE 'Low'
           END AS actor_count_category
    FROM FilteredMovies fm
    LEFT JOIN movie_keyword mk ON mk.movie_id = fm.movie_id
    LEFT JOIN cast_info ci ON ci.movie_id = fm.movie_id
    GROUP BY fm.movie_id, fm.title, fm.actor_count
)

SELECT md.title, md.popular_keyword, md.actor_notes, md.actor_count_category
FROM MovieDetails md
ORDER BY md.actor_count_category DESC, md.title ASC;
