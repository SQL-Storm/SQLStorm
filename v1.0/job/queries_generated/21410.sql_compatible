
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC, t.title) AS rn,
        COUNT(CASE WHEN ki.keyword = 'Drama' THEN 1 END) OVER (PARTITION BY t.id) AS drama_count
    FROM 
        aka_title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword ki ON mk.keyword_id = ki.id
    WHERE 
        t.production_year IS NOT NULL
    AND 
        t.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE 'Feature%')
),
MovieActors AS (
    SELECT 
        c.movie_id,
        ps.name AS actor_name,
        COUNT(DISTINCT c.person_id) OVER (PARTITION BY c.movie_id) AS actor_count
    FROM 
        cast_info c
    INNER JOIN 
        aka_name ps ON c.person_id = ps.person_id
    WHERE 
        c.nr_order IS NOT NULL
),
FilteredMovies AS (
    SELECT 
        m.movie_id,
        m.title,
        m.production_year,
        ma.actor_name,
        ma.actor_count,
        m.drama_count
    FROM 
        RankedMovies m
    LEFT JOIN 
        MovieActors ma ON m.movie_id = ma.movie_id
    WHERE 
        (ma.actor_count > 0 OR m.drama_count > 1) 
    AND 
        m.rn <= 3
)
SELECT 
    f.movie_id,
    f.title,
    f.production_year,
    COALESCE(f.actor_name, 'Unknown Actor') AS actor_name,
    f.drama_count,
    CASE 
        WHEN f.drama_count > 2 THEN 'High Drama'
        WHEN f.drama_count = 2 THEN 'Medium Drama'
        ELSE 'Low Drama'
    END AS drama_level
FROM 
    FilteredMovies f
ORDER BY 
    f.production_year DESC,
    f.title ASC
OFFSET 5 ROWS
FETCH NEXT 10 ROWS ONLY;
