WITH movie_data AS (
    SELECT 
        t.title AS movie_title,
        c.note AS cast_note,
        co.name AS company_name,
        k.keyword AS movie_keyword,
        p.info AS person_info,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY c.nr_order) AS cast_order
    FROM title t
    LEFT JOIN cast_info c ON t.id = c.movie_id
    LEFT JOIN movie_companies mc ON t.id = mc.movie_id
    LEFT JOIN company_name co ON mc.company_id = co.id
    LEFT JOIN movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    LEFT JOIN person_info p ON c.person_id = p.person_id
    WHERE t.production_year >= 2000
      AND (k.keyword IS NOT NULL OR c.note IS NOT NULL)
),
aggregate_cast AS (
    SELECT
        movie_title,
        STRING_AGG(DISTINCT CAST(cast_note AS VARCHAR), '; ') AS full_cast_notes,
        STRING_AGG(DISTINCT company_name, ', ') AS production_companies,
        STRING_AGG(DISTINCT movie_keyword, ', ') AS associated_keywords,
        COUNT(DISTINCT cast_order) AS total_cast_count
    FROM movie_data
    WHERE cast_order IS NOT NULL
    GROUP BY movie_title
)
SELECT 
    ac.movie_title,
    COALESCE(ac.full_cast_notes, 'No cast notes available') AS full_cast_notes,
    COALESCE(ac.production_companies, 'No companies listed') AS production_companies,
    COALESCE(ac.associated_keywords, 'No keywords') AS associated_keywords,
    ac.total_cast_count,
    CASE 
        WHEN ac.total_cast_count > 5 THEN 'Large Cast'
        WHEN ac.total_cast_count BETWEEN 1 AND 5 THEN 'Small Cast'
        ELSE 'No Cast'
    END AS cast_size
FROM aggregate_cast ac
WHERE ac.total_cast_count > (SELECT AVG(total_cast_count) FROM aggregate_cast) 
ORDER BY ac.total_cast_count DESC
LIMIT 10;