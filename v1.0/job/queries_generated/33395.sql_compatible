
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year > 2000  

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.depth < 3  
),
ranked_movies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        RANK() OVER (PARTITION BY mh.production_year ORDER BY mh.depth ASC, mh.title DESC) AS movie_rank
    FROM 
        movie_hierarchy mh
),
distinct_roles AS (
    SELECT 
        ci.movie_id,
        STRING_AGG(DISTINCT rt.role ORDER BY rt.role) AS roles
    FROM 
        cast_info ci
    JOIN 
        role_type rt ON ci.role_id = rt.id
    GROUP BY 
        ci.movie_id
),
enriched_movies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.movie_rank,
        dr.roles,
        COALESCE(mk.keyword, 'No Keywords') AS movie_keyword
    FROM 
        ranked_movies rm
    LEFT JOIN 
        distinct_roles dr ON rm.movie_id = dr.movie_id
    LEFT JOIN 
        movie_keyword mk ON mk.movie_id = rm.movie_id
)
SELECT 
    em.title,
    em.production_year,
    em.movie_rank,
    em.roles,
    STRING_AGG(DISTINCT em.movie_keyword, ', ') AS keywords
FROM 
    enriched_movies em
WHERE 
    em.movie_rank <= 5 
GROUP BY 
    em.title, em.production_year, em.movie_rank, em.roles
ORDER BY 
    em.production_year DESC, 
    em.movie_rank ASC;
