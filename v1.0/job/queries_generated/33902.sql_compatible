
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        NULL AS parent_id,
        1 AS level
    FROM title mt
    WHERE mt.production_year > 2000

    UNION ALL

    SELECT 
        mt.id,
        mt.title,
        mt.production_year,
        mh.movie_id AS parent_id,
        mh.level + 1
    FROM title mt
    JOIN movie_link ml ON ml.linked_movie_id = mt.id
    JOIN MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
RankedMovies AS (
    SELECT 
        mh.title,
        mh.production_year,
        RANK() OVER (PARTITION BY mh.level ORDER BY mh.production_year DESC) AS year_rank,
        COUNT(DISTINCT ci.person_id) AS cast_count,
        STRING_AGG(DISTINCT an.name, ', ') AS actors
    FROM MovieHierarchy mh
    LEFT JOIN complete_cast cc ON cc.movie_id = mh.movie_id
    LEFT JOIN cast_info ci ON ci.movie_id = cc.movie_id
    LEFT JOIN aka_name an ON an.person_id = ci.person_id
    GROUP BY mh.movie_id, mh.title, mh.production_year, mh.level
)
SELECT 
    rm.title,
    rm.production_year,
    rm.year_rank,
    rm.cast_count,
    COALESCE(rm.actors, 'No actors listed') AS actors,
    CASE 
        WHEN rm.cast_count > 10 THEN 'Large cast'
        WHEN rm.cast_count BETWEEN 5 AND 10 THEN 'Medium cast'
        ELSE 'Small cast'
    END AS cast_size,
    COUNT(DISTINCT mc.company_id) AS production_companies,
    MAX(CASE 
        WHEN ci.note IS NOT NULL THEN 'Has notes' 
        ELSE 'No notes' 
    END) AS note_status
FROM RankedMovies rm
LEFT JOIN movie_companies mc ON mc.movie_id = rm.movie_id
LEFT JOIN movie_info mi ON mi.movie_id = rm.movie_id
LEFT JOIN cast_info ci ON ci.movie_id = rm.movie_id
GROUP BY rm.title, rm.production_year, rm.year_rank, rm.cast_count
ORDER BY rm.production_year DESC;
