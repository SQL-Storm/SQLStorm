
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id, 
        t.title, 
        t.production_year, 
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC) AS year_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
CastRoles AS (
    SELECT 
        ci.movie_id, 
        ci.person_id, 
        p.gender, 
        rt.role, 
        COUNT(ci.id) OVER (PARTITION BY ci.movie_id) AS total_cast_count
    FROM 
        cast_info ci
    JOIN 
        name p ON ci.person_id = p.id 
    JOIN 
        role_type rt ON ci.role_id = rt.id 
),
FilteredMovies AS (
    SELECT 
        rm.movie_id, 
        rm.title, 
        rm.production_year, 
        cr.total_cast_count
    FROM 
        RankedMovies rm
    LEFT JOIN 
        CastRoles cr ON rm.movie_id = cr.movie_id
    WHERE 
        rm.year_rank <= 3 
),
MovieDetails AS (
    SELECT 
        fm.movie_id,
        fm.title,
        fm.production_year,
        (SELECT COUNT(*) FROM movie_info WHERE movie_id = fm.movie_id AND note IS NOT NULL) AS info_count,
        (SELECT STRING_AGG(info, ', ') FROM movie_info WHERE movie_id = fm.movie_id) AS info_list
    FROM 
        FilteredMovies fm
)
SELECT 
    md.movie_id,
    md.title,
    md.production_year,
    COALESCE(md.info_count, 0) AS info_count,
    md.info_list,
    CASE 
        WHEN COALESCE(md.info_count, 0) > 0 THEN 'Has Additional Info' 
        ELSE 'No Additional Info' 
    END AS info_status,
    CASE 
        WHEN EXISTS (SELECT 1 FROM movie_keyword mk WHERE mk.movie_id = md.movie_id AND mk.keyword = 'Oscar') THEN 'Oscar Nominee' 
        ELSE 'Not Oscar Nominated' 
    END AS oscar_status
FROM 
    MovieDetails md
LEFT JOIN 
    movie_keyword mk ON md.movie_id = mk.movie_id
GROUP BY 
    md.movie_id, md.title, md.production_year, md.info_count, md.info_list
ORDER BY 
    md.production_year DESC, md.title;
