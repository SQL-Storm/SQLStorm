
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year BETWEEN 2000 AND 2023

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1 AS level
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    ak.name AS actor_name,
    at.title AS movie_title,
    mh.production_year,
    COUNT(mh.movie_id) OVER (PARTITION BY ak.person_id) AS total_movies,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    COALESCE(SUM(CASE WHEN mi.info LIKE '%Award%' THEN 1 ELSE 0 END), 0) AS award_count,
    DENSE_RANK() OVER (PARTITION BY mh.production_year ORDER BY mh.level DESC) AS year_rank
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    MovieHierarchy mh ON ci.movie_id = mh.movie_id
JOIN 
    aka_title at ON mh.movie_id = at.id
LEFT JOIN 
    movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_info mi ON at.id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Awards')
WHERE 
    ak.name IS NOT NULL
    AND mh.production_year IS NOT NULL
    AND (mh.level = 1 OR mh.level IS NULL)
GROUP BY 
    ak.name, at.title, mh.production_year
HAVING 
    COUNT(mh.movie_id) > 2
ORDER BY 
    mh.production_year DESC, ak.name;
