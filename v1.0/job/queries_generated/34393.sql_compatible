
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        NULL AS parent_id,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.episode_of_id IS NULL

    UNION ALL

    SELECT 
        e.id AS movie_id,
        e.title,
        e.production_year,
        mh.movie_id AS parent_id,
        mh.level + 1
    FROM 
        aka_title e
    JOIN 
        MovieHierarchy mh ON e.episode_of_id = mh.movie_id
),
ActorMovies AS (
    SELECT 
        a.person_id,
        ka.name AS actor_name,
        COUNT(DISTINCT c.movie_id) AS movie_count
    FROM 
        cast_info c
    JOIN 
        aka_name ka ON c.person_id = ka.person_id
    GROUP BY 
        a.person_id, ka.name
),
MovieInfo AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        COALESCE(mk.keyword, 'No Keywords') AS keyword
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
),
TotalMovies AS (
    SELECT 
        mh.movie_id,
        mh.title AS hierarchy_title,
        mh.production_year,
        NULLIF(am.movie_count, 0) AS actor_count
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        ActorMovies am ON mh.movie_id = am.person_id
)
SELECT 
    t.movie_id,
    t.hierarchy_title,
    t.production_year,
    t.actor_count,
    CASE 
        WHEN t.actor_count IS NULL THEN 'Unknown'
        ELSE CAST(t.actor_count AS VARCHAR)
    END AS actor_count_display,
    COUNT(DISTINCT mi.movie_id) OVER (PARTITION BY t.movie_id) AS keyword_count,
    MAX(CASE 
        WHEN t.production_year IS NOT NULL THEN t.production_year 
        ELSE EXTRACT(YEAR FROM DATE '2024-10-01')
    END) AS effective_year
FROM 
    TotalMovies t
LEFT JOIN 
    MovieInfo mi ON t.movie_id = mi.movie_id
WHERE 
    t.actor_count IS NOT NULL OR t.production_year > 2000
GROUP BY 
    t.movie_id, t.hierarchy_title, t.production_year, t.actor_count
ORDER BY 
    t.production_year DESC, 
    t.hierarchy_title;
