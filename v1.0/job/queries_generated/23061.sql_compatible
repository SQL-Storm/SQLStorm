
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        1 AS level,
        NULL AS parent_movie_id
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL

    UNION ALL

    SELECT 
        linking.linked_movie_id,
        t.title,
        t.production_year,
        mh.level + 1,
        mh.movie_id
    FROM 
        movie_link linking
    JOIN 
        title t ON linking.linked_movie_id = t.id
    JOIN 
        movie_hierarchy mh ON linking.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    t.movie_title,
    t.production_year,
    COALESCE(sp.role_count, 0) AS secondary_roles,
    mh.level AS hierarchy_level,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    ARRAY_AGG(DISTINCT c.name) AS company_names
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    title t ON ci.movie_id = t.id
LEFT JOIN 
    (SELECT 
         ci2.movie_id, 
         COUNT(DISTINCT ci2.role_id) AS role_count
     FROM 
         cast_info ci2
     WHERE 
         ci2.note IS NOT NULL 
     GROUP BY 
         ci2.movie_id) sp ON sp.movie_id = t.id
JOIN 
    movie_keyword mk ON t.id = mk.movie_id
JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_companies mc ON t.id = mc.movie_id
LEFT JOIN 
    company_name c ON mc.company_id = c.id
LEFT JOIN 
    movie_hierarchy mh ON t.id = mh.movie_id
WHERE 
    ak.name IS NOT NULL 
    AND ak.name <> ''
    AND t.production_year >= 2000
GROUP BY 
    ak.name, t.movie_title, t.production_year, mh.level
ORDER BY 
    t.production_year DESC, ak.name ASC;
