
WITH RECURSIVE MovieHierarchy AS (
    SELECT mt.id AS movie_id, mt.title, mt.production_year, 1 AS level
    FROM aka_title AS mt
    WHERE mt.production_year >= 2000

    UNION ALL

    SELECT ml.linked_movie_id AS movie_id, at.title, at.production_year, mh.level + 1
    FROM movie_link AS ml
    JOIN aka_title AS at ON ml.linked_movie_id = at.id
    JOIN MovieHierarchy AS mh ON ml.movie_id = mh.movie_id
),
RankedCast AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_rank
    FROM cast_info AS ci
    JOIN aka_name AS ak ON ci.person_id = ak.person_id
    WHERE ci.nr_order IS NOT NULL
),
TopMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT r.actor_name) AS actor_count,
        MAX(mh.level) AS hierarchy_level
    FROM MovieHierarchy AS mh
    JOIN RankedCast AS r ON mh.movie_id = r.movie_id
    GROUP BY mh.movie_id, mh.title, mh.production_year
    HAVING COUNT(DISTINCT r.actor_name) > 3
)
SELECT 
    tm.title,
    tm.production_year,
    tm.actor_count,
    ARRAY_AGG(DISTINCT ac.actor_name) AS cast_names,
    COALESCE(mt.info, 'No additional info') AS extra_info
FROM TopMovies AS tm
LEFT JOIN movie_info AS mt ON tm.movie_id = mt.movie_id AND mt.info_type_id = (SELECT id FROM info_type WHERE info = 'Cinematography')
LEFT JOIN RankedCast AS ac ON tm.movie_id = ac.movie_id
GROUP BY tm.title, tm.production_year, tm.actor_count, mt.info
ORDER BY tm.production_year DESC, tm.actor_count DESC;
