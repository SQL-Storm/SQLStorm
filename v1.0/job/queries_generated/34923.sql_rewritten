WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level,
        NULL AS parent_movie_id
    FROM 
        aka_title AS mt
    WHERE 
        mt.production_year >= 2000  

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1,
        mh.movie_id
    FROM 
        movie_link AS ml
    JOIN 
        aka_title AS at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy AS mh ON ml.movie_id = mh.movie_id
    WHERE 
        at.production_year >= 2000  
),
RankedMovies AS (
    SELECT 
        m.movie_id,
        m.title,
        m.production_year,
        ROW_NUMBER() OVER (PARTITION BY m.production_year ORDER BY m.title) AS title_rank,
        COUNT(*) OVER (PARTITION BY m.production_year) AS total_movies
    FROM 
        MovieHierarchy AS m
)
SELECT 
    r.movie_id,
    r.title,
    r.production_year,
    r.title_rank,
    r.total_movies,
    COALESCE(ci.kind_id, ct.kind) AS company_type,
    COUNT(DISTINCT mi.info) AS info_count,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords
FROM 
    RankedMovies AS r
LEFT JOIN 
    movie_companies AS mc ON r.movie_id = mc.movie_id
LEFT JOIN 
    company_name AS cn ON mc.company_id = cn.id
LEFT JOIN 
    company_type AS ct ON mc.company_type_id = ct.id
LEFT JOIN 
    movie_info AS mi ON r.movie_id = mi.movie_id
LEFT JOIN 
    movie_keyword AS mk ON r.movie_id = mk.movie_id
LEFT JOIN 
    keyword AS kw ON mk.keyword_id = kw.id
LEFT JOIN 
    cast_info AS ci ON r.movie_id = ci.movie_id
WHERE 
    r.title_rank <= 10  
GROUP BY 
    r.movie_id, r.title, r.production_year, ci.kind_id, ct.kind
ORDER BY 
    r.production_year DESC, r.title_rank;