WITH RankedMovies AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        ROW_NUMBER() OVER (PARTITION BY m.production_year ORDER BY m.title) AS rank,
        COUNT(*) OVER (PARTITION BY m.production_year) AS total_movies
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL
),
TopRankedMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year
    FROM 
        RankedMovies rm
    WHERE 
        rm.rank <= 3
),
MovieCompanyInfo AS (
    SELECT 
        mc.movie_id,
        GROUP_CONCAT(cn.name) AS companies,
        GROUP_CONCAT(ct.kind) AS company_types
    FROM 
        movie_companies mc
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    LEFT JOIN 
        company_type ct ON mc.company_type_id = ct.id
    GROUP BY 
        mc.movie_id
),
ExtendedMovieInfo AS (
    SELECT 
        tm.title,
        tm.production_year,
        COALESCE(mci.companies, 'No companies') AS companies,
        COALESCE(mci.company_types, 'No types') AS company_types,
        (SELECT COUNT(*) 
         FROM movie_keyword mk 
         WHERE mk.movie_id = tm.movie_id) AS keyword_count
    FROM 
        TopRankedMovies tm
    LEFT JOIN 
        MovieCompanyInfo mci ON tm.movie_id = mci.movie_id
)
SELECT 
    emi.title,
    emi.production_year,
    emi.companies,
    emi.company_types,
    emi.keyword_count,
    CASE 
        WHEN emi.keyword_count IS NULL THEN 'No Keywords'
        WHEN emi.keyword_count = 0 THEN 'No Keywords'
        ELSE 'Has Keywords'
    END AS keyword_status
FROM 
    ExtendedMovieInfo emi
WHERE 
    emi.company_types NOT LIKE '%Independent%' 
    AND emi.production_year >= (SELECT MIN(production_year) FROM aka_title) 
ORDER BY 
    emi.production_year DESC,
    emi.title ASC;