
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        1 AS level
    FROM 
        aka_title t
    WHERE 
        t.id IS NOT NULL
    UNION ALL
    SELECT 
        m.linked_movie_id AS movie_id,
        t.title,
        t.production_year,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title t ON ml.linked_movie_id = t.id
),
RankedMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(ci.id) OVER (PARTITION BY mh.movie_id) AS cast_count,
        ROW_NUMBER() OVER (ORDER BY mh.production_year DESC, mh.title ASC) AS rank
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        complete_cast cc ON mh.movie_id = cc.movie_id
    LEFT JOIN 
        cast_info ci ON cc.subject_id = ci.person_id 
    WHERE 
        mh.production_year IS NOT NULL
),
FilteredMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.cast_count
    FROM 
        RankedMovies rm
    WHERE 
        rm.cast_count >= 3
    AND 
        rm.production_year BETWEEN 2000 AND 2020
),
FinalResults AS (
    SELECT 
        f.title,
        f.production_year,
        f.cast_count,
        COALESCE(SUM(mk.keyword), 'No Keywords') AS keywords
    FROM 
        FilteredMovies f
    LEFT JOIN 
        movie_keyword mk ON f.movie_id = mk.movie_id
    GROUP BY 
        f.movie_id, f.title, f.production_year, f.cast_count
)
SELECT 
    fr.title,
    fr.production_year,
    fr.cast_count,
    fr.keywords,
    CASE 
        WHEN fr.cast_count > 10 THEN 'Large Cast'
        WHEN fr.cast_count BETWEEN 5 AND 10 THEN 'Medium Cast'
        ELSE 'Small Cast'
    END AS cast_size
FROM 
    FinalResults fr
LEFT JOIN 
    aka_title at ON fr.movie_id = at.id
WHERE 
    at.kind_id IS NULL OR at.kind_id <> 5
ORDER BY 
    fr.production_year DESC;
