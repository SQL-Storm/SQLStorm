
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.movie_id = mt.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.level < 5
),
AggregatedStats AS (
    SELECT 
        m.movie_id,
        COUNT(c.id) AS cast_count,
        AVG(CASE WHEN c.note IS NOT NULL THEN 1 ELSE 0 END) AS has_note_ratio,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        MovieHierarchy m
    LEFT JOIN 
        complete_cast c ON m.movie_id = c.movie_id
    LEFT JOIN 
        movie_keyword mk ON m.movie_id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        m.movie_id
),
TopMovies AS (
    SELECT 
        a.title,
        a.production_year,
        a.cast_count,
        a.has_note_ratio,
        a.keywords,
        RANK() OVER (ORDER BY a.cast_count DESC, a.production_year DESC) AS rank
    FROM 
        AggregatedStats a
    WHERE 
        a.cast_count > 2
)

SELECT 
    tm.title,
    tm.production_year,
    tm.cast_count,
    tm.has_note_ratio,
    COALESCE(tm.keywords, 'No Keywords') AS keywords,
    CASE 
        WHEN tm.rank <= 10 THEN 'Top 10'
        ELSE 'Lower Tier'
    END AS tier
FROM 
    TopMovies tm
WHERE 
    tm.has_note_ratio > 0.5
ORDER BY 
    tm.rank;
