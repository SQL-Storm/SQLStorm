
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        (SELECT title FROM aka_title WHERE id = ml.linked_movie_id) AS title,
        (SELECT production_year FROM aka_title WHERE id = ml.linked_movie_id) AS production_year,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON mh.movie_id = ml.movie_id
)

SELECT 
    m.title AS Movie_Title,
    m.production_year AS Production_Year,
    COALESCE(ca.name, 'Unknown') AS Cast_Name,
    COUNT(DISTINCT mc.company_id) AS Company_Count,
    AVG(CASE WHEN mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Budget') THEN CAST(mi.info AS FLOAT) END) AS Avg_Budget,
    ROW_NUMBER() OVER (PARTITION BY m.movie_id ORDER BY m.production_year DESC) AS Row_Num,
    STRING_AGG(DISTINCT mk.keyword, ', ') AS Keywords
FROM 
    MovieHierarchy m
LEFT JOIN 
    complete_cast cc ON cc.movie_id = m.movie_id
LEFT JOIN 
    cast_info ci ON ci.movie_id = cc.movie_id
LEFT JOIN 
    aka_name ca ON ca.person_id = ci.person_id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = m.movie_id
LEFT JOIN 
    movie_info mi ON mi.movie_id = m.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = m.movie_id
WHERE 
    m.production_year >= 2000 
    AND mi.info IS NOT NULL
GROUP BY 
    m.title, 
    m.production_year, 
    ca.name,
    m.movie_id
HAVING 
    COUNT(DISTINCT mc.company_id) > 2
ORDER BY 
    m.production_year DESC, 
    Movie_Title;
