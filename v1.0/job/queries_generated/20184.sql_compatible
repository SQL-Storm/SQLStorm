
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id IS NOT NULL

    UNION ALL

    SELECT 
        cmt.id AS movie_id,
        cmt.title,
        cmt.production_year,
        cmt.kind_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title cmt ON ml.linked_movie_id = cmt.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name,
    ak.surname_pcode,
    COALESCE(COUNT(DISTINCT ci.role_id), 0) AS total_roles,
    COALESCE(SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END), 0) AS noted_roles,
    ARRAY_AGG(DISTINCT mt.title ORDER BY mt.production_year DESC) AS movie_titles,
    COUNT(DISTINCT CASE WHEN kw.keyword IS NOT NULL THEN kw.keyword END) AS unique_keywords
FROM 
    aka_name ak
LEFT JOIN 
    cast_info ci ON ak.person_id = ci.person_id
LEFT JOIN 
    MovieHierarchy mh ON ci.movie_id = mh.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    aka_title mt ON mh.movie_id = mt.id
WHERE 
    ak.name IS NOT NULL
    AND (ak.surname_pcode IS NULL OR ak.surname_pcode <> 'XYZ')
    AND (mt.production_year > 2000 OR mt.kind_id NOT IN (SELECT id FROM kind_type WHERE kind = 'Documentary'))
GROUP BY 
    ak.person_id, ak.name, ak.surname_pcode
ORDER BY 
    total_roles DESC, ak.name ASC
LIMIT 10;
