
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        RANK() OVER (PARTITION BY EXTRACT(YEAR FROM t.production_year) ORDER BY COUNT(ci.person_id) DESC) AS rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info ci ON t.id = ci.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
TopMovies AS (
    SELECT 
        movie_id, 
        title, 
        production_year 
    FROM 
        RankedMovies 
    WHERE 
        rank <= 5
),
KeywordCounts AS (
    SELECT 
        mk.movie_id,
        COUNT(mk.keyword_id) AS keyword_count
    FROM 
        movie_keyword mk
    JOIN 
        TopMovies tm ON mk.movie_id = tm.movie_id
    GROUP BY 
        mk.movie_id
)
SELECT 
    tm.movie_id,
    tm.title,
    tm.production_year,
    COALESCE(kc.keyword_count, 0) AS keyword_count,
    COALESCE(cast_group.role, 'No Cast') AS cast_role,
    CASE 
        WHEN tm.production_year < 2000 THEN 'Classic'
        WHEN tm.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Recent' 
    END AS movie_age_category
FROM 
    TopMovies tm
LEFT JOIN 
    KeywordCounts kc ON tm.movie_id = kc.movie_id
LEFT JOIN (
    SELECT 
        ci.movie_id, 
        STRING_AGG(DISTINCT rt.role, ', ') AS role
    FROM 
        cast_info ci
    JOIN 
        role_type rt ON ci.role_id = rt.id
    GROUP BY 
        ci.movie_id
) cast_group ON tm.movie_id = cast_group.movie_id
ORDER BY 
    tm.production_year DESC, 
    keyword_count DESC;
