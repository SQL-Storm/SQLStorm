
WITH movie_actors AS (
    SELECT 
        c.movie_id,
        ak.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY ak.name) AS actor_rank
    FROM 
        cast_info c
    JOIN 
        aka_name ak ON c.person_id = ak.person_id
),

movie_year_keywords AS (
    SELECT 
        m.id AS movie_id,
        m.production_year,
        k.keyword 
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    WHERE 
        m.production_year IS NOT NULL
),

ranked_movies AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        COUNT(k.keyword) AS keyword_count,
        DENSE_RANK() OVER (ORDER BY COUNT(k.keyword) DESC) AS rank
    FROM 
        aka_title m
    LEFT JOIN 
        movie_year_keywords ky ON m.id = ky.movie_id
    GROUP BY 
        m.id, m.title
)

SELECT 
    r.movie_id,
    r.title,
    r.keyword_count,
    ma.actor_name,
    ma.actor_rank,
    CASE 
        WHEN r.keyword_count = 0 THEN 'No Keywords'
        WHEN r.keyword_count IS NULL THEN 'Unknown'
        ELSE 'Has Keywords'
    END AS keyword_state,
    MAX(CASE WHEN ky.keyword IS NOT NULL THEN ky.keyword END) AS dominant_keyword,
    COUNT(DISTINCT c.person_id) AS total_actors
FROM 
    ranked_movies r
LEFT JOIN 
    movie_actors ma ON r.movie_id = ma.movie_id
JOIN 
    cast_info c ON r.movie_id = c.movie_id
LEFT JOIN 
    movie_year_keywords ky ON r.movie_id = ky.movie_id
GROUP BY 
    r.movie_id, r.title, r.keyword_count, ma.actor_name, ma.actor_rank
HAVING 
    COUNT(DISTINCT c.person_id) > 2 OR r.keyword_count IS NOT NULL
ORDER BY 
    r.rank, r.keyword_count DESC, ma.actor_rank;
