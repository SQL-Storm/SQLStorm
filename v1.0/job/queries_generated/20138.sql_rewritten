WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m 
    WHERE 
        m.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
)

SELECT 
    t.title AS linked_movie_title,
    t.production_year,
    COALESCE(a.name, 'Unknown') AS actor_name,
    COUNT(DISTINCT ci.person_id) OVER (PARTITION BY t.id) AS number_of_actors,
    ARRAY_AGG(DISTINCT k.keyword) FILTER (WHERE k.keyword IS NOT NULL) AS keywords,
    CASE 
        WHEN t.production_year < 2000 THEN 'Classic'
        WHEN t.production_year >= 2000 AND t.production_year < 2010 THEN 'Recent'
        ELSE 'Modern'
    END AS era,
    md5(t.title) AS title_hash
FROM 
    aka_title t
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    cast_info ci ON ci.movie_id = t.id
LEFT JOIN 
    aka_name a ON ci.person_id = a.person_id
WHERE 
    t.production_year IS NOT NULL 
    AND (t.production_year BETWEEN 1980 AND 2023)
    AND NOT EXISTS (
        SELECT 1 
        FROM movie_info mi 
        WHERE mi.movie_id = t.id 
        AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Restricted')
    )
GROUP BY 
    t.id, a.name, t.title, t.production_year
HAVING 
    COUNT(DISTINCT ci.person_id) >= 3
ORDER BY 
    COALESCE(t.production_year, 9999), 
    era DESC, 
    title_hash;