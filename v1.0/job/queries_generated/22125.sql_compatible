
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        mt.imdb_index,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        m.imdb_index,
        mh.level + 1 AS level
    FROM 
        movie_link ml
    JOIN 
        aka_title m ON m.id = ml.linked_movie_id
    JOIN 
        MovieHierarchy mh ON mh.movie_id = ml.movie_id
)

SELECT 
    mh.movie_id,
    mh.movie_title,
    mh.production_year,
    COUNT(cd.id) AS total_cast,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    CASE 
        WHEN mh.production_year IS NULL THEN 'Year Not Available'
        WHEN mh.production_year > 2000 THEN '21st Century'
        ELSE '20th Century'
    END AS production_period,
    ROW_NUMBER() OVER (PARTITION BY mh.level ORDER BY mh.production_year DESC) AS rank_within_level
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON cc.movie_id = mh.movie_id
LEFT JOIN 
    cast_info cd ON cd.movie_id = cc.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN 
    keyword k ON k.id = mk.keyword_id
WHERE 
    mh.level <= 2
GROUP BY 
    mh.movie_id, mh.movie_title, mh.production_year, mh.level
HAVING 
    COUNT(cd.id) > 5 OR (COUNT(cd.id) = 0 AND mh.production_year < 2020)
ORDER BY 
    mh.production_year DESC,
    total_cast DESC;
