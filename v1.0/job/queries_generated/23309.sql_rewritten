WITH RecursiveMovieCast AS (
    SELECT 
        c.movie_id,
        a.name AS actor_name,
        a.person_id,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY a.name) AS actor_rank
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        a.name IS NOT NULL
),
FilteredMovies AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT cm.company_id) AS company_count,
        MAX(t.production_year) OVER (PARTITION BY t.kind_id) AS max_year_per_kind
    FROM 
        aka_title t
    LEFT JOIN 
        movie_companies cm ON t.id = cm.movie_id
    GROUP BY 
        t.id, t.title, t.production_year, t.kind_id
    HAVING 
        COUNT(DISTINCT cm.company_id) > 2
    AND 
        MAX(t.production_year) OVER (PARTITION BY t.kind_id) BETWEEN 2000 AND EXTRACT(YEAR FROM cast('2024-10-01' as date))
), 
SummarizedActors AS (
    SELECT 
        movie_id,
        STRING_AGG(actor_name, ', ') AS actors_list,
        MIN(actor_rank) AS first_actor_rank
    FROM 
        RecursiveMovieCast
    GROUP BY 
        movie_id
)
SELECT 
    f.movie_id,
    f.title,
    f.production_year,
    f.company_count,
    sa.actors_list,
    CASE 
        WHEN f.company_count IS NULL THEN 'Unknown'
        ELSE f.company_count::TEXT
    END AS company_count_str,
    CASE 
        WHEN f.production_year < 2000 THEN 'Classic'
        WHEN f.production_year IS NULL THEN 'No Year Info'
        ELSE 'Modern'
    END AS movie_age_category,
    (SELECT COUNT(*) FROM FilteredMovies WHERE production_year = f.production_year) AS same_year_count
FROM 
    FilteredMovies f
LEFT JOIN 
    SummarizedActors sa ON f.movie_id = sa.movie_id
ORDER BY 
    f.production_year DESC,
    f.title ASC;