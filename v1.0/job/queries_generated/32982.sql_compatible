
WITH Movie_Cast AS (
    SELECT 
        c.movie_id,
        a.name AS actor_name,
        a.surname_pcode,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS actor_order
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
),
Movie_Info_Stats AS (
    SELECT 
        m.movie_id,
        COUNT(DISTINCT ki.keyword_id) AS keyword_count,
        ARRAY_AGG(DISTINCT mi.info) AS info_details
    FROM 
        movie_info mi
    JOIN 
        movie_keyword ki ON mi.movie_id = ki.movie_id
    GROUP BY 
        mi.movie_id
),
Recursive_Movies AS (
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        1 AS depth
    FROM 
        movie_link ml
    UNION ALL
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        rm.depth + 1
    FROM 
        movie_link ml
    JOIN 
        Recursive_Movies rm ON ml.linked_movie_id = rm.movie_id
)
SELECT 
    t.title,
    t.production_year,
    mc.actor_name,
    mc.actor_order,
    COALESCE(mis.keyword_count, 0) AS keyword_count,
    (CASE 
        WHEN COALESCE(mis.keyword_count, 0) = 0 THEN 'No keywords available'
        ELSE 'Keywords found'
     END) AS keyword_presence,
    r.depth AS recursive_depth
FROM 
    title t
LEFT JOIN 
    Movie_Cast mc ON t.id = mc.movie_id
LEFT JOIN 
    Movie_Info_Stats mis ON t.id = mis.movie_id
LEFT JOIN 
    Recursive_Movies r ON t.id = r.movie_id
WHERE 
    t.production_year >= 2000 
    AND (mc.surname_pcode IS NOT NULL OR COALESCE(mis.keyword_count, 0) > 0) 
ORDER BY 
    t.production_year DESC, mc.actor_order;
