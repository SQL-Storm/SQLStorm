
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        ROW_NUMBER() OVER (PARTITION BY mt.id ORDER BY mt.production_year DESC) AS rn
    FROM
        aka_title mt

    UNION ALL

    SELECT
        ml.linked_movie_id,
        at.title,
        at.production_year,
        ROW_NUMBER() OVER (PARTITION BY at.id ORDER BY at.production_year DESC) AS rn
    FROM
        movie_link ml
        JOIN aka_title at ON ml.linked_movie_id = at.id
    WHERE ml.movie_id IN (SELECT movie_id FROM movie_hierarchy)
)

SELECT
    ak.name AS actor_name,
    at.title AS movie_title,
    mh.production_year,
    COUNT(DISTINCT mc.company_id) AS production_companies,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    AVG(CASE WHEN mi.info_type_id = 1 THEN NULLIF(LENGTH(mi.info), 0) END) AS avg_length_info,
    COALESCE(MAX(cp.kind), 'Unknown') AS company_type,
    SUM(CASE WHEN c.note IS NOT NULL THEN 1 ELSE 0 END) AS note_count
FROM
    aka_name ak
    LEFT JOIN cast_info c ON ak.person_id = c.person_id
    LEFT JOIN aka_title at ON c.movie_id = at.id
    LEFT JOIN movie_companies mc ON at.id = mc.movie_id
    LEFT JOIN movie_info mi ON at.id = mi.movie_id
    LEFT JOIN movie_hierarchy mh ON at.id = mh.movie_id
    LEFT JOIN company_type cp ON mc.company_type_id = cp.id
    LEFT JOIN movie_keyword mk ON at.id = mk.movie_id
    LEFT JOIN keyword kw ON mk.keyword_id = kw.id
WHERE
    mh.rn = 1 AND
    ak.name IS NOT NULL AND
    (mi.info IS NULL OR mi.info NOT LIKE '%deleted%')
GROUP BY
    ak.name, at.title, mh.production_year
HAVING
    COUNT(DISTINCT mc.company_id) > 1 AND
    AVG(NULLIF(LENGTH(mi.info), 0)) BETWEEN 5 AND 255
ORDER BY
    mh.production_year DESC, ak.name ASC;
