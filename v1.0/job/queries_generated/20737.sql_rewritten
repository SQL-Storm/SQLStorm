WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year = 2023

    UNION ALL

    SELECT 
        mk.linked_movie_id,
        at.title,
        at.production_year,
        at.kind_id,
        mh.level + 1
    FROM 
        movie_link mk
    JOIN 
        aka_title at ON mk.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON mk.movie_id = mh.movie_id
    WHERE 
        mh.level < 5
)

SELECT 
    a.name AS ActorName,
    at.title AS MovieTitle,
    at.production_year AS Year,
    COALESCE(STRING_AGG(DISTINCT k.keyword, ', '), 'No Keywords') AS Keywords,
    COUNT(DISTINCT mk.movie_id) AS TotalLinkedMovies,
    AVG(CASE 
            WHEN pi.id IS NOT NULL THEN pi.info
            ELSE 'No Info Available' 
        END) AS AvgPersonInfo
FROM 
    aka_name a
LEFT JOIN 
    cast_info ci ON a.person_id = ci.person_id
LEFT JOIN 
    aka_title at ON ci.movie_id = at.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = at.id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    person_info pi ON a.person_id = pi.person_id
LEFT JOIN 
    MovieHierarchy mh ON at.id = mh.movie_id
WHERE 
    a.name IS NOT NULL 
    AND at.production_year > 2000
    AND (pi.info_type_id IS NULL OR pi.note <> 'Redundant')
GROUP BY 
    a.name, at.title, at.production_year
HAVING 
    COUNT(DISTINCT at.kind_id) > 1
ORDER BY 
    Year DESC, TotalLinkedMovies DESC;