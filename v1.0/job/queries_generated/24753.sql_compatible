
WITH RECURSIVE movie_paths AS (
    SELECT 
        m.id AS movie_id,
        ARRAY[m.id] AS path,
        CAST(1 AS INTEGER) AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        path || ml.linked_movie_id,
        depth + 1
    FROM 
        movie_link ml
    JOIN 
        movie_paths mp ON ml.movie_id = mp.movie_id
)

, company_movies AS (
    SELECT 
        mc.movie_id,
        c.name AS company_name,
        ct.kind AS company_type,
        COUNT(*) AS contribution_count
    FROM 
        movie_companies mc
    JOIN 
        company_name c ON mc.company_id = c.id
    JOIN 
        company_type ct ON mc.company_type_id = ct.id
    GROUP BY 
        mc.movie_id, c.name, ct.kind
)

, person_movie_roles AS (
    SELECT 
        ci.movie_id,
        a.name AS actor_name,
        rt.role AS role_name,
        COUNT(*) AS role_count
    FROM 
        cast_info ci
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    JOIN 
        role_type rt ON ci.role_id = rt.id
    GROUP BY 
        ci.movie_id, a.name, rt.role
)

SELECT 
    mt.movie_id,
    mt.depth,
    mt.path,
    cm.company_name,
    cm.company_type,
    pm.actor_name,
    pm.role_name,
    pm.role_count,
    CASE 
        WHEN pm.role_count IS NULL THEN 'No roles'
        ELSE 'Has roles'
    END AS role_status
FROM 
    movie_paths mt
LEFT JOIN 
    company_movies cm ON mt.movie_id = cm.movie_id
LEFT JOIN 
    person_movie_roles pm ON mt.movie_id = pm.movie_id
WHERE 
    mt.depth <= 5
    AND EXISTS (
        SELECT 1
        FROM title t
        WHERE t.id = mt.movie_id AND (t.kind_id = 1 OR t.kind_id = 2)
    )
ORDER BY 
    mt.depth, cm.company_name, pm.actor_name;
