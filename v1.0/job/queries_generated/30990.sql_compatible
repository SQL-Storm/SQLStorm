
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level,
        m.id AS root_movie_id
    FROM 
        aka_title AS m
    WHERE 
        m.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1,
        mh.root_movie_id
    FROM 
        aka_title AS m
    JOIN 
        movie_link AS ml ON m.id = ml.linked_movie_id
    JOIN 
        movie_hierarchy AS mh ON ml.movie_id = mh.movie_id
)
SELECT 
    CASE 
        WHEN p.gender = 'M' THEN CONCAT('Mr. ', n.name)
        ELSE CONCAT('Ms. ', n.name)
    END AS full_name,
    COUNT(DISTINCT ci.movie_id) AS movie_count,
    STRING_AGG(DISTINCT mk.keyword, ', ') AS keywords,
    MAX(mh.production_year) AS latest_year,
    MIN(mh.production_year) AS earliest_year,
    COALESCE(MAX(movie_info.info), 'No Info Available') AS extra_info,
    SUM(CASE WHEN c.role_id IN (SELECT id FROM role_type WHERE role LIKE '%Director%') THEN 1 ELSE 0 END) AS director_count
FROM 
    cast_info AS ci
JOIN 
    aka_name AS n ON ci.person_id = n.person_id
LEFT JOIN 
    person_info AS p ON n.person_id = p.person_id
LEFT JOIN 
    movie_keyword AS mk ON ci.movie_id = mk.movie_id
LEFT JOIN 
    movie_info AS movie_info ON ci.movie_id = movie_info.movie_id
JOIN 
    movie_hierarchy AS mh ON ci.movie_id = mh.movie_id
WHERE 
    mh.production_year BETWEEN 2000 AND 2023
GROUP BY 
    full_name, p.gender, mh.production_year
HAVING 
    COUNT(DISTINCT ci.movie_id) > 5
ORDER BY 
    movie_count DESC, full_name;
