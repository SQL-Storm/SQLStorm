
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    UNION ALL
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title AS title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    mh.title AS Movie_Title,
    mh.production_year AS Production_Year,
    COUNT(DISTINCT c.person_id) AS Actor_Count,
    STRING_AGG(DISTINCT ak.name, ', ') AS Actors,
    AVG(CASE 
        WHEN ps.info IS NOT NULL THEN CAST(ps.info AS numeric)
        ELSE 0 
    END) AS Average_Rating,
    COUNT(DISTINCT mk.keyword) AS Keyword_Count
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info c ON cc.subject_id = c.person_id
LEFT JOIN 
    aka_name ak ON c.person_id = ak.person_id
LEFT JOIN 
    person_info ps ON c.person_id = ps.person_id AND ps.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year
HAVING 
    COUNT(DISTINCT c.person_id) > 3
ORDER BY 
    Average_Rating DESC, Actor_Count DESC
LIMIT 10;
