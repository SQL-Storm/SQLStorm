
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        CAST(NULL AS VARCHAR) AS parent_title,
        1 AS level
    FROM 
        aka_title mt 
    WHERE 
        mt.production_year > 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.title AS parent_title,
        mh.level + 1
    FROM 
        movie_link ml 
    JOIN 
        aka_title at ON ml.linked_movie_id = at.movie_id
    JOIN 
        MovieHierarchy mh ON mh.movie_id = ml.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.parent_title,
    mh.level,
    COALESCE(STRING_AGG(DISTINCT cn.name, ', ') OVER (), 'No Cast') AS cast_names,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    COUNT(DISTINCT mc.company_id) AS company_count,
    AVG(CASE WHEN cs.nr_order IS NOT NULL THEN cs.nr_order ELSE 0 END) AS avg_cast_order
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info cs ON cs.movie_id = mh.movie_id
LEFT JOIN 
    aka_name cn ON cs.person_id = cn.person_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = mh.movie_id
WHERE 
    mh.level <= 2
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.parent_title, mh.level
HAVING 
    COUNT(DISTINCT mk.keyword) > 3
ORDER BY 
    mh.production_year DESC, mh.title ASC;
