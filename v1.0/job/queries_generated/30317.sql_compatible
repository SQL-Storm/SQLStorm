
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
      AND 
        mt.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mh.depth + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
)

SELECT 
    mn.name AS actor_name,
    mh.title AS movie_title,
    mh.depth,
    COUNT(DISTINCT mc.company_id) AS company_count,
    SUM(CASE WHEN mi.info_type_id = (SELECT id FROM info_type WHERE info = 'budget') THEN CAST(mi.info AS FLOAT) ELSE 0 END) AS total_budget,
    STRING_AGG(DISTINCT ko.keyword, ', ') AS keywords,
    ROW_NUMBER() OVER (PARTITION BY mn.id ORDER BY mh.depth) AS rank_by_depth
FROM 
    MovieHierarchy mh
JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
JOIN 
    aka_name mn ON cc.subject_id = mn.person_id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    movie_info mi ON mh.movie_id = mi.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword ko ON mk.keyword_id = ko.id
GROUP BY 
    mn.name, mh.title, mh.depth
HAVING 
    COUNT(DISTINCT mc.company_id) > 1
ORDER BY 
    mh.depth ASC, total_budget DESC;
