
WITH RECURSIVE MovieCTE AS (
    SELECT 
        title.id AS movie_id,
        title.title,
        title.production_year,
        1 AS depth
    FROM 
        title
    WHERE 
        title.production_year >= 2000

    UNION ALL

    SELECT 
        movie_link.linked_movie_id,
        linked_title.title,
        linked_title.production_year,
        MovieCTE.depth + 1
    FROM 
        movie_link
    JOIN 
        title AS linked_title ON movie_link.linked_movie_id = linked_title.id
    JOIN 
        MovieCTE ON MovieCTE.movie_id = movie_link.movie_id
    WHERE 
        MovieCTE.depth < 5 
),

ActorMovies AS (
    SELECT 
        ak.name AS actor_name,
        mv.title AS movie_title,
        mv.production_year,
        ROW_NUMBER() OVER (PARTITION BY ak.id ORDER BY mv.production_year DESC) AS rn
    FROM 
        aka_name ak
    JOIN 
        cast_info ci ON ak.person_id = ci.person_id
    JOIN 
        aka_title mv ON ci.movie_id = mv.movie_id
    WHERE 
        ak.name IS NOT NULL
),

FilteredActors AS (
    SELECT 
        actor_name,
        movie_title,
        production_year
    FROM 
        ActorMovies
    WHERE 
        rn <= 5
)

SELECT 
    ma.actor_name,
    STRING_AGG(DISTINCT CONCAT(mat.movie_title, ' (', mat.production_year, ')'), ', ') AS movies,
    COUNT(ma.movie_title) AS total_movies,
    AVG(mg.production_year) AS avg_production_year,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords
FROM 
    FilteredActors ma
JOIN 
    movie_keyword mk ON mk.movie_id IN (
        SELECT id FROM aka_title
        WHERE title IN (SELECT DISTINCT movie_title FROM FilteredActors)
    )
JOIN 
    keyword kw ON mk.keyword_id = kw.id
JOIN 
    movie_info mi ON mi.movie_id IN (
        SELECT id FROM aka_title
        WHERE title IN (SELECT DISTINCT movie_title FROM FilteredActors)
    )
LEFT JOIN 
    MovieCTE mg ON mg.movie_id = ma.movie_title
GROUP BY 
    ma.actor_name
HAVING 
    COUNT(ma.movie_title) > 2
ORDER BY 
    total_movies DESC
LIMIT 10;
