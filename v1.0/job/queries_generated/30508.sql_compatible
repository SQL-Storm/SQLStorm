
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.depth + 1 AS depth
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
)
SELECT 
    mv.title AS Movie_Title,
    mv.production_year AS Production_Year,
    p.name AS Actor_Name,
    COUNT(DISTINCT ci.id) AS Total_Count,
    AVG(RANK() OVER (PARTITION BY mv.movie_id ORDER BY ci.nr_order)) AS Avg_Rank,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS Keywords
FROM 
    MovieHierarchy mv
LEFT JOIN 
    cast_info ci ON mv.movie_id = ci.movie_id
LEFT JOIN 
    aka_name p ON ci.person_id = p.person_id
LEFT JOIN 
    movie_keyword mk ON mv.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_info inf ON mv.movie_id = inf.movie_id AND inf.info_type_id = (SELECT id FROM info_type WHERE info = 'plot')
WHERE 
    mv.production_year BETWEEN 2000 AND 2023
    AND (p.id IS NOT NULL OR ci.note IS NOT NULL)
GROUP BY 
    mv.movie_id, mv.title, mv.production_year, p.name
HAVING 
    COUNT(DISTINCT ci.id) > 3
ORDER BY 
    Total_Count DESC, Avg_Rank ASC
LIMIT 50;
