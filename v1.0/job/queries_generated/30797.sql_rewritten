WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.episode_of_id,
        1 AS level
    FROM title t
    WHERE t.episode_of_id IS NULL   

    UNION ALL

    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.episode_of_id,
        mh.level + 1 AS level
    FROM title t
    JOIN movie_hierarchy mh ON t.episode_of_id = mh.movie_id  
)
SELECT 
    ak.name AS actor_name,
    m.title AS movie_title,
    m.production_year,
    CASE WHEN m.episode_of_id IS NOT NULL THEN 'Episode' ELSE 'Movie' END AS type,
    COUNT(c.id) OVER (PARTITION BY c.movie_id) AS actor_count,
    STRING_AGG(DISTINCT kn.keyword, ', ') FILTER (WHERE kn.keyword IS NOT NULL) AS keywords,
    CASE 
        WHEN p.info IS NULL THEN 'No Biography Available'
        ELSE p.info 
    END AS biography,
    COALESCE(ca.kind, 'Unknown') AS role_type,
    COUNT(DISTINCT l.linked_movie_id) AS linked_movies
FROM movie_hierarchy m
LEFT JOIN cast_info c ON c.movie_id = m.movie_id
LEFT JOIN aka_name ak ON ak.person_id = c.person_id
LEFT JOIN person_info p ON p.person_id = ak.person_id AND p.info_type_id = (SELECT id FROM info_type WHERE info = 'biography')
LEFT JOIN movie_keyword mk ON mk.movie_id = m.movie_id
LEFT JOIN keyword kn ON kn.id = mk.keyword_id
LEFT JOIN movie_link l ON l.movie_id = m.movie_id
LEFT JOIN role_type ca ON ca.id = c.role_id
WHERE m.production_year > 2000
GROUP BY ak.name, m.title, m.production_year, m.episode_of_id, p.info, ca.kind
HAVING COUNT(DISTINCT c.person_id) >= 2  
ORDER BY m.production_year DESC, actor_count DESC;