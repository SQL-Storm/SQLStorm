WITH RecursiveActorMovies AS (
    SELECT 
        c.person_id,
        COUNT(DISTINCT m.id) AS movie_count,
        STRING_AGG(DISTINCT m.title, ', ') AS movie_titles
    FROM 
        cast_info c
    JOIN 
        aka_title m ON c.movie_id = m.id
    GROUP BY 
        c.person_id
),
HighestRatedMovies AS (
    SELECT 
        mt.movie_id,
        AVG(mr.rating) AS average_rating
    FROM 
        movie_rating mr
    JOIN 
        movie_info mi ON mr.movie_id = mi.movie_id
    WHERE 
        mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Rating')
    GROUP BY 
        mt.movie_id
    HAVING 
        AVG(mr.rating) > 7
),
MoviesWithKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),
DistinctRoles AS (
    SELECT 
        DISTINCT c.role_id,
        rt.role AS role_name
    FROM 
        cast_info c
    JOIN 
        role_type rt ON c.role_id = rt.id
)
SELECT 
    a.name AS actor_name,
    ram.movie_count,
    ram.movie_titles,
    CASE 
        WHEN ram.movie_count > 10 THEN 'Prolific Actor'
        WHEN ram.movie_count BETWEEN 5 AND 10 THEN 'Experienced Actor'
        ELSE 'Newcomer' 
    END AS actor_category,
    wm.average_rating,
    kw.keywords
FROM 
    aka_name a
LEFT JOIN 
    RecursiveActorMovies ram ON a.person_id = ram.person_id
LEFT JOIN 
    HighestRatedMovies wm ON wm.movie_id IN (SELECT id FROM aka_title WHERE title LIKE '%Adventure%')
LEFT JOIN 
    MoviesWithKeywords kw ON kw.movie_id IN (SELECT id FROM aka_title WHERE title LIKE '%Mystery%')
WHERE 
    a.name IS NOT NULL 
    AND (wm.average_rating IS NOT NULL OR kw.keywords IS NOT NULL)
ORDER BY 
    ram.movie_count DESC, 
    wm.average_rating DESC NULLS LAST
FETCH FIRST 10 ROWS ONLY;