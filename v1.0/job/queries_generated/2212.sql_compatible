
WITH RankedTitles AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS title_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
ActorCounts AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS actor_count
    FROM 
        cast_info c
    GROUP BY 
        c.movie_id
),
TopMovies AS (
    SELECT 
        rt.title_id,
        rt.title,
        rt.production_year,
        ac.actor_count
    FROM 
        RankedTitles rt
    JOIN 
        ActorCounts ac ON rt.title_id = ac.movie_id
    WHERE 
        ac.actor_count > 3
)
SELECT 
    tm.title,
    tm.production_year,
    COALESCE(COUNT(mk.keyword), 0) AS keyword_count,
    AVG(LENGTH(tm.title)) AS avg_title_length,
    MAX(CASE WHEN tm.production_year < 2000 THEN 'Classic' ELSE 'Modern' END) AS era,
    STRING_AGG(DISTINCT cn.name, ', ' ORDER BY cn.name) AS company_names
FROM 
    TopMovies tm
LEFT JOIN 
    movie_keyword mk ON tm.title_id = mk.movie_id
LEFT JOIN 
    movie_companies mc ON tm.title_id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
GROUP BY 
    tm.title_id, tm.title, tm.production_year
HAVING 
    COUNT(mk.keyword) > 0 OR MAX(tm.actor_count) > 5
ORDER BY 
    avg_title_length DESC, tm.production_year ASC;
