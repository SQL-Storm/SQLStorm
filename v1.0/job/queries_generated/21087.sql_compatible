
WITH RankedMovies AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS cast_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS year_rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.title, t.production_year
),
MoviesWithKeywords AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        k.keyword,
        COALESCE(mk.keyword_id, -1) AS keyword_id
    FROM 
        aka_title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
),
CompaniesByType AS (
    SELECT 
        mc.movie_id,
        STRING_AGG(DISTINCT cn.name, ', ') AS company_names,
        ct.kind AS company_type
    FROM 
        movie_companies mc
    JOIN 
        company_name cn ON mc.company_id = cn.id
    JOIN 
        company_type ct ON mc.company_type_id = ct.id
    GROUP BY 
        mc.movie_id, ct.kind
)

SELECT 
    RM.title AS movie_title,
    RM.production_year,
    RM.cast_count,
    COALESCE(MW.keyword, 'No Keywords') AS keyword,
    CT.company_names,
    CT.company_type,
    CASE 
        WHEN RM.year_rank <= 5 THEN 'Top 5 of Year'
        ELSE 'Others'
    END AS movie_rank_category
FROM 
    RankedMovies RM
LEFT JOIN 
    MoviesWithKeywords MW ON RM.title = MW.title AND RM.production_year = MW.production_year
LEFT JOIN 
    CompaniesByType CT ON RM.title = CT.title
WHERE 
    RM.production_year >= 2000
  AND 
    (RM.cast_count > 3 OR MW.keyword IS NOT NULL)
ORDER BY 
    RM.production_year DESC, RM.cast_count DESC,
    CASE 
        WHEN MW.keyword IS NULL THEN 1 
        ELSE 0 
    END,  
    MW.keyword ASC;
