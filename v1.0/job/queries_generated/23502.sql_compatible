
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        NULL AS parent_movie_id,
        1 AS hierarchy_level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mh.movie_id,
        mh.hierarchy_level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    mh.hierarchy_level,
    mh.movie_id,
    mh.movie_title,
    mh.production_year,
    COALESCE(NULLIF(ch.name, ''), 'Unknown') AS char_name,
    STRING_AGG(DISTINCT ak.name, ', ') AS aka_names,
    SUM(CASE 
        WHEN c.nr_order IS NOT NULL THEN 1 
        ELSE 0 
    END) AS cast_count,
    MAX(pr.info) FILTER (WHERE pr.info_type_id = (SELECT id FROM info_type WHERE info = 'bio')) AS bio_info,
    COUNT(DISTINCT co.name) FILTER (WHERE c.note IS NOT NULL) AS company_count_with_notes
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info c ON c.movie_id = mh.movie_id
LEFT JOIN 
    aka_name ak ON ak.person_id = c.person_id
LEFT JOIN 
    char_name ch ON ch.imdb_index = ak.imdb_index
LEFT JOIN 
    movie_companies mc ON mc.movie_id = mh.movie_id
LEFT JOIN 
    company_name co ON co.id = mc.company_id
LEFT JOIN 
    person_info pr ON pr.person_id = c.person_id
GROUP BY 
    mh.hierarchy_level, mh.movie_id, mh.movie_title, mh.production_year, ch.name
ORDER BY 
    mh.hierarchy_level DESC, mh.production_year ASC
LIMIT 50
OFFSET (SELECT FLOOR(RANDOM() * (COUNT(*) - 50)) FROM movie_link WHERE link_type_id IS NOT NULL)
