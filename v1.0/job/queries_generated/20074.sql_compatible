
WITH RankedTitles AS (
    SELECT 
        a.id AS actor_id,
        a.name AS actor_name,
        t.id AS title_id,
        t.title AS movie_title,
        t.production_year,
        RANK() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS actor_rank
    FROM 
        aka_name a
    JOIN 
        cast_info c ON a.person_id = c.person_id
    JOIN 
        aka_title t ON c.movie_id = t.movie_id
    WHERE 
        t.production_year IS NOT NULL
    GROUP BY 
        a.id, a.name, t.id, t.title, t.production_year
),
UniqueKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords_list
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),
MovieInformation AS (
    SELECT 
        mi.movie_id,
        STRING_AGG(DISTINCT i.info, '; ') AS information
    FROM 
        movie_info mi
    JOIN 
        info_type it ON mi.info_type_id = it.id
    WHERE 
        it.info LIKE '%' 
    GROUP BY 
        mi.movie_id
)
SELECT 
    rt.actor_name,
    rt.movie_title,
    rt.production_year,
    rt.actor_rank,
    COALESCE(uk.keywords_list, 'No Keywords') AS keywords,
    COALESCE(mi.information, 'No Information') AS additional_info
FROM 
    RankedTitles rt
LEFT JOIN 
    UniqueKeywords uk ON rt.title_id = uk.movie_id
LEFT JOIN 
    MovieInformation mi ON rt.title_id = mi.movie_id
WHERE 
    rt.actor_rank <= 3 
    AND rt.production_year >= (SELECT MAX(production_year) FROM aka_title)
    OR rt.actor_name LIKE '%J%'  
ORDER BY 
    rt.production_year DESC, 
    rt.actor_rank ASC;
