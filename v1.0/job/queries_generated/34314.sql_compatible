
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        t.title,
        m.production_year,
        1 AS level
    FROM title t
    JOIN aka_title a ON a.movie_id = t.id
    LEFT JOIN movie_keyword mk ON mk.movie_id = t.id
    LEFT JOIN keyword k ON k.id = mk.keyword_id
    WHERE t.production_year >= 2000
      AND k.keyword IN ('Action', 'Adventure')

    UNION ALL

    SELECT 
        mh.movie_id,
        t.title,
        m.production_year,
        mh.level + 1
    FROM MovieHierarchy mh
    JOIN movie_link ml ON ml.movie_id = mh.movie_id
    JOIN title t ON t.id = ml.linked_movie_id
    JOIN aka_title a ON a.movie_id = t.id
    WHERE mh.level < 3
      AND t.production_year >= 2000
)

SELECT 
    mh.movie_id,
    MAX(mh.level) AS max_depth,
    t.title,
    COUNT(DISTINCT pi.id) AS actor_count,
    STRING_AGG(DISTINCT a.name, ', ') AS actors,
    SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS notes_present,
    COUNT(DISTINCT mk.keyword_id) AS keyword_count
FROM MovieHierarchy mh
JOIN title t ON t.id = mh.movie_id
LEFT JOIN movie_info mi ON mi.movie_id = t.id
LEFT JOIN cast_info ci ON ci.movie_id = t.id
LEFT JOIN aka_name a ON a.person_id = ci.person_id
LEFT JOIN movie_keyword mk ON mk.movie_id = t.id
LEFT JOIN person_info pi ON pi.person_id = ci.person_id
WHERE pi.info IS NOT NULL
GROUP BY mh.movie_id, t.title
HAVING COUNT(DISTINCT ci.id) > 5
ORDER BY max_depth DESC, actor_count DESC;
