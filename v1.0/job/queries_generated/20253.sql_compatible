
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title, 
        COALESCE(m.production_year, 0) AS production_year, 
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL

    UNION ALL

    SELECT 
        m.id,
        m.title, 
        COALESCE(m.production_year, 0),
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    COALESCE(CAST(c.nums AS VARCHAR), '[No Role]') AS role,
    mh.production_year,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    AVG(mh.depth) OVER (PARTITION BY ak.person_id) AS avg_depth,
    MAX(CASE WHEN ci.note IS NULL THEN 'Unknown Role' ELSE ci.note END) AS role_info,
    NULLIF(LISTAGG(DISTINCT mt.note ORDER BY mt.note), '') AS notes
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id
JOIN 
    movie_hierarchy mh ON mt.id = mh.movie_id
WHERE 
    mh.production_year > 2000
    AND (ak.name IS NOT NULL AND ak.name <> '')
    AND (ci.role_id IS NOT NULL AND ci.role_id <> 0) 
GROUP BY 
    ak.name, mt.title, mh.production_year, ak.person_id, ci.note
HAVING 
    COUNT(DISTINCT mk.keyword_id) > 3
ORDER BY 
    avg_depth DESC, ak.name ASC
LIMIT 100;
