
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        lm.linked_movie_id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        mh.depth + 1
    FROM 
        movie_link lm
    JOIN 
        aka_title mt ON lm.linked_movie_id = mt.id
    JOIN 
        MovieHierarchy mh ON lm.movie_id = mh.movie_id
)

SELECT 
    a.name AS actor_name,
    title.movie_title,
    title.production_year,
    COUNT(DISTINCT cc.person_id) AS num_cast_members,
    AVG(CASE 
        WHEN title.production_year IS NULL THEN NULL 
        ELSE EXTRACT(YEAR FROM DATE '2024-10-01') - title.production_year 
    END) AS avg_movie_age,
    STRING_AGG(DISTINCT k.keyword, ', ') AS associated_keywords
FROM 
    actor_info AS a
LEFT JOIN 
    cast_info AS cc ON a.id = cc.person_id
LEFT JOIN 
    MovieHierarchy title ON cc.movie_id = title.movie_id
LEFT JOIN 
    movie_keyword mk ON title.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
WHERE 
    (title.production_year IS NOT NULL OR cc.movie_id IS NULL)
AND 
    a.name IS NOT NULL
GROUP BY 
    a.name, title.movie_title, title.production_year
HAVING 
    COUNT(DISTINCT cc.person_id) > 2
ORDER BY 
    avg_movie_age DESC, num_cast_members DESC;
