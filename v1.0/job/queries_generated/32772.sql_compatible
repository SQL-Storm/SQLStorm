
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    ROW_NUMBER() OVER (PARTITION BY ak.id ORDER BY mt.production_year DESC) AS ranking,
    CASE 
        WHEN mt.production_year IS NULL THEN 'Unknown Year'
        ELSE CAST(mt.production_year AS VARCHAR)
    END AS year_display,
    COALESCE(SUM(CASE 
                    WHEN c.person_role_id IS NOT NULL THEN 1 
                    ELSE 0 
                END), 0) AS role_count
FROM 
    aka_name ak
JOIN 
    cast_info c ON ak.person_id = c.person_id
JOIN 
    movie_hierarchy mt ON c.movie_id = mt.movie_id
LEFT JOIN 
    movie_keyword mk ON mt.movie_id = mk.movie_id
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id
WHERE 
    ak.name IS NOT NULL
    AND ak.name NOT LIKE '%test%'
GROUP BY 
    ak.name, mt.title, mt.production_year, ak.id
HAVING 
    COUNT(DISTINCT kc.keyword) > 0
ORDER BY 
    ranking, mt.production_year DESC, ak.name
LIMIT 100;
