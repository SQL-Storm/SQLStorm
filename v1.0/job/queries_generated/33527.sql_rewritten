WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        1 AS level
    FROM
        aka_title t
    WHERE
        t.production_year >= 2000

    UNION ALL

    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM
        movie_link ml
    JOIN
        aka_title at ON ml.linked_movie_id = at.id
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE
        at.production_year >= 2000
),


avg_roles AS (
    SELECT 
        ci.person_id,
        COUNT(DISTINCT ci.movie_id) AS total_roles
    FROM 
        cast_info ci
    GROUP BY 
        ci.person_id
),


movie_details AS (
    SELECT 
        at.id AS movie_id,
        at.title,
        AVG(ar.total_roles) AS average_roles,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
        STRING_AGG(DISTINCT cn.name, ', ') AS companies
    FROM 
        aka_title at
    LEFT JOIN 
        movie_keyword mk ON at.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    LEFT JOIN 
        movie_companies mc ON at.id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    LEFT JOIN 
        avg_roles ar ON ar.person_id IN (SELECT person_id FROM cast_info WHERE movie_id = at.id)
    GROUP BY 
        at.id, at.title
)


SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(md.average_roles, 0) AS average_roles,
    COALESCE(md.keywords, 'None') AS keywords,
    COALESCE(md.companies, 'None') AS companies,
    CASE 
        WHEN mh.level = 1 THEN 'Directly produced'
        WHEN mh.level > 1 THEN 'Related Movie'
        ELSE 'Unknown'
    END AS relation_type
FROM 
    movie_hierarchy mh
LEFT JOIN 
    movie_details md ON mh.movie_id = md.movie_id
ORDER BY 
    mh.production_year DESC, mh.title;