WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = 1  

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1 AS level
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    a.name AS actor_name,
    mh.title AS linked_movie_title,
    COUNT(DISTINCT c.id) AS role_count,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    AVG(CASE WHEN m.production_year IS NOT NULL THEN m.production_year ELSE 0 END) AS avg_production_year,
    STRING_AGG(DISTINCT pi.info, '; ') FILTER (WHERE pi.info IS NOT NULL) AS person_info
FROM 
    movie_hierarchy mh
JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
JOIN 
    cast_info c ON c.movie_id = mh.movie_id AND c.person_id IS NOT NULL
JOIN 
    aka_name a ON a.person_id = c.person_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN 
    keyword k ON k.id = mk.keyword_id
LEFT JOIN 
    person_info pi ON pi.person_id = c.person_id
LEFT JOIN 
    aka_title m ON m.id = mh.movie_id
GROUP BY 
    a.name, mh.title
HAVING 
    COUNT(DISTINCT c.role_id) > 2
ORDER BY 
    role_count DESC, avg_production_year DESC;