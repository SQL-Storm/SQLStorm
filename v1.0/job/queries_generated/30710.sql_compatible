
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level
    FROM title m
    WHERE m.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        m.id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM title m
    JOIN movie_link ml ON m.id = ml.linked_movie_id
    JOIN MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
MovieStats AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        AVG(mk.movie_id) AS avg_keywords,
        STRING_AGG(DISTINCT cn.name, ', ') AS company_names,
        COALESCE(SUM(CASE WHEN ci.role_id IS NOT NULL THEN 1 END), 0) AS total_roles
    FROM MovieHierarchy mh
    LEFT JOIN cast_info ci ON mh.movie_id = ci.movie_id
    LEFT JOIN movie_companies mc ON mh.movie_id = mc.movie_id
    LEFT JOIN company_name cn ON mc.company_id = cn.id
    LEFT JOIN movie_keyword mk ON mh.movie_id = mk.movie_id
    GROUP BY mh.movie_id, mh.title, mh.production_year
),
FilteredMovies AS (
    SELECT 
        ms.movie_id,
        ms.title,
        ms.production_year,
        ms.actor_count,
        ms.avg_keywords,
        ms.company_names,
        ms.total_roles,
        RANK() OVER (ORDER BY ms.actor_count DESC) AS actor_rank
    FROM MovieStats ms
    WHERE ms.production_year IS NOT NULL AND ms.actor_count > 0
)
SELECT 
    fm.movie_id,
    fm.title,
    fm.production_year,
    fm.actor_count,
    fm.avg_keywords,
    fm.company_names,
    fm.total_roles,
    CASE 
        WHEN fm.total_roles > 5 THEN 'High Role Movie'
        WHEN fm.total_roles BETWEEN 3 AND 5 THEN 'Medium Role Movie'
        ELSE 'Low Role Movie'
    END AS role_type
FROM FilteredMovies fm
WHERE fm.actor_rank <= 10
ORDER BY fm.actor_count DESC, fm.production_year DESC;
