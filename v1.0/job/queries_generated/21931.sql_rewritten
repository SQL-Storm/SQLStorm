WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year,
        1 AS lvl
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id, 
        ak.title, 
        ak.production_year,
        mh.lvl + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title ak ON ml.linked_movie_id = ak.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.lvl < 5  
),
aggregated_cast AS (
    SELECT 
        ci.movie_id,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        STRING_AGG(DISTINCT a.name, ', ') AS actor_names
    FROM 
        cast_info ci
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    GROUP BY 
        ci.movie_id
),
keyword_details AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),
movie_info_aggregate AS (
    SELECT 
        mi.movie_id,
        MAX(CASE WHEN it.info = 'runtime' THEN mi.info END) AS runtime,
        MAX(CASE WHEN it.info = 'budget' THEN mi.info END) AS budget
    FROM 
        movie_info mi
    JOIN 
        info_type it ON mi.info_type_id = it.id
    GROUP BY 
        mi.movie_id
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    ac.actor_count,
    ac.actor_names,
    kd.keywords,
    mia.runtime,
    mia.budget
FROM 
    movie_hierarchy mh
LEFT JOIN 
    aggregated_cast ac ON mh.movie_id = ac.movie_id
LEFT JOIN 
    keyword_details kd ON mh.movie_id = kd.movie_id
LEFT JOIN 
    movie_info_aggregate mia ON mh.movie_id = mia.movie_id
WHERE 
    mh.production_year BETWEEN 2000 AND 2023
AND 
    (mia.budget IS NULL OR mia.budget::numeric > 1000000)  
ORDER BY 
    mh.production_year DESC, 
    ac.actor_count DESC
OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;