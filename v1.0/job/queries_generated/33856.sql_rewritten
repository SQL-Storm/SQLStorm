WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id, 
        m.title AS movie_title, 
        1 AS level,
        m.production_year,
        NULL::text AS parent_movie_title
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL

    UNION ALL

    SELECT 
        m.id AS movie_id, 
        m.title AS movie_title, 
        mh.level + 1,
        m.production_year,
        mh.movie_title AS parent_movie_title
    FROM 
        aka_title m
        JOIN movie_link ml ON ml.linked_movie_id = m.id
        JOIN movie_hierarchy mh ON mh.movie_id = ml.movie_id
)

SELECT 
    mh.movie_title,
    mh.production_year,
    mh.level,
    COALESCE(c.name, 'Unknown') AS character_name,
    COUNT(DISTINCT ci.person_id) AS total_actors,
    STRING_AGG(DISTINCT p.name, ', ') AS actor_names,
    SUM(CASE WHEN ci.role_id IS NULL THEN 1 ELSE 0 END) AS unassigned_roles,
    RANK() OVER (PARTITION BY mh.production_year ORDER BY COUNT(DISTINCT ci.person_id) DESC) AS year_rank
FROM 
    movie_hierarchy mh
    LEFT JOIN complete_cast cc ON cc.movie_id = mh.movie_id
    LEFT JOIN cast_info ci ON ci.movie_id = cc.movie_id
    LEFT JOIN char_name c ON c.id = ci.person_role_id
    LEFT JOIN aka_name p ON p.person_id = ci.person_id
GROUP BY 
    mh.movie_id, 
    mh.movie_title, 
    mh.production_year, 
    mh.level, 
    c.name
HAVING 
    COUNT(DISTINCT ci.person_id) > 5
ORDER BY 
    mh.production_year DESC,
    total_actors DESC;