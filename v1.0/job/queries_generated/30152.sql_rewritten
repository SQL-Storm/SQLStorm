WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.kind_id = 1  

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    mk.keyword AS movie_keyword,
    a.name AS actor_name,
    COUNT(DISTINCT mh.movie_id) AS total_movies,
    AVG(CASE WHEN c.nr_order IS NOT NULL THEN c.nr_order ELSE NULL END) AS avg_order,
    STRING_AGG(DISTINCT co.name, ', ') AS production_companies
FROM 
    movie_keyword mk
JOIN 
    aka_title at ON mk.movie_id = at.id
JOIN 
    cast_info c ON at.id = c.movie_id
LEFT JOIN 
    aka_name a ON c.person_id = a.person_id
LEFT JOIN 
    movie_companies mc ON at.id = mc.movie_id
LEFT JOIN 
    company_name co ON mc.company_id = co.id
JOIN 
    movie_hierarchy mh ON mh.movie_id = at.id
WHERE 
    mh.depth < 3 
GROUP BY 
    mk.keyword, a.name
HAVING 
    COUNT(DISTINCT mh.movie_id) > 5 AND AVG(COALESCE(c.nr_order, 0)) < 10
ORDER BY 
    total_movies DESC, avg_order ASC;