WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL

    UNION ALL

    
    SELECT 
        at.id AS movie_id,
        at.title,
        at.production_year,
        mh.depth + 1 AS depth
    FROM 
        aka_title at
    JOIN 
        movie_hierarchy mh ON at.episode_of_id = mh.movie_id
)

SELECT 
    a.name AS actor_name,
    mt.title AS movie_title,
    mh.depth AS series_depth,
    COUNT(DISTINCT kw.keyword) AS keyword_count,
    AVG(CASE WHEN mi.info_type_id = 1 THEN LENGTH(mi.info) ELSE NULL END) AS avg_info_length,
    LISTAGG(DISTINCT C.company_name, ', ') FILTER (WHERE C.name IS NOT NULL) AS companies_involved
FROM 
    cast_info ci
JOIN 
    aka_name a ON ci.person_id = a.id
JOIN 
    movie_hierarchy mh ON ci.movie_id = mh.movie_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mt.id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = mt.id
LEFT JOIN 
    company_name C ON mc.company_id = C.id
LEFT JOIN 
    movie_info mi ON mi.movie_id = mt.id
WHERE 
    mt.production_year BETWEEN 2000 AND 2023
GROUP BY 
    a.name, mt.title, mh.depth
HAVING 
    COUNT(DISTINCT kw.keyword) > 5
ORDER BY 
    series_depth DESC, actor_name ASC;