WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        c.person_id, 
        a.name AS actor_name,
        1 AS depth
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        a.name IS NOT NULL
    
    UNION ALL
    
    SELECT 
        c.person_id, 
        a.name AS actor_name,
        ah.depth + 1
    FROM 
        ActorHierarchy ah
    JOIN 
        cast_info c ON c.movie_id IN (
            SELECT 
                movie_id 
            FROM 
                cast_info 
            WHERE 
                person_id = ah.person_id
        )
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        a.name IS NOT NULL AND ah.depth < 10
),
MovieDetails AS (
    SELECT 
        t.title AS movie_title,
        t.production_year,
        COUNT(c.person_id) AS actor_count
    FROM 
        title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    WHERE 
        t.production_year >= 2000
    GROUP BY 
        t.id, t.title, t.production_year
),
FilteredMovies AS (
    SELECT 
        md.movie_title,
        md.production_year,
        md.actor_count,
        RANK() OVER (PARTITION BY md.production_year ORDER BY md.actor_count DESC) AS rank_within_year
    FROM 
        MovieDetails md
    WHERE 
        md.actor_count > 0
),
ActorInfo AS (
    SELECT 
        ah.actor_name,
        COUNT(DISTINCT f.movie_title) AS movies_played,
        ARRAY_AGG(DISTINCT f.movie_title) AS movie_titles
    FROM 
        ActorHierarchy ah
    JOIN 
        FilteredMovies f ON f.actor_count > 1
    GROUP BY 
        ah.actor_name
)
SELECT 
    ai.actor_name,
    ai.movies_played,
    CASE 
        WHEN ai.movies_played IS NULL THEN 'No Movies'
        ELSE 'Movies List: ' || array_to_string(ai.movie_titles, ', ')
    END AS movies_details,
    COALESCE(fm.movie_title, 'N/A') AS movie_of_interest,
    fm.production_year AS year_of_interest,
    fm.actor_count AS count_of_cast
FROM 
    ActorInfo ai
LEFT JOIN 
    FilteredMovies fm ON fm.rank_within_year <= 3
WHERE 
    ai.movies_played >= 1 
ORDER BY 
    ai.movies_played DESC, 
    fm.production_year DESC;