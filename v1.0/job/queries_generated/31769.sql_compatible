
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000 
    
    UNION ALL
    
    SELECT 
        m2.id AS movie_id,
        m2.title,
        m2.production_year,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title m2 ON ml.linked_movie_id = m2.id
)
SELECT 
    DISTINCT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COALESCE(c.role_id, -1) AS role_id,
    ROW_NUMBER() OVER (PARTITION BY a.id ORDER BY t.production_year DESC) AS role_rank,
    (SELECT COUNT(*) 
     FROM complete_cast cc 
     WHERE cc.movie_id = t.id) AS total_cast_count,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
FROM 
    aka_name a
LEFT JOIN 
    cast_info ci ON a.person_id = ci.person_id
LEFT JOIN 
    aka_title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_info mi ON t.id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Summary')
LEFT JOIN 
    role_type r ON r.id = ci.role_id
LEFT JOIN 
    movie_companies mc ON t.id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
WHERE 
    t.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('feature', 'tv movie'))
    AND a.name IS NOT NULL
    AND (ci.note IS NULL OR ci.note <> 'uncredited')
    AND NOT EXISTS (
        SELECT 1
        FROM complete_cast cc 
        WHERE cc.movie_id = t.id AND cc.subject_id = ci.id
    )
GROUP BY 
    a.name, t.title, t.production_year, c.role_id
HAVING 
    COUNT(DISTINCT k.keyword) > 1
ORDER BY 
    actor_name, production_year DESC;
