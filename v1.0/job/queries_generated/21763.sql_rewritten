WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM
        aka_title AS mt
    WHERE
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
        
    UNION ALL
    
    SELECT
        m.linked_movie_id AS movie_id,
        t.title,
        t.production_year,
        mh.depth + 1
    FROM
        movie_link AS m
    JOIN 
        MovieHierarchy AS mh ON m.movie_id = mh.movie_id
    JOIN
        aka_title AS t ON m.linked_movie_id = t.id
    WHERE
        t.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
)

SELECT
    ak.name AS actor_name,
    t.title AS movie_title,
    mh.depth AS movie_depth,
    COALESCE(mk.keyword, 'No Keyword') AS movie_keyword,
    ROW_NUMBER() OVER (PARTITION BY ak.name ORDER BY mh.depth DESC) AS rank_within_actor,
    COUNT(CASE WHEN mi.info IS NOT NULL THEN 1 END) OVER (PARTITION BY ak.name) AS non_null_info_count,
    CASE 
        WHEN ak.name IS NULL THEN 'Unknown Actor'
        ELSE ak.name
    END AS resolved_actor_name
FROM
    cast_info AS ci
JOIN
    aka_name AS ak ON ci.person_id = ak.person_id
JOIN
    MovieHierarchy AS mh ON ci.movie_id = mh.movie_id
LEFT JOIN
    movie_keyword AS mk ON mh.movie_id = mk.movie_id
LEFT JOIN
    movie_info AS mi ON mh.movie_id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
WHERE
    ak.id IS NOT NULL 
    AND (mh.depth < 3 OR ak.md5sum IS NULL)
    AND (NOT EXISTS (SELECT 1 FROM company_name WHERE name LIKE '%Inc%' AND ak.id IS NOT NULL))
ORDER BY
    actor_name, movie_depth DESC, movie_title;