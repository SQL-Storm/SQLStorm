
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.imdb_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        at.imdb_id,
        mh.level + 1
    FROM 
        movie_link ml
    INNER JOIN
        aka_title at ON ml.movie_id = at.id
    INNER JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    ak.name,
    STRING_AGG(DISTINCT th.title, ', ') FILTER (WHERE th.title IS NOT NULL) AS titles,
    COUNT(DISTINCT th.movie_id) AS total_movies,
    COUNT(DISTINCT c.role_id) AS distinct_roles,
    AVG(CASE WHEN mi.info IS NOT NULL THEN LENGTH(mi.info) ELSE 0 END) AS avg_info_length,
    MAX(th.production_year) AS last_release_year,
    COALESCE(MIN(th.production_year), 'No movies released') AS first_release_year
FROM 
    aka_name ak
LEFT JOIN 
    cast_info c ON ak.person_id = c.person_id
LEFT JOIN 
    title th ON c.movie_id = th.id
LEFT JOIN 
    movie_info mi ON th.id = mi.movie_id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'plot')
LEFT JOIN 
    (SELECT movie_id, COUNT(*) AS review_count FROM movie_info WHERE info_type_id = (SELECT id FROM info_type WHERE info = 'review') GROUP BY movie_id) rev ON th.id = rev.movie_id
LEFT JOIN 
    (SELECT movie_id, COUNT(DISTINCT keyword_id) AS keyword_count FROM movie_keyword GROUP BY movie_id) kw ON th.id = kw.movie_id
WHERE 
    ak.name IS NOT NULL 
AND 
    ak.name <> '' 
GROUP BY 
    ak.name
HAVING 
    COUNT(DISTINCT th.movie_id) > 0
AND 
    MAX(th.production_year) >= (EXTRACT(YEAR FROM CURRENT_DATE) - 10) 
ORDER BY 
    total_movies DESC,
    distinct_roles DESC;
