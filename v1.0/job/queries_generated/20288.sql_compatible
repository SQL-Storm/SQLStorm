
WITH RECURSIVE actor_hierarchy AS (
    SELECT 
        ca.person_id,
        ca.movie_id,
        ca.nr_order,
        1 AS depth
    FROM 
        cast_info ca
    INNER JOIN aka_name an ON ca.person_id = an.person_id
    WHERE 
        an.name IS NOT NULL AND an.name <> ''
    
    UNION ALL
    
    SELECT 
        ca.person_id,
        ca.movie_id,
        ca.nr_order,
        ah.depth + 1
    FROM 
        actor_hierarchy ah
    JOIN cast_info ca ON ah.movie_id = ca.movie_id
    WHERE 
        ca.person_id <> ah.person_id
)

SELECT 
    DISTINCT a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT ah.movie_id) OVER (PARTITION BY a.person_id) AS movie_count,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    COALESCE(ct.kind, 'Unknown') AS company_type,
    CASE 
        WHEN COUNT(DISTINCT ah.movie_id) > 5 THEN 'Prolific Actor'
        ELSE 'Emerging Actor'
    END AS actor_status
FROM 
    aka_name a 
LEFT JOIN cast_info c ON a.person_id = c.person_id 
LEFT JOIN aka_title t ON c.movie_id = t.movie_id 
LEFT JOIN movie_companies mc ON t.id = mc.movie_id 
LEFT JOIN company_type ct ON mc.company_type_id = ct.id 
LEFT JOIN movie_keyword mk ON t.id = mk.movie_id 
LEFT JOIN keyword kw ON mk.keyword_id = kw.id 
LEFT JOIN actor_hierarchy ah ON c.movie_id = ah.movie_id
WHERE 
    a.name IS NOT NULL 
    AND (t.production_year >= 2000 OR t.production_year IS NULL) 
    AND (ct.kind != 'Independent' OR ct.kind IS NULL)
GROUP BY 
    a.person_id, a.name, t.title, t.production_year, ct.kind
HAVING 
    COUNT(DISTINCT ah.movie_id) > 2
ORDER BY 
    movie_count DESC, actor_name ASC;
