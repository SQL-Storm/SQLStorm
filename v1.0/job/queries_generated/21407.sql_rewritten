WITH recursive movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM
        aka_title mt
    WHERE
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.depth + 1
    FROM
        movie_link ml
    JOIN
        aka_title at ON ml.linked_movie_id = at.id
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT
    ak.name AS actor_name,
    mt.title AS movie_title,
    mh.depth AS movie_depth,
    COUNT(DISTINCT mi.info) AS movie_info_count,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    COALESCE(cc.name, 'Unknown Company') AS production_company,
    AVG(COALESCE(mi.rating, 0)) AS avg_movie_rating
FROM
    cast_info ci
JOIN
    aka_name ak ON ci.person_id = ak.person_id
JOIN
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN
    movie_info mi ON mt.id = mi.movie_id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'rating')
LEFT JOIN
    movie_companies mc ON mt.id = mc.movie_id
LEFT JOIN 
    company_name cc ON mc.company_id = cc.id
LEFT JOIN
    movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN
    keyword kw ON mk.keyword_id = kw.id
JOIN
    movie_hierarchy mh ON mt.id = mh.movie_id
WHERE
    mt.production_year BETWEEN 1990 AND 2023
    AND ak.name IS NOT NULL
    AND (ak.md5sum IS NOT NULL OR ak.md5sum IS NOT NULL)  
GROUP BY
    ak.name, mt.title, mh.depth, cc.name
HAVING
    COUNT(DISTINCT mi.info) > 2 
ORDER BY
    movie_depth DESC, actor_name, movie_title;