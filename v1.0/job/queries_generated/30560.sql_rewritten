WITH RECURSIVE actor_hierarchy AS (
    SELECT 
        a.id AS actor_id,
        a.name AS actor_name,
        0 AS level
    FROM aka_name a
    WHERE a.name LIKE 'J%' 
    
    UNION ALL
    
    SELECT 
        a.id,
        a.name,
        ah.level + 1 
    FROM aka_name a
    JOIN cast_info ci ON ci.person_id = a.person_id
    JOIN actor_hierarchy ah ON ah.actor_id = ci.person_id
),
movie_data AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        COUNT(DISTINCT mc.company_id) AS company_count,
        COALESCE(SUM(CASE WHEN km.keyword IS NOT NULL THEN 1 ELSE 0 END), 0) AS keyword_count
    FROM 
        aka_title t
    LEFT JOIN 
        complete_cast cc ON cc.movie_id = t.id
    LEFT JOIN 
        cast_info ci ON ci.movie_id = t.id
    LEFT JOIN 
        movie_companies mc ON mc.movie_id = t.id
    LEFT JOIN 
        movie_keyword mk ON mk.movie_id = t.id
    LEFT JOIN 
        keyword km ON km.id = mk.keyword_id
    WHERE 
        t.production_year IS NOT NULL
    GROUP BY 
        t.title, t.production_year
),
ranked_movies AS (
    SELECT 
        md.title,
        md.production_year,
        md.actor_count,
        md.company_count,
        md.keyword_count,
        RANK() OVER (PARTITION BY md.production_year ORDER BY md.actor_count DESC, md.company_count DESC) AS rank_per_year
    FROM 
        movie_data md
)
SELECT 
    r.title,
    r.production_year,
    r.actor_count,
    r.company_count,
    r.keyword_count,
    ah.actor_name
FROM 
    ranked_movies r
LEFT JOIN 
    actor_hierarchy ah ON r.actor_count > 0
WHERE 
    r.rank_per_year <= 5 
ORDER BY 
    r.production_year DESC, r.actor_count DESC;