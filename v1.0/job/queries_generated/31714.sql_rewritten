WITH RECURSIVE MovieHierarchy AS (
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level
    FROM 
        aka_title m

    UNION ALL

    
    SELECT 
        l.linked_movie_id AS movie_id,
        m.title,
        m.production_year,
        h.level + 1
    FROM 
        movie_link l
    JOIN 
        aka_title m ON l.linked_movie_id = m.id
    JOIN 
        MovieHierarchy h ON l.movie_id = h.movie_id
), 

CastWithRoles AS (
    SELECT 
        c.movie_id,
        a.name AS actor_name,
        r.role AS role_name,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS actor_order
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    JOIN 
        role_type r ON c.role_id = r.id
),

MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)

SELECT 
    h.movie_id,
    h.title,
    h.production_year,
    COUNT(DISTINCT ca.actor_name) AS total_actors,
    MAX(ca.actor_order) AS highest_actor_order,
    COALESCE(mk.keywords, 'No Keywords') AS keywords,
    CASE 
        WHEN h.level > 0 THEN 'Linked Movie'
        ELSE 'Original Movie'
    END AS movie_type
FROM 
    MovieHierarchy h
LEFT JOIN 
    CastWithRoles ca ON h.movie_id = ca.movie_id
LEFT JOIN 
    MovieKeywords mk ON h.movie_id = mk.movie_id
GROUP BY 
    h.movie_id, h.title, h.production_year, mk.keywords, h.level
HAVING 
    COUNT(DISTINCT ca.actor_name) > 2 
ORDER BY 
    production_year DESC, 
    total_actors DESC;