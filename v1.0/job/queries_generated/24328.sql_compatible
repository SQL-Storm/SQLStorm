
WITH ranked_titles AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC, t.title) AS rank_within_year
    FROM 
        aka_title AS t
    WHERE 
        t.production_year IS NOT NULL AND
        t.production_year BETWEEN 1980 AND 2023
), 
cast_details AS (
    SELECT 
        c.id AS cast_id,
        p.name AS actor_name,
        t.title,
        t.production_year,
        ci.nr_order,
        RANK() OVER (PARTITION BY t.id ORDER BY ci.nr_order) AS actor_rank
    FROM 
        cast_info AS ci
    JOIN 
        aka_name AS p ON ci.person_id = p.person_id
    JOIN 
        aka_title AS t ON ci.movie_id = t.movie_id
    WHERE 
        ci.nr_order IS NOT NULL
), 
movie_info_aggregated AS (
    SELECT 
        mk.movie_id,
        COUNT(DISTINCT mk.keyword_id) AS total_keywords,
        STRING_AGG(mi.info, ', ') AS info_strings,
        MAX(CASE WHEN it.info = 'Rating' THEN mi.info END) AS highest_rating
    FROM 
        movie_keyword AS mk
    JOIN 
        movie_info AS mi ON mk.movie_id = mi.movie_id
    JOIN 
        info_type AS it ON mi.info_type_id = it.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    rt.title,
    rt.production_year,
    cd.actor_name,
    cd.actor_rank,
    mia.total_keywords,
    mia.info_strings,
    COALESCE(mia.highest_rating, 'Not Rated') AS highest_rating,
    CASE 
        WHEN rt.rank_within_year = 1 THEN 'Best Movie of the Year'
        ELSE NULL 
    END AS accolade
FROM 
    ranked_titles AS rt
LEFT JOIN 
    cast_details AS cd ON rt.title = cd.title AND rt.production_year = cd.production_year
LEFT JOIN 
    movie_info_aggregated AS mia ON rt.title_id = mia.movie_id
WHERE 
    (cd.actor_rank IS NOT NULL AND cd.actor_rank <= 3)
    OR 
    (cd.actor_rank IS NULL AND rt.production_year < 2000)
ORDER BY 
    rt.production_year DESC, 
    cd.actor_name NULLS LAST, 
    mia.total_keywords DESC;
