
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS title_rank
    FROM aka_title t
    WHERE t.production_year IS NOT NULL
),
MovieCast AS (
    SELECT 
        c.movie_id,
        a.name AS actor_name,
        a.surname_pcode,
        COUNT(c.role_id) AS role_count
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
    GROUP BY c.movie_id, a.name, a.surname_pcode
),
ExtendedMovieInfo AS (
    SELECT 
        rm.movie_id,
        rm.title,
        COALESCE(mc.role_count, 0) AS actor_role_count,
        CASE 
            WHEN rm.production_year < 2000 THEN 'Classic' 
            WHEN rm.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
            ELSE 'Contemporary' 
        END AS era,
        (SELECT STRING_AGG(DISTINCT k.keyword, ', ') 
         FROM movie_keyword mk 
         JOIN keyword k ON mk.keyword_id = k.id 
         WHERE mk.movie_id = rm.movie_id) AS keywords
    FROM RankedMovies rm
    LEFT JOIN MovieCast mc ON rm.movie_id = mc.movie_id
)

SELECT 
    em.title,
    em.production_year,
    em.actor_role_count,
    em.era,
    em.keywords,
    CASE 
        WHEN em.actor_role_count = 0 THEN 'No Cast'
        WHEN em.actor_role_count > 5 THEN 'Star-Studded'
        ELSE 'Moderate Cast'
    END AS cast_annotation
FROM ExtendedMovieInfo em
WHERE em.keywords IS NOT NULL
  AND em.actor_role_count > (SELECT AVG(mc.role_count) FROM MovieCast mc)
ORDER BY em.production_year DESC, em.title
LIMIT 10;
