
WITH RecursiveActorHierarchy AS (
    SELECT ai.person_id, ai.name, ai.md5sum, 0 AS level
    FROM aka_name ai
    WHERE ai.name IS NOT NULL
    
    UNION ALL

    SELECT ai.person_id, ai.name, ai.md5sum, rah.level + 1
    FROM aka_name ai
    JOIN RecursiveActorHierarchy rah ON ai.person_id = rah.person_id
    WHERE rah.level < 3
),
MovieDetails AS (
    SELECT 
        mt.title, 
        mt.production_year, 
        k.keyword, 
        ct.kind AS company_type,
        ROW_NUMBER() OVER(PARTITION BY mt.id ORDER BY mt.production_year DESC) AS rn
    FROM aka_title mt
    JOIN movie_keyword mk ON mt.id = mk.movie_id
    JOIN keyword k ON mk.keyword_id = k.id
    LEFT JOIN movie_companies mc ON mt.id = mc.movie_id
    LEFT JOIN company_type ct ON mc.company_type_id = ct.id
)

SELECT 
    rah.name AS actor_name,
    md.title AS movie_title,
    md.production_year AS release_year,
    NULLIF(md.keyword, '') AS keyword,
    COALESCE(md.company_type, 'Unknown') AS company_type,
    CASE 
        WHEN md.production_year IS NULL THEN 'Year Not Available'
        ELSE CONCAT('Produced in ', md.production_year)
    END AS production_info,
    COUNT(*) OVER (PARTITION BY rah.name, md.production_year) AS movie_count,
    CASE 
        WHEN md.production_year < 2000 THEN 'Classic'
        ELSE 'Modern'
    END AS movie_era
FROM RecursiveActorHierarchy rah
LEFT JOIN MovieDetails md ON rah.person_id = (
    SELECT ci.person_id 
    FROM cast_info ci 
    WHERE ci.movie_id = md.id 
    ORDER BY ci.nr_order
    LIMIT 1
)
GROUP BY rah.name, md.title, md.production_year, md.keyword, md.company_type
ORDER BY rah.name, md.production_year DESC
LIMIT 50;
