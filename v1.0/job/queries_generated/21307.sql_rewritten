WITH MovieExplore AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        k.keyword,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY k.keyword) AS keyword_rank
    FROM title t
    LEFT JOIN movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    WHERE 
        t.production_year >= 2000 AND
        (t.title ILIKE '%adventure%' OR t.title ILIKE '%fantasy%')
),
CastDetails AS (
    SELECT 
        c.movie_id,
        a.name AS actor_name,
        COUNT(*) AS actor_count,
        MAX(a.id) AS last_actor_id
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
    GROUP BY c.movie_id, a.name
),
MovieMetrics AS (
    SELECT 
        me.title_id,
        me.title,
        me.production_year,
        ARRAY_AGG(DISTINCT me.keyword) AS keywords,
        COALESCE(cd.actor_count, 0) AS total_actors
    FROM MovieExplore me
    LEFT JOIN CastDetails cd ON me.title_id = cd.movie_id
    GROUP BY me.title_id, me.title, me.production_year
)
SELECT 
    mm.title,
    mm.production_year,
    mm.keywords,
    CASE 
        WHEN mm.total_actors > 0 THEN
            'Has Actors: ' || mm.total_actors
        ELSE 
            'No Actors Available'
    END AS actor_info,
    (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = mm.title_id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'Tagline')) AS tagline_count,
    (SELECT COUNT(*) FROM movie_companies mc WHERE mc.movie_id = mm.title_id) AS company_count
FROM MovieMetrics mm
WHERE 
    mm.production_year BETWEEN 2000 AND 2023
ORDER BY 
    mm.production_year DESC,
    ARRAY_LENGTH(mm.keywords, 1) DESC,
    mm.title
FETCH FIRST 100 ROWS ONLY;