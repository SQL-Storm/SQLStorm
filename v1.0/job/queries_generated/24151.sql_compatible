
WITH RankedMovies AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS rank,
        COUNT(*) OVER (PARTITION BY t.production_year) AS total_movies,
        COALESCE(mk.keyword, 'No Keyword') AS keyword
    FROM aka_title t
    LEFT JOIN movie_keyword mk ON t.id = mk.movie_id
    WHERE t.production_year IS NOT NULL
),
QualifiedActors AS (
    SELECT
        ka.person_id,
        ka.name,
        COUNT(ci.movie_id) AS movie_count,
        AVG(CASE WHEN ci.nr_order IS NOT NULL THEN ci.nr_order ELSE 0 END) AS avg_role_order
    FROM aka_name ka
    LEFT JOIN cast_info ci ON ka.person_id = ci.person_id
    GROUP BY ka.person_id, ka.name
    HAVING COUNT(ci.movie_id) > 2 
),
ActorAwards AS (
    SELECT
        pi.person_id,
        COUNT(DISTINCT it.id) AS awards_count
    FROM person_info pi
    JOIN info_type it ON pi.info_type_id = it.id
    WHERE it.info ILIKE '%award%' 
    GROUP BY pi.person_id
),
MoviesWithAwards AS (
    SELECT
        rm.movie_id,
        rm.title,
        rm.production_year,
        COALESCE(aa.awards_count, 0) AS awards_count
    FROM RankedMovies rm
    LEFT JOIN ActorAwards aa ON rm.movie_id = aa.person_id
)
SELECT
    ma.name AS actor_name,
    mw.title AS movie_title,
    mw.production_year,
    mw.total_movies,
    mw.keyword,
    mw.awards_count,
    CASE 
        WHEN mw.awards_count > 5 THEN 'Award Magnet'
        WHEN mw.awards_count = 0 THEN 'Unlucky'
        ELSE 'Regular Winner'
    END AS award_status
FROM QualifiedActors ma
JOIN MoviesWithAwards mw ON ma.movie_count = mw.total_movies
WHERE mw.production_year BETWEEN 2000 AND 2023
ORDER BY mw.production_year DESC, ma.name ASC;
