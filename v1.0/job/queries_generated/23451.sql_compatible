
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        at.kind_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    h.title,
    h.production_year,
    COUNT(DISTINCT c.person_id) AS actor_count,
    STRING_AGG(DISTINCT ak.name, ', ') AS actors,
    COUNT(DISTINCT kw.keyword) AS keyword_count,
    CASE 
        WHEN h.production_year < 2000 THEN 'Classic Era'
        WHEN h.production_year BETWEEN 2000 AND 2010 THEN 'Recent Era'
        ELSE 'Modern Era'
    END AS era,
    ROW_NUMBER() OVER (PARTITION BY h.production_year ORDER BY actor_count DESC) AS rank
FROM 
    movie_hierarchy h
LEFT JOIN 
    complete_cast cc ON h.movie_id = cc.movie_id
LEFT JOIN 
    cast_info c ON cc.subject_id = c.id
LEFT JOIN 
    aka_name ak ON c.person_id = ak.person_id
LEFT JOIN 
    movie_keyword mk ON h.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
WHERE 
    h.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('movie', 'tv series')) 
    AND h.production_year IS NOT NULL
GROUP BY 
    h.title, h.production_year
HAVING 
    COUNT(DISTINCT c.person_id) >= 3
ORDER BY 
    h.production_year DESC,
    actor_count DESC,
    h.title
LIMIT 10 OFFSET (SELECT COUNT(DISTINCT h2.title) FROM movie_hierarchy h2 WHERE h2.production_year IS NULL) % 5
