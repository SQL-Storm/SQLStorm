
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.kind_id = 1  

    UNION ALL

    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM
        aka_title mt
    JOIN
        movie_link ml ON ml.movie_id = mh.movie_id
    JOIN
        aka_title mh ON mh.id = ml.linked_movie_id
    WHERE
        mh.kind_id = 1  
)

SELECT
    ak.name AS actor_name,
    COUNT(DISTINCT ca.movie_id) AS total_movies,
    MAX(mh.production_year) AS latest_movie_year,
    AVG(mh.level) AS avg_link_depth,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    CASE
        WHEN COUNT(DISTINCT ca.movie_id) = 0 THEN 'No Movies'
        ELSE 'Active Actor'
    END AS actor_status
FROM
    aka_name ak
LEFT JOIN
    cast_info ca ON ca.person_id = ak.person_id
LEFT JOIN
    movie_hierarchy mh ON mh.movie_id = ca.movie_id
LEFT JOIN
    movie_keyword mk ON mk.movie_id = ca.movie_id
LEFT JOIN
    keyword kw ON kw.id = mk.keyword_id
WHERE
    ak.name IS NOT NULL
GROUP BY
    ak.name, ak.person_id
HAVING
    COUNT(DISTINCT ca.movie_id) > 1 OR COUNT(DISTINCT mh.movie_id) > 0
ORDER BY
    latest_movie_year DESC
LIMIT 10;
