
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mo.id AS movie_id,
        mo.title,
        mo.production_year,
        1 AS level
    FROM 
        aka_title mo
    WHERE 
        mo.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
)

SELECT 
    m.title AS movie_title,
    m.production_year,
    COUNT(DISTINCT ci.person_id) AS total_cast,
    MAX(CASE WHEN r.role = 'Director' THEN ci.person_id END) AS director_id,
    (SELECT COUNT(DISTINCT kw.keyword) 
     FROM movie_keyword mk
     JOIN keyword kw ON mk.keyword_id = kw.id
     WHERE mk.movie_id = m.id) AS total_keywords,
    STRING_AGG(DISTINCT cn.name, ', ') AS company_names,
    AVG(CASE 
        WHEN ci.nr_order IS NOT NULL THEN ci.nr_order 
        ELSE NULL 
    END) AS avg_roles_order,
    MIN(COALESCE(ci.note, 'No Note')) AS first_note
FROM 
    MovieHierarchy mh
JOIN 
    aka_title m ON mh.movie_id = m.id
LEFT JOIN 
    cast_info ci ON m.id = ci.movie_id
LEFT JOIN 
    role_type r ON ci.role_id = r.id
LEFT JOIN 
    movie_companies mc ON m.id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
WHERE 
    m.production_year >= 2000
GROUP BY 
    m.title, m.production_year
HAVING 
    COUNT(DISTINCT ci.person_id) > 5
ORDER BY 
    m.production_year DESC, total_cast DESC;
