WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level
    FROM 
        aka_title AS m
    WHERE 
        m.production_year >= 2000

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        aka_title AS m
    INNER JOIN 
        movie_link AS ml ON m.id = ml.linked_movie_id
    INNER JOIN 
        MovieHierarchy AS mh ON ml.movie_id = mh.movie_id
),

TitleKeywords AS (
    SELECT 
        mt.movie_id,
        STRING_AGG(kw.keyword, ', ') AS keywords
    FROM 
        movie_keyword AS mk
    JOIN 
        keyword AS kw ON mk.keyword_id = kw.id
    JOIN 
        aka_title AS mt ON mk.movie_id = mt.id
    GROUP BY 
        mt.movie_id
),

DetailedCast AS (
    SELECT 
        ci.movie_id,
        a.name AS actor_name,
        r.role AS role_name,
        ROW_NUMBER() OVER(PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_rank
    FROM 
        cast_info AS ci
    INNER JOIN 
        aka_name AS a ON ci.person_id = a.person_id
    INNER JOIN 
        role_type AS r ON ci.role_id = r.id
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(tk.keywords, 'No Keywords') AS keywords,
    COALESCE(dc.actor_name, 'Unknown Actor') AS actor_name,
    COALESCE(dc.role_name, 'Unknown Role') AS role_name,
    dc.actor_rank
FROM 
    MovieHierarchy mh
LEFT JOIN 
    TitleKeywords tk ON mh.movie_id = tk.movie_id
LEFT JOIN 
    DetailedCast dc ON mh.movie_id = dc.movie_id
WHERE 
    mh.level < 3 
    AND (mh.production_year IS NOT NULL OR mh.title IS NOT NULL)
ORDER BY 
    mh.production_year DESC, mh.title;