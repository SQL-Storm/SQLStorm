WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1 AS level
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    mh.title,
    mh.production_year,
    CASE 
        WHEN mh.level = 0 THEN 'Original Movie'
        ELSE 'Linked Movie Level ' || mh.level
    END AS movie_type,
    COUNT(DISTINCT c.id) AS cast_count,
    STRING_AGG(DISTINCT CONCAT(a.name, ' as ', r.role), ', ') AS cast_details,
    AVG(CASE WHEN ii.info IS NOT NULL THEN ii.info::numeric ELSE NULL END) AS average_rating
FROM 
    movie_hierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name a ON ci.person_id = a.person_id
LEFT JOIN 
    role_type r ON ci.role_id = r.id
LEFT JOIN 
    movie_info ii ON mh.movie_id = ii.movie_id AND ii.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
GROUP BY 
    mh.title, mh.production_year, mh.level
HAVING 
    COUNT(DISTINCT c.id) > 0
ORDER BY 
    mh.production_year DESC, mh.level, cast_count DESC;