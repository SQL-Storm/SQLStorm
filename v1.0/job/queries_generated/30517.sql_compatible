
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title,
        mt.production_year,
        1 AS level,
        NULL AS parent_movie_id
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        lt.title,
        lt.production_year,
        mh.level + 1,
        mh.movie_id
    FROM 
        movie_link ml 
    JOIN 
        title lt ON ml.linked_movie_id = lt.id
    JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
)

SELECT 
    a.name AS actor_name,
    mh.title AS movie_title,
    mh.production_year,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    ROW_NUMBER() OVER (PARTITION BY a.name ORDER BY mh.production_year DESC) AS movie_rank,
    COUNT(CASE WHEN mi.info_type_id = (SELECT id FROM info_type WHERE info = 'rating') THEN 1 END) AS rating_present,
    COUNT(DISTINCT cc.role_id) AS distinct_roles,
    COUNT(DISTINCT mc.company_id) FILTER (WHERE mc.note IS NOT NULL) AS companies_involved
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    movie_hierarchy mh ON ci.movie_id = mh.movie_id
JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_info mi ON mh.movie_id = mi.movie_id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    role_type cc ON ci.role_id = cc.id
WHERE 
    a.name IS NOT NULL
    AND mh.level <= 2
GROUP BY 
    a.name, mh.title, mh.production_year
HAVING 
    COUNT(DISTINCT cc.role_id) > 1
ORDER BY 
    movie_rank ASC, a.name ASC;
