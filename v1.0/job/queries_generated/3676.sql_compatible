
WITH RankedMovies AS (
    SELECT 
        t.title,
        t.production_year,
        ka.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY COUNT(DISTINCT ci.person_id) DESC) AS actor_count
    FROM 
        aka_title AS t
    JOIN 
        cast_info AS ci ON t.id = ci.movie_id
    JOIN 
        aka_name AS ka ON ci.person_id = ka.person_id
    WHERE 
        t.production_year >= 2000
    GROUP BY 
        t.id, t.title, t.production_year, ka.name
),
MovieGenres AS (
    SELECT 
        m.id AS movie_id,
        k.keyword AS genre
    FROM 
        aka_title AS m
    JOIN 
        movie_keyword AS mk ON m.id = mk.movie_id
    JOIN 
        keyword AS k ON mk.keyword_id = k.id
)
SELECT 
    rm.title, 
    rm.production_year, 
    STRING_AGG(DISTINCT mg.genre, ', ') AS genres, 
    COALESCE(NULLIF(STRING_AGG(DISTINCT rm.actor_name, ', '), ''), 'No actors found') AS actors,
    CASE 
        WHEN rm.actor_count > 5 THEN 'High Actor Count'
        WHEN rm.actor_count BETWEEN 3 AND 5 THEN 'Medium Actor Count'
        ELSE 'Low Actor Count'
    END AS actor_count_category
FROM 
    RankedMovies AS rm
LEFT JOIN 
    MovieGenres AS mg ON rm.id = mg.movie_id
GROUP BY 
    rm.title, rm.production_year, rm.actor_count
HAVING 
    COUNT(DISTINCT mg.genre) > 1
ORDER BY 
    rm.production_year DESC, rm.title;
