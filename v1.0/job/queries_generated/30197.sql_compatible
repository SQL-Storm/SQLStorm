
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        1 AS level
    FROM
        aka_title t
    WHERE
        t.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('movie', 'tvSeries'))
    
    UNION ALL

    SELECT
        m.movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        h.level + 1
    FROM
        movie_link ml
    JOIN
        MovieHierarchy h ON ml.linked_movie_id = h.movie_id
    JOIN
        aka_title m ON ml.movie_id = m.id
)
SELECT
    mh.title AS movie_title,
    mh.production_year,
    c.name AS cast_member,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    AVG(CASE WHEN pi.info_type_id = 4 THEN CAST(pi.info AS FLOAT) END) AS average_rating,
    COUNT(DISTINCT c.person_id) OVER (PARTITION BY mh.movie_id) AS total_cast,
    COALESCE(SUM(CASE WHEN mc.note IS NOT NULL THEN 1 ELSE 0 END), 0) AS has_notes
FROM
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info c ON cc.subject_id = c.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    person_info pi ON c.person_id = pi.person_id AND pi.info_type_id = 4
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
WHERE
    mh.production_year >= 2000
GROUP BY
    mh.movie_id, mh.title, mh.production_year, c.name
HAVING 
    COUNT(DISTINCT c.person_id) > 3
ORDER BY 
    mh.production_year DESC, mh.title ASC;
