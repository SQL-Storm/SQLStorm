
WITH RankedMovies AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        ROW_NUMBER() OVER (PARTITION BY m.production_year ORDER BY m.id DESC) AS rn,
        COUNT(*) OVER (PARTITION BY m.production_year) AS movie_count
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL
),
CombinedActors AS (
    SELECT 
        ak.id AS actor_id,
        ak.name,
        COUNT(DISTINCT ci.movie_id) AS total_movies,
        COALESCE(SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END), 0) AS noted_roles
    FROM 
        aka_name ak
    LEFT JOIN 
        cast_info ci ON ak.person_id = ci.person_id
    GROUP BY 
        ak.id, ak.name
    HAVING 
        COUNT(DISTINCT ci.movie_id) > 1
),
MovieInfo AS (
    SELECT 
        mi.movie_id,
        MIN(mi.info) AS min_info,
        MAX(mi.info) AS max_info,
        STRING_AGG(DISTINCT ki.keyword, ', ') AS keywords_list
    FROM 
        movie_info mi
    JOIN 
        movie_keyword mk ON mi.movie_id = mk.movie_id
    JOIN 
        keyword ki ON mk.keyword_id = ki.id
    GROUP BY 
        mi.movie_id
)
SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    ca.name AS actor_name,
    ca.total_movies,
    ca.noted_roles,
    COALESCE(mi.min_info, 'N/A') AS min_info,
    COALESCE(mi.max_info, 'N/A') AS max_info,
    mi.keywords_list,
    CASE 
        WHEN ca.noted_roles > 5 THEN 'Frequent Actor' 
        ELSE 'Occasional Actor' 
    END AS actor_category
FROM 
    RankedMovies rm
LEFT JOIN 
    CombinedActors ca ON ca.actor_id IN (
        SELECT ci.person_id 
        FROM cast_info ci 
        WHERE ci.movie_id = rm.movie_id
    )
LEFT JOIN 
    MovieInfo mi ON rm.movie_id = mi.movie_id
WHERE 
    rm.rn <= 5 AND 
    (rm.movie_count > 20 OR rm.production_year < 2000)
ORDER BY 
    rm.production_year DESC, 
    ca.total_movies DESC NULLS LAST;
