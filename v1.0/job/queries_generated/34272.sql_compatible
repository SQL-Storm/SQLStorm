
WITH RECURSIVE ActorHierarchy AS (
    SELECT p.id AS actor_id, p.name AS actor_name, 0 AS level
    FROM aka_name p
    WHERE p.name LIKE 'A%'  

    UNION ALL

    SELECT a.id, a.name, ah.level + 1
    FROM aka_name a
    INNER JOIN cast_info ci ON a.person_id = ci.person_id
    INNER JOIN ActorHierarchy ah ON ci.movie_id = ah.actor_id  
),

RankedMovies AS (
    SELECT 
        t.title, 
        t.production_year,
        COUNT(ci.id) AS actor_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(ci.id) DESC) AS rank_per_year
    FROM title t
    LEFT JOIN cast_info ci ON t.id = ci.movie_id
    GROUP BY t.title, t.production_year
),

FilteredMovies AS (
    SELECT 
        rm.title, 
        rm.production_year,
        rm.actor_count
    FROM RankedMovies rm
    WHERE rm.rank_per_year <= 5  
)

SELECT 
    movie.title AS movie_title,
    movie.production_year,
    STRING_AGG(DISTINCT actor.actor_name, ', ') AS actors,
    COALESCE(COUNT(DISTINCT mi.info), 0) AS info_count,
    (SELECT COUNT(DISTINCT k.keyword)
     FROM movie_keyword mk
     JOIN keyword k ON mk.keyword_id = k.id
     WHERE mk.movie_id = movie.title) AS keyword_count
FROM FilteredMovies movie
LEFT JOIN movie_info mi ON movie.title = mi.info
LEFT JOIN movie_keyword mk ON mk.movie_id = movie.title 
LEFT JOIN aka_name actor ON actor.id IN (SELECT ci.person_id FROM cast_info ci WHERE ci.movie_id = movie.title)
GROUP BY movie.title, movie.production_year
ORDER BY movie.production_year DESC, info_count DESC;
