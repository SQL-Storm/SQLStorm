
WITH RecursiveTitle AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS year_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
TopMovies AS (
    SELECT 
        rt.title_id,
        rt.title,
        rt.production_year,
        rt.year_rank
    FROM 
        RecursiveTitle rt
    WHERE 
        rt.year_rank <= 5
),
MovieDetails AS (
    SELECT 
        t.title AS movie_title,
        a.name AS actor_name,
        m.info AS movie_description,
        ci.nr_order,
        COALESCE(k.keyword, 'No Keyword') AS keyword,
        COUNT(DISTINCT mc.company_id) OVER (PARTITION BY t.title_id) AS company_count,
        mini.info AS movie_info,
        t.production_year
    FROM 
        TopMovies t
    LEFT JOIN 
        cast_info ci ON ci.movie_id = t.title_id
    LEFT JOIN 
        aka_name a ON a.person_id = ci.person_id
    LEFT JOIN 
        movie_info m ON m.movie_id = t.title_id AND m.info_type_id = (SELECT id FROM info_type WHERE info = 'summary')
    LEFT JOIN 
        movie_keyword mk ON mk.movie_id = t.title_id
    LEFT JOIN 
        keyword k ON k.id = mk.keyword_id
    LEFT JOIN 
        movie_companies mc ON mc.movie_id = t.title_id
    LEFT JOIN 
        movie_info mini ON mini.movie_id = t.title_id
)
SELECT 
    md.movie_title,
    md.actor_name,
    md.movie_description,
    md.keyword,
    md.company_count,
    CASE 
        WHEN md.nr_order IS NULL THEN 'No Cast Information' 
        ELSE 'Cast Position: ' || md.nr_order 
    END AS cast_info,
    CASE 
        WHEN EXISTS (SELECT 1 FROM movie_info WHERE movie_id = md.title_id AND info_type_id IN (SELECT id FROM info_type WHERE info = 'trailer')) 
        THEN 'Trailer Available' 
        ELSE 'No Trailer Available' 
    END AS trailer_info
FROM 
    MovieDetails md
WHERE 
    md.movie_title IS NOT NULL 
    AND md.production_year >= 2000
ORDER BY 
    md.production_year DESC, 
    md.movie_title;
