WITH recursive movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        NULL AS parent_movie_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.movie_id AS parent_movie_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    WHERE 
        at.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
)

SELECT 
    mh.level,
    mh.title,
    mh.production_year,
    COALESCE(aka.name, 'Unknown') AS director_name,
    ARRAY_AGG(DISTINCT kw.keyword) AS keywords,
    SUM(CASE 
        WHEN ci.note IS NULL THEN 0 
        WHEN ci.nr_order < 10 THEN 1 
        ELSE 0 
    END) AS prominent_cast_count,
    COUNT(ci.id) FILTER (WHERE ci.nota IS NOT NULL) AS total_cast,
    AVG(person_info.info::numeric) FILTER (WHERE pi.info_type_id = (SELECT id FROM info_type WHERE info = 'Rating')) AS avg_rating
FROM 
    movie_hierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON ci.movie_id = mh.movie_id
LEFT JOIN 
    aka_name aka ON aka.person_id = ci.person_role_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    person_info pi ON pi.person_id = aka.person_id
GROUP BY 
    mh.level, mh.title, mh.production_year, aka.name
HAVING 
    COUNT(ci.id) > 0 
    AND AVG(pi.info::numeric) IS NOT NULL
ORDER BY 
    mh.level ASC, 
    mh.production_year DESC;