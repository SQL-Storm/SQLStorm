
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT kc.id) AS keyword_count,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
        STRING_AGG(DISTINCT c.note, ', ') AS cast_notes,
        RANK() OVER (ORDER BY COUNT(DISTINCT kc.id) DESC) AS movie_rank
    FROM 
        aka_title t
    JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    JOIN 
        keyword k ON mk.keyword_id = k.id
    LEFT JOIN 
        complete_cast cc ON t.id = cc.movie_id
    LEFT JOIN 
        cast_info c ON cc.subject_id = c.person_id AND cc.movie_id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
TopMovies AS (
    SELECT 
        movie_id,
        title,
        production_year,
        keyword_count,
        keywords,
        cast_notes
    FROM 
        RankedMovies
    WHERE 
        movie_rank <= 10
)
SELECT 
    tm.title,
    tm.production_year,
    tm.keyword_count,
    tm.keywords,
    STRING_AGG(DISTINCT cn.name, ', ') AS company_names,
    STRING_AGG(DISTINCT rn.role, ', ') AS roles,
    STRING_AGG(DISTINCT pi.info, ', ') AS person_info
FROM 
    TopMovies tm
LEFT JOIN 
    movie_companies mc ON tm.movie_id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
LEFT JOIN 
    cast_info ci ON tm.movie_id = ci.movie_id
LEFT JOIN 
    role_type rn ON ci.role_id = rn.id
LEFT JOIN 
    person_info pi ON ci.person_id = pi.person_id
GROUP BY 
    tm.movie_id, tm.title, tm.production_year, tm.keyword_count, tm.keywords
ORDER BY 
    tm.keyword_count DESC;
