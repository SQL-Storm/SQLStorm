
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year >= 2000

    UNION ALL

    SELECT
        ml.linked_movie_id,
        alt.title,
        alt.production_year,
        mh.level + 1
    FROM
        movie_link ml
    JOIN
        aka_title alt ON alt.id = ml.linked_movie_id
    JOIN
        MovieHierarchy mh ON mh.movie_id = ml.movie_id
    WHERE
        mh.level < 3  
),

TopActors AS (
    SELECT
        ci.person_id,
        COUNT(ci.movie_id) AS number_of_movies
    FROM
        cast_info ci
    WHERE
        ci.nr_order < 5 
    GROUP BY
        ci.person_id
    HAVING
        COUNT(ci.movie_id) > 10  
),

MoviesWithKeywords AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM
        aka_title mt
    JOIN
        movie_keyword mk ON mk.movie_id = mt.id
    JOIN
        keyword k ON k.id = mk.keyword_id
    GROUP BY
        mt.id, mt.title
),

ActorsWithMovies AS (
    SELECT
        a.name,
        m.id AS movie_id,
        m.title,
        m.production_year
    FROM
        aka_name a
    JOIN
        cast_info c ON c.person_id = a.person_id
    JOIN
        aka_title m ON m.id = c.movie_id
    WHERE
        m.production_year BETWEEN 2000 AND 2023
),

FinalReport AS (
    SELECT
        ah.name AS actor_name,
        m.title,
        m.production_year,
        mw.keywords,
        COALESCE(mh.level, 0) AS movie_hierarchy_level
    FROM
        ActorsWithMovies ah
    JOIN
        MoviesWithKeywords mw ON mw.movie_id = ah.movie_id
    LEFT JOIN
        MovieHierarchy mh ON mh.movie_id = ah.movie_id
    WHERE
        ah.name IS NOT NULL
)

SELECT
    fr.actor_name,
    fr.title,
    fr.production_year,
    fr.keywords,
    fr.movie_hierarchy_level
FROM
    FinalReport fr
WHERE
    fr.movie_hierarchy_level < 3
ORDER BY
    fr.production_year DESC, fr.actor_name, fr.title;
