WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        at.title AS movie_title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN aka_title at ON ml.linked_movie_id = at.id
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.level < 3  
),
cast_with_roles AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        rt.role AS role_name,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_rank
    FROM 
        cast_info ci
    JOIN aka_name ak ON ci.person_id = ak.person_id
    JOIN role_type rt ON ci.role_id = rt.id
),
movies_with_keywords AS (
    SELECT 
        mt.movie_id,
        string_agg(mk.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN aka_title mt ON mk.movie_id = mt.id
    GROUP BY 
        mt.movie_id
),
final_output AS (
    SELECT 
        mh.movie_id,
        mh.movie_title,
        mh.production_year,
        COALESCE(cwr.actor_name, 'Unknown Actor') AS actor_name,
        COALESCE(cwr.role_name, 'Unknown Role') AS role_name,
        mwk.keywords,
        CASE 
            WHEN mh.production_year >= 2020 THEN 'Recent'
            WHEN mh.production_year >= 2010 THEN 'Moderate'
            ELSE 'Classic'
        END AS movie_era
    FROM 
        movie_hierarchy mh
    LEFT JOIN 
        cast_with_roles cwr ON mh.movie_id = cwr.movie_id AND cwr.role_rank = 1
    LEFT JOIN 
        movies_with_keywords mwk ON mh.movie_id = mwk.movie_id
)
SELECT 
    movie_title,
    production_year,
    actor_name,
    role_name,
    keywords,
    movie_era
FROM 
    final_output
WHERE 
    movie_era IN ('Recent', 'Moderate')
ORDER BY 
    production_year DESC, movie_title;