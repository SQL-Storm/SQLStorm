
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS depth
    FROM aka_title mt
    WHERE mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        mh.depth + 1
    FROM movie_link ml
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN aka_title mt ON ml.linked_movie_id = mt.id
),
filter_movies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        mh.depth,
        COALESCE(SUM(mk.keyword_id), 0) AS keyword_count
    FROM movie_hierarchy mh
    LEFT JOIN movie_keyword mk ON mh.movie_id = mk.movie_id
    GROUP BY mh.movie_id, mh.title, mh.production_year, mh.depth
    HAVING SUM(mk.keyword_id) > 2
),
ranked_movies AS (
    SELECT 
        fm.movie_id,
        fm.title,
        fm.production_year,
        fm.depth,
        RANK() OVER (PARTITION BY fm.depth ORDER BY fm.production_year DESC) AS year_rank
    FROM filter_movies fm
)
SELECT 
    p.id AS person_id,
    p.name,
    mv.title,
    mv.production_year,
    mv.keyword_count,
    CASE 
        WHEN mv.depth = 1 THEN 'Top Level Movie'
        WHEN mv.depth = 2 THEN 'Second Level Movie'
        ELSE 'Other Movie'
    END AS movie_level,
    (SELECT COUNT(*) 
     FROM cast_info ci 
     WHERE ci.movie_id = mv.movie_id 
     AND ci.note IS NULL) AS null_cast_count,
    COALESCE((SELECT COUNT(*) 
              FROM movie_info mi 
              WHERE mi.movie_id = mv.movie_id 
              AND mi.info LIKE '%award%'), 0) AS award_info_count
FROM ranked_movies mv
JOIN cast_info ci ON ci.movie_id = mv.movie_id
JOIN aka_name p ON p.person_id = ci.person_id
WHERE mv.year_rank = 1
AND (p.name IS NOT NULL AND p.name <> '')
ORDER BY mv.production_year DESC, mv.keyword_count DESC;
