WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        CASE 
            WHEN mt.episode_of_id IS NOT NULL THEN 'Episode'
            ELSE 'Movie'
        END AS movie_type,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000  
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        a.title,
        a.production_year,
        CASE 
            WHEN a.episode_of_id IS NOT NULL THEN 'Episode'
            ELSE 'Movie'
        END AS movie_type,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title a ON ml.linked_movie_id = a.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
), RankedMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        mh.movie_type,
        ROW_NUMBER() OVER (PARTITION BY mh.movie_type ORDER BY mh.production_year DESC) AS rank
    FROM 
        MovieHierarchy mh
), CastDetails AS (
    SELECT 
        ci.movie_id,
        STRING_AGG(DISTINCT ak.name, ', ') AS cast_names,
        COUNT(DISTINCT ci.person_id) AS cast_count
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    GROUP BY 
        ci.movie_id
)
SELECT 
    rm.title,
    rm.production_year,
    rm.movie_type,
    COALESCE(cd.cast_names, 'No Cast Available') AS cast_names,
    COALESCE(cd.cast_count, 0) AS cast_count,
    rm.rank
FROM 
    RankedMovies rm
LEFT JOIN 
    CastDetails cd ON rm.movie_id = cd.movie_id
WHERE 
    rm.rank <= 5  
ORDER BY 
    rm.movie_type, rm.production_year DESC;