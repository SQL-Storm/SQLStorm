
WITH RECURSIVE cast_hierarchy AS (
    SELECT 
        ci.movie_id,
        ci.person_id,
        ci.role_id,
        1 AS depth
    FROM 
        cast_info ci
    WHERE 
        ci.note IS NOT NULL

    UNION ALL

    SELECT 
        ci.movie_id,
        ci.person_id,
        ci.role_id,
        ch.depth + 1
    FROM 
        cast_info ci
    INNER JOIN 
        cast_hierarchy ch ON ci.movie_id = ch.movie_id AND ci.role_id != ch.role_id
)

SELECT 
    t.title,
    t.production_year,
    ak.name AS actor_name,
    STRING_AGG(k.keyword, ', ') AS keywords,
    COUNT(DISTINCT cc.id) AS cast_count,
    AVG(CASE WHEN LENGTH(ak.name) > 10 THEN 1 ELSE 0 END) OVER (PARTITION BY t.production_year) AS avg_long_actor_names,
    MAX(df.salary) AS max_actor_salary,
    MIN(df.salary) AS min_actor_salary
FROM 
    title t
INNER JOIN 
    aka_title at ON at.movie_id = t.id
LEFT JOIN 
    aka_name ak ON ak.person_id IN (SELECT ci.person_id FROM cast_info ci WHERE ci.movie_id = t.id)
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = t.id
LEFT JOIN 
    keyword k ON k.id = mk.keyword_id
LEFT JOIN 
    complete_cast cc ON cc.movie_id = t.id
LEFT JOIN LATERAL (
    SELECT 
        pi.info AS salary 
    FROM 
        person_info pi 
    WHERE 
        pi.person_id = ak.person_id AND pi.info_type_id = (SELECT id FROM info_type WHERE info = 'Salary')
) df ON TRUE
WHERE 
    t.production_year BETWEEN 1990 AND 2023
GROUP BY 
    t.title, t.production_year, ak.name
HAVING 
    COUNT(DISTINCT cc.id) > 5
ORDER BY 
    t.production_year DESC, MAX(df.salary) DESC;
