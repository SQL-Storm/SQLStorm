
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000  
    
    UNION ALL
    
    SELECT 
        mt.id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        mh.level + 1
    FROM 
        aka_title mt
    JOIN 
        movie_link ml ON mt.id = ml.linked_movie_id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.level < 5  
),
RecentMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        mh.kind_id,
        COUNT(DISTINCT ci.person_id) OVER (PARTITION BY mh.movie_id) AS actor_count
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        complete_cast cc ON mh.movie_id = cc.movie_id
    LEFT JOIN 
        cast_info ci ON cc.subject_id = ci.person_id
    WHERE 
        mh.production_year = (SELECT MAX(production_year) FROM aka_title)  
),
MovieKeywords AS (
    SELECT 
        mt.id AS movie_id,
        STRING_AGG(mk.keyword, ', ') AS keywords
    FROM 
        aka_title mt
    LEFT JOIN 
        movie_keyword mk ON mt.id = mk.movie_id
    GROUP BY 
        mt.id
)
SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    rm.kind_id,
    rm.actor_count,
    COALESCE(mk.keywords, 'No keywords') AS keywords,
    CASE 
        WHEN rm.actor_count > 0 THEN 'Has Cast'
        ELSE 'No Cast'
    END AS cast_status
FROM 
    RecentMovies rm
LEFT JOIN 
    MovieKeywords mk ON rm.movie_id = mk.movie_id
WHERE 
    rm.actor_count IS NOT NULL  
ORDER BY 
    rm.actor_count DESC, 
    rm.production_year DESC;
