
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    INNER JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    INNER JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
RankedActors AS (
    SELECT 
        ci.person_id,
        a.name,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        ROW_NUMBER() OVER (PARTITION BY ci.person_id ORDER BY COUNT(DISTINCT ci.movie_id) DESC) AS rn
    FROM 
        cast_info ci
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    GROUP BY 
        ci.person_id, a.name
),
MovieInfo AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        COALESCE(mi.info, 'No additional info') AS info
    FROM 
        aka_title m
    LEFT JOIN 
        movie_info mi ON m.id = mi.movie_id AND mi.note IS NULL
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    a.name AS actor_name,
    mi.info AS movie_info,
    'Total Movies: ' || COUNT(DISTINCT ci.movie_id) AS total_movies,
    CASE 
        WHEN COUNT(DISTINCT ci.movie_id) = 0 THEN 'No roles'
        ELSE 'Acted in ' || COUNT(DISTINCT ci.movie_id) || ' movies'
    END AS role_summary
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    RankedActors a ON ci.person_id = a.person_id AND a.rn <= 5 
LEFT JOIN 
    MovieInfo mi ON mh.movie_id = mi.movie_id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, a.name, mi.info
HAVING 
    mh.production_year BETWEEN 2000 AND 2020
ORDER BY 
    mh.production_year DESC, COUNT(DISTINCT ci.movie_id) DESC;
