WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(*) DESC) AS rank
    FROM 
        aka_title t
    JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    JOIN 
        keyword k ON mk.keyword_id = k.id
    WHERE 
        k.keyword LIKE '%thriller%'
    GROUP BY 
        t.id, t.title, t.production_year
),

FilteredActors AS (
    SELECT 
        a.id AS actor_id,
        a.name,
        COUNT(DISTINCT ci.movie_id) AS movie_count
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    LEFT JOIN 
        RankedMovies rm ON ci.movie_id = rm.movie_id
    WHERE 
        rm.rank IS NOT NULL
    GROUP BY 
        a.id, a.name
),

ActorMovies AS (
    SELECT 
        fa.actor_id,
        fa.name AS actor_name,
        ARRAY_AGG(rm.title ORDER BY rm.production_year DESC) AS movies,
        STRING_AGG(DISTINCT c.kind ORDER BY c.kind) AS companies
    FROM 
        FilteredActors fa
    JOIN 
        cast_info ci ON fa.actor_id = ci.person_id
    JOIN 
        movie_companies mc ON ci.movie_id = mc.movie_id
    JOIN 
        company_name c ON mc.company_id = c.id
    JOIN 
        RankedMovies rm ON ci.movie_id = rm.movie_id
    GROUP BY 
        fa.actor_id, fa.name
)

SELECT 
    am.actor_name,
    am.movies,
    am.companies,
    COALESCE((SELECT COUNT(*) FROM person_info pi WHERE pi.person_id = am.actor_id AND pi.info_type_id IN (1, 2)), 0) AS info_count,
    (CASE 
        WHEN am.movies IS NULL THEN 'No movies found'
        ELSE 'Movies found'
    END) AS movie_status
FROM 
    ActorMovies am
WHERE 
    am.movie_count > 0
ORDER BY 
    am.actor_name;