
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS title_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
Actors AS (
    SELECT 
        a.name AS actor_name,
        COUNT(DISTINCT ci.movie_id) AS movie_count
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    GROUP BY 
        a.name
    HAVING 
        COUNT(DISTINCT ci.movie_id) > 5
),
MovieCompany AS (
    SELECT 
        mc.movie_id,
        c.name AS company_name,
        ct.kind AS company_type
    FROM 
        movie_companies mc
    JOIN 
        company_name c ON mc.company_id = c.id
    JOIN 
        company_type ct ON mc.company_type_id = ct.id
),
Keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keyword_list
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    ra.actor_name, 
    COALESCE(mk.keyword_list, 'No Keywords') AS keyword_list,
    mc.company_name,
    mc.company_type,
    CASE 
        WHEN rm.production_year < 2000 THEN 'Classic'
        WHEN rm.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Recent'
    END AS era,
    NULLIF(SUM(CASE WHEN rm.title_rank = 1 THEN 1 ELSE 0 END), 0) AS is_top_title
FROM 
    RankedMovies rm
LEFT JOIN 
    Actors ra ON ra.movie_count > 5 AND ra.movie_count = (
        SELECT 
            COUNT(DISTINCT ci.movie_id)
        FROM 
            cast_info ci
        WHERE 
            ci.movie_id = rm.movie_id
    )
LEFT JOIN 
    MovieCompany mc ON mc.movie_id = rm.movie_id
LEFT JOIN 
    Keywords mk ON mk.movie_id = rm.movie_id
GROUP BY 
    rm.movie_id, rm.title, rm.production_year, ra.actor_name, mc.company_name, mc.company_type
ORDER BY 
    rm.production_year DESC,
    rm.title;
