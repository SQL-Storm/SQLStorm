WITH RankedMovies AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM
        aka_title t
    LEFT JOIN 
        cast_info c ON t.movie_id = c.movie_id
    GROUP BY
        t.id, t.title, t.production_year
),
PopularMovies AS (
    SELECT
        rm.movie_id,
        rm.title,
        rm.production_year
    FROM
        RankedMovies rm
    WHERE
        rm.rank <= 5
),
ActorsInfo AS (
    SELECT 
        a.name,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        SUM(CASE WHEN ci.note IS NULL THEN 1 ELSE 0 END) AS null_notes_count
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    WHERE 
        a.name IS NOT NULL
    GROUP BY 
        a.name
),
MoviesWithMoreThanOneActor AS (
    SELECT 
        pw.movie_id,
        COUNT(DISTINCT ai.name) AS actor_count
    FROM 
        PopularMovies pw
    JOIN 
        cast_info ci ON pw.movie_id = ci.movie_id
    JOIN 
        aka_name na ON ci.person_id = na.person_id
    GROUP BY 
        pw.movie_id
    HAVING 
        COUNT(DISTINCT ai.name) > 1
)
SELECT 
    pm.movie_id,
    pm.title,
    pm.production_year,
    ai.name AS actor_name,
    ai.movie_count AS actor_movie_count,
    (SELECT COUNT(*) FROM movie_keyword mk WHERE mk.movie_id = pm.movie_id) AS keyword_count,
    COALESCE(ml.linked_movie_id, -1) AS linked_movie_id
FROM 
    PopularMovies pm
LEFT JOIN 
    ActorsInfo ai ON ai.movie_count > 2 
LEFT JOIN 
    movie_link ml ON ml.movie_id = pm.movie_id
WHERE 
    EXISTS (SELECT 1 FROM MoviesWithMoreThanOneActor m WHERE m.movie_id = pm.movie_id)
ORDER BY 
    pm.production_year DESC,
    pm.title ASC;