
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        t.id AS movie_id,
        t.title AS movie_title,
        t.production_year,
        m.linked_movie_id,
        1 AS depth
    FROM 
        title t
    LEFT JOIN 
        movie_link m ON t.id = m.movie_id
    WHERE 
        t.production_year >= 2000  

    UNION ALL

    SELECT 
        t.id,
        t.title,
        t.production_year,
        m.linked_movie_id,
        mh.depth + 1
    FROM 
        movie_hierarchy mh
    JOIN 
        movie_link m ON mh.linked_movie_id = m.movie_id
    JOIN 
        title t ON m.linked_movie_id = t.id
)

SELECT 
    mh.movie_id,
    mh.movie_title,
    mh.production_year,
    mh.depth,
    COUNT(DISTINCT ci.person_id) AS total_cast,
    STRING_AGG(DISTINCT ak.name, ', ') AS cast_names,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    CASE 
        WHEN COUNT(DISTINCT mk.keyword) > 0 THEN AVG(l.info)
        ELSE NULL 
    END AS average_rating
FROM 
    movie_hierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON cc.subject_id = ci.person_id
LEFT JOIN 
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    movie_info l ON mh.movie_id = l.movie_id AND l.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')  
GROUP BY 
    mh.movie_id, mh.movie_title, mh.production_year, mh.depth
ORDER BY 
    mh.production_year DESC, total_cast DESC;
