
WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        c.person_id,
        c.movie_id,
        a.name AS actor_name,
        1 AS level
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        a.name IS NOT NULL

    UNION ALL

    SELECT 
        ch.person_id,
        ch.movie_id,
        a.name AS actor_name,
        ah.level + 1
    FROM 
        cast_info ch
    JOIN 
        ActorHierarchy ah ON ch.movie_id = ah.movie_id
    JOIN 
        aka_name a ON ch.person_id = a.person_id
    WHERE 
        a.name IS NOT NULL AND ah.level < 5
),

MovieRanks AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        RANK() OVER (PARTITION BY m.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS actor_count_rank,
        COUNT(DISTINCT c.person_id) AS total_actors
    FROM 
        title m
    LEFT JOIN 
        cast_info c ON m.id = c.movie_id
    WHERE 
        m.production_year IS NOT NULL
    GROUP BY 
        m.id, m.title, m.production_year
),

MovieKeywords AS (
    SELECT 
        m.id AS movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        title m
    JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        m.id
)

SELECT 
    t.title,
    t.production_year,
    COALESCE(mr.actor_count_rank, 0) AS rank_by_actor_count,
    COALESCE(mk.keywords, 'No Keywords') AS keywords,
    ah.actor_name,
    ah.level AS actor_level
FROM 
    title t
LEFT JOIN 
    MovieRanks mr ON t.id = mr.movie_id
LEFT JOIN 
    MovieKeywords mk ON t.id = mk.movie_id
LEFT JOIN 
    ActorHierarchy ah ON t.id = ah.movie_id
WHERE 
    (t.production_year IS NOT NULL AND t.production_year >= 2000) OR 
    (ah.actor_name IS NOT NULL AND ah.actor_name LIKE '%Smith%')
ORDER BY 
    t.production_year DESC, rank_by_actor_count ASC, ah.actor_level
LIMIT 100;
