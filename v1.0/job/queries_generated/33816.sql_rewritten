WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level
    FROM aka_title mt
    WHERE mt.production_year >= 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM movie_link ml
    JOIN aka_title at ON ml.linked_movie_id = at.id
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    at.title AS movie_title,
    at.production_year,
    ARRAY_AGG(DISTINCT k.keyword) AS keywords,
    COALESCE(SUM(CASE WHEN cast.role_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS roles_count,
    AVG(mv.production_year) OVER (PARTITION BY ak.id) AS avg_year_per_actor,
    ROW_NUMBER() OVER (PARTITION BY ak.id ORDER BY at.production_year DESC) AS movie_rank,
    NULLIF(COUNT(DISTINCT cast.movie_id), 0) AS total_movies,
    rank() OVER (ORDER BY at.production_year DESC) AS production_rank
FROM aka_name ak
JOIN cast_info cast ON ak.person_id = cast.person_id
JOIN aka_title at ON cast.movie_id = at.id
LEFT JOIN movie_keyword mk ON mk.movie_id = at.id
LEFT JOIN keyword k ON mk.keyword_id = k.id
LEFT JOIN movie_hierarchy mh ON mh.movie_id = at.id
WHERE at.production_year IS NOT NULL
GROUP BY ak.id, ak.name, at.title, at.production_year
HAVING COUNT(DISTINCT cast.movie_id) > 5
ORDER BY movie_rank, ak.name;