
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        m.imdb_index,
        1 AS level
    FROM
        aka_title m
    WHERE
        m.production_year > 2000

    UNION ALL

    SELECT
        ml.linked_movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        t.imdb_index,
        mh.level + 1
    FROM
        movie_link ml
    JOIN
        title t ON ml.linked_movie_id = t.id
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE
        mh.level < 5
)

SELECT
    mh.title,
    mh.production_year,
    COUNT(DISTINCT cc.person_id) AS actor_count,
    AVG(COALESCE(CAST(p.info AS INTEGER), 0)) AS average_actor_age,
    STRING_AGG(DISTINCT ak.name, ', ') AS all_names,
    SUM(CASE WHEN k.keyword IS NOT NULL THEN 1 ELSE 0 END) AS keyword_count,
    ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY COUNT(DISTINCT cc.person_id) DESC) AS rank
FROM
    movie_hierarchy mh
LEFT JOIN
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN
    person_info p ON cc.subject_id = p.person_id AND p.info_type_id = (SELECT id FROM info_type WHERE info = 'age')
LEFT JOIN
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN
    keyword k ON mk.keyword_id = k.id
LEFT JOIN
    aka_name ak ON cc.person_id = ak.person_id
WHERE
    mh.production_year IS NOT NULL
GROUP BY
    mh.movie_id, mh.title, mh.production_year
HAVING
    COUNT(DISTINCT cc.person_id) > 1
ORDER BY
    mh.production_year DESC,
    actor_count DESC;
