
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS actor_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.movie_id = c.movie_id
    WHERE 
        t.production_year IS NOT NULL
    GROUP BY 
        t.id, t.title, t.production_year
), 
TopMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.actor_count
    FROM 
        RankedMovies rm
    WHERE 
        rm.rank <= 5
),
GenreKeywords AS (
    SELECT 
        m.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        movie_keyword m
    JOIN 
        keyword k ON m.keyword_id = k.id
    GROUP BY 
        m.movie_id
),
ActorDetails AS (
    SELECT 
        a.id AS actor_id,
        a.name,
        COUNT(DISTINCT ci.movie_id) AS movie_count
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    WHERE 
        a.name IS NOT NULL AND a.name <> ''
    GROUP BY 
        a.id, a.name
)
SELECT 
    tm.title,
    tm.production_year,
    tm.actor_count,
    COALESCE(gk.keywords, 'No Keywords') AS genre_keywords,
    ad.name AS actor_description,
    CASE 
        WHEN ad.movie_count > 5 THEN 'Prolific Actor' 
        WHEN ad.movie_count IS NULL THEN 'New Actor' 
        ELSE 'Regular Actor' 
    END AS actor_category
FROM 
    TopMovies tm
LEFT JOIN 
    GenreKeywords gk ON tm.movie_id = gk.movie_id
LEFT JOIN 
    ActorDetails ad ON tm.movie_id IN (
        SELECT 
            ci.movie_id 
        FROM 
            cast_info ci 
        WHERE 
            ci.person_id IN (SELECT person_id FROM aka_name WHERE name = ad.name)
    )
ORDER BY 
    tm.production_year DESC, 
    tm.actor_count DESC, 
    ad.movie_count DESC;
