
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank,
        COUNT(DISTINCT c.person_id) AS actor_count
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.movie_id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
TopMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.actor_count
    FROM 
        RankedMovies rm
    WHERE 
        rm.rank <= 5
),
MoviesWithCompanyInfo AS (
    SELECT 
        tm.movie_id,
        tm.title,
        tm.actor_count,
        COALESCE(GROUP_CONCAT(DISTINCT cn.name), 'No Company') AS companies
    FROM 
        TopMovies tm
    LEFT JOIN 
        movie_companies mc ON tm.movie_id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    GROUP BY 
        tm.movie_id, tm.title, tm.actor_count
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    mwc.movie_id,
    mwc.title,
    mwc.production_year,
    mwc.actor_count,
    mwc.companies,
    COALESCE(mk.keywords, 'No Keywords') AS keywords,
    CASE 
        WHEN mwc.actor_count > 10 THEN 'Popular'
        WHEN mwc.actor_count BETWEEN 5 AND 10 THEN 'Moderate'
        ELSE 'Niche'
    END AS popularity_category
FROM 
    MoviesWithCompanyInfo mwc
LEFT JOIN 
    MovieKeywords mk ON mwc.movie_id = mk.movie_id
WHERE 
    mwc.actor_count > 0
ORDER BY 
    mwc.actor_count DESC, mwc.title;
