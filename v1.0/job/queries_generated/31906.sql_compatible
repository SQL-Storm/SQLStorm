
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year, 
        NULL AS parent_movie_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL

    UNION ALL

    SELECT 
        et.id AS movie_id, 
        et.title, 
        et.production_year,
        mh.movie_id AS parent_movie_id,
        mh.level + 1
    FROM 
        aka_title et
    JOIN 
        MovieHierarchy mh ON et.episode_of_id = mh.movie_id
), 

MovieKeywords AS (
    SELECT
        mt.id AS movie_id,
        ARRAY_AGG(mk.keyword) AS keywords
    FROM 
        aka_title mt
    LEFT JOIN 
        movie_keyword mk ON mt.id = mk.movie_id
    GROUP BY 
        mt.id
),

CastDetails AS (
    SELECT
        ci.movie_id,
        ak.name AS actor_name,
        rt.role AS role,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_order
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    JOIN 
        role_type rt ON ci.role_id = rt.id
),

TopMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        COUNT(cd.actor_name) AS actor_count,
        ARRAY_TO_STRING(mk.keywords, ', ') AS keywords
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        CastDetails cd ON mh.movie_id = cd.movie_id
    LEFT JOIN 
        MovieKeywords mk ON mh.movie_id = mk.movie_id
    GROUP BY 
        mh.movie_id, mh.title
    HAVING 
        COUNT(cd.actor_name) > 5
    ORDER BY 
        actor_count DESC
    LIMIT 10
)

SELECT 
    tm.title, 
    tm.actor_count,
    COALESCE(tm.keywords, 'No keywords') AS keywords,
    CASE 
        WHEN tb.level > 1 THEN 'Part of a series'
        ELSE 'Standalone movie'
    END AS movie_type
FROM 
    TopMovies tm
LEFT JOIN 
    MovieHierarchy tb ON tm.movie_id = tb.movie_id
ORDER BY 
    tm.actor_count DESC, 
    tm.title;
