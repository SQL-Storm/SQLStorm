
WITH ranked_titles AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.id) AS year_rank
    FROM 
        title t
    WHERE 
        t.production_year IS NOT NULL
),
actor_counts AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS actor_count
    FROM 
        cast_info c
    GROUP BY 
        c.movie_id
),
movie_info_extended AS (
    SELECT 
        m.movie_id,
        m.info,
        it.info AS info_type,
        COALESCE(NULLIF(m.note, ''), 'No Notes') AS movie_note,
        COALESCE(m.info, 'N/A') AS default_info
    FROM 
        movie_info m
    LEFT JOIN 
        info_type it ON m.info_type_id = it.id
    WHERE 
        m.info IS NOT NULL OR m.note IS NOT NULL
),
actor_titles AS (
    SELECT 
        a.name AS actor_name,
        t.title AS movie_title,
        t.production_year
    FROM 
        aka_name a
    JOIN 
        cast_info c ON a.person_id = c.person_id
    JOIN 
        aka_title t ON c.movie_id = t.movie_id
    WHERE 
        c.note IS NULL OR c.note <> 'Cameo' 
)
SELECT 
    r.production_year,
    r.title,
    COUNT(DISTINCT a.actor_name) AS unique_actors,
    MAX(CASE WHEN it.info IS NOT NULL THEN it.info ELSE 'No Info' END) AS info_summary,
    STRING_AGG(DISTINCT m.movie_note, '; ') AS notes
FROM 
    ranked_titles r
LEFT JOIN 
    actor_titles a ON r.title = a.movie_title AND r.production_year = a.production_year
LEFT JOIN 
    actor_counts ac ON ac.movie_id = r.title_id
LEFT JOIN 
    movie_info_extended m ON m.movie_id = r.title_id
LEFT JOIN 
    movie_keyword k ON k.movie_id = r.title_id
WHERE 
    r.year_rank <= 10 
GROUP BY 
    r.production_year, r.title
HAVING 
    COUNT(DISTINCT a.actor_name) > 3
ORDER BY 
    r.production_year DESC, unique_actors DESC;
