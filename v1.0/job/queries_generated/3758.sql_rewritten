WITH RankedMovies AS (
    SELECT 
        a.title, 
        a.production_year,
        COUNT(DISTINCT c.person_id) AS actor_count,
        ROW_NUMBER() OVER (PARTITION BY a.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM 
        aka_title a
    LEFT JOIN 
        cast_info c ON a.id = c.movie_id
    GROUP BY 
        a.id
),
ActorInfo AS (
    SELECT 
        n.name AS actor_name, 
        a.title, 
        a.production_year,
        c.nr_order,
        CASE 
            WHEN p.info IS NOT NULL THEN p.info 
            ELSE 'No info' 
        END AS additional_info
    FROM 
        RankedMovies a
    JOIN 
        cast_info c ON a.id = c.movie_id
    JOIN 
        aka_name n ON c.person_id = n.person_id
    LEFT JOIN 
        person_info p ON n.person_id = p.person_id AND p.info_type_id = 1  
    WHERE 
        a.rank <= 5
),
MovieKeywords AS (
    SELECT 
        m.movie_id, 
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword m
    JOIN 
        keyword k ON m.keyword_id = k.id
    GROUP BY 
        m.movie_id
)
SELECT 
    a.actor_name,
    a.title,
    a.production_year,
    a.nr_order,
    COALESCE(mk.keywords, 'No keywords') AS keywords,
    CASE 
        WHEN a.production_year < 2000 THEN 'Classic'
        ELSE 'Modern'
    END AS movie_era
FROM 
    ActorInfo a
LEFT JOIN 
    MovieKeywords mk ON a.title = (SELECT title FROM aka_title WHERE id = mk.movie_id)
ORDER BY 
    a.production_year DESC, 
    a.actor_name;