
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        1 AS depth,
        NULL AS parent_id
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL
    
    UNION ALL
    
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        mh.depth + 1,
        mh.movie_id AS parent_id
    FROM 
        aka_title mt
    JOIN 
        MovieHierarchy mh ON mt.episode_of_id = mh.movie_id
),

CastWithRoles AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        rt.role AS role_name,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_rank
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    JOIN 
        role_type rt ON ci.role_id = rt.id
),

MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS all_keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)

SELECT 
    mh.movie_id,
    mh.movie_title,
    COALESCE(cwr.actor_name, 'Unknown Actor') AS actor_name,
    COALESCE(cwr.role_name, 'Unknown Role') AS role_name,
    mh.depth,
    mk.all_keywords,
    CASE 
        WHEN mh.depth > 1 THEN 'Part of a Series'
        ELSE 'Standalone Movie'
    END AS movie_type,
    COUNT(DISTINCT cwr.role_name) OVER (PARTITION BY mh.movie_id) AS unique_roles_count
FROM 
    MovieHierarchy mh
LEFT JOIN 
    CastWithRoles cwr ON mh.movie_id = cwr.movie_id
LEFT JOIN 
    MovieKeywords mk ON mh.movie_id = mk.movie_id
GROUP BY 
    mh.movie_id, 
    mh.movie_title, 
    cwr.actor_name, 
    cwr.role_name, 
    mh.depth, 
    mk.all_keywords, 
    cwr.role_rank
ORDER BY 
    mh.movie_id, 
    cwr.role_rank;
