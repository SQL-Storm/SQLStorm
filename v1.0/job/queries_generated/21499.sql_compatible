
WITH RecursiveMovieCTE AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mk.keyword,
        RANK() OVER (PARTITION BY mt.id ORDER BY mk.keyword) AS keyword_rank
    FROM aka_title mt
    LEFT JOIN movie_keyword mk ON mt.id = mk.movie_id
    WHERE mt.production_year IS NOT NULL
),
FilteredCast AS (
    SELECT 
        ci.movie_id,
        ci.person_id,
        COUNT(*) FILTER (WHERE ci.role_id IS NOT NULL) AS role_count
    FROM cast_info ci
    GROUP BY ci.movie_id, ci.person_id
    HAVING COUNT(*) > 1
),
TitleInfo AS (
    SELECT 
        ti.id AS title_id,
        ti.title,
        COALESCE(mi.info, 'No Description') AS info_description,
        CASE 
            WHEN ti.production_year < 2000 THEN 'Classic'
            ELSE 'Modern'
        END AS era
    FROM title ti
    LEFT JOIN movie_info mi ON ti.id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Overview')
),
KeywordCount AS (
    SELECT 
        movie_id,
        COUNT(keyword) AS total_keywords
    FROM RecursiveMovieCTE
    GROUP BY movie_id
),
FinalOutput AS (
    SELECT 
        t.title AS Movie_Title,
        t.era AS Era,
        kc.total_keywords AS Keyword_Count,
        fc.role_count AS Unique_Cast_Count,
        ROW_NUMBER() OVER (ORDER BY kc.total_keywords DESC) AS rank
    FROM TitleInfo t
    JOIN KeywordCount kc ON t.title_id = kc.movie_id
    LEFT JOIN FilteredCast fc ON t.title_id = fc.movie_id
    WHERE kc.total_keywords > 0 AND fc.role_count IS NOT NULL
)
SELECT 
    fo.*,
    (SELECT STRING_AGG(akn.name, ', ') 
     FROM aka_name akn 
     WHERE akn.person_id IN (SELECT ci.person_id FROM cast_info ci WHERE ci.movie_id = fo.Movie_Title)) AS Cast_Names
FROM FinalOutput fo
WHERE fo.rank <= 10
ORDER BY fo.Keyword_Count DESC, fo.Unique_Cast_Count DESC;
