
WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        p.id AS person_id,
        a.name AS actor_name,
        0 AS level
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    JOIN 
        title t ON ci.movie_id = t.id
    JOIN 
        aka_title at ON t.id = at.movie_id
    JOIN 
        aka_name an ON an.person_id = ci.person_id
    LEFT JOIN 
        person_info pi ON pi.person_id = a.person_id
    WHERE 
        t.production_year >= 2000 
        AND t.production_year <= 2023
        AND pi.info IS NOT NULL

    UNION ALL

    SELECT 
        ci.person_id,
        a.name AS actor_name,
        ah.level + 1
    FROM 
        ActorHierarchy ah
    JOIN 
        cast_info ci ON ah.person_id = ci.person_id
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    JOIN 
        title t ON ci.movie_id = t.id
    WHERE 
        ah.level < 5  
)
SELECT 
    ah.actor_name,
    COUNT(DISTINCT t.id) AS movie_count,
    SUM(CASE WHEN t.kind_id IS NOT NULL THEN 1 ELSE 0 END) AS valid_movies,
    MAX(COALESCE(t.production_year, 0)) AS latest_movie_year,
    STRING_AGG(DISTINCT COALESCE(an.md5sum, 'UNKNOWN'), ', ') AS actor_md5s,
    ARRAY_AGG(DISTINCT k.keyword) AS associated_keywords
FROM 
    ActorHierarchy ah
JOIN 
    cast_info ci ON ah.person_id = ci.person_id
JOIN 
    title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    aka_name an ON an.person_id = ah.person_id
GROUP BY 
    ah.actor_name
HAVING 
    COUNT(DISTINCT t.id) > 5  
ORDER BY 
    movie_count DESC, 
    latest_movie_year DESC;
