WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        ca.person_id,
        ca.movie_id,
        ca.nr_order,
        1 AS level
    FROM 
        cast_info ca
    WHERE 
        ca.role_id IS NOT NULL  
    UNION ALL
    SELECT 
        ca.person_id,
        ca.movie_id,
        ca.nr_order,
        ah.level + 1
    FROM 
        cast_info ca
    INNER JOIN 
        ActorHierarchy ah ON ca.movie_id = ah.movie_id AND ca.nr_order > ah.nr_order
),
RankedMovies AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(ca.id) DESC) AS rank
    FROM 
        title t
    LEFT JOIN 
        cast_info ca ON t.id = ca.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
)
SELECT 
    ak.name AS actor_name,
    tm.title AS movie_title,
    tm.production_year,
    ah.level AS number_of_roles,
    COALESCE(CT.kind, 'Unknown') AS company_type,
    COUNT(DISTINCT kc.keyword) AS keywords_count,
    ROUND(AVG(CASE WHEN pi.info IS NOT NULL THEN LENGTH(pi.info) ELSE 0 END), 2) AS avg_info_length
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    title tm ON ci.movie_id = tm.id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = tm.id
LEFT JOIN 
    company_type CT ON mc.company_type_id = CT.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = tm.id
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id
LEFT JOIN 
    person_info pi ON ak.person_id = pi.person_id
LEFT JOIN 
    ActorHierarchy ah ON ci.movie_id = ah.movie_id AND ak.person_id = ah.person_id
WHERE 
    tm.production_year >= 2000 
    AND ak.name IS NOT NULL 
    AND ah.level > 1
GROUP BY 
    ak.name, tm.title, tm.production_year, ah.level, CT.kind
HAVING 
    COUNT(DISTINCT mk.keyword_id) > 5 
ORDER BY 
    tm.production_year DESC, COUNT(DISTINCT mk.keyword_id) DESC;