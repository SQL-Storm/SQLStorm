WITH RECURSIVE movie_chain AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS chain_level,
        ARRAY[m.id] AS path
    FROM 
        aka_title m
    WHERE 
        m.kind_id = 1  

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mc.chain_level + 1 AS chain_level,
        mc.path || m.id
    FROM 
        movie_link ml
    JOIN 
        movie_chain mc ON ml.movie_id = mc.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    WHERE 
        NOT m.id = ANY(mc.path)  
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT mt.keyword_id) AS keyword_count,
    LISTAGG(DISTINCT k.keyword, ', ') WITHIN GROUP (ORDER BY k.keyword) AS keywords,
    AVG(CASE WHEN pi.info_type_id = 2 THEN CAST(pi.info AS FLOAT) END) AS average_rating,  
    ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY COUNT(DISTINCT t.id) DESC) AS actor_rank
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    aka_title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    person_info pi ON pi.person_id = a.person_id AND pi.info_type_id IN (1, 2)  
WHERE 
    t.production_year BETWEEN 2000 AND 2020
    AND (t.title ILIKE '%Adventure%' OR t.title ILIKE '%Action%')
GROUP BY 
    a.person_id, a.name, t.title, t.production_year
HAVING 
    COUNT(DISTINCT t.id) > 2
ORDER BY 
    average_rating DESC, 
    actor_rank;