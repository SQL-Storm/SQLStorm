WITH RecursiveMovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        lm.linked_movie_id,
        lm.movie_title,
        lm.production_year,
        rm.depth + 1
    FROM 
        movie_link lm
    JOIN 
        RecursiveMovieHierarchy rm ON lm.movie_id = rm.movie_id
), 
FilteredMovies AS (
    SELECT 
        mh.movie_id,
        mh.movie_title,
        mh.production_year,
        COUNT(c.person_id) AS cast_count,
        CASE WHEN mh.production_year < 2000 THEN 'Classic' ELSE 'Modern' END AS era
    FROM 
        RecursiveMovieHierarchy mh
    LEFT JOIN 
        cast_info c ON mh.movie_id = c.movie_id
    GROUP BY 
        mh.movie_id, mh.movie_title, mh.production_year
    HAVING 
        COUNT(c.person_id) IS NOT NULL AND COUNT(c.person_id) > 0
), 
TopMovies AS (
    SELECT 
        f.movie_id,
        f.movie_title,
        f.production_year,
        f.cast_count,
        f.era,
        RANK() OVER (PARTITION BY f.era ORDER BY f.cast_count DESC) AS rank
    FROM 
        FilteredMovies f
)
SELECT 
    tm.movie_id,
    tm.movie_title,
    tm.production_year,
    tm.cast_count,
    tm.era,
    (SELECT AVG(cast_count) FROM FilteredMovies) AS avg_cast_count,
    (SELECT COUNT(*) FROM movie_companies mc WHERE mc.movie_id = tm.movie_id AND mc.notes IS NOT NULL) AS company_count,
    CASE 
        WHEN tm.rank <= 5 THEN 'Top Rank'
        ELSE 'Below Top Rank'
    END AS rank_category
FROM 
    TopMovies tm
WHERE 
    (tm.era = 'Classic' AND tm.production_year < 1980)
    OR (tm.era = 'Modern' AND tm.production_year >= 2000)
ORDER BY 
    tm.era, tm.rank;