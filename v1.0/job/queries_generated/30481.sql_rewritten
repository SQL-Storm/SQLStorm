WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        1 AS level
    FROM 
        aka_title t
    WHERE 
        t.episode_of_id IS NULL

    UNION ALL

    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        mh.level + 1
    FROM 
        aka_title t
    INNER JOIN 
        movie_hierarchy mh ON t.episode_of_id = mh.movie_id
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    m.production_year,
    CASE 
        WHEN t.kind_id IS NULL THEN 'Unknown'
        ELSE kt.kind
    END AS movie_kind,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    SUM(CASE 
        WHEN ci.note IS NOT NULL THEN 1 
        ELSE 0 END) AS cast_note_count,
    MAX(CASE 
        WHEN ci.nr_order IS NULL THEN 0 
        ELSE ci.nr_order END) AS max_order_in_cast,
    STRING_AGG(DISTINCT COALESCE(ci.note, 'No Note'), '; ') AS cast_notes
FROM 
    movie_hierarchy m
JOIN 
    cast_info ci ON m.movie_id = ci.movie_id
JOIN 
    aka_name a ON a.person_id = ci.person_id
JOIN 
    aka_title t ON t.id = m.movie_id
LEFT JOIN 
    kind_type kt ON t.kind_id = kt.id
LEFT JOIN 
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id
WHERE 
    m.level <= 2
GROUP BY 
    a.name, t.title, m.production_year, kt.kind

HAVING 
    COUNT(DISTINCT kc.keyword) > 0
ORDER BY 
    m.production_year DESC, actor_name;