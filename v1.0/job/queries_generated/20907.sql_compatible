
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        t.id AS movie_id, 
        t.title, 
        t.production_year,
        1 AS level,
        NULL AS parent_id
    FROM title t
    WHERE t.production_year >= 2000
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        lt.title,
        lt.production_year,
        mh.level + 1,
        mh.movie_id
    FROM movie_link ml
    JOIN title lt ON ml.linked_movie_id = lt.id
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
),
actor_role_count AS (
    SELECT 
        ci.person_id,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        SUM(CASE WHEN r.role = 'actor' THEN 1 ELSE 0 END) AS actor_count
    FROM cast_info ci
    LEFT JOIN role_type r ON ci.role_id = r.id
    GROUP BY ci.person_id
),
movie_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ' ORDER BY k.keyword) AS all_keywords
    FROM movie_keyword mk
    JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY mk.movie_id
),
best_movies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COALESCE(mk.all_keywords, 'No Keywords') AS keywords,
        COALESCE(ac.movie_count, 0) AS movie_count,
        COALESCE(ac.actor_count, 0) AS actor_count
    FROM movie_hierarchy mh
    LEFT JOIN movie_keywords mk ON mh.movie_id = mk.movie_id
    LEFT JOIN actor_role_count ac ON mh.movie_id = ac.person_id
    WHERE mh.level = 1 AND (ac.actor_count IS NULL OR ac.actor_count > 2)
)
SELECT 
    bm.title,
    bm.production_year,
    bm.keywords,
    CASE 
        WHEN bm.actor_count > 5 THEN 'A-list'
        WHEN bm.actor_count BETWEEN 3 AND 5 THEN 'B-list'
        ELSE 'C-list'
    END AS actor_classification,
    ROW_NUMBER() OVER (ORDER BY bm.production_year DESC, bm.actor_count DESC) AS rank
FROM best_movies bm
WHERE bm.keywords NOT LIKE '%horror%'
ORDER BY bm.production_year DESC, bm.actor_count DESC
LIMIT 10;
