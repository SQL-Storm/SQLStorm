
WITH RECURSIVE MovieChain AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000
    
    UNION ALL

    SELECT 
        m.id,
        m.title,
        m.production_year,
        mc.depth + 1
    FROM 
        aka_title m
    INNER JOIN 
        movie_link ml ON m.id = ml.linked_movie_id
    INNER JOIN 
        MovieChain mc ON ml.movie_id = mc.movie_id
    WHERE 
        mc.depth < 5
),

ActorStatistics AS (
    SELECT 
        ak.name AS actor_name,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        AVG(t.production_year) AS average_year,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        aka_name ak
    JOIN 
        cast_info ci ON ak.person_id = ci.person_id
    JOIN 
        aka_title t ON ci.movie_id = t.id
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    WHERE 
        ak.name IS NOT NULL
        AND ak.name NOT LIKE '%(voice)%' 
    GROUP BY 
        ak.name
    HAVING 
        COUNT(DISTINCT ci.movie_id) >= 3
),

CompanyMovies AS (
    SELECT 
        cn.name AS company_name,
        COUNT(DISTINCT mc.movie_id) AS movie_count,
        SUM(CASE WHEN ci.note IS NULL THEN 0 ELSE 1 END) AS non_null_count
    FROM 
        company_name cn
    JOIN 
        movie_companies mc ON cn.id = mc.company_id
    LEFT JOIN 
        movie_info mi ON mc.movie_id = mi.movie_id
    LEFT JOIN 
        cast_info ci ON ci.movie_id = mc.movie_id
    WHERE 
        cn.country_code IS NOT NULL
    GROUP BY 
        cn.name
)

SELECT 
    ms.movie_id,
    ms.title,
    ms.production_year,
    COALESCE(as.actor_name, 'Unknown Actor') AS actor_name,
    COALESCE(cs.company_name, 'Unknown Company') AS company_name,
    ms.depth,
    as.movie_count AS actor_movie_count,
    cs.movie_count AS company_movie_count,
    as.average_year,
    CASE 
        WHEN as.average_year IS NULL THEN 'No Data' 
        WHEN as.average_year < 2010 THEN 'Old' 
        ELSE 'New'
    END AS era,
    cs.non_null_count AS relevant_movies
FROM 
    MovieChain ms
LEFT JOIN 
    ActorStatistics as ON ms.movie_id IN (SELECT movie_id FROM cast_info WHERE person_id IN (SELECT person_id FROM aka_name WHERE name IS NOT NULL))
LEFT JOIN 
    CompanyMovies cs ON ms.movie_id IN (SELECT movie_id FROM movie_companies WHERE company_id IN (SELECT id FROM company_name WHERE name IS NOT NULL))
WHERE 
    ms.depth = 3 OR as.actor_name IS NOT NULL
ORDER BY 
    ms.production_year DESC, 
    actor_movie_count DESC NULLS LAST;
