
WITH Recursive_Aggregated AS (
    SELECT 
        a.person_id,
        STRING_AGG(a.name, ', ') AS all_names,
        COUNT(DISTINCT a.movie_id) AS movie_count
    FROM 
        aka_name AS a 
    JOIN 
        cast_info AS c ON a.person_id = c.person_id
    GROUP BY 
        a.person_id
),
Ranked_Movies AS (
    SELECT 
        t.id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY 
            COUNT(DISTINCT c.person_id) DESC) AS movie_rank,
        NULLIF(SUM(CASE WHEN kw.keyword IS NOT NULL THEN 1 ELSE 0 END), 0) AS keyword_count
    FROM 
        aka_title AS t
    LEFT JOIN 
        movie_keyword AS mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword AS kw ON mk.keyword_id = kw.id
    LEFT JOIN 
        cast_info AS c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
Person_Info_Stats AS (
    SELECT 
        p.id AS person_id,
        COALESCE(SUM(CASE WHEN pi.info_type_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS info_count,
        AVG(CASE WHEN pi.info IS NOT NULL THEN LENGTH(pi.info) END) AS avg_info_length
    FROM 
        name AS p
    LEFT JOIN 
        person_info AS pi ON p.id = pi.person_id
    GROUP BY 
        p.id
)
SELECT 
    ra.all_names,
    rm.title,
    rm.production_year,
    rm.movie_rank,
    p.info_count,
    p.avg_info_length,
    CASE
        WHEN rm.keyword_count IS NULL THEN 'No keywords'
        WHEN rm.keyword_count > 10 THEN 'Has many keywords'
        ELSE 'Few keywords'
    END AS keyword_status
FROM 
    Ranked_Movies AS rm
JOIN 
    Recursive_Aggregated AS ra ON ra.movie_count >= 1
LEFT JOIN 
    Person_Info_Stats AS p ON p.person_id = ra.person_id
WHERE 
    rm.movie_rank <= 5 
    AND (rm.production_year IS NULL OR rm.production_year BETWEEN 2000 AND 2023)
ORDER BY 
    rm.production_year DESC, rm.movie_rank ASC, p.info_count DESC
FETCH FIRST 100 ROWS ONLY;
