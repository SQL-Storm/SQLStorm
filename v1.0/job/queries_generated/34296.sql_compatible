
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1 AS level
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
)

SELECT 
    p.name AS person_name,
    c.role_id,
    COUNT(DISTINCT m.movie_id) AS total_movies,
    AVG(EXTRACT(YEAR FROM CURRENT_DATE) - m.production_year) AS avg_movie_age,
    STRING_AGG(DISTINCT m.title, ', ') AS movie_titles,
    MAX(m.production_year) AS latest_movie_year,
    COUNT(DISTINCT mh.movie_id) AS related_movies,
    CASE 
        WHEN COUNT(DISTINCT mh.movie_id) > 0 THEN 'Has Related Movies'
        ELSE 'No Related Movies'
    END AS relation_status
FROM 
    cast_info c
JOIN 
    aka_name p ON c.person_id = p.person_id
JOIN 
    aka_title m ON c.movie_id = m.id
LEFT JOIN 
    MovieHierarchy mh ON m.id = mh.movie_id
WHERE 
    m.production_year BETWEEN 2000 AND 2023
    AND p.name IS NOT NULL
GROUP BY 
    p.name, c.role_id
HAVING 
    COUNT(DISTINCT m.movie_id) > 5
ORDER BY 
    total_movies DESC;
