
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        mh.level + 1
    FROM 
        aka_title m
    INNER JOIN 
        movie_link ml ON m.id = ml.linked_movie_id
    INNER JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    mh.movie_id,
    mh.movie_title,
    mh.production_year,
    COUNT(mi.info) AS info_count,
    STRING_AGG(DISTINCT c.name, ', ') AS cast_names,
    SUM(CASE WHEN mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'Budget') THEN CAST(mi.info AS INTEGER) ELSE 0 END) AS total_budget,
    AVG(mi.info_length) FILTER (WHERE mi.info IS NOT NULL) AS avg_info_length,
    ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY COUNT(mi.info) DESC) AS rank,
    COALESCE(MAX(ct.kind), 'N/A') AS company_type
FROM 
    MovieHierarchy mh
LEFT JOIN 
    movie_info mi ON mh.movie_id = mi.movie_id
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name c ON ci.person_id = c.person_id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    company_type ct ON mc.company_type_id = ct.id
WHERE 
    mh.level <= 3
GROUP BY 
    mh.movie_id, mh.movie_title, mh.production_year
HAVING 
    COUNT(DISTINCT mi.info) > 0
ORDER BY 
    mh.production_year ASC, rank;
