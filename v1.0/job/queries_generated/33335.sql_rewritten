WITH RECURSIVE movie_hierarchy AS (
    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level,
        CAST(m.title AS VARCHAR(255)) AS path
    FROM
        aka_title m
    WHERE
        m.kind_id = 1  

    UNION ALL

    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1,
        CAST(mh.path || ' -> ' || m.title AS VARCHAR(255)) AS path
    FROM
        movie_link ml
    JOIN
        aka_title m ON ml.linked_movie_id = m.id
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.level,
    mh.path,
    COUNT(DISTINCT c.person_id) AS total_cast,
    STRING_AGG(DISTINCT a.name, ', ') AS cast_names,
    AVG(CASE WHEN p.info_type_id = 1 THEN CAST(p.info AS INTEGER) END) AS average_age,
    SUM(CASE WHEN k.keyword IS NOT NULL THEN 1 ELSE 0 END) AS keyword_count,
    MAX(CASE WHEN ci.note IS NOT NULL THEN 'Exists' ELSE 'No Note' END) AS note_existence
FROM
    movie_hierarchy mh
LEFT JOIN
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN
    cast_info c ON cc.subject_id = c.person_id
LEFT JOIN
    aka_name a ON c.person_id = a.person_id
LEFT JOIN
    person_info p ON c.person_id = p.person_id AND p.info_type_id = 2 
LEFT JOIN
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN
    keyword k ON mk.keyword_id = k.id
LEFT JOIN
    cast_info ci ON c.movie_id = ci.movie_id
WHERE
    mh.production_year > 2000
GROUP BY
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.level,
    mh.path
HAVING
    COUNT(DISTINCT c.person_id) > 2
ORDER BY
    mh.production_year DESC,
    total_cast DESC;