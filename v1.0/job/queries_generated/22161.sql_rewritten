WITH RankedMovies AS (
    SELECT 
        at.production_year,
        at.title,
        COUNT(DISTINCT ci.person_id) AS total_cast,
        ROW_NUMBER() OVER (PARTITION BY at.production_year ORDER BY COUNT(DISTINCT ci.person_id) DESC) AS rank_by_cast
    FROM 
        aka_title at
    LEFT JOIN 
        cast_info ci ON at.movie_id = ci.movie_id
    GROUP BY 
        at.production_year, at.title
),

MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),

CompCast AS (
    SELECT 
        ci.movie_id,
        MAX(ct.kind) AS company_type,
        COUNT(DISTINCT ci.person_id) AS num_actors
    FROM 
        cast_info ci
    JOIN 
        movie_companies mc ON ci.movie_id = mc.movie_id
    JOIN 
        company_type ct ON mc.company_type_id = ct.id
    GROUP BY 
        ci.movie_id
),

FinalOutput AS (
    SELECT 
        rm.title,
        rm.production_year,
        COALESCE(mk.keywords, 'No Keywords') AS keywords,
        COALESCE(cc.company_type, 'Unknown') AS company_type,
        rm.total_cast,
        CASE 
            WHEN rm.total_cast > 10 THEN 'Large Cast'
            WHEN rm.total_cast BETWEEN 5 AND 10 THEN 'Medium Cast'
            ELSE 'Small Cast'
        END AS cast_size_category
    FROM 
        RankedMovies rm
    LEFT JOIN 
        MovieKeywords mk ON rm.title = mk.movie_id
    LEFT JOIN 
        CompCast cc ON rm.title = cc.movie_id
    WHERE 
        rm.production_year BETWEEN 1990 AND 2020
        AND (cc.num_actors IS NULL OR cc.num_actors > 3) 
)

SELECT 
    production_year,
    COUNT(DISTINCT title) AS number_of_movies,
    AVG(total_cast) AS avg_cast_size,
    STRING_AGG(DISTINCT cast_size_category, ', ') AS cast_size_distribution
FROM 
    FinalOutput
GROUP BY 
    production_year
ORDER BY 
    production_year DESC
LIMIT 10;