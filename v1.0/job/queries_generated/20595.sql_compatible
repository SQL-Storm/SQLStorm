
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        COALESCE(mt.production_year, 0) AS production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT
        mc.linked_movie_id,
        tt.title,
        COALESCE(tt.production_year, 0) AS production_year,
        mh.level + 1
    FROM
        movie_link mc
    JOIN
        title tt ON mc.linked_movie_id = tt.id
    INNER JOIN
        movie_hierarchy mh ON mc.movie_id = mh.movie_id
)
SELECT
    ak.name AS actor_name,
    ti.title AS movie_title,
    mh.production_year,
    COUNT(DISTINCT ci.id) AS cast_count,
    ROW_NUMBER() OVER (PARTITION BY ak.id ORDER BY mh.level DESC) AS movie_level,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    CASE 
        WHEN mh.production_year = 0 THEN 'Unknown Year'
        WHEN mh.production_year < 2000 THEN 'Classic'
        ELSE 'Modern'
    END AS era,
    SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS notes_present,
    COUNT(*) FILTER (WHERE ci.note IS NULL) AS null_notes_count
FROM
    aka_name ak
JOIN
    cast_info ci ON ak.person_id = ci.person_id
JOIN
    title ti ON ci.movie_id = ti.id
LEFT JOIN
    movie_keyword mk ON ti.id = mk.movie_id
LEFT JOIN
    keyword k ON mk.keyword_id = k.id
LEFT JOIN
    movie_hierarchy mh ON ti.id = mh.movie_id
WHERE
    ak.name IS NOT NULL
GROUP BY
    ak.name, ti.title, mh.production_year
HAVING
    COUNT(DISTINCT ci.movie_id) > 2
ORDER BY
    cast_count DESC,
    ak.name ASC
LIMIT 50;
