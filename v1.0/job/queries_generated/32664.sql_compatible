
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level,
        ARRAY[mt.title] AS path
    FROM 
        aka_title mt
    WHERE
        mt.episode_of_id IS NULL 

    UNION ALL

    SELECT 
        et.id AS movie_id,
        et.title,
        et.production_year,
        mh.level + 1,
        path || et.title
    FROM 
        aka_title et
    JOIN 
        movie_hierarchy mh ON et.episode_of_id = mh.movie_id
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.level,
    COUNT(DISTINCT mc.company_id) AS num_companies,
    STRING_AGG(DISTINCT c.name, ', ') AS company_names,
    AVG(CASE 
            WHEN mi.info IS NOT NULL THEN LENGTH(mi.info)
            ELSE 0 
        END) AS avg_info_length,
    CASE 
        WHEN COUNT(DISTINCT k.keyword) > 0 THEN TRUE 
        ELSE FALSE 
    END AS has_keywords
FROM 
    movie_hierarchy mh
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    company_name c ON mc.company_id = c.id
LEFT JOIN 
    movie_info mi ON mh.movie_id = mi.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.level
HAVING 
    mh.level BETWEEN 1 AND 3
ORDER BY 
    mh.level, avg_info_length DESC;
