
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    m.title AS main_movie,
    STRING_AGG(DISTINCT mk.keyword, ', ') AS keywords,
    COUNT(DISTINCT ci.person_id) AS cast_count,
    AVG(mi.info_value) AS avg_rating,
    STRING_AGG(DISTINCT cn.name, ', ') AS production_companies,
    CASE 
        WHEN AVG(mi.info_value) IS NULL THEN 'No ratings available'
        ELSE CAST(AVG(mi.info_value) AS VARCHAR)
    END AS average_rating_text,
    ROW_NUMBER() OVER (PARTITION BY m.production_year ORDER BY m.title) AS movie_rank
FROM 
    MovieHierarchy m
LEFT JOIN 
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN 
    cast_info ci ON m.movie_id = ci.movie_id
LEFT JOIN 
    movie_companies mc ON m.movie_id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
LEFT JOIN 
    movie_info mi ON m.movie_id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Rating')
GROUP BY 
    m.movie_id, m.title, m.production_year
ORDER BY 
    m.production_year DESC, movie_rank
LIMIT 10;
