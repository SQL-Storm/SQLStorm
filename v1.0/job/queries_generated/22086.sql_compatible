
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        'Original' AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT
        ml.linked_movie_id AS movie_id,
        m.title,
        m.production_year,
        CONCAT('Link to: ', mh.title) AS level
    FROM
        movie_link ml
    JOIN aka_title m ON m.id = ml.linked_movie_id
    JOIN movie_hierarchy mh ON mh.movie_id = ml.movie_id
    WHERE
        ml.link_type_id IN (SELECT id FROM link_type WHERE link = 'similar')
        AND m.production_year IS NOT NULL
), cast_summary AS (
    SELECT
        ci.movie_id,
        COUNT(DISTINCT ci.person_id) AS total_actors,
        STRING_AGG(DISTINCT CONCAT(an.name, ' as ', rt.role), ', ') AS actor_roles
    FROM
        cast_info ci
    JOIN aka_name an ON an.person_id = ci.person_id
    JOIN role_type rt ON rt.id = ci.role_id
    GROUP BY ci.movie_id
)
SELECT
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(cs.total_actors, 0) AS total_actors,
    COALESCE(cs.actor_roles, '[No Actors]') AS actor_roles,
    COUNT(DISTINCT mk.keyword) AS total_keywords,
    COUNT(DISTINCT mc.company_id) AS total_companies
FROM
    movie_hierarchy mh
LEFT JOIN cast_summary cs ON cs.movie_id = mh.movie_id
LEFT JOIN movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN movie_companies mc ON mc.movie_id = mh.movie_id
GROUP BY
    mh.movie_id, mh.title, mh.production_year
HAVING
    COALESCE(cs.total_actors, 0) > 0 OR COUNT(DISTINCT mc.company_id) > 0
ORDER BY
    mh.production_year DESC,
    mh.title ASC
LIMIT 100;
