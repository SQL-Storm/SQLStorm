
WITH RECURSIVE movie_hierarchy AS (
    SELECT mt.movie_id, 
           COUNT(*) AS level,
           ARRAY[mt.movie_id] AS path
    FROM movie_link ml
    JOIN aka_title mt ON ml.movie_id = mt.id
    GROUP BY mt.movie_id
    UNION ALL
    SELECT ml.linked_movie_id, 
           mh.level + 1,
           mh.path || ml.linked_movie_id
    FROM movie_link ml
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
),
actor_counts AS (
    SELECT ci.movie_id, 
           COUNT(DISTINCT ci.person_id) AS actor_count
    FROM cast_info ci
    GROUP BY ci.movie_id
),
movie_info_summary AS (
    SELECT at.title, 
           at.production_year,
           COALESCE(ac.actor_count, 0) AS actor_count,
           mh.level AS hierarchy_level,
           STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM aka_title at
    LEFT JOIN actor_counts ac ON at.id = ac.movie_id
    LEFT JOIN movie_hierarchy mh ON at.id = mh.movie_id
    LEFT JOIN movie_keyword mk ON at.id = mk.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY at.title, at.production_year, ac.actor_count, mh.level
)
SELECT mis.title, 
       mis.production_year, 
       mis.actor_count,
       CASE
           WHEN mis.actor_count = 0 THEN 'No actors'
           WHEN mis.actor_count < 5 THEN 'Fewer than 5 actors'
           ELSE '5 or more actors'
       END AS actor_count_summary,
       mis.hierarchy_level
FROM movie_info_summary mis
WHERE mis.hierarchy_level IS NOT NULL
ORDER BY mis.actor_count DESC, mis.production_year DESC
LIMIT 10;
