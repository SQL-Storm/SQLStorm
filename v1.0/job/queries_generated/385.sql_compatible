
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(c.id) AS cast_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(c.id) DESC) AS rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
TopMovies AS (
    SELECT 
        movie_id,
        title,
        production_year
    FROM 
        RankedMovies
    WHERE 
        rank <= 5
),
MovieKeywords AS (
    SELECT 
        m.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword m
    INNER JOIN 
        keyword k ON m.keyword_id = k.id
    GROUP BY 
        m.movie_id
)
SELECT 
    t.title AS Movie_Title,
    t.production_year AS Production_Year,
    COALESCE(tk.keywords, '') AS Keywords,
    (SELECT 
        COALESCE(AVG(CAST(pi.info AS INT)), 0) 
     FROM 
        person_info pi 
     WHERE 
        pi.person_id IN (SELECT DISTINCT c.person_id FROM cast_info c WHERE c.movie_id = t.movie_id)) AS Avg_Age,
    CASE 
        WHEN t.production_year < 2000 THEN 'Classic'
        ELSE 'Modern'
    END AS Era
FROM 
    TopMovies t
LEFT JOIN 
    MovieKeywords tk ON t.movie_id = tk.movie_id
ORDER BY 
    t.production_year DESC;
