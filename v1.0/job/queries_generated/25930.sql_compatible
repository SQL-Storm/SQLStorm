
WITH MovieDetails AS (
    SELECT 
        t.title AS movie_title,
        t.production_year,
        STRING_AGG(DISTINCT cmp.name, ', ') AS production_companies,
        STRING_AGG(DISTINCT kw.keyword, ', ') AS movie_keywords
    FROM 
        title t
    JOIN 
        movie_companies mc ON t.id = mc.movie_id
    JOIN 
        company_name cmp ON mc.company_id = cmp.id
    JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    JOIN 
        keyword kw ON mk.keyword_id = kw.id
    WHERE 
        t.production_year >= 2000
    GROUP BY 
        t.id, t.title, t.production_year
),
ActorDetails AS (
    SELECT 
        a.name AS actor_name,
        COUNT(DISTINCT ci.movie_id) AS movies_count,
        STRING_AGG(DISTINCT md.movie_title, ', ') AS movies_list
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    JOIN 
        MovieDetails md ON ci.movie_id = md.movie_title  -- join based on a common identifier
    WHERE 
        a.name LIKE 'A%'
    GROUP BY 
        a.name
),
RoleStatistics AS (
    SELECT 
        rt.role AS actor_role,
        COUNT(DISTINCT ci.movie_id) AS role_count,
        AVG(t.production_year) AS avg_production_year
    FROM 
        role_type rt
    JOIN 
        cast_info ci ON ci.role_id = rt.id
    JOIN 
        title t ON ci.movie_id = t.id
    GROUP BY 
        rt.role
)
SELECT 
    md.movie_title, 
    md.production_year, 
    md.production_companies,
    ad.actor_name,
    ad.movies_count,
    ad.movies_list,
    rs.actor_role,
    rs.role_count,
    rs.avg_production_year
FROM 
    MovieDetails md
LEFT JOIN 
    ActorDetails ad ON md.movie_title = ANY(ad.movies_list)  -- This will depend on the SQL dialect, could use a different method if needed
LEFT JOIN 
    RoleStatistics rs ON rs.role_count = ad.movies_count
ORDER BY 
    md.production_year DESC, ad.movies_count DESC;
