
WITH RankedTitles AS (
    SELECT 
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC) AS title_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year >= 2000
),
ActorPerformance AS (
    SELECT 
        a.name AS actor_name,
        COUNT(ci.movie_id) AS movie_count,
        AVG(t.production_year) AS avg_production_year,
        STRING_AGG(DISTINCT at.title, ', ') AS movies
    FROM 
        cast_info ci
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    JOIN 
        RankedTitles at ON ci.movie_id = at.id
    GROUP BY 
        a.name
),
NotableActors AS (
    SELECT 
        actor_name,
        movie_count,
        avg_production_year,
        movies,
        CASE 
            WHEN movie_count > 5 THEN 'Veteran Actor'
            WHEN movie_count BETWEEN 3 AND 5 THEN 'Established Actor'
            ELSE 'Up-and-coming Actor'
        END AS actor_category
    FROM 
        ActorPerformance
)
SELECT 
    na.actor_name,
    COALESCE(na.movie_count, 0) AS movie_count,
    COALESCE(na.avg_production_year, 0) AS avg_production_year,
    na.movies,
    nt.kind AS movie_type
FROM 
    NotableActors na
LEFT JOIN 
    movie_info mi ON na.actor_name LIKE '%' || mi.info || '%'
LEFT JOIN 
    kind_type nt ON mi.info_type_id = nt.id
WHERE 
    (na.avg_production_year IS NOT NULL AND na.avg_production_year > 2010)
    OR na.actor_category = 'Veteran Actor'
ORDER BY 
    na.movie_count DESC NULLS LAST;
