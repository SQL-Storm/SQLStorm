
WITH MovieDetails AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS cast_count,
        AVG(COALESCE(mr.role_count, 0)) AS avg_roles
    FROM aka_title t
    LEFT JOIN cast_info c ON t.id = c.movie_id
    LEFT JOIN (
        SELECT 
            movie_id,
            COUNT(DISTINCT role_id) AS role_count
        FROM cast_info
        GROUP BY movie_id
    ) AS mr ON t.id = mr.movie_id
    WHERE t.production_year IS NOT NULL
    GROUP BY t.id, t.title, t.production_year
),
RankedMovies AS (
    SELECT 
        md.movie_id,
        md.title,
        md.production_year,
        md.cast_count,
        md.avg_roles,
        RANK() OVER (ORDER BY md.cast_count DESC, md.production_year DESC) AS rank
    FROM MovieDetails md
    WHERE md.cast_count > 0
),
ExtendedMovieDetails AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.cast_count,
        rm.avg_roles,
        COALESCE(mki.keyword, 'No Keywords') AS included_keywords
    FROM RankedMovies rm
    LEFT JOIN movie_keyword mk ON rm.movie_id = mk.movie_id
    LEFT JOIN keyword mki ON mk.keyword_id = mki.id
),
FinalOutput AS (
    SELECT 
        emd.*,
        CASE 
            WHEN emd.cast_count > 10 THEN 'Large Cast'
            WHEN emd.cast_count BETWEEN 5 AND 10 THEN 'Medium Cast'
            ELSE 'Small Cast'
        END AS cast_category
    FROM ExtendedMovieDetails emd
    WHERE emd.production_year BETWEEN 2000 AND 2020
)
SELECT 
    title,
    production_year,
    included_keywords,
    cast_category,
    ROW_NUMBER() OVER (PARTITION BY cast_category ORDER BY production_year DESC) AS row_num,
    CASE 
        WHEN included_keywords = 'No Keywords' THEN 'Unknown'
        ELSE 'Known'
    END AS keyword_status
FROM FinalOutput
WHERE rank <= 50
ORDER BY production_year DESC, cast_category, row_num;
