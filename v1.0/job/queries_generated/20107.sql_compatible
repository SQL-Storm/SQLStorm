
WITH RECURSIVE ActorMovies AS (
    SELECT 
        a.id AS actor_id,
        a.name,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY a.id ORDER BY t.production_year DESC) AS rn
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    JOIN 
        aka_title t ON ci.movie_id = t.id
    WHERE 
        t.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE '%Drama%')
), MovieCompanyRatings AS (
    SELECT 
        mc.movie_id,
        COALESCE(AVG(r.rating), 0) AS avg_rating,
        COUNT(DISTINCT mc.company_id) AS comp_count,
        COUNT(DISTINCT k.keyword) AS keyword_count
    FROM 
        movie_companies mc
    JOIN 
        movie_info mi ON mc.movie_id = mi.movie_id
    LEFT JOIN 
        movie_keyword mk ON mk.movie_id = mc.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    LEFT JOIN 
        (SELECT movie_id, AVG(rating) AS rating FROM ratings GROUP BY movie_id) r ON mc.movie_id = r.movie_id
    GROUP BY 
        mc.movie_id
), FilteredMovies AS (
    SELECT 
        DISTINCT t.title,
        t.production_year,
        com.avg_rating,
        com.comp_count,
        com.keyword_count
    FROM 
        aka_title t
    JOIN 
        MovieCompanyRatings com ON t.id = com.movie_id
    WHERE 
        com.avg_rating > 7.5 
        AND com.comp_count > 2 
        AND com.keyword_count > 1
),
RankedMovies AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (ORDER BY avg_rating DESC, production_year DESC) AS rank
    FROM 
        FilteredMovies
)
SELECT 
    am.actor_id,
    am.name AS actor_name,
    rm.title,
    rm.production_year,
    rm.avg_rating,
    rm.comp_count,
    rm.keyword_count,
    CASE 
        WHEN rm.rank <= 10 THEN 'Top 10'
        ELSE 'Others'
    END AS ranking_category
FROM 
    ActorMovies am
JOIN 
    RankedMovies rm ON am.title = rm.title
WHERE 
    am.rn = 1
ORDER BY 
    rm.avg_rating DESC, am.name;
