WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        0 AS level
    FROM 
        aka_title t
    WHERE 
        t.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
        
    UNION ALL
    
    SELECT 
        mt.linked_movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    WHERE 
        mh.level < 5  
),
RankedMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY mh.level) AS movie_rank
    FROM 
        MovieHierarchy mh
),
CastInfo AS (
    SELECT 
        ci.movie_id,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        STRING_AGG(DISTINCT an.name, ', ') AS actor_names
    FROM 
        cast_info ci
    JOIN 
        aka_name an ON ci.person_id = an.person_id
    GROUP BY 
        ci.movie_id
),
FilteredMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        cm.actor_count,
        cm.actor_names
    FROM 
        RankedMovies rm
    LEFT JOIN 
        CastInfo cm ON rm.movie_id = cm.movie_id
    WHERE 
        rm.movie_rank <= 5 AND
        (cm.actor_count IS NULL OR cm.actor_count >= 3)  
)
SELECT 
    fm.title,
    fm.production_year,
    COALESCE(fm.actor_count, 0) AS actor_count,
    fm.actor_names,
    CASE 
        WHEN fm.actor_count IS NOT NULL THEN 'Has Cast'
        ELSE 'No Cast Info'
    END AS cast_status
FROM 
    FilteredMovies fm
ORDER BY 
    fm.production_year DESC, 
    fm.title;