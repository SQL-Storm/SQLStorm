WITH RecursiveMovieDetails AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        a.name AS actor_name,
        c.kind AS company_kind,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY a.name) AS actor_seq,
        COALESCE(mk.keyword, 'No Keyword') AS keyword,
        m.note AS movie_note
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info ci ON t.id = ci.movie_id
    LEFT JOIN 
        aka_name a ON ci.person_id = a.person_id
    LEFT JOIN 
        movie_companies mc ON t.id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    LEFT JOIN 
        company_type c ON mc.company_type_id = c.id
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN 
        movie_info m ON t.id = m.movie_id
    WHERE 
        t.production_year IS NOT NULL AND 
        (a.name IS NOT NULL OR cn.name IS NOT NULL)
),
KeywordCount AS (
    SELECT 
        movie_id,
        COUNT(keyword) AS total_keywords
    FROM 
        movie_keyword
    GROUP BY 
        movie_id
),
FilteredMovies AS (
    SELECT 
        rmd.*,
        kc.total_keywords
    FROM 
        RecursiveMovieDetails rmd
    LEFT JOIN 
        KeywordCount kc ON rmd.movie_id = kc.movie_id
    WHERE 
        total_keywords IS NULL OR total_keywords > 1
),
RankedMovies AS (
    SELECT 
        *,
        RANK() OVER (ORDER BY production_year DESC, actor_seq) AS movie_rank
    FROM 
        FilteredMovies
)
SELECT 
    movie_id,
    title,
    production_year,
    actor_name,
    company_kind,
    keyword,
    movie_note,
    movie_rank
FROM 
    RankedMovies
WHERE 
    (producer_name IS NULL AND production_year < 2000) OR (actor_name IS NOT NULL AND movie_rank < 5)
ORDER BY 
    production_year DESC, actor_rank DESC, movie_id
OFFSET 50 ROWS FETCH NEXT 10 ROWS ONLY;