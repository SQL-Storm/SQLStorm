
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        0 AS level,
        NULL AS parent_id
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL  

    UNION ALL

    SELECT 
        mt.id AS movie_id,
        mt.title,
        mh.level + 1,
        mh.movie_id AS parent_id
    FROM 
        aka_title mt
    JOIN 
        MovieHierarchy mh ON mt.episode_of_id = mh.movie_id  
),
ActorStats AS (
    SELECT 
        ak.name AS actor_name,
        COUNT(ci.movie_id) AS movie_count,
        AVG(CASE 
            WHEN mt.production_year IS NOT NULL THEN mt.production_year 
            ELSE NULL 
        END) AS average_production_year
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    LEFT JOIN 
        aka_title mt ON ci.movie_id = mt.movie_id
    GROUP BY 
        ak.name
),
MovieKeywords AS (
    SELECT 
        mt.id AS movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        aka_title mt
    JOIN 
        movie_keyword mk ON mt.id = mk.movie_id
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mt.id
)
SELECT 
    mh.title AS movie_title,
    mh.level,
    ak.actor_name,
    as.movie_count,
    as.average_production_year,
    mk.keywords
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info ci ON ci.movie_id = mh.movie_id
LEFT JOIN 
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN 
    ActorStats as ON ak.actor_name = as.actor_name
LEFT JOIN 
    MovieKeywords mk ON mh.movie_id = mk.movie_id
WHERE 
    as.movie_count > 5  
    AND mh.level <= 2   
ORDER BY 
    mh.level, ak.actor_name;
