
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        t.title AS movie_title,
        COALESCE(mt.id, 0) AS parent_movie_id,
        1 AS level
    FROM 
        aka_title t
    LEFT JOIN 
        movie_link ml ON t.id = ml.movie_id
    LEFT JOIN 
        title m ON ml.linked_movie_id = m.id
    LEFT JOIN 
        movie_companies mc ON m.id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    WHERE 
        t.production_year IS NOT NULL
    UNION ALL
    SELECT 
        m.id AS movie_id,
        t.title AS movie_title,
        mh.movie_id AS parent_movie_id,
        mh.level + 1
    FROM 
        movie_hierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        title m ON ml.linked_movie_id = m.id
    JOIN 
        aka_title t ON m.id = t.movie_id
    WHERE 
        t.production_year IS NOT NULL
),
aggregated_cast AS (
    SELECT 
        ci.movie_id,
        STRING_AGG(a.name, ', ') AS actor_names,
        COUNT(DISTINCT ci.person_id) AS actor_count
    FROM 
        cast_info ci
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    GROUP BY 
        ci.movie_id
),
movie_ratings AS (
    SELECT 
        mi.movie_id,
        AVG(CASE WHEN mi.info_type_id IN (SELECT id FROM info_type WHERE info='rating') THEN CAST(mi.info AS FLOAT) END) AS average_rating
    FROM 
        movie_info mi
    GROUP BY 
        mi.movie_id
)
SELECT 
    mh.movie_id,
    mh.movie_title,
    COALESCE(ac.actor_names, 'No Cast') AS cast,
    COALESCE(ac.actor_count, 0) AS total_actors,
    COALESCE(mr.average_rating, 0.0) AS avg_rating,
    mh.level
FROM 
    movie_hierarchy mh
LEFT JOIN 
    aggregated_cast ac ON mh.movie_id = ac.movie_id
LEFT JOIN 
    movie_ratings mr ON mh.movie_id = mr.movie_id
WHERE 
    mh.level <= 3 
ORDER BY 
    mh.level, mr.average_rating DESC, ac.actor_count DESC
LIMIT 100;
