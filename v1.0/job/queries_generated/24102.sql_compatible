
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id, 
        t.title AS movie_title, 
        ARRAY[m.id] AS hierarchy,
        1 AS depth
    FROM 
        aka_title t
    JOIN
        movie_link ml ON t.id = ml.movie_id
    JOIN 
        title m ON ml.linked_movie_id = m.id
    WHERE 
        t.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    UNION ALL
    SELECT 
        t.id AS movie_id, 
        t.title AS movie_title, 
        mh.hierarchy || t.id,
        depth + 1
    FROM 
        aka_title t
    JOIN 
        movie_link ml ON t.id = ml.movie_id
    JOIN 
        MovieHierarchy mh ON ml.linked_movie_id = mh.movie_id
),
ActorRoles AS (
    SELECT 
        ca.person_id,
        ca.movie_id, 
        r.role,
        ROW_NUMBER() OVER (PARTITION BY ca.person_id ORDER BY ca.nr_order) AS role_order,
        COUNT(*) OVER (PARTITION BY ca.person_id) AS total_roles
    FROM 
        cast_info ca
    JOIN 
        role_type r ON ca.role_id = r.id
    WHERE 
        ca.note IS NULL
),
MovieInfoWithKeywords AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    WHERE 
        m.production_year > 2000
    GROUP BY 
        m.id, m.title
)
SELECT 
    mh.movie_title,
    ar.person_id,
    ar.role,
    ar.role_order,
    ar.total_roles,
    mi.keywords,
    COUNT(mh.movie_id) OVER (PARTITION BY ar.person_id) AS linked_movies_count,
    (SELECT COUNT(*) FROM movie_info WHERE movie_id = mh.movie_id AND info_type_id = (SELECT id FROM info_type WHERE info = 'tagline')) AS tagline_count
FROM 
    MovieHierarchy mh
LEFT JOIN 
    ActorRoles ar ON mh.movie_id = ar.movie_id
LEFT JOIN 
    MovieInfoWithKeywords mi ON mh.movie_id = mi.movie_id
WHERE 
    ar.role IS NOT NULL 
    AND (ar.total_roles > 1 OR EXISTS (
        SELECT 1 
        FROM cast_info ci 
        WHERE ci.person_id = ar.person_id AND ci.note IS NOT NULL))
ORDER BY 
    mh.depth DESC, 
    ar.role_order, 
    mh.movie_title;
