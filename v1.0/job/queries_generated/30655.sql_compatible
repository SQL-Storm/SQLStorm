
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id, 
        m.title, 
        m.production_year, 
        NULL AS parent_movie_id
    FROM aka_title m
    WHERE m.production_year >= 2000 
    UNION ALL
    SELECT 
        m.id AS movie_id, 
        m.title, 
        m.production_year, 
        mh.movie_id AS parent_movie_id
    FROM aka_title m
    JOIN movie_link ml ON m.id = ml.linked_movie_id
    JOIN MovieHierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT mc.company_id) AS num_production_companies,
    COUNT(DISTINCT k.keyword) AS num_keywords,
    AVG(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS avg_has_notes,
    ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT mc.company_id) DESC) AS rank_production_companies
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    aka_title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_companies mc ON t.id = mc.movie_id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    MovieHierarchy mh ON t.id = mh.movie_id
WHERE 
    t.production_year BETWEEN 2000 AND 2023 
    AND (a.name IS NOT NULL AND a.name <> '')
    AND (ci.note IS NULL OR ci.note LIKE '%main cast%')
GROUP BY 
    a.name, t.title, t.production_year
HAVING 
    COUNT(DISTINCT mc.company_id) > 1 
    AND AVG(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) > 0.5
ORDER BY 
    t.production_year DESC, COUNT(DISTINCT mc.company_id) DESC;
