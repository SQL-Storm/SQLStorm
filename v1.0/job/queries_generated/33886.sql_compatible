
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level,
        NULL AS parent_id
    FROM 
        aka_title AS m
    WHERE 
        m.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        mc.linked_movie_id,
        m.title,
        m.production_year,
        mh.level + 1,
        mh.movie_id
    FROM 
        movie_link AS mc
    JOIN 
        aka_title AS m ON mc.linked_movie_id = m.id
    JOIN 
        MovieHierarchy AS mh ON mh.movie_id = mc.movie_id
)
SELECT 
    m.title AS movie_title,
    m.production_year,
    COALESCE(c.name, 'Unknown Company') AS production_company,
    COUNT(DISTINCT mi.info_type_id) AS info_count,
    AVG(CASE WHEN c.country_code IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY m.id) AS has_country_code,
    ROW_NUMBER() OVER (PARTITION BY m.production_year ORDER BY m.title) AS row_num
FROM 
    aka_title AS m
LEFT JOIN 
    movie_companies AS mc ON m.id = mc.movie_id
LEFT JOIN 
    company_name AS c ON mc.company_id = c.id
LEFT JOIN 
    movie_info AS mi ON m.id = mi.movie_id
WHERE 
    m.kind_id IN (SELECT id FROM kind_type WHERE kind = 'feature')
AND 
    m.production_year >= 2000
GROUP BY 
    m.id, m.title, m.production_year, c.name
HAVING 
    COUNT(DISTINCT mi.info_type_id) > 5
ORDER BY 
    m.production_year DESC, movie_title
LIMIT 10;
