
WITH RECURSIVE ActorHierarchy AS (
    SELECT
        ci.person_id,
        ci.movie_id,
        1 AS level
    FROM
        cast_info ci
    WHERE
        ci.nr_order = 1
    
    UNION ALL
    
    SELECT
        ci.person_id,
        ci.movie_id,
        ah.level + 1
    FROM
        ActorHierarchy ah
    JOIN
        cast_info ci ON ah.movie_id = ci.movie_id AND ci.nr_order > ah.level
),
TopRoles AS (
    SELECT
        ak.name AS actor_name,
        COUNT(*) AS role_count
    FROM
        aka_name ak
    JOIN
        cast_info ci ON ak.person_id = ci.person_id
    GROUP BY
        ak.name
    HAVING
        COUNT(*) > 5
),
MovieDetails AS (
    SELECT
        mt.title,
        mt.production_year,
        mk.keyword,
        CASE WHEN ci.role_id IS NULL THEN 'No Role' ELSE rt.role END AS role
    FROM
        aka_title mt
    LEFT JOIN
        movie_keyword mk ON mt.id = mk.movie_id
    LEFT JOIN
        cast_info ci ON mt.id = ci.movie_id
    LEFT JOIN
        role_type rt ON ci.role_id = rt.id
    WHERE
        mt.production_year >= 2000
),
RankedMovies AS (
    SELECT
        md.title,
        md.production_year,
        md.keyword,
        md.role,
        RANK() OVER (PARTITION BY md.production_year ORDER BY md.role DESC) AS role_rank
    FROM
        MovieDetails md
)
SELECT
    ah.person_id,
    ah.movie_id,
    rm.title,
    rm.production_year,
    rm.keyword,
    rm.role,
    rm.role_rank,
    COALESCE(tr.role_count, 0) AS top_role_count
FROM
    ActorHierarchy ah
JOIN
    RankedMovies rm ON ah.movie_id = rm.movie_id
LEFT JOIN
    TopRoles tr ON rm.role = tr.actor_name
WHERE
    rm.role IS NOT NULL
    AND ah.level < 5
ORDER BY
    ah.person_id,
    rm.production_year DESC,
    rm.role_rank;
