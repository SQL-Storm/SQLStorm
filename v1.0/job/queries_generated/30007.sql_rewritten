WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        aka_title m
    INNER JOIN 
        movie_link ml ON m.id = ml.linked_movie_id
    INNER JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    DISTINCT
    a.name AS actor_name,
    COUNT(DISTINCT c.movie_id) AS number_of_movies,
    AVG(d.production_year) AS avg_production_year,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords_associated,
    CASE 
        WHEN COUNT(DISTINCT c.movie_id) > 5 THEN 'Highly Productive Actor'
        WHEN COUNT(DISTINCT c.movie_id) BETWEEN 3 AND 5 THEN 'Moderately Productive Actor'
        ELSE 'Less Productive Actor'
    END AS productivity_category
FROM 
    aka_name a
JOIN 
    cast_info c ON a.person_id = c.person_id
JOIN 
    movie_hierarchy d ON c.movie_id = d.movie_id
LEFT JOIN 
    movie_keyword mk ON c.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
WHERE 
    a.name IS NOT NULL
    AND d.production_year >= 2000
GROUP BY 
    a.name
HAVING 
    COUNT(DISTINCT c.movie_id) > 2
ORDER BY 
    number_of_movies DESC;