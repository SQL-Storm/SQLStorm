WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM
        movie_link ml
    JOIN
        aka_title mt ON ml.linked_movie_id = mt.id
    JOIN
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
RankedMovies AS (
    SELECT
        mh.movie_id,
        mh.title,
        mh.production_year,
        mh.level,
        ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY mh.level DESC) AS rank
    FROM
        MovieHierarchy mh
)
SELECT
    at.name AS actor_name,
    am.title AS movie_title,
    am.production_year,
    COALESCE(GROUP_CONCAT(DISTINCT k.keyword ORDER BY k.keyword), 'No keywords') AS keywords,
    COUNT(DISTINCT m.company_id) AS company_count,
    AVG(mi.info_length) AS avg_info_length,
    MAX(CASE WHEN pc.country_code IS NULL THEN 'Unknown' ELSE pc.country_code END) AS company_country
FROM
    cast_info ci
JOIN
    aka_name an ON ci.person_id = an.person_id
JOIN
    aka_title am ON ci.movie_id = am.id
LEFT JOIN
    movie_company m ON am.id = m.movie_id
LEFT JOIN
    company_name pc ON m.company_id = pc.id
LEFT JOIN
    movie_keyword mk ON am.id = mk.movie_id
LEFT JOIN
    keyword k ON mk.keyword_id = k.id
LEFT JOIN (
    SELECT
        movie_id,
        LENGTH(info) AS info_length
    FROM
        movie_info
) mi ON am.id = mi.movie_id
WHERE
    am.production_year BETWEEN 1990 AND 2023
GROUP BY
    an.name, am.title, am.production_year
HAVING
    COUNT(DISTINCT m.company_id) > 0
ORDER BY
    movie_title, production_year DESC;