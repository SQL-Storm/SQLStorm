WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL
        
    UNION ALL

    SELECT 
        m.movie_id,
        a.title,
        a.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    INNER JOIN 
        aka_title a ON ml.linked_movie_id = a.id
    INNER JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
), ranked_cast AS (
    SELECT 
        c.movie_id,
        a.name AS actor_name,
        a.person_id,
        RANK() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS actor_rank
    FROM 
        cast_info c
    INNER JOIN 
        aka_name a ON c.person_id = a.person_id
), movie_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords_list
    FROM 
        movie_keyword mk
    INNER JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
), detailed_movie_info AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        rc.actor_name,
        rc.actor_rank,
        mk.keywords_list
    FROM 
        movie_hierarchy mh
    LEFT JOIN 
        ranked_cast rc ON mh.movie_id = rc.movie_id
    LEFT JOIN 
        movie_keywords mk ON mh.movie_id = mk.movie_id
    WHERE 
        mh.level = 1
)
SELECT 
    dmi.movie_id,
    dmi.title,
    dmi.production_year,
    COALESCE(dmi.actor_name, 'Unknown Actor') AS primary_actor, 
    CASE 
        WHEN dmi.actor_rank <= 3 THEN 'Top 3 Cast'
        ELSE 'Other Cast'
    END AS cast_category,
    dmi.keywords_list,
    COUNT(dmi.actor_name) OVER (PARTITION BY dmi.movie_id) AS total_actors, 
    (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = dmi.movie_id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'Plot')) AS plot_info_count 
FROM 
    detailed_movie_info dmi
ORDER BY 
    dmi.production_year DESC,
    dmi.movie_id,
    dmi.actor_rank
LIMIT 100
OFFSET 0;