
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        t.title,
        t.production_year,
        COALESCE(cast_count.total_cast, 0) AS total_cast,
        1 AS level
    FROM 
        aka_title t 
    LEFT JOIN 
        complete_cast cc ON t.id = cc.movie_id
    LEFT JOIN (
        SELECT 
            movie_id, 
            COUNT(*) AS total_cast 
        FROM 
            complete_cast 
        GROUP BY 
            movie_id
    ) AS cast_count ON t.id = cast_count.movie_id
    WHERE 
        t.production_year >= 2000
    
    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        t.title,
        t.production_year,
        COALESCE(cast_count.total_cast, 0),
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.linked_movie_id = mh.movie_id
    JOIN 
        aka_title t ON ml.movie_id = t.id
    LEFT JOIN (
        SELECT 
            movie_id, 
            COUNT(*) AS total_cast 
        FROM 
            complete_cast 
        GROUP BY 
            movie_id
    ) AS cast_count ON t.id = cast_count.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.total_cast,
    AVG(NULLIF(mv.info_length, 0)) AS avg_info_length,
    ARRAY_AGG(DISTINCT k.keyword) AS keywords,
    STRING_AGG(DISTINCT c.name, ', ') AS company_names
FROM 
    MovieHierarchy mh
LEFT JOIN 
    movie_info mv ON mh.movie_id = mv.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    company_name c ON mc.company_id = c.id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.total_cast
HAVING 
    mh.total_cast >= 5
ORDER BY 
    mh.production_year DESC, mh.total_cast DESC;
