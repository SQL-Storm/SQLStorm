WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        CASE 
            WHEN mt.episode_of_id IS NOT NULL THEN 'Episode of ID: ' || mt.episode_of_id 
            ELSE 'Standalone Movie' 
        END AS movie_type,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL 

    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        'Linked Movie' AS movie_type,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.movie_id = mt.id
    JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
)
, actor_cast AS (
    SELECT 
        a.id AS actor_id,
        ak.name AS actor_name,
        ci.movie_id,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_order,
        COUNT(*) OVER (PARTITION BY ci.movie_id) AS total_actors
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
)
, movie_info_aggregated AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT a.actor_id) AS total_actors,
        STRING_AGG(DISTINCT a.actor_name, ', ') AS actor_names
    FROM 
        movie_hierarchy mh
    LEFT JOIN 
        actor_cast a ON mh.movie_id = a.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year
)
SELECT 
    mia.movie_id,
    mia.title,
    mia.production_year,
    mia.total_actors,
    mia.actor_names,
    CASE 
        WHEN mia.total_actors IS NULL THEN 'No actors found'
        WHEN mia.total_actors = 0 THEN 'No actors'
        ELSE 'Actors present' 
    END AS actor_presence,
    NULLIF(mia.actor_names, '') AS filtered_actor_names
FROM 
    movie_info_aggregated mia
ORDER BY 
    mia.production_year DESC, 
    mia.title ASC
LIMIT 50
OFFSET 10;