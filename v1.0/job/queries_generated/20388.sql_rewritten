WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        1 AS depth,
        NULL AS parent_movie_id
    FROM
        aka_title mt
    WHERE
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title AS movie_title,
        mh.depth + 1,
        mh.movie_id AS parent_movie_id
    FROM
        MovieHierarchy mh
    JOIN
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN
        aka_title at ON ml.linked_movie_id = at.id
)

SELECT 
    mv.movie_id,
    mv.movie_title,
    mh.parent_movie_id,
    COALESCE(CG.name, 'Unknown Company') AS company_name,
    ct.kind AS company_type,
    COUNT(DISTINCT ci.person_id) AS total_actors,
    SUM(CASE WHEN ci.role_id IS NULL THEN 1 ELSE 0 END) AS not_assigned_roles,
    ARRAY_AGG(DISTINCT kw.keyword ORDER BY kw.keyword) AS keywords,
    MAX(CASE 
            WHEN mi.info_type_id IS NOT NULL THEN mi.info 
            ELSE 'No Information' END) AS movie_info,
    ROW_NUMBER() OVER(PARTITION BY mv.movie_id ORDER BY mv.movie_title) AS rank
FROM 
    MovieHierarchy mv
LEFT JOIN 
    movie_companies mc ON mv.movie_id = mc.movie_id
LEFT JOIN 
    company_name CG ON mc.company_id = CG.id
LEFT JOIN 
    company_type ct ON mc.company_type_id = ct.id
LEFT JOIN 
    complete_cast co ON mv.movie_id = co.movie_id
LEFT JOIN 
    cast_info ci ON co.subject_id = ci.person_id
LEFT JOIN 
    movie_keyword mk ON mv.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_info mi ON mv.movie_id = mi.movie_id
WHERE 
    mv.depth < 3 
    AND (ct.kind IS NOT NULL OR CG.name IS NOT NULL)
GROUP BY 
    mv.movie_id, mv.movie_title, mh.parent_movie_id, CG.name, ct.kind
HAVING 
    COUNT(DISTINCT ci.person_id) > 3
ORDER BY 
    mv.movie_title ASC, total_actors DESC;