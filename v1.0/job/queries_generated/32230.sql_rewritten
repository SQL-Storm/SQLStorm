WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        1 AS level
    FROM 
        aka_title AS mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        mh.level + 1
    FROM 
        movie_link AS ml
    JOIN 
        aka_title AS at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy AS mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    COALESCE(cast_roles.role, 'Unknown') AS role,
    mh.level AS hierarchy_level,
    RANK() OVER (PARTITION BY ak.id ORDER BY mh.level DESC) AS actor_rank,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    COUNT(DISTINCT mc.company_id) AS production_companies,
    AVG(mi.year) AS average_year,
    SUM(CASE WHEN mi.info IS NOT NULL THEN 1 ELSE 0 END) AS info_count
FROM 
    aka_name AS ak
JOIN 
    cast_info AS ci ON ak.person_id = ci.person_id
JOIN 
    aka_title AS mt ON ci.movie_id = mt.id
LEFT JOIN 
    comp_cast_type AS cast_roles ON ci.person_role_id = cast_roles.id
LEFT JOIN 
    movie_keyword AS mk ON mk.movie_id = mt.id
LEFT JOIN 
    keyword AS kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_companies AS mc ON mc.movie_id = mt.id
LEFT JOIN 
    (SELECT 
         movie_id,
         EXTRACT(YEAR FROM MIN(production_year)) AS year
     FROM 
         aka_title
     GROUP BY 
         movie_id) AS mi ON mi.movie_id = mt.id
JOIN 
    movie_hierarchy AS mh ON mh.movie_id = mt.id
WHERE 
    mt.production_year IS NOT NULL
    AND ak.name IS NOT NULL
GROUP BY 
    ak.id, mt.id, cast_roles.role, mh.level
HAVING 
    COUNT(DISTINCT kw.keyword) > 1
ORDER BY 
    actor_rank, hierarchy_level DESC;