WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        1 AS level,
        ARRAY[m.title] AS path
    FROM 
        aka_title m
    WHERE 
        m.episode_of_id IS NULL
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title,
        mh.level + 1,
        path || m.title
    FROM 
        aka_title m
    JOIN 
        movie_hierarchy mh ON m.episode_of_id = mh.movie_id
),
ranked_cast AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_rank,
        COUNT(*) OVER (PARTITION BY ci.movie_id) AS total_cast
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
),
movie_details AS (
    SELECT 
        m.id,
        m.title,
        EXTRACT(YEAR FROM cast('2024-10-01' as date)) - m.production_year AS years_since_release,
        COALESCE(COUNT(mc.company_id), 0) AS company_count,
        ARRAY_AGG(DISTINCT mk.keyword) AS keywords
    FROM 
        aka_title m
    LEFT JOIN 
        movie_companies mc ON m.id = mc.movie_id
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    GROUP BY 
        m.id
),
final_summary AS (
    SELECT 
        md.title,
        md.years_since_release,
        md.company_count,
        COALESCE(ARRAY_TO_STRING(md.keywords, ', '), 'No Keywords') AS keywords,
        rc.actor_name,
        rc.actor_rank,
        rc.total_cast
    FROM 
        movie_details md
    LEFT JOIN 
        ranked_cast rc ON md.id = rc.movie_id
)
SELECT 
    fs.title,
    fs.years_since_release,
    fs.company_count,
    fs.keywords,
    fs.actor_name,
    fs.actor_rank,
    COUNT(fh.movie_id) AS episode_count,
    AVG(fs.total_cast) OVER (PARTITION BY fs.years_since_release) AS avg_cast
FROM 
    final_summary fs
LEFT JOIN 
    movie_hierarchy fh ON fs.title = ANY(fh.path)
WHERE 
    fs.years_since_release > 10
ORDER BY 
    fs.years_since_release DESC, fs.actor_rank
LIMIT 50;