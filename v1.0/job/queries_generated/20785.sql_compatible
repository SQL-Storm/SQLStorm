
WITH RankedMovies AS (
    SELECT 
        t.title,
        t.production_year,
        a.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY c.nr_order) AS actor_order
    FROM 
        aka_title t
    JOIN 
        cast_info c ON t.id = c.movie_id
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        t.production_year >= 2000
        AND a.name IS NOT NULL
),
MovieKeywords AS (
    SELECT 
        m.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword m
    JOIN 
        keyword k ON m.keyword_id = k.id
    GROUP BY 
        m.movie_id
),
NullHandling AS (
    SELECT 
        t.title,
        COALESCE(k.keywords, 'No Keywords') AS keywords,
        CASE 
            WHEN c.note IS NULL THEN 'No Note'
            ELSE c.note
        END AS cast_note
    FROM 
        aka_title t
    LEFT JOIN 
        MovieKeywords k ON t.id = k.movie_id
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
)
SELECT 
    nm.subject_id,
    nm.title,
    nm.keywords,
    COUNT(DISTINCT a.actor_name) AS total_actors,
    AVG(CASE WHEN actor_order <= 3 THEN 1 ELSE NULL END) AS top_3_actor_ratio,
    SUM(CASE WHEN cn.name IS NOT NULL THEN 1 ELSE 0 END) AS company_count,
    DENSE_RANK() OVER (ORDER BY nm.production_year DESC) AS year_rank
FROM 
    NullHandling nm
LEFT JOIN 
    complete_cast cc ON nm.title = cc.subject_id
LEFT JOIN 
    movie_companies mc ON cc.movie_id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
LEFT JOIN 
    RankedMovies a ON nm.title = a.title
WHERE 
    nm.keywords LIKE '%drama%'
GROUP BY 
    nm.subject_id, nm.title, nm.keywords, nm.production_year
HAVING 
    COUNT(DISTINCT a.actor_name) > 2
ORDER BY 
    year_rank, total_actors DESC
LIMIT 50;
