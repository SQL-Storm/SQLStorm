
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ll.linked_movie_id,
        lt.title,
        lt.production_year,
        lt.kind_id,
        mh.depth + 1
    FROM 
        movie_link ll
    JOIN 
        title lt ON ll.linked_movie_id = lt.id
    JOIN 
        MovieHierarchy mh ON ll.movie_id = mh.movie_id
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COALESCE(mh.depth, 0) AS link_depth,
    (CASE 
        WHEN t.production_year < 2000 THEN 'Before 2000'
        WHEN t.production_year BETWEEN 2000 AND 2010 THEN '2000-2010'
        ELSE 'After 2010'
     END) AS era,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    MovieHierarchy mh ON t.id = mh.movie_id
WHERE 
    a.name IS NOT NULL
AND 
    (t.kind_id IN (SELECT id FROM kind_type WHERE kind NOT LIKE '%documentary%')
     OR t.production_year IS NULL)
AND 
    (mk.keyword IS NULL OR k.phonetic_code NOT ILIKE '%B%')
GROUP BY 
    a.name, t.title, t.production_year, mh.depth
HAVING 
    COUNT(DISTINCT k.id) > 1
ORDER BY 
    a.name, t.production_year DESC;
