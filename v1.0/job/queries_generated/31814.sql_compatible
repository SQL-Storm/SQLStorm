
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id, 
        mt.title, 
        0 AS depth
    FROM 
        aka_title mt
    JOIN 
        movie_link ml ON mt.id = ml.movie_id
    JOIN 
        title m ON m.id = ml.linked_movie_id
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id, 
        mt.title,
        mh.depth + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title mt ON mt.id = ml.linked_movie_id
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
),
MovieStats AS (
    SELECT 
        m.id AS movie_id,
        COUNT(DISTINCT c.person_id) AS total_cast,
        STRING_AGG(DISTINCT cn.name, ', ') AS cast_names
    FROM 
        title m
    LEFT JOIN 
        complete_cast cc ON m.id = cc.movie_id
    LEFT JOIN 
        cast_info c ON cc.subject_id = c.id
    LEFT JOIN 
        aka_name cn ON c.person_id = cn.person_id
    GROUP BY 
        m.id
),
FilteredMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        ms.total_cast,
        ms.cast_names,
        ROW_NUMBER() OVER (PARTITION BY ms.total_cast ORDER BY mh.depth) AS rank
    FROM 
        MovieHierarchy mh
    JOIN 
        MovieStats ms ON mh.movie_id = ms.movie_id
    WHERE 
        ms.total_cast > 5
)
SELECT 
    fm.title,
    fm.total_cast,
    fm.cast_names,
    COALESCE(mk.keyword, 'No Keywords') AS keywords,
    CASE
        WHEN fm.total_cast >= 10 THEN 'Popular'
        ELSE 'Average'
    END AS popularity_status
FROM 
    FilteredMovies fm
LEFT JOIN 
    movie_keyword mk ON fm.movie_id = mk.movie_id
ORDER BY 
    fm.rank, fm.title;
