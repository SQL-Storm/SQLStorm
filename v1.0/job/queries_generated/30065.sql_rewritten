WITH RECURSIVE movie_hierarchy AS (
    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        NULL::integer AS parent_movie_id
    FROM
        aka_title m
    WHERE
        m.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mh.movie_id
    FROM
        movie_link ml
    JOIN
        title mt ON ml.linked_movie_id = mt.id
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    COUNT(DISTINCT mh.movie_id) AS number_of_linked_movies,
    STRING_AGG(DISTINCT mh.title, ', ') AS linked_movie_titles,
    EXTRACT(YEAR FROM AVG(mh.production_year)::date) AS average_year_of_linked_movies,
    CASE 
        WHEN COUNT(DISTINCT mh.movie_id) > 5 THEN 'Popular Actor'
        ELSE 'Less Known Actor'
    END AS actor_popularity,
    ROW_NUMBER() OVER (PARTITION BY ak.person_id ORDER BY COUNT(DISTINCT mh.movie_id) DESC) AS rank
FROM
    cast_info ci
JOIN
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN
    movie_hierarchy mh ON ci.movie_id = mh.movie_id
GROUP BY
    ak.name, ak.person_id
HAVING
    COUNT(DISTINCT mh.movie_id) > 0
ORDER BY 
    number_of_linked_movies DESC;