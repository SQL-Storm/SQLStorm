WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year, 
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = 1  
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id, 
        m.title, 
        m.production_year, 
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
)
SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COUNT(mk.keyword) AS keyword_count,
    AVG(CASE WHEN CAST(ci.nr_order AS INTEGER) > 0 THEN ci.nr_order ELSE NULL END) AS avg_order,
    STRING_AGG(DISTINCT mk.keyword, ', ') AS keywords,
    SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS non_null_notes_count,
    ROW_NUMBER() OVER (PARTITION BY ak.person_id ORDER BY COUNT(mk.keyword) DESC) AS actor_rank
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ci.person_id = ak.person_id
JOIN 
    movie_companies mc ON mc.movie_id = ci.movie_id
JOIN 
    aka_title mt ON mt.id = ci.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mt.id
WHERE 
    mt.production_year > 2000 
    AND (ak.name LIKE '%Smith%' OR ak.name IS NULL)
GROUP BY 
    ak.person_id, mt.id, mt.title, mt.production_year
HAVING 
    COUNT(mk.keyword) > 2
ORDER BY 
    actor_rank, movie_title
LIMIT 100;