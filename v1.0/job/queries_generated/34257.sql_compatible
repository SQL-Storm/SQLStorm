
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000

    UNION ALL

    SELECT 
        mh.movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        movie_hierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    WHERE 
        mh.level < 2
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT m.id) AS linked_movies_count,
    AVG(CASE 
            WHEN t.production_year < 2010 THEN 1 
            ELSE NULL 
        END) AS avg_old_movies,
    ARRAY_AGG(DISTINCT k.keyword) AS keywords,
    STRING_AGG(DISTINCT ci.note, ', ') AS cast_notes,
    ROW_NUMBER() OVER (PARTITION BY a.id ORDER BY t.production_year DESC) AS movie_rank
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    aka_title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
JOIN 
    movie_hierarchy mh ON t.id = mh.movie_id
WHERE 
    a.name IS NOT NULL
    AND (t.note IS NULL OR t.note NOT LIKE '%unreleased%')
GROUP BY 
    a.id, a.name, t.id, t.title, t.production_year
ORDER BY 
    a.name, t.production_year DESC;
