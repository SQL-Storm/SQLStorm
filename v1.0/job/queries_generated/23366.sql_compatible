
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year, 
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id, 
        m.title, 
        m.production_year, 
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    WHERE 
        mh.level < 3
)

SELECT 
    mh.movie_id, 
    mh.title, 
    mh.production_year,
    COALESCE(cast.name, 'Unknown') AS main_cast_name,
    COUNT(DISTINCT kw.keyword) AS keyword_count,
    STRING_AGG(DISTINCT CASE WHEN mk.info IS NOT NULL THEN mk.info ELSE 'No Info' END, ', ') AS movie_info,
    ROW_NUMBER() OVER(PARTITION BY mh.movie_id ORDER BY mh.production_year) AS row_num
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name cast ON ci.person_id = cast.person_id AND ci.nr_order = 1
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
WHERE 
    mh.production_year > 2000
    AND (mh.title ILIKE '%Action%' OR mh.title ILIKE '%Drama%' OR (mh.title IS NULL AND mh.movie_id IS NOT NULL))
GROUP BY 
    mh.movie_id, 
    mh.title, 
    mh.production_year, 
    cast.name
HAVING 
    COUNT(DISTINCT kw.keyword) > 3
ORDER BY 
    mh.production_year DESC, main_cast_name
LIMIT 100;
