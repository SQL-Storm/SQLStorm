WITH RECURSIVE MovieHierachy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        m.id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        aka_title m
    INNER JOIN 
        movie_link ml ON ml.movie_id = m.id
    INNER JOIN 
        MovieHierachy mh ON mh.movie_id = ml.linked_movie_id
)
SELECT 
    a.name AS actor_name,
    m.movie_title,
    mh.level,
    COALESCE(ki.keyword, 'No Keywords') AS movie_keyword,
    COUNT(DISTINCT mc.company_id) AS production_companies,
    AVG(CASE 
        WHEN ci.role_id IS NOT NULL THEN ci.nr_order 
        ELSE NULL 
    END) AS avg_role_order,
    STRING_AGG(DISTINCT ci.note, ', ') AS role_notes,
    m.production_year
FROM 
    aka_name a
INNER JOIN 
    cast_info ci ON a.person_id = ci.person_id
INNER JOIN 
    MovieHierachy mh ON ci.movie_id = mh.movie_id
INNER JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword ki ON mk.keyword_id = ki.id
GROUP BY 
    a.name, m.movie_title, mh.level, m.production_year
HAVING 
    COUNT(DISTINCT mc.company_id) > 2 AND 
    m.production_year BETWEEN 2000 AND 2023
ORDER BY 
    mh.level DESC, avg_role_order ASC;