WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM
        aka_title mt
    WHERE
        mt.kind_id = 1 

    UNION ALL

    SELECT
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mh.depth + 1
    FROM
        movie_link ml
    JOIN
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
    JOIN
        aka_title mt ON ml.linked_movie_id = mt.id
    WHERE
        mt.kind_id = 1
)

SELECT
    p.name AS actor_name,
    m.title AS movie_title,
    m.production_year,
    COUNT(cc.id) AS num_cast,
    AVG(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS has_note_percentage,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    ROW_NUMBER() OVER (PARTITION BY m.title ORDER BY m.production_year DESC) AS rank
FROM
    cast_info ci
JOIN
    aka_name p ON ci.person_id = p.person_id
JOIN
    movie_hierarchy m ON ci.movie_id = m.movie_id
LEFT JOIN
    movie_keyword mk ON mk.movie_id = m.movie_id
LEFT JOIN
    keyword k ON mk.keyword_id = k.id
GROUP BY
    p.name, m.title, m.production_year
HAVING
    COUNT(cc.id) > 1 
ORDER BY
    m.production_year DESC, rank
LIMIT 50;