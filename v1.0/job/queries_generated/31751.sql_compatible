
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        0 AS depth 
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        at.kind_id,
        mh.depth + 1 
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.movie_id = at.id
    JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.depth,
    COUNT(DISTINCT cc.person_id) AS total_cast,
    AVG(CASE WHEN pi.info IS NOT NULL THEN 1 ELSE 0 END) AS has_person_info_percentage,
    STRING_AGG(DISTINCT cn.name, ', ') AS cast_names,
    STRING_AGG(DISTINCT mk.keyword, ', ') AS movie_keywords,
    COALESCE(ct.kind, 'Unknown') AS company_type 
FROM 
    movie_hierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    person_info pi ON cc.subject_id = pi.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    company_type ct ON mc.company_type_id = ct.id
LEFT JOIN 
    cast_info ci ON ci.movie_id = mh.movie_id
LEFT JOIN 
    aka_name an ON ci.person_id = an.person_id
LEFT JOIN 
    char_name cn ON an.name = cn.name
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.depth, ct.kind
ORDER BY 
    mh.production_year DESC, mh.depth, total_cast DESC;
