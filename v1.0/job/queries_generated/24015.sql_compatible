
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        movie_hierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    WHERE 
        mh.level < 5  
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    STRING_AGG(DISTINCT kc.keyword, ', ') AS keywords,
    COALESCE(MAX(p.gender), 'Unknown') AS gender,
    ROW_NUMBER() OVER (PARTITION BY a.name ORDER BY t.production_year DESC) AS actor_rank,
    CASE 
        WHEN COUNT(DISTINCT c.role_id) = 0 THEN 'No Roles'
        ELSE 'Has Roles'
    END AS role_status
FROM 
    cast_info c
JOIN 
    aka_name a ON c.person_id = a.person_id
JOIN 
    title t ON c.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = t.id
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id
LEFT JOIN 
    person_info p ON p.person_id = a.person_id
LEFT JOIN 
    company_name cn ON cn.imdb_id = t.imdb_id 
LEFT JOIN 
    movie_info mi ON mi.movie_id = t.id AND mi.info_type_id = (SELECT id FROM info_type WHERE info LIKE 'Rating%') 
WHERE 
    t.production_year BETWEEN 2000 AND 2023
    AND (kc.keyword IS NOT NULL OR mi.info IS NOT NULL)
GROUP BY 
    a.name, t.id, t.production_year
HAVING 
    COUNT(DISTINCT c.role_id) > 2
    AND MAX(t.production_year) > (SELECT AVG(production_year) FROM aka_title) 
ORDER BY 
    keyword_count DESC,
    actor_rank ASC;
