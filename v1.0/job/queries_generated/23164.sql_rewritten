WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        c.person_id AS actor_id,
        ak.name AS actor_name,
        1 AS levels
    FROM cast_info c
    JOIN aka_name ak ON c.person_id = ak.person_id
    WHERE c.movie_id = (SELECT id FROM aka_title WHERE title LIKE 'A%')
    
    UNION ALL
    
    SELECT 
        c.person_id, 
        ak.name, 
        ah.levels + 1
    FROM cast_info c
    JOIN aka_name ak ON c.person_id = ak.person_id
    JOIN ActorHierarchy ah ON c.movie_id = ah.actor_id
),

MovieDetails AS (
    SELECT 
        at.title,
        at.production_year,
        COUNT(DISTINCT ci.person_id) AS num_of_actors,
        MAX(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS has_notes
    FROM aka_title at
    JOIN cast_info ci ON at.id = ci.movie_id
    GROUP BY at.id
),

CompanyDetails AS (
    SELECT 
        mc.movie_id,
        STRING_AGG(DISTINCT cn.name, ', ') AS companies,
        COUNT(DISTINCT mc.company_id) AS total_companies
    FROM movie_companies mc
    JOIN company_name cn ON mc.company_id = cn.id
    GROUP BY mc.movie_id
),

InfoAndKeywords AS (
    SELECT 
        mi.movie_id,
        STRING_AGG(DISTINCT mi.info, ', ') AS movie_info,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM movie_info mi
    LEFT JOIN movie_keyword mk ON mi.movie_id = mk.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY mi.movie_id
)

SELECT
    md.title AS movie_title,
    md.production_year,
    md.num_of_actors,
    cd.companies,
    iak.actor_name,
    ia.levels AS actor_levels,
    COALESCE(id.movie_info, 'No Info') AS movie_info,
    COALESCE(id.keywords, 'No Keywords') AS keywords,
    CASE 
        WHEN cd.total_companies > 5 THEN 'Large Production'
        WHEN cd.total_companies > 0 THEN 'Small Production'
        ELSE 'Independent'
    END AS production_scale,
    CASE 
        WHEN md.has_notes = 1 THEN 'Notes Available' 
        ELSE 'No Notes' 
    END AS notes_status
FROM MovieDetails md
LEFT JOIN CompanyDetails cd ON md.movie_id = cd.movie_id
LEFT JOIN InfoAndKeywords id ON md.movie_id = id.movie_id
LEFT JOIN ActorHierarchy ia ON md.movie_id = ia.actor_id
LEFT JOIN (
    SELECT DISTINCT a.actor_id, a.actor_name, ROW_NUMBER() OVER (PARTITION BY a.actor_id ORDER BY a.levels) AS row_num
    FROM ActorHierarchy a
) iak ON ia.actor_id = iak.actor_id AND iak.row_num = 1
WHERE md.num_of_actors >= 5 
AND (md.production_year IS NULL OR md.production_year >= 2000)
ORDER BY md.num_of_actors DESC, md.production_year DESC;