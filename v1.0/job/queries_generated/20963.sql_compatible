
WITH RankedMovies AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        t.kind_id,
        RANK() OVER (PARTITION BY t.kind_id ORDER BY t.production_year DESC) AS rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
MovieDetails AS (
    SELECT 
        m.title,
        m.production_year,
        ak.name AS actor_name,
        c.kind AS company_kind,
        COUNT(ka.id) AS keyword_count,
        MAX(ci.nr_order) AS max_order
    FROM 
        RankedMovies m
    JOIN 
        complete_cast cc ON m.title_id = cc.movie_id
    JOIN 
        cast_info ci ON ci.movie_id = cc.movie_id AND ci.person_id IS NOT NULL
    LEFT JOIN 
        aka_name ak ON ak.person_id = ci.person_id
    LEFT JOIN 
        movie_companies mc ON mc.movie_id = m.title_id
    LEFT JOIN 
        company_type c ON mc.company_type_id = c.id
    LEFT JOIN 
        movie_keyword ka ON m.title_id = ka.movie_id
    GROUP BY 
        m.title, m.production_year, ak.name, c.kind
),
FilteredMovies AS (
    SELECT 
        title, 
        production_year,
        actor_name,
        company_kind,
        keyword_count
    FROM 
        MovieDetails
    WHERE 
        (company_kind IS NOT NULL AND actor_name IS NOT NULL) 
        OR (keyword_count > 5)
)

SELECT 
    COALESCE(fm.title, 'Unknown Title') AS movie_title,
    fm.production_year,
    (CASE 
        WHEN fm.keyword_count > 10 THEN 'High Keywords'
        WHEN fm.keyword_count BETWEEN 6 AND 10 THEN 'Moderate Keywords'
        ELSE 'Low Keywords'
     END) AS keyword_status,
    STRING_AGG(fm.actor_name, ', ') AS actors_invovled,
    COUNT(fm.actor_name) OVER (PARTITION BY fm.production_year) AS total_actors_in_year
FROM 
    FilteredMovies fm
GROUP BY 
    fm.title, fm.production_year, fm.keyword_count
HAVING 
    COUNT(fm.actor_name) > 2
ORDER BY 
    fm.production_year DESC;
