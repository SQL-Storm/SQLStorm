WITH RECURSIVE movie_hierarchy AS (
    SELECT mt.id AS movie_id, mt.title, mt.production_year, 0 AS depth
    FROM aka_title mt
    WHERE mt.kind_id = 1  

    UNION ALL

    SELECT mt.id, mt.title, mt.production_year, mh.depth + 1
    FROM movie_link ml
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN aka_title mt ON ml.linked_movie_id = mt.id
)
SELECT 
    ak.person_id,
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    mh.depth AS movie_depth,
    COUNT(DISTINCT k.keyword) AS total_keywords,
    AVG(CASE WHEN mi.info_type_id = it.id THEN 1 ELSE NULL END) AS avg_infos,
    STRING_AGG(DISTINCT c.name, ', ') AS company_names,
    COUNT(DISTINCT cc.role_id) AS total_roles
FROM aka_name ak
JOIN cast_info ci ON ak.person_id = ci.person_id
JOIN movie_hierarchy mh ON ci.movie_id = mh.movie_id
JOIN aka_title mt ON mh.movie_id = mt.id
LEFT JOIN movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN keyword k ON mk.keyword_id = k.id
LEFT JOIN movie_companies mc ON mt.id = mc.movie_id
LEFT JOIN company_name c ON mc.company_id = c.id
LEFT JOIN movie_info mi ON mt.id = mi.movie_id
JOIN info_type it ON mi.info_type_id = it.id
LEFT JOIN complete_cast cc ON mt.id = cc.movie_id
WHERE mt.production_year BETWEEN 2000 AND 2023
GROUP BY ak.person_id, ak.name, mt.title, mt.production_year, mh.depth
ORDER BY movie_depth DESC, ak.name ASC;