
WITH RecursiveMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COALESCE(NULLIF(MIN(CAST(mi.info AS INTEGER)), 0), 'N/A') AS min_info,
        COUNT(mk.keyword_id) AS keyword_count
    FROM 
        aka_title t
    LEFT JOIN 
        movie_info mi ON t.id = mi.movie_id 
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id 
    GROUP BY 
        t.id, t.title, t.production_year
), CastDetails AS (
    SELECT 
        ci.movie_id,
        a.name AS actor_name,
        ct.kind AS role_type,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY a.name) AS actor_order,
        DENSE_RANK() OVER (PARTITION BY ci.movie_id ORDER BY ct.kind) AS kind_rank
    FROM 
        cast_info ci
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    LEFT JOIN 
        comp_cast_type ct ON ci.person_role_id = ct.id
), KeywordStats AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
        COUNT(k.id) AS keyword_count
    FROM 
        movie_keyword mk 
    JOIN 
        keyword k ON mk.keyword_id = k.id 
    GROUP BY 
        mk.movie_id
)

SELECT 
    RM.movie_id,
    RM.title,
    RM.production_year,
    COALESCE(KS.keywords, 'No Keywords') AS keywords,
    RM.keyword_count AS total_keywords,
    COALESCE(CD.actor_name, 'No Cast') AS leading_actor,
    CD.role_type AS actor_role,
    CD.actor_order,
    RM.min_info
FROM 
    RecursiveMovies RM
LEFT JOIN 
    CastDetails CD ON RM.movie_id = CD.movie_id AND CD.actor_order = 1  
LEFT JOIN 
    KeywordStats KS ON RM.movie_id = KS.movie_id
WHERE 
    (RM.production_year IS NOT NULL AND RM.production_year >= 2000)
    OR (RM.production_year IS NULL AND RM.min_info IS NOT NULL)
ORDER BY 
    RM.production_year DESC, RM.title ASC
LIMIT 100;
