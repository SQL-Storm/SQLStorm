
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS cast_count,
        STRING_AGG(DISTINCT a.name, ', ') AS actors
    FROM 
        aka_title t
    JOIN 
        cast_info c ON t.id = c.movie_id
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        t.production_year >= 2000
    GROUP BY 
        t.id, t.title, t.production_year
),
KeywordMovies AS (
    SELECT 
        m.movie_id,
        k.keyword,
        ROW_NUMBER() OVER (PARTITION BY m.movie_id ORDER BY k.keyword) AS keyword_rank
    FROM 
        RankedMovies m
    JOIN 
        movie_keyword mk ON m.movie_id = mk.movie_id
    JOIN 
        keyword k ON mk.keyword_id = k.id
),
MoviesWithKeywords AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.cast_count,
        rm.actors,
        COALESCE(STRING_AGG(DISTINCT km.keyword ORDER BY km.keyword), 'No keywords') AS keywords
    FROM 
        RankedMovies rm
    LEFT JOIN 
        KeywordMovies km ON rm.movie_id = km.movie_id
    GROUP BY 
        rm.movie_id, rm.title, rm.production_year, rm.cast_count, rm.actors
)
SELECT 
    mwk.movie_id,
    mwk.title,
    mwk.production_year,
    mwk.cast_count,
    mwk.actors,
    mwk.keywords,
    CASE 
        WHEN mwk.cast_count > 10 THEN 'High Cast'
        WHEN mwk.cast_count BETWEEN 5 AND 10 THEN 'Moderate Cast'
        ELSE 'Low Cast'
    END AS cast_category
FROM 
    MoviesWithKeywords mwk
ORDER BY 
    mwk.production_year DESC, mwk.cast_count DESC
LIMIT 20;
