
WITH RankedMovies AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(c.id) AS cast_count,
        RANK() OVER (PARTITION BY t.production_year ORDER BY COUNT(c.id) DESC) AS rank_by_cast
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
TopMovies AS (
    SELECT 
        title,
        production_year,
        cast_count
    FROM 
        RankedMovies
    WHERE 
        rank_by_cast <= 3
),
MovieKeywords AS (
    SELECT 
        m.id AS movie_id,
        k.keyword,
        CASE
            WHEN k.keyword IS NULL THEN 'No Keywords'
            ELSE k.keyword
        END AS keyword_desc
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
)
SELECT 
    tm.title,
    tm.production_year,
    tm.cast_count,
    STRING_AGG(mk.keyword_desc, ', ') AS keywords,
    COALESCE(cn.name, 'Unknown Company') AS company_name,
    SUM(CASE 
            WHEN mi.info_type_id IS NOT NULL THEN 1 
            ELSE 0 
        END) AS info_count
FROM 
    TopMovies tm
LEFT JOIN 
    movie_companies mc ON tm.movie_id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
LEFT JOIN 
    MovieKeywords mk ON mk.movie_id = tm.movie_id
LEFT JOIN 
    movie_info mi ON tm.movie_id = mi.movie_id
GROUP BY 
    tm.title, 
    tm.production_year, 
    tm.cast_count,
    cn.name
HAVING 
    SUM(CASE WHEN tm.production_year IS NULL THEN 1 ELSE 0 END) = 0 
    AND COUNT(CASE WHEN mk.keyword IS NULL THEN 1 END) < 2
ORDER BY 
    tm.production_year DESC,
    tm.cast_count DESC;
