
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM alias_title mt
    WHERE mt.kind_id IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        at.kind_id,
        mh.level + 1
    FROM movie_link ml
    JOIN alias_title at ON ml.linked_movie_id = at.id
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
), actor_performance AS (
    SELECT 
        cc.person_id,
        ak.name,
        COUNT(DISTINCT cc.movie_id) AS total_movies,
        AVG(EXTRACT(YEAR FROM DATE '2024-10-01') - mt.production_year) AS avg_movie_age,
        SUM(CASE WHEN cc.note IS NULL THEN 1 ELSE 0 END) AS null_note_count
    FROM cast_info cc
    JOIN aka_name ak ON cc.person_id = ak.person_id
    JOIN title mt ON cc.movie_id = mt.id
    GROUP BY cc.person_id, ak.name
), ranked_actors AS (
    SELECT 
        ap.person_id,
        ap.name,
        ap.total_movies,
        ap.avg_movie_age,
        ap.null_note_count,
        RANK() OVER (ORDER BY ap.total_movies DESC) AS rank
    FROM actor_performance ap
    WHERE ap.total_movies > 5
)
SELECT 
    mh.movie_id,
    mh.movie_title,
    mh.production_year,
    mh.level,
    ra.name AS top_actor,
    ra.total_movies AS actor_movie_count,
    ra.avg_movie_age AS actor_avg_age
FROM movie_hierarchy mh
LEFT JOIN ranked_actors ra ON mh.movie_id = (
    SELECT cc.movie_id
    FROM cast_info cc
    WHERE cc.person_id = ra.person_id
    ORDER BY cc.nr_order
    LIMIT 1
)
WHERE mh.production_year > 2000
AND (mh.kind_id IS NOT NULL OR mh.level = 1)
ORDER BY mh.production_year DESC, ra.total_movies DESC NULLS LAST;
