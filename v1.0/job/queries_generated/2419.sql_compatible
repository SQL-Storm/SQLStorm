
WITH MovieData AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS actor_count,
        AVG(CASE WHEN c.note IS NOT NULL THEN 1 ELSE 0 END) AS has_note_ratio,
        STRING_AGG(DISTINCT ak.name, ', ') AS aka_names
    FROM 
        aka_title ak
    JOIN 
        title t ON ak.movie_id = t.id
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    LEFT JOIN 
        aka_name an ON c.person_id = an.person_id
    WHERE 
        t.production_year >= 2000 
        AND t.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('movie', 'tv series'))
    GROUP BY 
        t.title, t.production_year
),
RankedMovies AS (
    SELECT 
        title,
        production_year,
        actor_count,
        has_note_ratio,
        aka_names,
        RANK() OVER (ORDER BY actor_count DESC, production_year ASC) AS rank
    FROM 
        MovieData
)
SELECT 
    rm.title,
    rm.production_year,
    rm.actor_count,
    rm.has_note_ratio,
    rm.aka_names,
    COALESCE(mk.keyword, 'No Keywords') AS keyword
FROM 
    RankedMovies rm
LEFT JOIN 
    movie_keyword mk ON rm.title = (
        SELECT t.title 
        FROM title t 
        JOIN movie_keyword mk2 ON t.id = mk2.movie_id 
        WHERE mk2.keyword_id = mk.id 
        LIMIT 1)
WHERE 
    rm.rank <= 10
ORDER BY 
    rm.rank;
