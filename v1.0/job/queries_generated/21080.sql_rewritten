WITH RankedMovies AS (
    SELECT 
        at.title,
        at.production_year,
        ROW_NUMBER() OVER (PARTITION BY at.production_year ORDER BY at.title) AS movie_rank,
        COUNT(*) OVER (PARTITION BY at.production_year) AS total_movies
    FROM 
        aka_title at
), 
MoviesWithCast AS (
    SELECT 
        rm.title,
        rm.production_year,
        ci.person_id,
        COUNT(ci.person_id) OVER (PARTITION BY rm.movie_rank) AS cast_count
    FROM 
        RankedMovies rm
    LEFT JOIN 
        cast_info ci ON rm.title = (SELECT title FROM aka_title WHERE id = ci.movie_id LIMIT 1)
), 
ActorsWithRoleCount AS (
    SELECT 
        ci.person_id,
        COUNT(DISTINCT ci.role_id) AS unique_roles,
        AVG(ci.nr_order) AS avg_order
    FROM 
        cast_info ci
    GROUP BY 
        ci.person_id
), 
MovieKeywordCount AS (
    SELECT 
        mk.movie_id,
        COUNT(mk.keyword_id) AS keyword_count
    FROM 
        movie_keyword mk
    GROUP BY 
        mk.movie_id
)

SELECT 
    mwc.title,
    mwc.production_year,
    COALESCE(akwc.unique_roles, 0) AS unique_roles,
    mwc.cast_count,
    mkc.keyword_count,
    CASE 
        WHEN mwc.cast_count > 5 THEN 'Large Cast'
        WHEN mwc.cast_count BETWEEN 3 AND 5 THEN 'Medium Cast'
        ELSE 'Small Cast'
    END AS cast_size_category,
    CASE 
        WHEN mwc.production_year < 2000 THEN 'Classic'
        WHEN mwc.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Recent'
    END AS era_category
FROM 
    MoviesWithCast mwc
LEFT JOIN 
    ActorsWithRoleCount akwc ON mwc.person_id = akwc.person_id
LEFT JOIN 
    MovieKeywordCount mkc ON mkc.movie_id = (SELECT id FROM aka_title WHERE title = mwc.title LIMIT 1)
WHERE 
    mwc.production_year IS NOT NULL
AND 
    (mwc.cast_count IS NULL OR mwc.cast_count > 0) 
ORDER BY 
    mwc.production_year DESC, 
    mwc.title;