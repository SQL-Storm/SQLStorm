WITH RECURSIVE cast_hierarchy AS (
    SELECT c.movie_id,
           a.id AS actor_id,
           a.name AS actor_name,
           c.nr_order,
           1 AS depth
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
    WHERE c.nr_order IS NOT NULL

    UNION ALL

    SELECT c.movie_id,
           a.id AS actor_id,
           a.name AS actor_name,
           c.nr_order,
           ch.depth + 1
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
    JOIN cast_hierarchy ch ON c.movie_id = ch.movie_id
    WHERE c.nr_order IS NOT NULL AND c.nr_order > ch.nr_order
),

titles_with_keywords AS (
    SELECT t.id AS title_id,
           t.title,
           t.production_year,
           k.keyword
    FROM title t
    LEFT JOIN movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    WHERE t.production_year >= 2000
),

aggregate_movies AS (
    SELECT th.title,
           COUNT(DISTINCT ch.actor_id) AS num_actors,
           STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
           SUM(CASE WHEN th.production_year IS NULL THEN 0 ELSE 1 END) AS valid_movies
    FROM titles_with_keywords th
    LEFT JOIN cast_hierarchy ch ON th.title_id = ch.movie_id
    GROUP BY th.title
),

final_ranking AS (
    SELECT am.title,
           am.num_actors,
           am.keywords,
           RANK() OVER (ORDER BY am.num_actors DESC, am.title) AS rank
    FROM aggregate_movies am
    WHERE am.valid_movies = (SELECT COUNT(*) FROM titles_with_keywords)
)

SELECT f.title,
       f.num_actors,
       f.keywords,
       f.rank,
       CASE WHEN f.rank < 6 THEN 'Top Movie' 
            WHEN f.rank BETWEEN 6 AND 15 THEN 'Mid-tier Movie' 
            ELSE 'Less Popular' END AS popularity_category
FROM final_ranking f
ORDER BY f.rank;