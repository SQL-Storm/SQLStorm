
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year,
        COALESCE(mt.kind_id, 'Unknown') AS kind_id,
        mt.imdb_index,
        0 AS level
    FROM aka_title AS mt
    WHERE mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id, 
        at.title, 
        at.production_year, 
        COALESCE(at.kind_id, 'Unknown') AS kind_id,
        at.imdb_index,
        mh.level + 1
    FROM movie_link AS ml
    JOIN aka_title AS at ON ml.linked_movie_id = at.id
    JOIN movie_hierarchy AS mh ON ml.movie_id = mh.movie_id
),
actor_info AS (
    SELECT 
        ak.person_id,
        ak.name,
        COUNT(DISTINCT ci.movie_id) AS total_movies,
        MAX(ci.nr_order) AS highest_role_order
    FROM aka_name AS ak
    JOIN cast_info AS ci ON ak.person_id = ci.person_id
    GROUP BY ak.person_id, ak.name
),
keyword_count AS (
    SELECT 
        mk.movie_id,
        COUNT(DISTINCT mk.keyword_id) AS keyword_total
    FROM movie_keyword AS mk
    GROUP BY mk.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    ai.name AS actor_name,
    ai.total_movies,
    ai.highest_role_order,
    COALESCE(kc.keyword_total, 0) AS keyword_total,
    ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY mh.title) AS row_num,
    CASE 
        WHEN mh.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE 'drama%') THEN 'Drama'
        ELSE 'Other'
    END AS genre_category
FROM movie_hierarchy AS mh
LEFT JOIN actor_info AS ai ON mh.movie_id IN (
    SELECT ci.movie_id
    FROM cast_info AS ci 
    WHERE ci.person_id = ai.person_id
)
LEFT JOIN keyword_count AS kc ON mh.movie_id = kc.movie_id
WHERE mh.level = 0 
    AND mh.production_year IS NOT NULL
GROUP BY 
    mh.movie_id,
    mh.title,
    mh.production_year,
    ai.name,
    ai.total_movies,
    ai.highest_role_order,
    kc.keyword_total,
    mh.kind_id
ORDER BY mh.production_year DESC, mh.title
LIMIT 50;
