
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        at.title,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
), movie_stats AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        COUNT(DISTINCT ci.person_id) AS total_cast,
        COUNT(DISTINCT mk.keyword_id) AS total_keywords,
        AVG(LENGTH(mi.info)) AS avg_info_length
    FROM 
        aka_title m
    LEFT JOIN 
        cast_info ci ON m.id = ci.movie_id
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        movie_info mi ON m.id = mi.movie_id
    WHERE 
        m.production_year BETWEEN 2000 AND 2023
    GROUP BY 
        m.id, m.title
), ranked_movies AS (
    SELECT 
        ms.movie_id,
        ms.title,
        ms.total_cast,
        ms.total_keywords,
        ms.avg_info_length,
        RANK() OVER (ORDER BY ms.total_cast DESC, ms.total_keywords DESC) AS rank
    FROM 
        movie_stats ms
)
SELECT 
    rm.title,
    rm.total_cast,
    rm.total_keywords,
    rm.avg_info_length,
    mh.level AS hierarchy_level,
    CASE 
        WHEN rm.total_cast > 100 THEN 'Blockbuster'
        WHEN rm.total_cast BETWEEN 50 AND 100 THEN 'Moderate Success'
        ELSE 'Indie'
    END AS movie_category
FROM 
    ranked_movies rm
LEFT JOIN 
    movie_hierarchy mh ON rm.movie_id = mh.movie_id
WHERE 
    rm.rank <= 10
ORDER BY 
    rm.rank, mh.level DESC;
