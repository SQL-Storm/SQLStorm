WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        c.person_id,
        a.name AS actor_name,
        1 AS level
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        a.name IS NOT NULL

    UNION ALL

    SELECT 
        c.person_id,
        a.name AS actor_name,
        ah.level + 1
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    JOIN 
        ActorHierarchy ah ON ah.person_id = c.person_id
    WHERE 
        ah.level < 5  
)
SELECT 
    a.actor_name,
    ARRAY_AGG(DISTINCT t.title) AS titles,
    COUNT(DISTINCT t.id) AS total_titles,
    SUM(CASE WHEN t.production_year IS NOT NULL THEN 1 ELSE 0 END) AS produced_years,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    COALESCE(NULLIF(SUM(CASE WHEN c.natural_order IS NOT NULL THEN c.natural_order ELSE 0 END), 0), 'No Order') AS role_order,
    AVG(t.production_year) AS avg_production_year
FROM 
    ActorHierarchy a
LEFT JOIN 
    cast_info ci ON ci.person_id = a.person_id
LEFT JOIN 
    aka_title t ON t.id = ci.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = t.id
LEFT JOIN 
    keyword k ON k.id = mk.keyword_id
WHERE 
    t.production_year BETWEEN 2000 AND 2023 
    AND (t.note IS NULL OR t.note NOT LIKE '%unreleased%')
GROUP BY 
    a.actor_name
HAVING 
    COUNT(DISTINCT t.id) > 5 
ORDER BY 
    avg_production_year DESC,
    total_titles DESC
LIMIT 10 OFFSET 0;