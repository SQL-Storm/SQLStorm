
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title m ON ml.movie_id = m.id
    JOIN 
        MovieHierarchy mh ON ml.linked_movie_id = mh.movie_id
),
AggregateMovieStats AS (
    SELECT 
        m.title,
        m.production_year,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        ARRAY_AGG(DISTINCT ak.name) AS actor_names,
        SUM(CASE WHEN ci.note IS NULL THEN 1 ELSE 0 END) AS unknown_roles,
        AVG(CAST(mi.info AS NUMERIC)) AS avg_movie_info
    FROM 
        aka_title m
    JOIN 
        cast_info ci ON m.id = ci.movie_id
    LEFT JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    JOIN 
        movie_info mi ON m.id = mi.movie_id
    WHERE 
        m.production_year >= 2000
    GROUP BY 
        m.title, m.production_year
),
TopMovies AS (
    SELECT 
        title,
        production_year,
        actor_count,
        actor_names,
        ROW_NUMBER() OVER (ORDER BY actor_count DESC) AS rank
    FROM 
        AggregateMovieStats
)
SELECT 
    th.title,
    th.production_year,
    th.actor_count,
    th.actor_names,
    th.rank,
    mh.level
FROM 
    TopMovies th
LEFT JOIN 
    MovieHierarchy mh ON th.title = mh.title AND th.production_year = mh.production_year
WHERE 
    th.rank <= 10
ORDER BY 
    th.rank, th.title;
