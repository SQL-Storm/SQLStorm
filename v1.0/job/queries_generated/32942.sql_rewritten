WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        NULL::integer AS parent_id,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = 1  
    UNION ALL
    SELECT 
        mt.id,
        mt.title,
        mt.production_year,
        mh.movie_id AS parent_id,
        mh.level + 1
    FROM 
        aka_title mt
    INNER JOIN 
        movie_link ml ON mt.id = ml.linked_movie_id
    INNER JOIN 
        MovieHierarchy mh ON mh.movie_id = ml.movie_id
),
RankedActors AS (
    SELECT 
        ca.person_id,
        a.name,
        ROW_NUMBER() OVER (PARTITION BY ca.movie_id ORDER BY ca.nr_order) AS actor_rank,
        COUNT(*) OVER (PARTITION BY ca.person_id) AS total_movies
    FROM 
        cast_info ca
    JOIN 
        aka_name a ON ca.person_id = a.person_id
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(ra.name, 'Unknown Actor') AS main_actor_name,
    COALESCE(rk.keywords, 'No Keywords') AS keywords,
    CASE 
        WHEN ra.actor_rank IS NOT NULL THEN ra.actor_rank
        ELSE -1
    END AS actor_rank,
    CASE 
        WHEN ra.total_movies IS NULL THEN 0
        ELSE ra.total_movies
    END AS total_movies,
    COUNT(DISTINCT mc.company_id) AS production_companies,
    COUNT(DISTINCT ai.id) AS info_count
FROM 
    MovieHierarchy mh
LEFT JOIN 
    RankedActors ra ON ra.total_movies > 1 
    AND ra.actor_rank = 1 
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    movie_info ai ON mh.movie_id = ai.movie_id
LEFT JOIN 
    MovieKeywords rk ON mh.movie_id = rk.movie_id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, ra.name, ra.actor_rank, ra.total_movies
ORDER BY 
    mh.production_year DESC, mh.title;