
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
        
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
), movie_cast AS (
    SELECT 
        ci.movie_id,
        COUNT(DISTINCT ca.person_id) AS cast_count,
        STRING_AGG(DISTINCT ak.name, ', ') AS cast_names
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    GROUP BY 
        ci.movie_id
), keyword_summary AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
), title_stats AS (
    SELECT 
        at.id AS title_id,
        at.title,
        COALESCE(mc.cast_count, 0) AS cast_count,
        COALESCE(ks.keywords, 'No keywords') AS keywords,
        at.production_year,
        ROW_NUMBER() OVER (PARTITION BY at.production_year ORDER BY COALESCE(mc.cast_count, 0) DESC) AS year_rank
    FROM 
        aka_title at
    LEFT JOIN 
        movie_cast mc ON at.id = mc.movie_id
    LEFT JOIN 
        keyword_summary ks ON at.id = ks.movie_id
    WHERE 
        at.production_year >= 2000
)
SELECT 
    ts.title_id,
    ts.title,
    ts.production_year,
    ts.cast_count,
    ts.keywords,
    mh.level AS hierarchy_level
FROM 
    title_stats ts
LEFT JOIN 
    movie_hierarchy mh ON ts.title_id = mh.movie_id
WHERE 
    ts.year_rank <= 10
ORDER BY 
    ts.production_year DESC, 
    ts.cast_count DESC;
