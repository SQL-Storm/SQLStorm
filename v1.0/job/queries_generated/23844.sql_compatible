
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        COALESCE(lt.linked_movie_id, 0) AS linked_movie_id,
        0 AS depth
    FROM 
        aka_title mt
    LEFT JOIN 
        movie_link lt ON mt.id = lt.movie_id
    WHERE 
        mt.production_year >= 2000 AND
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COALESCE(ml.linked_movie_id, 0) AS linked_movie_id,
        mh.depth + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.linked_movie_id = ml.movie_id
)

SELECT 
    ka.name AS actor_name,
    mt.title AS movie_title,
    STRING_AGG(DISTINCT CONCAT(mt.production_year, ' - ', mt.title), ', ') FILTER (WHERE mt.title IS NOT NULL) AS movie_years,
    COUNT(DISTINCT gh.linked_movie_id) AS num_linked_movies,
    AVG(CASE WHEN mt.production_year IS NULL THEN 0 ELSE mt.production_year END) AS avg_production_year,
    MAX(CASE WHEN mt.production_year < 2010 THEN 'Older Than 2010' ELSE '2010 or Later' END) AS era_classification
FROM 
    aka_name ka
JOIN 
    cast_info ci ON ka.person_id = ci.person_id
LEFT JOIN 
    MovieHierarchy mt ON ci.movie_id = mt.movie_id
LEFT JOIN 
    movie_link gh ON mt.movie_id = gh.movie_id
WHERE 
    ka.name IS NOT NULL AND
    (ci.nr_order IS NULL OR ci.nr_order < 10) AND 
    (mt.production_year IS NOT NULL OR EXTRACT(YEAR FROM DATE '2024-10-01') - 1 < 2020)
GROUP BY 
    ka.name, mt.title, mt.production_year
HAVING 
    COUNT(DISTINCT mt.movie_id) > 3 OR 
    SUM(CASE WHEN gh.linked_movie_id IS NOT NULL THEN 1 ELSE 0 END) > 2
ORDER BY 
    actor_name ASC, num_linked_movies DESC
LIMIT 100;
