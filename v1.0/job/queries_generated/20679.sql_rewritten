WITH RankedMovies AS (
    SELECT 
        at.title,
        at.production_year,
        ROW_NUMBER() OVER (PARTITION BY at.production_year ORDER BY at.production_year DESC) AS rank_per_year
    FROM 
        aka_title at
    WHERE 
        at.production_year IS NOT NULL
      AND at.kind_id IN (
          SELECT id FROM kind_type WHERE kind LIKE '%feature%'
      )
),
ActorRoleCounts AS (
    SELECT 
        ai.person_id,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        MAX(CASE WHEN ci.person_role_id IS NULL THEN 0 ELSE 1 END) AS has_roles
    FROM 
        cast_info ci
    JOIN 
        aka_name ai ON ai.person_id = ci.person_id
    GROUP BY 
        ai.person_id
),
CompanyMovieInfo AS (
    SELECT 
        mc.movie_id,
        STRING_AGG(DISTINCT cn.name, ', ') AS companies
    FROM 
        movie_companies mc
    JOIN 
        company_name cn ON cn.id = mc.company_id
    WHERE 
        mc.note IS NULL 
      OR mc.note NOT LIKE '%misc%'
    GROUP BY 
        mc.movie_id
),
NullCheck AS (
    SELECT 
        DISTINCT t.title,
        CASE 
            WHEN ci.person_id IS NULL THEN 'Unknown Actor'
            ELSE an.name
        END AS actor_name,
        cmj.companies
    FROM 
        title t
    LEFT JOIN 
        cast_info ci ON ci.movie_id = t.id
    LEFT JOIN 
        aka_name an ON ci.person_id = an.person_id
    LEFT JOIN 
        CompanyMovieInfo cmj ON cmj.movie_id = t.id
    WHERE 
        t.production_year IN (SELECT DISTINCT production_year FROM RankedMovies WHERE rank_per_year <= 5)
)
SELECT 
    n.actor_name,
    jsonb_agg(jsonb_build_object('title', nm.title, 'year', nm.production_year, 'companies', nm.companies)) AS movie_details
FROM 
    NullCheck nm
LEFT JOIN 
    ActorRoleCounts ar ON ar.person_id = nm.actor_name
WHERE 
    ar.movie_count > 2 AND 
    nm.companies IS NOT NULL
GROUP BY 
    nm.actor_name
HAVING 
    COUNT(nm.title) > 1
ORDER BY 
    COUNT(nm.title) DESC, 
    n.actor_name;