
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id, 
        t.title, 
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year) AS rank_per_year
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
        AND t.production_year > 2000
        AND t.title IS NOT NULL
), 

CastCounts AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS actor_count
    FROM 
        cast_info c
    GROUP BY 
        c.movie_id
), 

CompanyDetails AS (
    SELECT 
        mc.movie_id,
        co.name AS company_name,
        ct.kind AS company_type
    FROM 
        movie_companies mc
    JOIN 
        company_name co ON mc.company_id = co.id
    JOIN 
        company_type ct ON mc.company_type_id = ct.id
    WHERE 
        co.country_code IS NOT NULL
        AND co.country_code <> ''
), 

DetailedMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        cc.actor_count,
        STRING_AGG(DISTINCT cd.company_name || ' (' || cd.company_type || ')') AS companies
    FROM 
        RankedMovies rm
    LEFT JOIN 
        CastCounts cc ON rm.movie_id = cc.movie_id
    LEFT JOIN 
        CompanyDetails cd ON rm.movie_id = cd.movie_id
    GROUP BY 
        rm.movie_id, rm.title, rm.production_year, cc.actor_count
)

SELECT 
    dm.title,
    dm.production_year,
    dm.actor_count,
    dm.companies,
    CASE 
        WHEN dm.actor_count IS NULL THEN 'No actors'
        ELSE 'Has actors'
    END AS actor_status,
    CASE 
        WHEN dm.actor_count > 10 THEN 'Large cast'
        WHEN dm.actor_count > 5 THEN 'Medium cast'
        ELSE 'Small cast'
    END AS cast_size,
    COALESCE(dm.companies, 'No companies') AS company_info
FROM 
    DetailedMovies dm
WHERE 
    dm.rank_per_year <= 3
ORDER BY 
    dm.production_year DESC, 
    dm.actor_count DESC
LIMIT 20;
