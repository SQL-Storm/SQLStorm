
WITH RankedMovies AS (
    SELECT
        t.title,
        t.production_year,
        COUNT(ci.person_id) AS cast_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(ci.person_id) DESC) AS rn
    FROM
        aka_title t
    LEFT JOIN
        cast_info ci ON t.id = ci.movie_id
    GROUP BY
        t.id, t.title, t.production_year
),

TopYearFilms AS (
    SELECT
        rm.title,
        rm.production_year
    FROM
        RankedMovies rm
    WHERE
        rm.rn <= 5
),

MovieCompanyStats AS (
    SELECT
        t.title,
        COUNT(DISTINCT mc.company_id) AS company_count,
        STRING_AGG(DISTINCT cn.name, ', ') AS companies,
        (SELECT AVG(CAST(mi.info AS FLOAT))
         FROM movie_info mi
         WHERE mi.movie_id = t.id AND mi.info_type_id = 1) AS avg_budget 
    FROM
        aka_title t
    JOIN
        movie_companies mc ON t.id = mc.movie_id
    LEFT JOIN
        company_name cn ON mc.company_id = cn.id
    WHERE
        t.production_year BETWEEN 2000 AND 2020
    GROUP BY
        t.title
)

SELECT
    tyf.title,
    tyf.production_year,
    mcs.company_count,
    mcs.companies,
    COALESCE(mcs.avg_budget, 0) AS avg_budget,
    CASE 
        WHEN mcs.company_count IS NULL THEN 'Companyless Movie'
        WHEN mcs.company_count < 3 THEN 'Low Production'
        WHEN mcs.company_count >= 3 AND mcs.company_count <= 5 THEN 'Moderately Produced'
        ELSE 'High Production'
    END AS production_level,
    (SELECT COUNT(DISTINCT ci.person_id) 
     FROM cast_info ci 
     WHERE ci.movie_id IN (SELECT mc.movie_id FROM movie_companies mc WHERE mc.company_id IS NOT NULL)
    ) AS total_cast_in_companies
FROM
    TopYearFilms tyf
LEFT JOIN
    MovieCompanyStats mcs ON tyf.title = mcs.title
ORDER BY
    tyf.production_year DESC, 
    mcs.company_count DESC NULLS LAST;
