WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
)

SELECT 
    a.name AS actor_name,
    COUNT(DISTINCT ca.movie_id) AS film_count,
    AVG(MovieAge) AS average_movie_age,
    STRING_AGG(DISTINCT mt.title, ', ') AS movie_titles,
    FIRST_VALUE(mt.production_year) OVER (PARTITION BY a.id ORDER BY mt.production_year) AS first_movie_year,
    (CASE 
        WHEN COUNT(DISTINCT ca.movie_id) > 10 THEN 'Veteran Actor'
        ELSE 'Newcomer Actor'
    END) AS actor_status
FROM 
    aka_name a
JOIN 
    cast_info ca ON a.person_id = ca.person_id
JOIN 
    aka_title mt ON ca.movie_id = mt.id
LEFT JOIN 
    (SELECT 
         movie_id, 
         EXTRACT(YEAR FROM cast('2024-10-01' as date)) - production_year AS MovieAge
     FROM 
         aka_title
     WHERE 
         production_year IS NOT NULL
    ) AS MovieAges ON MovieAges.movie_id = mt.id
WHERE 
    a.name IS NOT NULL
    AND ca.note IS NULL
GROUP BY 
    a.id
HAVING 
    COUNT(DISTINCT ca.movie_id) > 3
ORDER BY 
    film_count DESC;