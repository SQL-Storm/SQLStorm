WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC) AS rn,
        COUNT(mk.keyword_id) AS keyword_count
    FROM 
        title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
ActorsMovies AS (
    SELECT 
        a.person_id, 
        a.name,
        COUNT(DISTINCT ci.movie_id) AS movies_count
    FROM 
        aka_name a
    LEFT JOIN 
        cast_info ci ON a.person_id = ci.person_id
    GROUP BY 
        a.person_id, a.name
),
RecentMovies AS (
    SELECT 
        m.*, 
        COALESCE(mk.keyword_count, 0) AS keyword_count
    FROM 
        RankedMovies m
    LEFT JOIN 
        (
            SELECT 
                movie_id, 
                COUNT(keyword_id) AS keyword_count
            FROM 
                movie_keyword
            WHERE 
                movie_id IN (SELECT id FROM title WHERE production_year >= 2020)
            GROUP BY 
                movie_id
        ) mk ON m.movie_id = mk.movie_id
)
SELECT 
    rm.title,
    rm.production_year,
    COALESCE(am.movies_count, 0) AS actor_count,
    rm.keyword_count,
    CASE 
        WHEN rm.keyword_count > 5 THEN 'Highly Keyworded'
        WHEN rm.keyword_count = 0 THEN 'No Keywords'
        ELSE 'Moderate Keywords'
    END AS keyword_status,
    (SELECT AVG(movies_count) FROM ActorsMovies) AS avg_actors_movies,
    (SELECT COUNT(*) FROM title WHERE production_year < 2000) AS classic_movies_count
FROM 
    RecentMovies rm
LEFT JOIN 
    ActorsMovies am ON rm.movie_id = am.person_id
WHERE 
    rm.production_year IS NOT NULL
    AND rm.rn <= 10
ORDER BY 
    rm.production_year DESC, rm.keyword_count DESC
OFFSET 5 ROWS
FETCH NEXT 10 ROWS ONLY;