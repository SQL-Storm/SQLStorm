
WITH RankedTitles AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS title_rank,
        COUNT(mk.keyword) OVER (PARTITION BY t.id) AS keyword_count
    FROM 
        title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
),
CastWithDetails AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS total_cast,
        MAX(a.name) AS lead_actor
    FROM 
        cast_info c
    LEFT JOIN 
        aka_name a ON c.person_id = a.person_id
    GROUP BY 
        c.movie_id
),
KeywordStats AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),
FinalResults AS (
    SELECT 
        rt.title,
        rt.production_year,
        COALESCE(cwd.total_cast, 0) AS total_cast,
        cwd.lead_actor,
        ks.keywords,
        rt.keyword_count
    FROM 
        RankedTitles rt
    LEFT JOIN 
        CastWithDetails cwd ON rt.title_id = cwd.movie_id
    LEFT JOIN 
        KeywordStats ks ON rt.title_id = ks.movie_id
    WHERE 
        rt.title_rank <= 3
        AND (rt.keyword_count > 0 OR cwd.total_cast IS NOT NULL)
)
SELECT 
    fr.title,
    fr.production_year,
    fr.total_cast,
    fr.lead_actor,
    fr.keywords,
    CASE 
        WHEN fr.total_cast > 5 THEN 'Large Cast'
        WHEN fr.total_cast BETWEEN 3 AND 5 THEN 'Medium Cast'
        ELSE 'Small Cast' 
    END AS cast_size_category
FROM 
    FinalResults fr
ORDER BY 
    fr.production_year DESC, 
    fr.title;
