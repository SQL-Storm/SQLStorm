
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),

AggregatedData AS (
    SELECT 
        kh.keyword,
        COUNT(DISTINCT mc.movie_id) AS movie_count,
        AVG(COALESCE(mi.info_length, 0)) AS avg_info_length,
        COUNT(DISTINCT ci.person_id) AS cast_count
    FROM 
        keyword kh
    LEFT JOIN 
        movie_keyword mk ON kh.id = mk.keyword_id
    LEFT JOIN 
        aka_title at ON mk.movie_id = at.id
    LEFT JOIN 
        movie_info mi ON at.id = mi.movie_id
    LEFT JOIN 
        movie_companies mc ON at.id = mc.movie_id
    LEFT JOIN 
        cast_info ci ON at.id = ci.movie_id
    GROUP BY 
        kh.keyword
),

RankedMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        ROW_NUMBER() OVER (PARTITION BY mh.level ORDER BY mh.production_year DESC) AS movie_rank,
        CASE 
            WHEN mh.level = 1 THEN 'Root'
            ELSE 'Child'
        END AS hierarchy_type
    FROM 
        MovieHierarchy mh
)

SELECT 
    ad.keyword,
    ad.movie_count,
    ad.avg_info_length,
    ad.cast_count,
    rm.title,
    rm.production_year,
    rm.hierarchy_type,
    COALESCE(NULLIF(rm.movie_rank, 0), 'No Rank') AS movie_rank_status
FROM 
    AggregatedData ad
JOIN 
    RankedMovies rm ON ad.movie_count > 1
WHERE 
    ad.movie_count > 0
ORDER BY 
    ad.movie_count DESC, rm.production_year ASC;
