
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        1 AS level,
        ARRAY[mt.id] AS path
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        mh.level + 1,
        mh.path || ml.linked_movie_id
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
)

SELECT 
    ah.name AS actor_name,
    mh.movie_title,
    mt.production_year,
    mrc.avg_rating,
    COUNT(DISTINCT mc.company_id) AS production_companies,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords
FROM 
    movie_hierarchy mh
JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
JOIN 
    aka_name ah ON cc.subject_id = ah.person_id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    (SELECT 
        movie_id,
        AVG(rating) AS avg_rating
    FROM 
        movie_info
    WHERE 
        info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
    GROUP BY 
        movie_id) mrc ON mh.movie_id = mrc.movie_id
WHERE 
    ah.name IS NOT NULL
GROUP BY 
    ah.name, mh.movie_title, mt.production_year, mrc.avg_rating
HAVING 
    COUNT(DISTINCT mc.company_id) > 1
ORDER BY 
    mt.production_year DESC, mrc.avg_rating DESC
LIMIT 50;
