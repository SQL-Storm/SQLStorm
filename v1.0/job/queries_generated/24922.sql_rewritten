WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.id DESC) AS rn,
        COALESCE(mk.keyword, 'No Keyword') AS movie_keyword
    FROM 
        aka_title AS t
    LEFT JOIN 
        movie_keyword AS mk ON t.id = mk.movie_id
    WHERE 
        t.production_year IS NOT NULL
),
AverageRoleCounts AS (
    SELECT 
        ci.movie_id,
        COUNT(DISTINCT ci.person_id) AS role_count
    FROM 
        cast_info AS ci
    WHERE 
        ci.note IS NULL OR ci.note <> 'cameo'  
    GROUP BY 
        ci.movie_id
),
QualifiedMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        ar.role_count
    FROM 
        RankedMovies AS rm
    LEFT JOIN 
        AverageRoleCounts AS ar ON rm.movie_id = ar.movie_id
    WHERE 
        ar.role_count > 5 AND 
        rm.rn <= 3  
),
MovieCompanies AS (
    SELECT 
        mc.movie_id,
        GROUP_CONCAT(c.name) AS company_names
    FROM 
        movie_companies AS mc
    JOIN 
        company_name AS c ON mc.company_id = c.id
    GROUP BY 
        mc.movie_id
),
FinalReport AS (
    SELECT 
        qm.title,
        qm.production_year,
        COALESCE(mc.company_names, 'N/A') AS companies,
        qm.role_count
    FROM 
        QualifiedMovies AS qm
    LEFT JOIN 
        MovieCompanies AS mc ON qm.movie_id = mc.movie_id
)
SELECT 
    fr.title,
    fr.production_year,
    fr.companies,
    fr.role_count,
    CASE 
        WHEN fr.role_count BETWEEN 5 AND 10 THEN 'Moderate Cast'
        WHEN fr.role_count > 10 THEN 'Large Cast'
        ELSE 'Small Cast'
    END AS cast_size,
    FIRST_VALUE(fr.title) OVER (PARTITION BY fr.production_year ORDER BY fr.role_count DESC) AS most_popular_title,  
    NULLIF(GROUP_CONCAT(DISTINCT fr.companies), '') AS distinct_companies_count
FROM 
    FinalReport AS fr
WHERE 
    fr.production_year BETWEEN 2000 AND 2023  
ORDER BY 
    fr.production_year DESC, fr.role_count DESC;