
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        mh.level + 1
    FROM 
        movie_hierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    WHERE 
        mh.level < 5
),
ranked_cast AS (
    SELECT 
        ci.movie_id,
        an.name,
        ROW_NUMBER() OVER(PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_rank
    FROM 
        cast_info ci
    JOIN 
        aka_name an ON ci.person_id = an.person_id
)
SELECT 
    m.title,
    m.production_year,
    c.name AS actor_name,
    rc.role_rank,
    COALESCE(mc.note, 'No Company Info') AS company_note,
    k.keyword,
    CASE 
        WHEN rc.role_rank <= 3 THEN 'Top Role'
        ELSE 'Supporting Role'
    END AS role_status
FROM 
    movie_hierarchy m
LEFT JOIN 
    ranked_cast rc ON m.movie_id = rc.movie_id
LEFT JOIN 
    movie_companies mc ON m.movie_id = mc.movie_id
LEFT JOIN 
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
WHERE 
    m.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE 'Drama%')
    AND m.production_year >= 2020
GROUP BY 
    m.title,
    m.production_year,
    c.name,
    rc.role_rank,
    mc.note,
    k.keyword
ORDER BY 
    m.production_year DESC, rc.role_rank
OFFSET 10 ROWS FETCH NEXT 20 ROWS ONLY;
