WITH RECURSIVE movie_hierarchy AS (
    SELECT mt.id AS movie_id, mt.title, 0 AS depth
    FROM aka_title AS mt
    WHERE mt.production_year >= 2000  

    UNION ALL

    SELECT ml.linked_movie_id, at.title, mh.depth + 1
    FROM movie_link AS ml
    JOIN aka_title AS at ON ml.linked_movie_id = at.id
    JOIN movie_hierarchy AS mh ON ml.movie_id = mh.movie_id
)
SELECT 
    m.id AS movie_id,
    m.title,
    COUNT(DISTINCT ci.person_id) AS cast_count,
    SUM(CASE WHEN ci.note LIKE '%lead%' THEN 1 ELSE 0 END) AS lead_roles,
    COUNT(DISTINCT k.keyword) AS keyword_count,
    STRING_AGG(DISTINCT c.name, ', ') AS cast_members,
    m.production_year,
    mh.depth AS link_depth,
    CASE 
        WHEN m.production_year < 2010 THEN 'Older Movie'
        WHEN m.production_year BETWEEN 2010 AND 2020 THEN 'Recent Movie'
        ELSE 'Latest Movie'
    END AS movie_category
FROM aka_title AS m
LEFT JOIN cast_info AS ci ON m.id = ci.movie_id
LEFT JOIN movie_keyword AS mk ON m.id = mk.movie_id
LEFT JOIN keyword AS k ON mk.keyword_id = k.id
LEFT JOIN aka_name AS c ON ci.person_id = c.person_id
LEFT JOIN movie_hierarchy AS mh ON m.id = mh.movie_id
WHERE 
    m.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('movie', 'tv series'))
    AND m.production_year IS NOT NULL
GROUP BY m.id, m.title, m.production_year, mh.depth
ORDER BY m.production_year DESC, cast_count DESC;