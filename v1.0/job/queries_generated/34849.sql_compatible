
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title AS movie_title,
        mh.depth + 1 AS depth
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
)

SELECT 
    ak.name AS actor_name,
    mt.movie_title,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    AVG(CASE 
            WHEN ci.nr_order IS NOT NULL THEN ci.nr_order 
            ELSE 0 
        END) AS avg_order,
    STRING_AGG(DISTINCT mc.company_name, ', ') AS production_companies,
    COUNT(*) OVER (PARTITION BY ak.id) AS movies_with_role_count
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id
LEFT JOIN 
    movie_companies mc ON mt.id = mc.movie_id
WHERE 
    ak.name IS NOT NULL
    AND mt.production_year BETWEEN 2000 AND 2023
    AND (ci.person_role_id IS NULL OR ci.person_role_id IN (1, 2)) 
GROUP BY 
    ak.id, mt.movie_title, ak.name
HAVING 
    COUNT(DISTINCT kc.keyword) > 2 
ORDER BY 
    avg_order DESC, keyword_count DESC
LIMIT 10;
