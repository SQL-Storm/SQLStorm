
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year BETWEEN 2000 AND 2020

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        movie_hierarchy mh
    JOIN movie_link ml ON ml.movie_id = mh.movie_id
    JOIN aka_title m ON m.id = ml.linked_movie_id
    WHERE 
        mh.level < 3 
)

SELECT 
    m.movie_id,
    m.title,
    m.production_year,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    COUNT(DISTINCT ci.person_id) FILTER (WHERE ci.person_role_id IS NOT NULL) AS total_cast,
    COUNT(DISTINCT ci.person_id) FILTER (WHERE COALESCE(ci.note, '') != '') AS cast_with_notes,
    CASE 
        WHEN COUNT(DISTINCT ci.person_id) = 0 THEN 'No Cast Available' 
        ELSE 'Cast Available' 
    END AS cast_status,
    ARRAY_AGG(DISTINCT cn.name ORDER BY cn.name) AS company_names
FROM 
    movie_hierarchy m
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = m.movie_id
LEFT JOIN 
    keyword k ON k.id = mk.keyword_id
LEFT JOIN 
    complete_cast cc ON cc.movie_id = m.movie_id
LEFT JOIN 
    cast_info ci ON ci.movie_id = cc.movie_id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = m.movie_id
LEFT JOIN 
    company_name cn ON cn.id = mc.company_id
GROUP BY 
    m.movie_id, m.title, m.production_year
HAVING 
    COUNT(DISTINCT ci.person_id) > 0  
ORDER BY 
    m.production_year DESC, 
    total_cast DESC
LIMIT 10;
