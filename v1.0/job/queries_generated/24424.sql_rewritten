WITH RECURSIVE MovieGraph AS (
    SELECT 
        c.movie_id,
        t.title,
        c.person_id,
        a.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY a.name) AS actor_order,
        0 AS depth
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
    JOIN aka_title t ON c.movie_id = t.movie_id
    WHERE t.production_year >= 2000
      AND a.name IS NOT NULL
    
    UNION ALL

    SELECT 
        mg.movie_id,
        t.title,
        c.person_id,
        a.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY mg.movie_id ORDER BY a.name) AS actor_order,
        mg.depth + 1
    FROM MovieGraph mg
    JOIN cast_info c ON c.movie_id = (
        SELECT linked_movie_id
        FROM movie_link ml
        WHERE ml.movie_id = mg.movie_id
        AND ml.link_type_id = 1 
        LIMIT 1
    )
    JOIN aka_name a ON c.person_id = a.person_id
    JOIN aka_title t ON c.movie_id = t.movie_id
    WHERE t.production_year >= 2000
      AND a.name IS NOT NULL
)

SELECT 
    g.movie_id,
    g.title,
    STRING_AGG(g.actor_name, ', ') AS actor_names,
    COUNT(*) AS total_actors,
    MAX(g.actor_order) AS max_actor_order,
    MIN(g.depth) AS min_depth,
    CASE 
        WHEN COUNT(*) > 10 THEN 'Large Cast'
        WHEN COUNT(*) BETWEEN 5 AND 10 THEN 'Medium Cast'
        ELSE 'Small Cast'
    END AS cast_size_category
FROM MovieGraph g
GROUP BY g.movie_id, g.title
HAVING MAX(g.actor_order) < 20
AND MIN(g.depth) <= 2
ORDER BY total_actors DESC, g.title ASC
LIMIT 100
OFFSET 0;