
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        COALESCE(link.linked_movie_id, m.id) AS linked_movie_id,
        0 AS level
    FROM 
        title m
    LEFT JOIN 
        movie_link link ON m.id = link.movie_id
    WHERE 
        m.production_year > 2000

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        COALESCE(link.linked_movie_id, m.id) AS linked_movie_id,
        h.level + 1
    FROM 
        movie_hierarchy h
    JOIN 
        movie_link link ON h.linked_movie_id = link.movie_id
    JOIN 
        title m ON link.linked_movie_id = m.id
    WHERE 
        m.production_year > 2000
),

actor_roles AS (
    SELECT 
        c.movie_id,
        ak.name,
        r.role AS role_type,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS role_order
    FROM 
        cast_info c
    JOIN 
        aka_name ak ON c.person_id = ak.person_id
    JOIN 
        role_type r ON c.role_id = r.id
),

movie_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)

SELECT 
    mh.title AS movie_title,
    mh.production_year,
    STRING_AGG(DISTINCT ar.name || ' (' || ar.role_type || ')', ', ') AS actors,
    mh.level AS movie_depth,
    COALESCE(mk.keywords, 'No Keywords') AS keywords,
    COUNT(DISTINCT ar.role_order) AS num_roles
FROM 
    movie_hierarchy mh
JOIN 
    actor_roles ar ON mh.movie_id = ar.movie_id
LEFT JOIN 
    movie_keywords mk ON mh.movie_id = mk.movie_id
GROUP BY 
    mh.title, mh.production_year, mh.level
ORDER BY 
    mh.production_year DESC, movie_depth ASC;
