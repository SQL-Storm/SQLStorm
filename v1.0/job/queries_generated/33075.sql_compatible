
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        1 AS level,
        CAST(m.title AS VARCHAR(255)) AS path
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        mh.level + 1,
        CAST(CONCAT(mh.path, ' -> ', m.title) AS VARCHAR(255)) AS path
    FROM 
        aka_title m
    INNER JOIN 
        movie_link ml ON ml.linked_movie_id = m.id
    INNER JOIN 
        MovieHierarchy mh ON mh.movie_id = ml.movie_id
)
SELECT 
    m.id AS movie_id,
    m.title AS movie_title,
    COALESCE(ka.name, 'Unknown') AS actor_name,
    COALESCE(GROUP_CONCAT(DISTINCT kw.keyword), 'No Keywords') AS keywords,
    m.production_year,
    ROW_NUMBER() OVER (PARTITION BY m.kind_id ORDER BY m.production_year DESC) AS rank,
    mh.path AS movie_path,
    CASE 
        WHEN m.production_year = 2023 THEN 'New Release'
        WHEN m.production_year < 2020 THEN 'Older Category'
        ELSE 'Recent Category'
    END AS category
FROM 
    aka_title m
LEFT JOIN 
    cast_info ci ON m.id = ci.movie_id
LEFT JOIN 
    aka_name ka ON ci.person_id = ka.person_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = m.id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    MovieHierarchy mh ON m.id = mh.movie_id
WHERE 
    m.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('movie', 'short'))
GROUP BY 
    m.id, m.title, ka.name, m.production_year, mh.path
ORDER BY 
    m.production_year DESC, rank;
