
WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        1 AS level
    FROM 
        movie_link ml
    WHERE 
        ml.link_type_id = (SELECT id FROM link_type WHERE link = 'sequel')
    UNION ALL
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.linked_movie_id
    WHERE 
        ml.link_type_id = (SELECT id FROM link_type WHERE link = 'sequel')
)

SELECT 
    t.title AS main_movie_title,
    t.production_year AS main_movie_year,
    a.name AS actor_name,
    c.kind AS company_type,
    COUNT(DISTINCT mh.linked_movie_id) AS num_of_sequels,
    AVG(mv.info_length) AS avg_length,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    SUM(CASE WHEN mi.info_type_id IS NOT NULL THEN 1 ELSE 0 END) AS has_info,
    MAX(t.production_year) OVER(PARTITION BY a.person_id) AS latest_movie_year
FROM 
    title t
JOIN 
    cast_info ci ON t.id = ci.movie_id
JOIN 
    aka_name a ON ci.person_id = a.person_id
JOIN 
    movie_companies mc ON t.id = mc.movie_id
JOIN 
    company_type c ON mc.company_type_id = c.id
LEFT JOIN 
    movie_info mi ON t.id = mi.movie_id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_hierarchy mh ON mh.movie_id = t.id
LEFT JOIN 
    (
        SELECT 
            movie_id, 
            LENGTH(info) AS info_length 
        FROM 
            movie_info 
        WHERE 
            info IS NOT NULL
    ) mv ON mv.movie_id = t.id
WHERE 
    t.production_year >= 2000
GROUP BY 
    t.title, t.production_year, a.name, c.kind
ORDER BY 
    num_of_sequels DESC, main_movie_year DESC;
