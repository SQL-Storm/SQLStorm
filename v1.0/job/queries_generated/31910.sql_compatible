
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
)
SELECT 
    ak.name AS actor_name,
    mw.title AS movie_title,
    mw.production_year,
    COUNT(DISTINCT c.person_role_id) AS role_count,
    ROW_NUMBER() OVER (PARTITION BY mw.production_year ORDER BY COUNT(DISTINCT c.person_role_id) DESC) AS role_rank,
    (SELECT STRING_AGG(DISTINCT cn.name, ', ') 
     FROM char_name cn 
     WHERE cn.imdb_id IN (SELECT ci.person_id FROM cast_info ci WHERE ci.movie_id = mw.movie_id)
    ) AS character_names,
    CASE 
        WHEN mv.production_year IS NULL THEN 'No Links'
        ELSE 'Linked'
    END AS link_status
FROM 
    MovieHierarchy mw
LEFT JOIN 
    cast_info c ON mw.movie_id = c.movie_id
LEFT JOIN 
    aka_name ak ON ak.person_id = c.person_id
LEFT JOIN 
    movie_link ml ON mw.movie_id = ml.movie_id
LEFT JOIN 
    aka_title mv ON ml.linked_movie_id = mv.id
WHERE 
    mw.production_year BETWEEN 2000 AND 2023
GROUP BY 
    ak.name, mw.title, mw.production_year, mv.production_year
HAVING 
    COUNT(DISTINCT c.person_role_id) > 1
ORDER BY 
    mw.production_year DESC, role_count DESC;
