
WITH RECURSIVE Movie_Hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        1 AS hierarchy_level,
        m.title AS full_hierarchy
    FROM 
        aka_title AS m
    WHERE 
        m.production_year >= 2000  
    UNION ALL
    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title AS movie_title,
        mh.hierarchy_level + 1 AS hierarchy_level,
        mh.full_hierarchy || ' -> ' || mt.title
    FROM 
        Movie_Hierarchy AS mh
    JOIN 
        movie_link AS ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title AS mt ON ml.linked_movie_id = mt.id
)
SELECT 
    ak.name AS actor_name,
    mt.movie_title,
    mh.hierarchy_level,
    mh.full_hierarchy,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    AVG(m.production_year) AS average_production_year,
    STRING_AGG(DISTINCT c.name, ', ') AS company_names
FROM 
    Movie_Hierarchy AS mh
JOIN 
    cast_info AS ci ON mh.movie_id = ci.movie_id
JOIN 
    aka_name AS ak ON ci.person_id = ak.person_id
LEFT JOIN 
    movie_keyword AS mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    movie_companies AS mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    company_name AS c ON mc.company_id = c.id
JOIN 
    aka_title AS mt ON mh.movie_id = mt.id
WHERE 
    ak.name IS NOT NULL
    AND c.name IS NOT NULL
    AND mt.production_year BETWEEN 2000 AND 2023
GROUP BY 
    ak.name, mt.movie_title, mh.hierarchy_level, mh.full_hierarchy
ORDER BY 
    mh.hierarchy_level DESC, average_production_year DESC
LIMIT 100;
