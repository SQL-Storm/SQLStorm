WITH RECURSIVE MovieHierarchy AS (
    SELECT
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        0 AS level
    FROM
        aka_title m
    WHERE
        m.production_year >= 2000
    UNION ALL
    SELECT
        m.id AS movie_id,
        CONCAT('Sequel: ', m.title) AS movie_title,
        m.production_year,
        mh.level + 1
    FROM
        aka_title m
    JOIN
        movie_link ml ON m.id = ml.linked_movie_id
    JOIN
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
ActorRoles AS (
    SELECT
        ci.movie_id,
        ka.name AS actor_name,
        rt.role AS role_title,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_order
    FROM
        cast_info ci
    JOIN
        aka_name ka ON ci.person_id = ka.person_id
    JOIN
        role_type rt ON ci.role_id = rt.id
),
MovieRatings AS (
    SELECT
        m.id AS movie_id,
        AVG(r.rating) AS average_rating
    FROM
        aka_title m
    LEFT JOIN
        movie_info mi ON m.id = mi.movie_id
    LEFT JOIN
        (SELECT movie_id, rating FROM movie_info WHERE info_type_id = (SELECT id FROM info_type WHERE info = 'rating')) r ON m.id = r.movie_id
    GROUP BY
        m.id
)
SELECT
    mh.movie_id,
    mh.movie_title,
    mh.production_year,
    COALESCE(ar.actor_name, 'Unknown Actor') AS actor_name,
    COALESCE(ar.role_title, 'Unknown Role') AS role_title,
    m.avg_rating,
    mh.level
FROM
    MovieHierarchy mh
LEFT JOIN
    ActorRoles ar ON mh.movie_id = ar.movie_id
LEFT JOIN
    MovieRatings m ON mh.movie_id = m.movie_id
WHERE
    mh.level < 3    
ORDER BY
    mh.production_year DESC,
    mh.movie_title ASC,
    ar.role_order;