
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title AS movie_title,
        1 AS level,
        ARRAY[mt.id] AS path
    FROM
        aka_title mt
    WHERE
        mt.id IS NOT NULL
    UNION ALL
    SELECT
        ml.linked_movie_id AS movie_id,
        at.title AS movie_title,
        mh.level + 1 AS level,
        path || ml.linked_movie_id
    FROM
        MovieHierarchy mh
    JOIN movie_link ml ON mh.movie_id = ml.movie_id
    JOIN aka_title at ON ml.linked_movie_id = at.id
    WHERE
        NOT ml.linked_movie_id = ANY(mh.path)
),
CastDetails AS (
    SELECT
        c.movie_id,
        ak.name AS actor_name,
        ak.person_id,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS actor_rank
    FROM
        cast_info c
    JOIN aka_name ak ON c.person_id = ak.person_id
),
MovieKeywords AS (
    SELECT
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM
        movie_keyword mk
    JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY
        mk.movie_id
)
SELECT
    mh.movie_id,
    mh.movie_title,
    COALESCE(CD.actor_name, 'Unknown Actor') AS actor_name,
    CD.actor_rank,
    COALESCE(MK.keywords, 'No Keywords') AS keywords,
    CASE 
        WHEN mh.level = 1 THEN 'Root'
        WHEN mh.level < 3 THEN 'Sub-Movie'
        ELSE 'Branch'
    END AS movie_level,
    COUNT(DISTINCT CD.actor_name) OVER(PARTITION BY mh.movie_id) AS total_actors,
    (SELECT COUNT(*)
     FROM movie_info mi 
     WHERE mi.movie_id = mh.movie_id) AS info_count
FROM
    MovieHierarchy mh
LEFT JOIN 
    CastDetails CD ON mh.movie_id = CD.movie_id
LEFT JOIN 
    MovieKeywords MK ON mh.movie_id = MK.movie_id
WHERE
    mh.level <= 5
ORDER BY
    mh.movie_id, CD.actor_rank;
