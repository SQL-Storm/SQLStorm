
WITH RankedMovies AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS title_rank
    FROM
        aka_title t
    WHERE
        t.production_year IS NOT NULL
),
ActorCounts AS (
    SELECT
        ci.movie_id,
        COUNT(DISTINCT ci.person_id) AS actor_count
    FROM
        cast_info ci
    GROUP BY
        ci.movie_id
),
CompanyDetails AS (
    SELECT
        mc.movie_id,
        STRING_AGG(DISTINCT cn.name, ', ') AS companies
    FROM
        movie_companies mc
    JOIN
        company_name cn ON mc.company_id = cn.id
    GROUP BY
        mc.movie_id
)
SELECT
    rm.title,
    rm.production_year,
    ac.actor_count,
    cd.companies,
    COALESCE(NULLIF(ac.actor_count, 0), 'No Actors') AS actor_info,
    AVG(COALESCE(ti.info, 0)::numeric) AS avg_info_score
FROM
    RankedMovies rm
LEFT JOIN
    ActorCounts ac ON rm.movie_id = ac.movie_id
LEFT JOIN
    CompanyDetails cd ON rm.movie_id = cd.movie_id
LEFT JOIN
    movie_info mi ON rm.movie_id = mi.movie_id
LEFT JOIN
    info_type it ON mi.info_type_id = it.id AND it.info = 'score'
WHERE
    (rm.production_year > 2000 AND rm.production_year < 2023) OR
    (rm.production_year IS NULL)
GROUP BY
    rm.movie_id, rm.title, rm.production_year, ac.actor_count, cd.companies
HAVING
    COUNT(DISTINCT it.id) > 0
ORDER BY
    rm.production_year DESC, rm.title ASC
LIMIT 100;
