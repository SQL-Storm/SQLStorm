
WITH RankedMovies AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS actor_count,
        ROW_NUMBER() OVER(PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS year_rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.title, t.production_year
),
ActorsWithRoles AS (
    SELECT 
        a.id AS actor_id,
        ak.name AS actor_name,
        r.role AS role_name,
        c.movie_id,
        t.title
    FROM 
        aka_name ak
    JOIN 
        cast_info c ON ak.person_id = c.person_id
    JOIN 
        role_type r ON c.role_id = r.id
    JOIN 
        aka_title t ON c.movie_id = t.id
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),
MoviesRanking AS (
    SELECT 
        rm.title,
        rm.production_year,
        mk.keywords,
        rm.actor_count,
        CASE 
            WHEN rm.actor_count > 5 THEN 'High'
            WHEN rm.actor_count BETWEEN 3 AND 5 THEN 'Medium'
            ELSE 'Low'
        END AS actor_density
    FROM 
        RankedMovies rm
    LEFT JOIN 
        MovieKeywords mk ON rm.title = mk.movie_id
    WHERE 
        rm.year_rank <= 10
)
SELECT 
    mv.title,
    mv.production_year,
    mv.keywords,
    mv.actor_count,
    mv.actor_density,
    COALESCE(aw.actor_name, 'Unknown Actor') AS actor_name,
    CASE 
        WHEN mw.production_year IS NULL THEN 'No keywords available'
        ELSE 'Keywords present'
    END AS keyword_status
FROM 
    MoviesRanking mv
LEFT JOIN 
    ActorsWithRoles aw ON mv.title = aw.title
LEFT JOIN 
    aka_title mw ON mv.title = mw.title AND mw.production_year = mv.production_year
WHERE 
    mv.actor_count > 0
ORDER BY 
    mv.production_year DESC, mv.actor_count DESC;
