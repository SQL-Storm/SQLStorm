
WITH RECURSIVE MovieHierarchy AS (
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ARRAY[t.title] AS title_path,
        ARRAY[t.id] AS movie_path
    FROM 
        aka_title t
    WHERE 
        t.production_year >= 2000  
      
    UNION ALL

    
    SELECT 
        ml.linked_movie_id AS movie_id,
        t.title,
        t.production_year,
        mh.title_path || t.title,
        mh.movie_path || t.id
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title t ON ml.linked_movie_id = t.id
)

SELECT 
    t.id AS movie_id,
    t.title,
    t.production_year,
    COUNT(DISTINCT ci.person_id) AS total_actors,
    ARRAY_AGG(DISTINCT an.name) AS actor_names,
    AVG(mr.rating) AS average_rating,
    COALESCE(GROUP_CONCAT(DISTINCT kw.keyword), 'No Keywords') AS keywords,
    CASE 
        WHEN COUNT(DISTINCT ci.person_id) > 10 THEN 'Blockbuster' 
        ELSE 'Indie' 
    END AS classification,
    ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY AVG(mr.rating) DESC) AS year_rank
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast t ON mh.movie_id = t.movie_id
LEFT JOIN 
    cast_info ci ON t.subject_id = ci.person_id
LEFT JOIN 
    aka_name an ON ci.person_id = an.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    (SELECT movie_id, AVG(rating) AS rating FROM movie_info WHERE info_type_id = 
        (SELECT id FROM info_type WHERE info = 'Rating') GROUP BY movie_id) mr 
ON 
    mh.movie_id = mr.movie_id
WHERE 
    mh.production_year IS NOT NULL
GROUP BY 
    t.id, t.title, t.production_year
HAVING 
    COUNT(DISTINCT ci.person_id) > 5
ORDER BY 
    average_rating DESC, t.production_year DESC;
