WITH RECURSIVE cast_hierarchy AS (
    
    SELECT 
        c.movie_id,
        a.person_id AS actor_id,
        1 AS depth
    FROM 
        cast_info c
    JOIN 
        aka_name a ON a.person_id = c.person_id
    WHERE 
        a.name ILIKE '%Nicolas Cage%'  

    UNION ALL

    SELECT 
        cm.movie_id,
        ch.actor_id,
        ch.depth + 1
    FROM 
        cast_hierarchy ch
    JOIN 
        cast_info cm ON cm.person_id = ch.actor_id
)

SELECT 
    m.title AS movie_title,
    m.production_year,
    a.name AS actor_name,
    ARRAY_AGG(DISTINCT k.keyword) AS keywords,
    COUNT(DISTINCT cc.person_id) AS co_stars,
    ROW_NUMBER() OVER (PARTITION BY m.id ORDER BY m.production_year ASC) AS movie_rank,
    CASE 
        WHEN m.production_year < 2000 THEN 'Classic'
        WHEN m.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Recent'
    END AS era,
    CASE 
        WHEN SUM(COALESCE(mk1.movie_id, 0)) > 0 THEN 1 ELSE 0 END AS has_keywords
FROM 
    title m
LEFT JOIN 
    cast_info ci ON m.id = ci.movie_id
LEFT JOIN 
    aka_name a ON a.person_id = ci.person_id
LEFT JOIN 
    movie_keyword mk1 ON mk1.movie_id = m.id
LEFT JOIN 
    movie_keyword mk2 ON mk2.keyword_id IN (SELECT keyword_id FROM movie_keyword WHERE movie_id = m.id) 
LEFT JOIN 
    keyword k ON k.id = mk2.keyword_id
LEFT JOIN 
    movie_info mi ON mi.movie_id = m.id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Box Office')
LEFT JOIN 
    complete_cast cc ON cc.movie_id = m.id
WHERE 
    m.production_year IS NOT NULL
GROUP BY
    m.id, m.title, m.production_year, a.name
HAVING 
    COUNT(DISTINCT ci.person_id) > 2 
ORDER BY 
    m.production_year DESC;