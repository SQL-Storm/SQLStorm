WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    ak.name AS actor_name,
    m.title AS movie_title,
    m.production_year,
    COUNT(DISTINCT c.person_id) AS number_of_actors,
    AVG(CASE WHEN pi.info IS NOT NULL THEN 1 ELSE 0 END) AS average_person_info,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS movie_keywords,
    CASE WHEN m.production_year IS NULL THEN 'Unknown Year'
         ELSE CAST(m.production_year AS text) 
         END AS production_year_display
FROM 
    movie_hierarchy m
LEFT JOIN 
    complete_cast cc ON m.movie_id = cc.movie_id
LEFT JOIN 
    cast_info c ON cc.subject_id = c.person_id
LEFT JOIN 
    aka_name ak ON c.person_id = ak.person_id
LEFT JOIN 
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    person_info pi ON ak.person_id = pi.person_id 
                    AND pi.info_type_id = (SELECT id FROM info_type WHERE info = 'Biography')
GROUP BY 
    ak.name, m.title, m.production_year
HAVING 
    COUNT(DISTINCT c.person_id) > 2
ORDER BY 
    m.production_year DESC, 
    number_of_actors DESC
LIMIT 15;