WITH RECURSIVE MovieHierarchy AS (
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.imdb_index,
        0 AS level
    FROM 
        title t
    WHERE 
        t.production_year > 2000
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        t.title,
        t.production_year,
        t.imdb_index,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        title t ON ml.linked_movie_id = t.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
MovieInfo AS (
    
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        array_agg(DISTINCT mk.keyword) AS keywords,
        array_agg(DISTINCT cn.name) AS companies,
        COUNT(c.id) AS cast_count
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        movie_keyword mk ON mh.movie_id = mk.movie_id
    LEFT JOIN 
        movie_companies mc ON mh.movie_id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    LEFT JOIN 
        complete_cast c ON mh.movie_id = c.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year
)
SELECT 
    mi.movie_id,
    mi.title,
    mi.production_year,
    COALESCE(NULLIF(mi.keywords, '{}'), ARRAY['No Keywords']) AS keywords,
    COALESCE(NULLIF(mi.companies, '{}'), ARRAY['No Companies']) AS companies,
    mi.cast_count,
    CASE 
        WHEN mi.cast_count > 10 THEN 'Large Cast'
        WHEN mi.cast_count BETWEEN 5 AND 10 THEN 'Medium Cast'
        ELSE 'Small Cast'
    END AS cast_size_category
FROM 
    MovieInfo mi
LEFT JOIN 
    aka_title at ON mi.movie_id = at.movie_id
LEFT JOIN 
    aka_name an ON at.id = an.id
WHERE 
    an.name IS NOT NULL 
    AND (mi.production_year BETWEEN 2010 AND 2023 OR mi.cast_count < 5)
ORDER BY 
    mi.production_year DESC, 
    mi.cast_count DESC;