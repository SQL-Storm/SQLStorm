WITH ranked_movies AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS actor_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.title, t.production_year
),
movie_scores AS (
    SELECT 
        rm.title,
        rm.production_year,
        rm.actor_count,
        COALESCE(AVG(mi.info), 0) AS average_info_length,
        CASE 
            WHEN rm.actor_count > 5 THEN 'Crowded'
            ELSE 'Sparse'
        END AS crowd_status
    FROM 
        ranked_movies rm
    LEFT JOIN 
        movie_info mi ON rm.production_year = mi.movie_id
    WHERE 
        rm.rank <= 10
    GROUP BY 
        rm.title, rm.production_year, rm.actor_count
)
SELECT 
    ms.title,
    ms.production_year,
    ms.actor_count,
    ms.average_info_length,
    ms.crowd_status,
    COUNT(DISTINCT mk.keyword) AS keyword_count
FROM 
    movie_scores ms
LEFT JOIN 
    movie_keyword mk ON ms.production_year = mk.movie_id
GROUP BY 
    ms.title, ms.production_year, ms.actor_count, ms.average_info_length, ms.crowd_status
HAVING 
    COUNT(DISTINCT mk.keyword) > 2 OR ms.actor_count < 3
ORDER BY 
    ms.production_year DESC,
    ms.actor_count DESC;