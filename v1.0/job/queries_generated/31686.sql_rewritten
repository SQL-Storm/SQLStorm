WITH RECURSIVE ActorMovies AS (
    SELECT
        a.id AS actor_id,
        a.name AS actor_name,
        c.movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY a.id ORDER BY t.production_year DESC) AS rank
    FROM
        aka_name a
    JOIN
        cast_info c ON a.person_id = c.person_id
    JOIN
        aka_title t ON c.movie_id = t.id
    WHERE
        a.name IS NOT NULL
),
MoviesWithGenres AS (
    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        ARRAY_AGG(DISTINCT g.keyword) AS genres
    FROM
        aka_title m
    LEFT JOIN
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN
        keyword g ON mk.keyword_id = g.id
    GROUP BY
        m.id
),
TopActors AS (
    SELECT
        actor_id,
        actor_name,
        COUNT(DISTINCT movie_id) AS movie_count
    FROM
        ActorMovies
    GROUP BY
        actor_id, actor_name
    HAVING
        COUNT(DISTINCT movie_id) > 3 
),
ActorGenreCount AS (
    SELECT
        a.actor_id,
        a.actor_name,
        m.genres,
        COUNT(m.movie_id) AS genre_count
    FROM
        TopActors a
    JOIN
        ActorMovies am ON a.actor_id = am.actor_id
    JOIN
        MoviesWithGenres m ON am.movie_id = m.movie_id
    GROUP BY
        a.actor_id, a.actor_name, m.genres
)
SELECT
    a.actor_name,
    MAX(am.production_year) AS latest_movie_year,
    STRING_AGG(DISTINCT g.genre, ', ') FILTER (WHERE g.genre IS NOT NULL) AS genres,
    AVG(COALESCE(agc.genre_count, 0)) AS avg_genre_count
FROM
    TopActors a
LEFT JOIN
    ActorMovies am ON a.actor_id = am.actor_id
LEFT JOIN
    MoviesWithGenres m ON am.movie_id = m.movie_id
LEFT JOIN
    ActorGenreCount agc ON a.actor_id = agc.actor_id
GROUP BY
    a.actor_name
HAVING
    MAX(am.production_year) >= 2000 
ORDER BY
    latest_movie_year DESC,
    a.actor_name;