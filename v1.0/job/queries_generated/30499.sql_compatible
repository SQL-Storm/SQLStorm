
WITH RECURSIVE ActorHierarchy AS (
    SELECT ci.person_id AS actor_id, 
           t.title AS movie_title, 
           t.production_year,
           1 AS level,
           ci.movie_id
    FROM cast_info ci
    JOIN aka_title t ON ci.movie_id = t.id
    WHERE ci.nr_order = 1  
    UNION ALL
    SELECT ci.person_id, 
           t.title,
           t.production_year,
           ah.level + 1,
           ci.movie_id
    FROM cast_info ci
    JOIN aka_title t ON ci.movie_id = t.id
    JOIN ActorHierarchy ah ON ci.movie_id = ah.movie_id
    WHERE ci.nr_order > 1 AND ci.person_id <> ah.actor_id 
),
RankedActors AS (
    SELECT actor_id, 
           movie_title, 
           production_year,
           RANK() OVER (PARTITION BY production_year ORDER BY COUNT(*) DESC) AS movie_rank
    FROM ActorHierarchy
    GROUP BY actor_id, movie_title, production_year
)
SELECT a.name AS actor_name,
       aa.title AS movie_title,
       aa.production_year,
       ra.movie_rank,
       (SELECT COUNT(DISTINCT ci2.movie_id) 
        FROM cast_info ci2 
        WHERE ci2.person_id = ra.actor_id) AS total_movies,
       COALESCE(comp.name, 'Unknown') AS production_company
FROM RankedActors ra
JOIN aka_name a ON ra.actor_id = a.person_id 
JOIN aka_title aa ON aa.title = ra.movie_title AND aa.production_year = ra.production_year
LEFT JOIN movie_companies mc ON mc.movie_id = aa.id
LEFT JOIN company_name comp ON mc.company_id = comp.id
WHERE ra.movie_rank = 1
      AND ra.production_year BETWEEN 2000 AND 2023
      AND EXISTS (SELECT 1 FROM movie_keyword mk 
                  WHERE mk.movie_id = aa.id 
                    AND mk.keyword_id IN (SELECT id FROM keyword WHERE keyword LIKE '%action%'))
ORDER BY ra.production_year DESC, ra.movie_rank;
