
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS ranking
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.movie_id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
), 
TopMovies AS (
    SELECT 
        movie_id, 
        title,
        production_year 
    FROM 
        RankedMovies 
    WHERE 
        ranking <= 5
),
MovieDetails AS (
    SELECT 
        tm.title,
        COALESCE(mci.name, 'Unknown') AS company_name,
        COALESCE(k.keyword, 'Uncategorized') AS movie_keyword,
        COUNT(DISTINCT ca.person_id) AS total_cast
    FROM 
        TopMovies tm
    LEFT JOIN 
        movie_companies mc ON tm.movie_id = mc.movie_id
    LEFT JOIN 
        company_name mci ON mc.company_id = mci.id
    LEFT JOIN 
        movie_keyword mk ON tm.movie_id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    LEFT JOIN 
        cast_info ca ON tm.movie_id = ca.movie_id
    GROUP BY 
        tm.title, mci.name, k.keyword
), 
DetailedReport AS (
    SELECT 
        md.*,
        ROW_NUMBER() OVER (PARTITION BY md.production_year ORDER BY md.total_cast DESC) AS cast_rank,
        SUM(md.total_cast) OVER () AS total_cast_aggregate
    FROM 
        MovieDetails md
)
SELECT 
    title,
    company_name,
    movie_keyword,
    total_cast,
    cast_rank,
    total_cast_aggregate,
    CASE 
        WHEN total_cast = 0 THEN 'No Cast'
        WHEN total_cast IS NULL THEN 'Unknown Cast'
        ELSE 'Cast Present'
    END AS cast_status
FROM 
    DetailedReport
WHERE 
    (company_name IS NOT NULL OR total_cast > 3)
ORDER BY 
    production_year DESC, total_cast DESC
LIMIT 10;
