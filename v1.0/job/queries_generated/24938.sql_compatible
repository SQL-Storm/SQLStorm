
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        1 AS depth,
        CAST(mt.title AS VARCHAR(255)) AS path
    FROM aka_title mt
    WHERE mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        aty.title,
        mh.depth + 1 AS depth,
        CAST(mh.path || ' -> ' || aty.title AS VARCHAR(255)) AS path
    FROM movie_link ml
    JOIN aka_title aty ON ml.movie_id = aty.id
    JOIN movie_hierarchy mh ON mh.movie_id = ml.movie_id
)
SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mh.depth AS link_depth,
    ROW_NUMBER() OVER (PARTITION BY ak.name ORDER BY mh.depth DESC) AS rank,
    COUNT(mk.keyword) FILTER (WHERE mk.keyword IS NOT NULL) AS keyword_count,
    COALESCE(SUM(CASE WHEN mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Rating') THEN CAST(mi.info AS numeric) ELSE NULL END), 0) AS average_rating
FROM aka_name ak
JOIN cast_info ci ON ak.person_id = ci.person_id
JOIN movie_hierarchy mh ON ci.movie_id = mh.movie_id
JOIN aka_title mt ON mh.movie_id = mt.id
LEFT JOIN movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN movie_info mi ON mt.id = mi.movie_id
GROUP BY 
    ak.name, 
    mt.title, 
    mh.depth
HAVING 
    COUNT(CASE WHEN mk.keyword IS NULL THEN 1 END) = 0 
AND 
    MAX(mi.info) IS NOT NULL 
ORDER BY 
    link_depth DESC, 
    rank ASC 
LIMIT 10;
