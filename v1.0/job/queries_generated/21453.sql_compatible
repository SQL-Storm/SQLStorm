
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        RANK() OVER (PARTITION BY t.production_year ORDER BY mci.company_id) AS rank_by_company,
        COUNT(DISTINCT ki.keyword) AS keyword_count
    FROM 
        aka_title t
    LEFT JOIN 
        movie_companies mci ON t.movie_id = mci.movie_id
    LEFT JOIN 
        movie_keyword ki ON t.movie_id = ki.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
ActorRoles AS (
    SELECT 
        ci.movie_id,
        COUNT(DISTINCT ci.role_id) AS role_count,
        STRING_AGG(DISTINCT n.name, ', ') AS actor_names
    FROM 
        cast_info ci
    JOIN 
        name n ON ci.person_id = n.id
    GROUP BY 
        ci.movie_id
),
NotableMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        ar.actor_names,
        ar.role_count, 
        rm.keyword_count,
        CASE 
            WHEN rm.rank_by_company IS NULL THEN 'Unranked'
            WHEN rm.rank_by_company < 3 THEN 'Top'
            ELSE 'Others' 
        END AS rank_description
    FROM 
        RankedMovies rm
    LEFT JOIN 
        ActorRoles ar ON rm.movie_id = ar.movie_id
    WHERE 
        rm.production_year IS NOT NULL
)
SELECT 
    nm.title,
    nm.production_year,
    nm.actor_names,
    nm.role_count,
    nm.keyword_count,
    nm.rank_description,
    COALESCE(NULLIF(nm.role_count, 0), 'No roles') AS role_analysis,
    CASE
        WHEN nm.keyword_count > 10 THEN 'Highly Tagged'
        WHEN nm.keyword_count BETWEEN 5 AND 10 THEN 'Moderately Tagged'
        ELSE 'Few Tags'
    END AS tagging_level
FROM 
    NotableMovies nm
WHERE 
    nm.rank_description = 'Top'
ORDER BY 
    nm.production_year DESC, 
    nm.keyword_count DESC
LIMIT 10;
