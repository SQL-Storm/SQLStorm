
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level,
        ARRAY[m.id] AS path
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL
    
    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1 AS level,
        mh.path || m.id
    FROM 
        aka_title m
    JOIN 
        MovieHierarchy mh ON m.episode_of_id = mh.movie_id
    WHERE 
        NOT m.id = ANY(mh.path)  
)
SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    CASE
        WHEN t.production_year BETWEEN 2000 AND 2010 THEN '2000s'
        WHEN t.production_year BETWEEN 2011 AND 2020 THEN '2010s'
        ELSE 'Before 2000 or After 2020'
    END AS decade,
    COALESCE(p.info, 'No Info') AS actor_info,
    COUNT(DISTINCT tc.id) FILTER (WHERE tc.kind_id IS NOT NULL) AS total_characters,
    AVG(te.episode_nr) AS avg_episode_number,
    COUNT(DISTINCT mt.keyword_id) AS total_keywords,
    MAX(ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY t.production_year DESC)) AS max_row
FROM 
    aka_name a
JOIN 
    cast_info c ON a.person_id = c.person_id
JOIN 
    aka_title t ON c.movie_id = t.id
LEFT JOIN 
    movie_keyword mt ON t.id = mt.movie_id
LEFT JOIN 
    title te ON t.id = te.episode_of_id
LEFT JOIN 
    person_info p ON a.person_id = p.person_id 
                   AND p.info_type_id = (SELECT id FROM info_type WHERE info = 'Biography')
LEFT JOIN 
    MovieHierarchy mh ON t.id = mh.movie_id
GROUP BY 
    a.name, t.title, t.production_year, p.info
HAVING 
    COUNT(DISTINCT c.role_id) > 0
    AND COUNT(DISTINCT mt.keyword_id) < 5
    AND SUM(CASE WHEN c.note IS NOT NULL THEN 1 ELSE 0 END) > 2
ORDER BY 
    decade, actor_name, movie_title;
