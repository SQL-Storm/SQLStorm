WITH RECURSIVE ActorTree AS (
    SELECT 
        ak.id AS actor_id,
        ak.name AS actor_name,
        0 AS level
    FROM 
        aka_name ak
    WHERE 
        ak.name LIKE 'A%'  

    UNION ALL

    SELECT 
        c.person_id,
        ak.name,
        at.level + 1
    FROM 
        cast_info c
    JOIN 
        ActorTree at ON c.movie_id = (
            SELECT mk.movie_id 
            FROM movie_keyword mk 
            WHERE mk.keyword_id IN (SELECT k.id FROM keyword k WHERE k.keyword LIKE 'Action%')
            LIMIT 1
        )
    JOIN 
        aka_name ak ON c.person_id = ak.person_id 
    WHERE 
        at.actor_id != c.person_id  
    AND 
        ak.name IS NOT NULL
),
MovieRankings AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS actor_count,
        RANK() OVER (ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM 
        title t 
    JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.title, t.production_year
    HAVING 
        COUNT(DISTINCT c.person_id) > 5  
),
CompanyDetails AS (
    SELECT 
        mc.movie_id,
        ARRAY_AGG(DISTINCT cn.name) AS companies
    FROM 
        movie_companies mc
    JOIN 
        company_name cn ON mc.company_id = cn.id
    GROUP BY 
        mc.movie_id
)
SELECT 
    t.title,
    t.production_year,
    COALESCE(ac.actor_name, 'No actors found') AS featured_actor,
    mr.actor_count,
    cd.companies AS production_companies,
    t.imdb_index
FROM 
    title t
LEFT JOIN 
    ActorTree ac ON t.id IN (SELECT movie_id FROM cast_info WHERE person_id = ac.actor_id)
JOIN 
    MovieRankings mr ON t.title = mr.title
LEFT JOIN 
    CompanyDetails cd ON cd.movie_id = t.id
WHERE 
    mr.rank <= 10  
ORDER BY 
    mr.actor_count DESC, t.production_year DESC
FETCH FIRST 10 ROWS ONLY;