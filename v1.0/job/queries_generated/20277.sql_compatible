
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        1 AS level
    FROM 
        aka_title t
    WHERE 
        t.kind_id IS NOT NULL AND t.production_year >= 2000

    UNION ALL

    SELECT 
        m.movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    WHERE 
        mh.level < 5
)

SELECT 
    a.name AS actor_name,
    mov.title AS movie_title,
    COUNT(DISTINCT km.keyword) AS num_keywords,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords_list,
    CASE 
        WHEN COUNT(DISTINCT ci.movie_id) > 5 THEN 'Prolific Actor'
        ELSE 'Not Prolific'
    END AS actor_status,
    (SELECT AVG(info_length.length) 
     FROM (SELECT LENGTH(movie_info.info) AS length 
           FROM movie_info 
           WHERE movie_id = mov.movie_id) AS info_length) AS avg_info_length
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    MovieHierarchy mov ON ci.movie_id = mov.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mov.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
WHERE 
    a.name IS NOT NULL
    AND a.name NOT LIKE '%test%'
    AND mov.production_year IS NOT NULL 
    AND (mov.production_year BETWEEN 2010 AND 2023 OR mov.production_year IS NULL)
GROUP BY 
    a.name, mov.title, mov.production_year
HAVING 
    COUNT(DISTINCT mk.keyword_id) > 2
ORDER BY 
    actor_name,
    movie_title DESC;
