
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title AS mt
    WHERE 
        mt.production_year IS NOT NULL
    UNION ALL
    SELECT 
        mc.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link AS mc
    JOIN 
        aka_title AS at ON mc.linked_movie_id = at.id
    JOIN 
        movie_hierarchy AS mh ON mh.movie_id = mc.movie_id
),
recent_movies AS (
    SELECT 
        movie_id, 
        title, 
        production_year, 
        ROW_NUMBER() OVER (PARTITION BY production_year ORDER BY production_year DESC) AS rn
    FROM 
        movie_hierarchy
),
keyword_counts AS (
    SELECT 
        mk.movie_id,
        COUNT(mk.keyword_id) AS keyword_count
    FROM 
        movie_keyword AS mk
    GROUP BY 
        mk.movie_id
),
cast_roles AS (
    SELECT 
        c.movie_id,
        STRING_AGG(DISTINCT r.role, ', ') AS roles
    FROM 
        cast_info AS c
    JOIN 
        role_type AS r ON c.role_id = r.id
    GROUP BY 
        c.movie_id
)
SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    COALESCE(kc.keyword_count, 0) AS keyword_count,
    cr.roles,
    CASE 
        WHEN rm.production_year >= 2020 THEN 'Recent'
        ELSE 'Classic'
    END AS movie_category
FROM 
    recent_movies AS rm
LEFT JOIN 
    keyword_counts AS kc ON rm.movie_id = kc.movie_id
LEFT JOIN 
    cast_roles AS cr ON rm.movie_id = cr.movie_id
WHERE 
    rm.rn = 1
ORDER BY 
    rm.production_year DESC, 
    keyword_count DESC;
