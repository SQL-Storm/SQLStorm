WITH RECURSIVE ActorHierarchy AS (
    SELECT ci.movie_id, ci.person_id, 1 AS depth
    FROM cast_info ci
    WHERE ci.role_id IS NOT NULL
    
    UNION ALL
    
    SELECT ci.movie_id, ci.person_id, ah.depth + 1
    FROM cast_info ci
    JOIN ActorHierarchy ah ON ci.movie_id = ah.movie_id
    WHERE ci.person_id <> ah.person_id
),
MovieStats AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        STRING_AGG(DISTINCT ak.name, ', ') AS actor_names
    FROM title t
    LEFT JOIN cast_info ci ON t.id = ci.movie_id
    LEFT JOIN aka_name ak ON ci.person_id = ak.person_id
    WHERE t.production_year >= 2000
    GROUP BY t.title, t.production_year
),
TopMovies AS (
    SELECT 
        *,
        RANK() OVER (ORDER BY actor_count DESC) AS actor_rank
    FROM MovieStats
),
FilteredMovies AS (
    SELECT 
        tm.title,
        tm.production_year,
        tm.actor_count,
        tm.actor_names
    FROM TopMovies tm
    WHERE tm.actor_rank <= 10
),
CompanyInfo AS (
    SELECT 
        mc.movie_id,
        GROUP_CONCAT(DISTINCT cn.name) AS companies,
        GROUP_CONCAT(DISTINCT ct.kind) AS company_types
    FROM movie_companies mc
    JOIN company_name cn ON mc.company_id = cn.id
    JOIN company_type ct ON mc.company_type_id = ct.id
    GROUP BY mc.movie_id
)
SELECT 
    fm.title,
    fm.production_year,
    fm.actor_count,
    COALESCE(ci.companies, 'No Companies') AS production_companies,
    COALESCE(ci.company_types, 'No Types') AS company_types,
    ah.depth AS actor_hierarchy_depth
FROM FilteredMovies fm
LEFT JOIN CompanyInfo ci ON fm.movie_id = ci.movie_id
LEFT JOIN ActorHierarchy ah ON fm.movie_id = ah.movie_id
WHERE 
    (ah.depth IS NULL OR ah.depth > 1)
ORDER BY fm.production_year DESC, fm.actor_count DESC;