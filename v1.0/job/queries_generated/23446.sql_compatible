
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level,
        ARRAY[mt.id] AS path
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1,
        path || ml.linked_movie_id
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    WHERE 
        at.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
)

SELECT 
    ah.name AS actor_name, 
    at.title AS movie_title,
    a.company_name,
    COALESCE(mh.level, 0) AS link_level,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    AVG(COALESCE(mi.rating, 0)) AS average_rating
FROM 
    aka_name ah
JOIN 
    cast_info ci ON ah.person_id = ci.person_id
JOIN 
    movie_companies mc ON ci.movie_id = mc.movie_id
JOIN 
    company_name a ON mc.company_id = a.id
JOIN 
    aka_title at ON ci.movie_id = at.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = at.id
LEFT JOIN 
    movie_info mi ON mi.movie_id = at.id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
LEFT JOIN 
    movie_hierarchy mh ON at.id = mh.movie_id
WHERE 
    ah.name IS NOT NULL
    AND at.production_year BETWEEN 2000 AND 2023
    AND (a.country_code IS NOT NULL AND a.country_code = 'US')
GROUP BY 
    ah.name, at.title, a.company_name, mh.level
HAVING 
    COUNT(DISTINCT mk.keyword) > 5
ORDER BY 
    link_level DESC, average_rating DESC, actor_name ASC;
