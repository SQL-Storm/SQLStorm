WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.imdb_index,
        1 AS level
    FROM title t
    WHERE t.production_year >= 2000
    UNION ALL
    SELECT 
        ml.linked_movie_id AS movie_id,
        it.title,
        it.production_year,
        it.imdb_index,
        mh.level + 1
    FROM movie_link ml
    JOIN title it ON ml.linked_movie_id = it.id
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
, top_movies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(cc.id) AS cast_count,
        AVG(CASE WHEN ri.role IS NOT NULL THEN 1 ELSE 0 END) AS avg_role_count,
        ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY COUNT(cc.id) DESC) AS rank
    FROM movie_hierarchy mh
    LEFT JOIN cast_info cc ON mh.movie_id = cc.movie_id
    LEFT JOIN role_type ri ON cc.role_id = ri.id
    GROUP BY mh.movie_id, mh.title, mh.production_year
)
SELECT 
    tm.title AS movie_title,
    tm.production_year,
    tm.cast_count,
    COALESCE(ROUND(avg_role_count, 2), 0) AS average_roles,
    cn.name AS company_name,
    cn.country_code
FROM top_movies tm
LEFT JOIN movie_companies mc ON tm.movie_id = mc.movie_id
LEFT JOIN company_name cn ON mc.company_id = cn.id
WHERE tm.cast_count > 5
AND (cn.country_code IS NOT NULL AND cn.country_code != '')
AND EXISTS (
    SELECT 1
    FROM movie_info mi 
    WHERE mi.movie_id = tm.movie_id 
    AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Budget')
)
ORDER BY tm.production_year DESC, tm.cast_count DESC
LIMIT 10;