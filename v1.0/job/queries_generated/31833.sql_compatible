
WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        person_id,
        name,
        1 AS level
    FROM 
        aka_name
    WHERE 
        name IS NOT NULL
    
    UNION ALL
    
    SELECT 
        c.person_id,
        a.name,
        ah.level + 1
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    JOIN 
        ActorHierarchy ah ON c.movie_id = (
            SELECT 
                movie_id 
            FROM 
                cast_info 
            WHERE 
                person_id = ah.person_id
            LIMIT 1
        )
    WHERE 
        ah.level < 5
), 
MovieDetails AS (
    SELECT 
        t.title,
        t.production_year,
        mk.keyword,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY t.production_year DESC) AS year_rank
    FROM 
        aka_title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    WHERE 
        t.production_year >= 2000
),
CastInfoWithRoles AS (
    SELECT 
        c.person_id,
        r.role,
        c.movie_id
    FROM 
        cast_info c
    JOIN 
        role_type r ON c.role_id = r.id
)
SELECT
    a.name AS actor_name,
    md.title AS movie_title,
    md.production_year AS production_year,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    MAX(a.level) AS max_actor_level
FROM 
    MovieDetails md
JOIN 
    CastInfoWithRoles c ON md.id = c.movie_id
JOIN 
    ActorHierarchy a ON c.person_id = a.person_id
LEFT JOIN 
    movie_link ml ON md.id = ml.movie_id
LEFT JOIN 
    movie_info mi ON md.id = mi.movie_id AND mi.info_type_id = (
        SELECT id FROM info_type WHERE info = 'box office' LIMIT 1
    )
WHERE 
    a.name IS NOT NULL 
    AND md.title IS NOT NULL 
    AND (mi.info IS NOT NULL OR mi.note IS NULL)
GROUP BY 
    a.name, md.title, md.production_year
HAVING 
    COUNT(DISTINCT mk.keyword) > 3
ORDER BY 
    md.production_year DESC, a.name;
