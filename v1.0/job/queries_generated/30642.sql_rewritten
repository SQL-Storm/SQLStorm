WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year > 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM
        movie_link ml
    JOIN
        aka_title at ON ml.linked_movie_id = at.id
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE
        mh.level < 3  
)

SELECT 
    ak.id AS aka_id,
    ak.name AS actor_name,
    at.title AS movie_title,
    at.production_year,
    COALESCE(CAST(COUNT(DISTINCT mc.company_id) AS INTEGER), 0) AS production_companies,
    ROW_NUMBER() OVER (PARTITION BY ak.id ORDER BY at.production_year DESC) AS movie_rank,
    (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = at.id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'Rating')) AS rating_count,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    movie_hierarchy mh ON ci.movie_id = mh.movie_id
JOIN 
    aka_title at ON mh.movie_id = at.id
LEFT JOIN 
    movie_companies mc ON at.id = mc.movie_id
LEFT JOIN 
    movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
WHERE 
    ak.name IS NOT NULL
    AND (at.production_year IS NULL OR at.production_year > 2000) 
    AND (ak.gender = 'M' OR ak.gender = 'F')
GROUP BY 
    ak.id, ak.name, at.id, at.title, at.production_year
ORDER BY 
    movie_rank, ak.name;