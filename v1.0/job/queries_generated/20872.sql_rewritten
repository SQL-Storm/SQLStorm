WITH RankedMovies AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        RANK() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS actor_count_rank
    FROM 
        aka_title t
    JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
FilteredMovies AS (
    SELECT 
        rm.title_id,
        rm.title,
        rm.production_year
    FROM 
        RankedMovies rm
    WHERE 
        rm.actor_count_rank <= 5
)
SELECT 
    fm.title,
    fm.production_year,
    COALESCE(ARRAY_AGG(DISTINCT ak.name) FILTER (WHERE ak.name IS NOT NULL), '{}') AS actor_names,
    COALESCE(ARRAY_AGG(DISTINCT kt.keyword) FILTER (WHERE kt.keyword IS NOT NULL), '{}') AS keywords,
    ARRAY_LENGTH(ARRAY_AGG(DISTINCT kt.keyword) FILTER (WHERE kt.keyword IS NOT NULL), 1) AS keyword_count,
    CASE 
        WHEN SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) > 0 THEN 'Contains Notes'
        ELSE 'No Notes'
    END AS notes_status
FROM 
    FilteredMovies fm
LEFT JOIN 
    cast_info ci ON fm.title_id = ci.movie_id
LEFT JOIN 
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN 
    movie_keyword mk ON fm.title_id = mk.movie_id
LEFT JOIN 
    keyword kt ON mk.keyword_id = kt.id
GROUP BY 
    fm.title_id, fm.title, fm.production_year
HAVING 
    SUM(CASE WHEN cf.kind IS NULL THEN 1 ELSE 0 END) = 0
    AND COUNT(DISTINCT ci.id) > 0
ORDER BY 
    fm.production_year DESC, keyword_count DESC;