
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mcl.linked_movie_id,
        1 AS level
    FROM
        title mt
    LEFT JOIN
        movie_link mcl ON mt.id = mcl.movie_id
    WHERE
        mt.production_year >= 2000

    UNION ALL

    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mcl.linked_movie_id,
        mh.level + 1
    FROM
        title mt
    JOIN
        movie_link mcl ON mt.id = mcl.linked_movie_id
    JOIN
        movie_hierarchy mh ON mh.linked_movie_id = mt.id
),

cast_roles AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        rt.role AS role
    FROM
        cast_info ci
    JOIN
        aka_name ak ON ci.person_id = ak.person_id
    JOIN
        role_type rt ON ci.role_id = rt.id
)

SELECT
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(GROUP_CONCAT(DISTINCT cr.actor_name ORDER BY cr.actor_name SEPARATOR ', '), 'No cast found') AS actors,
    GROUP_CONCAT(DISTINCT cr.role ORDER BY cr.role SEPARATOR ', ') AS roles,
    COUNT(DISTINCT cr.actor_name) AS actor_count,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    COUNT(DISTINCT mc.company_id) AS company_count,
    MAX(CASE WHEN it.info = 'budget' THEN mi.info END) AS budget_info
FROM
    movie_hierarchy mh
LEFT JOIN
    cast_roles cr ON mh.movie_id = cr.movie_id
LEFT JOIN
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN
    movie_info mi ON mh.movie_id = mi.movie_id
LEFT JOIN
    info_type it ON mi.info_type_id = it.id
WHERE
    mh.level <= 3
GROUP BY
    mh.movie_id, mh.title, mh.production_year
ORDER BY
    mh.production_year DESC,
    actor_count DESC,
    mh.title
LIMIT 50;
