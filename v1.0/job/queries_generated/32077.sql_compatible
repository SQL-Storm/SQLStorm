
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.movie_id,
        mt.title,
        mt.production_year,
        COUNT(m.linked_movie_id) AS linked_count
    FROM 
        aka_title mt
    LEFT JOIN 
        movie_link m ON mt.movie_id = m.movie_id
    WHERE 
        mt.production_year >= 2000 
    GROUP BY 
        mt.movie_id, mt.title, mt.production_year

    UNION ALL

    SELECT 
        m.movie_id,
        mt.title,
        mti.production_year,
        COUNT(ml.linked_movie_id) AS linked_count
    FROM 
        MovieHierarchy m
    INNER JOIN 
        movie_link ml ON m.movie_id = ml.linked_movie_id
    INNER JOIN 
        aka_title mt ON ml.movie_id = mt.movie_id
    LEFT JOIN 
        movie_info mti ON mt.movie_id = mti.movie_id
    GROUP BY 
        m.movie_id, mt.title, mti.production_year
),
RankedMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        mh.linked_count,
        RANK() OVER (PARTITION BY mh.production_year ORDER BY mh.linked_count DESC) AS rank
    FROM 
        MovieHierarchy mh
)
SELECT 
    r.title,
    r.production_year,
    r.linked_count,
    COALESCE(c.name, 'Unknown Company') AS company_name,
    STRING_AGG(DISTINCT n.name, ', ') AS actor_names,
    COUNT(k.keyword) AS keyword_count
FROM 
    RankedMovies r
LEFT JOIN 
    movie_companies mc ON r.movie_id = mc.movie_id
LEFT JOIN 
    company_name c ON mc.company_id = c.id
LEFT JOIN 
    cast_info ci ON r.movie_id = ci.movie_id
LEFT JOIN 
    aka_name n ON ci.person_id = n.person_id
LEFT JOIN 
    movie_keyword mk ON r.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
WHERE 
    r.linked_count > 1 
GROUP BY 
    r.movie_id, r.title, r.production_year, r.linked_count, c.name
HAVING 
    COUNT(DISTINCT ci.person_id) > 5 
ORDER BY 
    r.production_year DESC, 
    r.linked_count DESC;
