
WITH MovieCast AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS cast_count,
        MAX(a.name) AS lead_actor_name,
        MIN(CASE WHEN r.role = 'Director' THEN a.name END) AS director_name
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    LEFT JOIN 
        role_type r ON c.role_id = r.id
    GROUP BY 
        c.movie_id
),

MovieDetails AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        COALESCE(mk.keyword, 'No Keywords') AS keyword,
        mc.cast_count,
        mc.lead_actor_name,
        mc.director_name
    FROM 
        aka_title m
    LEFT JOIN 
        MovieCast mc ON m.id = mc.movie_id
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    ORDER BY 
        m.production_year DESC
),

RankedMovies AS (
    SELECT 
        md.movie_id,
        md.title,
        md.production_year,
        md.keyword,
        md.cast_count,
        md.lead_actor_name,
        md.director_name,
        RANK() OVER (PARTITION BY md.production_year ORDER BY md.cast_count DESC) AS cast_rank
    FROM 
        MovieDetails md
)

SELECT 
    r.movie_id,
    r.title,
    r.production_year,
    r.keyword,
    r.cast_count,
    r.lead_actor_name,
    r.director_name,
    CASE
        WHEN r.cast_rank IS NULL THEN 'Not Ranked'
        WHEN r.cast_rank < 3 THEN 'Top Cast'
        ELSE 'Average Cast'
    END AS rank_category
FROM 
    RankedMovies r
WHERE 
    r.production_year >= 2000
    AND r.lead_actor_name IS NOT NULL
    AND r.keyword NOT LIKE '%Action%'
ORDER BY 
    r.production_year DESC, r.cast_count DESC;
