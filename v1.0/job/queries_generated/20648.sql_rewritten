WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        RANK() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT ci.person_id) DESC) AS rank_by_cast_count,
        STRING_AGG(DISTINCT ak.name, ', ') AS all_cast_names,
        COUNT(DISTINCT ci.person_id) AS cast_count
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info ci ON t.movie_id = ci.movie_id
    LEFT JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    WHERE 
        t.production_year IS NOT NULL
    GROUP BY 
        t.id, t.title, t.production_year
),
HottestYears AS (
    SELECT 
        production_year, 
        AVG(cast_count) AS avg_cast_count
    FROM 
        RankedMovies
    WHERE 
        rank_by_cast_count <= 5
    GROUP BY 
        production_year
    HAVING 
        AVG(cast_count) > 3
),
FinalRankedMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        COALESCE(ry.avg_cast_count, 0) AS avg_cast_count,
        RANK() OVER (ORDER BY rm.production_year DESC, rm.cast_count DESC) AS final_rank
    FROM 
        RankedMovies rm
    LEFT JOIN 
        HottestYears ry ON rm.production_year = ry.production_year
)
SELECT 
    f.movie_id,
    f.title,
    f.production_year,
    f.avg_cast_count,
    f.final_rank,
    CASE 
        WHEN f.final_rank <= 10 THEN 'Top Movie'
        WHEN f.final_rank BETWEEN 11 AND 20 THEN 'Notable Movie'
        ELSE 'Other Movies'
    END AS movie_category,
    LENGTH(f.title) AS title_length,
    f.title || ' has ' || f.cast_count || ' cast members.' AS title_with_cast_info,
    COUNT(m.linked_movie_id) FILTER (WHERE m.linked_movie_id IS NOT NULL) AS linked_movies_count
FROM 
    FinalRankedMovies f
LEFT JOIN 
    movie_link m ON f.movie_id = m.movie_id
WHERE 
    f.final_rank < 50 
ORDER BY 
    f.production_year DESC, f.final_rank;