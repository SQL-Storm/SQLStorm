WITH recursive movie_hierarchy AS (
    SELECT 
        t.id AS movie_id,
        t.title AS movie_title,
        t.production_year,
        1 AS hierarchy_level,
        NULL AS parent_id
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL AND 
        t.production_year > 2000  
        
    UNION ALL
    
    SELECT 
        t.id AS movie_id,
        t.title AS movie_title,
        t.production_year,
        mh.hierarchy_level + 1,
        mh.movie_id AS parent_id
    FROM 
        movie_link ml 
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title t ON t.id = ml.linked_movie_id
    WHERE 
        mh.hierarchy_level < 3  
)

SELECT 
    m.movie_title, 
    m.production_year,
    STRING_AGG(DISTINCT ak.name, ', ') AS actor_names,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    AVG(pi.info::numeric) AS average_salary,
    COUNT(DISTINCT ml.linked_movie_id) AS linked_count,
    CASE 
        WHEN AVG(m.production_year) < 2010 THEN 'Older Production'
        ELSE 'Modern Production' 
    END AS production_category,
    COUNT(DISTINCT m.id) FILTER (WHERE m.production_year IS NULL) AS null_years_count  
FROM 
    movie_hierarchy m
LEFT JOIN 
    cast_info ci ON ci.movie_id = m.movie_id
LEFT JOIN 
    aka_name ak ON ak.person_id = ci.person_id 
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = m.movie_id
LEFT JOIN 
    person_info pi ON pi.person_id = ak.person_id AND pi.info_type_id = (SELECT id FROM info_type WHERE info = 'salary')  
LEFT JOIN 
    movie_link ml ON ml.movie_id = m.movie_id
WHERE 
    m.production_year IS NOT NULL OR m.movie_title LIKE '%bond%'  
GROUP BY 
    m.movie_title, m.production_year
ORDER BY 
    COUNT(DISTINCT ak.name) DESC, m.production_year DESC  
LIMIT 100 OFFSET 0;