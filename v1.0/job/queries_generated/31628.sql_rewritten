WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year >= 2000  

    UNION ALL

    SELECT
        ml.linked_movie_id AS movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM
        movie_link ml
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN
        aka_title mt ON ml.linked_movie_id = mt.id
)
SELECT
    m.id AS movie_id,
    m.title,
    m.production_year,
    c.name AS company_name,
    COUNT(DISTINCT ci.person_id) AS cast_count,
    AVG(CASE WHEN pi.info IS NOT NULL THEN LENGTH(pi.info) ELSE 0 END) AS avg_person_info_length,
    ARRAY_AGG(DISTINCT k.keyword) AS keywords,
    ROW_NUMBER() OVER (PARTITION BY m.production_year ORDER BY m.title) AS row_num
FROM
    movie_hierarchy m
LEFT JOIN
    movie_companies mc ON m.movie_id = mc.movie_id
LEFT JOIN
    company_name c ON mc.company_id = c.id
LEFT JOIN
    complete_cast cc ON m.movie_id = cc.movie_id
LEFT JOIN
    cast_info ci ON cc.subject_id = ci.person_id
LEFT JOIN
    movie_keyword mk ON mk.movie_id = m.movie_id
LEFT JOIN
    keyword k ON mk.keyword_id = k.id
LEFT JOIN
    person_info pi ON ci.person_id = pi.person_id AND pi.info_type_id IN (SELECT id FROM info_type WHERE info = 'Bio')  
WHERE
    m.level = 1  
GROUP BY
    m.id, m.title, m.production_year, c.name
HAVING
    COUNT(DISTINCT ci.person_id) > 5  
ORDER BY
    m.production_year DESC, m.title;