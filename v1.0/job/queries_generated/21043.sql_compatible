
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        0 AS level,
        ARRAY[mt.id] AS path
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
 
    UNION ALL

    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        mh.level + 1,
        mh.path || ml.linked_movie_id
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    WHERE 
        ml.linked_movie_id IS NOT NULL
)

SELECT 
    m.id AS movie_id,
    m.title,
    COALESCE(mk.keyword, 'Unknown') AS movie_keyword,
    COALESCE(c.company_name, 'Independent') AS production_company,
    COUNT(cc.id) AS total_cast,
    AVG(mw.rating) AS avg_rating,
    MIN(mh.level) AS min_link_level,
    MAX(mh.level) AS max_link_level
FROM 
    aka_title m
LEFT JOIN 
    movie_keyword mk ON m.id = mk.movie_id
LEFT JOIN 
    movie_companies mc ON m.id = mc.movie_id
LEFT JOIN 
    company_name c ON mc.company_id = c.id
LEFT JOIN 
    cast_info cc ON m.id = cc.movie_id
LEFT JOIN 
    (SELECT
         movie_id, 
         AVG(rating) AS rating
     FROM 
         movie_info
     WHERE 
         info_type_id = (SELECT id FROM info_type WHERE info = 'Rating')
     GROUP BY movie_id) mw ON m.id = mw.movie_id
LEFT JOIN 
    MovieHierarchy mh ON m.id = mh.movie_id
WHERE 
    m.production_year >= 2000 
    AND (m.kind_id IS NULL OR m.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie'))
GROUP BY 
    m.id, m.title, mk.keyword, c.company_name, mh.level
HAVING 
    COUNT(cc.id) > 1
ORDER BY 
    avg_rating DESC, total_cast DESC
LIMIT 100;
