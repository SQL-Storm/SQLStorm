
WITH MovieRoles AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS role_count,
        STRING_AGG(DISTINCT r.role, ', ') AS roles,
        MIN(c.nr_order) AS min_order,
        MAX(c.nr_order) AS max_order
    FROM cast_info c
    JOIN role_type r ON c.role_id = r.id
    WHERE c.note IS NULL OR c.note NOT LIKE '%uncredited%'
    GROUP BY c.movie_id
),
MoviesWithKeywords AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        COALESCE(k.keywords, 'No Keywords') AS keywords
    FROM aka_title m
    LEFT JOIN (
        SELECT 
            mk.movie_id,
            STRING_AGG(mk.keyword, ', ') AS keywords
        FROM movie_keyword mk
        JOIN keyword k ON mk.keyword_id = k.id
        GROUP BY mk.movie_id
    ) k ON m.id = k.movie_id
),
MoviesWithPersonInfo AS (
    SELECT 
        p.person_id,
        p.info AS personal_info,
        mv.movie_id,
        mv.title
    FROM person_info p
    JOIN MovieRoles r ON p.person_id = r.movie_id
    JOIN MoviesWithKeywords mv ON r.movie_id = mv.movie_id
)
SELECT 
    mv.title,
    mv.keywords,
    COALESCE(mr.role_count, 0) AS number_of_roles,
    mr.roles,
    mpi.personal_info,
    (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = mv.movie_id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info LIKE '%award%')) AS award_count,
    CASE 
        WHEN COALESCE(mr.role_count, 0) > 5 THEN 'Ensemble Cast'
        ELSE 'Small Cast'
    END AS cast_size_category
FROM MoviesWithKeywords mv
LEFT JOIN MovieRoles mr ON mv.movie_id = mr.movie_id
LEFT JOIN MoviesWithPersonInfo mpi ON mv.movie_id = mpi.movie_id
WHERE mv.keywords IS NOT NULL
GROUP BY 
    mv.title,
    mv.keywords,
    mr.role_count,
    mr.roles,
    mpi.personal_info
ORDER BY mv.title ASC, number_of_roles DESC
LIMIT 100;
