
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        mt.kind_id,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        a.title,
        a.production_year,
        a.kind_id,
        mh.depth + 1
    FROM 
        movie_link ml
        INNER JOIN aka_title a ON a.id = ml.linked_movie_id
        INNER JOIN movie_hierarchy mh ON mh.movie_id = ml.movie_id
)
SELECT 
    ak.name AS actor_name,
    ak.surname_pcode,
    mt.movie_title,
    mt.production_year,
    mt.kind_id,
    COUNT(DISTINCT mc.company_id) AS num_companies,
    SUM(CASE WHEN ci.person_role_id IS NULL THEN 1 ELSE 0 END) AS unknown_roles_count,
    ARRAY_AGG(DISTINCT k.keyword) FILTER (WHERE k.keyword IS NOT NULL) AS keywords,
    ROW_NUMBER() OVER (PARTITION BY ak.id ORDER BY mt.production_year) AS rn,
    COALESCE(NULLIF(ci.note, '')) AS role_note,
    CASE 
        WHEN mt.production_year IS NULL THEN 'Unknown Year' 
        ELSE CAST(mt.production_year AS VARCHAR)
    END AS year_display
FROM 
    aka_name ak
    LEFT JOIN cast_info ci ON ci.person_id = ak.person_id
    LEFT JOIN movie_companies mc ON ci.movie_id = mc.movie_id
    LEFT JOIN movie_keyword mk ON mk.movie_id = mc.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    JOIN movie_hierarchy mt ON mt.movie_id = ci.movie_id
WHERE 
    ak.name IS NOT NULL
    AND (mt.kind_id BETWEEN 1 AND 5 OR mt.kind_id IS NULL)
GROUP BY 
    ak.id, ak.name, ak.surname_pcode, mt.movie_title, 
    mt.production_year, mt.kind_id, ci.note
HAVING 
    COUNT(DISTINCT mt.movie_id) > 0
ORDER BY 
    actor_name, mt.production_year DESC, rn
LIMIT 100;
