
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year, 
        1 AS depth
    FROM aka_title mt
    WHERE mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id, 
        at.title, 
        at.production_year, 
        mh.depth + 1
    FROM movie_link ml
    JOIN aka_title at ON ml.linked_movie_id = at.id
    JOIN MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
TopMovies AS (
    SELECT 
        mh.movie_id, 
        mh.title, 
        mh.production_year, 
        COUNT(DISTINCT ci.person_id) AS cast_count
    FROM MovieHierarchy mh
    LEFT JOIN complete_cast cc ON mh.movie_id = cc.movie_id
    LEFT JOIN cast_info ci ON cc.subject_id = ci.id
    GROUP BY mh.movie_id, mh.title, mh.production_year
),
PopularMovies AS (
    SELECT 
        tm.movie_id, 
        tm.title, 
        tm.production_year,
        RANK() OVER (ORDER BY tm.cast_count DESC) AS rank
    FROM TopMovies tm
),
MovieDetails AS (
    SELECT 
        pm.movie_id, 
        pm.title, 
        pm.production_year, 
        pm.rank,
        STRING_AGG(DISTINCT ak.name, ', ') AS aka_names,
        ARRAY_AGG(DISTINCT kw.keyword) AS keywords,
        (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = pm.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'summary')) AS has_summary
    FROM PopularMovies pm
    LEFT JOIN movie_keyword mk ON pm.movie_id = mk.movie_id
    LEFT JOIN keyword kw ON mk.keyword_id = kw.id
    LEFT JOIN aka_name ak ON pm.movie_id = ak.movie_id
    WHERE pm.rank <= 10
    GROUP BY pm.movie_id, pm.title, pm.production_year, pm.rank
)
SELECT 
    md.movie_id, 
    md.title, 
    md.production_year,
    md.rank,
    md.aka_names,
    md.keywords,
    CASE 
        WHEN md.has_summary > 0 THEN 'Yes' 
        ELSE 'No' 
    END AS has_summary_flag
FROM MovieDetails md
WHERE md.aka_names IS NOT NULL 
  AND md.keywords IS NOT NULL
ORDER BY md.rank;
