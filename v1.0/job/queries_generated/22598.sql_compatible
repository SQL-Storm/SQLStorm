
WITH RankedTitles AS (
    SELECT 
        a.title,
        a.production_year,
        a.kind_id,
        ROW_NUMBER() OVER (PARTITION BY a.kind_id ORDER BY a.production_year DESC) AS ranking
    FROM 
        aka_title a
    WHERE 
        a.production_year IS NOT NULL
        AND a.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE 'Drama%')
),
CastCounts AS (
    SELECT
        ci.movie_id,
        COUNT(DISTINCT ci.person_id) AS cast_member_count
    FROM 
        cast_info ci
    GROUP BY 
        ci.movie_id
),
MovieInfo AS (
    SELECT 
        m.id AS movie_id,
        STRING_AGG(DISTINCT CONCAT(m.title, ' (', m.production_year, ')'), ', ') AS titles
    FROM 
        title m
    INNER JOIN 
        movie_keyword mk ON mk.movie_id = m.id
    INNER JOIN 
        keyword k ON k.id = mk.keyword_id
    WHERE 
        k.keyword NOT LIKE '%spoiler%'
    GROUP BY 
        m.id
),
HighlyRatedMovies AS (
    SELECT 
        mc.movie_id,
        AVG(CAST(i.info AS numeric)) AS average_rating
    FROM 
        movie_info i
    INNER JOIN 
        movie_companies mc ON mc.movie_id = i.movie_id
    WHERE 
        i.info_type_id = (SELECT id FROM info_type WHERE info = 'Rating')
    GROUP BY 
        mc.movie_id
    HAVING 
        AVG(CAST(i.info AS numeric)) > 7.5
)
SELECT 
    rt.title,
    rt.production_year,
    rt.kind_id,
    COALESCE(c.cast_member_count, 0) AS total_cast,
    mi.titles AS collated_titles,
    COALESCE(hr.average_rating, 0) AS avg_rating
FROM 
    RankedTitles rt
LEFT JOIN 
    CastCounts c ON rt.id = c.movie_id
LEFT JOIN 
    MovieInfo mi ON rt.id = mi.movie_id
LEFT JOIN 
    HighlyRatedMovies hr ON hr.movie_id = rt.id
WHERE 
    rt.ranking <= 5 
    AND (mi.titles IS NOT NULL OR rt.kind_id IS NOT NULL) 
ORDER BY 
    rt.production_year DESC, rt.title;
