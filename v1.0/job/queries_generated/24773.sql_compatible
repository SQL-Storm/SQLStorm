
WITH RankedMovies AS (
    SELECT 
        a.id AS movie_id,
        a.title,
        a.production_year,
        ROW_NUMBER() OVER (PARTITION BY a.production_year ORDER BY a.production_year DESC) AS year_rank
    FROM 
        aka_title a
    WHERE 
        a.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
        AND a.production_year IS NOT NULL
),
ActorRoles AS (
    SELECT 
        c.movie_id,
        ak.name AS actor_name,
        r.role AS role_name,
        COUNT(c.id) AS role_count
    FROM 
        cast_info c
    JOIN 
        aka_name ak ON ak.person_id = c.person_id
    JOIN 
        role_type r ON r.id = c.role_id
    WHERE 
        ak.name IS NOT NULL
    GROUP BY 
        c.movie_id, ak.name, r.role
),
MoviesWithActorCount AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        COUNT(DISTINCT ar.actor_name) AS actor_count
    FROM 
        RankedMovies rm
    LEFT JOIN 
        ActorRoles ar ON rm.movie_id = ar.movie_id
    WHERE 
        rm.year_rank <= 5
    GROUP BY 
        rm.movie_id, rm.title, rm.production_year
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        ARRAY_AGG(DISTINCT k.keyword) AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    m.title,
    m.production_year,
    COALESCE(m.actor_count, 0) AS total_actors,
    COALESCE(mk.keywords, ARRAY[]::TEXT) AS keywords,
    NULLIF(m.production_year, 2020) AS is_not_2020,  
    CASE 
        WHEN m.actor_count IS NOT NULL THEN 'Has Actors' 
        ELSE 'No Actors' 
    END AS actor_status,
    (SELECT MAX(c.nr_order) 
     FROM complete_cast c 
     WHERE c.movie_id = m.movie_id) AS max_cast_order
FROM 
    MoviesWithActorCount m
LEFT JOIN 
    MovieKeywords mk ON m.movie_id = mk.movie_id
ORDER BY 
    m.production_year DESC, m.title ASC
LIMIT 100 OFFSET 10;
