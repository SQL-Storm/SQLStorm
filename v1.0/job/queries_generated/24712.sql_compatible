
WITH RECURSIVE movie_expansion AS (
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        COALESCE(mk.keyword, 'No Keyword') AS keyword,
        mi.info AS additional_info,
        1 AS level
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        movie_info mi ON m.id = mi.movie_id
    WHERE 
        m.production_year IS NOT NULL

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        COALESCE(mk.keyword, 'No Keyword') AS keyword,
        mi.info AS additional_info,
        me.level + 1
    FROM 
        aka_title m
    INNER JOIN 
        movie_link ml ON m.id = ml.movie_id
    INNER JOIN 
        movie_expansion me ON ml.linked_movie_id = me.movie_id
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        movie_info mi ON m.id = mi.movie_id
    WHERE 
        me.level < 3  
),

ranked_movies AS (
    SELECT 
        me.movie_id,
        me.title,
        me.production_year,
        me.keyword,
        me.additional_info,
        ROW_NUMBER() OVER (PARTITION BY me.keyword ORDER BY me.production_year DESC) AS rank_desc,
        COUNT(*) OVER (PARTITION BY me.keyword) AS keyword_count
    FROM 
        movie_expansion me
)

SELECT 
    n.name AS actor_name,
    rm.title,
    rm.production_year,
    rm.keyword,
    rm.additional_info,
    CASE 
        WHEN rm.rank_desc = 1 THEN 'Top Ranked'
        ELSE 'Other'
    END AS ranking_category,
    COALESCE(ci.note, 'No Role') AS role_note
FROM 
    ranked_movies rm
LEFT JOIN 
    cast_info ci ON rm.movie_id = ci.movie_id
LEFT JOIN 
    aka_name n ON ci.person_id = n.person_id 
WHERE 
    rm.keyword_count > 1 
    AND rm.production_year > 2000
    AND (ci.role_id IS NOT NULL OR ci.note IS NOT NULL)
ORDER BY 
    rm.production_year DESC,
    rm.keyword;
