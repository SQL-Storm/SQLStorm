WITH RECURSIVE movie_hierarchy AS (
    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        m.imdb_id,
        0 AS level
    FROM
        aka_title m
    WHERE 
        m.production_year IS NOT NULL 
        AND m.kind_id IN (SELECT kt.id FROM kind_type kt WHERE kt.kind LIKE 'movie%')
    
    UNION ALL
    
    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        m.imdb_id,
        mh.level + 1
    FROM
        movie_hierarchy mh
    JOIN
        aka_title m ON mh.movie_id = m.episode_of_id
    WHERE 
        mh.level < 10
)

SELECT
    COALESCE(aka.name, '') AS actor_name,
    t.title AS movie_title,
    COUNT(DISTINCT mc.company_id) AS production_companies,
    STRING_AGG(DISTINCT c.kind ORDER BY c.kind) AS company_kinds,
    AVG(mi.rating) FILTER (WHERE mi.rating IS NOT NULL) AS avg_rating,
    ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY COUNT(mc.company_id) DESC) AS company_rank,
    CASE 
        WHEN AVG(mi.rating) IS NULL THEN 'No Ratings'
        WHEN AVG(mi.rating) >= 8 THEN 'Highly Rated'
        ELSE 'Average Rating'
    END AS rating_category
FROM
    aka_name aka
JOIN
    cast_info ci ON aka.person_id = ci.person_id
JOIN
    title t ON ci.movie_id = t.id
LEFT JOIN
    movie_companies mc ON t.id = mc.movie_id
LEFT JOIN
    movie_info mi ON t.id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
LEFT JOIN
    company_type c ON mc.company_type_id = c.id
WHERE
    ci.nr_order < 5
    AND t.production_year >= 2000
    AND t.kind_id IN (SELECT id FROM kind_type WHERE kind NOT LIKE 'short%')
    AND aka.name IS NOT NULL
GROUP BY
    aka.id, t.id, t.title
ORDER BY
    rating_category DESC, company_rank DESC
LIMIT 50;