WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level
    FROM 
        aka_title m
    WHERE 
        m.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.linked_movie_id = mh.movie_id
    JOIN 
        aka_title m ON ml.movie_id = m.id
    WHERE 
        mh.level < 5  
),
ranked_movies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT c.person_id) AS cast_count,
        RANK() OVER (PARTITION BY mh.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank_by_cast_count
    FROM 
        movie_hierarchy mh
    LEFT JOIN 
        cast_info c ON mh.movie_id = c.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year
),
movies_with_keywords AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        ARRAY_AGG(DISTINCT k.keyword) AS keywords
    FROM 
        ranked_movies rm
    LEFT JOIN 
        movie_keyword mk ON rm.movie_id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        rm.movie_id, rm.title, rm.production_year
)
SELECT 
    mwk.movie_id,
    mwk.title,
    COALESCE(mwk.production_year, 'Unknown') AS production_year,
    mwk.keywords,
    COALESCE(cast_info.note, 'No cast noted') AS cast_note,
    CASE 
        WHEN mwk.production_year < 2000 THEN 'Classic'
        WHEN mwk.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Contemporary'
    END AS movie_era
FROM 
    movies_with_keywords mwk
LEFT JOIN 
    complete_cast cc ON mwk.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ON cc.subject_id = cast_info.id
WHERE 
    mwk.rank_by_cast_count <= 5  
ORDER BY 
    mwk.production_year DESC, mwk.movie_id;