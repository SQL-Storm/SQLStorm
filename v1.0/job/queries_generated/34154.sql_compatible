
WITH RECURSIVE MovieCTE AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        1 AS depth
    FROM 
        aka_title t
    WHERE 
        t.production_year BETWEEN 2000 AND 2023

    UNION ALL

    SELECT 
        m.movie_id,
        t.title,
        t.production_year,
        c.depth + 1
    FROM 
        MovieCTE c
    JOIN 
        movie_link ml ON c.movie_id = ml.movie_id
    JOIN 
        aka_title t ON ml.linked_movie_id = t.id
    WHERE 
        c.depth < 3  
)

SELECT 
    m.movie_id,
    m.title,
    m.production_year,
    COUNT(DISTINCT cc.person_id) AS total_cast,
    COUNT(DISTINCT k.keyword) AS total_keywords,
    AVG(CASE 
        WHEN ci.role_id IS NOT NULL THEN 1 
        ELSE NULL 
    END) OVER (PARTITION BY m.movie_id) AS avg_cast_role_id,
    STRING_AGG(DISTINCT c.kind, ', ') AS company_types,
    MAX(CASE 
        WHEN ci.note IS NULL THEN 'No Note' 
        ELSE ci.note 
    END) AS last_note,
    CASE 
        WHEN m.production_year >= 2010 THEN 'Recent Production' 
        ELSE 'Older Production' 
    END AS production_category
FROM 
    MovieCTE m
LEFT JOIN 
    complete_cast cc ON m.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON cc.subject_id = ci.person_id
LEFT JOIN 
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_companies mc ON m.movie_id = mc.movie_id
LEFT JOIN 
    company_type c ON mc.company_type_id = c.id
GROUP BY 
    m.movie_id, m.title, m.production_year, avg_cast_role_id, company_types, last_note, production_category
ORDER BY 
    m.production_year DESC, total_cast DESC;
