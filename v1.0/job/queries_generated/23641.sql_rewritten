WITH ranked_titles AS (
    SELECT
        a.id AS aka_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC) AS title_rank
    FROM aka_title t
    LEFT JOIN aka_name a ON t.movie_id = a.id
    WHERE t.production_year IS NOT NULL
),
cast_summary AS (
    SELECT
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS total_cast_members,
        MAX(CASE WHEN r.role = 'Lead' THEN 1 ELSE 0 END) AS has_lead_role
    FROM cast_info c
    JOIN role_type r ON c.role_id = r.id
    GROUP BY c.movie_id
),
movie_info_summary AS (
    SELECT
        m.movie_id,
        STRING_AGG(DISTINCT mi.info, ', ') AS info_list,
        COUNT(mi.info_type_id) AS info_type_count
    FROM movie_info m
    JOIN movie_info_idx mi ON mi.movie_id = m.movie_id
    WHERE mi.info IS NOT NULL
    GROUP BY m.movie_id
),
keyword_summary AS (
    SELECT
        mk.movie_id,
        COUNT(DISTINCT k.keyword) AS keyword_count
    FROM movie_keyword mk
    JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY mk.movie_id
)

SELECT
    t.title,
    t.production_year,
    cs.total_cast_members,
    cs.has_lead_role,
    mis.info_list,
    mis.info_type_count,
    ks.keyword_count,
    COALESCE(NULLIF(ks.keyword_count, 0), 'No Keywords') AS keyword_status,
    CASE 
        WHEN cs.total_cast_members > 5 THEN 'Many Cast'
        WHEN cs.total_cast_members IS NULL THEN 'No Cast'
        ELSE 'Few Cast'
    END AS cast_category
FROM ranked_titles t
LEFT JOIN cast_summary cs ON t.aka_id = cs.movie_id
LEFT JOIN movie_info_summary mis ON t.aka_id = mis.movie_id
LEFT JOIN keyword_summary ks ON t.aka_id = ks.movie_id
WHERE t.title_rank = 1
AND (cs.has_lead_role = 1 OR cs.total_cast_members IS NULL)
ORDER BY t.production_year DESC, t.title;