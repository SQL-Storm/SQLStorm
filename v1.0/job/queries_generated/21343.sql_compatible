
WITH RECURSIVE movie_relations AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        ARRAY[m.id] AS movie_path,
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.kind_id IN (SELECT id FROM kind_type WHERE kind = 'feature')

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        mt.title,
        mr.movie_path || ml.linked_movie_id,
        mr.depth + 1
    FROM 
        movie_link ml
    JOIN 
        movie_relations mr ON ml.movie_id = mr.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    WHERE 
        ml.link_type_id = (SELECT id FROM link_type WHERE link = 'sequel')
        AND NOT ml.linked_movie_id = ANY(mr.movie_path)
)
SELECT 
    a.name AS actor_name,
    mt.movie_title,
    COALESCE(w.ranking, 0) AS ranking,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    STRING_AGG(DISTINCT ki.info, ', ') AS other_info,
    SUM(CASE WHEN c.person_role_id IS NULL THEN 1 ELSE 0 END) AS unknown_roles
FROM 
    cast_info c
JOIN 
    aka_name a ON a.person_id = c.person_id
JOIN 
    movie_relations mr ON c.movie_id = mr.movie_id
JOIN 
    aka_title mt ON mr.movie_id = mt.id
LEFT JOIN 
    (SELECT 
        movie_id,
        ROW_NUMBER() OVER (ORDER BY production_year DESC) AS ranking
     FROM 
        aka_title 
     WHERE 
        production_year IS NOT NULL) w ON w.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mt.id
LEFT JOIN 
    movie_info mi ON mt.id = mi.movie_id
LEFT JOIN 
    info_type ki ON mi.info_type_id = ki.id 
WHERE 
    a.name IS NOT NULL
    AND (mi.info IS NULL OR mi.note IS NOT NULL)
GROUP BY 
    a.name, mt.movie_title, w.ranking
HAVING 
    COUNT(c.id) > 1
ORDER BY 
    unknown_roles DESC, keyword_count DESC, a.name;
