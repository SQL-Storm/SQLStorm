
WITH RECURSIVE MovieHierarchy AS (
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.episode_of_id,
        1 AS depth
    FROM 
        aka_title t
    WHERE 
        t.episode_of_id IS NULL
    
    UNION ALL
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.episode_of_id,
        mh.depth + 1
    FROM 
        aka_title t
    JOIN 
        MovieHierarchy mh ON t.episode_of_id = mh.movie_id
)

SELECT 
    a.name AS actor_name,
    am.title AS movie_title,
    mh.production_year,
    COUNT(DISTINCT c.id) AS cast_count,
    SUM(CASE WHEN c.role_id IS NULL THEN 1 ELSE 0 END) AS unknown_roles_count,
    (SELECT COUNT(*) FROM movie_keyword mk WHERE mk.movie_id = am.id) AS keyword_count,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY am.production_year DESC) AS movie_rank
FROM 
    aka_name a
JOIN 
    cast_info c ON a.person_id = c.person_id
JOIN 
    MovieHierarchy mh ON c.movie_id = mh.movie_id
JOIN 
    aka_title am ON mh.movie_id = am.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = am.id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
WHERE 
    am.production_year >= 2000
GROUP BY 
    a.name, am.title, mh.production_year, a.person_id
HAVING 
    COUNT(DISTINCT c.id) > 2
ORDER BY 
    movie_rank, actor_name;
