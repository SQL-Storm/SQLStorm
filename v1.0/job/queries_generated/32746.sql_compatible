
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    a.name AS actor,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT c.person_id) AS roles_count,
    STRING_AGG(DISTINCT kg.keyword, ', ') AS keywords,
    MAX(CASE WHEN pi.info_type_id = 1 THEN pi.info END) AS birthdate,
    AVG(CASE WHEN c.nr_order IS NOT NULL THEN c.nr_order ELSE NULL END) AS avg_role_order
FROM 
    aka_name a
JOIN 
    cast_info c ON a.person_id = c.person_id
JOIN 
    aka_title t ON c.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword kg ON mk.keyword_id = kg.id
LEFT JOIN 
    person_info pi ON a.person_id = pi.person_id
LEFT JOIN 
    movie_hierarchy mh ON mh.movie_id = t.id
WHERE 
    a.name IS NOT NULL
    AND t.production_year > 2000
    AND mh.level = 1
GROUP BY 
    a.name, t.title, t.production_year
HAVING 
    COUNT(DISTINCT c.person_id) > 0
ORDER BY 
    t.production_year DESC, roles_count DESC;
