WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year BETWEEN 2000 AND 2023

    UNION ALL

    SELECT 
        mh.movie_id,
        m.title,
        m.production_year,
        depth + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
),
TopMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        ROW_NUMBER() OVER (ORDER BY mh.production_year DESC) AS rank
    FROM 
        MovieHierarchy mh
)

SELECT 
    t.title AS main_title,
    t.production_year,
    co.name AS company_name,
    a.name AS actor_name,
    COUNT(DISTINCT k.keyword) AS keyword_count,
    AVG(mr.rating) AS average_rating,
    CASE 
        WHEN a.gender IS NULL THEN 'Unknown'
        ELSE a.gender
    END AS actor_gender
FROM 
    TopMovies t
LEFT JOIN 
    movie_companies mc ON t.movie_id = mc.movie_id
LEFT JOIN 
    company_name co ON mc.company_id = co.id
JOIN 
    complete_cast cc ON t.movie_id = cc.movie_id
JOIN 
    name a ON cc.subject_id = a.id
LEFT JOIN 
    movie_keyword mk ON t.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN (
    SELECT
        movie_id,
        AVG(COALESCE(rating, 0)) AS rating
    FROM 
        (SELECT 
            movie_id,
            5.0 * (RANDOM() * 10) AS rating  
        FROM 
            generate_series(1, 100) AS movie_id
        ) AS simulated_ratings
    GROUP BY movie_id
) AS mr ON t.movie_id = mr.movie_id
WHERE 
    t.rank <= 10
GROUP BY 
    t.title, t.production_year, co.name, a.name, a.gender
ORDER BY 
    t.production_year DESC,
    keyword_count DESC;