
WITH RankedTitles AS (
    SELECT 
        a.name AS actor_name,
        t.title AS movie_title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY t.production_year DESC) AS title_rank
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    JOIN 
        aka_title t ON ci.movie_id = t.movie_id
),
HistoricalTitles AS (
    SELECT 
        actor_name,
        movie_title,
        production_year,
        title_rank 
    FROM 
        RankedTitles
    WHERE 
        title_rank <= 5
),
RecentMovies AS (
    SELECT 
        t.title,
        t.production_year,
        COALESCE(COUNT(DISTINCT kc.keyword), 0) AS keyword_count
    FROM 
        aka_title t
    LEFT JOIN 
        movie_keyword mk ON t.movie_id = mk.movie_id
    LEFT JOIN 
        keyword kc ON mk.keyword_id = kc.id
    WHERE 
        t.production_year >= 2020
    GROUP BY 
        t.title, t.production_year
),
ActorPerformance AS (
    SELECT 
        a.name AS actor_name,
        SUM(CASE 
            WHEN r.production_year IS NOT NULL THEN 1 
            ELSE 0 
        END) AS active_titles_count,
        AVG(COALESCE(r.title_rank, 0)) AS avg_title_rank,
        STRING_AGG(DISTINCT r.movie_title, '; ') AS featured_movies
    FROM 
        aka_name a
    LEFT JOIN 
        HistoricalTitles r ON a.actor_name = r.actor_name
    LEFT JOIN 
        RecentMovies rm ON r.movie_title = rm.title
    GROUP BY 
        a.name
)
SELECT 
    ap.actor_name,
    ap.active_titles_count,
    ap.avg_title_rank,
    ap.featured_movies,
    COALESCE(rm.keyword_count, 0) AS keyword_count
FROM 
    ActorPerformance ap
LEFT JOIN 
    RecentMovies rm ON POSITION(rm.title IN ap.featured_movies) > 0
WHERE 
    ap.active_titles_count > 0
ORDER BY 
    rm.keyword_count DESC,
    ap.avg_title_rank ASC 
LIMIT 50
OFFSET (SELECT COUNT(*) FROM ActorPerformance) / 2;
