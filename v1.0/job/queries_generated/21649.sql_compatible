
WITH RankedMovies AS (
    SELECT 
        mt.title,
        mt.production_year,
        COUNT(DISTINCT ci.person_id) OVER (PARTITION BY mt.id) AS actor_count,
        ROW_NUMBER() OVER (PARTITION BY mt.production_year ORDER BY COUNT(DISTINCT ci.person_id) DESC) AS rank_by_actor_count
    FROM 
        aka_title mt
    LEFT JOIN 
        cast_info ci ON mt.id = ci.movie_id
    WHERE 
        mt.production_year IS NOT NULL
),
ActorInfo AS (
    SELECT 
        an.name AS actor_name,
        an.person_id,
        COUNT(DISTINCT ci.movie_id) AS movies_count
    FROM 
        aka_name an
    JOIN 
        cast_info ci ON an.person_id = ci.person_id
    GROUP BY 
        an.name, an.person_id
),
TopActors AS (
    SELECT 
        actor_name,
        movies_count,
        RANK() OVER (ORDER BY movies_count DESC) AS actor_rank
    FROM 
        ActorInfo
    WHERE 
        movies_count > 1
),
MoviesWithKeywords AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        STRING_AGG(mk.keyword, ', ') AS keywords
    FROM 
        aka_title mt
    LEFT JOIN 
        movie_keyword mk ON mt.id = mk.movie_id
    GROUP BY 
        mt.id, mt.title
)
SELECT 
    rm.title AS movie_title,
    rm.production_year,
    rm.actor_count,
    ta.actor_name,
    ta.movies_count,
    mk.keywords,
    COALESCE(NULLIF(mk.keywords, ''), 'No keywords available') AS cleaned_keywords,
    CASE 
        WHEN rm.actor_count IS NULL THEN 'No actors'
        WHEN rm.actor_count > 10 THEN 'Star-studded cast'
        ELSE 'Moderately casted'
    END AS cast_descriptor,
    (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = rm.id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'Awards')) AS awards_count
FROM 
    RankedMovies rm
JOIN 
    TopActors ta ON ta.actor_rank <= 10
LEFT JOIN 
    MoviesWithKeywords mk ON mk.movie_id = rm.id
WHERE 
    rm.actor_count < (SELECT AVG(actor_count) FROM RankedMovies) OR rm.actor_count IS NULL
ORDER BY 
    rm.production_year DESC, 
    rm.actor_count DESC
LIMIT 20;
