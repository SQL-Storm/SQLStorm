
WITH RECURSIVE ActorMovies AS (
    SELECT 
        a.id AS actor_id,
        a.name AS actor_name,
        c.movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY a.id ORDER BY t.production_year DESC) AS rank
    FROM 
        aka_name a
    JOIN 
        cast_info c ON a.person_id = c.person_id
    JOIN 
        aka_title t ON c.movie_id = t.movie_id
    WHERE 
        t.production_year IS NOT NULL
),
MovieDetails AS (
    SELECT 
        m.movie_id,
        m.title,
        CASE 
            WHEN m.production_year IS NULL THEN 'Unknown Year'
            ELSE CAST(m.production_year AS VARCHAR)
        END AS production_year,
        COUNT(DISTINCT ci.person_id) AS total_cast,
        STRING_AGG(DISTINCT a.name, ', ' ORDER BY a.name) AS cast_names
    FROM 
        aka_title m
    LEFT JOIN 
        cast_info ci ON m.movie_id = ci.movie_id
    LEFT JOIN 
        aka_name a ON ci.person_id = a.person_id
    GROUP BY 
        m.movie_id, m.title, m.production_year
),
KeywordCount AS (
    SELECT 
        mk.movie_id,
        COUNT(DISTINCT k.keyword_id) AS keyword_count
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    am.actor_id,
    am.actor_name,
    md.title,
    md.production_year,
    md.total_cast,
    md.cast_names,
    COALESCE(kc.keyword_count, 0) AS keyword_count,
    CASE 
        WHEN am.rank <= 3 THEN 'Top Actor'
        ELSE 'Supporting Actor'
    END AS actor_category
FROM 
    ActorMovies am
JOIN 
    MovieDetails md ON am.movie_id = md.movie_id
LEFT JOIN 
    KeywordCount kc ON md.movie_id = kc.movie_id
WHERE 
    am.rank = 1 
ORDER BY 
    am.actor_name, md.production_year DESC;
