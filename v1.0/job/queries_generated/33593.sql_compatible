
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        CAST(NULL AS VARCHAR(255)) AS parent_title,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = 1 
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        m.title,
        m.production_year,
        mh.title AS parent_title,
        mh.level + 1
    FROM 
        movie_link ml
        JOIN MovieHierarchy mh ON ml.movie_id = mh.movie_id
        JOIN aka_title m ON ml.linked_movie_id = m.id
)
SELECT 
    mh.level,
    mh.title,
    mh.production_year,
    COALESCE(ka.name, 'Unknown') AS actor_name,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    AVG(CASE WHEN ci.role_id IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY mh.movie_id) AS avg_roles,
    STRING_AGG(DISTINCT ak.name || ' (' || ak.imdb_index || ')', ', ') AS additional_actors
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON cc.subject_id = ci.person_id 
LEFT JOIN 
    aka_name ka ON ci.person_id = ka.person_id 
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id 
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id 
LEFT JOIN 
    aka_name ak ON ak.person_id = ci.person_id AND ak.name <> ka.name
GROUP BY 
    mh.level, mh.title, mh.production_year, ka.name, mh.movie_id
ORDER BY 
    mh.level, mh.production_year DESC, mh.title;
