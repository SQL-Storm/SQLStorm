
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level,
        CAST(mt.title AS VARCHAR(255)) AS path
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1,
        CONCAT(mh.path, ' -> ', at.title)
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.level < 3  
)

SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mh.production_year,
    mh.level,
    STRING_AGG(DISTINCT at.title, ', ') FILTER (WHERE at.production_year IS NOT NULL) AS linked_movies,
    COUNT(DISTINCT ci.movie_id) OVER (PARTITION BY ak.id) AS movies_count,
    MAX(CASE WHEN ci.nr_order IS NOT NULL THEN ci.nr_order ELSE 0 END) AS highest_order
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN 
    movie_link ml ON mt.id = ml.movie_id
LEFT JOIN 
    aka_title at ON ml.linked_movie_id = at.id
LEFT JOIN 
    movie_hierarchy mh ON mt.id = mh.movie_id
WHERE 
    ak.name IS NOT NULL
    AND mt.production_year >= 2000
    AND (mt.note IS NULL OR mt.note != 'Unreleased')
GROUP BY 
    ak.name, mt.title, mh.production_year, mh.level, ak.id
ORDER BY 
    movies_count DESC, highest_order DESC;
