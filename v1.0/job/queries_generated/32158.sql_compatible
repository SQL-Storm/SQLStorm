
WITH RECURSIVE MovieHierarchy AS (
    SELECT mt.id AS movie_id, mt.title, mt.production_year, 1 AS level
    FROM aka_title mt
    WHERE mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL

    SELECT m.id AS movie_id, m.title, m.production_year, mh.level + 1
    FROM movie_link ml
    JOIN MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN aka_title m ON ml.linked_movie_id = m.id
)

SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COALESCE(cc.role, 'Unspecified') AS role,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    AVG(mr.rating) AS average_rating,
    STRING_AGG(DISTINCT cn.name, ', ') AS company_names
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN
    complete_cast cc ON cc.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mt.id
LEFT JOIN 
    keyword kc ON mk.keyword_id = kc.id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = mt.id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
LEFT JOIN 
    (SELECT movie_id, AVG(CAST(info AS DECIMAL)) AS rating
     FROM movie_info 
     WHERE info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
     GROUP BY movie_id) mr ON mt.id = mr.movie_id
WHERE 
    ak.name IS NOT NULL
    AND mt.production_year >= 2000
    AND ak.name LIKE '%Smith%'
GROUP BY 
    ak.name, mt.title, mt.production_year, cc.role
HAVING 
    COUNT(DISTINCT kc.keyword) > 5
ORDER BY 
    average_rating DESC, mt.production_year;
