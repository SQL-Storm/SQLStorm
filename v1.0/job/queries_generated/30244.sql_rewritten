WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        NULL::integer AS parent_movie_id
    FROM 
        aka_title m
    WHERE 
        m.kind_id = 1  

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.movie_id AS parent_movie_id
    FROM 
        aka_title m
    INNER JOIN 
        movie_link ml ON m.id = ml.linked_movie_id
    INNER JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        m.kind_id = 1  
),
movie_cast AS (
    SELECT 
        c.movie_id,
        c.person_id,
        p.name,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS role_order,
        COUNT(*) OVER (PARTITION BY c.movie_id) AS total_cast
    FROM 
        cast_info c
    INNER JOIN 
        aka_name p ON c.person_id = p.person_id
),
movies_with_keywords AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        m.id
),
final_output AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        mc.person_id,
        mc.name AS actor_name,
        mc.role_order,
        mc.total_cast,
        mwk.keywords,
        CASE 
            WHEN MO.production_year > 2000 THEN 'Modern'
            ELSE 'Classic'
        END AS era
    FROM 
        movie_hierarchy mh
    LEFT JOIN 
        movie_cast mc ON mh.movie_id = mc.movie_id
    LEFT JOIN 
        movies_with_keywords mwk ON mh.movie_id = mwk.movie_id
)
SELECT 
    f.movie_id,
    f.title,
    f.production_year,
    f.actor_name,
    f.role_order,
    f.total_cast,
    f.keywords,
    f.era
FROM 
    final_output f
WHERE 
    f.role_order <= 3  
ORDER BY 
    f.production_year DESC, f.role_order;