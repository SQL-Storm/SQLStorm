WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL
    
    UNION ALL
    
    
    SELECT 
        et.id AS movie_id,
        et.title,
        et.production_year,
        mh.level + 1
    FROM 
        aka_title et
    JOIN 
        movie_hierarchy mh ON et.episode_of_id = mh.movie_id
),
top_cast AS (
    SELECT 
        ci.movie_id, 
        ak.name AS actor_name, 
        RANK() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_rank
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
),
movie_keywords AS (
    SELECT 
        mk.movie_id, 
        STRING_AGG(mk.keyword_id::text, ',') AS keywords
    FROM 
        movie_keyword mk
    GROUP BY 
        mk.movie_id
),
movie_info_summary AS (
    SELECT 
        mi.movie_id,
        MAX(mi.info) AS highest_rated_info,
        MIN(mi.info) AS lowest_rated_info
    FROM 
        movie_info mi
    GROUP BY 
        mi.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    (SELECT COALESCE(MAX(actor_rank), 0) FROM top_cast tc WHERE tc.movie_id = mh.movie_id) AS top_actor_rank,
    (SELECT keywords FROM movie_keywords mk WHERE mk.movie_id = mh.movie_id) AS associated_keywords,
    mis.highest_rated_info,
    mis.lowest_rated_info
FROM 
    movie_hierarchy mh
LEFT JOIN 
    movie_info_summary mis ON mh.movie_id = mis.movie_id
ORDER BY 
    mh.production_year DESC,
    top_actor_rank ASC;