
WITH RECURSIVE employee_hierarchy AS (
    SELECT 
        person_id,
        name,
        0 AS level
    FROM 
        aka_name
    WHERE 
        person_id IS NOT NULL

    UNION ALL

    SELECT 
        c.person_id,
        a.name,
        eh.level + 1
    FROM 
        cast_info c
    JOIN 
        aka_name a ON a.person_id = c.person_id
    JOIN 
        employee_hierarchy eh ON eh.person_id = c.person_id
    WHERE 
        c.nr_order = 1
),

movie_details AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        ARRAY_AGG(DISTINCT c.name ORDER BY c.name) AS cast_names
    FROM 
        aka_title mt
    LEFT JOIN 
        cast_info ci ON ci.movie_id = mt.id
    LEFT JOIN 
        aka_name c ON c.person_id = ci.person_id
    WHERE 
        mt.production_year >= 2000
    GROUP BY 
        mt.id, mt.title, mt.production_year
),

ranked_movies AS (
    SELECT 
        md.movie_id,
        md.title,
        md.production_year,
        RANK() OVER (PARTITION BY md.production_year ORDER BY COUNT(md.movie_id) DESC) AS rank
    FROM 
        movie_details md
    JOIN 
        movie_keyword mk ON mk.movie_id = md.movie_id
    GROUP BY 
        md.movie_id, md.title, md.production_year
    HAVING 
        COUNT(mk.keyword_id) > 0
)

SELECT 
    r.movie_id,
    r.title,
    r.production_year,
    r.rank,
    COALESCE(md.cast_names, 'No Cast') AS cast_names,
    COALESCE(NULLIF(md.cast_names, ''), 'Unknown') AS cast_names_nullcheck
FROM 
    ranked_movies r
LEFT JOIN 
    movie_details md ON md.movie_id = r.movie_id
WHERE 
    r.rank <= 10
ORDER BY 
    r.production_year DESC, 
    r.rank;
