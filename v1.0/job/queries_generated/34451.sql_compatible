
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT
        ml.linked_movie_id,
        lt.title,
        lt.production_year,
        mh.level + 1
    FROM
        movie_link ml
    JOIN 
        title lt ON ml.linked_movie_id = lt.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT
    ak.name AS actor_name,
    mt.movie_title,
    mt.production_year,
    COALESCE(SUM(CASE WHEN ci.nr_order IS NOT NULL THEN 1 END), 0) AS total_cast_members,
    COUNT(DISTINCT kw.keyword) AS total_keywords,
    AVG(mt.production_year) OVER (PARTITION BY ak.name) AS avg_actor_movie_year,
    STRING_AGG(DISTINCT co.name, ', ') AS companies_involved
FROM
    aka_name ak
LEFT JOIN
    cast_info ci ON ak.person_id = ci.person_id
LEFT JOIN
    MovieHierarchy mt ON ci.movie_id = mt.movie_id
LEFT JOIN
    movie_keyword mk ON mt.movie_id = mk.movie_id
LEFT JOIN
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN
    movie_companies mc ON mt.movie_id = mc.movie_id
LEFT JOIN
    company_name co ON mc.company_id = co.id
WHERE
    ak.name IS NOT NULL
GROUP BY
    ak.name, mt.movie_title, mt.production_year
HAVING
    COUNT(DISTINCT ci.movie_id) > 2
ORDER BY
    avg_actor_movie_year DESC, total_keywords DESC;
