WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        NULL::integer AS parent_movie_id
    FROM 
        aka_title m
    WHERE 
        m.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        mh.movie_id AS parent_movie_id
    FROM 
        aka_title m
    JOIN 
        movie_link ml ON ml.linked_movie_id = m.id
    JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
)

SELECT 
    ak.name AS actor_name,
    at.title AS movie_title,
    at.production_year,
    COUNT(DISTINCT c.person_id) OVER (PARTITION BY ak.name ORDER BY at.production_year) AS total_movies_acted,
    CASE 
        WHEN COUNT(DISTINCT c.person_id) OVER (PARTITION BY ak.name ORDER BY at.production_year) > 5 
        THEN 'Prolific Actor'
        ELSE 'Emerging Talent' 
    END AS actor_status,
    STRING_AGG(DISTINCT mw.keyword, ', ') FILTER (WHERE mw.keyword IS NOT NULL) AS keywords,
    NULLIF(c.note, '') AS role_note
FROM 
    aka_name ak
JOIN 
    cast_info c ON c.person_id = ak.person_id
JOIN 
    aka_title at ON at.id = c.movie_id
LEFT JOIN 
    movie_keyword mw ON mw.movie_id = at.id
LEFT JOIN 
    complete_cast cc ON cc.movie_id = at.id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = at.id
LEFT JOIN 
    company_name cn ON cn.id = mc.company_id
WHERE 
    ak.name IS NOT NULL
    AND (at.production_year > 2000 OR ak.name LIKE '%Smith%')
    AND (c.nr_order IS NOT NULL OR c.note IS NULL)
    
GROUP BY 
    ak.name, at.title, at.production_year, c.note
ORDER BY 
    total_movies_acted DESC,
    at.production_year DESC
LIMIT 100;