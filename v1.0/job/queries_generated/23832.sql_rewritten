WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        1 AS depth
    FROM 
        movie_link ml
    WHERE 
        ml.link_type_id = (SELECT id FROM link_type WHERE link = 'sequel')
  
    UNION ALL
  
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        mh.depth + 1
    FROM 
        movie_link ml
    INNER JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.linked_movie_id
    WHERE 
        ml.link_type_id = (SELECT id FROM link_type WHERE link = 'sequel')
)


SELECT 
    at.title AS movie_title,
    ak.name AS actor_name,
    COALESCE(NULLIF(mci.note, ''), 'No Note') AS company_note,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    MAX(mci.note) FILTER (WHERE mci.note IS NOT NULL) AS max_note,
    SUM(CASE WHEN pi.info IS NOT NULL THEN 1 ELSE 0 END) AS info_count,
    RANK() OVER (PARTITION BY at.production_year ORDER BY COUNT(DISTINCT mk.keyword) DESC) AS keyword_rank,
    mh.depth AS sequel_depth
FROM 
    aka_title at
JOIN 
    cast_info ci ON at.id = ci.movie_id
JOIN 
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN 
    movie_companies mc ON at.id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
LEFT JOIN 
    movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN 
    movie_info mi ON at.id = mi.movie_id
LEFT JOIN 
    person_info pi ON ak.person_id = pi.person_id
LEFT JOIN 
    movie_hierarchy mh ON at.id = mh.movie_id
GROUP BY 
    at.id, ak.id, mc.id, mh.depth
HAVING 
    COUNT(DISTINCT mk.keyword) > 0 AND 
    ARRAY_LENGTH(ARRAY(SELECT DISTINCT name FROM company_name WHERE country_code IS NOT NULL), 1) > 3
ORDER BY 
    keyword_count DESC, movie_title
LIMIT 50;