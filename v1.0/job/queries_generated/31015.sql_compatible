
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth,
        NULL AS parent_id
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL  

    UNION ALL

    SELECT 
        e.id AS movie_id,
        e.title,
        e.production_year,
        mh.depth + 1,
        mh.movie_id AS parent_id
    FROM 
        aka_title e
    JOIN 
        MovieHierarchy mh ON e.episode_of_id = mh.movie_id  
)

SELECT 
    m.movie_id,
    m.title,
    m.production_year,
    COALESCE(p.name, 'Unknown') AS parent_title,
    m.depth,
    COUNT(c.person_id) AS actor_count,
    STRING_AGG(DISTINCT ak.name, ', ') AS actors,
    AVG(CASE WHEN mi.info_type_id = 1 THEN NULLIF(mi.info::FLOAT, 0) END) AS average_rating
FROM 
    MovieHierarchy m
LEFT JOIN 
    aka_title at ON m.movie_id = at.id
LEFT JOIN 
    complete_cast cc ON at.id = cc.movie_id
LEFT JOIN 
    cast_info c ON cc.subject_id = c.person_id
LEFT JOIN 
    aka_name ak ON c.person_id = ak.person_id
LEFT JOIN 
    movie_info mi ON at.id = mi.movie_id AND mi.info_type_id IN (1, 2)  
LEFT JOIN 
    aka_title p ON m.parent_id = p.id  
GROUP BY 
    m.movie_id, m.title, m.production_year, p.name, m.depth
HAVING 
    COUNT(c.person_id) > 0  
ORDER BY 
    m.production_year DESC, actor_count DESC;
