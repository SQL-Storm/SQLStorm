
WITH movie_ratings AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        COALESCE(SUM(r.rating) / NULLIF(COUNT(r.rating), 0), 0) AS avg_rating
    FROM 
        aka_title m
    LEFT JOIN 
        (SELECT movie_id, rating FROM ratings WHERE created_at > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year') r 
    ON 
        m.id = r.movie_id
    GROUP BY 
        m.id, m.title
),
cast_ranking AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS actor_count,
        RANK() OVER (ORDER BY COUNT(DISTINCT c.person_id) DESC) AS role_rank
    FROM 
        cast_info c
    GROUP BY 
        c.movie_id
),
movie_credits AS (
    SELECT 
        movie_id,
        COUNT(m.id) AS total_credits,
        STRING_AGG(DISTINCT ak.name, ', ') AS aka_names
    FROM 
        complete_cast cc
    JOIN 
        aka_title m ON cc.movie_id = m.id
    LEFT JOIN 
        aka_name ak ON ak.person_id IN (SELECT person_id FROM cast_info WHERE movie_id = m.id)
    GROUP BY 
        movie_id
)
SELECT 
    m.title,
    m.avg_rating,
    COALESCE(cr.actor_count, 0) AS total_actors,
    COALESCE(mc.total_credits, 0) AS total_credits,
    mc.aka_names,
    CASE 
        WHEN m.avg_rating > 7 THEN 'High'
        WHEN m.avg_rating BETWEEN 4 AND 7 THEN 'Medium'
        ELSE 'Low'
    END AS rating_category
FROM 
    movie_ratings m
LEFT JOIN 
    cast_ranking cr ON m.movie_id = cr.movie_id
LEFT JOIN 
    movie_credits mc ON m.movie_id = mc.movie_id
WHERE 
    m.avg_rating IS NOT NULL 
    AND (cr.actor_count > 0 OR mc.total_credits > 0)
ORDER BY 
    m.avg_rating DESC, 
    cr.actor_count DESC NULLS LAST,
    mc.total_credits DESC;
