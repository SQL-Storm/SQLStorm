
WITH RECURSIVE movie_hierarchy AS (
    SELECT mt.id AS movie_id, mt.title, mt.production_year, 1 AS level
    FROM aka_title mt
    WHERE mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')  

    UNION ALL

    SELECT mt.id, mt.title, mt.production_year, mh.level + 1
    FROM aka_title mt
    JOIN movie_link ml ON ml.linked_movie_id = mt.id
    JOIN movie_hierarchy mh ON mh.movie_id = ml.movie_id
),
cast_with_roles AS (
    SELECT ci.movie_id, ak.name AS actor_name, rt.role, 
           ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ak.name) AS actor_order
    FROM cast_info ci
    JOIN aka_name ak ON ci.person_id = ak.person_id
    JOIN role_type rt ON ci.role_id = rt.id
),
outer_movie_info AS (
    SELECT mt.id AS movie_id, mt.title, COALESCE(mk.keyword, 'No Keywords') AS keyword,
           COALESCE(mn.info, 'No additional information') AS additional_info
    FROM aka_title mt
    LEFT JOIN movie_keyword mk ON mt.id = mk.movie_id
    LEFT JOIN movie_info mn ON mt.id = mn.movie_id
    WHERE mt.production_year >= 2000
),
aggregated_cast AS (
    SELECT movie_id, STRING_AGG(actor_name, ', ') AS actors, COUNT(*) AS actor_count
    FROM cast_with_roles
    GROUP BY movie_id
),
final_benchmark AS (
    SELECT om.movie_id, om.title, om.keyword, om.additional_info,
           ac.actors, ac.actor_count, mh.level AS hierarchy_level
    FROM outer_movie_info om
    JOIN aggregated_cast ac ON om.movie_id = ac.movie_id
    LEFT JOIN movie_hierarchy mh ON om.movie_id = mh.movie_id
    WHERE ac.actor_count > 2 AND mh.level IS NOT NULL
)
SELECT *
FROM final_benchmark
ORDER BY production_year DESC, actor_count DESC;
