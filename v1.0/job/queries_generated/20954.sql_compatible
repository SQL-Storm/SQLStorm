
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        t.title,
        t.production_year,
        0 AS level
    FROM 
        aka_title t
    JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    WHERE 
        mk.keyword_id IN (SELECT id FROM keyword WHERE keyword LIKE '%action%')
    
    UNION ALL

    SELECT 
        m.movie_id,
        t.title,
        t.production_year,
        mh.level + 1
    FROM 
        complete_cast m
    JOIN 
        MovieHierarchy mh ON m.movie_id = mh.movie_id
    JOIN 
        aka_title t ON m.movie_id = t.id
)
SELECT 
    mh.title,
    mh.production_year,
    COUNT(DISTINCT ci.person_id) AS total_cast,
    STRING_AGG(DISTINCT ak.name, ', ') AS actors,
    FIRST_VALUE(ak.name) OVER (PARTITION BY mh.movie_id ORDER BY ci.nr_order) AS first_actor,
    SUM(CASE WHEN ci.note IS NULL THEN 1 ELSE 0 END) AS null_notes_count,
    MAX(CASE WHEN ci.note IS NOT NULL THEN LENGTH(ci.note) ELSE 0 END) AS max_note_length
FROM 
    MovieHierarchy mh
JOIN 
    complete_cast ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name ak ON ci.person_id = ak.person_id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year
HAVING 
    COUNT(DISTINCT ci.person_id) > 3
ORDER BY 
    mh.production_year DESC, total_cast DESC
FETCH FIRST 50 ROWS ONLY;
