
WITH RecursiveCast AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        COUNT(*) OVER (PARTITION BY ci.movie_id) AS actor_count,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_order
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
),
LatestMovie AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        COALESCE(ki.keyword, 'No Keyword') AS keyword,
        k.kind AS kind_type,
        RANK() OVER (PARTITION BY m.id ORDER BY m.production_year DESC) AS year_rank
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        keyword ki ON mk.keyword_id = ki.id
    JOIN 
        kind_type k ON m.kind_id = k.id
),
FilteredMovies AS (
    SELECT 
        lm.movie_id,
        lm.title,
        lm.production_year,
        lm.keyword,
        lm.kind_type,
        CASE 
            WHEN lm.production_year IS NULL THEN 'Year unknown'
            WHEN lm.production_year < 1990 THEN 'Old movie'
            ELSE 'Modern movie'
        END AS era
    FROM 
        LatestMovie lm
    WHERE 
        lm.year_rank = 1
)
SELECT 
    f.movie_id,
    f.title,
    f.production_year,
    f.keyword,
    f.kind_type,
    f.era,
    rc.actor_name,
    rc.actor_count,
    (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = f.movie_id) AS additional_info_count,
    (SELECT STRING_AGG(info, ', ') 
     FROM movie_info mi 
     WHERE mi.movie_id = f.movie_id 
     AND mi.info IS NOT NULL) AS aggregated_info
FROM 
    FilteredMovies f
LEFT JOIN 
    RecursiveCast rc ON f.movie_id = rc.movie_id
GROUP BY 
    f.movie_id, f.title, f.production_year, f.keyword, f.kind_type, f.era, rc.actor_name, rc.actor_order, rc.actor_count
ORDER BY 
    f.production_year DESC, 
    rc.actor_order;
