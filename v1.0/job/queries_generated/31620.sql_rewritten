WITH RECURSIVE movie_hierarchy AS (
    SELECT m.id AS movie_id, m.title, m.production_year, 0 AS level
    FROM aka_title m
    WHERE m.production_year >= 2000  

    UNION ALL

    SELECT m.id AS movie_id, m.title, m.production_year, mh.level + 1
    FROM movie_link ml
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN aka_title m ON ml.linked_movie_id = m.id
    WHERE mh.level < 3  
),
cast_details AS (
    SELECT c.movie_id, p.name AS actor_name, r.role AS role_name,
           ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS actor_order
    FROM cast_info c
    JOIN aka_name p ON c.person_id = p.person_id
    JOIN role_type r ON c.role_id = r.id
),
keyword_summary AS (
    SELECT mk.movie_id, STRING_AGG(k.keyword, ', ') AS keywords
    FROM movie_keyword mk
    JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY mk.movie_id
)
SELECT mh.title AS movie_title, mh.production_year, 
       cd.actor_name, cd.role_name, 
       ks.keywords,
       COUNT(DISTINCT cc.subject_id) OVER (PARTITION BY mh.movie_id) AS cast_count
FROM movie_hierarchy mh
LEFT JOIN cast_details cd ON mh.movie_id = cd.movie_id
LEFT JOIN keyword_summary ks ON mh.movie_id = ks.movie_id
LEFT JOIN complete_cast cc ON mh.movie_id = cc.movie_id
WHERE mh.production_year IS NOT NULL 
  AND (mh.title LIKE '%Adventure%' OR mh.title LIKE '%Action%')  
ORDER BY mh.production_year DESC, cd.actor_order
LIMIT 100;