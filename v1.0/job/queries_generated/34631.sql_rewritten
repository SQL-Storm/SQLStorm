WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    a.id AS actor_id,
    a.name AS actor_name,
    COUNT(DISTINCT c.movie_id) AS movie_count,
    AVG(extract(year from cast('2024-10-01 12:34:56' as timestamp)) - mh.production_year) AS avg_age,
    STRING_AGG(DISTINCT at.title, ', ') AS movies_title_list,
    MAX(CASE WHEN ci.note IS NOT NULL THEN 'Has Notes' ELSE 'No Notes' END) AS notes_flag,
    SUM(CASE WHEN ci.role_id IS NULL THEN 1 ELSE 0 END) AS undefined_roles
FROM 
    aka_name a
LEFT JOIN 
    cast_info ci ON a.person_id = ci.person_id
LEFT JOIN 
    complete_cast cc ON ci.movie_id = cc.movie_id
JOIN 
    movie_info mi ON cc.movie_id = mi.movie_id
JOIN 
    MovieHierarchy mh ON mh.movie_id = cc.movie_id
JOIN 
    aka_title at ON at.id = cc.movie_id
WHERE 
    a.name IS NOT NULL
    AND (a.name ILIKE '%john%' OR a.name ILIKE '%doe%')
    AND mh.level <= 2
GROUP BY 
    a.id, a.name
ORDER BY 
    movie_count DESC, avg_age ASC
LIMIT 100;