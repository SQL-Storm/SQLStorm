
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        level + 1
    FROM 
        movie_link ml
    INNER JOIN 
        title m ON ml.movie_id = m.imdb_id
    INNER JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
)

SELECT 
    mh.title,
    mh.production_year,
    STRING_AGG(DISTINCT ak.name, ', ') AS actor_names,
    COALESCE(SUM(CASE WHEN mci.note IS NOT NULL THEN 1 ELSE 0 END), 0) AS have_note_count,
    COUNT(DISTINCT kw.keyword) AS keyword_count,
    COUNT(DISTINCT mc.company_id) AS production_company_count,
    DENSE_RANK() OVER (PARTITION BY mh.production_year ORDER BY COUNT(DISTINCT kw.keyword) DESC) AS keyword_rank
FROM 
    movie_hierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    info_type it ON mc.note IS NOT NULL AND mc.note = it.info
WHERE 
    mh.level = 0
GROUP BY 
    mh.title, mh.production_year, mh.kind_id
HAVING 
    COUNT(DISTINCT ak.name) > 5 AND
    mh.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('feature', 'short'))
ORDER BY 
    mh.production_year DESC, keyword_count DESC;
