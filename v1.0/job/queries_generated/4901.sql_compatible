
WITH detailed_movies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ARRAY_AGG(DISTINCT CONCAT(a.name, ' as ', r.role)) AS cast_list,
        SUM(CASE WHEN mci.note IS NOT NULL THEN 1 ELSE 0 END) AS has_company_info,
        COUNT(mk.keyword) AS total_keywords
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info ci ON t.id = ci.movie_id
    LEFT JOIN 
        role_type r ON ci.role_id = r.id
    LEFT JOIN 
        aka_name a ON ci.person_id = a.person_id
    LEFT JOIN 
        movie_companies mci ON t.id = mci.movie_id
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    WHERE 
        t.production_year IS NOT NULL
    GROUP BY 
        t.id, t.title, t.production_year
),
ranked_movies AS (
    SELECT 
        dm.movie_id,
        dm.title,
        dm.production_year,
        dm.cast_list,
        dm.has_company_info,
        dm.total_keywords,
        RANK() OVER (PARTITION BY dm.production_year ORDER BY dm.total_keywords DESC) AS keyword_rank
    FROM 
        detailed_movies dm
)
SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    rm.cast_list,
    rm.has_company_info,
    rm.total_keywords,
    CASE 
        WHEN rm.has_company_info > 0 THEN 'Yes'
        ELSE 'No'
    END AS has_company_info_text,
    COALESCE((SELECT STRING_AGG(DISTINCT cn.name, ', ') 
               FROM company_name cn 
               JOIN movie_companies mc ON cn.id = mc.company_id 
               WHERE mc.movie_id = rm.movie_id), 'Not Available') AS companies_involved,
    CASE 
        WHEN rm.keyword_rank <= 5 THEN 'Top 5'
        ELSE 'Below Top 5'
    END AS keyword_performance
FROM 
    ranked_movies rm
WHERE 
    rm.keyword_rank IS NOT NULL
ORDER BY 
    rm.production_year DESC, 
    rm.total_keywords DESC;
