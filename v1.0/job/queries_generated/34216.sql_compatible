
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title,
        mt.production_year,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
CastWithRoles AS (
    SELECT 
        ci.movie_id,
        ci.person_id,
        p.name AS person_name,
        r.role AS role_name,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_order
    FROM 
        cast_info ci
    JOIN 
        aka_name p ON ci.person_id = p.person_id
    JOIN 
        role_type r ON ci.role_id = r.id
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(mk.keywords, 'No Keywords') AS keywords,
    STRING_AGG(DISTINCT CONCAT(cwr.person_name, ' - ', cwr.role_name), '; ' ORDER BY cwr.role_order) AS cast_and_roles,
    COUNT(DISTINCT cwr.person_id) AS num_cast_members,
    CASE 
        WHEN mh.depth > 0 THEN 'Linked Movie'
        ELSE 'Main Movie'
    END AS movie_type
FROM 
    MovieHierarchy mh
LEFT JOIN 
    MovieKeywords mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    CastWithRoles cwr ON mh.movie_id = cwr.movie_id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.depth, mk.keywords
ORDER BY 
    mh.production_year DESC, mh.title;
