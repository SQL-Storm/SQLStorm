
WITH ranked_movies AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(*) OVER (PARTITION BY t.production_year) AS movie_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY tm.num_cast DESC) AS rank_per_year
    FROM 
        aka_title AS t
    LEFT JOIN (
        SELECT 
            movie_id, 
            COUNT(*) AS num_cast 
        FROM 
            cast_info 
        GROUP BY 
            movie_id
    ) AS tm ON t.id = tm.movie_id
), 
detailed_cast AS (
    SELECT 
        ai.id AS cast_id,
        ai.person_id,
        ai.movie_id,
        p.name AS person_name,
        COALESCE(
            (SELECT role.role FROM role_type AS role WHERE role.id = ai.role_id),
            'Unknown'
        ) AS role_description,
        COALESCE(p.gender, 'U') AS gender
    FROM 
        cast_info AS ai
    JOIN 
        aka_name AS p ON ai.person_id = p.person_id
),
movie_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword AS mk
    JOIN 
        keyword AS k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    rm.title,
    rm.production_year,
    rm.movie_count,
    dc.person_name,
    dc.role_description,
    dc.gender,
    COALESCE(mk.keywords, 'No keywords') AS movie_keywords,
    (CASE 
        WHEN rm.movie_count > 10 THEN 'Blockbuster' 
        WHEN rm.movie_count BETWEEN 5 AND 10 THEN 'Moderate Hit' 
        ELSE 'Indie Flick' 
     END) AS movie_category
FROM 
    ranked_movies AS rm
JOIN 
    detailed_cast AS dc ON dc.movie_id IN (
        SELECT id FROM aka_title WHERE production_year = rm.production_year
    )
LEFT JOIN 
    movie_keywords AS mk ON mk.movie_id = rm.id
WHERE 
    rm.rank_per_year <= 5 
ORDER BY 
    rm.production_year DESC, 
    rm.movie_count DESC, 
    dc.gender DESC;
