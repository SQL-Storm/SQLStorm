WITH RECURSIVE actor_hierarchy AS (
    SELECT 
        c.person_id, 
        a.name AS actor_name, 
        1 AS depth
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        c.movie_id IN (SELECT id FROM aka_title WHERE kind_id = 1) 

    UNION ALL
    
    SELECT 
        c.person_id, 
        a.name AS actor_name, 
        ah.depth + 1
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    JOIN 
        actor_hierarchy ah ON c.movie_id IN (SELECT movie_id FROM cast_info WHERE person_id = ah.person_id)
    WHERE 
        ah.depth < 5  
),

movie_details AS (
    SELECT 
        m.title AS movie_title, 
        m.production_year, 
        COUNT(DISTINCT c.person_id) AS actor_count,
        STRING_AGG(DISTINCT a.name, ', ') AS actor_names
    FROM 
        aka_title m
    LEFT JOIN 
        cast_info c ON m.id = c.movie_id
    LEFT JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        m.production_year >= 2000 
    GROUP BY 
        m.id
),

keyword_summary AS (
    SELECT 
        m.movie_id, 
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk 
    JOIN 
        keyword k ON mk.keyword_id = k.id 
    JOIN 
        aka_title m ON mk.movie_id = m.id
    GROUP BY 
        m.movie_id
),

final_results AS (
    SELECT 
        md.movie_title,
        md.production_year,
        md.actor_count,
        md.actor_names,
        kw.keywords
    FROM 
        movie_details md
    LEFT JOIN 
        keyword_summary kw ON md.movie_count = kw.movie_id
)

SELECT 
    fr.movie_title,
    fr.production_year,
    fr.actor_count,
    fr.actor_names,
    COALESCE(fr.keywords, 'No keywords available') AS keywords,
    ROW_NUMBER() OVER (PARTITION BY fr.production_year ORDER BY fr.actor_count DESC) AS rank
FROM 
    final_results fr
WHERE 
    fr.actor_count > 0
ORDER BY 
    fr.production_year DESC, 
    fr.actor_count DESC;