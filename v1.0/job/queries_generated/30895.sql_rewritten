WITH RECURSIVE movie_hierarchy AS (
    
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        NULL::text AS parent_movie_title,
        0 AS depth
    FROM 
        title t
    WHERE 
        t.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        title_t.title,
        title_t.production_year,
        title_t.kind_id,
        mh.title AS parent_movie_title,
        mh.depth + 1 AS depth
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        title title_t ON ml.linked_movie_id = title_t.id
)

SELECT 
    ak.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT kw.keyword) AS keyword_count,
    AVG(CASE WHEN mi.info_type_id = (SELECT id FROM info_type WHERE info = 'duration') THEN CAST(mi.info AS INTEGER) ELSE NULL END) AS average_duration,
    ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY COALESCE(NULLIF(t.production_year, 0), 9999)) AS row_rank
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_info mi ON t.id = mi.movie_id
LEFT JOIN 
    movie_hierarchy mh ON mh.movie_id = t.id
GROUP BY 
    ak.name, t.title, t.production_year
HAVING 
    COUNT(DISTINCT kw.keyword) > 2 AND t.production_year >= 2000
ORDER BY 
    average_duration DESC NULLS LAST, 
    row_rank;