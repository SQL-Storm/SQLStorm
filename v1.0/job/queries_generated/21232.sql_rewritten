WITH RECURSIVE RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
MovieWithKeywords AS (
    SELECT 
        m.movie_id, 
        m.title, 
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        RankedMovies m
    LEFT JOIN 
        movie_keyword mk ON m.movie_id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        m.movie_id, m.title
),
MovieCompanyInfo AS (
    SELECT 
        mc.movie_id, 
        c.name AS company_name, 
        ct.kind AS company_type,
        COALESCE(mi.info, 'No Info Available') AS additional_info
    FROM 
        movie_companies mc
    JOIN 
        company_name c ON mc.company_id = c.id
    JOIN 
        company_type ct ON mc.company_type_id = ct.id
    LEFT JOIN 
        movie_info mi ON mc.movie_id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Plot')
)
SELECT 
    mwk.movie_id,
    mwk.title,
    mwk.production_year,
    mwk.keywords,
    mci.company_name,
    mci.company_type,
    mci.additional_info,
    COUNT(DISTINCT ci.person_id) AS actor_count,
    SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS note_count,
    AVG(COALESCE(t.season_nr, 0)) AS average_seasons 
FROM 
    MovieWithKeywords mwk
LEFT JOIN 
    complete_cast cc ON mwk.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON cc.subject_id = ci.person_id
LEFT JOIN 
    MovieCompanyInfo mci ON mwk.movie_id = mci.movie_id
WHERE 
    mwk.keywords LIKE '%suspense%' OR mwk.keywords IS NULL  
GROUP BY 
    mwk.movie_id, mwk.title, mwk.production_year, mci.company_name, mci.company_type, mci.additional_info
ORDER BY 
    mwk.production_year DESC, mwk.title ASC
LIMIT 1000;