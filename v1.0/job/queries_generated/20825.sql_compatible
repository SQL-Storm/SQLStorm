
WITH MovieDetails AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        t.kind_id,
        COUNT(DISTINCT ci.person_id) AS cast_count,
        AVG(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS has_notes_ratio
    FROM 
        aka_title t
    LEFT JOIN 
        complete_cast cc ON t.id = cc.movie_id
    LEFT JOIN 
        cast_info ci ON cc.subject_id = ci.id
    INNER JOIN 
        kind_type kt ON t.kind_id = kt.id
    GROUP BY 
        t.id, t.title, t.production_year, t.kind_id
),
PersonDetails AS (
    SELECT 
        a.person_id,
        a.name,
        COALESCE(pi.info, 'No Info Available') AS person_info,
        COUNT(DISTINCT ci.movie_id) AS movies_appeared
    FROM 
        aka_name a
    LEFT JOIN 
        person_info pi ON a.person_id = pi.person_id
    LEFT JOIN 
        cast_info ci ON a.person_id = ci.person_id
    GROUP BY 
        a.person_id, a.name, pi.info
),
FilteredMovies AS (
    SELECT 
        md.title_id,
        md.title,
        md.production_year,
        md.cast_count,
        md.has_notes_ratio
    FROM 
        MovieDetails md
    WHERE 
        md.production_year BETWEEN 1980 AND 2020
        AND md.cast_count > 3
        AND EXISTS (
            SELECT 1 
            FROM movie_info mi 
            WHERE mi.movie_id = md.title_id
            AND mi.info_type_id IN (
                SELECT id FROM info_type WHERE info = 'Genre'
            )
        )
)
SELECT 
    fm.title,
    fm.production_year,
    pm.name AS actor_name,
    pm.movies_appeared,
    fm.cast_count,
    fm.has_notes_ratio,
    COALESCE(ROW_NUMBER() OVER (PARTITION BY fm.title ORDER BY pm.movies_appeared DESC), 0) AS rank_position,
    CASE 
        WHEN fm.has_notes_ratio > 0.5 THEN 'Notable Cast'
        ELSE 'Minor Cast'
    END AS cast_category
FROM 
    FilteredMovies fm
JOIN 
    PersonDetails pm ON pm.movies_appeared > 2
ORDER BY 
    fm.production_year DESC, 
    fm.title, 
    pm.movies_appeared DESC;
