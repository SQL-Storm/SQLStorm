
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year, 
        1 AS level 
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL
    
    UNION ALL
    
    SELECT 
        e.id AS movie_id, 
        e.title, 
        e.production_year, 
        mh.level + 1 
    FROM 
        aka_title e 
    JOIN 
        movie_hierarchy mh ON e.episode_of_id = mh.movie_id
), 

cast_details AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        r.role AS role_title,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ak.name) AS actor_order
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    JOIN 
        role_type r ON ci.role_id = r.id
), 

movie_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    cd.actor_name,
    cd.role_title,
    mk.keywords,
    COALESCE(ci.note, 'No notes') AS cast_note,
    COUNT(cd.actor_name) OVER (PARTITION BY mh.movie_id) AS total_actors,
    CASE 
        WHEN mh.production_year > 2000 THEN 'Modern' 
        WHEN mh.production_year BETWEEN 1980 AND 2000 THEN 'Classic' 
        ELSE 'Old School' 
    END AS era
FROM 
    movie_hierarchy mh
LEFT JOIN 
    cast_details cd ON mh.movie_id = cd.movie_id
LEFT JOIN 
    movie_keywords mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    complete_cast ci ON mh.movie_id = ci.movie_id
WHERE 
    mh.production_year IS NOT NULL
    AND cd.actor_order <= 3  
GROUP BY 
    mh.movie_id,
    mh.title,
    mh.production_year,
    cd.actor_name,
    cd.role_title,
    mk.keywords,
    ci.note
ORDER BY 
    mh.production_year DESC, 
    mh.title;
