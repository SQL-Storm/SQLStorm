
WITH ranked_movies AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title,
        mt.production_year,
        RANK() OVER (PARTITION BY mt.production_year ORDER BY mt.title) AS title_rank
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
        AND mt.title IS NOT NULL
),
movie_cast AS (
    SELECT 
        ci.movie_id,
        STRING_AGG(CONCAT(an.name, ' as ', rt.role), ', ') AS cast_list,
        COUNT(*) AS cast_count
    FROM 
        cast_info ci
    JOIN 
        aka_name an ON ci.person_id = an.person_id
    JOIN 
        role_type rt ON ci.role_id = rt.id
    GROUP BY 
        ci.movie_id
),
movie_info_details AS (
    SELECT 
        mi.movie_id,
        STRING_AGG(mi.info, ', ') AS info_text
    FROM 
        movie_info mi
    JOIN 
        info_type it ON mi.info_type_id = it.id
    WHERE 
        it.info NOT LIKE '%inactive%'
    GROUP BY 
        mi.movie_id
)
SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    COALESCE(mc.cast_list, '{}') AS cast,
    COALESCE(minfo.info_text, 'No additional information available') AS additional_info,
    CASE 
        WHEN mc.cast_count IS NULL THEN 'No cast information'
        WHEN mc.cast_count < 3 THEN 'Limited cast'
        ELSE 'Full cast available'
    END AS cast_availability,
    COUNT(DISTINCT mk.keyword) AS keyword_count
FROM 
    ranked_movies rm
LEFT JOIN 
    movie_cast mc ON rm.movie_id = mc.movie_id
LEFT JOIN 
    movie_keyword mk ON rm.movie_id = mk.movie_id
LEFT JOIN 
    movie_info_details minfo ON rm.movie_id = minfo.movie_id
WHERE 
    (rm.production_year BETWEEN 2000 AND 2020 OR rm.production_year IS NULL)
    AND (LOWER(rm.title) LIKE '%action%' OR rm.title IS NULL)
GROUP BY 
    rm.movie_id, rm.title, rm.production_year, mc.cast_list, minfo.info_text
HAVING 
    COUNT(DISTINCT mk.keyword) > 0
ORDER BY 
    rm.production_year DESC, rm.title;
