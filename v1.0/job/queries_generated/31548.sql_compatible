
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        aka_title m
    JOIN 
        movie_link ml ON m.id = ml.linked_movie_id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT
    mh.movie_id,
    mh.title,
    mh.production_year,
    COUNT(DISTINCT c.person_id) AS cast_count,
    AVG(CASE WHEN pi.info_type_id = (SELECT id FROM info_type WHERE info = 'rating') 
             THEN CAST(pi.info AS FLOAT) ELSE NULL END) AS avg_rating,
    STRING_AGG(DISTINCT co.name, ', ') AS production_companies,
    STRING_AGG(DISTINCT ak.name, ', ') AS akas,
    CASE
        WHEN COUNT(DISTINCT c.person_id) > 10 THEN 'Large Cast'
        WHEN COUNT(DISTINCT c.person_id) BETWEEN 5 AND 10 THEN 'Medium Cast'
        ELSE 'Small Cast'
    END AS cast_size
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info c ON cc.subject_id = c.id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    company_name co ON mc.company_id = co.id
LEFT JOIN 
    aka_name ak ON mh.movie_id = ak.movie_id
LEFT JOIN 
    movie_info pi ON mh.movie_id = pi.movie_id
WHERE 
    mh.production_year IS NOT NULL
GROUP BY 
    mh.movie_id, mh.title, mh.production_year
ORDER BY 
    avg_rating DESC
LIMIT 100;
