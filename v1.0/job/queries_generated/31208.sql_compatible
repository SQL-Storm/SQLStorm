
WITH RECURSIVE MovieHierarchy AS (
    SELECT mt.id AS movie_id, mt.title, mt.production_year, 1 AS level
    FROM aka_title mt
    WHERE mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    UNION ALL
    SELECT mt.id, mt.title, mt.production_year, mh.level + 1
    FROM aka_title mt
    JOIN movie_link ml ON ml.linked_movie_id = mt.id
    JOIN MovieHierarchy mh ON mh.movie_id = ml.movie_id
),
ActorStats AS (
    SELECT 
        ak.person_id AS actor_id, 
        ak.name AS actor_name,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        AVG(mi.production_year) AS average_production_year
    FROM aka_name ak
    JOIN cast_info ci ON ak.person_id = ci.person_id
    JOIN aka_title mi ON ci.movie_id = mi.id
    GROUP BY ak.person_id, ak.name
),
PopularKeywords AS (
    SELECT 
        mk.keyword AS popular_keyword,
        COUNT(DISTINCT mk.movie_id) AS keyword_count
    FROM movie_keyword mk
    GROUP BY mk.keyword
    HAVING COUNT(DISTINCT mk.movie_id) > 5
),
MovieDetails AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        ks.popular_keyword,
        COALESCE(ast.actor_name, 'No Actors') AS lead_actor,
        ast.movie_count,
        ast.average_production_year,
        ROW_NUMBER() OVER (PARTITION BY mh.movie_id ORDER BY mh.production_year DESC) AS actor_rank
    FROM MovieHierarchy mh
    LEFT JOIN ActorStats ast ON mh.movie_id = ast.movie_id
    LEFT JOIN PopularKeywords ks ON mh.movie_id = (SELECT mk.movie_id FROM movie_keyword mk WHERE mk.keyword = ks.popular_keyword LIMIT 1)
)
SELECT 
    md.movie_id,
    md.title,
    md.production_year,
    md.popular_keyword,
    md.lead_actor,
    md.movie_count,
    md.average_production_year
FROM MovieDetails md
WHERE md.movie_count > 1
ORDER BY md.production_year DESC, md.movie_id ASC;
