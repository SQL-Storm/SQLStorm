
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        CAST(0 AS INTEGER) AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        mc.linked_movie_id,
        m.title,
        m.production_year,
        mh.depth + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link mc ON mh.movie_id = mc.movie_id
    JOIN 
        aka_title m ON mc.linked_movie_id = m.id
)
SELECT 
    au.name,
    COUNT(DISTINCT ch.movie_id) AS distinct_movies,
    MAX(mh.production_year) AS latest_production_year,
    AVG(mh.depth) AS avg_movie_depth,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    CASE 
        WHEN u.info IS NULL THEN 'No Info'
        ELSE u.info
    END AS personal_info,
    ROW_NUMBER() OVER (PARTITION BY au.id ORDER BY COUNT(DISTINCT ch.movie_id) DESC) AS rank
FROM 
    aka_name au
LEFT JOIN 
    cast_info ch ON au.person_id = ch.person_id
LEFT JOIN 
    MovieHierarchy mh ON ch.movie_id = mh.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    person_info u ON au.person_id = u.person_id AND u.info_type_id = (SELECT id FROM info_type WHERE info = 'Biography')
GROUP BY 
    au.id, au.name, u.info
ORDER BY 
    distinct_movies DESC, latest_production_year DESC
LIMIT 10;
