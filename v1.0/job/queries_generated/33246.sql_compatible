
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL 
        AND mt.kind_id = (
            SELECT id FROM kind_type WHERE kind = 'movie'
        )
    
    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    a.name AS actor_name,
    th.title AS movie_title,
    th.production_year,
    COUNT(DISTINCT cc.person_role_id) AS role_count,
    SUM(CASE 
            WHEN cc.note IS NOT NULL THEN 1 
            ELSE 0 
        END) AS notes_count,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    ROW_NUMBER() OVER(PARTITION BY a.id ORDER BY th.production_year) AS role_rank
FROM 
    aka_name a
JOIN 
    cast_info cc ON a.person_id = cc.person_id
JOIN 
    movie_hierarchy mh ON cc.movie_id = mh.movie_id
JOIN 
    aka_title th ON mh.movie_id = th.id
LEFT JOIN 
    movie_keyword mk ON th.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
WHERE 
    th.production_year BETWEEN 2000 AND 2023
    AND a.name IS NOT NULL
GROUP BY 
    a.id, th.title, th.production_year
HAVING 
    COUNT(DISTINCT cc.person_role_id) > 0
ORDER BY 
    role_count DESC,
    actor_name;
