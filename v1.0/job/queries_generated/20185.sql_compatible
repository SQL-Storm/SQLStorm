
WITH RankedTitles AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY RANDOM()) AS random_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
), 
MovieActors AS (
    SELECT 
        c.movie_id,
        a.id AS actor_id,
        a.name,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY a.name) AS actor_order
    FROM 
        cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
), 
CompanyDetails AS (
    SELECT 
        mc.movie_id,
        c.name AS company_name,
        ct.kind AS company_type,
        ROW_NUMBER() OVER (PARTITION BY mc.movie_id ORDER BY ct.kind) AS company_order
    FROM 
        movie_companies mc
    JOIN company_name c ON mc.company_id = c.id
    JOIN company_type ct ON mc.company_type_id = ct.id
    WHERE 
        c.country_code IS NOT NULL AND c.name IS NOT NULL
), 
MovieInfo AS (
    SELECT 
        mi.movie_id,
        ARRAY_AGG(DISTINCT mi.info ORDER BY mi.info_type_id) AS movie_info,
        COUNT(*) FILTER (WHERE mi.info_type_id IS NOT NULL) AS info_count
    FROM 
        movie_info mi
    GROUP BY 
        mi.movie_id
)
SELECT 
    rt.production_year,
    rt.title,
    ma.name AS actor_name,
    cd.company_name,
    mi.movie_info,
    COALESCE(mi.info_count, 0) AS info_count,
    CASE 
        WHEN mi.info_count IS NULL OR mi.info_count = 0 THEN 'No Info Available'
        ELSE 'Info Available'
    END AS info_status,
    ROW_NUMBER() OVER (ORDER BY rt.random_rank) AS overall_rank
FROM 
    RankedTitles rt
LEFT JOIN 
    MovieActors ma ON rt.title_id = ma.movie_id
LEFT JOIN 
    CompanyDetails cd ON rt.title_id = cd.movie_id
LEFT JOIN 
    MovieInfo mi ON rt.title_id = mi.movie_id
WHERE 
    (cd.company_type = 'Distributor' OR cd.company_type IS NULL) 
    AND rt.production_year BETWEEN 2000 AND 2023
ORDER BY 
    rt.production_year DESC, 
    rt.title, 
    ma.actor_order;
