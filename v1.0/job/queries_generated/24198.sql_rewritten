WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS title_rank,
        COUNT(DISTINCT k.keyword) OVER (PARTITION BY t.id) AS keyword_count
    FROM 
        aka_title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    WHERE 
        t.production_year IS NOT NULL
),
CorrelatedActors AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS actor_count,
        AVG(a.person_role_id IS NOT NULL::int) AS has_roles
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        a.name LIKE 'A%' 
    GROUP BY 
        c.movie_id
),
FilteredMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        COALESCE(c.actor_count, 0) AS actor_count,
        rm.keyword_count
    FROM 
        RankedMovies rm
    LEFT JOIN 
        CorrelatedActors c ON rm.movie_id = c.movie_id
    WHERE 
        rm.title_rank <= 5 
),
FinalResults AS (
    SELECT 
        fm.movie_id,
        fm.title,
        fm.production_year,
        fm.actor_count,
        fm.keyword_count,
        CASE 
            WHEN fm.keyword_count > 5 THEN 'High'
            WHEN fm.actor_count = 0 THEN 'No Actors'
            ELSE 'Normal'
        END AS movie_type
    FROM 
        FilteredMovies fm
    WHERE 
        fm.actor_count IS NOT NULL
)
SELECT
    fr.*,
    CASE 
        WHEN movie_type = 'High' THEN 'This movie has high engagement!'
        WHEN movie_type = 'No Actors' THEN 'An unusual movie with no actors listed.'
        ELSE 'A typical movie.'
    END AS movie_engagement_comment
FROM 
    FinalResults fr
ORDER BY 
    fr.production_year DESC, 
    fr.title ASC
LIMIT 100;