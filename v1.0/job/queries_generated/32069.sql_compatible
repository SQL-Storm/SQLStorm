
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        CAST(NULL AS integer) AS parent_id,
        0 AS level
    FROM title m
    WHERE m.production_year > 2000

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.movie_id AS parent_id,
        mh.level + 1
    FROM title m
    JOIN movie_link ml ON ml.linked_movie_id = m.id
    JOIN MovieHierarchy mh ON mh.movie_id = ml.movie_id
)
SELECT 
    mh.title AS movie_title,
    mh.production_year,
    COALESCE(p.name, 'Unknown Actor') AS actor_name,
    COALESCE(c.kind, 'Unknown Role') AS role,
    COUNT(DISTINCT kc.keyword) AS keyword_count,
    AVG(mi.info) AS average_rating,
    SUM(CASE WHEN mi.info_type_id = 1 THEN 1 ELSE 0 END) AS total_information,
    ROW_NUMBER() OVER(PARTITION BY mh.movie_id ORDER BY mi.info_type_id) AS info_rank
FROM MovieHierarchy mh
LEFT JOIN cast_info ci ON ci.movie_id = mh.movie_id
LEFT JOIN aka_name p ON p.person_id = ci.person_id
LEFT JOIN role_type c ON c.id = ci.role_id
LEFT JOIN movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN keyword kc ON kc.id = mk.keyword_id
LEFT JOIN movie_info mi ON mi.movie_id = mh.movie_id
WHERE mh.level < 2
GROUP BY mh.movie_id, mh.title, mh.production_year, p.name, c.kind
HAVING AVG(mi.info) > 5
ORDER BY mh.production_year DESC, keyword_count DESC;
