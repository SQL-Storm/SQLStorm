WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        title.id AS movie_id,
        title.title,
        title.production_year,
        title.kind_id,
        1 AS level
    FROM 
        title
    WHERE 
        production_year >= 2000  

    UNION ALL

    SELECT 
        title.id,
        title.title,
        title.production_year,
        title.kind_id,
        mh.level + 1
    FROM 
        title
    INNER JOIN movie_link ml ON ml.linked_movie_id = title.id
    INNER JOIN MovieHierarchy mh ON mh.movie_id = ml.movie_id
    WHERE 
        mh.level < 3  
),

KeywordMovie AS (
    SELECT 
        mt.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mt
    JOIN 
        keyword k ON k.id = mt.keyword_id
    GROUP BY 
        mt.movie_id
),

MovieDetails AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COALESCE(km.keywords, 'No Keywords') AS keywords,
        ROW_NUMBER() OVER (PARTITION BY mh.kind_id ORDER BY mh.production_year DESC) AS rank
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        KeywordMovie km ON mh.movie_id = km.movie_id
)

SELECT 
    md.movie_id,
    md.title,
    md.production_year,
    md.keywords,
    CASE 
        WHEN md.rank <= 3 THEN 'Top 3 in category'
        ELSE 'Lower rank'
    END AS category_ranking
FROM 
    MovieDetails md
WHERE 
    md.production_year BETWEEN 2010 AND 2023
ORDER BY 
    md.kind_id, md.production_year DESC;