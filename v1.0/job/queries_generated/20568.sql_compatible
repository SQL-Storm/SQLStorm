
WITH RECURSIVE top_movies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        COUNT(c.id) AS cast_count,
        AVG(mv.production_year) AS avg_production_year,
        ROW_NUMBER() OVER (PARTITION BY mv.production_year ORDER BY COUNT(c.id) DESC) AS rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.movie_id = c.movie_id
    LEFT JOIN 
        title mv ON t.movie_id = mv.id
    WHERE 
        t.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE 'short%')
        AND mv.production_year IS NOT NULL
    GROUP BY 
        t.id, t.title
),
relevant_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS all_keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),
top_movies_with_keywords AS (
    SELECT 
        tm.movie_id,
        tm.title,
        tm.cast_count,
        tm.avg_production_year,
        rk.all_keywords
    FROM 
        top_movies tm
    LEFT JOIN 
        relevant_keywords rk ON tm.movie_id = rk.movie_id
    WHERE 
        tm.rank <= 5
)
SELECT 
    tm.title,
    tm.cast_count,
    COALESCE(tm.avg_production_year, 0) AS avg_prod_year,
    COALESCE(tm.all_keywords, 'No Keywords') AS keywords
FROM 
    top_movies_with_keywords tm
LEFT JOIN 
    aka_name a ON a.person_id = (
        SELECT person_id 
        FROM cast_info c 
        WHERE c.movie_id = tm.movie_id 
        ORDER BY c.nr_order 
        LIMIT 1
    )
WHERE 
    EXISTS (
        SELECT 1 FROM movie_companies mc 
        WHERE mc.movie_id = tm.movie_id 
        AND mc.note IS NOT NULL
    ) 
ORDER BY 
    tm.cast_count DESC, 
    avg_prod_year;
