
WITH ranked_movies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
qualified_cast AS (
    SELECT 
        c.movie_id,
        ak.name AS actor_name,
        COUNT(DISTINCT c.person_id) AS person_count,
        AVG(CASE WHEN c.note IS NOT NULL THEN 1 ELSE 0 END) AS note_presence_ratio
    FROM 
        cast_info c
    JOIN 
        aka_name ak ON c.person_id = ak.person_id
    GROUP BY 
        c.movie_id, ak.name
    HAVING 
        COUNT(DISTINCT c.person_id) > 1
),
movie_details AS (
    SELECT 
        m.movie_id,
        m.title,
        COALESCE(AVG(mi.info), 'No Info') AS average_info,
        COALESCE(string_agg(DISTINCT k.keyword, ', '), 'No Keywords') AS keywords,
        COALESCE(mn.name, 'Unknown') AS main_actor
    FROM 
        ranked_movies m
    LEFT JOIN 
        movie_info mi ON m.movie_id = mi.movie_id
    LEFT JOIN 
        movie_keyword mk ON m.movie_id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    LEFT JOIN 
        qualified_cast qc ON m.movie_id = qc.movie_id
    LEFT JOIN 
        aka_name mn ON qc.actor_name = mn.name
    GROUP BY 
        m.movie_id, m.title, mn.name
),
final_summary AS (
    SELECT 
        md.movie_id,
        md.title,
        md.average_info,
        md.keywords,
        RANK() OVER (ORDER BY md.average_info) AS info_rank
    FROM 
        movie_details md
    WHERE 
        md.keywords IS NOT NULL
)
SELECT 
    f.movie_id,
    f.title,
    f.average_info,
    f.keywords,
    CASE 
        WHEN f.info_rank < 5 THEN 'Top 5'
        WHEN f.info_rank BETWEEN 5 AND 10 THEN 'Middle 5'
        ELSE 'Outside Top 10'
    END AS rank_category
FROM 
    final_summary f
WHERE 
    f.average_info <> 'No Info'
ORDER BY 
    f.info_rank;
