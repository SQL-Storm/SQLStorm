
WITH RECURSIVE movie_hierarchy AS (
    SELECT mt.id AS movie_id, mt.title, mt.production_year, 
           CASE 
               WHEN mt.episode_of_id IS NOT NULL THEN 1 
               ELSE 0 
           END AS is_episode,
           1 AS level
    FROM aka_title mt
    WHERE mt.production_year >= 2000
    
    UNION ALL
    
    SELECT m.id AS movie_id, m.title, m.production_year, 
           CASE 
               WHEN m.episode_of_id IS NOT NULL THEN 1 
               ELSE 0 
           END AS is_episode,
           mh.level + 1
    FROM aka_title m
    JOIN movie_hierarchy mh ON m.episode_of_id = mh.movie_id
)
SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT t.id) AS total_movies,
    SUM(CASE WHEN mh.is_episode = 1 THEN 1 ELSE 0 END) AS total_episodes,
    AVG(CASE WHEN mi.info_type_id = 1 THEN CAST(mi.info AS FLOAT) END) AS avg_rating,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    COALESCE(ct.kind, 'Unknown') AS company_type
FROM 
    aka_name a
JOIN 
    cast_info c ON a.person_id = c.person_id
JOIN 
    aka_title t ON c.movie_id = t.id
LEFT JOIN 
    movie_info mi ON t.id = mi.movie_id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_companies mc ON t.id = mc.movie_id
LEFT JOIN 
    company_type ct ON mc.company_type_id = ct.id
LEFT JOIN 
    movie_hierarchy mh ON t.id = mh.movie_id
GROUP BY 
    a.name, t.title, t.production_year, ct.kind
HAVING 
    COUNT(DISTINCT t.id) > 5
ORDER BY 
    t.production_year DESC, COUNT(DISTINCT t.id) DESC;
