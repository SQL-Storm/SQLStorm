
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        mh.movie_id,
        m.title,
        m.production_year,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
)
SELECT 
    ak.name AS actor_name,
    at.title AS movie_title,
    at.production_year,
    wc.rank AS role_rank,
    COUNT(DISTINCT mh.movie_id) AS total_movies,
    ARRAY_AGG(DISTINCT kw.keyword) AS keywords,
    AVG(CASE WHEN mi.info IS NOT NULL THEN 1 ELSE 0 END) AS average_info_count
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    aka_title at ON ci.movie_id = at.id
LEFT JOIN 
    MovieHierarchy mh ON at.id = mh.movie_id
JOIN 
    role_type rt ON ci.role_id = rt.id
LEFT JOIN 
    movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_info mi ON mi.movie_id = at.id
LEFT JOIN 
    (SELECT 
         movie_id, 
         DENSE_RANK() OVER (PARTITION BY movie_id ORDER BY nr_order ASC) AS rank
     FROM 
         cast_info) wc ON wc.movie_id = ci.movie_id
WHERE 
    ak.name IS NOT NULL AND ak.name <> ''
    AND mh.level <= 2
GROUP BY 
    ak.name, at.title, at.production_year, wc.rank
ORDER BY 
    total_movies DESC, average_info_count DESC
LIMIT 10;
