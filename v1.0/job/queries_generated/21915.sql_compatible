
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS total_cast,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank_by_cast
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
), MovieWithInfo AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        COALESCE(mii.info, 'No Info') AS additional_info,
        CASE 
            WHEN rm.production_year < 1990 THEN 'Classic'
            WHEN rm.production_year BETWEEN 1990 AND 2000 THEN '90s Hit'
            WHEN rm.production_year > 2000 THEN 'Modern Classic'
            ELSE 'Unknown Era'
        END AS era,
        rm.rank_by_cast
    FROM 
        RankedMovies rm
    LEFT JOIN 
        movie_info_idx mii ON rm.movie_id = mii.movie_id AND mii.info_type_id = (SELECT id FROM info_type WHERE info = 'Plot')
), TopMovies AS (
    SELECT 
        m.*,
        RANK() OVER (ORDER BY m.production_year DESC, m.total_cast DESC) AS overall_rank
    FROM 
        MovieWithInfo m
    WHERE 
        m.rank_by_cast <= 5
)
SELECT 
    tm.title,
    tm.production_year,
    tm.total_cast,
    tm.additional_info,
    tm.era,
    CASE 
        WHEN mkw.keyword IS NOT NULL THEN mkw.keyword 
        ELSE 'No Keywords' 
    END AS keywords
FROM 
    TopMovies tm
LEFT JOIN 
    movie_keyword mk ON tm.movie_id = mk.movie_id
LEFT JOIN 
    keyword mkw ON mk.keyword_id = mkw.id
WHERE 
    tm.production_year IS NOT NULL
    AND (tm.production_year > 2000 OR tm.production_year IS NULL)
ORDER BY 
    tm.overall_rank,
    tm.total_cast DESC;
