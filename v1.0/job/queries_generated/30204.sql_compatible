
WITH RECURSIVE movie_tree AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mt.linked_movie_id,
        1 AS level
    FROM 
        title m
    LEFT JOIN 
        movie_link mt ON m.id = mt.movie_id
    WHERE 
        m.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mt.linked_movie_id,
        level + 1
    FROM 
        title m
    JOIN 
        movie_link mt ON m.id = mt.movie_id
    JOIN 
        movie_tree mt2 ON mt.linked_movie_id = mt2.movie_id
)

SELECT 
    m.title AS Movie_Title,
    m.production_year AS Production_Year,
    COALESCE(a.name, 'Unknown Actor') AS Actor_Name,
    COUNT(DISTINCT ci.person_id) AS Total_Cast,
    COUNT(DISTINCT k.keyword) AS Keyword_Count,
    SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS Noted_Roles,
    ROW_NUMBER() OVER (PARTITION BY m.id ORDER BY m.production_year DESC) AS Movie_Rank
FROM 
    movie_tree mt
JOIN 
    aka_title m ON mt.movie_id = m.id 
LEFT JOIN 
    cast_info ci ON ci.movie_id = mt.movie_id
LEFT JOIN 
    aka_name a ON a.person_id = ci.person_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mt.movie_id
LEFT JOIN 
    keyword k ON k.id = mk.keyword_id
WHERE 
    (m.production_year BETWEEN 2000 AND 2020)
    AND (m.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie'))
GROUP BY 
    m.title, 
    m.production_year, 
    a.name,
    m.id
HAVING 
    COUNT(DISTINCT ci.id) > 3
ORDER BY 
    m.production_year ASC, 
    Total_Cast DESC;
