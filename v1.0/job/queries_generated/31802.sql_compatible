
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        1 AS depth
    FROM
        aka_title t
    WHERE
        t.production_year >= 2000

    UNION ALL

    SELECT
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.depth + 1
    FROM
        aka_title m
    INNER JOIN
        movie_link ml ON m.id = ml.linked_movie_id
    INNER JOIN
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
DirectorCounts AS (
    SELECT
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS director_count
    FROM
        cast_info c
    WHERE
        c.role_id IN (SELECT id FROM role_type WHERE role = 'director')
    GROUP BY
        c.movie_id
),
TitleKeywords AS (
    SELECT
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM
        movie_keyword mk
    JOIN
        keyword k ON mk.keyword_id = k.id
    GROUP BY
        mk.movie_id
),
MovieInfo AS (
    SELECT
        m.id AS movie_id,
        m.title,
        COALESCE(tc.director_count, 0) AS director_count,
        COALESCE(tk.keywords, 'No Keywords') AS keywords,
        mh.depth
    FROM
        aka_title m
    LEFT JOIN
        DirectorCounts tc ON m.id = tc.movie_id
    LEFT JOIN
        TitleKeywords tk ON m.id = tk.movie_id
    JOIN
        MovieHierarchy mh ON m.id = mh.movie_id
)
SELECT
    mi.movie_id,
    mi.title,
    mi.production_year,
    mi.director_count,
    mi.keywords,
    mi.depth,
    CASE 
        WHEN mi.director_count > 0 THEN 'Directed'
        ELSE 'Not Directed' 
    END AS director_status
FROM
    MovieInfo mi
JOIN
    aka_name an ON an.person_id IN (SELECT person_id FROM cast_info WHERE movie_id = mi.movie_id)
WHERE
    (mi.depth = 1 AND mi.director_count > 0)
    OR (mi.depth > 1 AND mi.director_count = 0)
ORDER BY
    mi.production_year DESC, mi.title;
