
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        ARRAY[mt.id] AS hierarchy
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        h.hierarchy || ml.linked_movie_id
    FROM 
        MovieHierarchy h
    JOIN 
        movie_link ml ON h.movie_id = ml.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    WHERE 
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT mc.company_id) AS company_count,
    ARRAY_AGG(DISTINCT k.keyword) FILTER (WHERE k.keyword IS NOT NULL) AS associated_keywords,
    ROW_NUMBER() OVER(PARTITION BY a.name ORDER BY t.production_year DESC) AS rank,
    COALESCE(mk.genre, 'N/A') AS genre
FROM 
    aka_name a
INNER JOIN 
    cast_info c ON a.person_id = c.person_id
INNER JOIN 
    MovieHierarchy mh ON c.movie_id = mh.movie_id
INNER JOIN 
    aka_title t ON mh.movie_id = t.id
LEFT JOIN 
    movie_companies mc ON t.id = mc.movie_id
LEFT JOIN 
    keyword k ON t.id = k.id
LEFT JOIN (
    SELECT 
        mk.movie_id,
        STRING_AGG(DISTINCT mkt.kind, ', ') AS genre
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    JOIN 
        kind_type mkt ON k.id = mkt.id
    GROUP BY 
        mk.movie_id
) mk ON t.id = mk.movie_id
GROUP BY 
    a.name, t.title, t.production_year, mk.genre
HAVING 
    COUNT(DISTINCT mc.company_id) > 0 AND 
    COUNT(DISTINCT k.keyword) > 2
ORDER BY 
    t.production_year DESC, rank;
