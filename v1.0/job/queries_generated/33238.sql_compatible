
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year BETWEEN 2000 AND 2020
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        mh.title,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.depth < 3
),
AggregatedData AS (
    SELECT 
        ka.name AS actor_name,
        COUNT(DISTINCT mc.movie_id) AS movie_count,
        ARRAY_AGG(DISTINCT mk.keyword) AS keywords,
        ROW_NUMBER() OVER (PARTITION BY ka.person_id ORDER BY COUNT(DISTINCT mc.movie_id) DESC) AS rank
    FROM 
        cast_info ci
    JOIN 
        aka_name ka ON ci.person_id = ka.person_id
    JOIN 
        complete_cast cc ON ci.movie_id = cc.movie_id
    JOIN 
        MovieHierarchy mh ON cc.movie_id = mh.movie_id
    LEFT JOIN 
        movie_keyword mk ON mh.movie_id = mk.movie_id
    LEFT JOIN 
        movie_info mi ON mh.movie_id = mi.movie_id 
    WHERE 
        mi.info IS NOT NULL AND 
        (mi.note IS NULL OR mi.note != 'deleted')
    GROUP BY 
        ka.name, ka.person_id
),
FilteredActors AS (
    SELECT 
        actor_name, 
        movie_count,
        keywords
    FROM 
        AggregatedData
    WHERE 
        movie_count >= 5
)
SELECT 
    fa.actor_name,
    fa.movie_count,
    (SELECT COUNT(DISTINCT ci2.movie_id) 
     FROM cast_info ci2 
     WHERE ci2.person_id IN (SELECT DISTINCT ka2.person_id 
                             FROM aka_name ka2 
                             WHERE ka2.name = fa.actor_name)) AS total_movies_with_actor,
    (SELECT STRING_AGG(DISTINCT k.keyword, ', ') 
     FROM movie_keyword k 
     JOIN movie_link ml ON k.movie_id = ml.movie_id 
     WHERE k.movie_id IN (SELECT mh.movie_id FROM MovieHierarchy mh 
                           WHERE mh.depth = 1)) AS related_keywords
FROM 
    FilteredActors fa
WHERE 
    fa.movie_count > 5
ORDER BY 
    fa.movie_count DESC;
