WITH RankedMovies AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS movie_rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
MovieDetails AS (
    SELECT 
        rm.title_id,
        rm.title,
        rm.production_year,
        r.role AS top_role,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        STRING_AGG(DISTINCT ak.name, ', ') AS actor_names
    FROM 
        RankedMovies rm
    LEFT JOIN 
        cast_info ci ON rm.title_id = ci.movie_id
    LEFT JOIN 
        role_type r ON ci.role_id = r.id
    LEFT JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    WHERE 
        rm.movie_rank <= 5  
    GROUP BY 
        rm.title_id, rm.title, rm.production_year, r.role
),
SelectedMovies AS (
    SELECT 
        md.title,
        md.production_year,
        md.top_role,
        md.actor_count,
        md.actor_names,
        COALESCE(mk.keyword, 'N/A') AS keywords,
        CASE 
            WHEN md.actor_count > 10 THEN 'Cross-over Hit'
            WHEN md.actor_count BETWEEN 5 AND 10 THEN 'Moderate Success'
            ELSE 'Cult Classic'
        END AS classification
    FROM 
        MovieDetails md
    LEFT JOIN 
        movie_keyword mk ON md.title_id = mk.movie_id
    WHERE 
        md.actor_count IS NOT NULL
)
SELECT 
    sm.title,
    sm.production_year,
    sm.top_role,
    sm.actor_count,
    sm.actor_names,
    sm.keywords,
    sm.classification
FROM 
    SelectedMovies sm
WHERE 
    sm.production_year BETWEEN 2000 AND 2020
ORDER BY 
    sm.production_year DESC, 
    sm.actor_count DESC;