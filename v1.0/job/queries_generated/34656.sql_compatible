
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1 AS level
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.linked_movie_id = mh.movie_id
    JOIN 
        aka_title m ON ml.movie_id = m.id
)
SELECT 
    ma.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COUNT(mk.keyword) AS keyword_count,
    AVG(CAST(mi.info AS FLOAT)) AS average_rating,
    ROW_NUMBER() OVER (PARTITION BY ma.name ORDER BY mt.production_year DESC) AS recent_movie_rank,
    COALESCE(STRING_AGG(DISTINCT mk.keyword, ', '), 'No keywords') AS keywords,
    CASE 
        WHEN COUNT(mk.keyword) > 0 THEN 'Has keywords' 
        ELSE 'No keywords' 
    END AS keyword_status
FROM 
    aka_name ma
JOIN 
    cast_info ci ON ma.person_id = ci.person_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN 
    movie_info mi ON mt.id = mi.movie_id AND mi.info_type_id = (
        SELECT 
            id FROM info_type WHERE info = 'rating'
    )
LEFT JOIN 
    movie_hierarchy mh ON mt.id = mh.movie_id
GROUP BY 
    ma.name, mt.title, mt.production_year
HAVING 
    COUNT(CASE WHEN mk.keyword IS NULL THEN 1 END) < 5
ORDER BY 
    recent_movie_rank;
