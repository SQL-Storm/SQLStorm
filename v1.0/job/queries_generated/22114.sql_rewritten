WITH RecursiveCast AS (
    SELECT c.movie_id, c.person_id, c.role_id, 1 AS depth
    FROM cast_info c
    WHERE c.role_id IS NOT NULL
    
    UNION ALL
    
    SELECT c.movie_id, c.person_id, c.role_id, r.depth + 1
    FROM cast_info c
    JOIN RecursiveCast r ON c.movie_id = r.movie_id AND c.person_id != r.person_id
    WHERE r.depth < 5
),
HighestRole AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS total_cast,
        MAX(r.depth) AS max_depth
    FROM RecursiveCast r
    JOIN cast_info c ON c.movie_id = r.movie_id
    GROUP BY c.movie_id
),
FilteredMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        COALESCE(h.total_cast, 0) AS total_cast,
        COALESCE(h.max_depth, 0) AS max_depth
    FROM aka_title t
    LEFT JOIN HighestRole h ON t.id = h.movie_id
    WHERE t.production_year > 2000 
    AND (t.kind_id IS NOT NULL OR t.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE 'Drama%'))
),
RankedTitles AS (
    SELECT
        f.movie_id,
        f.title,
        f.total_cast,
        f.production_year,
        RANK() OVER (PARTITION BY f.production_year ORDER BY f.total_cast DESC) AS rank_by_cast
    FROM FilteredMovies f
)
SELECT 
    r.year,
    STRING_AGG(DISTINCT r.title, ', ') AS titles,
    COUNT(r.movie_id) AS movie_count,
    COUNT(DISTINCT r.total_cast) AS unique_cast_count
FROM (
    SELECT
        production_year AS year,
        movie_id,
        title,
        total_cast
    FROM RankedTitles
    WHERE rank_by_cast <= 5 
) r
GROUP BY r.year
ORDER BY r.year DESC
LIMIT 10;