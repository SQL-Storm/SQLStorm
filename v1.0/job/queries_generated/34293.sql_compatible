
WITH RECURSIVE MovieHierarchy AS (
    
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level,
        mt.id AS root_id
    FROM
        aka_title mt
    WHERE
        mt.kind_id = 1  

    UNION ALL

    SELECT
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1,
        mh.root_id
    FROM
        MovieHierarchy mh
    JOIN
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN
        aka_title at ON ml.linked_movie_id = at.id
)

SELECT
    ak.name AS actor_name,
    at.title AS movie_title,
    mh.production_year,
    COUNT(DISTINCT mc.company_id) AS company_count,
    AVG(views.view_count) AS average_view_count,
    MAX(p.info) AS latest_info,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords
FROM
    MovieHierarchy mh
JOIN
    cast_info ci ON mh.movie_id = ci.movie_id
JOIN
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN
    movie_info mi ON mh.movie_id = mi.movie_id
LEFT JOIN
    person_info p ON ak.person_id = p.person_id
LEFT JOIN
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN (
    SELECT movie_id, COUNT(*) AS view_count
    FROM movie_info
    WHERE info_type_id = (SELECT id FROM info_type WHERE info = 'views')
    GROUP BY movie_id
) AS views ON mh.movie_id = views.movie_id
WHERE
    mh.production_year >= 2000  
    AND ak.name IS NOT NULL
GROUP BY
    ak.name, at.title, mh.production_year, mh.movie_id
HAVING
    COUNT(DISTINCT mc.company_id) > 1  
ORDER BY
    average_view_count DESC, mh.production_year DESC;
