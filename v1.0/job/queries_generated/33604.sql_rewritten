WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        at.kind_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    a.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COUNT(DISTINCT mc.company_id) AS companies_count,
    STRING_AGG(DISTINCT cn.name, ', ') AS company_names,
    ROW_NUMBER() OVER(PARTITION BY a.id ORDER BY mt.production_year DESC) AS movie_rank,
    CASE 
        WHEN mt.production_year IS NULL THEN 'Unknown Year'
        ELSE 'Year ' || mt.production_year
    END AS year_info
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    complete_cast cc ON ci.movie_id = cc.movie_id
JOIN 
    MovieHierarchy mt ON cc.movie_id = mt.movie_id
LEFT JOIN 
    movie_companies mc ON mt.movie_id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
WHERE 
    mt.production_year IS NOT NULL
    AND a.name IS NOT NULL
GROUP BY 
    a.id, mt.id
HAVING 
    COUNT(DISTINCT mc.company_id) > 0
ORDER BY 
    movie_rank ASC, a.name ASC;