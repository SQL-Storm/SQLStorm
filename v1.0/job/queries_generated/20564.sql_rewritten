WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year, 
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (
            SELECT id FROM kind_type WHERE kind = 'movie'
        )
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id, 
        mt.title, 
        mt.production_year, 
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
    WHERE 
        mt.production_year IS NOT NULL
)
SELECT 
    p.name AS person_name,
    ARRAY_AGG(DISTINCT kh.keyword) AS keywords,
    COALESCE(AVG(mi.info::numeric), 0) AS average_rating,
    COUNT(DISTINCT mh.movie_id) AS movie_count,
    MIN(mh.production_year) AS first_movie_year,
    MAX(mh.production_year) AS last_movie_year,
    STRING_AGG(DISTINCT mt.title, ', ') AS featured_movies,
    COUNT(DISTINCT CASE WHEN c.role_id IS NULL THEN c.note END) AS unnamed_roles
FROM 
    aka_name p
LEFT JOIN 
    cast_info c ON p.person_id = c.person_id
LEFT JOIN 
    movie_info mi ON c.movie_id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = c.movie_id
LEFT JOIN 
    keyword kh ON kh.id = mk.keyword_id
LEFT JOIN 
    movie_hierarchy mh ON c.movie_id = mh.movie_id
LEFT JOIN 
    aka_title mt ON mh.movie_id = mt.id
WHERE 
    p.name IS NOT NULL
    AND p.name NOT LIKE '%[ ]%'
    AND (mh.level = 1 OR (mh.level > 1 AND mh.production_year < 2000))
GROUP BY 
    p.id
HAVING 
    COUNT(DISTINCT mh.movie_id) > 2
ORDER BY 
    average_rating DESC NULLS LAST
LIMIT 50;