
WITH MovieDetails AS (
    SELECT 
        t.title,
        t.production_year,
        STRING_AGG(DISTINCT a.name, ', ') AS actors,
        COUNT(DISTINCT mc.company_id) AS company_count,
        AVG(CASE WHEN ci.note IS NOT NULL THEN 1.0 ELSE 0.0 END) AS has_note_percentage
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info ci ON t.id = ci.movie_id
    LEFT JOIN 
        aka_name a ON ci.person_id = a.person_id
    LEFT JOIN 
        movie_companies mc ON t.id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    WHERE 
        t.production_year >= 2000
    GROUP BY 
        t.id, t.title, t.production_year
),
RankedMovies AS (
    SELECT 
        title,
        production_year,
        actors,
        company_count,
        has_note_percentage,
        RANK() OVER (ORDER BY production_year DESC, company_count DESC) AS movie_rank
    FROM 
        MovieDetails
)
SELECT 
    rm.title,
    rm.production_year,
    rm.actors,
    rm.company_count,
    rm.has_note_percentage,
    CASE 
        WHEN rm.has_note_percentage > 0.5 THEN 'High'
        WHEN rm.has_note_percentage IS NULL THEN 'N/A'
        ELSE 'Low' 
    END AS note_availability,
    ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM rm.production_year) ORDER BY rm.movie_rank) AS yearly_rank
FROM 
    RankedMovies rm
ORDER BY 
    rm.production_year DESC, rm.movie_rank
LIMIT 100;
