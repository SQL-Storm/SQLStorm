
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        1 AS depth
    FROM
        aka_title mt
    WHERE
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT
        ml.linked_movie_id AS movie_id,
        at.title AS movie_title,
        at.production_year,
        mh.depth + 1
    FROM
        movie_link ml
    JOIN
        aka_title at ON ml.linked_movie_id = at.id
    JOIN
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT
    ak.name AS actor_name,
    mh.movie_title,
    mh.depth,
    COUNT(DISTINCT mc.company_id) AS number_of_companies,
    AVG(mh.production_year) AS average_production_year,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    MAX(CASE WHEN pi.info_type_id IS NOT NULL THEN pi.info ELSE 'No Info' END) AS person_info,
    ROW_NUMBER() OVER (PARTITION BY ak.person_id ORDER BY mh.production_year DESC) AS row_num
FROM
    aka_name ak
JOIN
    cast_info ci ON ak.person_id = ci.person_id
JOIN
    movie_hierarchy mh ON ci.movie_id = mh.movie_id
LEFT JOIN
    movie_companies mc ON mh.movie_id = mc.movie_id
LEFT JOIN
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN
    keyword k ON mk.keyword_id = k.id
LEFT JOIN
    person_info pi ON ak.person_id = pi.person_id
GROUP BY
    ak.name, mh.movie_title, mh.depth
HAVING
    COUNT(DISTINCT mc.company_id) > 1
    AND MAX(pi.info_type_id) IS NOT NULL
ORDER BY
    mh.depth DESC, average_production_year DESC
LIMIT 50
OFFSET (SELECT COUNT(*) FROM aka_name) - 50;
