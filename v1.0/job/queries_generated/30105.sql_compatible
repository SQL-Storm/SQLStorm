
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000
    UNION ALL
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1 AS level
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
    WHERE 
        mh.level < 3
), 
cast_info AS (
    SELECT 
        ci.person_id,
        ci.movie_id,
        c.role AS role_type,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_rank,
        COUNT(*) OVER (PARTITION BY ci.movie_id) AS total_cast
    FROM 
        cast_info ci
    JOIN 
        role_type c ON ci.role_id = c.id
), 
info_type_summary AS (
    SELECT 
        mi.movie_id,
        STRING_AGG(it.info, ', ') AS info_summary,
        COUNT(DISTINCT mi.info_type_id) AS info_count
    FROM 
        movie_info mi
    JOIN 
        info_type it ON mi.info_type_id = it.id
    GROUP BY 
        mi.movie_id
)
SELECT 
    mh.title,
    mh.production_year,
    ci.person_id,
    ci.role_type,
    CASE 
        WHEN ci.role_rank = 1 THEN 'Lead'
        WHEN ci.total_cast > 2 THEN 'Supporting'
        ELSE 'Cameo'
    END AS cast_category,
    its.info_summary,
    its.info_count
FROM 
    movie_hierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    info_type_summary its ON mh.movie_id = its.movie_id
WHERE 
    mh.production_year IS NOT NULL
ORDER BY 
    mh.production_year DESC, 
    ci.role_rank;
