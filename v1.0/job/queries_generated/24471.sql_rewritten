WITH ranked_movies AS (
    SELECT 
        t.title,
        t.production_year,
        k.keyword,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(mk.keyword_id) DESC) AS rank
    FROM 
        aka_title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    WHERE 
        t.production_year IS NOT NULL
    GROUP BY 
        t.title, 
        t.production_year, 
        k.keyword
),
top_movies AS (
    SELECT 
        title,
        production_year
    FROM 
        ranked_movies
    WHERE 
        rank <= 5
),
cast_stats AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS cast_count,
        MAX(ci.kind) AS role_type
    FROM 
        cast_info c
    LEFT JOIN 
        comp_cast_type ci ON c.person_role_id = ci.id
    GROUP BY 
        c.movie_id
),
movie_details AS (
    SELECT 
        t.title,
        t.production_year,
        cs.cast_count,
        COALESCE(NULLIF(cs.role_type, ''), 'Unknown') AS role_type,
        STRING_AGG(DISTINCT CONCAT(a.name, ' (', COALESCE(NULLIF(cn.name, ''), 'No Company'), ')'), '; ') AS cast_info
    FROM 
        top_movies t
    LEFT JOIN 
        cast_stats cs ON t.title = (SELECT title FROM aka_title WHERE id = cs.movie_id)
    LEFT JOIN 
        cast_info ci ON ci.movie_id = t.id
    LEFT JOIN 
        aka_name a ON ci.person_id = a.person_id
    LEFT JOIN 
        movie_companies mc ON t.id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    GROUP BY 
        t.title, 
        t.production_year, 
        cs.cast_count, 
        cs.role_type
)
SELECT 
    md.title,
    md.production_year,
    md.cast_count,
    md.role_type,
    CASE 
        WHEN md.cast_count IS NULL THEN 'No Cast Info'
        WHEN md.role_type = 'Director' AND md.cast_count < 3 THEN 'Low cast for Director'
        ELSE 'OK'
    END AS cast_evaluation
FROM 
    movie_details md
ORDER BY 
    md.production_year DESC, 
    md.cast_count DESC
LIMIT 10;