WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.kind_id = 1  

    UNION ALL

    SELECT 
        m.id AS movie_id,
        CONCAT(mh.title, ' -> ', m.title) AS title,
        depth + 1
    FROM 
        movie_hierarchy mh
    JOIN 
        aka_title m ON mh.movie_id = m.episode_of_id
)
SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    GROUP_CONCAT(DISTINCT k.keyword) AS keywords,
    COUNT(DISTINCT ci.role_id) AS total_roles,
    SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS noted_roles,
    ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY COUNT(ci.movie_id) DESC) AS role_rank
FROM 
    aka_name a
INNER JOIN 
    cast_info ci ON a.person_id = ci.person_id
INNER JOIN 
    aka_title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = t.id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_info mi ON mi.movie_id = t.id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Tagline')
WHERE 
    t.production_year >= 2000 
    AND a.name IS NOT NULL 
    AND a.name <> ''
    AND ci.nr_order < 5
GROUP BY 
    a.name, t.title, t.production_year
HAVING 
    COUNT(DISTINCT ci.movie_id) > 1
ORDER BY 
    total_roles DESC, actor_name
LIMIT 10;