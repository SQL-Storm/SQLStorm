
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        CASE 
            WHEN mt.episode_of_id IS NOT NULL THEN 1 
            ELSE 0 
        END AS is_episode,
        0 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000  

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        CASE 
            WHEN at.episode_of_id IS NOT NULL THEN 1 
            ELSE 0 
        END,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
)

SELECT 
    a.name AS actor_name,
    COUNT(DISTINCT cc.movie_id) AS movie_count,
    AVG(mh.production_year) AS avg_year,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    MAX(mh.level) AS max_link_depth
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    complete_cast cc ON ci.movie_id = cc.movie_id
JOIN 
    MovieHierarchy mh ON cc.movie_id = mh.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    company_name cn ON mh.movie_id IN (SELECT movie_id FROM movie_companies WHERE company_id = cn.imdb_id)

WHERE 
    a.name IS NOT NULL 
    AND a.name <> '' 
    AND mh.is_episode = 0 
    AND cn.country_code IS NOT NULL 

GROUP BY 
    a.name
HAVING 
    COUNT(DISTINCT cc.movie_id) > 5  
ORDER BY 
    movie_count DESC, 
    actor_name ASC;
