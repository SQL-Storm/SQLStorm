
WITH Recursive_CTE AS (
    SELECT 
        a.movie_id,
        COUNT(DISTINCT a.person_id) AS actor_count,
        SUM(CASE WHEN a.role_id IS NOT NULL THEN 1 ELSE 0 END) AS acting_roles,
        SUM(CASE WHEN a.note IS NOT NULL THEN LENGTH(a.note) ELSE 0 END) AS notes_length
    FROM 
        cast_info a
    LEFT JOIN 
        aka_name n ON a.person_id = n.person_id
    LEFT JOIN 
        aka_title t ON a.movie_id = t.movie_id
    LEFT JOIN 
        title ti ON t.movie_id = ti.id
    WHERE 
        ti.production_year >= 2000
        AND (n.name IS NULL OR n.name LIKE '%John%')
    GROUP BY 
        a.movie_id
),
Filtered_Movies AS (
    SELECT
        movie_id,
        actor_count,
        acting_roles,
        notes_length,
        ROW_NUMBER() OVER (PARTITION BY actor_count ORDER BY notes_length DESC) AS rn
    FROM 
        Recursive_CTE
    WHERE 
        actor_count > 2 
        AND notes_length > 50
),
Join_Movies AS (
    SELECT 
        DISTINCT t.title,
        t.production_year,
        m.company_id,
        c.kind AS company_type,
        COALESCE(m.note, 'No Note') AS movie_note,
        m.movie_id  -- Added movie_id for the join condition
    FROM 
        movie_companies m
    JOIN 
        Filtered_Movies fm ON m.movie_id = fm.movie_id
    LEFT JOIN 
        company_type c ON m.company_type_id = c.id
    WHERE 
        c.kind IS NOT NULL
        AND m.company_id IS NOT NULL
)
SELECT 
    j.title,
    j.production_year,
    j.company_type,
    j.movie_note,
    COALESCE(fm.actor_count, 0) AS total_actors,
    GREATEST(COALESCE(fm.acting_roles, 0), 1) AS total_roles  -- Added COALESCE to avoid NULL issues
FROM 
    Join_Movies j
LEFT JOIN 
    Filtered_Movies fm ON j.movie_id = fm.movie_id
WHERE 
    j.production_year BETWEEN 2010 AND 2023
    AND (j.movie_note IS NOT NULL OR j.movie_note LIKE '%Award%')
ORDER BY 
    j.production_year DESC, 
    total_actors DESC, 
    j.title ASC;
