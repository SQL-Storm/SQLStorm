
WITH RECURSIVE RecentMovies AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        ROW_NUMBER() OVER (PARTITION BY mt.production_year ORDER BY mt.production_year DESC) AS rnk
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2010
),
MovieDetails AS (
    SELECT 
        rm.movie_id,
        rm.title,
        COALESCE(CAST(rm.production_year AS VARCHAR), 'Unknown') AS production_year,
        COALESCE(cp.kind, 'N/A') AS company_type,
        COUNT(DISTINCT ci.person_id) AS cast_count,
        STRING_AGG(DISTINCT ak.name, ', ') AS actor_names
    FROM 
        RecentMovies rm
    LEFT JOIN 
        movie_companies mc ON rm.movie_id = mc.movie_id
    LEFT JOIN 
        company_name cp ON mc.company_id = cp.id
    LEFT JOIN 
        complete_cast cc ON rm.movie_id = cc.movie_id
    LEFT JOIN 
        cast_info ci ON cc.subject_id = ci.id
    LEFT JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    GROUP BY 
        rm.movie_id, rm.title, rm.production_year, cp.kind
),
FilteredMovies AS (
    SELECT 
        *,
        RANK() OVER (ORDER BY cast_count DESC) AS rank_by_cast
    FROM 
        MovieDetails
    WHERE 
        cast_count > 5
)
SELECT
    f.title,
    f.production_year,
    f.company_type,
    f.cast_count,
    f.actor_names,
    COUNT(DISTINCT mk.keyword) AS keyword_count
FROM 
    FilteredMovies f
LEFT JOIN 
    movie_keyword mk ON f.movie_id = mk.movie_id
GROUP BY 
    f.title, f.production_year, f.company_type, f.cast_count, f.actor_names
HAVING 
    COUNT(DISTINCT mk.keyword) >= 3
ORDER BY 
    f.cast_count DESC, f.production_year DESC
LIMIT 10;
