
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    ak.name AS actor_name,
    CONCAT(ak.name, ' (', ak.id, ')') AS actor,
    at.title AS movie_title,
    mh.level AS movie_level,
    COUNT(DISTINCT ci.id) AS role_count,
    STRING_AGG(DISTINCT rt.role, ', ') AS roles,
    AVG(CASE WHEN mi.info_type_id IS NOT NULL THEN CAST(mi.info AS NUMERIC) ELSE NULL END) AS average_rating,
    COUNT(DISTINCT kw.keyword) AS keyword_count
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    movie_hierarchy mh ON ci.movie_id = mh.movie_id
JOIN 
    aka_title at ON mh.movie_id = at.id
LEFT JOIN 
    movie_info mi ON at.id = mi.movie_id AND mi.note IS NULL
LEFT JOIN 
    movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    role_type rt ON ci.role_id = rt.id
WHERE 
    ak.name IS NOT NULL 
    AND ak.md5sum IS NOT NULL 
    AND ak.id IS NOT NULL
GROUP BY 
    ak.name, ak.id, at.title, mh.level
ORDER BY 
    actor_name, movie_title, movie_level;
