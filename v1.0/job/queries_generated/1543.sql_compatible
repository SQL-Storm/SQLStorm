
WITH MovieDetails AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        k.keyword,
        rn.rank
    FROM 
        title AS t
    LEFT JOIN 
        movie_keyword AS mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword AS k ON mk.keyword_id = k.id
    LEFT JOIN 
        (SELECT 
            movie_id, 
            DENSE_RANK() OVER (PARTITION BY movie_id ORDER BY production_year DESC) AS rank
         FROM 
            movie_info 
         WHERE 
            info_type_id = (SELECT id FROM info_type WHERE info = 'Rating') 
     ) AS rn ON rn.movie_id = t.id
    WHERE 
        t.production_year >= 2000
), ActorDetails AS (
    SELECT 
        a.id AS actor_id,
        a.name,
        ci.movie_id,
        r.role
    FROM 
        aka_name AS a
    JOIN 
        cast_info AS ci ON a.person_id = ci.person_id
    JOIN 
        role_type AS r ON ci.role_id = r.id
    WHERE 
        a.name IS NOT NULL
), CompanyStats AS (
    SELECT 
        mc.movie_id,
        COUNT(DISTINCT c.id) AS company_count,
        STRING_AGG(DISTINCT co.name, ', ') AS company_names
    FROM 
        movie_companies AS mc
    JOIN 
        company_name AS co ON mc.company_id = co.id
    GROUP BY 
        mc.movie_id
)
SELECT 
    md.title,
    md.production_year,
    ad.name AS actor_name,
    cs.company_count,
    cs.company_names,
    CASE 
        WHEN md.keyword IS NULL THEN 'No Keywords' 
        ELSE md.keyword 
    END AS keywords
FROM 
    MovieDetails AS md
LEFT JOIN 
    ActorDetails AS ad ON md.title_id = ad.movie_id
LEFT JOIN 
    CompanyStats AS cs ON md.title_id = cs.movie_id
WHERE 
    md.rank = 1 AND cs.company_count > 0
GROUP BY 
    md.title, 
    md.production_year, 
    ad.name, 
    cs.company_count, 
    cs.company_names
ORDER BY 
    md.production_year DESC, 
    ad.name ASC
LIMIT 50;
