
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        m.id AS movie_id,
        t.title,
        1 AS level
    FROM
        title t
    JOIN
        aka_title a ON t.id = a.movie_id
    JOIN
        cast_info c ON a.movie_id = c.movie_id
    WHERE
        c.nr_order IS NOT NULL

    UNION ALL

    SELECT
        mh.movie_id,
        mh.title,
        mh.level + 1
    FROM
        MovieHierarchy mh
    JOIN
        movie_link ml ON mh.movie_id = ml.movie_id
    WHERE
        ml.linked_movie_id IS NOT NULL
),

ActorStats AS (
    SELECT
        ak.name,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        AVG(t.production_year) AS avg_production_year
    FROM
        aka_name ak
    JOIN
        cast_info ci ON ak.person_id = ci.person_id
    JOIN
        aka_title at ON ci.movie_id = at.movie_id
    JOIN
        title t ON at.movie_id = t.id
    WHERE
        ak.name IS NOT NULL AND ak.name != 'Unknown'
    GROUP BY
        ak.name
),

FilteredTitles AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        CASE WHEN t.production_year IS NULL THEN 'No Year' ELSE 'Year Present' END AS year_status
    FROM
        title t
    WHERE
        t.kind_id IN (SELECT id FROM kind_type WHERE kind ILIKE '%Drama%')
),

KeywordStatistics AS (
    SELECT
        k.keyword,
        COUNT(DISTINCT mk.movie_id) AS movie_count
    FROM
        keyword k
    LEFT JOIN
        movie_keyword mk ON k.id = mk.keyword_id
    GROUP BY
        k.keyword
    HAVING
        COUNT(mk.movie_id) > 1
)

SELECT
    mv.title AS movie_title,
    mv.production_year,
    ak.name AS actor_name,
    CASE 
        WHEN ak.movie_count > 10 THEN 'Prolific Actor'
        ELSE 'Less Frequent'
    END AS actor_type,
    k.keyword AS prevalent_keyword,
    COUNT(DISTINCT mh.movie_id) AS linked_movie_count,
    DENSE_RANK() OVER (PARTITION BY mv.production_year ORDER BY COUNT(DISTINCT mk.movie_id) DESC) AS year_rank
FROM
    FilteredTitles mv
JOIN
    ActorStats ak ON ak.movie_count > 5
JOIN
    KeywordStatistics k ON k.movie_count > 2
LEFT JOIN
    MovieHierarchy mh ON mv.movie_id = mh.movie_id
WHERE
    mv.year_status = 'Year Present'
GROUP BY
    mv.title, mv.production_year, ak.name, k.keyword
HAVING
    COUNT(DISTINCT mh.movie_id) < 5
ORDER BY
    mv.production_year DESC, linked_movie_count DESC, actor_name
LIMIT 50 OFFSET 0;
