WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth,
        ARRAY[mt.title] AS path
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.depth + 1,
        mh.path || at.title
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.depth < 5  
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.depth,
    mh.path,
    COUNT(DISTINCT ci.person_id) AS total_actors,
    COUNT(DISTINCT CASE WHEN ci.note IS NOT NULL THEN ci.person_id END) AS actors_with_notes,
    STRING_AGG(DISTINCT ak.name, ', ') AS actor_names,
    AVG((SELECT COUNT(*)
         FROM movie_keyword mk
         WHERE mk.movie_id = mh.movie_id)) AS avg_keywords_per_movie,
    SUM(CASE 
            WHEN ci.nr_order IS NULL OR ci.nr_order = 0 THEN 1 
            ELSE 0 
        END) AS missing_order_count
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON cc.subject_id = ci.person_id
LEFT JOIN 
    aka_name ak ON ci.person_id = ak.person_id
WHERE 
    mh.production_year >= 2000
    AND mh.title IS NOT NULL
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.depth, mh.path
ORDER BY 
    total_actors DESC, 
    mh.production_year ASC
LIMIT 100;