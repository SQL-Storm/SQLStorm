WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        akat.title,
        akat.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    INNER JOIN 
        aka_title akat ON ml.linked_movie_id = akat.id
    INNER JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    ah.name AS actor_name,
    mh.title AS movie_title,
    mh.production_year,
    COUNT(DISTINCT mc.company_id) AS company_count,
    AVG(CASE 
            WHEN mi.info IS NULL THEN 0 
            ELSE CHAR_LENGTH(mi.info) 
        END) AS avg_info_length,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    ROW_NUMBER() OVER (PARTITION BY ah.name ORDER BY mh.production_year DESC) AS actor_movie_rank,
    COALESCE((SELECT COUNT(*) FROM cast_info ci WHERE ci.movie_id = mh.movie_id AND ci.role_id IS NULL), 0) AS uncredited_role_count
FROM 
    movie_hierarchy mh
JOIN 
    cast_info ci ON ci.movie_id = mh.movie_id
JOIN 
    aka_name ah ON ah.person_id = ci.person_id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = mh.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN 
    keyword kw ON kw.id = mk.keyword_id
LEFT JOIN 
    movie_info mi ON mi.movie_id = mh.movie_id AND mi.info_type_id IN (SELECT id FROM info_type WHERE info = 'summary')
WHERE 
    mh.level <= 3
GROUP BY 
    ah.name, mh.movie_id, mh.title, mh.production_year
HAVING 
    COUNT(DISTINCT mc.company_id) > 0
ORDER BY 
    actor_movie_rank, mh.production_year DESC;