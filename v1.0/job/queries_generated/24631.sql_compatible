
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COALESCE(SUM(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END), 0) AS cast_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC, t.title) AS year_rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info ci ON t.id = ci.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
), 
CompanyUsage AS (
    SELECT 
        mc.movie_id,
        COUNT(DISTINCT c.id) AS unique_company_count
    FROM 
        movie_companies mc
    JOIN 
        company_name c ON mc.company_id = c.id
    WHERE 
        c.country_code IS NOT NULL
    GROUP BY 
        mc.movie_id
), 
MoviesWithCompanyInfo AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.cast_count,
        COALESCE(cu.unique_company_count, 0) AS unique_company_count
    FROM 
        RankedMovies rm
    LEFT JOIN 
        CompanyUsage cu ON rm.movie_id = cu.movie_id
)
SELECT 
    mwci.movie_id,
    mwci.title,
    mwci.production_year,
    mwci.cast_count,
    mwci.unique_company_count,
    CASE 
        WHEN mwci.cast_count > 10 THEN 'Large Cast'
        WHEN mwci.cast_count BETWEEN 6 AND 10 THEN 'Medium Cast'
        ELSE 'Small Cast'
    END AS cast_size_category,
    RANK() OVER (ORDER BY mwci.unique_company_count DESC, mwci.cast_count ASC) AS unique_company_rank
FROM 
    MoviesWithCompanyInfo mwci
WHERE 
    mwci.production_year IN (SELECT DISTINCT production_year FROM RankedMovies WHERE year_rank <= 5)
ORDER BY 
    mwci.unique_company_count DESC,
    mwci.cast_count DESC
LIMIT 20
UNION ALL
SELECT 
    NULL AS movie_id,
    NULL AS title,
    NULL AS production_year,
    NULL AS cast_count,
    NULL AS unique_company_count,
    'Overall Average' AS cast_size_category,
    AVG(cast_count) OVER () AS unique_company_rank
FROM 
    MoviesWithCompanyInfo
WHERE 
    unique_company_count IS NOT NULL;
