
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        COALESCE(m.production_year, 0) AS production_year,
        1 AS level,
        NULL AS parent_id
    FROM 
        title m
    WHERE 
        m.production_year IS NOT NULL 
    UNION ALL 
    SELECT 
        ml.linked_movie_id,
        t.title,
        COALESCE(t.production_year, 0) AS production_year,
        mh.level + 1,
        mh.movie_id
    FROM 
        movie_link ml
    JOIN 
        title t ON ml.linked_movie_id = t.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
),
actor_roles AS (
    SELECT 
        a.name,
        c.movie_id,
        r.role,
        COUNT(DISTINCT a.id) OVER (PARTITION BY a.name ORDER BY a.name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS role_count
    FROM 
        aka_name a
    JOIN 
        cast_info c ON a.person_id = c.person_id
    JOIN 
        role_type r ON c.role_id = r.id
    WHERE 
        a.name IS NOT NULL
),
average_movie_performance AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        AVG(COALESCE(LENGTH(a.name), 0)) AS avg_actor_name_length,
        SUM(CASE WHEN a.role_count IS NULL THEN 0 ELSE 1 END) AS total_roles
    FROM 
        movie_hierarchy mh
    LEFT JOIN 
        actor_roles a ON mh.movie_id = a.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year
),
movies_with_info AS (
    SELECT 
        am.movie_id,
        am.title,
        am.production_year,
        COALESCE(mi.info, 'No Info') AS info,
        am.avg_actor_name_length,
        am.total_roles
    FROM 
        average_movie_performance am
    LEFT JOIN 
        movie_info mi ON am.movie_id = mi.movie_id
)

SELECT 
    m.title,
    m.production_year,
    m.info,
    m.avg_actor_name_length,
    m.total_roles,
    CASE 
        WHEN m.production_year < 2000 THEN 'Classic'
        WHEN m.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Contemporary'
    END AS era,
    RANK() OVER (ORDER BY m.avg_actor_name_length DESC) AS name_length_rank,
    (SELECT COUNT(*) FROM movies_with_info mw WHERE mw.avg_actor_name_length > m.avg_actor_name_length) AS more_long_name_count
FROM 
    movies_with_info m
WHERE 
    m.total_roles > 0
ORDER BY 
    m.production_year DESC, m.avg_actor_name_length DESC;
