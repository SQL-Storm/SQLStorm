
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        m.production_year,
        m.kind_id,
        NULL AS parent_movie_id
    FROM 
        aka_title m
    WHERE 
        m.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE '%Series%')

    UNION ALL

    SELECT 
        linked.movie_id,
        linked.linked_movie_id AS movie_title,
        m.production_year,
        m.kind_id,
        m.id AS parent_movie_id
    FROM 
        movie_link linked
    JOIN 
        aka_title m ON linked.linked_movie_id = m.id
    WHERE 
        linked.link_type_id = (SELECT id FROM link_type WHERE link LIKE '%follows%')
)

SELECT 
    h.movie_id,
    h.movie_title,
    h.production_year,
    COUNT(DISTINCT c.person_id) AS cast_count,
    COUNT(DISTINCT k.keyword) AS keyword_count,
    STRING_AGG(DISTINCT CAST(c.role_id AS TEXT), ', ' ORDER BY c.role_id) AS role_ids,
    AVG(mi.info_type_id) FILTER (WHERE mi.info_type_id IS NOT NULL) AS avg_info_type_id,
    COUNT(DISTINCT CASE WHEN mi.note IS NULL THEN 1 END) AS null_notes_count
FROM 
    movie_hierarchy h
LEFT JOIN 
    cast_info c ON h.movie_id = c.movie_id
LEFT JOIN 
    movie_keyword mk ON h.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_info mi ON h.movie_id = mi.movie_id
GROUP BY 
    h.movie_id, h.movie_title, h.production_year
HAVING 
    COUNT(DISTINCT c.person_id) > 10 
    OR NULLIF(AVG(h.production_year), 0) IS NOT NULL
ORDER BY 
    h.production_year DESC, cast_count DESC;
