
WITH RankedTitles AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        t.kind_id,
        ROW_NUMBER() OVER(PARTITION BY t.kind_id ORDER BY t.production_year DESC) AS year_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
FilteredCast AS (
    SELECT 
        c.person_id, 
        c.movie_id, 
        r.role, 
        c.nr_order,
        COUNT(*) OVER(PARTITION BY c.person_id) AS movie_count
    FROM 
        cast_info c
    JOIN 
        role_type r ON c.role_id = r.id
    WHERE 
        c.nr_order IS NOT NULL AND 
        c.nr_order <= 5
),
LatestMovies AS (
    SELECT 
        lt.title_id,
        lt.title,
        lt.production_year,
        STRING_AGG(a.name, ', ') AS actor_names
    FROM 
        RankedTitles lt
    LEFT JOIN 
        FilteredCast fc ON lt.title_id = fc.movie_id
    LEFT JOIN 
        aka_name a ON fc.person_id = a.person_id
    WHERE 
        lt.year_rank <= 10
    GROUP BY 
        lt.title_id, lt.title, lt.production_year
),
CompanyInfo AS (
    SELECT 
        mc.movie_id,
        STRING_AGG(DISTINCT cn.name) AS companies
    FROM 
        movie_companies mc
    JOIN 
        company_name cn ON mc.company_id = cn.id
    WHERE 
        cn.country_code NOT IN ('US', 'UK')
    GROUP BY 
        mc.movie_id
)
SELECT 
    lm.title,
    lm.production_year,
    lm.actor_names,
    ci.companies,
    COALESCE(NULLIF(lm.production_year, 2021), NULL) AS adjusted_year,
    CASE 
        WHEN lm.production_year IS NULL THEN 'Year not available'
        WHEN lm.production_year < 2000 THEN 'Old Movie'
        ELSE 'Recent Movie'
    END AS movie_age,
    COUNT(DISTINCT lm.title_id) OVER() AS total_titles
FROM 
    LatestMovies lm
LEFT JOIN 
    CompanyInfo ci ON lm.title_id = ci.movie_id
WHERE 
    lm.actor_names IS NOT NULL
ORDER BY 
    lm.production_year DESC, 
    lm.title ASC;