
WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        c.person_id,
        a.name AS actor_name,
        0 AS level
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    WHERE 
        a.name IS NOT NULL
    
    UNION ALL
    
    SELECT 
        c.person_id,
        a.name AS actor_name,
        ah.level + 1
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    JOIN 
        ActorHierarchy ah ON c.movie_id IN (
            SELECT ci.movie_id FROM cast_info ci WHERE ci.person_id = ah.person_id
        )
    WHERE 
        a.name IS NOT NULL
),
MovieRoles AS (
    SELECT 
        c.movie_id,
        a.actor_name,
        r.role AS role_name,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS role_rank
    FROM 
        cast_info c
    JOIN 
        aka_name a ON c.person_id = a.person_id
    JOIN 
        role_type r ON c.role_id = r.id
),
MoviesWithKeywords AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        m.id, m.title
)
SELECT 
    mwk.title,
    mwk.keywords,
    ARRAY_AGG(DISTINCT ah.actor_name) AS co_actors,
    COUNT(DISTINCT ah.person_id) AS total_actors,
    MIN(mr.role_rank) AS main_role_rank,
    COALESCE(MAX(mr.role_name), 'Unknown') AS main_actor_role
FROM 
    MoviesWithKeywords mwk
LEFT JOIN 
    MovieRoles mr ON mwk.movie_id = mr.movie_id
LEFT JOIN 
    ActorHierarchy ah ON mr.actor_name = ah.actor_name
WHERE 
    mwk.keywords IS NOT NULL
    AND mwk.title IS NOT NULL
GROUP BY 
    mwk.title, mwk.keywords
HAVING 
    COUNT(DISTINCT ah.person_id) > 5  
ORDER BY 
    total_actors DESC, mwk.title
LIMIT 10;
