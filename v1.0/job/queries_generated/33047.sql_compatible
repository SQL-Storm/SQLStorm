
WITH RECURSIVE movie_hierarchy AS (
    SELECT
        m.id AS movie_id,
        m.title,
        0 AS depth
    FROM
        aka_title AS m
    WHERE
        m.production_year > 2000

    UNION ALL

    SELECT
        m.id AS movie_id,
        m.title,
        mh.depth + 1
    FROM
        movie_link AS ml
    JOIN
        movie_hierarchy AS mh ON ml.movie_id = mh.movie_id
    JOIN
        aka_title AS m ON ml.linked_movie_id = m.id
    WHERE
        mh.depth < 5
),
cast_with_roles AS (
    SELECT
        ci.movie_id,
        ak.name AS actor_name,
        rt.role,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_rank,
        COUNT(*) OVER (PARTITION BY ci.movie_id) AS total_actors
    FROM
        cast_info AS ci
    JOIN
        aka_name AS ak ON ci.person_id = ak.person_id
    LEFT JOIN
        role_type AS rt ON ci.role_id = rt.id
),
movie_summary AS (
    SELECT
        a.id AS movie_id,
        a.title,
        COALESCE(MAX(c.actor_name), 'No Actors') AS lead_actor,
        MAX(mk.keyword) AS main_keyword,
        AVG(CASE WHEN mi.info_type_id IN (1, 2) THEN NULLIF(LENGTH(mi.info), 0) END) AS avg_info_length,
        COUNT(DISTINCT c.actor_rank) AS unique_roles_count,
        COUNT(mi.info_type_id) AS info_count
    FROM
        aka_title AS a
    LEFT JOIN
        movie_keyword AS mk ON a.id = mk.movie_id
    LEFT JOIN
        cast_with_roles AS c ON a.id = c.movie_id
    LEFT JOIN
        movie_info AS mi ON a.id = mi.movie_id
    WHERE
        a.production_year > 2000
    GROUP BY
        a.id, a.title
)
SELECT
    mh.movie_id,
    mh.title,
    ms.lead_actor,
    ms.main_keyword,
    ms.avg_info_length,
    ms.unique_roles_count,
    ms.info_count
FROM
    movie_hierarchy AS mh
LEFT JOIN
    movie_summary AS ms ON mh.movie_id = ms.movie_id
WHERE
    mh.depth < 3
ORDER BY
    mh.depth, ms.unique_roles_count DESC, ms.info_count ASC
LIMIT 50;
