
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        ARRAY[mt.title] AS title_path,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year = (SELECT MAX(production_year) FROM aka_title)

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        lt.title,
        mh.title_path || lt.title,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        title lt ON ml.linked_movie_id = lt.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COALESCE(subquery.total_cast, 0) AS total_cast_count,
    mh.title_path,
    ROW_NUMBER() OVER (PARTITION BY mt.id ORDER BY ak.name) AS actor_order,
    CASE 
        WHEN ct.kind IS NULL THEN 'Unknown'
        ELSE ct.kind 
    END AS company_type,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN 
    movie_companies mc ON mt.id = mc.movie_id
LEFT JOIN 
    company_type ct ON mc.company_type_id = ct.id
LEFT JOIN 
    movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    (SELECT 
        movie_id, COUNT(*) AS total_cast
     FROM 
        cast_info 
     GROUP BY 
        movie_id) subquery ON mt.id = subquery.movie_id
LEFT JOIN 
    movie_hierarchy mh ON mt.id = mh.movie_id
WHERE 
    mt.production_year BETWEEN 2000 AND 2023
    AND ak.name IS NOT NULL
    AND (ct.kind IS NOT NULL OR ak.surname_pcode IS NOT NULL)
GROUP BY 
    ak.name, mt.title, mt.production_year, subquery.total_cast, mh.title_path, ct.kind
HAVING 
    COUNT(DISTINCT ak.name) > 1
ORDER BY 
    mt.production_year DESC, total_cast_count DESC, actor_order;
