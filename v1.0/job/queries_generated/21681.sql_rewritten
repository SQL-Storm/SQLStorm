WITH RecursiveCTE AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT ca.id) AS cast_count,
        SUM(CASE WHEN ca.note IS NOT NULL THEN 1 ELSE 0 END) AS note_count,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY COUNT(ca.id) DESC) AS rn
    FROM cast_info ca
    JOIN complete_cast c ON ca.movie_id = c.movie_id
    GROUP BY c.movie_id
),
MovieDetails AS (
    SELECT 
        t.title,
        t.production_year,
        co.name AS company_name,
        k.keyword AS movie_keyword,
        a.name AS aka_name,
        rn
    FROM RecursiveCTE r
    JOIN aka_title t ON r.movie_id = t.movie_id 
    LEFT JOIN movie_companies mc ON mc.movie_id = r.movie_id
    LEFT JOIN company_name co ON mc.company_id = co.id
    LEFT JOIN movie_keyword mk ON mk.movie_id = r.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    LEFT JOIN aka_name a ON a.person_id IN (SELECT ca.person_id FROM cast_info ca WHERE ca.movie_id = r.movie_id)
    WHERE r.cast_count > 1 AND (t.production_year > 2000 OR co.country_code IS NULL)
),
RankedMovies AS (
    SELECT 
        *,
        RANK() OVER (ORDER BY production_year DESC, cast_count DESC) AS rank_order
    FROM MovieDetails
)
SELECT 
    title,
    production_year,
    company_name,
    movie_keyword,
    aka_name,
    CASE WHEN rank_order <= 10 THEN 'Top 10 Movies' 
         WHEN rank_order <= 20 THEN 'Next 10 Movies' 
         ELSE 'Beyond Top 20' END AS rank_category
FROM RankedMovies
WHERE rank_order <= 50
ORDER BY production_year, cast_count DESC
LIMIT 30;