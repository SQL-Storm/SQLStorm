WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        0 AS depth,
        mt.production_year,
        ARRAY[mt.title] AS title_path
    FROM aka_title mt
    WHERE mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title,
        mh.depth + 1,
        mt.production_year,
        mh.title_path || mt.title
    FROM movie_link ml
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN aka_title mt ON ml.linked_movie_id = mt.id
    WHERE mh.depth < 5  
)

SELECT 
    ak.name AS actor_name,
    at.title AS movie_title,
    mh.production_year,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    SUM(CASE WHEN COALESCE(mh.production_year, 0) < 2000 THEN 1 ELSE 0 END) AS pre_2000_count,
    STRING_AGG(DISTINCT COALESCE(mk.keyword, 'Unknown'), ', ') AS keywords,
    RANK() OVER (PARTITION BY mh.production_year ORDER BY COUNT(DISTINCT mk.keyword) DESC) AS year_rank
FROM aka_name ak
JOIN cast_info ci ON ak.person_id = ci.person_id
JOIN movie_companies mc ON ci.movie_id = mc.movie_id
JOIN aka_title at ON ci.movie_id = at.movie_id
LEFT JOIN movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN movie_hierarchy mh ON at.id = mh.movie_id
WHERE ak.name IS NOT NULL
    AND ak.md5sum IS NOT NULL
    AND ak.id BETWEEN 1 AND 1000
    AND EXISTS (
        SELECT 1 
        FROM complete_cast cc 
        WHERE cc.movie_id = at.id AND cc.status_id IS NOT NULL
    )
GROUP BY ak.name, at.title, mh.production_year
HAVING COUNT(DISTINCT mk.keyword) > 0
ORDER BY year_rank, keyword_count DESC
FETCH FIRST 100 ROWS ONLY;