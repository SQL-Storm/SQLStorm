
WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        ak.id AS actor_id,
        ak.name AS actor_name,
        0 AS level
    FROM aka_name ak
    WHERE ak.name IS NOT NULL

    UNION ALL

    SELECT 
        ak.id AS actor_id,
        ak.name AS actor_name,
        ah.level + 1
    FROM aka_name ak
    JOIN cast_info ci ON ci.person_id = ak.person_id
    JOIN ActorHierarchy ah ON ah.actor_id = ci.person_id
    WHERE ah.level < 5
),

MaxProductionYear AS (
    SELECT 
        MAX(pt.production_year) AS max_year 
    FROM aka_title pt
),

MovieInfoWithKeywords AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        ARRAY_AGG(DISTINCT k.keyword) AS keywords,
        ROW_NUMBER() OVER (PARTITION BY mt.kind_id ORDER BY mt.production_year DESC) AS rn
    FROM aka_title mt
    LEFT JOIN movie_keyword mk ON mk.movie_id = mt.id
    LEFT JOIN keyword k ON k.id = mk.keyword_id
    GROUP BY mt.id, mt.title, mt.kind_id
),

ActorMovies AS (
    SELECT 
        a.actor_name,
        mt.id AS movie_id,
        mt.title,
        mt.production_year
    FROM ActorHierarchy a
    JOIN cast_info ci ON ci.person_id = a.actor_id
    JOIN aka_title mt ON mt.id = ci.movie_id
)

SELECT 
    a.actor_name,
    COUNT(DISTINCT am.title) AS total_movies,
    STRING_AGG(DISTINCT am.title, ', ' ORDER BY am.production_year DESC) AS movie_list,
    COALESCE(mw.keywords, ARRAY[]::TEXT[]) AS keywords,
    CASE 
        WHEN COUNT(DISTINCT am.title) >= 5 THEN 'Frequent Actor'
        ELSE 'Rising Star'
    END AS actor_type,
    (SELECT max_year FROM MaxProductionYear) AS latest_production_year,
    COUNT(DISTINCT CASE WHEN mt.production_year = (SELECT max_year FROM MaxProductionYear) THEN mt.id END) AS movies_this_year
FROM ActorMovies am
LEFT JOIN MovieInfoWithKeywords mw ON mw.movie_id = am.movie_id
GROUP BY a.actor_name, mw.keywords
HAVING COUNT(DISTINCT am.title) > 2
ORDER BY total_movies DESC, a.actor_name
LIMIT 10;
