WITH RECURSIVE Movie_Hierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id, 
        at.title, 
        at.production_year,
        mh.level + 1 AS level
    FROM 
        Movie_Hierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    WHERE 
        mh.level < 5
),

Actor_Info AS (
    SELECT 
        ak.name AS actor_name,
        ct.kind AS role,
        count(ci.movie_id) AS movie_count
    FROM 
        aka_name ak
    JOIN 
        cast_info ci ON ak.person_id = ci.person_id
    JOIN 
        comp_cast_type ct ON ci.person_role_id = ct.id
    GROUP BY 
        ak.name, ct.kind
),

Movie_Keywords AS (
    SELECT 
        m.id AS movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        aka_title m
    LEFT JOIN 
        movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        m.id
)

SELECT 
    mh.title,
    mh.production_year,
    ai.actor_name,
    ai.role,
    ai.movie_count,
    mk.keywords
FROM 
    Movie_Hierarchy mh
LEFT JOIN 
    Actor_Info ai ON mh.movie_id IN (SELECT movie_id FROM cast_info WHERE movie_id = mh.movie_id)
LEFT JOIN 
    Movie_Keywords mk ON mh.movie_id = mk.movie_id
WHERE 
    mh.production_year BETWEEN 2005 AND 2023
    AND (ai.movie_count IS NULL OR ai.movie_count > 3)
ORDER BY 
    mh.production_year DESC, 
    ai.movie_count DESC NULLS LAST
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;