
WITH RECURSIVE MovieHierarchy AS (
    SELECT mt.id AS movie_id, mt.title, mt.production_year, NULL AS parent_movie_id
    FROM aka_title mt
    WHERE mt.producer_year IS NOT NULL

    UNION ALL

    SELECT m.id, m.title, m.production_year, mh.movie_id
    FROM aka_title m
    JOIN MovieHierarchy mh ON m.episode_of_id = mh.movie_id
),
RankedMovies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        RANK() OVER (PARTITION BY mh.production_year ORDER BY mh.title) AS rank_within_year
    FROM MovieHierarchy mh
),
TopMovies AS (
    SELECT *
    FROM RankedMovies
    WHERE rank_within_year <= 10
),
MovieDetails AS (
    SELECT
        t.title,
        t.production_year,
        COUNT(DISTINCT ci.person_id) AS total_cast,
        ARRAY_AGG(DISTINCT c.name) AS cast_names,
        COUNT(DISTINCT mk.keyword) AS keyword_count,
        MAX(mci.note) AS latest_note
    FROM TopMovies t
    LEFT JOIN cast_info ci ON t.movie_id = ci.movie_id
    LEFT JOIN aka_name c ON ci.person_id = c.person_id
    LEFT JOIN movie_keyword mk ON t.movie_id = mk.movie_id
    LEFT JOIN movie_info mci ON t.movie_id = mci.movie_id
    GROUP BY t.title, t.production_year
)

SELECT 
    md.title,
    md.production_year,
    md.total_cast,
    md.keyword_count,
    CASE 
        WHEN md.latest_note IS NULL THEN 'No notes available'
        ELSE md.latest_note
    END AS latest_note_message 
FROM MovieDetails md
WHERE md.total_cast > 0
ORDER BY md.production_year DESC, md.title;
