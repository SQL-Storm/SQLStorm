WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000  

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    WHERE 
        mh.level < 5  
),

AggregateData AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT mc.company_id) AS num_companies,
        COUNT(DISTINCT mki.keyword_id) AS num_keywords,
        AVG(CASE WHEN ci.role_id IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY mh.movie_id) AS avg_has_cast
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        movie_companies mc ON mh.movie_id = mc.movie_id
    LEFT JOIN 
        movie_keyword mki ON mh.movie_id = mki.movie_id
    LEFT JOIN 
        cast_info ci ON mh.movie_id = ci.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year
),

RankedMovies AS (
    SELECT 
        ad.movie_id,
        ad.title,
        ad.production_year,
        ad.num_companies,
        ad.num_keywords,
        ad.avg_has_cast,
        RANK() OVER (ORDER BY ad.production_year DESC, ad.num_keywords DESC) AS rank
    FROM 
        AggregateData ad
    WHERE 
        ad.num_companies > 5  
)

SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    rm.num_companies,
    rm.num_keywords,
    ROUND(rm.avg_has_cast::NUMERIC, 2) AS average_cast_flag,
    CASE 
        WHEN rm.rank <= 10 THEN 'Top 10 Movies'
        ELSE 'Beyond Top 10'
    END AS rank_category
FROM 
    RankedMovies rm
WHERE 
    rm.production_year >= 2000
ORDER BY 
    rm.rank
LIMIT 50;