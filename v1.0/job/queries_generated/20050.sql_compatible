
WITH RankedMovies AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.production_year DESC) AS rank,
        COALESCE(ARRAY_AGG(DISTINCT k.keyword) FILTER (WHERE k.keyword IS NOT NULL), '{}') AS keywords
    FROM
        aka_title t
    LEFT JOIN
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN
        keyword k ON mk.keyword_id = k.id
    GROUP BY
        t.id, t.title, t.production_year
),
MovieCast AS (
    SELECT
        c.movie_id,
        a.name AS actor_name,
        COUNT(DISTINCT c.person_id) AS actor_count,
        SUM(CASE WHEN c.note IS NOT NULL THEN 1 ELSE 0 END) AS notes_count
    FROM
        cast_info c
    JOIN
        aka_name a ON c.person_id = a.person_id
    GROUP BY
        c.movie_id, a.name
),
CompanyMovies AS (
    SELECT
        m.movie_id,
        ARRAY_AGG(DISTINCT cn.name) AS companies,
        COUNT(DISTINCT cm.company_type_id) AS company_types_count
    FROM
        movie_companies m
    JOIN
        company_name cn ON m.company_id = cn.id
    LEFT JOIN
        company_type ct ON m.company_type_id = ct.id
    GROUP BY
        m.movie_id
),
MovieDetails AS (
    SELECT
        rm.movie_id,
        rm.title,
        rm.production_year,
        COALESCE(mc.actor_count, 0) AS actor_count,
        COALESCE(cm.companies, '{}') AS companies,
        COALESCE(cm.company_types_count, 0) AS company_types_count,
        rm.keywords
    FROM
        RankedMovies rm
    LEFT JOIN
        MovieCast mc ON rm.movie_id = mc.movie_id
    LEFT JOIN
        CompanyMovies cm ON rm.movie_id = cm.movie_id
)
SELECT
    md.title,
    md.production_year,
    md.actor_count,
    md.companies,
    md.company_types_count,
    CASE
        WHEN md.actor_count > 5 AND md.company_types_count > 3 THEN 'Blockbuster'
        WHEN md.actor_count BETWEEN 1 AND 5 AND md.company_types_count BETWEEN 1 AND 3 THEN 'Indie'
        ELSE 'Unknown'
    END AS movie_category,
    EXTRACT(YEAR FROM DATE '2024-10-01') - md.production_year AS years_since_release
FROM
    MovieDetails md
WHERE
    EXISTS (
        SELECT 1 
        FROM movie_info mi 
        WHERE mi.movie_id = md.movie_id 
        AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Box Office')
        AND mi.info IS NOT NULL AND CAST(mi.info AS numeric) > 1000000
    )
ORDER BY
    years_since_release DESC, md.production_year DESC;
