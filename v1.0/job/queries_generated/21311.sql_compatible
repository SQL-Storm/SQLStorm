
WITH ranked_movies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(c.id) DESC) AS rank_by_cast_count,
        COUNT(c.id) AS cast_count,
        AVG(CASE WHEN ci.note IS NOT NULL THEN 1 ELSE 0 END) AS avg_has_note
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.movie_id = c.movie_id
    LEFT JOIN 
        complete_cast cc ON t.id = cc.movie_id
    LEFT JOIN 
        person_info pi ON c.person_id = pi.person_id
    LEFT JOIN 
        info_type it ON pi.info_type_id = it.id
    GROUP BY 
        t.id, t.title, t.production_year
),
top_movies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.cast_count,
        rm.avg_has_note
    FROM 
        ranked_movies rm
    WHERE 
        rm.rank_by_cast_count <= 5
)

SELECT 
    tm.title,
    tm.production_year,
    tm.cast_count,
    COALESCE(NULLIF(tm.avg_has_note, 0), 'No notes available') AS note_availability,
    STRING_AGG(DISTINCT n.name, ', ') AS associated_names
FROM 
    top_movies tm
LEFT JOIN 
    aka_name n ON n.person_id IN (SELECT c.person_id FROM cast_info c WHERE c.movie_id = tm.movie_id)
GROUP BY 
    tm.movie_id, tm.title, tm.production_year, tm.cast_count, tm.avg_has_note
ORDER BY 
    tm.production_year DESC, 
    tm.cast_count DESC;
