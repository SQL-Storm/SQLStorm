
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title AS movie_title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS total_cast,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
), FilteredMovies AS (
    SELECT
        rm.movie_id,
        rm.movie_title,
        rm.production_year,
        rm.total_cast
    FROM 
        RankedMovies rm
    WHERE 
        rm.total_cast > 5 AND rm.production_year > 2000
), MovieInfo AS (
    SELECT 
        f.movie_id,
        STRING_AGG(m.info, ', ') AS info_notes
    FROM 
        movie_info m
    JOIN 
        FilteredMovies f ON m.movie_id = f.movie_id
    GROUP BY 
        f.movie_id
), NullCheck AS (
    SELECT 
        f.movie_id,
        COALESCE(mi.info_notes, 'No additional info') AS info_notes,
        CASE
            WHEN fm.total_cast IS NULL THEN 'No cast found'
            ELSE 'Cast included'
        END AS cast_status
    FROM 
        FilteredMovies fm
    LEFT JOIN 
        MovieInfo mi ON fm.movie_id = mi.movie_id
)
SELECT 
    n.movie_id,
    t.title AS movie_title,
    n.info_notes,
    n.cast_status,
    COUNT(DISTINCT k.keyword) AS keyword_count
FROM 
    NullCheck n
JOIN 
    aka_title t ON n.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON n.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
WHERE 
    (n.cast_status = 'Cast included' OR n.cast_status IS NULL)
    AND (n.info_notes LIKE '%action%' OR k.keyword IS NOT NULL)
GROUP BY 
    n.movie_id, t.title, n.info_notes, n.cast_status
HAVING 
    COUNT(DISTINCT k.id) > 0
ORDER BY 
    n.cast_status DESC, n.movie_id ASC;
