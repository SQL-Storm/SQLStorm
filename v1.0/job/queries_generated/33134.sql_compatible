
WITH RECURSIVE ActorHierarchy AS (
    SELECT
        c.movie_id,
        ca.person_id,
        1 AS hierarchy_level
    FROM
        cast_info AS c
    JOIN
        aka_name AS ca ON c.person_id = ca.person_id
    WHERE
        ca.name LIKE 'A%'  

    UNION ALL

    SELECT
        m.movie_id,
        c.person_id,
        ah.hierarchy_level + 1
    FROM
        cast_info AS c
    JOIN
        ActorHierarchy AS ah ON c.movie_id = ah.movie_id
    JOIN
        movie_link AS ml ON c.movie_id = ml.movie_id
    JOIN
        title AS m ON ml.linked_movie_id = m.id 
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    t.production_year,
    COUNT(DISTINCT c2.person_id) AS co_stars,
    AVG(CAST(mi.info AS numeric)) AS avg_rating,
    MAX(mi.info) AS best_review,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords
FROM 
    ActorHierarchy AS ah
JOIN 
    aka_name AS a ON ah.person_id = a.person_id
JOIN 
    aka_title AS at ON ah.movie_id = at.movie_id
JOIN 
    title AS t ON at.movie_id = t.id
LEFT JOIN 
    cast_info AS c2 ON c2.movie_id = t.id
LEFT JOIN 
    movie_info AS mi ON mi.movie_id = t.id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'rating')
LEFT JOIN 
    movie_keyword AS mk ON mk.movie_id = t.id
LEFT JOIN 
    keyword AS kw ON mk.keyword_id = kw.id
WHERE 
    t.production_year >= 2000 
    AND (t.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE '%Drama%') 
    OR EXISTS (SELECT 1 FROM movie_companies mc WHERE mc.movie_id = t.id AND mc.company_id IS NOT NULL))
GROUP BY 
    a.name, t.title, t.production_year
ORDER BY 
    avg_rating DESC, co_stars DESC
LIMIT 10;
