WITH RECURSIVE cast_hierarchy AS (
    SELECT 
        c.movie_id,
        c.person_id,
        COALESCE(a.name, 'Unknown') AS actor_name,
        1 AS level
    FROM
        cast_info c
    LEFT JOIN aka_name a ON c.person_id = a.person_id

    UNION ALL

    SELECT 
        ch.movie_id,
        c.person_id,
        COALESCE(a.name, 'Unknown') AS actor_name,
        level + 1
    FROM
        cast_hierarchy ch
    JOIN cast_info c ON ch.movie_id = c.movie_id AND ch.person_id <> c.person_id
    LEFT JOIN aka_name a ON c.person_id = a.person_id
    WHERE
        ch.level < 5  
),

top_movies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        COUNT(DISTINCT c.person_id) AS actor_count,
        MAX(t.production_year) OVER() AS max_year
    FROM 
        title t
    LEFT JOIN cast_info c ON t.id = c.movie_id
    WHERE 
        t.production_year IS NOT NULL
    GROUP BY 
        t.id
    HAVING 
        COUNT(DISTINCT c.person_id) > 5
),

keyword_count AS (
    SELECT 
        mk.movie_id,
        COUNT(mk.keyword_id) AS count_keywords
    FROM 
        movie_keyword mk
    GROUP BY 
        mk.movie_id
)

SELECT 
    tm.title,
    tm.production_year,
    COALESCE(kc.count_keywords, 0) AS keyword_count,
    th.actor_count,
    CASE 
        WHEN tm.production_year BETWEEN 2000 AND 2020 THEN '21st Century'
        WHEN tm.production_year < 2000 THEN '20th Century'
        ELSE 'Future'
    END AS era,
    CASE 
        WHEN tm.production_year = max_year THEN 'Recent Movie'
        ELSE 'Older Movie'
    END AS recency
FROM 
    top_movies tm
LEFT JOIN keyword_count kc ON tm.movie_id = kc.movie_id
JOIN (
    SELECT 
        movie_id,
        STRING_AGG(actor_name, ', ') AS actors
    FROM 
        cast_hierarchy
    GROUP BY 
        movie_id
) th ON tm.movie_id = th.movie_id
ORDER BY 
    tm.actor_count DESC, 
    tm.production_year ASC;