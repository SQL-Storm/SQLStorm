
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS depth
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL

    UNION ALL

    SELECT 
        mh.movie_id,
        t.title,
        t.production_year,
        mh.depth + 1
    FROM
        MovieHierarchy mh
    JOIN movie_link ml ON ml.movie_id = mh.movie_id
    JOIN aka_title t ON t.id = ml.linked_movie_id
),

FilteredTitles AS (
    SELECT 
        DISTINCT m.id,
        m.title,
        m.production_year,
        COALESCE(mk.keyword, 'No Keywords') AS keyword
    FROM 
        aka_title m
    LEFT JOIN movie_keyword mk ON mk.movie_id = m.id
    WHERE 
        m.production_year >= 2000
        AND m.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE '%Drama%')
        AND m.id NOT IN (
            SELECT 
                movie_id 
            FROM 
                movie_info 
            WHERE 
                info_type_id IN (SELECT id FROM info_type WHERE info = 'Documentary')
        )
),

CastingDetails AS (
    SELECT 
        c.movie_id,
        COUNT(DISTINCT c.person_id) AS total_cast,
        MAX(CASE WHEN r.role = 'Director' THEN c.person_id END) AS director_id
    FROM 
        cast_info c
    JOIN role_type r ON c.role_id = r.id
    GROUP BY 
        c.movie_id
)

SELECT 
    ft.title,
    ft.production_year,
    mh.depth,
    CASE 
        WHEN cd.total_cast IS NULL THEN 'Unknown'
        ELSE CAST(cd.total_cast AS TEXT)
    END AS total_cast,
    (SELECT 
        ak.name 
     FROM aka_name ak 
     WHERE ak.person_id = cd.director_id 
     LIMIT 1) AS director_name
FROM 
    FilteredTitles ft
LEFT JOIN 
    MovieHierarchy mh ON mh.movie_id = ft.id
LEFT JOIN 
    CastingDetails cd ON cd.movie_id = ft.id
WHERE 
    ft.keyword IS NOT NULL
GROUP BY 
    ft.title,
    ft.production_year,
    mh.depth,
    cd.total_cast,
    cd.director_id
ORDER BY 
    ft.production_year DESC, 
    mh.depth ASC, 
    ft.title;
