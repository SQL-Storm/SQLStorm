
WITH RecursiveActorTitles AS (
    SELECT 
        a.person_id,
        a.name AS actor_name,
        t.title AS movie_title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY t.production_year DESC) AS title_rank
    FROM 
        aka_name a
    JOIN 
        cast_info c ON a.person_id = c.person_id
    JOIN 
        aka_title t ON c.movie_id = t.movie_id
),
MovieRoles AS (
    SELECT 
        c.movie_id,
        r.role AS role_type,
        COUNT(*) AS role_count
    FROM 
        cast_info c
    JOIN 
        role_type r ON c.role_id = r.id
    GROUP BY 
        c.movie_id, r.role
),
TopMovies AS (
    SELECT 
        rt.actor_name,
        rt.movie_title,
        rt.production_year,
        mr.role_type,
        mr.role_count,
        ROW_NUMBER() OVER (PARTITION BY rt.actor_name ORDER BY rt.production_year DESC) AS movie_rank
    FROM 
        RecursiveActorTitles rt
    LEFT JOIN 
        MovieRoles mr ON rt.movie_title = mr.movie_id
    WHERE 
        rt.production_year > (SELECT MAX(production_year) - 10 FROM aka_title)
)

SELECT 
    t.actor_name,
    t.movie_title,
    t.production_year,
    COALESCE(t.role_type, 'No Role Assigned') AS role_type,
    CASE 
        WHEN t.role_count IS NULL THEN 'No Roles' 
        WHEN t.role_count > 10 THEN 'Veteran Actor' 
        ELSE 'Emerging Actor' 
    END AS actor_status
FROM 
    TopMovies t
WHERE 
    t.movie_rank <= 5 
    AND (t.role_type IS NOT NULL OR t.actor_name IS NOT NULL)
ORDER BY 
    t.actor_name, t.production_year DESC
LIMIT 10 OFFSET 0;
