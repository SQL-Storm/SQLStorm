WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS depth,
        CAST(mt.title AS VARCHAR(255)) AS full_hierarchy
    FROM 
        aka_title mt
    WHERE 
        mt.production_year >= 2000

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        mh.depth + 1,
        CAST(mh.full_hierarchy || ' -> ' || m.title AS VARCHAR(255)) AS full_hierarchy
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
    WHERE 
        mm.production_year < 2000
        AND mh.depth < 5 
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.depth,
    mh.full_hierarchy,
    COALESCE(CAST(NULLIF(per.info, '') AS TEXT), 'No Info') AS person_info,
    COUNT(DISTINCT ci.person_id) OVER (PARTITION BY mh.movie_id) AS actor_count,
    STRING_AGG(DISTINCT cn.name, ', ') AS character_names
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON cc.subject_id = ci.person_id
LEFT JOIN 
    aka_name cn ON ci.person_id = cn.person_id
LEFT JOIN 
    person_info per ON cnt.person_id = per.person_id
WHERE 
    mh.kind_id = (SELECT kt.id FROM kind_type kt WHERE kt.kind = 'Movie')
    AND (mh.production_year BETWEEN 2000 AND 2023 OR mh.production_year IS NULL)
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.depth, mh.full_hierarchy, per.info
ORDER BY 
    mh.production_year DESC, mh.depth ASC;