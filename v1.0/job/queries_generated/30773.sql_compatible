
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level
    FROM 
        aka_title AS mt
    WHERE 
        mt.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        al.title,
        al.production_year,
        mh.level + 1
    FROM 
        movie_link AS ml
    JOIN 
        aka_title AS al ON ml.linked_movie_id = al.id
    JOIN 
        MovieHierarchy AS mh ON ml.movie_id = mh.movie_id
)

SELECT 
    an.name AS actor_name,
    at.title AS movie_title,
    mh.production_year,
    COUNT(cc.id) AS cast_count,
    STRING_AGG(DISTINCT k.keyword, ', ') AS movie_keywords,
    DENSE_RANK() OVER (PARTITION BY mh.production_year ORDER BY COUNT(cc.id) DESC) AS rank_by_cast_count,
    CASE 
        WHEN mh.production_year IS NULL THEN 'Unknown Year'
        ELSE CAST(mh.production_year AS VARCHAR(255))
    END AS production_year_display
FROM 
    cast_info AS cc
JOIN 
    aka_name AS an ON cc.person_id = an.person_id
JOIN 
    MovieHierarchy AS mh ON cc.movie_id = mh.movie_id
LEFT JOIN 
    movie_keyword AS mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword AS k ON mk.keyword_id = k.id
GROUP BY 
    an.name, at.title, mh.production_year
HAVING 
    COUNT(cc.id) > 1
ORDER BY 
    mh.production_year DESC, 
    cast_count DESC;
