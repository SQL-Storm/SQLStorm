WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level 
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = 1  

    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1 
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    ak.name AS actor_name,
    at.title AS movie_title,
    a.production_year AS release_year,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    STRING_AGG(DISTINCT mk.keyword, ', ') AS keywords_list,
    COALESCE(mh.level, 0) AS hierarchy_level,
    AVG(person_info.info_type_id) FILTER (WHERE person_info.info_type_id IS NOT NULL) AS average_info_type
FROM 
    cast_info ci
JOIN 
    aka_name ak ON ci.person_id = ak.person_id
JOIN 
    aka_title at ON ci.movie_id = at.id
LEFT JOIN 
    movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN 
    movie_hierarchy mh ON at.id = mh.movie_id
LEFT JOIN 
    person_info ON ak.person_id = person_info.person_id
WHERE 
    at.producer_year >= 2000 AND 
    ak.name IS NOT NULL
GROUP BY 
    ak.name, at.title, a.production_year, mh.level
HAVING 
    COUNT(DISTINCT mk.keyword) > 1
ORDER BY 
    total_keywords DESC, actor_name
LIMIT 100;