WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        mt.id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        mh.level + 1
    FROM 
        aka_title mt
    INNER JOIN 
        movie_link ml ON ml.movie_id = mh.movie_id
    INNER JOIN 
        aka_title sub_mt ON sub_mt.id = ml.linked_movie_id
)
, cast_with_roles AS (
    SELECT 
        ci.movie_id,
        ci.person_id,
        ci.role_id,
        rt.role,
        ROW_NUMBER() OVER(PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS role_order
    FROM 
        cast_info ci
    LEFT JOIN 
        role_type rt ON ci.role_id = rt.id
)
SELECT DISTINCT
    mh.title AS Movie_Title,
    mh.production_year AS Production_Year,
    COUNT(DISTINCT cwr.person_id) AS Total_Cast_Members,
    STRING_AGG(DISTINCT cwr.role, ', ') AS Roles,
    DECODE(NULLIF(mh.kind_id, 0), NULL, 'Unknown', kt.kind) AS Kind,
    COUNT(DISTINCT mk.keyword) FILTER (WHERE mk.keyword IS NOT NULL) AS Total_Keywords,
    AVG(EXTRACT(YEAR FROM cast('2024-10-01' as date)) - mh.production_year) AS Average_Age
FROM 
    movie_hierarchy mh
INNER JOIN 
    cast_with_roles cwr ON cwr.movie_id = mh.movie_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mh.movie_id
LEFT JOIN 
    kind_type kt ON mh.kind_id = kt.id
WHERE 
    mh.production_year >= 2000 
    AND (mh.title ILIKE '%Action%' OR mh.title ILIKE '%Drama%')
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.kind_id
ORDER BY 
    Average_Age DESC
LIMIT 100;