
WITH RECURSIVE movie_hierarchy AS (
    
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        NULL AS parent_id,
        0 AS level
    FROM title t
    WHERE t.episode_of_id IS NULL
    
    UNION ALL

    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        mh.movie_id AS parent_id,
        mh.level + 1
    FROM title t
    JOIN movie_hierarchy mh ON t.episode_of_id = mh.movie_id
),

cast_data AS (
    SELECT
        c.movie_id,
        a.name AS actor_name,
        c.nr_order,
        ROW_NUMBER() OVER (PARTITION BY c.movie_id ORDER BY c.nr_order) AS actor_order
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
),

keywords_agg AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM movie_keyword mk
    JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY mk.movie_id
)
SELECT
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(k.keywords, 'No Keywords') AS keywords,
    COALESCE(ARRAY_AGG(DISTINCT cd.actor_name ORDER BY cd.actor_order), ARRAY['No Cast']) AS cast
FROM movie_hierarchy mh
LEFT JOIN keywords_agg k ON mh.movie_id = k.movie_id
LEFT JOIN cast_data cd ON mh.movie_id = cd.movie_id
GROUP BY mh.movie_id, mh.title, mh.production_year, k.keywords
HAVING COUNT(DISTINCT cd.actor_name) > 0 OR k.keywords IS NULL
ORDER BY mh.production_year DESC, mh.title
LIMIT 50;
