WITH RankedTitles AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS title_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
ActorInfo AS (
    SELECT 
        a.id AS actor_id,
        a.name AS actor_name,
        ci.movie_id,
        COUNT(DISTINCT cc.role_id) AS role_count,
        MAX(CASE WHEN ci.note IS NULL THEN 'No Notes' ELSE ci.note END) AS role_note
    FROM 
        aka_name a
    JOIN 
        cast_info ci ON a.person_id = ci.person_id
    LEFT JOIN 
        comp_cast_type ct ON ci.person_role_id = ct.id
    GROUP BY 
        a.id, a.name, ci.movie_id
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    rt.title,
    rt.production_year,
    ai.actor_name,
    ai.role_count,
    ai.role_note,
    COALESCE(mk.keywords, 'No Keywords') AS movie_keywords,
    CASE 
        WHEN rt.production_year IS NOT NULL THEN 'Produced'
        ELSE 'Unknown Year'
    END AS production_status,
    CASE 
        WHEN ai.role_count > 2 THEN 'Featured Actor'
        ELSE 'Supporting Actor'
    END AS actor_type
FROM 
    RankedTitles rt
LEFT JOIN 
    ActorInfo ai ON ai.movie_id = rt.title_id
LEFT JOIN 
    MovieKeywords mk ON mk.movie_id = rt.title_id
WHERE 
    rt.title_rank <= 10
    AND (ai.role_count IS NULL OR ai.role_count > 0)
ORDER BY 
    rt.production_year DESC, 
    ai.role_count DESC NULLS LAST;