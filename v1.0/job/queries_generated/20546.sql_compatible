
WITH RECURSIVE MovieRecursive AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        1 AS depth,
        CAST(t.title AS VARCHAR) AS full_path
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL

    UNION ALL

    SELECT 
        m.linked_movie_id,
        a.title,
        a.production_year,
        mr.depth + 1,
        CAST(mr.full_path || ' -> ' || a.title AS VARCHAR)
    FROM 
        MovieRecursive mr
    JOIN 
        movie_link m ON mr.movie_id = m.movie_id
    JOIN 
        aka_title a ON m.linked_movie_id = a.id
),

ActorMovies AS (
    SELECT 
        ca.person_id,
        ca.movie_id,
        ak.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY ca.person_id ORDER BY a.id DESC) AS rn
    FROM 
        cast_info ca
    JOIN 
        aka_name ak ON ak.person_id = ca.person_id
    JOIN 
        aka_title a ON a.id = ca.movie_id
),

FilteredActors AS (
    SELECT 
        ma.person_id,
        ma.actor_name,
        ma.movie_id,
        COUNT(m.movie_id) AS movie_count
    FROM 
        ActorMovies ma
    JOIN 
        MovieRecursive m ON ma.movie_id = m.movie_id
    WHERE 
        m.depth <= 3
    GROUP BY 
        ma.person_id, ma.actor_name, ma.movie_id
    HAVING 
        COUNT(m.movie_id) >= ALL(SELECT COUNT(*) FROM ActorMovies GROUP BY person_id)
)

SELECT 
    f.actor_name,
    f.movie_id,
    f.movie_count,
    COALESCE(m.title, 'No Title') AS movie_title,
    COALESCE(m.production_year, 0) AS movie_year,
    (SELECT COUNT(*)
     FROM link_type lt
     JOIN movie_link ml ON lt.id = ml.link_type_id
     WHERE ml.movie_id = f.movie_id) AS link_count,
    CASE
        WHEN f.movie_count IS NULL THEN 'Unknown'
        WHEN f.movie_count = 1 THEN 'Solo Actor'
        ELSE 'Group Actor'
    END AS actor_type
FROM 
    FilteredActors f
LEFT JOIN 
    aka_title m ON f.movie_id = m.id
WHERE 
    f.actor_name IS NOT NULL
ORDER BY 
    f.movie_count DESC, m.production_year DESC
LIMIT 10;
