WITH RECURSIVE movie_hierarchy AS (
    SELECT mt.id AS movie_id, mt.title, 1 AS depth
    FROM aka_title mt
    WHERE mt.production_year >= 2000 
    
    UNION ALL
    
    SELECT mv.id AS movie_id, mv.title, mh.depth + 1
    FROM movie_link ml
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN title mv ON ml.linked_movie_id = mv.id
)
SELECT
    ak.name AS actor_name,
    at.title AS movie_title,
    string_agg(DISTINCT kk.keyword, ', ') AS keywords,
    AVG(pi.info::numeric) AS avg_movie_rating,
    COUNT(DISTINCT c.id) AS total_roles,
    ROW_NUMBER() OVER (PARTITION BY ak.name ORDER BY COUNT(DISTINCT c.id) DESC) AS role_rank,
    CASE 
        WHEN AVG(pi.info::numeric) IS NULL THEN 'No Rating'
        ELSE 'Rated'
    END AS rating_status,
    mh.depth AS movie_depth
FROM
    aka_name ak
JOIN 
    cast_info c ON ak.person_id = c.person_id
JOIN 
    aka_title at ON c.movie_id = at.id
LEFT JOIN 
    movie_keyword mk ON at.id = mk.movie_id
LEFT JOIN 
    keyword kk ON mk.keyword_id = kk.id
LEFT JOIN 
    movie_info mi ON at.id = mi.movie_id
LEFT JOIN 
    info_type it ON mi.info_type_id = it.id
LEFT JOIN 
    person_info pi ON ak.person_id = pi.person_id
LEFT JOIN 
    movie_hierarchy mh ON at.id = mh.movie_id
WHERE
    ak.name IS NOT NULL 
GROUP BY
    ak.name, at.title, mh.depth
HAVING
    COUNT(DISTINCT c.id) > 1 
ORDER BY
    actor_name, AVG(pi.info::numeric) DESC;