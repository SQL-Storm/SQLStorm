WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.id) AS year_rank,
        COUNT(m.id) FILTER (WHERE m.company_type_id IS NOT NULL) OVER (PARTITION BY t.id) AS company_count,
        STRING_AGG(DISTINCT c.kind, ', ') FILTER (WHERE c.kind IS NOT NULL) OVER (PARTITION BY t.id) AS company_kinds
    FROM 
        aka_title t
    LEFT JOIN 
        movie_companies m ON t.movie_id = m.movie_id 
    LEFT JOIN 
        company_type c ON m.company_type_id = c.id
    WHERE 
        t.production_year >= 2000 AND t.production_year <= 2023
),
FilteredMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        CASE WHEN rm.company_count BETWEEN 1 AND 5 THEN 'Low'
             WHEN rm.company_count > 5 AND rm.company_count <= 10 THEN 'Medium'
             ELSE 'High' END AS company_density,
        rm.company_kinds 
    FROM 
        RankedMovies rm
    WHERE 
        rm.year_rank <= 10
),
AggMovieInfo AS (
    SELECT 
        fm.movie_id,
        ARRAY_AGG(DISTINCT mi.info ORDER BY mi.info_type_id) AS movie_info
    FROM 
        FilteredMovies fm
    LEFT JOIN 
        movie_info mi ON fm.movie_id = mi.movie_id
    GROUP BY 
        fm.movie_id
)
SELECT 
    fm.title,
    fm.production_year,
    fm.company_density,
    COALESCE(ami.movie_info, '{}') AS movie_info,
    CASE 
        WHEN CHAR_LENGTH(fm.title) > 50 THEN LEFT(fm.title, 50) || '...'
        ELSE fm.title 
    END AS short_title,
    NULLIF(fm.company_kinds, '') AS company_kinds
FROM 
    FilteredMovies fm
LEFT JOIN 
    AggMovieInfo ami ON fm.movie_id = ami.movie_id
WHERE 
    (fm.title ILIKE '%adventure%' OR fm.title ILIKE '%action%')
    AND (fm.company_density IS NOT NULL)
ORDER BY 
    fm.production_year DESC,
    fm.company_density ASC;