
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        1 AS level,
        mt.production_year,
        NULL AS parent_movie_id
    FROM 
        aka_title mt 
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id,
        at.title,
        mh.level + 1,
        at.production_year,
        mh.movie_id AS parent_movie_id
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(aka.name, 'Unknown') AS actor_name,
    COUNT(DISTINCT cc.movie_id) OVER (PARTITION BY mh.movie_id) AS appearance_count,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    CASE 
        WHEN mh.level > 1 THEN 'Sequel'
        ELSE 'Original'
    END AS movie_type
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name aka ON ci.person_id = aka.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
WHERE 
    mh.production_year > 2000
AND 
    (aka.name IS NOT NULL OR ci.note IS NOT NULL)
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, aka.name, mh.level
ORDER BY 
    mh.production_year DESC, appearance_count DESC
LIMIT 100;
