
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS rank_in_year,
        COUNT(k.keyword) OVER (PARTITION BY t.id) AS keyword_count,
        MAX(CASE WHEN ci.role_id IS NOT NULL THEN ci.nr_order ELSE NULL END) OVER (PARTITION BY t.id) AS highest_order_role
    FROM 
        aka_title t
    LEFT JOIN 
        movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    LEFT JOIN 
        movie_companies mc ON t.id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    LEFT JOIN 
        cast_info ci ON t.id = ci.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
FilteredMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.rank_in_year,
        rm.keyword_count,
        rm.highest_order_role
    FROM 
        RankedMovies rm
    WHERE 
        rm.production_year IS NOT NULL 
        AND rm.rank_in_year <= 3
        AND rm.keyword_count > 0
        AND COALESCE(rm.highest_order_role, 0) > 0
),
AggregateRoles AS (
    SELECT 
        f.movie_id,
        COUNT(DISTINCT ci.person_id) AS total_actors,
        STRING_AGG(DISTINCT cn.name, ', ') AS producing_companies
    FROM 
        FilteredMovies f
    LEFT JOIN 
        cast_info ci ON f.movie_id = ci.movie_id
    LEFT JOIN 
        movie_companies mc ON f.movie_id = mc.movie_id
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    GROUP BY 
        f.movie_id
)
SELECT 
    f.title,
    f.production_year,
    ar.total_actors,
    ar.producing_companies,
    CASE 
        WHEN ar.total_actors = 0 THEN 'No actors'
        WHEN ar.total_actors BETWEEN 1 AND 5 THEN 'Few actors'
        ELSE 'Many actors' 
    END AS actor_description
FROM 
    FilteredMovies f
JOIN 
    AggregateRoles ar ON f.movie_id = ar.movie_id
ORDER BY 
    f.production_year DESC,
    f.title;
