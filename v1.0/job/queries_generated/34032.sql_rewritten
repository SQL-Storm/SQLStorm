WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.movie_id,
        mt.title,
        mt.production_year,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    UNION ALL
    SELECT 
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        depth + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title mt ON ml.movie_id = mt.movie_id
    JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.movie_id
),
top_movies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT c.person_id) AS total_cast,
        RANK() OVER (PARTITION BY mh.depth ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM 
        movie_hierarchy mh
    LEFT JOIN 
        complete_cast cc ON cc.movie_id = mh.movie_id
    LEFT JOIN 
        cast_info c ON c.movie_id = mh.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year, mh.depth
),
actors_info AS (
    SELECT 
        ak.name AS actor_name,
        mc.movie_id,
        mk.keyword,
        c.nr_order,
        ROW_NUMBER() OVER (PARTITION BY mc.movie_id ORDER BY c.nr_order) AS actor_rank
    FROM 
        cast_info c
    JOIN 
        aka_name ak ON ak.person_id = c.person_id
    JOIN 
        movie_keyword mk ON mk.movie_id = c.movie_id
    JOIN 
        movie_companies mc ON mc.movie_id = c.movie_id
    WHERE 
        c.nr_order IS NOT NULL
)
SELECT 
    tm.title,
    tm.production_year,
    tm.total_cast,
    a.actor_name,
    a.keyword,
    (SELECT COUNT(*) 
     FROM movie_info mi 
     WHERE mi.movie_id = tm.movie_id 
       AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Synopsis')) AS synopsis_count,
    CASE 
        WHEN a.actor_rank IS NOT NULL THEN 'Ranked'
        ELSE 'Not Ranked'
    END AS actor_rank_status
FROM 
    top_movies tm
LEFT JOIN 
    actors_info a ON tm.movie_id = a.movie_id
WHERE 
    tm.rank <= 10
ORDER BY 
    tm.production_year DESC, 
    tm.total_cast DESC;