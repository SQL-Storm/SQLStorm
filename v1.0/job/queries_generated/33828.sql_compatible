
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        NULL AS parent_movie_id
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL 
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.movie_id AS parent_movie_id
    FROM 
        aka_title m
    INNER JOIN 
        MovieHierarchy mh ON m.episode_of_id = mh.movie_id
),
PopularGenres AS (
    SELECT 
        kt.keyword AS genre,
        COUNT(mk.movie_id) AS genre_count
    FROM 
        movie_keyword mk
    INNER JOIN 
        keyword kt ON mk.keyword_id = kt.id
    GROUP BY 
        kt.keyword
    HAVING 
        COUNT(mk.movie_id) > 20
),
CastMembers AS (
    SELECT 
        ci.movie_id,
        a.name,
        RANK() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS rank_order
    FROM 
        cast_info ci
    INNER JOIN 
        aka_name a ON ci.person_id = a.person_id
    WHERE 
        ci.nr_order IS NOT NULL
),
MovieDetails AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COALESCE(p.genre, 'Unknown') AS genre,
        STRING_AGG(DISTINCT cm.name, ', ') AS cast_names
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        PopularGenres p ON mh.title ILIKE '%' || p.genre || '%'
    LEFT JOIN 
        CastMembers cm ON mh.movie_id = cm.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year
)
SELECT 
    md.title,
    md.production_year,
    md.genre,
    md.cast_names,
    COUNT(DISTINCT mk.keyword_id) AS keyword_count,
    CASE 
        WHEN md.production_year < 2000 THEN 'Classic'
        WHEN md.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Recent'
    END AS era
FROM 
    MovieDetails md
LEFT JOIN 
    movie_keyword mk ON md.movie_id = mk.movie_id
GROUP BY 
    md.title, md.production_year, md.genre, md.cast_names
ORDER BY 
    md.production_year DESC,
    keyword_count DESC
LIMIT 50;
