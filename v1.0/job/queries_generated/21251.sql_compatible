
WITH ranked_movies AS (
    SELECT 
        t.title,
        t.production_year,
        COUNT(ci.person_id) AS cast_count,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(ci.person_id) DESC) AS rank_by_cast,
        MAX(CASE WHEN ci.role_id IS NOT NULL THEN 1 ELSE 0 END) AS has_roles
    FROM 
        aka_title t
    LEFT JOIN 
        cast_info ci ON t.movie_id = ci.movie_id
    GROUP BY 
        t.title, t.production_year
),
top_movies AS (
    SELECT 
        *,
        CASE 
            WHEN rank_by_cast <= 5 THEN 'Top 5'
            WHEN rank_by_cast <= 10 THEN 'Top 10'
            ELSE 'Other'
        END AS cast_category
    FROM 
        ranked_movies
),
company_stats AS (
    SELECT 
        mc.movie_id,
        COUNT(DISTINCT mc.company_id) AS company_count,
        COUNT(DISTINCT ct.kind) FILTER (WHERE LOWER(ct.kind) LIKE '%production%') AS production_company_count
    FROM 
        movie_companies mc
    JOIN 
        company_type ct ON mc.company_type_id = ct.id
    GROUP BY 
        mc.movie_id
),
movie_details AS (
    SELECT 
        tm.title,
        tm.production_year,
        cs.company_count,
        cs.production_company_count,
        tm.cast_category,
        tm.has_roles
    FROM 
        top_movies tm
    LEFT JOIN 
        company_stats cs ON tm.movie_id = cs.movie_id
)
SELECT 
    md.title,
    md.production_year,
    COALESCE(md.company_count, 0) AS total_companies,
    COALESCE(md.production_company_count, 0) AS production_companies,
    md.cast_category,
    md.has_roles,
    CASE 
        WHEN md.has_roles = 1 THEN 'Has Roles' 
        ELSE 'No Roles' 
    END AS role_description
FROM 
    movie_details md
WHERE 
    md.production_year >= 2000
    AND md.cast_category != 'Other'
ORDER BY 
    md.production_year DESC, total_companies DESC
LIMIT 100;
