
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        ct.movie_id,
        ct.subject_id,
        1 AS depth
    FROM 
        complete_cast ct
    WHERE 
        ct.status_id IS NULL  
    UNION ALL
    SELECT 
        mc.linked_movie_id,
        mh.subject_id,
        mh.depth + 1 
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
)

SELECT 
    ak.name AS actor_name,
    ti.title AS movie_title,
    COUNT(DISTINCT ci.person_id) OVER (PARTITION BY ti.id) AS actor_count,
    COALESCE(AVG(mk.keyword_id), 0) AS average_keyword_id,
    COUNT(DISTINCT ch.id) AS char_name_count,
    ROW_NUMBER() OVER (PARTITION BY ti.id ORDER BY ak.name) AS actor_position,
    CASE 
        WHEN ti.production_year < 2000 THEN 'Classic'
        WHEN ti.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Recent'
    END AS era
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    title ti ON ci.movie_id = ti.id
LEFT JOIN 
    char_name ch ON ak.imdb_index = ch.imdb_index
LEFT JOIN 
    movie_keyword mk ON ti.id = mk.movie_id
LEFT JOIN 
    MovieHierarchy mh ON ti.id = mh.movie_id
WHERE 
    ak.name IS NOT NULL 
    AND (ti.kind_id IN (SELECT id FROM kind_type WHERE kind = 'feature') 
    OR ti.kind_id IS NULL) 
    AND mh.depth <= 3  
GROUP BY 
    ak.name, ti.title, ti.id 
HAVING 
    COUNT(DISTINCT ci.movie_id) > 1  
ORDER BY 
    actor_count DESC, actor_position;
