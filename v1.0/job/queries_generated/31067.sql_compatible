
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id, 
        mt.title, 
        mt.production_year, 
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id AS movie_id, 
        at.title, 
        at.production_year, 
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COUNT(DISTINCT mc.company_id) AS num_companies,
    STRING_AGG(DISTINCT c.kind, ', ') AS company_kinds,
    CONCAT('Movie: ', mt.title, ' (', mt.production_year, ')') AS detailed_title,
    CASE 
        WHEN COUNT(DISTINCT mk.keyword_id) > 5 THEN 'This movie has many keywords'
        ELSE 'Few keywords'
    END AS keyword_evaluation,
    ROW_NUMBER() OVER(PARTITION BY ak.person_id ORDER BY mt.production_year DESC) AS movie_rank
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    complete_cast cc ON ci.movie_id = cc.movie_id
JOIN 
    movie_companies mc ON ci.movie_id = mc.movie_id
JOIN 
    movie_keyword mk ON mk.movie_id = ci.movie_id
JOIN 
    movie_hierarchy mh ON ci.movie_id = mh.movie_id
JOIN 
    aka_title mt ON mh.movie_id = mt.id
LEFT JOIN 
    company_type c ON mc.company_type_id = c.id
WHERE 
    ak.name IS NOT NULL
    AND mt.production_year >= 2000
    AND ci.note IS NULL
GROUP BY 
    ak.name, mt.title, mt.production_year
ORDER BY 
    mt.production_year DESC, num_companies DESC;
