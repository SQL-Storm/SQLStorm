
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM 
        aka_title mt
    JOIN 
        movie_link ml ON mt.id = ml.linked_movie_id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)
SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COALESCE(GROUP_CONCAT(DISTINCT kw.keyword), 'No Keywords') AS keywords,
    COUNT(DISTINCT cc.person_id) AS total_cast_members,
    AVG(CASE WHEN pi.info ~ '^[0-9]+$' THEN 1 ELSE 0 END) AS has_numeric_info,
    FIRST_VALUE(cc.nr_order) OVER (PARTITION BY ak.id ORDER BY cc.nr_order) AS first_role_order
FROM 
    aka_name ak
JOIN 
    cast_info cc ON ak.person_id = cc.person_id
JOIN 
    MovieHierarchy mh ON cc.movie_id = mh.movie_id
JOIN 
    aka_title mt ON mh.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mt.id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    person_info pi ON ak.person_id = pi.person_id
WHERE 
    mt.production_year >= 2000
    AND ak.name NOT LIKE '%Unknown%'
GROUP BY 
    ak.id, mt.title, mt.production_year
HAVING 
    COUNT(DISTINCT cc.person_id) > 1
ORDER BY 
    mt.production_year DESC, total_cast_members DESC;
