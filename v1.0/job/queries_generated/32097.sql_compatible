
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id, 
        t.title, 
        1 AS depth
    FROM 
        aka_title t
    JOIN 
        movie_companies mc ON t.id = mc.movie_id
    WHERE 
        t.production_year >= 2000
    UNION ALL
    SELECT 
        mh.movie_id,
        t.title,
        mh.depth + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title t ON ml.linked_movie_id = t.id
)

SELECT 
    a.name AS actor_name,
    m.title AS movie_title,
    m.production_year,
    COUNT(DISTINCT r.id) AS role_count,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    ROW_NUMBER() OVER (PARTITION BY a.id ORDER BY m.production_year DESC) AS movie_rank,
    CASE 
        WHEN a.surname_pcode IS NULL THEN 'Unknown Surname' 
        ELSE a.surname_pcode 
    END AS surname_code
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    MovieHierarchy m ON ci.movie_id = m.movie_id
LEFT JOIN 
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
JOIN 
    role_type r ON ci.role_id = r.id
WHERE 
    a.name IS NOT NULL
AND 
    (LOWER(a.name) LIKE '%smith%' OR LOWER(a.name) LIKE '%johnson%')
GROUP BY 
    a.id, a.name, m.title, m.production_year
HAVING 
    COUNT(DISTINCT k.id) > 0
ORDER BY 
    movie_rank, m.production_year DESC;
