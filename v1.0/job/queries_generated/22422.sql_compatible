
WITH RankedTitles AS (
    SELECT 
        a.id AS aka_id,
        a.name AS aka_name,
        t.title AS movie_title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY t.production_year DESC) AS rank_years
    FROM 
        aka_name a
    JOIN 
        aka_title t ON a.id = t.id
    WHERE 
        t.production_year IS NOT NULL
),
FilteredTitles AS (
    SELECT 
        rt.aka_id,
        rt.aka_name,
        rt.movie_title,
        rt.production_year
    FROM 
        RankedTitles rt
    WHERE 
        rt.rank_years <= 5
),
TitleKeyword AS (
    SELECT 
        mt.movie_id,
        k.keyword
    FROM 
        movie_keyword mt
    JOIN 
        keyword k ON mt.keyword_id = k.id
    GROUP BY 
        mt.movie_id, k.keyword
    HAVING 
        COUNT(k.id) > 3
),
CastWithRoles AS (
    SELECT 
        ci.movie_id,
        ci.person_id,
        MAX(rt.production_year) AS last_movie_year,
        STRING_AGG(DISTINCT r.role) AS roles_list
    FROM 
        cast_info ci
    JOIN 
        role_type r ON ci.role_id = r.id
    GROUP BY 
        ci.movie_id, ci.person_id
)
SELECT 
    DISTINCT 
    ft.aka_name,
    ft.movie_title,
    ft.production_year,
    COALESCE(tk.keyword, 'No relevant keywords') AS keyword,
    CASE 
        WHEN cw.roles_list IS NULL THEN 'No cast roles found'
        ELSE cw.roles_list
    END AS roles,
    CASE 
        WHEN ft.production_year < 2000 THEN 'Classic'
        WHEN ft.production_year BETWEEN 2000 AND 2010 THEN 'Modern'
        ELSE 'Recent'
    END AS movie_era
FROM 
    FilteredTitles ft
LEFT JOIN 
    TitleKeyword tk ON ft.movie_title = tk.keyword
LEFT JOIN 
    CastWithRoles cw ON ft.aka_id = cw.person_id
WHERE 
    ft.production_year != 2020
    AND (ft.movie_title ILIKE '%Sequel%' OR ft.movie_title ILIKE '%Prequel%')
ORDER BY 
    ft.production_year DESC,
    ft.aka_name;
