WITH RECURSIVE ActorHierarchy AS (
    SELECT ki.person_id, 
           a.name AS actor_name,
           1 AS level 
    FROM cast_info ci
    JOIN aka_name a ON ci.person_id = a.person_id
    JOIN aka_title at ON ci.movie_id = at.movie_id
    JOIN kind_type kt ON at.kind_id = kt.id
    WHERE kt.kind LIKE '%actor%'  
    UNION ALL
    SELECT ki.person_id, 
           a.name AS actor_name,
           ah.level + 1 AS level 
    FROM cast_info ci
    JOIN aka_name a ON ci.person_id = a.person_id
    JOIN movie_link ml ON ci.movie_id = ml.movie_id
    JOIN title t ON ml.linked_movie_id = t.id
    JOIN ActorHierarchy ah ON ci.movie_id = t.id
)
, CompanyMovies AS (
    SELECT mc.movie_id,
           c.name AS company_name,
           COUNT(DISTINCT mc.company_id) AS company_count
    FROM movie_companies mc
    JOIN company_name c ON mc.company_id = c.id
    GROUP BY mc.movie_id, c.name
),
MovieInfo AS (
    SELECT m.id AS movie_id,
           m.title,
           STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
           AVG(mi.info) FILTER (WHERE it.info = 'rating') AS average_rating
    FROM aka_title m
    LEFT JOIN movie_keyword mk ON m.id = mk.movie_id
    LEFT JOIN keyword kw ON mk.keyword_id = kw.id
    LEFT JOIN movie_info mi ON m.id = mi.movie_id
    LEFT JOIN info_type it ON mi.info_type_id = it.id
    GROUP BY m.id
)
SELECT ah.actor_name,
       mi.title,
       mi.keywords,
       cm.company_name,
       cm.company_count,
       COUNT(DISTINCT ah.person_id) OVER (PARTITION BY ah.actor_name) AS total_roles,
       ROW_NUMBER() OVER (PARTITION BY ah.actor_name ORDER BY mi.average_rating DESC) AS role_rank
FROM ActorHierarchy ah
JOIN MovieInfo mi ON ah.person_id IN (SELECT ci.person_id 
                                       FROM cast_info ci 
                                       WHERE ci.movie_id = mi.movie_id)
LEFT JOIN CompanyMovies cm ON mi.movie_id = cm.movie_id
WHERE mi.average_rating IS NOT NULL
  AND mi.keywords IS NOT NULL
ORDER BY ah.actor_name, role_rank;