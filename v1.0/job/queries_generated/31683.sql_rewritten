WITH RECURSIVE MovieHierarchy AS (
    
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        lm.linked_movie_id,
        1 AS depth
    FROM 
        title m
    LEFT JOIN 
        movie_link ml ON m.id = ml.movie_id
    LEFT JOIN 
        title lm ON ml.linked_movie_id = lm.id
    
    UNION ALL

    SELECT 
        mh.movie_id,
        mh.movie_title,
        ml.linked_movie_id,
        mh.depth + 1
    FROM 
        MovieHierarchy mh
    JOIN 
        movie_link ml ON mh.linked_movie_id = ml.movie_id
)

SELECT 
    a.name AS actor_name,
    t.title AS movie_title,
    COUNT(DISTINCT m.id) AS total_movies_linked,
    AVG(t.production_year) AS avg_release_year,
    STRING_AGG(DISTINCT k.keyword, ', ') AS keywords,
    COALESCE(CAST(NULLIF(pi.info, '') AS TEXT), 'No Info') AS info
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    title t ON ci.movie_id = t.id
LEFT JOIN 
    movie_keyword mk ON t.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    MovieHierarchy mh ON t.id = mh.movie_id
LEFT JOIN 
    person_info pi ON a.person_id = pi.person_id AND pi.info_type_id = (SELECT id FROM info_type WHERE info = 'bio')
WHERE 
    t.production_year >= 2000
    AND (t.kind_id IN (SELECT id FROM kind_type WHERE kind IN ('movie', 'short')))
    AND a.name IS NOT NULL
GROUP BY 
    a.name, t.id
HAVING 
    COUNT(DISTINCT m.id) > 5
ORDER BY 
    total_movies_linked DESC, avg_release_year ASC;