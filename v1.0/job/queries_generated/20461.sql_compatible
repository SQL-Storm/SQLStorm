
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year > 1990

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        at.kind_id,
        mh.depth + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
)

SELECT 
    mh.title AS Movie_Title,
    mh.production_year AS Production_Year,
    mh.depth AS Movie_Depth,
    COUNT(DISTINCT ci.person_id) AS Cast_Count,
    STRING_AGG(DISTINCT ak.name ORDER BY ak.name) AS Actor_Names,
    AVG(mk.keyword_length) AS Avg_Keyword_Length,
    CASE 
        WHEN COUNT(DISTINCT ci.person_id) > 50 THEN 'Large Cast'
        WHEN COUNT(DISTINCT ci.person_id) BETWEEN 20 AND 50 THEN 'Medium Cast'
        ELSE 'Small Cast'
    END AS Cast_Size_Category
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name ak ON ci.person_id = ak.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.depth
HAVING 
    COUNT(DISTINCT ci.person_id) > 5
    AND AVG(mk.keyword_length) IS NOT NULL
ORDER BY 
    Avg_Keyword_Length DESC,
    mh.production_year ASC
LIMIT 100;
