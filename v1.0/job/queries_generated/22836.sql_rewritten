WITH RecursiveActorStats AS (
    SELECT 
        c.person_id,
        a.name AS actor_name,
        COUNT(DISTINCT m.id) AS movie_count,
        AVG(CASE WHEN m.production_year IS NOT NULL THEN m.production_year ELSE 0 END) AS average_production_year,
        ROW_NUMBER() OVER(PARTITION BY a.name ORDER BY COUNT(DISTINCT m.id) DESC) AS rn
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
    JOIN aka_title m ON c.movie_id = m.movie_id
    WHERE m.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie') 
    GROUP BY c.person_id, a.name
),
TopActors AS (
    SELECT actor_name, movie_count, average_production_year 
    FROM RecursiveActorStats
    WHERE rn <= 5
),
MovieDetails AS (
    SELECT 
        t.title, 
        m.production_year,
        STRING_AGG(DISTINCT co.name, ', ') AS companies,
        COUNT(DISTINCT k.keyword) AS keyword_count
    FROM aka_title t
    LEFT JOIN movie_companies mc ON t.id = mc.movie_id
    LEFT JOIN company_name co ON mc.company_id = co.id
    LEFT JOIN movie_keyword mk ON t.id = mk.movie_id
    LEFT JOIN keyword k ON mk.keyword_id = k.id
    WHERE t.production_year IS NOT NULL
    GROUP BY t.title, m.production_year
),
FilteredMovies AS (
    SELECT 
        title, 
        production_year,
        companies,
        keyword_count,
        RANK() OVER(PARTITION BY production_year ORDER BY keyword_count DESC) AS rank_per_year
    FROM MovieDetails
    WHERE production_year IS NOT NULL AND keyword_count > 0
),
FinalOutput AS (
    SELECT 
        m.title,
        m.production_year,
        m.companies,
        m.keyword_count,
        a.actor_name
    FROM FilteredMovies m
    LEFT JOIN TopActors a ON m.keyword_count > 2 
    WHERE m.rank_per_year <= 3 
)

SELECT 
    fo.title,
    fo.production_year,
    COALESCE(fo.companies, 'Unknown') AS companies,
    fo.keyword_count,
    COALESCE(fo.actor_name, 'No prominent actor') AS prominent_actor
FROM FinalOutput fo
ORDER BY fo.production_year DESC, fo.keyword_count DESC;