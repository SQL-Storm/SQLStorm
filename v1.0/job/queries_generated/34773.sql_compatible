
WITH RECURSIVE TitleHierarchy AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        t.imdb_index,
        1 AS level
    FROM title t
    WHERE t.production_year > 2000

    UNION ALL

    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        t.imdb_index,
        th.level + 1
    FROM title t
    JOIN TitleHierarchy th ON t.episode_of_id = th.title_id
),
RankedCast AS (
    SELECT 
        ci.movie_id,
        a.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_rank
    FROM cast_info ci
    JOIN aka_name a ON ci.person_id = a.person_id
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM movie_keyword mk
    JOIN keyword k ON mk.keyword_id = k.id
    GROUP BY mk.movie_id
)
SELECT 
    th.title_id,
    th.title,
    th.production_year,
    th.imdb_index,
    COALESCE(COUNT(rc.actor_name), 0) AS actor_count,
    COALESCE(mk.keywords, 'No keywords') AS keywords,
    AVG(CASE WHEN rc.actor_rank <= 3 THEN 1 ELSE NULL END) AS top_actor_ratio,
    COUNT(DISTINCT mc.company_id) AS production_companies
FROM TitleHierarchy th
LEFT JOIN RankedCast rc ON th.title_id = rc.movie_id
LEFT JOIN MovieKeywords mk ON th.title_id = mk.movie_id
LEFT JOIN movie_companies mc ON th.title_id = mc.movie_id
WHERE th.production_year < 2023
GROUP BY 
    th.title_id,
    th.title,
    th.production_year,
    th.imdb_index
ORDER BY th.production_year DESC, actor_count DESC;
