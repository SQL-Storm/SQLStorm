WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        RANK() OVER (PARTITION BY t.production_year ORDER BY COUNT(DISTINCT c.id) DESC) AS rank_by_cast_count
    FROM title t
    LEFT JOIN cast_info c ON t.id = c.movie_id
    WHERE t.production_year IS NOT NULL
    GROUP BY t.id, t.title, t.production_year
),
ActorStatistics AS (
    SELECT 
        a.person_id,
        a.name,
        COUNT(DISTINCT c.movie_id) AS movie_count,
        AVG(YEAR(t.production_year) - YEAR(cast_info.nr_order)) AS avg_year_difference
    FROM aka_name a
    JOIN cast_info c ON a.person_id = c.person_id
    JOIN title t ON c.movie_id = t.id
    WHERE a.name IS NOT NULL
    GROUP BY a.person_id, a.name
),
FilteredCompanies AS (
    SELECT 
        mc.movie_id,
        COUNT(DISTINCT cn.id) AS company_count,
        STRING_AGG(DISTINCT cn.name, ', ') AS company_names
    FROM movie_companies mc
    JOIN company_name cn ON mc.company_id = cn.id
    GROUP BY mc.movie_id
    HAVING COUNT(DISTINCT cn.id) > 2
),
FinalResults AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        COALESCE(ac.movie_count, 0) AS actor_count,
        COALESCE(fc.company_count, 0) AS company_count,
        fc.company_names
    FROM RankedMovies rm
    LEFT JOIN ActorStatistics ac ON rm.movie_id = ac.movie_id
    LEFT JOIN FilteredCompanies fc ON rm.movie_id = fc.movie_id
)
SELECT 
    fr.movie_id,
    fr.title,
    fr.production_year,
    fr.actor_count,
    fr.company_count,
    fr.company_names,
    CASE
        WHEN fr.actor_count > 5 AND (fr.company_count IS NULL OR fr.company_count < 1) THEN 'Actor heavy'
        WHEN fr.company_count >= 3 THEN 'Company focused'
        ELSE 'Balanced cast and companies'
    END AS classification,
    (SELECT COUNT(*) FROM title t WHERE t.production_year < fr.production_year) AS older_movie_count
FROM FinalResults fr
ORDER BY fr.production_year DESC, fr.actor_count DESC, fr.company_count ASC;