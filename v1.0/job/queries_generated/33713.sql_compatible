
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        t.id AS movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        0 AS level
    FROM
        aka_title t
    WHERE
        t.production_year > 2000 
    UNION ALL
    SELECT
        m.movie_id,
        t.title,
        t.production_year,
        t.kind_id,
        level + 1
    FROM
        MovieHierarchy m
    JOIN
        movie_link ml ON ml.linked_movie_id = m.movie_id
    JOIN
        aka_title t ON t.id = ml.movie_id
    WHERE
        t.production_year > 2000
),
RoleCounts AS (
    SELECT
        ci.movie_id,
        COUNT(DISTINCT ci.person_id) AS actor_count,
        COUNT(DISTINCT CASE WHEN r.role LIKE '%director%' THEN ci.person_id END) AS director_count
    FROM
        cast_info ci
    JOIN
        role_type r ON r.id = ci.role_id
    GROUP BY
        ci.movie_id
),
KeywordDetails AS (
    SELECT
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM
        movie_keyword mk
    JOIN
        keyword k ON k.id = mk.keyword_id
    GROUP BY
        mk.movie_id 
)
SELECT
    mh.title,
    mh.production_year,
    mh.kind_id,
    COALESCE(rc.actor_count, 0) AS total_actors,
    COALESCE(rc.director_count, 0) AS total_directors,
    COALESCE(kd.keywords, 'None') AS movie_keywords,
    COUNT(DISTINCT c.person_id) AS total_participants, 
    CASE
        WHEN mh.production_year < 2010 THEN 'Old'
        ELSE 'New'
    END AS movie_age_category
FROM
    MovieHierarchy mh
LEFT JOIN
    RoleCounts rc ON rc.movie_id = mh.movie_id
LEFT JOIN
    KeywordDetails kd ON kd.movie_id = mh.movie_id
LEFT JOIN
    cast_info c ON c.movie_id = mh.movie_id
GROUP BY
    mh.movie_id, mh.title, mh.production_year, mh.kind_id, rc.actor_count, rc.director_count, kd.keywords
ORDER BY
    mh.production_year DESC, mh.title
LIMIT 50;
