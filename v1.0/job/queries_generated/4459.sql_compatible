
WITH ranked_movies AS (
    SELECT 
        at.title,
        at.production_year,
        COUNT(DISTINCT c.person_id) AS num_cast_members,
        RANK() OVER (PARTITION BY at.production_year ORDER BY COUNT(DISTINCT c.person_id) DESC) AS rank
    FROM 
        aka_title at
    LEFT JOIN 
        cast_info c ON at.id = c.movie_id
    WHERE 
        at.production_year IS NOT NULL
    GROUP BY 
        at.title, at.production_year
),
movie_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
),
full_movie_info AS (
    SELECT 
        rm.title,
        rm.production_year,
        rm.num_cast_members,
        COALESCE(mk.keywords, 'No keywords') AS keywords,
        COALESCE(l.linked_movie_count, 0) AS linked_count
    FROM 
        ranked_movies rm
    LEFT JOIN 
        movie_keywords mk ON mk.movie_id = rm.id
    LEFT JOIN (
        SELECT 
            ml.movie_id,
            COUNT(ml.linked_movie_id) AS linked_movie_count
        FROM 
            movie_link ml
        GROUP BY 
            ml.movie_id
    ) l ON l.movie_id = rm.id
)
SELECT 
    fmi.title,
    fmi.production_year,
    fmi.num_cast_members,
    fmi.keywords,
    CASE 
        WHEN fmi.num_cast_members > 10 THEN 'Popular'
        WHEN fmi.num_cast_members BETWEEN 5 AND 10 THEN 'Moderate'
        ELSE 'Less Known' 
    END AS popularity,
    ROW_NUMBER() OVER (ORDER BY fmi.production_year DESC, fmi.num_cast_members DESC) AS display_order
FROM 
    full_movie_info fmi
WHERE 
    fmi.rank = 1
ORDER BY 
    fmi.display_order;
