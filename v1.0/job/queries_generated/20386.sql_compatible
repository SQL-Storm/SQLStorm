
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS depth,
        CONCAT(mt.title, '') AS path
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        mm.id,
        mm.title,
        mm.production_year,
        mh.depth + 1,
        CONCAT(mh.path, ' -> ', mm.title)
    FROM 
        movie_link ml
    JOIN 
        aka_title mm ON ml.linked_movie_id = mm.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    mh.depth,
    mh.path,
    COUNT(DISTINCT ci.person_id) AS actor_count,
    AVG(CASE WHEN pi.info_type_id = (SELECT id FROM info_type WHERE info = 'salary') THEN pi.info_id END) AS avg_salary,
    STRING_AGG(DISTINCT k.keyword || ' [' || k.phonetic_code || ']', '; ') AS keywords,
    COALESCE(cn.name, 'No Company') AS company_name,
    COUNT(DISTINCT cc.movie_id) AS complete_cast_count
FROM 
    MovieHierarchy mh
LEFT JOIN 
    cast_info ci ON ci.movie_id = mh.movie_id
LEFT JOIN 
    person_info pi ON ci.person_id = pi.person_id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = mh.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, mh.depth, mh.path, cn.name
HAVING 
    COUNT(DISTINCT ci.person_id) > 5 
    AND COUNT(DISTINCT mk.keyword_id) > 2
ORDER BY 
    mh.depth DESC, avg_salary DESC NULLS LAST
FETCH FIRST 50 ROWS ONLY;
