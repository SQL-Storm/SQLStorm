
WITH RecursiveMovieLinks AS (
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        1 AS depth
    FROM movie_link ml
    WHERE ml.linked_movie_id IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.movie_id,
        ml.linked_movie_id,
        rml.depth + 1
    FROM movie_link ml
    JOIN RecursiveMovieLinks rml ON ml.movie_id = rml.linked_movie_id
    WHERE rml.depth < 5
),
MovieKeywordCounts AS (
    SELECT 
        mk.movie_id,
        COUNT(mk.keyword_id) AS keyword_count
    FROM movie_keyword mk
    GROUP BY mk.movie_id
),
ActorRoles AS (
    SELECT 
        ci.movie_id,
        ci.role_id,
        COUNT(DISTINCT ci.person_id) AS actor_count
    FROM cast_info ci
    GROUP BY ci.movie_id, ci.role_id
),
TitleWithKeywords AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        mk.keyword_count
    FROM title t
    LEFT JOIN MovieKeywordCounts mk ON t.id = mk.movie_id
)
SELECT 
    t.title,
    t.production_year,
    ak.name AS actor_name,
    COUNT(DISTINCT ml.linked_movie_id) AS linked_movies_count,
    COALESCE(ar.actor_count, 0) AS number_of_actors,
    CASE 
        WHEN COALESCE(mk.keyword_count, 0) > 0 THEN 'Includes Keywords'
        ELSE 'No Keywords'
    END AS keyword_status,
    ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS row_num
FROM TitleWithKeywords t
LEFT JOIN aka_name ak ON ak.id = (
    SELECT ci.person_id
    FROM cast_info ci
    WHERE ci.movie_id = t.title_id
    LIMIT 1
)
LEFT JOIN RecursiveMovieLinks ml ON ml.movie_id = t.title_id
LEFT JOIN ActorRoles ar ON ar.movie_id = t.title_id
LEFT JOIN movie_info mi ON mi.movie_id = t.title_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Plot')
GROUP BY
    t.title,
    t.production_year,
    ak.name,
    ar.actor_count,
    mk.keyword_count
HAVING 
    COUNT(DISTINCT ml.linked_movie_id) > 0
ORDER BY 
    t.production_year DESC,
    t.title ASC;
