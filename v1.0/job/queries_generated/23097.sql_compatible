
WITH RECURSIVE ActorHierarchy AS (
    SELECT 
        ci.person_id, 
        t.title,
        t.production_year, 
        COALESCE(NULLIF(t.produced_year - t.season_nr, NULL), 0) AS season_year_difference,
        CONCAT(a.name, ' (', a.md5sum, ')') AS actor_info,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY t.production_year DESC) AS rn
    FROM 
        cast_info ci
    JOIN 
        title t ON ci.movie_id = t.id
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    WHERE 
        t.kind_id IN (SELECT id FROM kind_type WHERE kind LIKE 'movie%')
    UNION ALL
    SELECT 
        ci.person_id,
        t.title,
        t.production_year,
        COALESCE(NULLIF(t.produced_year - t.season_nr, NULL), 0) AS season_year_difference,
        CONCAT(a.name, ' (', a.md5sum, ')') AS actor_info,
        ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY t.production_year DESC) AS rn
    FROM 
        cast_info ci
    JOIN 
        title t ON ci.movie_id = t.id
    JOIN 
        aka_name a ON ci.person_id = a.person_id
    JOIN 
        ActorHierarchy ah ON ah.person_id = ci.person_id
    WHERE 
        ah.rn <= 5 
),
CompanyMovies AS (
    SELECT 
        mc.movie_id,
        STRING_AGG(DISTINCT cn.name, ', ') AS companies,
        COUNT(DISTINCT mc.company_id) AS company_count
    FROM 
        movie_companies mc
    JOIN 
        company_name cn ON mc.company_id = cn.id
    GROUP BY 
        mc.movie_id
),
MovieKeywords AS (
    SELECT
        mk.movie_id,
        STRING_AGG(DISTINCT k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    ah.actor_info,
    ah.title,
    ah.production_year,
    cm.companies,
    mk.keywords,
    ah.season_year_difference,
    CASE 
        WHEN ah.season_year_difference > 5 
        THEN 'Considered a long gap'
        WHEN ah.season_year_difference IS NULL
        THEN 'Year difference unknown'
        ELSE 'Within the typical range'
    END AS season_gap_comment,
    COUNT(*) OVER () AS total_records
FROM 
    ActorHierarchy ah
LEFT JOIN 
    CompanyMovies cm ON ah.title = cm.movie_id
LEFT JOIN 
    MovieKeywords mk ON ah.title = mk.movie_id
WHERE 
    ah.rn = 1 
    AND NOT EXISTS (
        SELECT 1 
        FROM cast_info ci_exclusion 
        WHERE ci_exclusion.person_id = ah.person_id 
          AND ci_exclusion.movie_id = ah.title 
          AND ci_exclusion.person_role_id = (SELECT id FROM role_type WHERE role = 'supporting role')
    )
ORDER BY 
    ah.production_year DESC,
    ah.actor_info;
