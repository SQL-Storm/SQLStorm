WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        0 AS level,
        m.id AS root_movie_id
    FROM 
        aka_title m
    WHERE 
        m.episode_of_id IS NULL
    
    UNION ALL
    
    SELECT 
        m.id,
        m.title,
        m.production_year,
        mh.level + 1,
        mh.root_movie_id
    FROM 
        aka_title m
    INNER JOIN 
        movie_hierarchy mh ON m.episode_of_id = mh.movie_id
),
actor_earnings AS (
    SELECT 
        ci.person_id,
        SUM(CASE 
            WHEN ci.note IS NOT NULL THEN 1 
            ELSE 0 
        END) AS total_roles,
        AVG(CASE 
            WHEN ci.note IS NOT NULL THEN 10 
            ELSE NULL 
        END) AS average_earnings
    FROM 
        cast_info ci
    GROUP BY 
        ci.person_id
),
movie_keywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)

SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(mk.keywords, 'No keywords') AS keywords,
    COALESCE(ae.total_roles, 0) AS actor_roles,
    COALESCE(ae.average_earnings, 0) AS avg_earnings
FROM 
    movie_hierarchy mh
LEFT JOIN 
    movie_keywords mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    actor_earnings ae ON EXISTS (
        SELECT 1 
        FROM cast_info ci 
        WHERE ci.movie_id = mh.movie_id 
        AND ci.person_id = ae.person_id
    )
WHERE 
    mh.production_year BETWEEN 2000 AND 2020
ORDER BY 
    mh.production_year DESC,
    mh.title;