WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        NULL::integer AS parent_movie_id,
        1 AS level
    FROM 
        aka_title m
    WHERE 
        m.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.movie_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
)

SELECT 
    p.name AS actor_name,
    k.keyword AS movie_keyword,
    COUNT(DISTINCT c.movie_id) AS movies_count,
    STRING_AGG(DISTINCT mh.title || ' (' || mh.production_year || ')', ', ') AS movies_list,
    AVG(m.production_year) AS avg_production_year,
    MAX(m.production_year) AS latest_production_year,
    MIN(m.production_year) AS earliest_production_year
FROM 
    cast_info c
JOIN 
    aka_name p ON c.person_id = p.person_id
JOIN 
    movie_hierarchy mh ON c.movie_id = mh.movie_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
WHERE 
    p.name IS NOT NULL
    AND k.keyword IS NOT NULL
    AND mh.title IS NOT NULL
GROUP BY 
    p.name, k.keyword
HAVING 
    COUNT(DISTINCT c.movie_id) > 3
    AND MAX(mh.production_year) >= 2000
ORDER BY 
    avg_production_year DESC, 
    p.name ASC
LIMIT 100;