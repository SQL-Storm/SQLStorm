
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        m.kind_id,
        0 AS level
    FROM 
        aka_title m
    WHERE 
        m.episode_of_id IS NULL 

    UNION ALL

    SELECT 
        e.id AS movie_id,
        e.title,
        e.production_year,
        e.kind_id,
        mh.level + 1
    FROM 
        aka_title e
    JOIN 
        MovieHierarchy mh ON e.episode_of_id = mh.movie_id 
)
SELECT 
    a.name AS actor_name,
    m.title AS movie_title,
    m.production_year,
    COUNT(DISTINCT ci.id) AS total_cast_members,
    SUM(CASE WHEN i.info_type_id IS NOT NULL THEN 1 ELSE 0 END) AS info_count,
    STRING_AGG(DISTINCT kw.keyword, ', ') AS keywords,
    MAX(CASE WHEN c.kind IS NOT NULL THEN c.kind END) AS company_type,
    ROW_NUMBER() OVER (PARTITION BY a.name ORDER BY m.production_year DESC) AS actor_movie_rank
FROM 
    aka_name a 
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    MovieHierarchy m ON ci.movie_id = m.movie_id
LEFT JOIN 
    movie_companies mc ON m.movie_id = mc.movie_id
LEFT JOIN 
    company_type c ON mc.company_type_id = c.id
LEFT JOIN 
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN 
    keyword kw ON mk.keyword_id = kw.id
LEFT JOIN 
    movie_info i ON m.movie_id = i.movie_id
WHERE 
    m.production_year IS NOT NULL
    AND (m.kind_id IN (SELECT k.id FROM kind_type k WHERE k.kind IN ('movie', 'series')) OR m.kind_id IS NULL)
GROUP BY 
    a.name, m.title, m.production_year, actor_movie_rank
HAVING 
    COUNT(DISTINCT ci.id) > 1
ORDER BY 
    actor_movie_rank;
