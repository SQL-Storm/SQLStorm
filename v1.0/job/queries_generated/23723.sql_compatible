
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS rank_in_year
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),

MoviesWithCast AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rc.person_id,
        p.name AS actor_name,
        ROW_NUMBER() OVER (PARTITION BY rm.movie_id ORDER BY rc.nr_order) AS actor_order
    FROM 
        RankedMovies rm
    LEFT JOIN 
        cast_info rc ON rm.movie_id = rc.movie_id
    LEFT JOIN 
        aka_name p ON rc.person_id = p.person_id
),

MoviesWithKeywords AS (
    SELECT 
        mwc.movie_id,
        mwc.title,
        mwc.actor_name,
        COALESCE(mk.keyword, 'No Keywords') AS movie_keyword,
        COUNT(mk.id) OVER (PARTITION BY mwc.movie_id) AS keyword_count
    FROM 
        MoviesWithCast mwc
    LEFT JOIN 
        movie_keyword mk ON mwc.movie_id = mk.movie_id
),

FinalMovieStats AS (
    SELECT 
        mwk.movie_id,
        mwk.title,
        mwk.actor_name,
        mwk.movie_keyword,
        mwk.keyword_count,
        CASE 
            WHEN mwk.keyword_count > 3 THEN 'Rich in Keywords'
            WHEN mwk.keyword_count BETWEEN 1 AND 3 THEN 'Moderately Keyworded'
            ELSE 'No Keywords'
        END AS keyword_quality,
        COUNT(DISTINCT CASE WHEN mwk.actor_order = 1 THEN mwk.actor_name END) OVER (PARTITION BY mwk.movie_id) AS lead_actor_count
    FROM 
        MoviesWithKeywords mwk
)

SELECT 
    fms.movie_id,
    fms.title,
    fms.actor_name,
    fms.movie_keyword,
    fms.keyword_count,
    fms.keyword_quality,
    fms.lead_actor_count
FROM 
    FinalMovieStats fms
WHERE 
    fms.keyword_quality <> 'No Keywords'
    AND (SELECT COUNT(*) FROM movie_info mi WHERE mi.movie_id = fms.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'Awards') AND mi.info IS NOT NULL) > 0
ORDER BY 
    fms.movie_id, 
    fms.actor_order;