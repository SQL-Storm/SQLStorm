
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    INNER JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    INNER JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id 
)
SELECT 
    ak.name,
    COUNT(DISTINCT ch.movie_id) AS total_movies,
    SUM(CASE WHEN ch.status_id = 1 THEN 1 ELSE 0 END) AS active_movies,
    AVG(COALESCE(ch.status_id, 0)) AS avg_status,
    STRING_AGG(DISTINCT at.title, ', ') AS titles,
    CASE 
        WHEN COUNT(DISTINCT ch.movie_id) = 0 THEN 'No Movies'
        ELSE MAX(at.production_year) 
    END AS last_movie_year,
    ROW_NUMBER() OVER (PARTITION BY ak.name ORDER BY COUNT(DISTINCT ch.movie_id) DESC) AS rank
FROM 
    aka_name ak
LEFT JOIN 
    cast_info ch ON ak.person_id = ch.person_id
LEFT JOIN 
    movie_hierarchy mh ON ch.movie_id = mh.movie_id
LEFT JOIN 
    aka_title at ON mh.movie_id = at.id
WHERE 
    ak.name IS NOT NULL
GROUP BY 
    ak.name
HAVING 
    COUNT(DISTINCT ch.movie_id) > 0
ORDER BY 
    total_movies DESC;
