
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id, 
        ma.title, 
        ma.production_year,
        ma.kind_id,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        aka_title ma ON ml.movie_id = ma.id
    JOIN 
        MovieHierarchy mh ON mh.movie_id = ml.movie_id
)
SELECT 
    a.name,
    m.title AS movie_title,
    m.production_year,
    c.kind AS company_type,
    co.name AS company_name,
    COUNT(*) OVER (PARTITION BY m.movie_id) AS total_movies,
    CASE 
        WHEN COUNT(m.movie_id) OVER (PARTITION BY m.movie_id) > 1 THEN 'Multiple Roles'
        ELSE 'Single Role'
    END AS role_count_status,
    COALESCE(SUM(CASE WHEN r.role IS NOT NULL THEN 1 ELSE 0 END), 0) AS total_roles,
    AVG(CASE 
        WHEN i.info = 'Budget' THEN CAST(SUBSTRING(i.info_text, '\\d+') AS INTEGER) 
        ELSE NULL 
    END) AS average_budget
FROM 
    aka_name a
JOIN 
    cast_info ci ON a.person_id = ci.person_id
JOIN 
    MovieHierarchy m ON ci.movie_id = m.movie_id
LEFT JOIN 
    movie_companies mc ON m.movie_id = mc.movie_id
LEFT JOIN 
    company_name co ON mc.company_id = co.id
LEFT JOIN 
    role_type r ON ci.role_id = r.id
LEFT JOIN 
    movie_info i ON m.movie_id = i.movie_id 
WHERE 
    m.kind_id IN (SELECT id FROM kind_type WHERE kind = 'feature')
    AND a.name IS NOT NULL
GROUP BY 
    a.name, m.title, m.production_year, m.kind_id, co.name
ORDER BY 
    m.production_year DESC, a.name;
