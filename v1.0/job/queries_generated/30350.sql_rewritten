WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        0 AS level
    FROM 
        title m
    WHERE 
        m.kind_id = 1 
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        t.title,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        movie_hierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        title t ON ml.linked_movie_id = t.id
)
SELECT 
    ak.name AS actor_name,
    m.title AS movie_title,
    m.production_year,
    w.rank AS actor_rank,
    w.total AS total_actors,
    COUNT(DISTINCT k.keyword) AS keyword_count,
    COALESCE(cn.name, 'Unknown Company') AS production_company,
    CASE 
        WHEN m.production_year IS NULL THEN 'Year Not Available'
        ELSE TO_CHAR(m.production_year)
    END AS production_year_display
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    title m ON ci.movie_id = m.id
LEFT JOIN 
    movie_companies mc ON m.id = mc.movie_id
LEFT JOIN 
    company_name cn ON mc.company_id = cn.id 
LEFT JOIN 
    movie_keyword mk ON m.id = mk.movie_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
JOIN (
    SELECT 
        ci.movie_id,
        COUNT(*) OVER (PARTITION BY ci.movie_id) AS total,
        ROW_NUMBER() OVER (PARTITION BY ci.movie_id ORDER BY ci.n_order) AS rank
    FROM 
        cast_info ci
) w ON ci.movie_id = w.movie_id
LEFT JOIN 
    movie_info mi ON m.id = mi.movie_id AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'budget')
WHERE 
    ak.name IS NOT NULL
    AND ak.name <> ''
    AND (m.production_year BETWEEN 2000 AND 2023 OR m.production_year IS NULL)
GROUP BY 
    ak.name, m.title, m.production_year, w.rank, w.total, cn.name
HAVING 
    COUNT(DISTINCT k.keyword) > 1
ORDER BY 
    m.production_year DESC, w.rank;