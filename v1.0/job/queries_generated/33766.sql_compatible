
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level
    FROM aka_title mt
    WHERE mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.level + 1
    FROM movie_link ml
    JOIN aka_title at ON ml.linked_movie_id = at.id
    JOIN MovieHierarchy mh ON mh.movie_id = ml.movie_id
),

MovieCasting AS (
    SELECT 
        a.id AS actor_id,
        a.name AS actor_name,
        c.movie_id,
        mh.title AS movie_title,
        mh.production_year,
        ROW_NUMBER() OVER(PARTITION BY c.movie_id ORDER BY c.nr_order) AS actor_sequence
    FROM cast_info c
    JOIN aka_name a ON c.person_id = a.person_id
    JOIN MovieHierarchy mh ON c.movie_id = mh.movie_id
),

MovieInfo AS (
    SELECT 
        mh.movie_id,
        mh.title,
        COALESCE(CAST(mh.level AS VARCHAR), '0') AS hierarchy_level,
        COUNT(DISTINCT kc.id) AS keyword_count
    FROM MovieHierarchy mh
    LEFT JOIN movie_keyword mk ON mh.movie_id = mk.movie_id
    LEFT JOIN keyword kc ON mk.keyword_id = kc.id
    GROUP BY mh.movie_id, mh.title, mh.production_year, mh.level
)

SELECT 
    mc.actor_name,
    mc.movie_title,
    mi.hierarchy_level,
    mi.keyword_count,
    CASE
        WHEN mc.actor_sequence = 1 THEN 'Lead'
        WHEN mc.actor_sequence BETWEEN 2 AND 5 THEN 'Supporting'
        ELSE 'Minor'
    END AS role_category
FROM MovieCasting mc
JOIN MovieInfo mi ON mc.movie_id = mi.movie_id
WHERE mi.keyword_count > 0
ORDER BY mi.hierarchy_level DESC, mi.keyword_count DESC, mc.actor_name;
