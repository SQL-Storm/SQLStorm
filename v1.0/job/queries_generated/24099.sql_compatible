
WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT
        ml.linked_movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM
        movie_link ml
    JOIN
        aka_title mt ON ml.movie_id = mt.id
    JOIN
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
ActorRoleCounts AS (
    SELECT
        ci.movie_id,
        COUNT(*) AS role_count,
        STRING_AGG(DISTINCT r.role, ', ') AS roles
    FROM
        cast_info ci
    JOIN
        role_type r ON ci.role_id = r.id
    GROUP BY
        ci.movie_id
),
CompanyInfo AS (
    SELECT
        mc.movie_id,
        ARRAY_AGG(DISTINCT c.name) AS companies
    FROM
        movie_companies mc
    JOIN
        company_name c ON mc.company_id = c.id
    WHERE
        c.country_code IS NOT NULL
    GROUP BY
        mc.movie_id
),
MovieDetails AS (
    SELECT
        mh.movie_id,
        mh.title,
        mh.production_year,
        COALESCE(ac.role_count, 0) AS actor_count,
        COALESCE(ci.companies, ARRAY[]::text[]) AS companies,
        mh.level
    FROM
        MovieHierarchy mh
    LEFT JOIN
        ActorRoleCounts ac ON mh.movie_id = ac.movie_id
    LEFT JOIN
        CompanyInfo ci ON mh.movie_id = ci.movie_id
)
SELECT
    md.title,
    md.production_year,
    md.actor_count,
    unnest(md.companies) AS company,
    CASE
        WHEN md.actor_count = 0 THEN 'No actors'
        WHEN md.actor_count > 5 THEN 'Many actors'
        ELSE 'Some actors'
    END AS actor_description,
    CASE
        WHEN md.level = 1 THEN 'Main Feature'
        WHEN md.level > 1 THEN 'Linked Movie Series'
    END AS movie_type
FROM
    MovieDetails md
WHERE
    md.production_year BETWEEN 2000 AND 2023
ORDER BY
    md.production_year DESC,
    md.actor_count DESC
LIMIT 100
OFFSET 10;
