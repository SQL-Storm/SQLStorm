
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        1 AS depth,
        title.title AS movie_title,
        title.production_year,
        NULL AS parent_id
    FROM 
        aka_title AS title
    JOIN 
        movie_companies AS mc ON title.id = mc.movie_id
    WHERE 
        title.production_year > 2000

    UNION ALL

    SELECT 
        linked.movie_id,
        mh.depth + 1,
        title.title AS movie_title,
        title.production_year,
        mh.movie_id AS parent_id
    FROM 
        MovieHierarchy AS mh
    JOIN 
        movie_link AS ml ON mh.movie_id = ml.linked_movie_id
    JOIN 
        aka_title AS title ON ml.movie_id = title.id
    WHERE 
        title.production_year > 2000
)

SELECT 
    mh.movie_title,
    mh.production_year,
    cnt.actor_count,
    AVG(CASE WHEN pi.info_type_id = 1 THEN CAST(pi.info AS float) ELSE NULL END) AS average_age,
    STRING_AGG(DISTINCT cn.name, ', ') AS company_names
FROM 
    MovieHierarchy AS mh
LEFT JOIN 
    complete_cast AS cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info AS ci ON cc.subject_id = ci.person_id
LEFT JOIN 
    aka_name AS an ON ci.person_id = an.person_id
LEFT JOIN 
    person_info AS pi ON an.person_id = pi.person_id
LEFT JOIN 
    movie_companies AS mc ON mh.movie_id = mc.movie_id
LEFT JOIN 
    company_name AS cn ON mc.company_id = cn.id
LEFT JOIN 
    (SELECT 
        movie_id, COUNT(*) AS actor_count
     FROM 
        cast_info
     GROUP BY 
        movie_id
    ) AS cnt ON mh.movie_id = cnt.movie_id
WHERE 
    mh.depth <= 3
GROUP BY 
    mh.movie_title, mh.production_year, cnt.actor_count
HAVING 
    AVG(CASE WHEN pi.info_type_id = 1 THEN CAST(pi.info AS float) ELSE NULL END) IS NOT NULL
ORDER BY 
    mh.production_year DESC, cnt.actor_count DESC;
