
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS level,
        CAST(mt.title AS VARCHAR(1000)) AS path
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
        
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        m.title,
        m.production_year,
        mh.level + 1,
        CONCAT(mh.path, ' -> ', m.title)
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title m ON ml.linked_movie_id = m.id
)

SELECT 
    mh.level,
    mh.path,
    COUNT(cc.id) AS actor_count,
    STRING_AGG(DISTINCT a.name, ', ') AS actors,
    AVG(mr.rating) AS average_rating
FROM 
    MovieHierarchy mh
LEFT JOIN 
    complete_cast cc ON mh.movie_id = cc.movie_id
LEFT JOIN 
    cast_info ci ON cc.subject_id = ci.id
LEFT JOIN 
    aka_name a ON ci.person_id = a.person_id
LEFT JOIN 
    (
        SELECT 
            movie_id,
            AVG(rating) AS rating
        FROM 
            (SELECT 
                movie_id,
                CASE 
                    WHEN rating IS NULL THEN NULL 
                    ELSE CAST(rating AS DECIMAL(5,2)) 
                END AS rating
            FROM 
                movie_info mi 
            WHERE 
                info_type_id = (SELECT id FROM info_type WHERE info = 'rating')) AS avg_ratings
            GROUP BY movie_id
    ) mr ON mh.movie_id = mr.movie_id
WHERE 
    mh.production_year >= 2000
GROUP BY 
    mh.level, mh.path
HAVING 
    COUNT(cc.id) > 0
ORDER BY 
    mh.level, average_rating DESC;
