WITH RECURSIVE MovieHierarchy AS (
    SELECT m.id AS movie_id, m.title, m.production_year, 1 AS level
    FROM aka_title m
    WHERE m.production_year >= 2000  
    UNION ALL
    SELECT m.id AS movie_id, m.title, m.production_year, mh.level + 1
    FROM aka_title m
    JOIN movie_link ml ON ml.movie_id = mh.movie_id
    JOIN aka_title m2 ON ml.linked_movie_id = m2.id
    JOIN MovieHierarchy mh ON mh.movie_id = m.id
    WHERE m2.production_year >= 2000 
),
MovieStats AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT cc.subject_id) AS total_cast,
        STRING_AGG(DISTINCT c.name, ', ') AS cast_names,
        ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY COUNT(DISTINCT cc.subject_id) DESC) AS rank
    FROM MovieHierarchy mh
    LEFT JOIN complete_cast cc ON cc.movie_id = mh.movie_id
    LEFT JOIN aka_name c ON c.person_id = cc.subject_id
    GROUP BY mh.movie_id, mh.title, mh.production_year
),
KeywordStats AS (
    SELECT 
        m.movie_id,
        COUNT(DISTINCT mk.keyword_id) AS keyword_count
    FROM movie_keyword mk
    JOIN aka_title m ON mk.movie_id = m.id
    WHERE m.production_year >= 2000
    GROUP BY m.movie_id
)
SELECT 
    ms.movie_id,
    ms.title,
    ms.production_year,
    ms.total_cast,
    ms.cast_names,
    COALESCE(ks.keyword_count, 0) AS keyword_count,
    ms.rank,
    CASE 
        WHEN ms.rank <= 5 THEN 'Top Movies'
        WHEN ms.rank <= 15 THEN 'Moderate Movies'
        ELSE 'Less Popular'
    END AS movie_category
FROM MovieStats ms
LEFT JOIN KeywordStats ks ON ms.movie_id = ks.movie_id
ORDER BY ms.production_year DESC, ms.total_cast DESC;