
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        1 AS hierarchy_level,
        ARRAY[m.title] AS full_path
    FROM 
        aka_title m
    WHERE 
        m.production_year IS NOT NULL
    
    UNION ALL
    
    SELECT 
        m.id AS movie_id,
        m.title AS movie_title,
        mh.hierarchy_level + 1,
        mh.full_path || m.title
    FROM 
        aka_title m
    JOIN 
        movie_link ml ON ml.movie_id = m.id
    JOIN 
        movie_hierarchy mh ON mh.movie_id = ml.linked_movie_id
)

SELECT 
    m.id AS movie_id,
    m.title AS movie_title,
    mh.hierarchy_level,
    mh.full_path,
    STRING_AGG(DISTINCT CONCAT(c.first_name, ' ', c.last_name), ', ') AS cast_list,
    COUNT(DISTINCT mk.keyword) AS total_keywords,
    MAX(mr.role) AS main_role,
    AVG(COALESCE(mr.rating, 0)) AS average_rating,
    COALESCE(person_info.info, 'N/A') AS person_info,
    COUNT(DISTINCT comp.name) AS company_count,
    CASE 
        WHEN COUNT(DISTINCT comp.name) = 0 THEN 'No Companies'
        ELSE 'Companies Exist'
    END AS company_status
FROM 
    movie_hierarchy mh
JOIN 
    aka_title m ON mh.movie_id = m.id
LEFT JOIN 
    cast_info ci ON ci.movie_id = m.id
LEFT JOIN 
    name c ON c.id = ci.person_id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = m.id
LEFT JOIN 
    movie_companies mc ON mc.movie_id = m.id
LEFT JOIN 
    company_name comp ON comp.id = mc.company_id
LEFT JOIN 
    role_type mr ON mr.id = ci.role_id
LEFT JOIN 
    person_info ON person_info.person_id = c.id
GROUP BY 
    m.id, m.title, mh.hierarchy_level, mh.full_path, person_info.info
HAVING 
    COUNT(DISTINCT ci.person_id) > 1 
    AND AVG(COALESCE(mr.rating, 0)) > 5
ORDER BY 
    mh.hierarchy_level ASC, m.title
LIMIT 50;
