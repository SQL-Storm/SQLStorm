WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        NULL AS parent_id
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL 

    UNION ALL

    SELECT 
        et.id AS movie_id,
        et.title,
        et.production_year,
        et.episode_of_id AS parent_id
    FROM 
        aka_title et
    INNER JOIN 
        movie_hierarchy mh ON et.episode_of_id = mh.movie_id
), ranked_movies AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY mh.title) AS rank
    FROM 
        movie_hierarchy mh
), movie_roles AS (
    SELECT 
        ci.movie_id,
        rt.role,
        COUNT(ci.person_id) AS role_count
    FROM 
        cast_info ci
    JOIN 
        role_type rt ON ci.role_id = rt.id
    GROUP BY 
        ci.movie_id, rt.role
), movie_info_details AS (
    SELECT 
        mi.movie_id,
        STRING_AGG(DISTINCT mi.info, ', ') AS combined_info
    FROM 
        movie_info mi
    GROUP BY 
        mi.movie_id
)
SELECT 
    rm.title,
    rm.production_year,
    rm.rank,
    COALESCE(mr.role, 'Unknown Role') AS role,
    mr.role_count,
    COALESCE(mid.combined_info, 'No Info Available') AS combined_info
FROM 
    ranked_movies rm
LEFT JOIN 
    movie_roles mr ON rm.movie_id = mr.movie_id
LEFT JOIN 
    movie_info_details mid ON rm.movie_id = mid.movie_id
WHERE 
    rm.production_year >= 2000 
    AND (mr.role_count IS NULL OR mr.role_count > 1) 
ORDER BY 
    rm.production_year DESC, 
    rm.rank;