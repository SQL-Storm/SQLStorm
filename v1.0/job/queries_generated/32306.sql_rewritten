WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        0 AS depth
    FROM 
        aka_title mt
    WHERE 
        mt.production_year IS NOT NULL

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        at.title,
        at.production_year,
        mh.depth + 1
    FROM 
        movie_link ml
        JOIN aka_title at ON ml.movie_id = at.id
        JOIN MovieHierarchy mh ON ml.movie_id = mh.movie_id
    WHERE 
        mh.depth < 3
),
ActorStats AS (
    SELECT 
        ci.person_id,
        ak.name,
        COUNT(DISTINCT ci.movie_id) AS movie_count,
        ARRAY_AGG(DISTINCT mh.title ORDER BY mh.production_year) AS movies
    FROM 
        cast_info ci
        JOIN aka_name ak ON ci.person_id = ak.person_id
        JOIN MovieHierarchy mh ON ci.movie_id = mh.movie_id
    GROUP BY 
        ci.person_id, ak.name
),
RoleCount AS (
    SELECT 
        ci.person_id,
        COUNT(DISTINCT ci.role_id) AS distinct_roles
    FROM 
        cast_info ci
    GROUP BY 
        ci.person_id
)
SELECT 
    a.name,
    a.movie_count,
    a.movies,
    COALESCE(rc.distinct_roles, 0) AS distinct_roles,
    CASE 
        WHEN a.movie_count > 5 THEN 'Prolific Actor'
        WHEN a.movie_count BETWEEN 2 AND 5 THEN 'Regular Actor'
        ELSE 'Emerging Actor'
    END AS actor_type
FROM 
    ActorStats a
LEFT JOIN 
    RoleCount rc ON a.person_id = rc.person_id
WHERE 
    a.movie_count > 1
ORDER BY 
    a.movie_count DESC, a.name;