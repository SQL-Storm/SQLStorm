
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.kind_id,
        COALESCE(SUM(CASE WHEN c.id IS NOT NULL THEN 1 ELSE 0 END), 0) AS total_cast,
        ARRAY_AGG(DISTINCT co.name) AS companies
    FROM 
        aka_title AS mt
    LEFT JOIN 
        movie_companies AS mc ON mt.id = mc.movie_id
    LEFT JOIN 
        company_name AS co ON mc.company_id = co.id
    LEFT JOIN 
        complete_cast AS cc ON mt.id = cc.movie_id
    LEFT JOIN 
        cast_info AS ci ON cc.subject_id = ci.person_id
    GROUP BY 
        mt.id, mt.title, mt.production_year, mt.kind_id
    UNION ALL
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        mh.kind_id,
        mh.total_cast,
        mh.companies
    FROM 
        MovieHierarchy AS mh
    JOIN 
        movie_link AS ml ON mh.movie_id = ml.movie_id
    JOIN 
        aka_title AS mt ON ml.linked_movie_id = mt.id
    WHERE 
        mt.production_year > mh.production_year
),
AggregatedMovieData AS (
    SELECT 
        movie_id,
        title,
        production_year,
        total_cast,
        STRING_AGG(DISTINCT name, ', ') AS company_names
    FROM 
        MovieHierarchy
    GROUP BY 
        movie_id, title, production_year, total_cast
),
RankedMovies AS (
    SELECT 
        m.movie_id,
        m.title,
        m.production_year,
        m.total_cast,
        m.company_names,
        RANK() OVER (PARTITION BY m.production_year ORDER BY m.total_cast DESC) AS rank_within_year
    FROM 
        AggregatedMovieData AS m
)
SELECT 
    rm.movie_id,
    rm.title,
    rm.production_year,
    rm.total_cast,
    rm.company_names,
    rm.rank_within_year
FROM 
    RankedMovies AS rm
WHERE 
    rm.rank_within_year <= 5
ORDER BY 
    rm.production_year DESC, 
    rm.total_cast DESC;
