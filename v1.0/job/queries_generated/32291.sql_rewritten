WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title AS movie_title,
        mt.production_year,
        1 AS level
    FROM
        aka_title mt
    WHERE
        mt.production_year >= 2000  

    UNION ALL

    SELECT
        ml.linked_movie_id,
        sub.movie_title || ' (linked to: ' || mt.title || ')' AS movie_title,
        sub.production_year,
        sub.level + 1
    FROM
        movie_link ml
    JOIN 
        MovieHierarchy sub ON ml.movie_id = sub.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
)

SELECT
    m.movie_title,
    m.production_year,
    ARRAY_AGG(DISTINCT c.name) AS cast_names,
    COUNT(DISTINCT kc.keyword) FILTER (WHERE kc.keyword IS NOT NULL) AS keyword_count,
    AVG(CASE WHEN pi.info IS NOT NULL THEN LENGTH(pi.info) ELSE 0 END) AS avg_person_info_length,
    ROW_NUMBER() OVER (PARTITION BY m.production_year ORDER BY COUNT(DISTINCT c.id) DESC) AS movie_rank
FROM
    MovieHierarchy m
LEFT JOIN
    cast_info c ON m.movie_id = c.movie_id
LEFT JOIN
    movie_keyword mk ON m.movie_id = mk.movie_id
LEFT JOIN
    keyword kc ON mk.keyword_id = kc.id
LEFT JOIN
    person_info pi ON c.person_id = pi.person_id
WHERE
    m.level <= 2  
GROUP BY
    m.movie_id, m.movie_title, m.production_year
ORDER BY
    m.production_year DESC, keyword_count DESC;