
WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        ml.linked_movie_id AS movie_id,
        mt.title,
        mt.production_year,
        mh.level + 1
    FROM 
        movie_link ml
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
    JOIN 
        aka_title mt ON ml.linked_movie_id = mt.id
)

SELECT 
    ak.name AS actor_name,
    mt.title AS movie_title,
    mt.production_year,
    COALESCE(cast_roles.role_id, 'N/A') AS role_id,
    COUNT(DISTINCT mk.keyword) AS keyword_count,
    AVG(mrp.info_length) AS average_info_length,
    ROW_NUMBER() OVER (PARTITION BY ak.person_id ORDER BY mt.production_year DESC) AS actor_movie_rank,
    mh.level AS movie_hierarchy_level
FROM 
    aka_name ak
JOIN 
    cast_info ci ON ak.person_id = ci.person_id
JOIN 
    aka_title mt ON ci.movie_id = mt.id
LEFT JOIN 
    movie_keyword mk ON mk.movie_id = mt.id
LEFT JOIN 
    (SELECT 
         movie_id, 
         LENGTH(info) AS info_length
     FROM 
         movie_info) mrp ON mrp.movie_id = mt.id
LEFT JOIN 
    role_type cast_roles ON ci.role_id = cast_roles.id
JOIN 
    MovieHierarchy mh ON mh.movie_id = mt.id
WHERE 
    mt.production_year >= 2000
    AND ak.name IS NOT NULL
    AND (mt.title LIKE 'A%' OR mt.title LIKE 'B%')
GROUP BY 
    ak.name, mt.title, mt.production_year, cast_roles.role_id, mh.level, ak.person_id
ORDER BY 
    actor_name, mt.production_year DESC;
