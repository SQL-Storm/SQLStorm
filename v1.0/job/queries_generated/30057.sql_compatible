
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        mt.title,
        mt.production_year,
        1 AS depth,
        mt.id AS movie_id
    FROM aka_title mt
    WHERE mt.kind_id = (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL
    
    SELECT 
        mt.title,
        mt.production_year,
        mh.depth + 1 AS depth,
        ml.linked_movie_id AS movie_id
    FROM movie_link ml
    JOIN movie_hierarchy mh ON ml.movie_id = mh.movie_id
),
ranked_movies AS (
    SELECT 
        mh.title,
        mh.production_year,
        ROW_NUMBER() OVER (PARTITION BY mh.production_year ORDER BY mh.depth DESC) AS rank
    FROM movie_hierarchy mh
),
classifications AS (
    SELECT 
        ka.person_id,
        ka.name,
        COUNT(DISTINCT kc.keyword) AS keyword_count,
        STRING_AGG(DISTINCT kc.keyword, ', ') AS keywords
    FROM aka_name ka
    JOIN cast_info ci ON ka.person_id = ci.person_id
    LEFT JOIN movie_keyword mk ON ci.movie_id = mk.movie_id
    LEFT JOIN keyword kc ON mk.keyword_id = kc.id
    GROUP BY ka.person_id, ka.name
),
final_output AS (
    SELECT 
        rm.title,
        rm.production_year,
        cm.person_id,
        cm.name,
        cm.keyword_count,
        cm.keywords,
        CASE 
            WHEN cm.keyword_count IS NULL THEN 'No Keywords'
            ELSE CAST(cm.keyword_count AS TEXT)
        END AS keyword_analysis
    FROM ranked_movies rm
    LEFT JOIN classifications cm ON rm.rank = 1 AND cm.person_id IN (
        SELECT person_id 
        FROM cast_info 
        WHERE movie_id = rm.movie_id
    )
)

SELECT 
    fo.title,
    fo.production_year,
    fo.name AS actor_name,
    COALESCE(fo.keywords, 'No Keywords Available') AS keyword_details,
    COUNT(DISTINCT fo.person_id) OVER (PARTITION BY fo.production_year) AS actor_count
FROM final_output fo
WHERE fo.production_year >= 2000 
GROUP BY fo.title, fo.production_year, fo.name, fo.keywords
ORDER BY fo.production_year DESC, fo.title;
