
WITH RankedMovies AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY COUNT(c.movie_id) DESC) AS rank_by_cast
    FROM 
        title t
    LEFT JOIN 
        cast_info c ON t.id = c.movie_id
    GROUP BY 
        t.id, t.title, t.production_year
),
ActorsByRole AS (
    SELECT 
        ca.movie_id,
        ca.person_id,
        r.role,
        COUNT(ca.role_id) AS role_count
    FROM 
        cast_info ca
    JOIN 
        role_type r ON ca.role_id = r.id
    GROUP BY 
        ca.movie_id, ca.person_id, r.role
),
TopActors AS (
    SELECT 
        ab.person_id,
        ak.name,
        SUM(ab.role_count) AS total_roles,
        ROW_NUMBER() OVER (ORDER BY SUM(ab.role_count) DESC) AS actor_rank
    FROM 
        ActorsByRole ab
    JOIN 
        aka_name ak ON ab.person_id = ak.person_id
    GROUP BY 
        ab.person_id, ak.name
    HAVING 
        SUM(ab.role_count) > 1 
),
PopularMovies AS (
    SELECT 
        rm.title_id,
        rm.title,
        rm.production_year
    FROM 
        RankedMovies rm
    WHERE 
        rm.rank_by_cast <= 5 
),
MovieKeywords AS (
    SELECT 
        mk.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        movie_keyword mk
    JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        mk.movie_id
)
SELECT 
    pm.title,
    pm.production_year,
    ak.name AS top_actor,
    mk.keywords,
    CASE 
        WHEN COUNT(ca.id) = 0 THEN 'No Cast'
        ELSE 'Has Cast' 
    END AS cast_status
FROM 
    PopularMovies pm
LEFT JOIN 
    cast_info ca ON pm.title_id = ca.movie_id
LEFT JOIN 
    TopActors ak ON ca.person_id = ak.person_id
LEFT JOIN 
    MovieKeywords mk ON pm.title_id = mk.movie_id
GROUP BY 
    pm.title, pm.production_year, ak.name, mk.keywords
ORDER BY 
    pm.production_year DESC, ak.total_roles DESC NULLS LAST;
