
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM DATE '2024-10-01') - t.production_year ORDER BY t.production_year DESC) AS year_rank
    FROM 
        aka_title t
    WHERE 
        t.production_year IS NOT NULL
),
CastInfo AS (
    SELECT 
        c.id AS cast_id,
        c.person_id,
        t.title,
        c.nr_order,
        r.role AS role_name,
        COALESCE(c.note, 'No note') AS note
    FROM 
        cast_info c
    JOIN 
        role_type r ON c.role_id = r.id
    JOIN 
        RankedMovies t ON c.movie_id = t.movie_id
    WHERE
        c.nr_order IS NOT NULL
)
SELECT 
    ak.name AS actor_name,
    t.title AS movie_title,
    c.role_name AS character_name,
    t.production_year,
    COALESCE(m.note, 'No additional info') AS movie_note,
    CASE 
        WHEN c.note IS NULL THEN 'No note available' 
        ELSE c.note 
    END AS cast_note,
    CASE 
        WHEN t.production_year < 2000 THEN 'Classic'
        ELSE 'Modern'
    END AS movie_era
FROM 
    aka_name ak
JOIN 
    cast_info c ON ak.person_id = c.person_id
JOIN 
    RankedMovies t ON c.movie_id = t.movie_id
LEFT JOIN 
    movie_info m ON t.movie_id = m.movie_id AND m.info_type_id = (SELECT id FROM info_type WHERE info = 'Synopsis')
WHERE 
    ak.name IS NOT NULL 
    AND t.year_rank <= 3
GROUP BY 
    ak.name, t.title, c.role_name, t.production_year, m.note, c.note
ORDER BY 
    t.production_year DESC, ak.name;
