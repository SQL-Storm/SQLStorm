WITH RECURSIVE MovieHierarchy AS (
    SELECT
        movie_id,
        title,
        production_year,
        1 AS level
    FROM
        aka_title
    WHERE
        season_nr IS NULL  

    UNION ALL

    SELECT
        m.movie_id,
        t.title,
        t.production_year,
        mh.level + 1
    FROM
        movie_link m
    JOIN
        aka_title t ON m.linked_movie_id = t.movie_id
    JOIN
        MovieHierarchy mh ON m.movie_id = mh.movie_id
),
RankedMovies AS (
    SELECT
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(cast_id) OVER (PARTITION BY mh.movie_id) AS cast_size,
        RANK() OVER (ORDER BY mh.production_year DESC) AS year_rank
    FROM
        MovieHierarchy mh
    LEFT JOIN
        cast_info c ON mh.movie_id = c.movie_id
),
PopularKeywords AS (
    SELECT
        mk.movie_id,
        COUNT(mk.keyword_id) AS keyword_count
    FROM
        movie_keyword mk
    GROUP BY
        mk.movie_id
    HAVING
        COUNT(mk.keyword_id) > 5  
)
SELECT
    rm.movie_id,
    rm.title,
    rm.production_year,
    COALESCE(rm.cast_size, 0) AS cast_size,
    COALESCE(pk.keyword_count, 0) AS keyword_count,
    CASE
        WHEN rm.year_rank <= 10 THEN 'Top 10 Recent Movies'
        ELSE 'Other Movies'
    END AS classification
FROM
    RankedMovies rm
LEFT JOIN
    PopularKeywords pk ON rm.movie_id = pk.movie_id
WHERE
    rm.production_year >= 2000  
ORDER BY
    rm.production_year DESC, rm.cast_size DESC;