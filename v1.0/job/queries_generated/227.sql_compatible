
WITH RankedMovies AS (
    SELECT 
        at.title,
        at.production_year,
        COUNT(DISTINCT ci.person_id) AS cast_count,
        ROW_NUMBER() OVER (PARTITION BY at.production_year ORDER BY COUNT(DISTINCT ci.person_id) DESC) AS rank
    FROM 
        aka_title at
    LEFT JOIN 
        cast_info ci ON at.movie_id = ci.movie_id
    GROUP BY 
        at.title, at.production_year
),
TopRankedMovies AS (
    SELECT 
        title,
        production_year,
        cast_count
    FROM 
        RankedMovies
    WHERE 
        rank <= 5
),
MovieDetails AS (
    SELECT 
        tm.title,
        tm.production_year,
        COALESCE(mi.info, 'No Info') AS movie_info,
        STRING_AGG(DISTINCT cn.name, ', ') AS company_names
    FROM 
        TopRankedMovies tm
    LEFT JOIN 
        movie_companies mc ON tm.title = (SELECT title FROM aka_title WHERE movie_id = mc.movie_id)
    LEFT JOIN 
        company_name cn ON mc.company_id = cn.id
    LEFT JOIN 
        movie_info mi ON tm.title = (SELECT title FROM aka_title WHERE movie_id = mi.movie_id)
    GROUP BY 
        tm.title, tm.production_year, mi.info
),
ComprehensiveReport AS (
    SELECT 
        md.title,
        md.production_year,
        md.movie_info,
        md.company_names,
        COUNT(DISTINCT mk.keyword) AS keyword_count
    FROM 
        MovieDetails md
    LEFT JOIN 
        movie_keyword mk ON md.title = (SELECT title FROM aka_title WHERE movie_id = mk.movie_id)
    GROUP BY 
        md.title, md.production_year, md.movie_info, md.company_names
)
SELECT 
    cr.title,
    cr.production_year,
    cr.movie_info,
    cr.company_names,
    cr.keyword_count,
    CASE 
        WHEN cr.keyword_count > 0 THEN 'Has Keywords'
        ELSE 'No Keywords'
    END AS keyword_status
FROM 
    ComprehensiveReport cr
WHERE 
    cr.production_year BETWEEN 2000 AND 2023
ORDER BY 
    cr.production_year DESC, cr.keyword_count DESC;
