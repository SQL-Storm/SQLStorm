
WITH RankedCast AS (
    SELECT 
        ci.movie_id,
        ak.name AS actor_name,
        RANK() OVER (PARTITION BY ci.movie_id ORDER BY ci.nr_order) AS actor_rank,
        COUNT(*) OVER (PARTITION BY ci.movie_id) AS total_actors,
        COALESCE(t.title, 'N/A') AS movie_title,
        COALESCE(t.production_year, 0) AS production_year,
        COALESCE(k.keyword, 'Unknown') AS keyword
    FROM 
        cast_info ci
    JOIN 
        aka_name ak ON ci.person_id = ak.person_id
    LEFT JOIN 
        aka_title t ON t.movie_id = ci.movie_id
    LEFT JOIN 
        movie_keyword mk ON mk.movie_id = ci.movie_id
    LEFT JOIN 
        keyword k ON k.id = mk.keyword_id
),
ActorMovies AS (
    SELECT 
        actor_name,
        COUNT(DISTINCT movie_id) AS movies_count,
        AVG(production_year) AS avg_production_year
    FROM 
        RankedCast
    WHERE 
        actor_rank <= 3 AND total_actors > 5
    GROUP BY 
        actor_name
),
FilteredMovies AS (
    SELECT 
        movie_id,
        movie_title,
        AVG(production_year) AS avg_production_age
    FROM 
        RankedCast
    GROUP BY 
        movie_id, movie_title
    HAVING 
        AVG(production_year) < 2000
)
SELECT 
    am.actor_name,
    am.movies_count,
    fm.movie_title,
    fm.avg_production_age
FROM 
    ActorMovies am
LEFT JOIN 
    FilteredMovies fm ON am.movies_count > 1
WHERE 
    am.avg_production_year IS NOT NULL
ORDER BY 
    am.movies_count DESC,
    fm.avg_production_age ASC
OFFSET 5 ROWS
FETCH NEXT 10 ROWS ONLY;
