
WITH RECURSIVE movie_hierarchy AS (
    SELECT 
        m.id AS movie_id,
        t.title,
        t.production_year,
        CAST(NULL AS integer) AS parent_movie_id
    FROM
        aka_title t
    JOIN
        movie_companies mc ON t.id = mc.movie_id
    JOIN
        company_name cn ON mc.company_id = cn.id
    WHERE
        t.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')
    
    UNION ALL

    SELECT 
        m.id,
        t.title,
        t.production_year,
        mh.movie_id
    FROM 
        aka_title t
    JOIN 
        movie_link ml ON t.id = ml.movie_id
    JOIN 
        movie_hierarchy mh ON ml.linked_movie_id = mh.movie_id
)
SELECT 
    mh.movie_id,
    mh.title,
    mh.production_year,
    COALESCE(ca.name, 'Unknown actor') AS actor_name,
    ROW_NUMBER() OVER (PARTITION BY mh.movie_id ORDER BY ca.name) AS actor_order,
    STRING_AGG(DISTINCT mk.keyword, ', ') AS keywords,
    COUNT(DISTINCT mc.id) AS company_count
FROM 
    movie_hierarchy mh
LEFT JOIN 
    cast_info ci ON mh.movie_id = ci.movie_id
LEFT JOIN 
    aka_name ca ON ci.person_id = ca.person_id
LEFT JOIN 
    movie_keyword mk ON mh.movie_id = mk.movie_id
LEFT JOIN 
    movie_companies mc ON mh.movie_id = mc.movie_id
WHERE 
    mh.production_year BETWEEN 2000 AND 2023
    AND ca.name IS NOT NULL
GROUP BY 
    mh.movie_id, mh.title, mh.production_year, ca.name
HAVING 
    COUNT(DISTINCT ci.person_id) > 2
ORDER BY 
    mh.production_year DESC, mh.title;
