WITH RECURSIVE MovieHierarchy AS (
    
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        mt.episode_of_id,
        1 AS level
    FROM 
        aka_title mt
    WHERE 
        mt.episode_of_id IS NULL
    
    UNION ALL
    
    SELECT 
        e.id AS movie_id,
        e.title,
        e.production_year,
        e.episode_of_id,
        mh.level + 1 AS level
    FROM 
        aka_title e
    JOIN 
        MovieHierarchy mh ON e.episode_of_id = mh.movie_id
),
MovieWithKeywords AS (
    
    SELECT 
        m.movie_id,
        STRING_AGG(k.keyword, ', ') AS keywords
    FROM 
        MovieHierarchy m
    LEFT JOIN 
        movie_keyword mk ON m.movie_id = mk.movie_id
    LEFT JOIN 
        keyword k ON mk.keyword_id = k.id
    GROUP BY 
        m.movie_id
),
MovieDetails AS (
    
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        COALESCE(ci.person_id, 0) AS main_actor_id,
        COALESCE(c.name, 'Unknown') AS company_name,
        COALESCE(wave.rank, 0) AS actor_rank,
        mk.keywords
    FROM 
        aka_title m
    LEFT JOIN 
        cast_info ci ON m.id = ci.movie_id AND ci.nr_order = 1
    LEFT JOIN 
        company_name c ON c.id IN (
            SELECT mc.company_id
            FROM movie_companies mc
            WHERE mc.movie_id = m.id
        )
    LEFT JOIN 
        (SELECT 
            movie_id, 
            ROW_NUMBER() OVER (PARTITION BY movie_id ORDER BY c.nr_order) AS rank
         FROM 
            cast_info c) wave ON wave.movie_id = m.id
    LEFT JOIN 
        MovieWithKeywords mk ON m.id = mk.movie_id
)
SELECT 
    md.movie_id,
    md.title,
    md.production_year,
    md.main_actor_id,
    md.company_name,
    md.keywords,
    CASE 
        WHEN md.keywords IS NULL THEN 'No keywords'
        ELSE 'Contains keywords'
    END AS keyword_status
FROM 
    MovieDetails md
WHERE 
    md.production_year >= 2000
ORDER BY 
    md.production_year DESC, 
    md.title ASC;