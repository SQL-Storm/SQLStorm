WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level,
        NULL::integer AS parent_movie_id
    FROM 
        aka_title mt
    WHERE 
        mt.kind_id = 1  
    
    UNION ALL
    
    SELECT 
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1,
        mh.movie_id
    FROM 
        movie_link ml
    JOIN 
        aka_title at ON ml.linked_movie_id = at.id
    JOIN 
        MovieHierarchy mh ON ml.movie_id = mh.movie_id
),
MovieStats AS (
    SELECT 
        mh.movie_id,
        mh.title,
        mh.production_year,
        COUNT(DISTINCT ci.person_id) AS cast_count,
        AVG(CASE WHEN mi.info_type_id = 3 THEN NULLIF(LENGTH(mi.info), 0) END) AS avg_info_length,  
        MAX(ct.kind) AS company_type
    FROM 
        MovieHierarchy mh
    LEFT JOIN 
        complete_cast cc ON mh.movie_id = cc.movie_id
    LEFT JOIN 
        cast_info ci ON cc.subject_id = ci.person_id
    LEFT JOIN 
        movie_companies mc ON mh.movie_id = mc.movie_id
    LEFT JOIN 
        company_type ct ON mc.company_type_id = ct.id
    LEFT JOIN 
        movie_info mi ON mh.movie_id = mi.movie_id
    GROUP BY 
        mh.movie_id, mh.title, mh.production_year
),
RankedMovies AS (
    SELECT 
        ms.movie_id,
        ms.title,
        ms.production_year,
        ms.cast_count,
        ms.avg_info_length,
        ms.company_type,
        RANK() OVER (PARTITION BY ms.company_type ORDER BY ms.cast_count DESC) AS rank_within_company
    FROM 
        MovieStats ms
)
SELECT 
    rm.title,
    rm.production_year,
    rm.cast_count,
    rm.avg_info_length,
    rm.company_type,
    CASE 
        WHEN rm.rank_within_company = 1 THEN 'Top' 
        ELSE 'Not Top' 
    END AS rank_category,
    COALESCE(NULLIF(rm.avg_info_length, 0), 'No Info') AS info_length_status
FROM 
    RankedMovies rm
WHERE 
    rm.company_type IS NOT NULL 
    AND rm.cast_count > 0
ORDER BY 
    rm.company_type, rm.rank_within_company;