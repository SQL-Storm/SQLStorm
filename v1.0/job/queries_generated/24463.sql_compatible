
WITH RankedMovies AS (
    SELECT 
        t.id AS movie_id,
        t.title,
        t.production_year,
        ROW_NUMBER() OVER (PARTITION BY t.production_year ORDER BY t.title) AS rn,
        COUNT(cast.id) OVER (PARTITION BY t.id) AS cast_count
    FROM 
        aka_title t
    JOIN 
        cast_info cast ON cast.movie_id = t.id
    WHERE 
        t.production_year IS NOT NULL
),
TopMovies AS (
    SELECT 
        rm.movie_id,
        rm.title,
        rm.production_year,
        rm.cast_count
    FROM 
        RankedMovies rm
    WHERE 
        rm.rn <= 3
),
MovieDetails AS (
    SELECT 
        t.movie_id,
        t.title,
        STRING_AGG(DISTINCT ak.name ORDER BY ak.name) AS actors,
        COALESCE(SUM(mk.id), 0) AS keyword_count
    FROM 
        TopMovies t
    LEFT JOIN 
        cast_info ci ON ci.movie_id = t.movie_id
    LEFT JOIN 
        aka_name ak ON ak.person_id = ci.person_id
    LEFT JOIN 
        movie_keyword mk ON mk.movie_id = t.movie_id
    GROUP BY 
        t.movie_id, t.title
),
FinalResults AS (
    SELECT 
        md.title,
        md.actors,
        md.keyword_count,
        ROW_NUMBER() OVER (ORDER BY md.keyword_count DESC) AS rank
    FROM 
        MovieDetails md
    WHERE 
        md.actors IS NOT NULL
)
SELECT 
    fr.title,
    fr.actors,
    fr.keyword_count,
    CASE 
        WHEN fr.keyword_count > 3 THEN 'High'
        WHEN fr.keyword_count IS NULL OR fr.keyword_count = 0 THEN 'No Keywords'
        ELSE 'Medium'
    END AS keyword_classification,
    CASE 
        WHEN fr.rank < 5 THEN 'Top 5'
        ELSE 'Beyond Top 5'
    END AS ranking_status
FROM 
    FinalResults fr
WHERE 
    fr.rank <= 10
ORDER BY 
    fr.keyword_count DESC, fr.title;
