WITH RECURSIVE MovieHierarchy AS (
    SELECT
        mt.id AS movie_id,
        mt.title,
        mt.production_year,
        1 AS level,
        CAST(mt.title AS TEXT) AS path
    FROM
        aka_title mt
    WHERE
        mt.production_year >= 2000  

    UNION ALL

    SELECT
        ml.linked_movie_id,
        at.title,
        at.production_year,
        mh.level + 1,
        CAST(mh.path || ' > ' || at.title AS TEXT)
    FROM
        MovieHierarchy mh
    JOIN
        movie_link ml ON mh.movie_id = ml.movie_id
    JOIN
        aka_title at ON ml.linked_movie_id = at.id
    WHERE
        at.production_year >= 2000  
),

AggregatedData AS (
    SELECT
        mh.movie_id,
        mh.title,
        mh.production_year,
        mh.level,
        mh.path,
        COUNT(ci.person_id) AS total_cast,
        STRING_AGG(DISTINCT kn.keyword, ', ') AS keywords
    FROM
        MovieHierarchy mh
    LEFT JOIN
        complete_cast cc ON mh.movie_id = cc.movie_id
    LEFT JOIN
        cast_info ci ON cc.subject_id = ci.person_id
    LEFT JOIN
        movie_keyword mk ON mh.movie_id = mk.movie_id
    LEFT JOIN
        keyword kn ON mk.keyword_id = kn.id
    GROUP BY
        mh.movie_id, mh.title, mh.production_year, mh.level, mh.path
)

SELECT
    mg.*,
    RANK() OVER (PARTITION BY mg.level ORDER BY mg.total_cast DESC) AS rank_within_level,
    CASE 
        WHEN mg.total_cast IS NULL THEN 'No cast members'
        WHEN mg.level = 1 AND mg.total_cast < 5 THEN 'Low cast'
        WHEN mg.level = 1 AND mg.total_cast BETWEEN 5 AND 15 THEN 'Moderate cast'
        WHEN mg.level = 1 AND mg.total_cast > 15 THEN 'High cast'
        ELSE 'N/A'
    END AS cast_quality
FROM
    AggregatedData mg
WHERE
    mg.production_year BETWEEN 2010 AND 2022 
ORDER BY
    mg.level, mg.total_cast DESC;