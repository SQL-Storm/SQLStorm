WITH RECURSIVE MovieHierarchy AS (
    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        1 AS level,
        CAST(m.title AS VARCHAR(255)) AS path
    FROM 
        aka_title m
    WHERE 
        m.episode_of_id IS NULL

    UNION ALL

    SELECT 
        m.id AS movie_id,
        m.title,
        m.production_year,
        mh.level + 1,
        CAST(mh.path || ' -> ' || m.title AS VARCHAR(255))
    FROM 
        aka_title m
    INNER JOIN 
        MovieHierarchy mh ON m.episode_of_id = mh.movie_id
)

SELECT 
    mk.movie_id,
    a.name AS actor_name,
    COUNT(DISTINCT k.keyword) AS keyword_count,
    MAX(mh.path) AS full_path,
    SUM(CASE WHEN ci.note IS NULL THEN 1 ELSE 0 END) AS null_notes_count,
    AVG(CASE 
            WHEN m.production_year < 2000 THEN 0 
            ELSE m.production_year 
        END) AS avg_production_year,
    STRING_AGG(DISTINCT i.info, ', ') AS info_details
FROM 
    movie_keyword mk
JOIN 
    aka_title m ON mk.movie_id = m.id
JOIN 
    cast_info ci ON m.id = ci.movie_id
JOIN 
    aka_name a ON ci.person_id = a.person_id
LEFT JOIN 
    keyword k ON mk.keyword_id = k.id
LEFT JOIN 
    movie_info mi ON mi.movie_id = m.id
LEFT JOIN 
    MovieHierarchy mh ON mh.movie_id = m.id
LEFT JOIN 
    person_info pi ON a.person_id = pi.person_id
LEFT JOIN 
    info_type it ON pi.info_type_id = it.id
WHERE 
    m.production_year IS NOT NULL
GROUP BY 
    mk.movie_id, a.name
HAVING 
    COUNT(DISTINCT k.keyword) > 2
ORDER BY 
    keyword_count DESC, a.name ASC
LIMIT 50;