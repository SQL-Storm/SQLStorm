
WITH RECURSIVE title_hierarchy AS (
    SELECT 
        t.id AS title_id,
        t.title,
        t.production_year,
        t.kind_id,
        t.episode_of_id,
        t.season_nr,
        t.episode_nr,
        t.md5sum,
        0 AS depth
    FROM title t
    WHERE t.kind_id IN (SELECT id FROM kind_type WHERE kind = 'movie')

    UNION ALL

    SELECT 
        t2.id AS title_id,
        t2.title,
        t2.production_year,
        t2.kind_id,
        t2.episode_of_id,
        t2.season_nr,
        t2.episode_nr,
        t2.md5sum,
        th.depth + 1
    FROM title_hierarchy th
    JOIN title t2 ON th.title_id = t2.episode_of_id
)

SELECT 
    COALESCE(a.name, c.name) AS actor_name,
    t.title,
    t.production_year,
    COUNT(DISTINCT mc.company_id) AS num_companies,
    SUM(CASE WHEN ci.role_id IS NOT NULL THEN 1 ELSE 0 END) AS num_roles,
    MAX(CASE 
        WHEN t.production_year < 2000 
        THEN DATEDIFF(DATE '2024-10-01', t.production_year)
        ELSE NULL 
    END) AS days_since_release,
    STRING_AGG(DISTINCT k.keyword, ', ' ORDER BY k.keyword) AS keywords_list,
    ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY t.production_year DESC) AS rank_within_actor
FROM title_hierarchy t
LEFT JOIN cast_info ci 
    ON t.title_id = ci.movie_id
LEFT JOIN aka_name a 
    ON ci.person_id = a.person_id
LEFT JOIN movie_companies mc 
    ON t.title_id = mc.movie_id
LEFT JOIN company_name c 
    ON mc.company_id = c.id
LEFT JOIN movie_keyword mk 
    ON t.title_id = mk.movie_id
LEFT JOIN keyword k 
    ON mk.keyword_id = k.id
WHERE 
    t.production_year IS NOT NULL
    AND (t.production_year >= 1980 AND t.production_year <= 2023)
GROUP BY 
    a.person_id, a.name, t.title, t.production_year, c.name
HAVING 
    COUNT(DISTINCT mc.company_id) > 5
    AND MAX(ci.nr_order) > 2
ORDER BY 
    num_companies DESC,
    rank_within_actor
LIMIT 100;
