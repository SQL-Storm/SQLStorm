WITH TagCounts AS (
    SELECT 
        Tags.TagName,
        COUNT(DISTINCT Posts.Id) AS PostCount,
        SUM(Posts.ViewCount) AS TotalViews,
        SUM(Posts.Score) AS TotalScore,
        AVG(COALESCE(NULLIF(Posts.AnswerCount, 0), NULL)) AS AvgAnswers
    FROM 
        Tags
    JOIN 
        Posts ON Tags.Id = ANY(string_to_array(substring(Posts.Tags, 2, length(Posts.Tags)-2), '><')::int[])
    WHERE 
        Posts.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        Tags.TagName
),

UserBadges AS (
    SELECT 
        Users.DisplayName,
        COUNT(Badges.Id) AS BadgeCount,
        SUM(CASE WHEN Badges.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN Badges.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN Badges.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users
    LEFT JOIN 
        Badges ON Users.Id = Badges.UserId
    GROUP BY 
        Users.DisplayName
)

SELECT 
    T.TagName,
    T.PostCount,
    T.TotalViews,
    T.TotalScore,
    T.AvgAnswers,
    U.DisplayName,
    U.BadgeCount,
    U.GoldBadges,
    U.SilverBadges,
    U.BronzeBadges
FROM 
    TagCounts T
JOIN 
    UserBadges U ON U.BadgeCount = (
        SELECT MAX(BadgeCount) 
        FROM UserBadges 
    )
ORDER BY 
    T.TotalScore DESC, T.TotalViews DESC
LIMIT 10;