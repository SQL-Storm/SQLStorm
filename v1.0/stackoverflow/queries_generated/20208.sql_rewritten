WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBounty
    FROM 
        Posts AS p
    LEFT JOIN 
        Comments AS c ON p.Id = c.PostId
    LEFT JOIN 
        Votes AS v ON p.Id = v.PostId AND v.VoteTypeId IN (9, 10) 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM 
        Users AS u
    LEFT JOIN 
        Badges AS b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        ur.Reputation,
        ur.BadgeCount,
        ur.GoldBadges,
        ur.SilverBadges,
        ur.BronzeBadges
    FROM 
        RankedPosts AS rp
    JOIN 
        UserReputation AS ur ON rp.OwnerUserId = ur.UserId
    WHERE 
        rp.CommentCount > 5 AND
        (ur.Reputation > 1000 OR ur.BadgeCount > 0)
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.CreationDate,
    fp.Reputation,
    fp.BadgeCount,
    fp.GoldBadges,
    fp.SilverBadges,
    fp.BronzeBadges,
    CASE 
        WHEN fp.CreationDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' THEN 'Old Post'
        ELSE 'Recent Post'
    END AS PostAge,
    LEAD(fp.Title) OVER (ORDER BY fp.CreationDate) AS NextPostTitle
FROM 
    FilteredPosts AS fp
ORDER BY 
    fp.CreationDate DESC
FETCH FIRST 10 ROWS ONLY;