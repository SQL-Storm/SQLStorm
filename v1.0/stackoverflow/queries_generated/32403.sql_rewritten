WITH RecursiveUserStats AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        U.CreationDate,
        U.Location,
        U.Views,
        U.UpVotes,
        U.DownVotes,
        U.EmailHash,
        1 AS Level
    FROM Users U
    WHERE U.Reputation > 1000
    
    UNION ALL
    
    SELECT 
        U.Id,
        U.DisplayName,
        U.Reputation,
        U.CreationDate,
        U.Location,
        U.Views,
        U.UpVotes,
        U.DownVotes,
        U.EmailHash,
        Level + 1
    FROM Users U
    INNER JOIN RecursiveUserStats R ON U.Reputation > R.Reputation
    WHERE Level < 5
),
PostRanked AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.OwnerUserId,
        P.Score,
        RANK() OVER (PARTITION BY P.OwnerUserId ORDER BY P.Score DESC) AS PostRank
    FROM Posts P
    WHERE P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PopularTags AS (
    SELECT 
        T.TagName,
        COUNT(P.Id) AS PostCount
    FROM Tags T
    INNER JOIN Posts P ON P.Tags LIKE CONCAT('%', T.TagName, '%')
    GROUP BY T.TagName
    HAVING COUNT(P.Id) > 10
),
UserBadgeCounts AS (
    SELECT 
        B.UserId,
        COUNT(B.Id) AS BadgeCount
    FROM Badges B
    GROUP BY B.UserId
),
UserPostStats AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COALESCE(PB.BadgeCount, 0) AS BadgeCount,
        COUNT(P.Id) AS PostCount,
        SUM(COALESCE(P.Score, 0)) AS TotalScore,
        SUM(COALESCE(C.CommentCount, 0)) AS TotalComments
    FROM Users U
    LEFT JOIN UserBadgeCounts PB ON U.Id = PB.UserId
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN (SELECT PostId, COUNT(*) AS CommentCount FROM Comments GROUP BY PostId) C ON P.Id = C.PostId
    GROUP BY U.Id
)
SELECT 
    U.*, 
    PS.PostCount, 
    PS.TotalScore, 
    PS.TotalComments, 
    RT.Level AS RecursiveLevel,
    PT.TagName
FROM UserPostStats PS
INNER JOIN RecursiveUserStats RT ON PS.UserId = RT.UserId
LEFT JOIN PopularTags PT ON PT.PostCount > 10
WHERE PS.BadgeCount > 0
ORDER BY PS.TotalScore DESC, RT.Level, U.Reputation DESC
LIMIT 20;