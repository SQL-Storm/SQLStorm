
WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        SUM(CASE WHEN v.VoteTypeId IN (2, 3) THEN 1 ELSE 0 END) AS TotalVotes,
        SUM(COALESCE(b.Class, 0)) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.UserId) FILTER (WHERE v.VoteTypeId = 2) AS UpVoteCount,
        COUNT(DISTINCT v.UserId) FILTER (WHERE v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        TotalPosts,
        TotalComments,
        TotalVotes,
        TotalBadges
    FROM 
        UserActivity
    ORDER BY 
        TotalPosts DESC, TotalVotes DESC
    LIMIT 10
)
SELECT 
    u.DisplayName AS TopUserName,
    p.Title AS PostTitle,
    p.Score AS PostScore,
    p.ViewCount AS PostViews,
    p.CommentCount AS PostComments,
    SUBSTRING(p.Body, 1, 100) AS PostSnippet,
    u.TotalPosts AS UserPostCount,
    u.TotalVotes AS UserVoteCount,
    u.TotalBadges AS UserBadgeCount
FROM 
    PostStatistics p
JOIN 
    TopUsers u ON p.UpVoteCount > 10
ORDER BY 
    p.Score DESC, p.ViewCount DESC;
