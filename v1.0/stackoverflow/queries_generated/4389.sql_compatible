
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
), 
UserReputations AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        CASE 
            WHEN u.Reputation > 1000 THEN 'High'
            WHEN u.Reputation BETWEEN 100 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS ReputationLevel
    FROM 
        Users u
), 
PostVoteCounts AS (
    SELECT 
        v.PostId,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes
    FROM 
        Votes v
    GROUP BY 
        v.PostId
), 
ClosedPostReasons AS (
    SELECT 
        ph.PostId,
        STRING_AGG(cr.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes cr ON ph.Comment = CAST(cr.Id AS VARCHAR)
    WHERE 
        ph.PostHistoryTypeId = 10
    GROUP BY 
        ph.PostId
)

SELECT 
    up.DisplayName,
    up.ReputationLevel,
    r.PostId,
    r.Title,
    r.CreationDate,
    COALESCE(pvc.UpVotes, 0) AS UpVotes,
    COALESCE(pvc.DownVotes, 0) AS DownVotes,
    COALESCE(cpr.CloseReasons, 'Open') AS CloseReasons,
    r.Score,
    r.ViewCount
FROM 
    RankedPosts r
JOIN 
    Users u ON u.Id = r.OwnerUserId
JOIN 
    UserReputations up ON u.Id = up.UserId
LEFT JOIN 
    PostVoteCounts pvc ON r.PostId = pvc.PostId
LEFT JOIN 
    ClosedPostReasons cpr ON r.PostId = cpr.PostId
WHERE 
    r.UserPostRank <= 3
ORDER BY 
    up.ReputationLevel DESC, 
    r.Score DESC, 
    r.CreationDate DESC;
