WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),

UserPostAggregates AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        AVG(COALESCE(p.ViewCount, 0)) AS AvgViewCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),

TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        PostCount,
        TotalScore,
        AvgViewCount,
        RANK() OVER (ORDER BY TotalScore DESC) AS UserRank
    FROM 
        UserPostAggregates
)

SELECT 
    pu.PostId,
    pu.Title,
    pu.Score,
    pu.CreationDate,
    u.DisplayName AS OwnerDisplayName,
    COALESCE(rh.Level, -1) AS HierarchyLevel,
    t.UserRank,
    CASE 
        WHEN t.UserRank <= 10 THEN 'Top Contributor'
        ELSE 'Regular Contributor'
    END AS ContributorType
FROM 
    RecursivePostHierarchy pu
LEFT JOIN 
    Users u ON pu.OwnerUserId = u.Id
LEFT JOIN 
    TopUsers t ON u.Id = t.UserId
LEFT JOIN 
    RecursivePostHierarchy rh ON pu.ParentId = rh.PostId
WHERE 
    pu.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
ORDER BY 
    pu.Score DESC,
    pu.CreationDate DESC;