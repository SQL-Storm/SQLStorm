
WITH RECURSIVE RecursiveTopPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ViewCount,
        p.Score,
        p.PostTypeId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ViewCount,
        p.Score,
        p.PostTypeId,
        rp.Level + 1
    FROM 
        Posts p
    INNER JOIN RecursiveTopPosts rp ON p.ParentId = rp.Id
),
PostStatistics AS (
    SELECT 
        p.Id,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT CASE WHEN v.VoteTypeId = 2 THEN v.UserId END) AS UpVotes,
        COUNT(DISTINCT CASE WHEN v.VoteTypeId = 3 THEN v.UserId END) AS DownVotes,
        AVG(u.Reputation) AS AvgReputation,
        MAX(u.Reputation) AS MaxReputation
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    GROUP BY 
        p.Id, p.Title
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(pl.PostId) AS PostCount
    FROM 
        Tags t
    JOIN 
        PostLinks pl ON pl.TagId = t.Id
    JOIN 
        Posts p ON p.Id = pl.PostId
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(pl.PostId) > 5
)
SELECT 
    rp.Id AS PostId,
    rp.Title,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes,
    ps.AvgReputation,
    ps.MaxReputation,
    (
        SELECT 
            STRING_AGG(tag.TagName, ', ') 
        FROM 
            Tags tag
        WHERE 
            tag.Id IN (SELECT t.Id FROM Tags t WHERE rp.Title LIKE '%' || t.TagName || '%')
    ) AS RelatedTags,
    (SELECT COUNT(pl.RelatedPostId) 
     FROM PostLinks pl 
     WHERE pl.PostId = rp.Id
    ) AS TotalLinks,
    COUNT(ptag.PostId) AS PopularTagCount
FROM 
    RecursiveTopPosts rp
LEFT JOIN 
    PostStatistics ps ON ps.Id = rp.Id
LEFT JOIN 
    PopularTags ptag ON ptag.TagName IN (SELECT UNNEST(string_to_array(rp.Title, ' ')))
GROUP BY 
    rp.Id, rp.Title, ps.CommentCount, ps.UpVotes, ps.DownVotes, ps.AvgReputation, ps.MaxReputation
ORDER BY 
    rp.ViewCount DESC, ps.UpVotes DESC
LIMIT 10;
