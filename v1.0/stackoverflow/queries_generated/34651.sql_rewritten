WITH RankedPosts AS (
    SELECT
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM
        Posts p
    WHERE
        p.PostTypeId = 1
        AND p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
PostWithMetrics AS (
    SELECT
        rp.Id AS PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        COALESCE(COUNT(c.Id), 0) AS CommentCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 2) AS UpVotes,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 3) AS DownVotes,
        CASE
            WHEN rp.ViewCount > 1000 THEN 'High'
            WHEN rp.ViewCount BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS ViewCategory
    FROM
        RankedPosts rp
    LEFT JOIN
        Comments c ON c.PostId = rp.Id
    GROUP BY
        rp.Id, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount
),
UserBadges AS (
    SELECT
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM
        Users u
    LEFT JOIN
        Badges b ON b.UserId = u.Id
    GROUP BY
        u.Id
)
SELECT
    u.DisplayName,
    pm.Title,
    pm.CreationDate,
    pm.Score,
    pm.ViewCount,
    pm.CommentCount,
    pm.UpVotes,
    pm.DownVotes,
    ub.BadgeCount,
    pm.ViewCategory
FROM
    Users u
JOIN
    PostWithMetrics pm ON pm.PostId IN (
        SELECT PostId
        FROM Posts
        WHERE OwnerUserId = u.Id
        ORDER BY Score DESC
        LIMIT 5
    )
LEFT JOIN 
    UserBadges ub ON ub.UserId = u.Id
WHERE
    u.Reputation > 1000
ORDER BY 
    u.Reputation DESC, pm.Score DESC;