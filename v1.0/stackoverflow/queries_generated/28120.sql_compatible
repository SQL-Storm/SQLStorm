
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.Body,
        p.CreationDate,
        p.Tags,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.ViewCount DESC) AS TagRank
    FROM 
        Posts p
        LEFT JOIN Comments c ON p.Id = c.PostId
        LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.Body, p.CreationDate, p.Tags
),
PopularPosts AS (
    SELECT 
        rp.*,
        t.TagName,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        RankedPosts rp
        JOIN Tags t ON rp.Tags LIKE CONCAT('%', t.TagName, '%')
        LEFT JOIN Badges b ON b.UserId IN (SELECT OwnerUserId FROM Posts WHERE Id = rp.Id)
    WHERE 
        rp.TagRank <= 3 
    GROUP BY 
        rp.Id, rp.Title, rp.ViewCount, rp.Body, rp.CreationDate, rp.Tags, t.TagName
)

SELECT 
    pp.Title,
    pp.ViewCount,
    pp.CommentCount,
    pp.BadgeCount,
    pp.TagName,
    STRING_AGG(DISTINCT u.DisplayName, ', ') AS Contributors,
    MAX(pp.CreationDate) AS MostRecentContribution,
    ARRAY_AGG(DISTINCT ph.Comment) AS EditComments
FROM 
    PopularPosts pp
    LEFT JOIN PostHistory ph ON pp.Id = ph.PostId
    LEFT JOIN Users u ON pp.Id = u.AccountId
GROUP BY 
    pp.Title, pp.ViewCount, pp.CommentCount, pp.BadgeCount, pp.TagName
ORDER BY 
    pp.ViewCount DESC;
