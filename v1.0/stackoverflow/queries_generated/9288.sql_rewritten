WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionsAsked,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswersProvided,
        SUM(v.VoteTypeId = 2) AS UpVotes,
        SUM(v.VoteTypeId = 3) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        u.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        u.Id, u.DisplayName
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COALESCE(c.CommentCount, 0) AS Comments,
        tags.Count AS TagCount
    FROM 
        Posts p
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS CommentCount FROM Comments GROUP BY PostId) c ON p.Id = c.PostId
    LEFT JOIN 
        (SELECT 
            unnest(string_to_array(Tags, '><')) AS Tag, 
            COUNT(*) AS Count 
         FROM 
            Posts 
         WHERE 
            Tags IS NOT NULL 
         GROUP BY Tag) tags ON POSITION(tags.Tag IN p.Tags) > 0
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month'
)
SELECT 
    ua.DisplayName,
    ua.TotalPosts,
    ua.QuestionsAsked,
    ua.AnswersProvided,
    ua.UpVotes,
    ua.DownVotes,
    pd.PostId,
    pd.Title,
    pd.CreationDate,
    pd.Score,
    pd.ViewCount,
    pd.Comments,
    pd.TagCount
FROM 
    UserActivity ua
JOIN 
    PostDetails pd ON ua.UserId = pd.OwnerUserId
ORDER BY 
    ua.TotalPosts DESC, 
    pd.Score DESC
LIMIT 50;