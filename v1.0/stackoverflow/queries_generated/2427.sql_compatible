
WITH RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.LastActivityDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days'
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(b.Class), 0) AS TotalBadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        ur.DisplayName,
        ur.Reputation,
        ur.TotalBadgeCount,
        COALESCE((SELECT COUNT(*) FROM Comments c WHERE c.PostId = rp.PostId), 0) AS CommentCount,
        COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.PostId AND v.VoteTypeId = 2), 0) AS UpVotes
    FROM 
        RecentPosts rp
    JOIN 
        UserReputation ur ON rp.OwnerUserId = ur.UserId
    WHERE 
        rp.rn = 1
)
SELECT 
    pd.PostId,
    pd.Title,
    pd.CreationDate,
    pd.Score,
    pd.ViewCount,
    pd.DisplayName,
    pd.Reputation,
    pd.TotalBadgeCount,
    pd.CommentCount,
    pd.UpVotes,
    CASE 
        WHEN pd.Reputation > 1000 THEN 'High Reputation'
        WHEN pd.Reputation BETWEEN 500 AND 1000 THEN 'Medium Reputation'
        ELSE 'Low Reputation'
    END AS ReputationCategory
FROM 
    PostDetails pd
ORDER BY 
    pd.ViewCount DESC
LIMIT 10
UNION ALL
SELECT 
    NULL AS PostId,
    'Total Users' AS Title,
    NULL AS CreationDate,
    NULL AS Score,
    NULL AS ViewCount,
    NULL AS DisplayName,
    COUNT(DISTINCT u.Id) AS Reputation,
    NULL AS TotalBadgeCount,
    NULL AS CommentCount,
    NULL AS UpVotes,
    NULL AS ReputationCategory
FROM 
    Users u
WHERE 
    u.Reputation IS NOT NULL;
