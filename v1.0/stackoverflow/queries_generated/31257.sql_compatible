
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, CAST('2024-10-01' AS DATE))
),
PostTags AS (
    SELECT
        p.Id AS PostId,
        t.TagName,
        COUNT(pt.PostId) AS TagCount
    FROM 
        Posts p
    JOIN 
        LATERAL (SELECT unnest(string_to_array(p.Tags, ',')) AS tag) AS tag ON true
    JOIN 
        Tags t ON t.TagName = tag.tag
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, t.TagName
),
UserBadges AS (
    SELECT 
        b.UserId, 
        COUNT(b.Id) AS BadgeCount, 
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
PostHistoryDetails AS (
    SELECT
        ph.PostId,
        COUNT(ph.Id) AS EditCount,
        MAX(ph.CreationDate) AS LastEditDate,
        COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.Id END) AS ClosureCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11, 12) 
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.Title,
    rp.Score,
    rp.ViewCount,
    COALESCE(ut.BadgeCount, 0) AS UserBadgeCount,
    COALESCE(ut.BadgeNames, 'No Badges') AS UserBadgeNames,
    COALESCE(pt.TagName, 'No Tags') AS PostTagName,
    p.EditCount AS EditedCount,
    p.LastEditDate,
    p.ClosureCount,
    rp.CreationDate
FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges ut ON rp.OwnerUserId = ut.UserId
LEFT JOIN 
    PostTags pt ON rp.Id = pt.PostId
LEFT JOIN 
    PostHistoryDetails p ON rp.Id = p.PostId
WHERE 
    rp.rn = 1 
ORDER BY 
    rp.Score DESC,
    rp.ViewCount DESC
LIMIT 100;
