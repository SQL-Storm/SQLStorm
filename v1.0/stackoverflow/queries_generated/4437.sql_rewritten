WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        U.DisplayName AS OwnerDisplayName,
        COUNT(CASE WHEN c.UserId IS NOT NULL THEN 1 END) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    INNER JOIN 
        Users U ON p.OwnerUserId = U.Id
    WHERE 
        p.CreationDate > (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year')
    GROUP BY 
        p.Id, U.DisplayName
), HighScoringPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        ViewCount,
        OwnerDisplayName,
        CommentCount
    FROM 
        RankedPosts
    WHERE 
        Score >= (SELECT AVG(Score) FROM Posts)
)
SELECT 
    H.PostId,
    H.Title,
    H.CreationDate,
    H.Score,
    H.ViewCount,
    H.OwnerDisplayName,
    COALESCE(NULLIF(H.CommentCount, 0), 'No Comments') AS CommentsStatus,
    COALESCE((
        SELECT STRING_AGG(DISTINCT T.TagName, ', ') 
        FROM Tags T 
        JOIN unnest(string_to_array(substring(p.Tags, 2, length(Tags)-2), '><')) AS tag ON T.TagName = tag
        WHERE p.Id = H.PostId
    ), 'No Tags') AS AssociatedTags
FROM 
    HighScoringPosts H
LEFT JOIN 
    Posts p ON H.PostId = p.Id
ORDER BY 
    H.Score DESC, H.ViewCount DESC
LIMIT 10
UNION ALL
SELECT 
    '-1' AS PostId,
    'Summary' AS Title,
    cast('2024-10-01 12:34:56' as timestamp) AS CreationDate,
    SUM(Score) AS Score,
    SUM(ViewCount) AS ViewCount,
    'Total' AS OwnerDisplayName,
    SUM(CommentCount) AS CommentCount
FROM 
    HighScoringPosts
HAVING 
    COUNT(*) > 0;