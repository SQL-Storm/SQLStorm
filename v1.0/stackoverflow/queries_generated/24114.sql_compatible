
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        p.LastActivityDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS RankByViews,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '30 days')
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
Links AS (
    SELECT 
        pl.postId,
        COUNT(pl.RelatedPostId) AS LinkCount
    FROM 
        PostLinks pl
    GROUP BY 
        pl.postId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.ViewCount,
    rp.Score,
    rp.RankByViews,
    ub.BadgeCount,
    COALESCE(ub.HighestBadgeClass, -1) AS HighestBadgeClass,
    COALESCE(l.LinkCount, 0) AS LinkCount,
    CASE 
        WHEN rp.UpVoteCount > rp.DownVoteCount THEN 'Positive'
        WHEN rp.UpVoteCount < rp.DownVoteCount THEN 'Negative'
        ELSE 'Neutral'
    END AS VoteSentiment,
    CASE 
        WHEN rp.LastActivityDate IS NULL THEN 'No Activity'
        WHEN rp.LastActivityDate < (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '7 days') THEN 'Inactive'
        ELSE 'Active'
    END AS RecentActivity
FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
LEFT JOIN 
    Links l ON rp.PostId = l.postId
WHERE 
    (rp.RankByViews <= 10 OR rp.Score > 5) 
    AND (rp.ViewCount IS NOT NULL OR rp.Score IS NOT NULL)
GROUP BY 
    rp.PostId, rp.Title, rp.ViewCount, rp.Score, rp.RankByViews, ub.BadgeCount, 
    ub.HighestBadgeClass, l.LinkCount, rp.UpVoteCount, rp.DownVoteCount, 
    rp.LastActivityDate
ORDER BY 
    rp.RankByViews, rp.Score DESC;
