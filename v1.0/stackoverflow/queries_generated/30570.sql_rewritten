WITH RECURSIVE TagHierarchy AS (
    SELECT 
        Id,
        TagName,
        1 AS Depth
    FROM Tags
    WHERE IsModeratorOnly = 0
    
    UNION ALL
    
    SELECT 
        t.Id,
        t.TagName,
        th.Depth + 1
    FROM Tags t
    JOIN TagHierarchy th ON t.ExcerptPostId = th.Id
)

, MostActiveUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(v.BountyAmount) AS TotalBounties
    FROM Users u
    JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9) 
    GROUP BY u.Id, u.DisplayName
    HAVING COUNT(DISTINCT p.Id) > 5 
)

, PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(ph.RevisionCount, 0) AS EditCount
    FROM Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS RevisionCount
        FROM PostHistory
        GROUP BY PostId
    ) ph ON p.Id = ph.PostId
)

SELECT 
    th.TagName,
    COUNT(DISTINCT pd.PostId) AS PostCount,
    SUM(pd.ViewCount) AS TotalViews,
    AVG(pd.Score) AS AverageScore,
    STRING_AGG(DISTINCT mu.DisplayName, ', ') AS ActiveUsers
FROM TagHierarchy th
JOIN Posts p ON p.Tags LIKE '%' || th.TagName || '%'
JOIN PostDetails pd ON pd.PostId = p.Id
JOIN MostActiveUsers mu ON mu.PostCount > 0
GROUP BY th.TagName
HAVING COUNT(DISTINCT pd.PostId) > 0
ORDER BY TotalViews DESC, AverageScore DESC;