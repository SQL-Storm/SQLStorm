
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        pt.Name AS PostTypeName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 YEAR'
            AND p.ViewCount > 100
            AND p.AnswerCount > 5
),
FilteredPosts AS (
    SELECT 
        PostId,
        Title,
        Body,
        OwnerDisplayName,
        PostTypeName,
        Tags,
        PostRank
    FROM 
        RankedPosts
    WHERE 
        PostRank = 1
),
PostDetails AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.Body,
        fp.OwnerDisplayName,
        fp.PostTypeName,
        fp.Tags,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        AVG(u.Reputation) AS AverageReputation
    FROM 
        FilteredPosts fp
    LEFT JOIN 
        Comments c ON fp.PostId = c.PostId
    LEFT JOIN 
        Votes v ON fp.PostId = v.PostId
    LEFT JOIN 
        Users u ON u.Id = v.UserId
    GROUP BY 
        fp.PostId, fp.Title, fp.Body, fp.OwnerDisplayName, fp.PostTypeName, fp.Tags
)
SELECT 
    pd.Title,
    pd.OwnerDisplayName,
    pd.PostTypeName,
    pd.CommentCount,
    pd.VoteCount,
    STRING_AGG(t.TagName, ', ') AS Tags,
    pd.AverageReputation
FROM 
    PostDetails pd
LEFT JOIN 
    LATERAL (SELECT UNNEST(STRING_TO_ARRAY(pd.Tags, ', ')) AS tag) AS tag_array
JOIN 
    Tags t ON t.TagName = TRIM(tag_array.tag)
GROUP BY 
    pd.Title, pd.OwnerDisplayName, pd.PostTypeName, pd.CommentCount, pd.VoteCount, pd.AverageReputation
ORDER BY 
    pd.VoteCount DESC, pd.CommentCount DESC;
