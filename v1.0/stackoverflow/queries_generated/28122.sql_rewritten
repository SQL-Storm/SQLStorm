WITH UserBadges AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName AS UserName,
        COUNT(B.Id) AS BadgeCount,
        STRING_AGG(B.Name, ', ') AS BadgeNames
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id, U.DisplayName
),
PostTags AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.PostTypeId,
        STRING_AGG(TRIM(UNNEST(string_to_array(SUBSTRING(P.Tags FROM 2 FOR LENGTH(P.Tags) - 2), '><'))), ', ') AS Tags
    FROM 
        Posts P
    WHERE 
        P.Tags IS NOT NULL
    GROUP BY 
        P.Id, P.Title, P.PostTypeId
),
PopularQuestions AS (
    SELECT 
        P.Id AS QuestionId,
        P.Title,
        P.ViewCount,
        P.AnswerCount
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1 
    ORDER BY 
        P.ViewCount DESC
    LIMIT 10
)
SELECT 
    UB.UserName,
    UB.BadgeCount,
    UB.BadgeNames,
    PQ.Title AS PopularQuestion,
    PQ.ViewCount AS QuestionViewCount,
    PQ.AnswerCount AS QuestionAnswerCount,
    TT.Tags AS RelatedTags
FROM 
    UserBadges UB
LEFT JOIN 
    PopularQuestions PQ ON UB.UserId IN (
        SELECT DISTINCT 
            P.OwnerUserId 
        FROM 
            Posts P
        WHERE 
            P.PostTypeId = 1 
            AND P.OwnerUserId IS NOT NULL
    )
LEFT JOIN 
    PostTags TT ON PQ.QuestionId = TT.PostId
ORDER BY 
    UB.BadgeCount DESC,
    PQ.ViewCount DESC;