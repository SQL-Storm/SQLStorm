WITH RecursivePostStats AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.Score,
        P.CreationDate,
        P.ViewCount,
        P.OwnerUserId,
        1 AS Level,
        CAST(P.Title AS VARCHAR(MAX)) AS Path
    FROM 
        Posts P
    WHERE 
        P.ParentId IS NULL  
    UNION ALL
    SELECT 
        P.Id,
        P.Title,
        P.Score,
        P.CreationDate,
        P.ViewCount,
        P.OwnerUserId,
        R.Level + 1,
        CAST(R.Path + ' -> ' + P.Title AS VARCHAR(MAX)) AS Path
    FROM 
        Posts P
    INNER JOIN 
        RecursivePostStats R ON P.ParentId = R.PostId  
),
TopPosts AS (
    SELECT 
        Id,
        Title,
        ViewCount,
        Score,
        OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY OwnerUserId ORDER BY Score DESC) AS ScoreRank
    FROM 
        Posts
    WHERE
        CreationDate >= DATEADD(month, -6, GETDATE())  
),
UserVotes AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(V.Id) AS TotalVotes,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Users U
    LEFT JOIN 
        Votes V ON U.Id = V.UserId
    GROUP BY 
        U.Id, U.DisplayName
)
SELECT 
    U.Id AS UserId,
    U.DisplayName,
    COALESCE(TopPosts.Title, 'No Posts Found') AS TopPostTitle,
    COALESCE(TopPosts.ViewCount, 0) AS TopPostViewCount,
    COALESCE(TopPosts.Score, 0) AS TopPostScore,
    UserVotes.TotalVotes,
    UserVotes.UpVotes,
    UserVotes.DownVotes,
    RecursivePostStats.Path AS PostHierarchy
FROM 
    Users U
LEFT JOIN 
    TopPosts ON U.Id = TopPosts.OwnerUserId AND TopPosts.ScoreRank = 1
LEFT JOIN 
    UserVotes ON U.Id = UserVotes.UserId
LEFT JOIN 
    RecursivePostStats ON U.Id = RecursivePostStats.OwnerUserId
WHERE 
    U.Reputation >= 1000  
ORDER BY 
    U.DisplayName;