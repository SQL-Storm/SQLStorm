
WITH UserReputation AS (
    SELECT 
        Id,
        Reputation,
        CASE 
            WHEN Reputation IS NULL THEN 'Unknown'
            WHEN Reputation < 1000 THEN 'Novice'
            WHEN Reputation BETWEEN 1000 AND 10000 THEN 'Intermediate'
            ELSE 'Expert'
        END AS ReputationCategory
    FROM Users
),
PostSummary AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        pt.Name AS PostType,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COUNT(c.Id) AS CommentCount,
        CASE 
            WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Accepted'
            ELSE 'Pending'
        END AS AnswerStatus
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Comments c ON p.Id = c.PostId
    INNER JOIN PostTypes pt ON p.PostTypeId = pt.Id
    GROUP BY p.Id, p.Title, p.CreationDate, pt.Name, p.AcceptedAnswerId
),
PostWithHistory AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CreationDate,
        ps.PostType,
        ps.UpVotes,
        ps.DownVotes,
        ps.CommentCount,
        ps.AnswerStatus,
        ph.CreationDate AS HistoryDate,
        PHT.Name AS HistoryType,
        ph.Comment
    FROM PostSummary ps
    LEFT JOIN PostHistory ph ON ps.PostId = ph.PostId
    LEFT JOIN PostHistoryTypes PHT ON ph.PostHistoryTypeId = PHT.Id
),
RankedPosts AS (
    SELECT 
        pwh.*,
        ROW_NUMBER() OVER(PARTITION BY pwh.PostId ORDER BY pwh.HistoryDate DESC NULLS LAST) AS Rank
    FROM PostWithHistory pwh
)

SELECT 
    ur.Id AS UserId,
    ur.Reputation,
    ur.ReputationCategory,
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.PostType,
    rp.UpVotes,
    rp.DownVotes,
    rp.CommentCount,
    rp.AnswerStatus,
    rp.HistoryDate,
    rp.HistoryType,
    COUNT(DISTINCT b.Id) AS BadgeCount
FROM RankedPosts rp
JOIN Users u ON rp.UserId = u.Id
JOIN UserReputation ur ON ur.Id = u.Id
LEFT JOIN Badges b ON b.UserId = u.Id
WHERE ur.Reputation >= 1000
GROUP BY 
    ur.Id, ur.Reputation, ur.ReputationCategory,
    rp.PostId, rp.Title, rp.CreationDate, 
    rp.PostType, rp.UpVotes, rp.DownVotes, 
    rp.CommentCount, rp.AnswerStatus, 
    rp.HistoryDate, rp.HistoryType
HAVING 
    MAX(rp.UpVotes) - MAX(rp.DownVotes) > 10
ORDER BY 
    ur.Reputation DESC, rp.CreationDate DESC
LIMIT 100;
