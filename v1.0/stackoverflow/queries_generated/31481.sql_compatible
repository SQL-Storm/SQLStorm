
WITH RECURSIVE UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        0 AS Level
    FROM 
        Users u
    WHERE 
        u.Reputation >= 1000

    UNION ALL

    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        ur.Level + 1
    FROM 
        Users u
    INNER JOIN 
        UserReputation ur ON u.Reputation >= ur.Reputation - 500 AND u.Reputation < ur.Reputation
)

SELECT 
    u.DisplayName AS UserName,
    u.Reputation AS UserReputation,
    COUNT(DISTINCT p.Id) AS TotalPosts,
    SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
    SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers,
    AVG(COALESCE(v.Score, 0)) AS AverageVoteScore,
    STRING_AGG(t.TagName, ', ') AS AssociatedTags,
    MAX(ph.CreationDate) AS LastPostEdited
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2
LEFT JOIN 
    LATERAL (
        SELECT 
            DISTINCT t.TagName
        FROM 
            UNNEST(string_to_array(p.Tags, ',')) AS tag
        JOIN 
            Tags t ON t.TagName = TRIM(tag)
    ) AS t ON true
LEFT JOIN 
    PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId IN (4, 5)
WHERE 
    u.Reputation >= 1000
GROUP BY 
    u.Id, u.DisplayName, u.Reputation
ORDER BY 
    UserReputation DESC, TotalPosts DESC
LIMIT 10;
