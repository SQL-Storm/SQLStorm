WITH RecursivePostHierarchy AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ParentId,
        P.Score,
        P.CreationDate,
        0 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1  

    UNION ALL

    SELECT 
        P.Id,
        P.Title,
        P.ParentId,
        P.Score,
        P.CreationDate,
        Level + 1
    FROM 
        Posts P
    INNER JOIN 
        RecursivePostHierarchy RPH ON P.ParentId = RPH.PostId
),
PostVoteStatistics AS (
    SELECT 
        P.Id AS PostId,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts P
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    GROUP BY 
        P.Id
),
TopPosts AS (
    SELECT 
        RPH.PostId,
        RPH.Title,
        RPH.Score,
        PVS.UpVotes,
        PVS.DownVotes,
        RPH.Level
    FROM 
        RecursivePostHierarchy RPH
    JOIN 
        PostVoteStatistics PVS ON RPH.PostId = PVS.PostId
)
SELECT 
    User.DisplayName,
    COUNT(DISTINCT P.Id) AS TotalPosts,
    SUM(COALESCE(TP.UpVotes, 0)) AS TotalUpVotes,
    SUM(COALESCE(TP.DownVotes, 0)) AS TotalDownVotes,
    AVG(TP.Score) AS AverageScore,
    STRING_AGG(TP.Title, ', ') AS PostTitles
FROM 
    Users User
LEFT JOIN 
    Posts P ON User.Id = P.OwnerUserId
LEFT JOIN 
    TopPosts TP ON P.Id = TP.PostId
WHERE 
    User.Reputation > 100 AND
    User.Location IS NOT NULL
GROUP BY 
    User.Id, User.DisplayName
HAVING 
    COUNT(DISTINCT P.Id) > 5
ORDER BY 
    TotalUpVotes DESC
LIMIT 10;