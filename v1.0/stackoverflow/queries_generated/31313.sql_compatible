
WITH RECURSIVE UserReputation AS (
    SELECT
        Id,
        Reputation,
        CreationDate,
        DisplayName,
        LastAccessDate,
        0 AS Level
    FROM
        Users
    WHERE
        Reputation > 1000

    UNION ALL

    SELECT
        u.Id,
        u.Reputation,
        u.CreationDate,
        u.DisplayName,
        u.LastAccessDate,
        ur.Level + 1
    FROM
        Users u
    INNER JOIN UserReputation ur ON ur.Reputation < u.Reputation
    WHERE
        u.Reputation > 1000
),
PostStats AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 WHEN v.VoteTypeId = 3 THEN -1 ELSE 0 END), 0) AS Score,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.Id END) AS CloseCount
    FROM
        Posts p
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    LEFT JOIN
        Comments c ON p.Id = c.PostId
    LEFT JOIN
        PostHistory ph ON p.Id = ph.PostId
    WHERE
        p.CreationDate >= DATE '2020-01-01'
    GROUP BY
        p.Id, p.Title, p.CreationDate
),
TopPosts AS (
    SELECT
        PostId,
        Title,
        CreationDate,
        Score,
        CommentCount,
        CloseCount,
        RANK() OVER (ORDER BY Score DESC) AS Rank
    FROM
        PostStats
)
SELECT
    ur.DisplayName,
    COUNT(DISTINCT tp.PostId) AS TotalPostCount,
    SUM(tp.Score) AS TotalScore,
    MAX(tp.CreationDate) AS LatestPostDate,
    STRING_AGG(tp.Title, '; ') AS PostTitles,
    ur.Level
FROM
    UserReputation ur
JOIN
    Posts p ON p.OwnerUserId = ur.Id
JOIN
    TopPosts tp ON tp.PostId = p.Id
GROUP BY
    ur.DisplayName, ur.Level
HAVING
    COUNT(DISTINCT tp.PostId) > 5
ORDER BY
    TotalScore DESC, TotalPostCount DESC;
