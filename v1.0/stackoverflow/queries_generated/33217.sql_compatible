
WITH RECURSIVE UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        COUNT(DISTINCT p.Id) AS TotalPosts
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        MAX(v.CreationDate) AS LastVoteDate,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY v.CreationDate DESC) AS VoteRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    GROUP BY 
        p.Id, p.Title, u.DisplayName
),
HighScoringPosts AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.OwnerDisplayName,
        pd.CommentCount,
        ps.TotalScore,
        ps.TotalViews,
        ROW_NUMBER() OVER (ORDER BY ps.TotalScore DESC, pd.CommentCount DESC) AS PostRank
    FROM 
        PostDetails pd
    JOIN 
        UserActivity ps ON pd.OwnerDisplayName = ps.DisplayName
    WHERE 
        ps.TotalPosts > 0
)
SELECT 
    h.PostId,
    h.Title,
    h.OwnerDisplayName,
    h.CommentCount,
    h.TotalScore,
    h.TotalViews,
    h.PostRank,
    CASE 
        WHEN h.TotalScore IS NULL THEN 'No Score'
        WHEN h.TotalScore >= 100 THEN 'High Score'
        ELSE 'Moderate Score'
    END AS ScoreCategory
FROM 
    HighScoringPosts h
WHERE 
    h.PostRank <= 10 
ORDER BY 
    h.TotalScore DESC, h.CommentCount DESC;
