
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        p.CreationDate,
        p.LastActivityDate,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, u.DisplayName, p.CreationDate, p.LastActivityDate
),
StringProcessedData AS (
    SELECT 
        PostId,
        Title,
        Body,
        Tags,
        OwnerDisplayName,
        CreationDate,
        LastActivityDate,
        CommentCount,
        VoteCount,
        ARRAY_LENGTH(string_to_array(Tags, '>')) AS TagCount,
        CASE 
            WHEN LENGTH(Body) > 200 THEN substring(Body FROM 1 FOR 200) || '...' 
            ELSE Body 
        END AS ProcessedBody,
        PostRank
    FROM 
        RankedPosts
    WHERE 
        PostRank <= 5 
),
FinalOutput AS (
    SELECT 
        s.*,
        EXTRACT(EPOCH FROM (TIMESTAMP '2024-10-01 12:34:56' - s.LastActivityDate)) AS DaysSinceLastActivity
    FROM 
        StringProcessedData s
    WHERE 
        EXTRACT(EPOCH FROM (TIMESTAMP '2024-10-01 12:34:56' - s.LastActivityDate)) < 86400 
)
SELECT 
    PostId,
    Title,
    ProcessedBody,
    Tags,
    OwnerDisplayName,
    CreationDate,
    LastActivityDate,
    CommentCount,
    VoteCount,
    TagCount,
    DaysSinceLastActivity
FROM 
    FinalOutput
ORDER BY 
    VoteCount DESC, CreationDate DESC;
