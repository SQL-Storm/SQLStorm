
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.OwnerUserId,
        p.Title,
        p.CreationDate,
        COALESCE(NULLIF(p.Score, 0), 1) AS EffectiveScore, 
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM
        Posts p
    WHERE
        p.CreationDate >= (CAST('2024-10-01' AS DATE) - INTERVAL '30 DAY')
),
UserBadges AS (
    SELECT
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM
        Users u
    LEFT JOIN
        Badges b ON u.Id = b.UserId
    GROUP BY
        u.Id
),
UserActivity AS (
    SELECT
        UserId,
        SUM(COALESCE(UpVotes, 0)) AS TotalUpVotes,
        SUM(COALESCE(DownVotes, 0)) AS TotalDownVotes
    FROM
        Users
    GROUP BY
        UserId
),
PostsById AS (
    SELECT
        p.Id,
        p.Title,
        (SELECT STRING_AGG(DISTINCT TagName, ', ') FROM Tags t WHERE t.Id IN (
            SELECT UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><'))::INT)
        )) AS AssociatedTags
    FROM
        Posts p
)
SELECT
    up.Id AS UserId,
    up.DisplayName,
    rp.Title,
    rp.EffectiveScore,
    rp.CreationDate,
    u_bad.BadgeCount,
    ua.TotalUpVotes,
    ua.TotalDownVotes,
    pbi.AssociatedTags
FROM
    Users up
LEFT JOIN
    RankedPosts rp ON up.Id = rp.OwnerUserId
LEFT JOIN
    UserBadges u_bad ON up.Id = u_bad.UserId
LEFT JOIN
    UserActivity ua ON up.Id = ua.UserId
LEFT JOIN
    PostsById pbi ON pbi.Id = rp.PostId
WHERE
    rp.Rank = 1 
    AND (u_bad.BadgeCount IS NULL OR u_bad.BadgeCount > 1) 
ORDER BY
    rp.EffectiveScore DESC,
    rp.CreationDate DESC;
