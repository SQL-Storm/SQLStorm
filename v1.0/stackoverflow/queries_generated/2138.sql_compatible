
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount, p.CreationDate, p.OwnerUserId
),
TopUserPosts AS (
    SELECT 
        p.OwnerUserId,
        SUM(p.Score) AS TotalScore,
        COUNT(p.Id) AS PostCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate < TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 month'
    GROUP BY 
        p.OwnerUserId
),
ActiveUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        COALESCE(tup.TotalScore, 0) AS TotalScore,
        COALESCE(tup.PostCount, 0) AS PostCount,
        (u.Reputation * 1.0 / NULLIF(tup.PostCount, 0)) AS ReputationPerPost
    FROM 
        Users u
    LEFT JOIN 
        TopUserPosts tup ON u.Id = tup.OwnerUserId
)
SELECT 
    au.DisplayName,
    SUM(rp.Score) AS TotalPostScore,
    MAX(rp.ViewCount) AS MaxViewCount,
    AVG(rp.Score) AS AvgScore,
    COUNT(DISTINCT rp.Id) AS UniquePostsCount,
    AVG(au.ReputationPerPost) AS AvgReputationPerPost
FROM 
    ActiveUsers au
JOIN 
    RankedPosts rp ON au.Id = rp.OwnerUserId
WHERE 
    rp.PostRank <= 5
GROUP BY 
    au.DisplayName
HAVING 
    AVG(rp.Score) > 10
ORDER BY 
    TotalPostScore DESC
LIMIT 10;
