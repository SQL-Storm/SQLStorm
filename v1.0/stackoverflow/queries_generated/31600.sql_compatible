
WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        p2.Id,
        p2.Title,
        p2.OwnerUserId,
        p2.CreationDate,
        p2.Score,
        p2.ParentId,
        r.Level + 1
    FROM 
        Posts p2
    INNER JOIN 
        RecursivePostCTE r ON p2.ParentId = r.PostId
)
SELECT 
    u.Id AS UserId,
    u.DisplayName AS UserName,
    COUNT(DISTINCT r.PostId) AS TotalQuestions,
    COUNT(DISTINCT p.Id) AS TotalAnswers,
    SUM(p.Score) AS TotalScore,
    COALESCE(MAX(b.Class), 0) AS HighestBadgeClass,
    COUNT(DISTINCT v.Id) AS TotalVotes,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
    ROUND(AVG(EXTRACT(EPOCH FROM (TIMESTAMP '2024-10-01 12:34:56' - p.CreationDate)) / 86400), 2) AS AvgDaysToResponse
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 2 
LEFT JOIN 
    RecursivePostCTE r ON p.ParentId = r.PostId
LEFT JOIN 
    Badges b ON u.Id = b.UserId
LEFT JOIN 
    Votes v ON u.Id = v.UserId AND v.PostId IN (SELECT PostId FROM RecursivePostCTE)
LEFT JOIN 
    (SELECT t.* FROM Tags t 
     WHERE t.Id = ANY(STRING_TO_ARRAY(COALESCE(r.Tags, '{}'), ','))) AS t
WHERE 
    u.Reputation > 100
GROUP BY 
    u.Id, u.DisplayName
ORDER BY 
    TotalScore DESC, UserName ASC;
