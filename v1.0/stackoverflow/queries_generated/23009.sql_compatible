
WITH PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        ROW_NUMBER() OVER(PARTITION BY p.OwnerUserId ORDER BY COUNT(c.Id) DESC) AS RankByComments,
        DENSE_RANK() OVER(ORDER BY SUM(CASE WHEN v.CreationDate IS NOT NULL THEN 1 ELSE 0 END) DESC) AS PopularityRank,
        p.OwnerUserId
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= '2024-10-01 12:34:56' - INTERVAL '1 YEAR'
    GROUP BY 
        p.Id, p.Title, p.OwnerUserId
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(ps.UpVoteCount), 0) AS TotalUpVotes,
        COALESCE(SUM(ps.DownVoteCount), 0) AS TotalDownVotes,
        COUNT(DISTINCT ps.PostId) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        SUM(CASE WHEN b.Name IS NOT NULL THEN 1 ELSE 0 END) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        PostStatistics ps ON u.Id = ps.OwnerUserId
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        ua.*,
        RANK() OVER(ORDER BY TotalUpVotes - TotalDownVotes DESC) AS UserRank
    FROM 
        UserActivity ua
    WHERE 
        TotalPosts > 0
)
SELECT 
    tu.DisplayName,
    tu.TotalUpVotes,
    tu.TotalDownVotes,
    tu.TotalPosts,
    tu.TotalComments,
    tu.UserRank,
    CASE 
        WHEN tu.UserRank = 1 THEN 'Top Contributor'
        WHEN tu.TotalBadges > 5 THEN 'Active Contributor'
        ELSE 'New Contributor'
    END AS UserType
FROM 
    TopUsers tu
WHERE 
    tu.UserRank <= 10 OR (tu.TotalComments > 50 AND tu.UserRank <= 25)
ORDER BY 
    tu.UserRank;
