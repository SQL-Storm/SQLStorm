
WITH UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        ROW_NUMBER() OVER (PARTITION BY u.AccountId ORDER BY u.Reputation DESC) AS Rank
    FROM 
        Users u
    WHERE 
        u.Reputation > 100
),
PopularPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        pt.Name AS PostType,
        COUNT(v.Id) AS VoteCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS tagname 
    LEFT JOIN 
        Tags t ON t.TagName = tagname
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.Score, pt.Name
    HAVING 
        COUNT(v.Id) > 10
),
CloseReasons AS (
    SELECT 
        ph.PostId,
        ph.Comment,
        ctr.Name AS Reason,
        COUNT(*) AS ReasonCount
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes ctr ON ph.Comment::INT = ctr.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)
    GROUP BY 
        ph.PostId, ph.Comment, ctr.Name
),
PostRankings AS (
    SELECT 
        pp.PostId,
        pp.Title,
        pp.Score,
        pp.VoteCount,
        COALESCE(cr.Reason, 'Not Closed') AS CloseReason,
        DENSE_RANK() OVER (ORDER BY pp.Score DESC) AS PostRank
    FROM 
        PopularPosts pp
    LEFT JOIN 
        CloseReasons cr ON pp.PostId = cr.PostId
)
SELECT 
    u.DisplayName,
    u.Reputation,
    pr.Title,
    pr.Score,
    pr.VoteCount,
    pr.CloseReason
FROM 
    UserReputation u
JOIN 
    PostRankings pr ON pr.PostRank <= 3
WHERE 
    u.Rank = 1
ORDER BY 
    u.Reputation DESC, pr.Score DESC
LIMIT 10;
