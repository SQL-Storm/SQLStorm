WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.Reputation,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
        AND p.Score IS NOT NULL
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE 
            WHEN b.Class = 1 THEN 3 
            WHEN b.Class = 2 THEN 2 
            WHEN b.Class = 3 THEN 1 
            ELSE 0 
        END) AS BadgePoints
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        STRING_AGG(DISTINCT ctr.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes ctr ON ctr.Id::text = ph.Comment
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)
    GROUP BY 
        ph.PostId, ph.CreationDate
)
SELECT 
    p.Title,
    p.ViewCount,
    r.Reputation,
    COALESCE(cl.CloseReasons, 'Not Closed') AS CloseStatus,
    COALESCE(u.BadgePoints, 0) AS TotalBadgePoints,
    p.CreationDate,
    p.Score,
    CASE 
        WHEN p.Score = 0 THEN 'No Score Yet'
        WHEN p.Score < 10 THEN 'Low Score'
        WHEN p.Score BETWEEN 10 AND 50 THEN 'Moderate Score'
        ELSE 'High Score'
    END AS ScoreCategory
FROM 
    RankedPosts p
LEFT JOIN 
    UserReputation u ON p.OwnerUserId = u.UserId
LEFT JOIN 
    ClosedPosts cl ON p.Id = cl.PostId
WHERE 
    p.PostRank = 1
ORDER BY 
    p.Score DESC NULLS LAST,
    p.CreationDate DESC
LIMIT 50;