WITH RankedUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(COALESCE(v.VoteTypeId = 2, 0)) AS Upvotes,
        SUM(COALESCE(v.VoteTypeId = 3, 0)) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.UserId = u.Id
    GROUP BY 
        u.Id
)

SELECT 
    ru.UserId,
    ru.DisplayName,
    ru.Reputation,
    ru.ReputationRank,
    ru.PostCount,
    ru.Upvotes,
    ru.DownVotes,
    COALESCE(ru.Upvotes - ru.DownVotes, 0) AS NetVotes,
    CASE 
        WHEN ru.Reputation >= 1000 THEN 'High Reputation'
        WHEN ru.Reputation >= 500 THEN 'Medium Reputation'
        ELSE 'Low Reputation'
    END AS ReputationCategory,
    CONCAT(
        'User ', 
        ru.DisplayName, 
        ' has a Reputation of ', 
        ru.Reputation, 
        ' and net votes of ', 
        COALESCE(ru.Upvotes - ru.DownVotes, 0)
    ) AS UserSummary,
    (SELECT COUNT(*) FROM Posts p2 WHERE p2.OwnerUserId = ru.UserId AND p2.CreationDate >= '2023-01-01') AS RecentPostsCount,
    (SELECT ARRAY_AGG(DISTINCT t.TagName) 
     FROM Posts p3 
     JOIN UNNEST(string_to_array(p3.Tags, '><')) AS t(TagName)
     WHERE p3.OwnerUserId = ru.UserId) AS UserTags
FROM 
    RankedUsers ru
WHERE 
    ru.ReputationRank <= 10
ORDER BY 
    ru.Reputation DESC
LIMIT 10;