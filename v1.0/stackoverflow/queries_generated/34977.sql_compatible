
WITH RecursivePostHierarchy AS (
    SELECT 
        Id AS PostId,
        Title,
        Score,
        ViewCount,
        CreationDate,
        OwnerUserId,
        ParentId,
        1 AS Level
    FROM Posts
    WHERE ParentId IS NULL
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        p.ParentId,
        r.Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostStatistics AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerName,
        COALESCE(b.Class, 0) AS BadgeClass,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN Badges b ON u.Id = b.UserId AND b.Class = 1  
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY p.Id, u.DisplayName, b.Class
),
AggregateStatistics AS (
    SELECT 
        COUNT(*) AS TotalPosts,
        SUM(ViewCount) AS TotalViews,
        AVG(Score) AS AverageScore,
        SUM(UpVotes) AS TotalUpVotes,
        SUM(DownVotes) AS TotalDownVotes
    FROM PostStatistics
)
SELECT 
    ps.Title,
    ps.ViewCount,
    ps.Score,
    ps.OwnerName,
    ps.BadgeClass,
    ps.CommentCount,
    ps.UserPostRank,
    a.TotalPosts,
    a.TotalViews,
    a.AverageScore,
    a.TotalUpVotes,
    a.TotalDownVotes
FROM PostStatistics ps
CROSS JOIN AggregateStatistics a
WHERE ps.Score > (SELECT AVG(Score) FROM PostStatistics)
ORDER BY ps.ViewCount DESC
LIMIT 10;
