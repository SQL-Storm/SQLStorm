
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(CASE WHEN bp.PostRank = 1 THEN 1 ELSE 0 END), 0) AS BestPosts,
        COALESCE(AVG(bp.Score), 0) AS AvgPostScore,
        COALESCE(SUM(bp.ViewCount), 0) AS TotalViews
    FROM 
        Users u
    LEFT JOIN 
        RankedPosts bp ON u.Id = bp.OwnerUserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
)
SELECT 
    us.UserId,
    us.DisplayName,
    us.Reputation,
    us.BestPosts,
    us.AvgPostScore,
    us.TotalViews,
    CASE 
        WHEN us.TotalViews IS NULL OR us.TotalViews = 0 THEN 'NO VIEWS'
        ELSE 'HAS VIEWS'
    END AS ViewsStatus,
    (SELECT COUNT(*) FROM Badges b WHERE b.UserId = us.UserId AND b.Class = 1) AS GoldBadgesCount
FROM 
    UserStats us
WHERE 
    us.BestPosts > 0
ORDER BY 
    us.Reputation DESC, us.TotalViews DESC
LIMIT 50;
