
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        MAX(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS HasGoldBadge,
        MAX(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS HasSilverBadge,
        MAX(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS HasBronzeBadge,
        p.OwnerUserId
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId AND b.TagBased = 0
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        COUNT(DISTINCT COALESCE(v.PostId, -1)) AS TotalVotes,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    WHERE 
        u.Reputation > 100 
    GROUP BY 
        u.Id
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.CommentCount,
    ua.TotalVotes,
    ua.UpVotes,
    ua.DownVotes,
    CASE 
        WHEN rp.HasGoldBadge = 1 THEN 'Gold'
        WHEN rp.HasSilverBadge = 1 THEN 'Silver'
        WHEN rp.HasBronzeBadge = 1 THEN 'Bronze'
        ELSE 'No Badge'
    END AS UserBadgeLevel
FROM 
    RankedPosts rp
LEFT JOIN 
    UserActivity ua ON rp.OwnerUserId = ua.UserId
WHERE 
    (rp.CommentCount > 5 OR rp.Score > 10)  
    AND (ua.UpVotes > ua.DownVotes OR ua.TotalVotes < 3) 
ORDER BY 
    rp.Score DESC,
    rp.CreationDate DESC;
