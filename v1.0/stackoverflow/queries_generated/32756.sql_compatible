
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 

    UNION ALL

    SELECT 
        p2.Id,
        p2.Title,
        p2.OwnerUserId,
        p2.AcceptedAnswerId,
        rp.Level + 1
    FROM 
        Posts p2
    INNER JOIN 
        Posts p1 ON p2.ParentId = p1.Id
    INNER JOIN 
        RecursivePostHierarchy rp ON p1.Id = rp.PostId
)

SELECT 
    u.DisplayName AS OwnerName,
    CONCAT('Question: ', rp.Title) AS QuestionTitle,
    (SELECT COUNT(*) 
     FROM Comments c 
     WHERE c.PostId = rp.PostId) AS TotalComments,
    (SELECT COUNT(*) 
     FROM Votes v 
     WHERE v.PostId = rp.PostId AND v.VoteTypeId = 2) AS TotalUpVotes,
    (SELECT COUNT(*) 
     FROM Votes v 
     WHERE v.PostId = rp.PostId AND v.VoteTypeId = 3) AS TotalDownVotes,
    COALESCE((SELECT AVG(Score) 
              FROM Posts p 
              WHERE p.ParentId = rp.PostId), 0) AS AvgChildScore,
    CASE 
        WHEN EXISTS (SELECT 1 
                     FROM Votes v 
                     WHERE v.PostId = rp.PostId AND v.VoteTypeId IN (6, 7)) 
        THEN 'Closed or Reopened' 
        ELSE 'Open' 
    END AS Status,
    RANK() OVER (PARTITION BY rp.Level ORDER BY TotalComments DESC) AS RankLevel
FROM 
    RecursivePostHierarchy rp
JOIN 
    Users u ON rp.OwnerUserId = u.Id 
WHERE 
    rp.Level = 1 
GROUP BY 
    u.DisplayName, rp.Title, rp.PostId, rp.Level
ORDER BY 
    TotalComments DESC, 
    TotalUpVotes DESC;
