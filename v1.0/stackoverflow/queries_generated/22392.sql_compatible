
WITH UserStatistics AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes,
        COUNT(DISTINCT P.Id) AS TotalPosts,
        COUNT(DISTINCT C.Id) AS TotalComments,
        RANK() OVER (ORDER BY COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) - 
                      COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) DESC) AS ReputationRank
    FROM 
        Users U
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId AND V.UserId = U.Id
    GROUP BY 
        U.Id, U.DisplayName
),
PostDetails AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        COUNT(C.Id) AS CommentCount,
        COALESCE(PH.CloseReasonId, 0) AS CloseReasonId
    FROM 
        Posts P
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        (SELECT 
            PH.PostId,
            JSON_OBJECT_AGG(PH.PostHistoryTypeId, PH.Comment) FILTER (WHERE PH.PostHistoryTypeId = 10) AS CloseReasonId
         FROM 
            PostHistory PH
         WHERE 
            PH.PostHistoryTypeId IN (10) 
         GROUP BY 
            PH.PostId) PH ON P.Id = PH.PostId
    GROUP BY 
        P.Id, P.Title, P.CreationDate
),
PostsWithHighEngagement AS (
    SELECT 
        PD.PostId,
        PD.Title,
        U.DisplayName AS PostOwner,
        US.TotalPosts,
        US.TotalComments,
        PD.CommentCount
    FROM 
        PostDetails PD
    JOIN 
        UserStatistics US ON US.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = PD.PostId)
    JOIN 
        Users U ON U.Id = (SELECT OwnerUserId FROM Posts WHERE Id = PD.PostId)
    WHERE 
        PD.CommentCount > 5 AND 
        (US.Upvotes - US.Downvotes) > 10
),
RankedPosts AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (ORDER BY CommentCount DESC, CreationDate ASC) AS EngagementRank
    FROM 
        PostsWithHighEngagement
)

SELECT 
    RP.PostId,
    RP.Title,
    RP.PostOwner,
    RP.TotalPosts,
    RP.TotalComments,
    RP.CommentCount,
    RP.EngagementRank,
    CASE 
        WHEN RP.CommentCount IS NULL THEN 'No Comments' 
        WHEN RP.CommentCount > 10 THEN 'Highly Engaged' 
        ELSE 'Moderately Engaged' 
    END AS EngagementLevel
FROM 
    RankedPosts RP
WHERE 
    RP.EngagementRank <= 50
ORDER BY 
    RP.EngagementRank;