
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS PostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        (SELECT COUNT(v.Id) 
         FROM Votes v 
         WHERE v.PostId = p.Id AND v.VoteTypeId IN (2, 3)) AS VoteCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM Posts p
    LEFT JOIN Comments c ON c.PostId = p.Id
    LEFT JOIN LATERAL (
        SELECT UNNEST(string_to_array(p.Tags, '><')) AS TagName
    ) t ON TRUE
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
CloseReasonDetails AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS HistoryCreationDate,
        cr.Name AS CloseReasonName
    FROM PostHistory ph
    JOIN CloseReasonTypes cr ON CAST(ph.Comment AS INT) = cr.Id
    WHERE ph.PostHistoryTypeId = 10
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        CASE 
            WHEN u.Reputation > 1000 THEN 'High' 
            WHEN u.Reputation BETWEEN 500 AND 1000 THEN 'Medium' 
            ELSE 'Low' 
        END AS ReputationCategory
    FROM Users u
),
RecentActivity AS (
    SELECT 
        p.OwnerUserId,
        MAX(p.LastActivityDate) AS LastActivePostDate
    FROM Posts p
    GROUP BY p.OwnerUserId
),
TopUsers AS (
    SELECT
        u.Id,
        u.DisplayName,
        u.Reputation
    FROM Users u
    WHERE u.Reputation IS NOT NULL
    ORDER BY u.Reputation DESC
    LIMIT 10
)

SELECT 
    r.PostId,
    r.Title,
    r.CreationDate,
    r.Score,
    r.ViewCount,
    r.PostRank,
    r.CommentCount,
    r.VoteCount,
    r.Tags,
    CR.CloseReasonName,
    COALESCE(ra.LastActivePostDate, 'Never Active') AS LastActivePostDate,
    ur.ReputationCategory
FROM RankedPosts r
LEFT JOIN CloseReasonDetails CR ON r.PostId = CR.PostId
LEFT JOIN RecentActivity ra ON r.OwnerUserId = ra.OwnerUserId
JOIN UserReputation ur ON r.OwnerUserId = ur.UserId
WHERE r.PostRank <= 5
AND (r.CommentCount > 0 OR r.VoteCount > 0)
ORDER BY r.Score DESC, r.ViewCount DESC
OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY;
