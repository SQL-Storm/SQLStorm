
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
        AND p.ViewCount > 0
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        MAX(u.LastAccessDate) AS LastActive
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PostHistoryCounts AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 END) AS CloseReopenCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
UserPostLinks AS (
    SELECT 
        pl.PostId,
        COUNT(DISTINCT pl.RelatedPostId) AS RelatedPostCount
    FROM 
        PostLinks pl
    GROUP BY 
        pl.PostId
)
SELECT 
    up.UserId,
    COALESCE(up.Reputation, 0) AS Reputation,
    COALESCE(up.BadgeCount, 0) AS BadgeCount,
    COALESCE(pt.PostId, 'No posts created') AS PostId,
    COALESCE(pt.Title, 'No title') AS PostTitle,
    COALESCE(pt.Score, 0) AS PostScore,
    COALESCE(pt.ViewCount, 0) AS ViewCount,
    COALESCE(ph.CloseReopenCount, 0) AS CloseReopenCount,
    COALESCE(ul.RelatedPostCount, 0) AS RelatedPostCount,
    CASE 
        WHEN pt.PostRank IS NOT NULL THEN 'Active Contributor'
        WHEN up.Reputation > 1000 THEN 'Veteran User'
        ELSE 'Newcomer'
    END AS UserType
FROM 
    UserReputation up
LEFT JOIN 
    RankedPosts pt ON up.UserId = pt.OwnerUserId AND pt.PostRank <= 3
LEFT JOIN 
    PostHistoryCounts ph ON pt.PostId = ph.PostId
LEFT JOIN 
    UserPostLinks ul ON pt.PostId = ul.PostId
WHERE 
    up.Reputation IS NOT NULL
ORDER BY 
    up.Reputation DESC, COALESCE(pt.Score, 0) DESC;
