
WITH UserReputation AS (
    SELECT 
        U.Id AS UserId,
        U.Reputation,
        COUNT(DISTINCT P.Id) AS TotalPosts,
        COUNT(DISTINCT C.Id) AS TotalComments,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM Users U
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN Comments C ON U.Id = C.UserId
    LEFT JOIN Votes V ON P.Id = V.PostId AND V.UserId = U.Id
    GROUP BY U.Id, U.Reputation
),
TopUsers AS (
    SELECT 
        UserId,
        Reputation,
        TotalPosts,
        TotalComments,
        Upvotes - Downvotes AS NetVotes,
        RANK() OVER (ORDER BY Reputation DESC, TotalPosts DESC, NetVotes DESC) AS UserRank
    FROM UserReputation
)
SELECT 
    U.DisplayName,
    T.Reputation,
    T.TotalPosts,
    T.TotalComments,
    T.NetVotes,
    COALESCE(GROUP_CONCAT(DISTINCT Tags ORDER BY Tags), 'No Tags') AS TagsUsed,
    CASE 
        WHEN T.TotalPosts = 0 THEN 'No Activity'
        WHEN T.NetVotes >= 10 THEN 'Highly Active'
        ELSE 'Moderately Active'
    END AS ActivityLevel
FROM TopUsers T
LEFT JOIN Users U ON T.UserId = U.Id
LEFT JOIN Posts P ON U.Id = P.OwnerUserId
LEFT JOIN LATERAL (
    SELECT 
        DISTINCT regexp_split_to_table(P.Tags, '>') AS Tags
) AS T ON TRUE
WHERE T.UserRank <= 10
GROUP BY U.DisplayName, T.Reputation, T.TotalPosts, T.TotalComments, T.NetVotes
ORDER BY T.NetVotes DESC;
