
WITH RECURSIVE UserReputation AS (
    SELECT u.Id, u.Reputation, 0 AS Level
    FROM Users u
    WHERE u.Reputation > 1000
    
    UNION ALL
    
    SELECT u.Id, u.Reputation, ur.Level + 1
    FROM Users u
    JOIN UserReputation ur ON u.Id <> ur.Id
    WHERE u.Reputation = ur.Reputation + 500
),
RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        COUNT(DISTINCT c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
CloseReasons AS (
    SELECT 
        ph.PostId,
        STRING_AGG(cr.Name, ', ') AS ClosedReason
    FROM PostHistory ph
    JOIN CloseReasonTypes cr ON cr.Id = CAST(ph.Comment AS INTEGER)
    WHERE ph.PostHistoryTypeId = 10
    GROUP BY ph.PostId
),
MostCommentedPosts AS (
    SELECT 
        p.Id,
        COUNT(c.Id) AS TotalComments
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    GROUP BY p.Id
    HAVING COUNT(c.Id) > 5
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount
    FROM Badges b
    WHERE b.Class = 1 
    GROUP BY b.UserId
)
SELECT 
    u.Id AS UserId,
    u.DisplayName,
    u.Reputation,
    COALESCE(ub.BadgeCount, 0) AS GoldBadges,
    COALESCE(cr.ClosedReason, 'Not Closed') AS CloseReason,
    COUNT(DISTINCT rp.Id) AS PostCount,
    SUM(rp.ViewCount) AS TotalViews,
    AVG(rp.Score) AS AvgScore,
    SUM(mcp.TotalComments) AS TotalComments
FROM Users u
LEFT JOIN RankedPosts rp ON u.Id = rp.OwnerUserId
LEFT JOIN CloseReasons cr ON cr.PostId = rp.Id
LEFT JOIN MostCommentedPosts mcp ON mcp.Id = rp.Id
LEFT JOIN UserBadges ub ON ub.UserId = u.Id
WHERE u.LastAccessDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 months'
GROUP BY u.Id, u.DisplayName, u.Reputation, cr.ClosedReason, ub.BadgeCount
ORDER BY u.Reputation DESC
LIMIT 100;
