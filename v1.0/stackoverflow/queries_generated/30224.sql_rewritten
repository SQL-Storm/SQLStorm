WITH RecursivePostHierarchy AS (
    
    SELECT
        p.Id AS PostId,
        p.ParentId,
        p.OwnerUserId,
        p.Title,
        1 AS Level
    FROM Posts p
    WHERE p.PostTypeId = 1  

    UNION ALL

    SELECT
        p.Id AS PostId,
        p.ParentId,
        p.OwnerUserId,
        p.Title,
        ph.Level + 1
    FROM Posts p
    JOIN RecursivePostHierarchy ph ON p.ParentId = ph.PostId
    WHERE p.PostTypeId = 2  
),
PostVoteCounts AS (
    
    SELECT
        v.PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM Votes v
    GROUP BY v.PostId
),
PostWithVoteInfo AS (
    
    SELECT
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        ph.Level,
        COALESCE(pvc.Upvotes, 0) AS Upvotes,
        COALESCE(pvc.Downvotes, 0) AS Downvotes,
        p.CreationDate,
        p.Title
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN PostVoteCounts pvc ON p.Id = pvc.PostId
    LEFT JOIN RecursivePostHierarchy rph ON p.Id = rph.PostId
    WHERE p.OwnerUserId IS NOT NULL 
    GROUP BY p.Id, pvc.Upvotes, pvc.Downvotes, ph.Level
),
RankedPosts AS (
    
    SELECT
        PostId,
        Title,
        Upvotes,
        Downvotes,
        CommentCount,
        CreationDate,
        RANK() OVER (ORDER BY Upvotes - Downvotes DESC, CommentCount DESC) AS Rank
    FROM PostWithVoteInfo
)

SELECT
    rp.PostId,
    rp.Title,
    rp.Upvotes,
    rp.Downvotes,
    rp.CommentCount,
    rp.Rank,
    CASE 
        WHEN rp.Rank <= 10 THEN 'Top Question'
        ELSE 'Other'
    END AS PostCategory
FROM RankedPosts rp
WHERE rp.Rank <= 50  
ORDER BY rp.Rank;