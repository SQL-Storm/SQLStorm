
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank,
        p.OwnerUserId
    FROM 
        Posts p
    WHERE 
        p.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
        AND p.PostTypeId = 1  
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostHistoryAnalysis AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes,
        COUNT(DISTINCT ph.UserId) AS EditingUsers,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rb.BadgeCount,
        pha.HistoryTypes,
        pha.EditingUsers,
        pha.LastEditDate,
        CASE 
            WHEN rp.Score IS NULL THEN 0
            WHEN rp.Score > 100 THEN 'Very High'
            WHEN rp.Score BETWEEN 50 AND 100 THEN 'High'
            ELSE 'Low'
        END AS ScoreCategory
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges rb ON rp.OwnerUserId = rb.UserId
    LEFT JOIN 
        PostHistoryAnalysis pha ON rp.PostId = pha.PostId
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.BadgeCount,
    fp.HistoryTypes,
    fp.EditingUsers,
    fp.LastEditDate,
    fp.ScoreCategory
FROM 
    FilteredPosts fp
WHERE 
    fp.BadgeCount > 1
    AND fp.LastEditDate IS NOT NULL
    AND fp.ScoreCategory = 'High'
ORDER BY 
    fp.Score DESC, fp.Title
FETCH FIRST 50 ROWS ONLY;
