
WITH RankedPosts AS (
    SELECT 
        p.Id, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 AND p.Score > 0
), 
ClosedPosts AS (
    SELECT 
        p.Id, 
        p.Title, 
        ph.CreationDate AS CloseDate, 
        EXTRACT(EPOCH FROM (p.LastActivityDate - ph.CreationDate)) AS DurationInSeconds,
        COUNT(c.Id) AS CommentCount 
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId = 10
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        p.Id, p.Title, ph.CreationDate, p.LastActivityDate
), 
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS Gold,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS Silver,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS Bronze
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)

SELECT 
    rp.Title,
    rp.OwnerDisplayName,
    rp.Score,
    cp.CloseDate,
    cp.DurationInSeconds,
    cp.CommentCount,
    ub.Gold,
    ub.Silver,
    ub.Bronze
FROM 
    RankedPosts rp
LEFT JOIN 
    ClosedPosts cp ON rp.Id = cp.Id
LEFT JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
WHERE 
    (ub.Gold IS NOT NULL OR ub.Silver IS NOT NULL OR ub.Bronze IS NOT NULL)
    AND cp.CloseDate IS NOT NULL
ORDER BY 
    rp.Score DESC, cp.DurationInSeconds DESC
LIMIT 10;
