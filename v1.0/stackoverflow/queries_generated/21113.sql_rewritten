WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostHistoryInfo AS (
    SELECT 
        p.Id AS PostId,
        MIN(ph.CreationDate) AS FirstHistoryDate,
        MAX(ph.CreationDate) AS LastHistoryDate,
        COUNT(ph.Id) AS HistoryCount,
        STRING_AGG(DISTINCT ph.Comment, ', ') AS HistoryComments
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id
)
SELECT 
    up.PostId,
    up.Title,
    up.CreationDate,
    up.ViewCount,
    up.Score,
    up.CommentCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    COALESCE(ph.FirstHistoryDate, 'No history') AS FirstHistoryDate,
    COALESCE(ph.LastHistoryDate, 'No history') AS LastHistoryDate,
    ph.HistoryCount,
    ph.HistoryComments
FROM 
    RankedPosts up
JOIN 
    UserBadges ub ON up.PostId IN (SELECT DISTINCT OwnerUserId FROM Posts WHERE Id = up.PostId)
LEFT JOIN 
    PostHistoryInfo ph ON up.PostId = ph.PostId
WHERE 
    (COALESCE(up.ViewCount, 0) > 100 AND ub.GoldBadges > 0) 
    OR (up.Rank = 1 AND up.Score > 10)
ORDER BY 
    ub.GoldBadges DESC,
    up.CreationDate ASC;