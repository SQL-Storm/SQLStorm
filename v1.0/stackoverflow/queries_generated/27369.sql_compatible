
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.LastActivityDate,
        u.DisplayName AS OwnerDisplayName,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.TagCount,
        RANK() OVER (PARTITION BY STRING_AGG(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), ' ') ORDER BY p.CreationDate DESC) AS TagRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
FilteredQuestions AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.CreationDate,
        rp.LastActivityDate,
        rp.OwnerDisplayName,
        rp.Score,
        rp.ViewCount,
        rp.AnswerCount,
        COUNT(c.Id) AS CommentCount
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Comments c ON c.PostId = rp.PostId
    WHERE 
        rp.TagRank <= 5 
    GROUP BY 
        rp.PostId, rp.Title, rp.Body, rp.CreationDate, rp.LastActivityDate, rp.OwnerDisplayName, rp.Score, rp.ViewCount, rp.AnswerCount
)
SELECT 
    fq.Title,
    fq.Body,
    fq.CreationDate,
    fq.LastActivityDate,
    fq.OwnerDisplayName,
    fq.Score,
    fq.ViewCount,
    fq.AnswerCount,
    fq.CommentCount,
    STRING_AGG(DISTINCT b.Name, ', ') AS BadgeNames
FROM 
    FilteredQuestions fq
LEFT JOIN 
    Badges b ON b.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = fq.PostId LIMIT 1)
GROUP BY 
    fq.PostId, fq.Title, fq.Body, fq.CreationDate, fq.LastActivityDate, fq.OwnerDisplayName, fq.Score, fq.ViewCount, fq.AnswerCount, fq.CommentCount
HAVING 
    fq.Score > 10 
ORDER BY 
    fq.ViewCount DESC, fq.CreationDate DESC;
