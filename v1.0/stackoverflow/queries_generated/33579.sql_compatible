
WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        CreationDate,
        Score,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.Score,
        rph.Level + 1
    FROM 
        Posts p
    INNER JOIN RecursivePostHierarchy rph ON p.ParentId = rph.Id
),
UserReputation AS (
    SELECT 
        Id AS UserId,
        Reputation,
        ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS ReputationRank
    FROM 
        Users
),
TopAnswers AS (
    SELECT 
        p.Id AS PostId,
        p.OwnerUserId,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        COALESCE(COUNT(v.Id), 0) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY COALESCE(COUNT(v.Id), 0) DESC) AS AnswerRank
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2  
    WHERE 
        p.PostTypeId = 2  
    GROUP BY 
        p.Id, p.OwnerUserId
),
PostHistoryAggregation AS (
    SELECT 
        ph.PostId,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN 'Closed' END) AS IsClosed,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 12 THEN 1 END) AS DeletionCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)
SELECT 
    p.Id AS PostId,
    p.Title,
    u.DisplayName AS AuthorName,
    u.Reputation,
    COALESCE(pha.IsClosed, 'Open') AS Status,
    COALESCE(pha.DeletionCount, 0) AS NumberOfDeletions,
    COALESCE(rph.Score, 0) AS PostScore,
    COALESCE(COUNT(c.Id), 0) AS CommentCount,
    COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty
FROM 
    Posts p
JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    Comments c ON p.Id = c.PostId
LEFT JOIN 
    Votes v ON p.Id = v.PostId
LEFT JOIN 
    PostHistoryAggregation pha ON p.Id = pha.PostId
LEFT JOIN 
    RecursivePostHierarchy rph ON rph.Id = p.Id
WHERE 
    p.PostTypeId IN (1, 2)  
AND 
    u.Reputation > 100  
GROUP BY 
    p.Id, p.Title, u.DisplayName, u.Reputation, pha.IsClosed, pha.DeletionCount, rph.Score
HAVING 
    COUNT(c.Id) > 5  
ORDER BY 
    p.CreationDate DESC
LIMIT 50;
