
WITH UserStats AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        COUNT(DISTINCT P.Id) AS TotalPosts,
        COUNT(DISTINCT C.Id) AS TotalComments,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes,
        SUM(B.Class) AS TotalBadges,
        AVG(P.Score) AS AvgPostScore
    FROM Users U
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN Comments C ON U.Id = C.UserId
    LEFT JOIN Votes V ON V.UserId = U.Id
    LEFT JOIN Badges B ON B.UserId = U.Id
    GROUP BY U.Id, U.DisplayName, U.Reputation
),
PostDetails AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.ViewCount,
        P.Score,
        P.AnswerCount,
        P.CommentCount,
        PT.Name AS PostType,
        (SELECT STRING_AGG(Tag.TagName, ', ') FROM Tags Tag 
         WHERE ',' || P.Tags || ',' LIKE '%,' || Tag.TagName || ',%') AS Tags,
        P.OwnerUserId
    FROM Posts P
    JOIN PostTypes PT ON P.PostTypeId = PT.Id
)
SELECT 
    U.UserId,
    U.DisplayName,
    U.Reputation,
    U.TotalPosts,
    U.TotalComments,
    U.TotalUpvotes,
    U.TotalDownvotes,
    U.TotalBadges,
    U.AvgPostScore,
    P.PostId,
    P.Title,
    P.CreationDate,
    P.ViewCount,
    P.Score,
    P.AnswerCount,
    P.CommentCount,
    P.PostType,
    P.Tags
FROM UserStats U
JOIN PostDetails P ON U.UserId = P.OwnerUserId
WHERE U.Reputation > 1000
ORDER BY U.Reputation DESC, P.Score DESC
LIMIT 50;
