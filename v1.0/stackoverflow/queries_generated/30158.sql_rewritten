WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        p.CreationDate,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        p.CreationDate,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostScoreRanked AS (
    SELECT 
        p.Id,
        P.Title,
        p.Score,
        p.AnswerCount,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS ScoreRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 2  
),
ClosedPostHistory AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        ph.UserId,
        ph.Comment,
        ph.Text,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS CloseEventRank
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10  
)
SELECT 
    p.Id AS PostId,
    p.Title AS QuestionTitle,
    p.CreationDate AS QuestionCreationDate,
    COALESCE(ph.CloseDate, 'Open') AS PostStatus,
    COUNT(DISTINCT c.Id) AS TotalComments,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes,
    STRING_AGG(DISTINCT t.TagName, ', ') AS AssociatedTags,
    ROW_NUMBER() OVER (ORDER BY p.CreationDate DESC) AS QuestionRank,
    COALESCE(rp.PostId, 0) AS ParentPostId,
    rp.Level AS HierarchicalLevel
FROM 
    Posts p
LEFT JOIN 
    Comments c ON c.PostId = p.Id
LEFT JOIN 
    Votes v ON v.PostId = p.Id
LEFT JOIN 
    Tags t ON t.Id IN (SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'))::int) )
LEFT JOIN 
    (SELECT ph.PostId, ph.CreationDate FROM ClosedPostHistory ph WHERE ph.CloseEventRank = 1) ph ON ph.PostId = p.Id
LEFT JOIN 
    RecursivePostHierarchy rp ON rp.PostId = p.Id
WHERE 
    p.PostTypeId = 1  
GROUP BY 
    p.Id, p.Title, p.CreationDate, ph.CloseDate, rp.PostId, rp.Level
HAVING 
    COUNT(DISTINCT c.Id) > 0  
ORDER BY 
    TotalUpvotes DESC, p.CreationDate DESC
LIMIT 100;