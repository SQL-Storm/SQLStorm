
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Date) AS LastBadgeDate
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostVotes AS (
    SELECT 
        v.PostId,
        vt.Name AS VoteType,
        COUNT(v.Id) AS VoteCount
    FROM 
        Votes v
    JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id
    GROUP BY 
        v.PostId, vt.Name
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 END) AS ClosedCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 24 THEN 1 END) AS SuggestedEditCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)
SELECT 
    r.Title,
    u.DisplayName AS Author,
    r.Rank,
    COALESCE(b.BadgeCount, 0) AS BadgeCount,
    COALESCE(b.LastBadgeDate, 'No badges') AS LastBadgeDate,
    COALESCE(v.VoteCount, 0) AS TotalVotes,
    COALESCE(ph.ClosedCount, 0) AS CloseCount,
    COALESCE(ph.SuggestedEditCount, 0) AS SuggestedEditCount
FROM 
    RankedPosts r
JOIN 
    Users u ON r.OwnerUserId = u.Id
LEFT JOIN 
    UserBadges b ON u.Id = b.UserId
LEFT JOIN 
    PostVotes v ON r.PostId = v.PostId AND v.VoteType = 'UpMod'
LEFT JOIN 
    PostHistoryDetails ph ON r.PostId = ph.PostId
WHERE 
    r.Rank <= 5 
ORDER BY 
    u.DisplayName, r.Score DESC;
