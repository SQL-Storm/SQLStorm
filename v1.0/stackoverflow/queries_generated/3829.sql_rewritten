WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(vote.VoteTypeId = 2), 0) AS UpVotes,
        COALESCE(SUM(vote.VoteTypeId = 3), 0) AS DownVotes,
        COUNT(DISTINCT post.Id) AS TotalPosts,
        COUNT(DISTINCT CASE WHEN post.AcceptedAnswerId IS NOT NULL THEN post.Id END) AS AcceptedAnswers,
        ROW_NUMBER() OVER (ORDER BY COALESCE(SUM(vote.VoteTypeId = 2), 0) - COALESCE(SUM(vote.VoteTypeId = 3), 0) DESC) AS Rank
    FROM Users u
    LEFT JOIN Posts post ON post.OwnerUserId = u.Id
    LEFT JOIN Votes vote ON vote.PostId = post.Id
    WHERE u.Reputation > 1000
    GROUP BY u.Id, u.DisplayName
),
PopularTags AS (
    SELECT 
        tag.TagName,
        COUNT(p.Id) AS PostCount
    FROM Tags tag
    JOIN Posts p ON tag.Id = ANY(string_to_array(p.Tags, ',')::int[])
    GROUP BY tag.TagName
    HAVING COUNT(p.Id) > 10
),
RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        RANK() OVER (ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank
    FROM Posts p
    WHERE p.CreationDate > cast('2024-10-01' as date) - INTERVAL '1 year'
)
SELECT 
    ua.UserId,
    ua.DisplayName,
    ua.UpVotes,
    ua.DownVotes,
    ua.TotalPosts,
    ua.AcceptedAnswers,
    pt.TagName,
    pp.Title AS PopularPostTitle,
    pp.Score AS PopularPostScore,
    pp.ViewCount AS PopularPostViewCount,
    CASE 
        WHEN ua.Rank <= 10 THEN 'Top User'
        ELSE 'Regular User'
    END AS UserCategory
FROM UserActivity ua
LEFT JOIN PopularTags pt ON ua.TotalPosts > 5 
LEFT JOIN RankedPosts pp ON pp.PostRank <= 5
WHERE ua.UpVotes > 0
ORDER BY ua.UpVotes DESC, ua.DownVotes ASC;