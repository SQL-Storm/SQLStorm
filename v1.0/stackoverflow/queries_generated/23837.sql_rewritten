WITH UserReputation AS (
    SELECT 
        Id AS UserId,
        Reputation,
        DENSE_RANK() OVER (ORDER BY Reputation DESC) AS ReputationRank
    FROM 
        Users
),
PopularPosts AS (
    SELECT 
        P.Id AS PostId,
        P.OwnerUserId,
        P.Title,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        RANK() OVER (PARTITION BY P.OwnerUserId ORDER BY P.Score DESC) AS ScoreRank
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1
),
ClosedPostsInfo AS (
    SELECT 
        PH.PostId,
        PH.CreationDate,
        PH.Comment,
        PH.UserId,
        PH.PostHistoryTypeId,
        STRING_AGG(PH.Comment, '; ') FILTER (WHERE PH.PostHistoryTypeId = 10) AS CloseReasons
    FROM 
        PostHistory PH
    GROUP BY 
        PH.PostId, PH.UserId, PH.PostHistoryTypeId, PH.CreationDate
)
SELECT 
    U.DisplayName,
    U.Reputation,
    UReputation.ReputationRank,
    PP.Title,
    PP.Score,
    PP.ViewCount,
    COALESCE(CP.CloseReasons, 'Not Closed') AS CloseReasons
FROM 
    Users U
LEFT JOIN 
    UserReputation UReputation ON UReputation.UserId = U.Id
INNER JOIN 
    PopularPosts PP ON PP.OwnerUserId = U.Id AND PP.ScoreRank <= 5
LEFT JOIN 
    ClosedPostsInfo CP ON CP.PostId = PP.PostId
WHERE 
    U.Reputation >= 1000
    AND NOT EXISTS (
        SELECT 1 
        FROM Votes V 
        WHERE V.PostId = PP.PostId AND V.VoteTypeId IN (2, 3) 
    )
ORDER BY 
    U.Reputation DESC, 
    PP.Score DESC;