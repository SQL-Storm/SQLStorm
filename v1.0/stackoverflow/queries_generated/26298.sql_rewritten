WITH PostTagCounts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COUNT(DISTINCT t.Id) AS TagCount,
        COALESCE(SUM(CASE WHEN p.ViewCount > 1000 THEN 1 ELSE 0 END), 0) AS HighViews
    FROM 
        Posts p
    LEFT JOIN 
        Tags t ON p.Tags LIKE '%' || t.TagName || '%'
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
TopPosts AS (
    SELECT 
        pt.PostId,
        pt.Title,
        pt.TagCount,
        ur.UserId,
        ur.DisplayName,
        ur.Reputation,
        ur.PostCount,
        ur.GoldBadges,
        ur.SilverBadges,
        ur.BronzeBadges
    FROM 
        PostTagCounts pt
    JOIN 
        UserReputation ur ON pt.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = ur.UserId)
    WHERE 
        pt.TagCount > 5
    ORDER BY 
        pt.TagCount DESC, ur.Reputation DESC
    LIMIT 10
)
SELECT 
    tp.Title,
    tp.TagCount,
    tp.DisplayName AS PostOwner,
    tp.Reputation AS OwnerReputation,
    tp.PostCount AS PostsByOwner,
    tp.GoldBadges,
    tp.SilverBadges,
    tp.BronzeBadges,
    CASE WHEN tp.TagCount > 10 THEN 'High Tag Count' ELSE 'Moderate Tag Count' END AS TagCountRemark
FROM 
    TopPosts tp
ORDER BY 
    tp.TagCount DESC, tp.OwnerReputation DESC;