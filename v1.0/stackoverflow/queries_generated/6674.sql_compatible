
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.Score, 
        p.ViewCount, 
        p.CreationDate, 
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM Posts p
    JOIN Users u ON p.OwnerUserId = u.Id
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
TopPosts AS (
    SELECT 
        rp.PostId, 
        rp.Title, 
        rp.Score, 
        rp.ViewCount, 
        rp.CreationDate, 
        rp.OwnerDisplayName 
    FROM RankedPosts rp
    WHERE rp.Rank <= 10
),
PostDetails AS (
    SELECT 
        tp.PostId,
        tp.Title, 
        tp.Score, 
        tp.ViewCount, 
        tp.CreationDate, 
        tp.OwnerDisplayName,
        COUNT(c.Id) AS CommentCount, 
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVoteCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVoteCount
    FROM TopPosts tp
    LEFT JOIN Comments c ON tp.PostId = c.PostId
    LEFT JOIN Votes v ON tp.PostId = v.PostId
    GROUP BY tp.PostId, tp.Title, tp.Score, tp.ViewCount, tp.CreationDate, tp.OwnerDisplayName
)
SELECT 
    pd.PostId, 
    pd.Title, 
    pd.Score, 
    pd.ViewCount, 
    pd.UpVoteCount, 
    pd.DownVoteCount, 
    pd.CommentCount, 
    pd.CreationDate, 
    pd.OwnerDisplayName,
    ARRAY_AGG(DISTINCT t.TagName) AS Tags
FROM PostDetails pd
LEFT JOIN LATERAL (
    SELECT 
        unnest(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')) AS TagName
    FROM Posts p
    WHERE pd.PostId = p.Id
) t ON TRUE
GROUP BY pd.PostId, pd.Title, pd.Score, pd.ViewCount, pd.CreationDate, pd.OwnerDisplayName
ORDER BY pd.Score DESC, pd.ViewCount DESC;
