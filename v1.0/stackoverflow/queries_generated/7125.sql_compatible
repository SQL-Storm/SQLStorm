
WITH UserVoteStats AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes,
        SUM(CASE WHEN v.VoteTypeId IN (2, 3) THEN 1 ELSE 0 END) AS TotalVotes
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY u.Id, u.DisplayName
),
PostTags AS (
    SELECT
        p.Id AS PostId,
        t.TagName
    FROM Posts p
    JOIN LATERAL unnest(string_to_array(p.Tags, '><')) AS t(TagName) ON true
),
PostInfo AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        pt.Name AS PostType,
        ARRAY_AGG(DISTINCT ptg.TagName) AS Tags,
        COALESCE(ph.RevisionGUID, 'No History') AS LastEditGUID,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount
    FROM Posts p
    LEFT JOIN PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN PostTags ptg ON p.Id = ptg.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    GROUP BY p.Id, p.Title, p.CreationDate, pt.Name, ph.RevisionGUID, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount
)
SELECT
    uvs.UserId,
    uvs.DisplayName,
    p.Title AS PostTitle,
    p.CreationDate AS PostCreationDate,
    p.PostType,
    p.Tags,
    uvs.UpVotes,
    uvs.DownVotes,
    uvs.TotalVotes,
    p.Score AS PostScore,
    p.ViewCount AS PostViews,
    p.AnswerCount AS PostAnswers,
    p.CommentCount AS PostComments,
    COUNT(DISTINCT ph.PostHistoryTypeId) AS TotalHistoryTypes
FROM UserVoteStats uvs
JOIN Posts p ON p.OwnerUserId = uvs.UserId
LEFT JOIN PostHistory ph ON p.Id = ph.PostId
WHERE uvs.TotalVotes > 0
GROUP BY uvs.UserId, uvs.DisplayName, p.Title, p.CreationDate, p.PostType, p.Tags, uvs.UpVotes, uvs.DownVotes, uvs.TotalVotes, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount
ORDER BY uvs.TotalVotes DESC, p.Score DESC
LIMIT 100;
