
WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        DENSE_RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Comments c ON u.Id = c.UserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY u.Id, u.DisplayName, u.Reputation
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreatedDate,
        COALESCE(MAX(c.CreationDate) OVER (PARTITION BY p.Id), p.CreatedDate) AS LastActivity
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    GROUP BY p.Id, p.Title, p.ViewCount, p.Score, p.CreatedDate
),
LargePosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.ViewCount,
        ps.Score,
        ps.LastActivity,
        CASE 
            WHEN ps.ViewCount > 1000 THEN 'High Traffic'
            WHEN ps.ViewCount BETWEEN 500 AND 1000 THEN 'Moderate Traffic'
            ELSE 'Low Traffic' END AS TrafficCategory
    FROM PostStatistics ps
    WHERE ps.Score > 10
),
ClosedPosts AS (
    SELECT
        ph.PostId,
        COUNT(ph.Id) AS CloseVoteCount
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId = 10
    GROUP BY ph.PostId
),
JoinResults AS (
    SELECT 
        ua.UserId,
        ua.DisplayName,
        lp.Title,
        lp.TrafficCategory,
        COALESCE(cp.CloseVoteCount, 0) AS CloseVotes
    FROM UserActivity ua
    INNER JOIN LargePosts lp ON ua.TotalPosts > 5
    LEFT JOIN ClosedPosts cp ON lp.PostId = cp.PostId
)
SELECT 
    j.UserId,
    j.DisplayName,
    j.Title,
    j.TrafficCategory,
    j.CloseVotes,
    CASE 
        WHEN j.CloseVotes = 0 THEN 'Active'
        WHEN j.CloseVotes BETWEEN 1 AND 3 THEN 'Warning'
        ELSE 'Closed' 
    END AS PostStatus,
    ROW_NUMBER() OVER (PARTITION BY j.UserId ORDER BY j.CloseVotes DESC) AS UserPostRank
FROM JoinResults j
WHERE 
    j.CloseVotes IS NOT NULL
    AND j.TrafficCategory = 'High Traffic'
ORDER BY j.UserId, j.CloseVotes DESC;
