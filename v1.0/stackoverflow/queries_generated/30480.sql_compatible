
WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.AnswerCount,
        p.CreationDate,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.AnswerCount,
        p.CreationDate,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostCTE r ON p.ParentId = r.PostId
),
AggregatedPostData AS (
    SELECT 
        p.PostId,
        COUNT(c.Id) AS CommentCount,
        AVG(v.VoteTypeId) AS AvgVoteType,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositiveScoreCount
    FROM 
        RecursivePostCTE p
    LEFT JOIN 
        Comments c ON p.PostId = c.PostId
    LEFT JOIN 
        Votes v ON p.PostId = v.PostId AND v.VoteTypeId IN (2, 3) 
    GROUP BY 
        p.PostId
),
RankedPosts AS (
    SELECT 
        a.PostId,
        a.CommentCount,
        a.AvgVoteType,
        a.PositiveScoreCount,
        RANK() OVER (ORDER BY a.PositiveScoreCount DESC, a.CommentCount DESC) AS Rank
    FROM 
        AggregatedPostData a
)
SELECT 
    r.PostId,
    r.CommentCount,
    r.AvgVoteType,
    r.PositiveScoreCount,
    CASE 
        WHEN r.Rank <= 10 THEN 'Top Posts'
        ELSE 'Other Posts'
    END AS PostCategory,
    u.Reputation AS UserReputation
FROM 
    RankedPosts r
LEFT JOIN 
    Posts p ON r.PostId = p.Id
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
WHERE 
    u.Reputation IS NOT NULL
    AND p.CreationDate >= '2022-01-01 00:00:00' 
    AND (p.Tags LIKE '%sql%' OR p.Tags LIKE '%database%')
ORDER BY 
    r.Rank, r.CommentCount DESC;
