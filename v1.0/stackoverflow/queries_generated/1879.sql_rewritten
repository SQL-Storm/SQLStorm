WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM Posts p
    WHERE p.PostTypeId = 1 
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS TotalUpVotes,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS TotalDownVotes,
        COUNT(b.Id) AS TotalBadges
    FROM Users u
    LEFT JOIN Votes v ON v.UserId = u.Id
    LEFT JOIN Badges b ON b.UserId = u.Id
    GROUP BY u.Id
),
TopUsers AS (
    SELECT 
        us.UserId,
        us.DisplayName,
        us.TotalUpVotes,
        us.TotalDownVotes,
        us.TotalBadges,
        ROW_NUMBER() OVER (ORDER BY (us.TotalUpVotes - us.TotalDownVotes) DESC) AS UserRank
    FROM UserStatistics us
)
SELECT 
    p.Title,
    p.CreationDate,
    p.ViewCount,
    RANK() OVER (ORDER BY p.Score DESC) AS ScoreRank,
    u.DisplayName AS OwnerDisplayName,
    COALESCE(NULLIF(tu.TotalBadges, 0), 'No Badges') AS BadgeCount,
    CASE 
        WHEN p.ViewCount > 100 THEN 'Popular' 
        ELSE 'Less Popular' 
    END AS Popularity,
    JSONB_AGG(JSON_BUILD_OBJECT('VoteType', v.VoteTypeId, 'CreationDate', v.CreationDate)) AS VoteDetails
FROM RankedPosts p
JOIN Users u ON p.OwnerUserId = u.Id
LEFT JOIN Votes v ON v.PostId = p.PostId
LEFT JOIN TopUsers tu ON u.Id = tu.UserId
WHERE p.PostRank = 1
GROUP BY p.PostId, u.DisplayName, tu.TotalBadges
HAVING COUNT(v.Id) > 5
ORDER BY p.ViewCount DESC, ScoreRank
LIMIT 10;