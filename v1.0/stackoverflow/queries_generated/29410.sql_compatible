
WITH PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Body,
        p.AnswerCount,
        p.CommentCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Tags t ON t.Id = ANY(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')::text[])
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year' 
    GROUP BY 
        p.Id, u.DisplayName, u.Reputation
), 
PostHistoryCount AS (
    SELECT 
        PostId,
        COUNT(*) AS EditCount
    FROM 
        PostHistory
    GROUP BY 
        PostId
),
TopPosts AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.ViewCount,
        pd.CreationDate,
        pd.OwnerDisplayName,
        pd.OwnerReputation,
        COALESCE(ph.EditCount, 0) AS EditCount
    FROM 
        PostDetails pd
    LEFT JOIN 
        PostHistoryCount ph ON pd.PostId = ph.PostId
    ORDER BY 
        pd.ViewCount DESC
    LIMIT 10
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.ViewCount,
    tp.CreationDate,
    tp.OwnerDisplayName,
    tp.OwnerReputation,
    tp.EditCount,
    CASE 
        WHEN tp.EditCount >= 10 THEN 'High'
        WHEN tp.EditCount BETWEEN 5 AND 9 THEN 'Medium'
        ELSE 'Low'
    END AS EditActivityLevel
FROM 
    TopPosts tp
ORDER BY 
    tp.OwnerReputation DESC;
