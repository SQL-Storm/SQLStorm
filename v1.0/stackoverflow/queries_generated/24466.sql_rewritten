WITH UserReputation AS (
    SELECT Id, Reputation, 
           DENSE_RANK() OVER (ORDER BY Reputation DESC) AS ReputationRank
    FROM Users
),
UserBadges AS (
    SELECT UserId, COUNT(*) AS BadgeCount, 
           STRING_AGG(Name, ', ' ORDER BY Date DESC) AS BadgesList
    FROM Badges
    GROUP BY UserId
),
PostStatistics AS (
    SELECT p.Id AS PostId, 
           p.Title, 
           p.PostTypeId, 
           COUNT(DISTINCT c.Id) AS CommentCount, 
           SUM(COALESCE(v.VoteTypeId = 2, 0)) AS UpVoteCount,
           SUM(COALESCE(v.VoteTypeId = 3, 0)) AS DownVoteCount,
           COUNT(DISTINCT CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 END) AS AcceptedAnswerExists
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.PostTypeId
),
TopPosts AS (
    SELECT ps.PostId, 
           ps.Title, 
           ps.CommentCount,
           ps.UpVoteCount, 
           ps.DownVoteCount,
           ROW_NUMBER() OVER (PARTITION BY ps.PostTypeId ORDER BY ps.UpVoteCount DESC) AS PostRank
    FROM PostStatistics ps
)
SELECT u.Id AS UserId,
       u.DisplayName,
       ur.Reputation,
       ub.BadgeCount,
       ub.BadgesList,
       tp.Title,
       tp.CommentCount,
       tp.UpVoteCount,
       tp.DownVoteCount
FROM Users u
JOIN UserReputation ur ON u.Id = ur.Id
LEFT JOIN UserBadges ub ON u.Id = ub.UserId
LEFT JOIN TopPosts tp ON tp.PostId IN (
    SELECT PostId 
    FROM TopPosts 
    WHERE PostRank <= 5
)
WHERE ur.Reputation >= 1000
  AND (ub.BadgeCount IS NULL OR ub.BadgeCount > 0)
  AND COALESCE(tp.UpVoteCount, 0) > 10
ORDER BY ur.Reputation DESC, ub.BadgeCount DESC
LIMIT 50;