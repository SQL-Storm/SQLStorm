
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        RANK() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS CreationRank,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        CASE 
            WHEN u.Reputation > 1000 THEN 'High'
            WHEN u.Reputation BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS ReputationLevel
    FROM 
        Users u
),
PostsWithBadges AS (
    SELECT 
        p.Id AS PostId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Posts p
    JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    WHERE 
        b.Date >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year') 
    GROUP BY 
        p.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    u.DisplayName AS OwnerDisplayName,
    u.Reputation,
    ur.ReputationLevel,
    COALESCE(pb.BadgeCount, 0) AS RecentBadgeCount,
    rp.CommentCount,
    CASE 
        WHEN rp.CommentCount > 0 THEN 'Active'
        ELSE 'Inactive'
    END AS ActivityStatus,
    JSON_AGG(DISTINCT pht.Name) AS PostHistoryTypes,
    CASE 
        WHEN p.AcceptedAnswerId IS NOT NULL THEN 
            (SELECT Title FROM Posts WHERE Id = p.AcceptedAnswerId)
        ELSE 
            'No accepted answer'
    END AS AcceptedAnswerTitle
FROM 
    RankedPosts rp
JOIN 
    Users u ON rp.OwnerUserId = u.Id
JOIN 
    UserReputation ur ON u.Id = ur.UserId
LEFT JOIN 
    PostsWithBadges pb ON rp.PostId = pb.PostId
LEFT JOIN 
    PostHistory ph ON rp.PostId = ph.PostId
LEFT JOIN 
    PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
WHERE 
    rp.CreationRank = 1 
    AND u.Location IS NOT NULL 
    AND u.Reputation IS NOT NULL
    AND (u.Reputation BETWEEN 100 AND 500 OR u.Reputation IS NULL)
GROUP BY 
    rp.PostId, rp.Title, rp.CreationDate, u.DisplayName, u.Reputation, ur.ReputationLevel, pb.BadgeCount
ORDER BY 
    rp.CreationDate DESC
LIMIT 100 OFFSET 50;
