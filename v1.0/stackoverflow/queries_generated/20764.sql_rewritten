WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COALESCE(UPPER(SUBSTRING(p.Body FROM '<p>(.*?)</p>')), 'No Body') AS ShortBody,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        AVG(CASE 
                WHEN v.VoteTypeId = 2 THEN 1 
                WHEN v.VoteTypeId = 3 THEN -1 
                ELSE 0 
            END) AS AverageVote,
        ARRAY_AGG(DISTINCT t.TagName) AS TagsArray
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Tags t ON POSITION('>' || t.TagName || '<' IN p.Tags) > 0
    WHERE 
        p.CreationDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month'
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount, p.Body
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.ViewCount,
    rp.ShortBody,
    rp.Rank,
    rp.CommentCount,
    rp.AverageVote,
    string_agg(DISTINCT rp.TagsArray::text, ', ') AS Tags,
    CASE 
        WHEN rp.CommentCount > 10 THEN 'Very Active'
        WHEN rp.CommentCount BETWEEN 5 AND 10 THEN 'Active'
        ELSE 'Inactive'
    END AS ActivityStatus,
    (SELECT COUNT(*)
     FROM Votes v2
     WHERE v2.PostId = rp.PostId AND v2.VoteTypeId = 2) AS UpVoteCount,
    (SELECT COUNT(*)
     FROM Votes v3
     WHERE v3.PostId = rp.PostId AND v3.VoteTypeId = 3) AS DownVoteCount,
    (SELECT COUNT(DISTINCT bh.UserId)
     FROM Badges bh
     WHERE bh.UserId IN (SELECT DISTINCT p.OwnerUserId FROM Posts p WHERE p.Id = rp.PostId)) AS UniqueBadgeHolders
FROM 
    RankedPosts rp
WHERE 
    rp.Rank = 1 
    AND rp.AverageVote IS NOT NULL
ORDER BY 
    rp.Score DESC NULLS LAST, 
    rp.ViewCount DESC NULLS LAST
LIMIT 100 OFFSET 0;