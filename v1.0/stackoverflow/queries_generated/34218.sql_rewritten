WITH RecursivePostLinks AS (
    SELECT 
        pl.PostId,
        pl.RelatedPostId,
        1 AS Depth
    FROM 
        PostLinks pl
    WHERE 
        pl.LinkTypeId = 3 

    UNION ALL

    SELECT 
        pl.PostId,
        pl.RelatedPostId,
        r.Depth + 1
    FROM 
        PostLinks pl
    INNER JOIN 
        RecursivePostLinks r ON pl.RelatedPostId = r.PostId
    WHERE 
        pl.LinkTypeId = 3
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE 
            WHEN b.Class = 1 THEN 3 
            WHEN b.Class = 2 THEN 2 
            WHEN b.Class = 3 THEN 1 
            ELSE 0 
        END) AS BadgePoints,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COUNT(DISTINCT c.Id) AS CommentCount,
        AVG(v.BountyAmount) AS AverageBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8 
    GROUP BY 
        p.Id, p.Title, p.CreationDate
),
PopularPosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CreationDate,
        ps.CommentCount,
        COALESCE(ps.AverageBounty, 0) AS AverageBounty,
        ROW_NUMBER() OVER (ORDER BY ps.CommentCount DESC, ps.AverageBounty DESC) AS Rank
    FROM 
        PostStatistics ps
)

SELECT 
    up.UserId,
    up.DisplayName,
    up.BadgePoints,
    up.PostCount,
    pp.Title,
    pp.CreationDate,
    pp.CommentCount,
    pp.AverageBounty,
    COUNT(DISTINCT rpl.RelatedPostId) AS RelatedPostsCount,
    MAX(CASE WHEN pp.CommentCount > 5 THEN 'Popular' ELSE 'Normal' END) AS PostCategory
FROM 
    UserReputation up
JOIN 
    Posts p ON up.UserId = p.OwnerUserId
JOIN 
    PopularPosts pp ON p.Id = pp.PostId
LEFT JOIN 
    RecursivePostLinks rpl ON pp.PostId = rpl.PostId
WHERE 
    up.BadgePoints > 0 
GROUP BY 
    up.UserId, up.DisplayName, up.BadgePoints, up.PostCount, pp.Title, pp.CreationDate, pp.CommentCount, pp.AverageBounty
HAVING 
    COUNT(DISTINCT rpl.RelatedPostId) > 2 
ORDER BY 
    up.BadgePoints DESC, pp.CommentCount DESC;