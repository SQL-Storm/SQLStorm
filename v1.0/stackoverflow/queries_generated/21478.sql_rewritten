WITH RecursivePostHistory AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        ph.CreationDate AS HistoryCreationDate,
        ph.Comment,
        ph.UserDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY ph.CreationDate DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.PostHistoryTypeId IN (10, 11, 12, 13) 
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9)
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    GROUP BY 
        p.Id
),
ClosedPostCount AS (
    SELECT 
        COUNT(*) AS ClosedPosts
    FROM 
        Posts p
    WHERE 
        EXISTS (
            SELECT 1 
            FROM PostHistory ph 
            WHERE ph.PostId = p.Id AND ph.PostHistoryTypeId = 10
        )
),
MostRecentPost AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        ROW_NUMBER() OVER (ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
)
SELECT 
    p.Id AS PostId,
    p.Title,
    COALESCE(ps.CommentCount, 0) AS CommentCount,
    ps.TotalBounty,
    COALESCE(b.BadgeCount, 0) AS BadgeCount,
    (SELECT ClosedPosts FROM ClosedPostCount) AS TotalClosedPosts,
    rp.HistoryCreationDate AS LastClosedDate,
    rp.UserDisplayName AS RUserDisplayName,
    CASE 
        WHEN rp.rn IS NOT NULL THEN 'Closed'
        ELSE 'Open'
    END AS PostStatus,
    CASE 
        WHEN b.BadgeCount > 0 THEN 
            'This post has badges awarded'
        ELSE 
            'No badges awarded for this post'
    END AS BadgeStatus,
    CASE 
        WHEN ps.TotalBounty > 0 THEN 
            'This post has bounties associated'
        ELSE 
            'No bounties associated with this post'
    END AS BountyStatus
FROM 
    Posts p
LEFT JOIN 
    PostStats ps ON p.Id = ps.PostId
LEFT JOIN 
    RecursivePostHistory rp ON p.Id = rp.PostId AND rp.rn = 1
LEFT JOIN 
    (SELECT PostId, COUNT(Id) AS BadgeCount FROM Badges GROUP BY PostId) b ON b.PostId = p.OwnerUserId
WHERE 
    p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
ORDER BY 
    p.CreationDate DESC
LIMIT 10;