
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.LastActivityDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.DisplayName,
        CASE 
            WHEN u.Reputation < 100 THEN 'Novice'
            WHEN u.Reputation < 1000 THEN 'Intermediate'
            ELSE 'Expert'
        END AS ReputationLevel
    FROM 
        Users u
)
SELECT 
    up.DisplayName,
    up.ReputationLevel,
    COUNT(rp.PostId) AS TotalPosts,
    SUM(rp.Score) AS TotalScore,
    AVG(rp.CommentCount) AS AvgComments,
    STRING_AGG(DISTINCT tp.Name, ', ') AS TagsUsed
FROM 
    RankedPosts rp
JOIN 
    UserReputation up ON rp.PostId IN (
        SELECT p.Id 
        FROM Posts p
        WHERE p.OwnerUserId = up.UserId
    )
LEFT JOIN 
    UNNEST(STRING_TO_ARRAY(rp.Tags, ',')) AS tag_list ON TRUE
LEFT JOIN 
    Tags tp ON tp.TagName = tag_list
WHERE 
    rp.UserRank <= 5
GROUP BY 
    up.DisplayName, up.ReputationLevel
HAVING 
    COUNT(rp.PostId) > 10
ORDER BY 
    TotalScore DESC, TotalPosts DESC 
LIMIT 10;
