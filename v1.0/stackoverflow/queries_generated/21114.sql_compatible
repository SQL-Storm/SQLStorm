
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        p.LastActivityDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS rn,
        COALESCE(pv.VoteCount, 0) AS VoteCount  
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS VoteCount
        FROM 
            Votes
        WHERE
            VoteTypeId IN (2, 3)  
        GROUP BY 
            PostId
    ) pv ON p.Id = pv.PostId
    WHERE
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'  
),

PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        rp.CreationDate,
        rp.LastActivityDate,
        rp.VoteCount,
        (SELECT 
            COUNT(*) 
         FROM 
            Comments c 
         WHERE 
            c.PostId = rp.PostId) AS CommentCount,
        (SELECT 
            STRING_AGG(t.TagName, ', ') 
         FROM 
            Tags t 
         JOIN 
            UNNEST(STRING_TO_ARRAY(rp.Tags, ',')) AS tag_list ON t.TagName = tag_list
         WHERE 
            t.IsModeratorOnly = 0) AS ModeratorAllowedTags  
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn <= 10  
)

SELECT 
    pd.PostId,
    pd.Title,
    pd.Score,
    pd.ViewCount,
    pd.CreationDate,
    pd.LastActivityDate,
    pd.VoteCount,
    pd.CommentCount,
    pd.ModeratorAllowedTags,
    CASE
        WHEN pd.Score > 100 THEN 'Hot'
        WHEN pd.Score BETWEEN 50 AND 100 THEN 'Trending'
        ELSE 'New'
    END AS StatusCategory
FROM 
    PostDetails pd
LEFT JOIN 
    Users u ON pd.PostId = u.Id  
WHERE 
    pd.CommentCount > 0  
ORDER BY 
    pd.LastActivityDate DESC,
    pd.VoteCount DESC
LIMIT 50;
