WITH PostDetails AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        U.DisplayName AS OwnerName,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount,
        COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpvoteCount,
        COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownvoteCount,
        P.Score,
        CASE 
            WHEN P.AcceptedAnswerId IS NOT NULL THEN 'Accepted'
            ELSE 'Not Accepted'
        END AS AcceptanceStatus
    FROM 
        Posts P
    LEFT JOIN 
        Users U ON P.OwnerUserId = U.Id
    LEFT JOIN 
        Comments C ON C.PostId = P.Id
    LEFT JOIN 
        Votes V ON V.PostId = P.Id
    WHERE 
        P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        P.Id, U.DisplayName
),
TagStatistics AS (
    SELECT 
        T.TagName,
        COUNT(DISTINCT P.Id) AS PostCount,
        SUM(CASE WHEN PD.AcceptanceStatus = 'Accepted' THEN 1 ELSE 0 END) AS AcceptedPostCount
    FROM 
        Tags T
    JOIN 
        Posts P ON P.Tags LIKE '%' || T.TagName || '%'
    JOIN 
        PostDetails PD ON PD.PostId = P.Id
    GROUP BY 
        T.TagName
),
UserBadgeCounts AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
)
SELECT 
    T.TagName,
    TS.PostCount,
    TS.AcceptedPostCount,
    COALESCE(UBC.BadgeCount, 0) AS UserBadgeCount,
    (TS.AcceptedPostCount::float / NULLIF(TS.PostCount, 0)) * 100 AS AcceptanceRate,
    CASE 
        WHEN TS.PostCount > 50 THEN 'Hot'
        WHEN TS.PostCount > 20 THEN 'Moderate'
        ELSE 'Cold'
    END AS PopularityLevel
FROM 
    TagStatistics TS
LEFT JOIN 
    UserBadgeCounts UBC ON TS.PostCount = 1
ORDER BY 
    AcceptanceRate DESC, PopularityLevel ASC
LIMIT 10
OFFSET 5;