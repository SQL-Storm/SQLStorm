
WITH RecursivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.Title,
        p.Score,
        p.CreationDate,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id,
        p.ParentId,
        p.Title,
        p.Score,
        p.CreationDate,
        rp.Level + 1
    FROM 
        Posts p
    JOIN 
        RecursivePosts rp ON p.ParentId = rp.PostId
    WHERE 
        p.PostTypeId = 2  
),
RankedPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.Level,
        RANK() OVER (PARTITION BY rp.ParentId ORDER BY rp.Score DESC) AS RankScore
    FROM 
        RecursivePosts rp
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounty,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotesCount, 
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotesCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    p.PostId,
    p.Title AS QuestionTitle,
    p.Score AS QuestionScore,
    p.CreationDate AS QuestionDate,
    COUNT(DISTINCT c.Id) AS CommentCount,
    SUM(CASE WHEN p.Level = 1 THEN 1 ELSE 0 END) AS AnswerCount,
    u.DisplayName AS UserName,
    us.BadgeCount,
    us.TotalBounty,
    us.UpVotesCount,
    us.DownVotesCount
FROM 
    RankedPosts p
LEFT JOIN 
    Comments c ON c.PostId = p.PostId
JOIN 
    Users u ON u.Id IN (SELECT AnsweredPostId FROM Posts WHERE AcceptedAnswerId = p.PostId)
JOIN 
    UserStatistics us ON us.UserId = u.Id
WHERE 
    p.RankScore = 1 AND p.Level = 1 
GROUP BY 
    p.PostId, p.Title, p.Score, p.CreationDate, u.DisplayName, us.BadgeCount, us.TotalBounty, us.UpVotesCount, us.DownVotesCount
ORDER BY 
    p.CreationDate DESC
LIMIT 100;
