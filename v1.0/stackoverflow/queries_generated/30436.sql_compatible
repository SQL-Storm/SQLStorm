
WITH RecursivePostChain AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.OwnerUserId, 
        p.CreationDate, 
        p.Score, 
        p.ParentId
    FROM 
        Posts p 
    WHERE 
        p.PostTypeId = 1  
    
    UNION ALL
    
    SELECT 
        p2.Id,
        p2.Title,
        p2.OwnerUserId,
        p2.CreationDate,
        p2.Score,
        p2.ParentId
    FROM 
        Posts p2
    INNER JOIN 
        RecursivePostChain rpc ON p2.ParentId = rpc.PostId
)
SELECT 
    p.Title AS QuestionTitle,
    p.OwnerUserId,
    p.Score AS QuestionScore,
    COUNT(DISTINCT a.Id) AS AnswerCount,
    COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
    COUNT(DISTINCT c.Id) AS CommentCount,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
    p.CreationDate AS QuestionCreationDate,
    MAX(a.CreationDate) AS LastAnswerDate,
    DATEDIFF(DAY, p.CreationDate, CURRENT_DATE) AS DaysSincePosted,
    (SELECT COUNT(*)
     FROM Votes v2
     WHERE v2.PostId = p.Id AND v2.VoteTypeId = 3) AS DownVoteCount,
    CASE 
        WHEN COUNT(DISTINCT a.Id) > 0 THEN
            (SELECT COUNT(*)
             FROM Votes v3
             WHERE v3.PostId = a.Id AND v3.VoteTypeId = 2)
        ELSE 0
    END AS TotalUpvotesOnAnswers
FROM 
    Posts p
LEFT JOIN 
    Posts a ON p.Id = a.ParentId 
LEFT JOIN 
    Comments c ON p.Id = c.PostId 
LEFT JOIN 
    Tags t ON t.WikiPostId = p.Id 
LEFT JOIN 
    Votes v ON v.PostId = p.Id 
WHERE 
    p.ViewCount > 100 
GROUP BY 
    p.Id, p.Title, p.OwnerUserId, p.Score, p.CreationDate
ORDER BY 
    TotalBounty DESC, QuestionScore DESC, DaysSincePosted ASC;
