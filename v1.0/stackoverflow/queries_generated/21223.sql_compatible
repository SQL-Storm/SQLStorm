
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(*) OVER () AS TotalPosts
    FROM 
        Posts p
    WHERE
        p.CreationDate >= '2023-01-01' 
        AND p.Score IS NOT NULL
),
PostWithBadges AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        COALESCE(b.Name, 'No Badge') AS BadgeName,
        CASE 
            WHEN b.Class = 1 THEN 'Gold'
            WHEN b.Class = 2 THEN 'Silver'
            WHEN b.Class = 3 THEN 'Bronze'
            ELSE 'No Class'
        END AS BadgeClass
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges b ON b.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
    WHERE 
        rp.RankByScore <= 10
),
CommentStatistics AS (
    SELECT 
        PostId,
        COUNT(*) AS CommentCount, 
        MAX(CreationDate) AS LastCommentDate
    FROM 
        Comments
    GROUP BY 
        PostId
),
FinalPostData AS (
    SELECT 
        pwb.PostId,
        pwb.Title,
        pwb.CreationDate,
        pwb.Score,
        pwb.ViewCount,
        pwb.BadgeName,
        pwb.BadgeClass,
        cs.CommentCount,
        cs.LastCommentDate,
        CASE 
            WHEN cs.CommentCount IS NULL THEN 'No Comments Yet'
            ELSE CONCAT(CAST(cs.CommentCount AS VARCHAR), ' comments')
        END AS CommentsInfo
    FROM 
        PostWithBadges pwb
    LEFT JOIN 
        CommentStatistics cs ON pwb.PostId = cs.PostId
)

SELECT 
    fpd.PostId,
    fpd.Title, 
    fpd.CreationDate,
    fpd.Score,
    fpd.ViewCount,
    fpd.BadgeName,
    fpd.BadgeClass,
    fpd.CommentsInfo,
    CASE 
        WHEN fpd.LastCommentDate IS NULL THEN 'N/A'
        ELSE TO_CHAR(fpd.LastCommentDate, 'Day, DD Month YYYY HH12:MI:SS AM')
    END AS FormattedLastCommentDate
FROM 
    FinalPostData fpd
WHERE 
    fpd.Score > (SELECT AVG(Score) FROM Posts)
ORDER BY 
    fpd.Score DESC;
