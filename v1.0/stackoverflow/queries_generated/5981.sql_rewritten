WITH RankedPosts AS (
    SELECT 
        p.Id, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        p.ViewCount, 
        u.DisplayName AS OwnerDisplayName, 
        COUNT(c.Id) AS TotalComments,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '90 days' 
        AND p.PostTypeId IN (1, 2) 
    GROUP BY 
        p.Id, u.DisplayName
), PostWithBadges AS (
    SELECT 
        rp.Id, 
        rp.Title, 
        rp.OwnerDisplayName, 
        rp.CreationDate, 
        rp.Score,
        rb.Name AS BadgeName
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges b ON b.UserId = (SELECT Id FROM Users WHERE DisplayName = rp.OwnerDisplayName LIMIT 1)
    LEFT JOIN 
        Badges rb ON b.Id = rb.Id
    WHERE 
        b.Class = 1
)
SELECT 
    pwb.Title, 
    pwb.OwnerDisplayName, 
    pwb.CreationDate, 
    pwb.Score,
    COUNT(DISTINCT c.Id) AS CommentCount,
    STRING_AGG(DISTINCT rb.Name, ', ') AS BadgesAwarded
FROM 
    PostWithBadges pwb
LEFT JOIN 
    Comments c ON pwb.Id = c.PostId
GROUP BY 
    pwb.Title, pwb.OwnerDisplayName, pwb.CreationDate, pwb.Score
HAVING 
    COUNT(DISTINCT c.Id) > 5
ORDER BY 
    pwb.Score DESC 
LIMIT 10;