
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 AND 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        COALESCE(SUM(b.Class), 0) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
QualifiedUsers AS (
    SELECT 
        ur.UserId,
        ur.Reputation,
        ur.PostCount,
        ur.TotalBadges,
        COALESCE(pc.CommentCount, 0) AS TotalComments
    FROM 
        UserReputation ur
    LEFT JOIN 
        PostComments pc ON ur.UserId = pc.PostId
    WHERE 
        ur.Reputation > 1000
)

SELECT 
    ju.UserId,
    ju.Reputation,
    ju.PostCount,
    ju.TotalBadges,
    ju.TotalComments,
    rp.Title,
    rp.ViewCount,
    rp.Score,
    rp.CreationDate
FROM 
    QualifiedUsers ju
JOIN 
    RankedPosts rp ON ju.UserId = rp.OwnerUserId
WHERE 
    rp.PostRank <= 3
ORDER BY 
    ju.Reputation DESC, 
    rp.Score DESC
UNION ALL
SELECT 
    -1 AS UserId,
    NULL AS Reputation,
    NULL AS PostCount,
    NULL AS TotalBadges,
    COUNT(c.Id) AS TotalComments,
    NULL AS Title,
    NULL AS ViewCount,
    NULL AS Score,
    NULL AS CreationDate
FROM 
    Posts p
LEFT JOIN 
    Comments c ON p.Id = c.PostId
WHERE 
    p.CreationDate < TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
GROUP BY 
    p.OwnerUserId
HAVING 
    COUNT(p.Id) > 0;
