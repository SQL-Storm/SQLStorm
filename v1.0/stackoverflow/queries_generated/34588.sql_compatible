
WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        1 AS Level
    FROM Posts p
    WHERE p.PostTypeId = 1  
    UNION ALL
    SELECT 
        a.Id,
        a.Title,
        a.PostTypeId,
        a.Score,
        a.ViewCount,
        a.CreationDate,
        a.OwnerUserId,
        r.Level + 1
    FROM Posts a
    INNER JOIN RecursivePostCTE r ON a.ParentId = r.PostId
    WHERE a.PostTypeId = 2  
),
PostVoteDetails AS (
    SELECT 
        p.Id AS PostId,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpvoteCount,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownvoteCount,
        COUNT(v.Id) AS TotalVotes
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id
),
TagStatistics AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(p.ViewCount) AS TotalViews
    FROM Tags t
    JOIN Posts p ON p.Tags LIKE CONCAT('%', t.TagName, '%')
    GROUP BY t.TagName
),
UserSummary AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END), 0) AS QuestionsAsked,
        COALESCE(SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END), 0) AS AnswersProvided,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName, u.Reputation
)
SELECT 
    ps.Title AS QuestionTitle,
    ps.Score AS QuestionScore,
    ps.ViewCount AS QuestionViews,
    uv.DisplayName AS UserDisplayName,
    uv.Reputation AS UserReputation,
    COALESCE(vd.UpvoteCount, 0) AS QuestionUpvotes,
    COALESCE(vd.DownvoteCount, 0) AS QuestionDownvotes,
    ts.TagName,
    ts.PostCount,
    ts.TotalViews,
    r.Level AS AnswerLevel
FROM RecursivePostCTE r 
JOIN Posts ps ON r.PostId = ps.Id
JOIN UserSummary uv ON ps.OwnerUserId = uv.UserId
LEFT JOIN PostVoteDetails vd ON ps.Id = vd.PostId
LEFT JOIN TagStatistics ts ON ps.Tags LIKE CONCAT('%', ts.TagName, '%')
WHERE ps.CreationDate >= DATEADD(year, -1, '2024-10-01')
ORDER BY ps.Score DESC, uv.Reputation DESC, ts.TotalViews DESC;
