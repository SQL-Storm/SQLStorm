WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(NULLIF(p.AcceptedAnswerId, -1), 
                 (SELECT Id FROM Posts pa WHERE pa.ParentId = p.Id AND pa.PostTypeId = 2 ORDER BY pa.Score DESC LIMIT 1)) AS BestAnswerId
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 AND
        p.Score > 0
),
PostDetails AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount,
        CASE 
            WHEN b.Name IS NOT NULL THEN b.Name 
            ELSE 'No Badge'
        END AS UserBadge,
        CASE 
            WHEN EXISTS (SELECT 1 FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 6) THEN 'Closed' 
            WHEN EXISTS (SELECT 1 FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 7) THEN 'Reopened' 
            ELSE 'Active' 
        END AS PostStatus
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges b ON rp.OwnerUserId = b.UserId AND b.Class = 1 
    WHERE 
        rp.rn = 1
),
AnswerDetails AS (
    SELECT 
        p.Id AS PostId,
        COUNT(a.Id) AS AnswerCount,
        MAX(a.CreationDate) AS LastAnswerDate
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2
    WHERE 
        p.PostTypeId = 1
    GROUP BY p.Id
),
FinalReport AS (
    SELECT 
        pd.Id,
        pd.Title,
        pd.CreationDate,
        pd.Score,
        pd.ViewCount,
        pd.CommentCount,
        COALESCE(ad.AnswerCount, 0) AS AnswerCount,
        ad.LastAnswerDate,
        pd.UserBadge,
        pd.PostStatus,
        pd.BestAnswerId
    FROM 
        PostDetails pd
    LEFT JOIN 
        AnswerDetails ad ON pd.Id = ad.PostId
)
SELECT 
    fr.*,
    (SELECT STRING_AGG(t.TagName, ', ') 
     FROM Tags t 
     INNER JOIN LATERAL (SELECT unnest(string_to_array(fr.Title, ' ')) AS tag) AS tags ON t.TagName ILIKE '%' || tags.tag || '%') AS TagList,
    (SELECT COUNT(DISTINCT ph.Id) 
     FROM PostHistory ph 
     WHERE ph.PostId = fr.Id AND ph.PostHistoryTypeId = 10) AS CloseVoteCount
FROM 
    FinalReport fr
WHERE 
    fr.ViewCount > (SELECT AVG(ViewCount) FROM Posts)
ORDER BY 
    fr.Score DESC NULLS LAST, 
    fr.ViewCount DESC 
LIMIT 50;