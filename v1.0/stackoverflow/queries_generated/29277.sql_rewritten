WITH TagCounts AS (
    SELECT 
        TRIM(UNNEST(string_to_array(substring(Tags, 2, length(Tags)-2), '><'))) AS TagName,
        COUNT(*) AS TagUsageCount
    FROM 
        Posts
    WHERE 
        PostTypeId = 1 
    GROUP BY 
        TagName
),
TopTags AS (
    SELECT 
        TagName
    FROM 
        TagCounts
    ORDER BY 
        TagUsageCount DESC
    LIMIT 10
),
RecentPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.AcceptedAnswerId,
        ARRAY(SELECT t.TagName FROM TagCounts t WHERE t.TagName = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'))) AND t.TagName IN (SELECT TagName FROM TopTags)) AS RelevantTags
    FROM 
        Posts p
    JOIN 
        TopTags tt ON tt.TagName = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'))
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    ORDER BY 
        p.CreationDate DESC
    LIMIT 100
)
SELECT 
    rp.Title AS PostTitle,
    rp.CreationDate AS PostCreation,
    rp.ViewCount AS PostViews,
    rp.RelevantTags,
    u.DisplayName AS OwnerDisplayName,
    u.Reputation AS OwnerReputation,
    COUNT(c.Id) AS CommentCount,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
FROM 
    RecentPosts rp
JOIN 
    Users u ON rp.OwnerUserId = u.Id
LEFT JOIN 
    Comments c ON rp.Id = c.PostId
LEFT JOIN 
    Votes v ON rp.Id = v.PostId
GROUP BY 
    rp.Id, u.Id
ORDER BY 
    PostViews DESC;