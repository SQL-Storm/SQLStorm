WITH RecursiveUserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        u.Location,
        1 AS Level
    FROM Users u
    WHERE u.Reputation > 1000  

    UNION ALL

    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        u.Location,
        Level + 1
    FROM Users u
    INNER JOIN Votes v ON u.Id = v.UserId
    WHERE v.VoteTypeId = 2  
      AND Level < 5           
      AND u.Reputation > 1000 
), PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        p.PostTypeId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate > cast('2024-10-01' as date) - INTERVAL '1 year' 
    GROUP BY p.Id
), PostHistorySummary AS (
    SELECT 
        ph.PostId,
        COUNT(DISTINCT ph.Id) AS HistoryCount,
        MAX(ph.CreationDate) AS LastEditedDate
    FROM PostHistory ph
    GROUP BY ph.PostId
)
SELECT 
    us.DisplayName,
    us.Reputation,
    ps.Title,
    ps.ViewCount,
    ps.Score,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes,
    COALESCE(phs.HistoryCount, 0) AS HistoryCount,
    phs.LastEditedDate,
    CASE 
        WHEN ps.Score > 10 THEN 'Popular' 
        WHEN ps.Score BETWEEN 1 AND 10 THEN 'Moderate' 
        ELSE 'Unpopular' 
    END AS Popularity
FROM RecursiveUserStats us
JOIN PostStats ps ON us.UserId = ps.PostId 
LEFT JOIN PostHistorySummary phs ON ps.PostId = phs.PostId
WHERE ps.CommentCount > 5 
ORDER BY us.Reputation DESC, ps.ViewCount DESC
LIMIT 100;