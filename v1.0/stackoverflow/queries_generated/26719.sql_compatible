
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
), 
PostAnalytics AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Tags,
        rp.Score,
        rp.ViewCount,
        pt.Name AS PostType,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Comments c ON rp.PostId = c.PostId
    LEFT JOIN 
        Votes v ON rp.PostId = v.PostId
    LEFT JOIN 
        PostTypes pt ON rp.PostId = pt.Id
    WHERE 
        rp.Rank = 1
    GROUP BY 
        rp.PostId, rp.Title, rp.Tags, rp.Score, rp.ViewCount, pt.Name
), 
TagStatistics AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT pa.PostId) AS PostCount,
        SUM(pa.Score) AS TotalScore
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, ',')::text[])
    JOIN 
        PostAnalytics pa ON p.Id = pa.PostId
    GROUP BY 
        t.TagName
)
SELECT 
    pa.Title,
    pa.Tags,
    pa.Score,
    pa.ViewCount,
    ts.TagName,
    ts.PostCount,
    ts.TotalScore,
    pa.UpVotes,
    pa.DownVotes
FROM 
    PostAnalytics pa
JOIN 
    TagStatistics ts ON pa.Tags LIKE '%' || ts.TagName || '%'
ORDER BY 
    ts.TotalScore DESC, 
    pa.Score DESC
LIMIT 10;
