WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        U.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users U ON p.OwnerUserId = U.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
), 
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS ClosedDate,
        MAX(ph.CreationDate) OVER (PARTITION BY ph.PostId) AS LastActivity,
        COUNT(*) AS CloseCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10  
    GROUP BY 
        ph.PostId, ph.CreationDate
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(T.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        UNNEST(string_to_array(p.Tags, ',')) AS t(TagName) ON t.TagName IS NOT NULL
    JOIN 
        Tags T ON T.TagName = TRIM(t.TagName)
    GROUP BY 
        p.Id
),
UserBadges AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
)

SELECT 
    RP.PostId,
    RP.Title,
    RP.Score,
    RP.ViewCount,
    RP.OwnerDisplayName,
    CP.ClosedDate,
    CP.CloseCount,
    PT.Tags,
    UB.BadgeCount,
    COALESCE(CP.LastActivity, RP.CreationDate) AS MostRecentActivity,
    CASE 
        WHEN RP.Score > 100 THEN 'High Performer'
        WHEN RP.Score > 50  THEN 'Moderate Performer'
        ELSE 'Low Performer' 
    END AS PerformanceRating
FROM 
    RankedPosts RP
LEFT JOIN 
    ClosedPosts CP ON RP.PostId = CP.PostId
LEFT JOIN 
    PostTags PT ON RP.PostId = PT.PostId
LEFT JOIN 
    UserBadges UB ON RP.OwnerDisplayName = UB.UserId
WHERE 
    RP.Rank <= 5  
ORDER BY 
    RP.Score DESC, RP.ViewCount DESC;