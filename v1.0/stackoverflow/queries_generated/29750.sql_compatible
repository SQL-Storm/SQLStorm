
WITH StringProcessingData AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(a.AcceptedAnswerId IS NOT NULL, FALSE) AS HasAcceptedAnswer,
        LEFT(p.Body, 100) AS PreviewBody,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagList,
        DENSE_RANK() OVER (PARTITION BY u.Id ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS CommentCount FROM Comments GROUP BY PostId) c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.AcceptedAnswerId = a.Id
    LEFT JOIN 
        Tags t ON t.TagName = ANY(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><'))
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, u.DisplayName, p.Title, p.Body, p.Tags, a.AcceptedAnswerId, c.CommentCount
),
BenchmarkResults AS (
    SELECT 
        s.PostId,
        s.OwnerDisplayName,
        s.Title,
        s.PreviewBody,
        s.TagList,
        s.CommentCount,
        s.HasAcceptedAnswer,
        s.UserPostRank,
        LENGTH(s.Body) AS BodyLength,
        LENGTH(s.Title) AS TitleLength,
        COUNT(v.Id) AS VoteCount
    FROM 
        StringProcessingData s
    LEFT JOIN 
        Votes v ON s.PostId = v.PostId
    WHERE 
        s.UserPostRank <= 5  
    GROUP BY 
        s.PostId, s.OwnerDisplayName, s.Title, s.PreviewBody, s.TagList, s.CommentCount, s.HasAcceptedAnswer, s.UserPostRank
)
SELECT 
    AVG(BodyLength) AS AvgBodyLength,
    AVG(TitleLength) AS AvgTitleLength,
    SUM(CASE WHEN HasAcceptedAnswer THEN 1 ELSE 0 END) AS TotalQuestionsWithAcceptedAnswers,
    SUM(CommentCount) AS TotalComments,
    SUM(VoteCount) AS TotalVotes
FROM 
    BenchmarkResults;
