WITH UserVoteSummary AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(v.Id) AS TotalVotes,
        COALESCE(SUM(CASE WHEN vt.Name = 'UpMod' THEN 1 ELSE 0 END), 0) AS TotalUpVotes,
        COALESCE(SUM(CASE WHEN vt.Name = 'DownMod' THEN 1 ELSE 0 END), 0) AS TotalDownVotes,
        RANK() OVER (ORDER BY COUNT(v.Id) DESC) AS VoteRank
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id
    GROUP BY 
        u.Id, u.DisplayName
),
PostActivity AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(pv.TotalUpVotes, 0) AS UpVoteCount,
        COALESCE(cv.TotalDownVotes, 0) AS DownVoteCount,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate) AS PostNumber
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS TotalUpVotes
        FROM 
            Votes
        WHERE 
            VoteTypeId = (SELECT Id FROM VoteTypes WHERE Name = 'UpMod')
        GROUP BY 
            PostId
    ) pv ON p.Id = pv.PostId
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS TotalDownVotes
        FROM 
            Votes
        WHERE 
            VoteTypeId = (SELECT Id FROM VoteTypes WHERE Name = 'DownMod')
        GROUP BY 
            PostId
    ) cv ON p.Id = cv.PostId
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments
        GROUP BY 
            PostId
    ) c ON p.Id = c.PostId
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
),
CombinedActivity AS (
    SELECT 
        u.UserId,
        u.DisplayName,
        pa.PostId,
        pa.Title,
        pa.CreationDate,
        pa.UpVoteCount,
        pa.DownVoteCount,
        pa.CommentCount,
        uvs.TotalVotes,
        uvs.TotalUpVotes,
        uvs.TotalDownVotes
    FROM 
        UserVoteSummary uvs
    INNER JOIN 
        (SELECT DISTINCT OwnerUserId AS UserId, PostId, Title, CreationDate, UpVoteCount, DownVoteCount, CommentCount
         FROM PostActivity) pa ON uvs.UserId = pa.UserId
    LEFT JOIN 
        Users u ON u.Id = pa.UserId
)
SELECT 
    c.UserId,
    c.DisplayName,
    COUNT(DISTINCT c.PostId) AS PostCount,
    SUM(c.UpVoteCount) AS TotalUpVotes,
    SUM(c.DownVoteCount) AS TotalDownVotes,
    SUM(c.CommentCount) AS TotalComments,
    CASE 
        WHEN SUM(c.UpVoteCount) > SUM(c.DownVoteCount) THEN 'Positive Engagement'
        WHEN SUM(c.UpVoteCount) < SUM(c.DownVoteCount) THEN 'Negative Engagement'
        ELSE 'Neutral'
    END AS EngagementType,
    MAX(CASE WHEN c.UpVoteCount > 2 THEN 'Active Critic' ELSE NULL END) AS EngagementCategory
FROM 
    CombinedActivity c
GROUP BY 
    c.UserId, c.DisplayName
HAVING 
    COUNT(DISTINCT c.PostId) > 5
EXCEPT 
SELECT 
    u.Id AS UserId, 
    u.DisplayName, 
    0 AS PostCount, 
    0 AS TotalUpVotes, 
    0 AS TotalDownVotes, 
    0 AS TotalComments,
    'No Engagement' AS EngagementType, 
    NULL AS EngagementCategory 
FROM 
    Users u
WHERE 
    u.Id NOT IN (SELECT UserId FROM CombinedActivity)
ORDER BY 
    TotalUpVotes DESC NULLS LAST, 
    TotalDownVotes ASC NULLS FIRST;