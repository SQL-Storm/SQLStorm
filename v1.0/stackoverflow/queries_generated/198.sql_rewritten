WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
RecentBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Date) AS LastBadgeDate
    FROM 
        Badges b
    WHERE 
        b.Date >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        b.UserId
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(rb.BadgeCount, 0) AS BadgeCount,
        COALESCE(rb.LastBadgeDate, NULL) AS LastBadgeDate
    FROM 
        Users u
    LEFT JOIN 
        RecentBadges rb ON u.Id = rb.UserId
)
SELECT 
    us.UserId,
    us.DisplayName,
    us.Reputation,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.CommentCount,
    us.BadgeCount,
    RANK() OVER (ORDER BY us.Reputation DESC) AS ReputationRank,
    CASE 
        WHEN us.LastBadgeDate IS NOT NULL THEN 'Has Badges'
        ELSE 'No Badges'
    END AS BadgeStatus
FROM 
    UserStats us
JOIN 
    RankedPosts rp ON us.UserId = rp.OwnerUserId
WHERE 
    rp.rn = 1
ORDER BY 
    us.Reputation DESC, rp.Score DESC
LIMIT 100;