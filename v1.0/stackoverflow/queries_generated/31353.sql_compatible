
WITH RankedPosts AS (
    SELECT
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM
        Posts p
    WHERE
        p.PostTypeId = 1 
),
UserReputation AS (
    SELECT
        u.Id AS UserId,
        u.Reputation,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM
        Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY
        u.Id, u.Reputation
),
PostHistoryDetails AS (
    SELECT
        ph.PostId,
        ph.UserId,
        ph.Comment,
        ph.CreationDate,
        ph.PostHistoryTypeId,
        ph.Text AS RevisionText,
        RANK() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS EditRank
    FROM
        PostHistory ph
    WHERE
        ph.PostHistoryTypeId IN (4, 5, 6) 
),
MostActiveUsers AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.Score, 0)) AS TotalScore
    FROM
        Users u
    JOIN Posts p ON u.Id = p.OwnerUserId
    WHERE
        p.CreationDate > CURRENT_DATE - INTERVAL '1 year'
    GROUP BY
        u.Id, u.DisplayName
),
ActivePosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COALESCE(COUNT(c.Id), 0) AS CommentCount,
        COALESCE(SUM(ph.Score), 0) AS TotalPostHistoryActions
    FROM
        Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    WHERE
        p.CreationDate > CURRENT_DATE - INTERVAL '6 months'
    GROUP BY
        p.Id, p.Title
)
SELECT
    rp.Title,
    rp.CreationDate,
    ur.Reputation AS UserReputation,
    ur.BadgeCount,
    mup.UserId,
    mup.DisplayName,
    mup.PostCount,
    mup.TotalScore,
    aph.UpVotes,
    aph.DownVotes,
    aph.CommentCount,
    aph.TotalPostHistoryActions,
    CASE
        WHEN aph.TotalPostHistoryActions > 10 THEN 'High Activity'
        WHEN aph.TotalPostHistoryActions BETWEEN 5 AND 10 THEN 'Medium Activity'
        ELSE 'Low Activity'
    END AS ActivityLevel
FROM
    RankedPosts rp
JOIN UserReputation ur ON ur.UserId = rp.OwnerUserId
JOIN MostActiveUsers mup ON mup.UserId = rp.OwnerUserId
JOIN ActivePosts aph ON aph.PostId = rp.Id
WHERE
    rp.PostRank = 1 
ORDER BY
    ur.Reputation DESC, 
    aph.TotalPostHistoryActions DESC, 
    rp.CreationDate DESC;
