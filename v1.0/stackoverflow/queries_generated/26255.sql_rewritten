WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        STRING_AGG(t.TagName, ', ') AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Ranking
    FROM Posts p
    LEFT JOIN Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
    WHERE p.PostTypeId = 1 
    GROUP BY p.Id, p.Title, p.Body, p.CreationDate, p.ViewCount, p.Score
),

UserPosts AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(rp.PostId) AS TotalPosts,
        SUM(rp.Score) AS TotalScore,
        AVG(rp.ViewCount) AS AvgViewCount,
        STRING_AGG(DISTINCT rp.Tags, '; ') AS AllTags
    FROM Users u
    LEFT JOIN RankedPosts rp ON u.Id = rp.OwnerUserId
    GROUP BY u.Id, u.DisplayName
),

UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM Badges b
    GROUP BY b.UserId
)

SELECT 
    up.UserId,
    up.DisplayName,
    up.TotalPosts,
    up.TotalScore,
    up.AvgViewCount,
    ub.BadgeCount,
    ub.BadgeNames,
    CASE 
        WHEN up.TotalPosts >= 100 THEN 'Legendary Contributor'
        WHEN up.TotalPosts >= 50 THEN 'Top Contributor'
        ELSE 'Novice Contributor'
    END AS ContributorLevel
FROM UserPosts up
LEFT JOIN UserBadges ub ON up.UserId = ub.UserId
WHERE up.TotalScore > 0
ORDER BY up.TotalScore DESC, up.ContributorLevel DESC
LIMIT 10;