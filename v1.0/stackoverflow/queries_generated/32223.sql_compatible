
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
)

, PostVoteCounts AS (
    SELECT 
        PostId,
        COUNT(CASE WHEN VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN VoteTypeId = 3 THEN 1 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
)

, UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)

SELECT 
    ph.PostId,
    ph.Title AS QuestionTitle,
    COALESCE(v.UpVotes, 0) AS UpVotes,
    COALESCE(v.DownVotes, 0) AS DownVotes,
    COALESCE(bb.BadgeCount, 0) AS UserBadgeCount,
    COALESCE(bb.BadgeNames, 'No Badges') AS UserBadges,
    ph.Level AS QuestionLevel
FROM 
    RecursivePostHierarchy ph
LEFT JOIN 
    PostVoteCounts v ON ph.PostId = v.PostId
LEFT JOIN 
    Users u ON ph.PostId = u.Id
LEFT JOIN 
    UserBadges bb ON u.Id = bb.UserId
WHERE 
    ph.Level = 1  
AND 
    EXISTS (SELECT 1 FROM Posts p WHERE p.Id = ph.PostId AND p.AcceptedAnswerId IS NOT NULL)
GROUP BY 
    ph.PostId, 
    ph.Title, 
    v.UpVotes, 
    v.DownVotes, 
    bb.BadgeCount, 
    bb.BadgeNames, 
    ph.Level
ORDER BY 
    UpVotes DESC, 
    ph.Title ASC;
