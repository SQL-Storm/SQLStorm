
WITH RECURSIVE UserPosts AS (
    SELECT 
        u.Id AS UserId, 
        u.DisplayName, 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate, 
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId
),
TopUsers AS (
    SELECT 
        UserId, 
        DisplayName, 
        COUNT(PostId) AS PostCount,
        SUM(Score) AS TotalScore,
        SUM(ViewCount) AS TotalViews
    FROM 
        UserPosts
    WHERE 
        rn <= 5  
    GROUP BY 
        UserId, DisplayName
),
TagMetrics AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS TagPostCount,
        SUM(p.Score) AS TagTotalScore
    FROM 
        Tags t
    LEFT JOIN 
        Posts p ON p.Tags LIKE CONCAT('%<', t.TagName, '>%')  
    GROUP BY 
        t.TagName
),
PostHistoryCounts AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS HistoryCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
ActivePosts AS (
    SELECT 
        p.Id, 
        p.Title, 
        p.Score,
        COALESCE(phc.HistoryCount, 0) AS HistoryCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagList
    FROM 
        Posts p
    LEFT JOIN 
        PostHistoryCounts phc ON p.Id = phc.PostId
    LEFT JOIN 
        Tags t ON p.Tags LIKE CONCAT('%<', t.TagName, '>%')  
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')  
    GROUP BY 
        p.Id, p.Title, p.Score
)
SELECT 
    t.UserId, 
    t.DisplayName, 
    t.PostCount, 
    t.TotalScore, 
    t.TotalViews, 
    a.Title, 
    a.Score, 
    a.HistoryCount,
    a.TagList
FROM 
    TopUsers t
JOIN 
    ActivePosts a ON a.Id IN (SELECT PostId FROM UserPosts WHERE UserId = t.UserId)
WHERE 
    t.TotalScore >= 100  
ORDER BY 
    t.TotalScore DESC, 
    t.PostCount DESC, 
    a.Score DESC
LIMIT 10;
