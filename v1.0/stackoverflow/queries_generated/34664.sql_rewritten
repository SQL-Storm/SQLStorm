WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        DENSE_RANK() OVER (ORDER BY p.Score DESC) AS ScoreRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year') AND
        p.PostTypeId = 1 
), 
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId 
    GROUP BY 
        u.Id
),
HighScoreUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        ub.BadgeCount
    FROM 
        Users u
    JOIN 
        UserBadges ub ON u.Id = ub.UserId
    WHERE 
        u.Reputation > 1000 
),
PostComments AS (
    SELECT 
        pc.PostId,
        COUNT(pc.Id) AS CommentCount
    FROM 
        Comments pc
    GROUP BY 
        pc.PostId
),
RecentInteractions AS (
    SELECT 
        p.Id AS PostId,
        COUNT(v.Id) FILTER (WHERE vt.Name = 'UpMod') AS UpVotes,
        COUNT(v.Id) FILTER (WHERE vt.Name = 'DownMod') AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id
    WHERE 
        p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '3 days')
    GROUP BY 
        p.Id
)

SELECT 
    p.PostId,
    p.Title,
    p.CreationDate,
    p.Score,
    p.ViewCount,
    p.AnswerCount,
    COALESCE(pc.CommentCount, 0) AS TotalComments,
    u.DisplayName,
    u.Reputation,
    u.BadgeCount,
    r.UpVotes,
    r.DownVotes,
    CASE 
        WHEN p.Score >= 10 THEN 'Hot'
        WHEN p.Score < 0 THEN 'Needs Attention'
        ELSE 'Normal' 
    END AS PostStatus
FROM 
    RankedPosts p
JOIN 
    HighScoreUsers u ON p.PostRank = 1 AND p.OwnerUserId = u.Id
LEFT JOIN 
    PostComments pc ON p.PostId = pc.PostId
LEFT JOIN 
    RecentInteractions r ON p.PostId = r.PostId
WHERE 
    p.ViewCount > 100
ORDER BY 
    p.Score DESC, 
    p.CreationDate DESC
FETCH FIRST 50 ROWS ONLY;