
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS ViewRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, CURRENT_TIMESTAMP) 
        AND p.ViewCount IS NOT NULL
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.PostTypeId
),
FilteredPosts AS (
    SELECT 
        rp.PostId, 
        rp.Title, 
        rp.ViewCount, 
        rp.Score, 
        rp.CommentCount,
        rp.UpVoteCount,
        rp.DownVoteCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.ViewRank <= 5 AND 
        (rp.Score - rp.DownVoteCount) > 0 
)
SELECT 
    fp.Title,
    fp.ViewCount,
    fp.Score,
    fp.CommentCount,
    CASE 
        WHEN fp.UpVoteCount IS NOT NULL THEN CAST(fp.UpVoteCount AS TEXT) 
        ELSE 'No Upvotes' 
    END AS UpVotes,
    CASE 
        WHEN fp.DownVoteCount IS NOT NULL THEN CAST(fp.DownVoteCount AS TEXT) 
        ELSE 'No Downvotes' 
    END AS DownVotes,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Tags t 
     JOIN STRING_SPLIT(p.Tags, ',') AS ts ON ts.value = t.TagName
     WHERE p.Id = ts.value) AS Tags
FROM 
    FilteredPosts fp
LEFT JOIN 
    Posts p ON p.Id = fp.PostId
ORDER BY 
    fp.ViewCount DESC;
