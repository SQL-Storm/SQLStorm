WITH RecursiveUserHierarchy AS (
    SELECT Id, DisplayName, Reputation, CreationDate,
           CAST(DisplayName AS VARCHAR(MAX)) AS FullDisplayName
    FROM Users
    WHERE Reputation > 1000
    UNION ALL
    SELECT u.Id, u.DisplayName, u.Reputation, u.CreationDate,
           CAST(c.FullDisplayName + ' | ' + u.DisplayName AS VARCHAR(MAX))
    FROM Users u
    INNER JOIN RecursiveUserHierarchy c ON c.Id = u.Id
    WHERE u.Reputation > 1000
),
PostActivity AS (
    SELECT p.Id AS PostId, p.Title, p.CreationDate, p.OwnerUserId,
           p.ViewCount, COUNT(c.Id) AS CommentCount,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RowNum
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.CreationDate, p.OwnerUserId, p.ViewCount
),
MostActiveUsers AS (
    SELECT OwnerUserId, COUNT(*) AS PostCount
    FROM Posts
    GROUP BY OwnerUserId
    ORDER BY PostCount DESC
    LIMIT 10
)
SELECT 
    u.Id AS UserId,
    u.DisplayName AS UserName,
    u.Reputation,
    u.FullDisplayName AS UserHierarchy,
    p.PostId,
    p.Title AS PostTitle,
    p.CreationDate AS PostCreationDate,
    p.ViewCount,
    p.CommentCount,
    COALESCE((SELECT AVG(Score) FROM Votes v WHERE v.PostId = p.PostId AND v.VoteTypeId = 2), 0) AS AvgUpvoteScore
FROM Users u
JOIN PostActivity p ON u.Id = p.OwnerUserId
JOIN MostActiveUsers mau ON mau.OwnerUserId = u.Id
LEFT JOIN Badges b ON b.UserId = u.Id
WHERE b.Class = 1 OR b.Class = 2  
ORDER BY u.Reputation DESC, p.ViewCount DESC
OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY;