WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        COALESCE(p.AcceptedAnswerId, 0) AS AcceptedAnswerId,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Tags t ON t.Id IN (SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><'))::int)
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, u.Id
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(p.ViewCount) AS TotalViews,
        SUM(p.Score) AS TotalScore
    FROM 
        Users u
    JOIN 
        Posts p ON p.OwnerUserId = u.Id
    WHERE 
        u.Reputation > 1000 
    GROUP BY 
        u.Id
),
AnswerStatistics AS (
    SELECT 
        p.AcceptedAnswerId,
        COUNT(*) AS AnswerCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 2 
    GROUP BY 
        p.AcceptedAnswerId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.OwnerDisplayName,
    rp.Tags,
    tu.DisplayName AS TopUserName,
    tu.TotalViews,
    tu.TotalScore,
    COALESCE(asn.AnswerCount, 0) AS AcceptedAnswerCount,
    CASE 
        WHEN rp.UserPostRank = 1 THEN 'Latest Post'
        ELSE 'Older Post'
    END AS PostStatus
FROM 
    RankedPosts rp
JOIN 
    TopUsers tu ON rp.OwnerUserId = tu.UserId
LEFT JOIN 
    AnswerStatistics asn ON rp.AcceptedAnswerId = asn.AcceptedAnswerId
ORDER BY 
    rp.CreationDate DESC, tu.TotalViews DESC
LIMIT 100;