
WITH RecursiveTagHierarchy AS (
    SELECT
        tg.Id AS TagId,
        tg.TagName,
        COALESCE(COUNT(pl.RelatedPostId), 0) AS RelatedPostCount
    FROM Tags tg
    LEFT JOIN PostLinks pl ON tg.Id = pl.RelatedPostId
    GROUP BY tg.Id, tg.TagName
),
UserActivity AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        SUM(COALESCE(ph.RevisionGUID, 0)) AS TotalEdits,
        SUM(CASE WHEN p.OwnerUserId IS NOT NULL AND ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS TotalClosures, 
        COUNT(DISTINCT p.Id) AS PostCount
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    GROUP BY u.Id, u.DisplayName
),
PostInteraction AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes, 
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes 
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id, p.Title
),
AggregatePostMetrics AS (
    SELECT
        p.PostId,
        p.Title,
        p.CommentCount,
        p.UpVotes,
        p.DownVotes,
        RANK() OVER (ORDER BY (p.UpVotes - p.DownVotes) DESC) AS PostRank,
        (SELECT COUNT(*) FROM PostHistory WHERE PostId = p.PostId AND PostHistoryTypeId IN (10, 11)) AS ClosureCount
    FROM PostInteraction p
)
SELECT
    ta.TagName AS Tag,
    u.DisplayName AS User,
    u.TotalEdits,
    u.TotalClosures,
    pm.Title AS PostTitle,
    pm.CommentCount,
    pm.UpVotes,
    pm.DownVotes,
    pm.PostRank,
    pm.ClosureCount
FROM RecursiveTagHierarchy ta
JOIN AggregatePostMetrics pm ON ta.TagId = pm.PostId
JOIN UserActivity u ON pm.PostId IN (SELECT DISTINCT p.Id FROM Posts p WHERE p.OwnerUserId = u.UserId)
WHERE (u.TotalClosures > 0 OR u.PostCount > 5)
ORDER BY u.TotalEdits DESC, pm.UpVotes DESC;
