
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS rn,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate > (TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year') 
        AND p.Score IS NOT NULL
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.UpVoteCount,
        rp.DownVoteCount,
        CASE 
            WHEN rp.Score >= 100 THEN 'High'
            WHEN rp.Score BETWEEN 50 AND 99 THEN 'Medium'
            ELSE 'Low'
        END AS Popularity
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn <= 5
),
ClosedPosts AS (
    SELECT 
        ph.PostId, 
        ph.UserId,
        ph.CreationDate,
        ph.Comment
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10 
        AND ph.PostId IN (SELECT PostId FROM Posts WHERE PostTypeId = 1)
),
UniqueUsers AS (
    SELECT 
        DISTINCT u.Id AS UserId, 
        u.DisplayName
    FROM 
        Users u
    JOIN 
        Comments c ON c.UserId = u.Id 
    WHERE 
        c.CreationDate > (TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days')
),
PostAnalysis AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.Popularity,
        cp.Comment AS ClosureComment,
        CASE 
            WHEN cp.UserId IS NOT NULL THEN 'Closed by User'
            ELSE 'Open'
        END AS Status,
        ARRAY_AGG(DISTINCT uu.DisplayName) AS CommentingUsers
    FROM 
        TopPosts tp
    LEFT JOIN 
        ClosedPosts cp ON tp.PostId = cp.PostId
    LEFT JOIN 
        UniqueUsers uu ON uu.UserId = cp.UserId
    GROUP BY 
        tp.PostId, tp.Title, tp.Popularity, cp.Comment
)
SELECT 
    pa.PostId,
    pa.Title,
    pa.Popularity,
    pa.Status,
    pa.ClosureComment,
    COALESCE(pa.CommentingUsers, ARRAY[]::TEXT[]) AS CommentingUsers
FROM 
    PostAnalysis pa
ORDER BY 
    pa.Popularity DESC, 
    pa.Status ASC;
