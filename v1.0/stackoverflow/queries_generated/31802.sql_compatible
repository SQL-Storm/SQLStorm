
WITH RecursiveUserVotes AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        V.PostId,
        V.CreationDate,
        V.VoteTypeId,
        ROW_NUMBER() OVER (PARTITION BY U.Id ORDER BY V.CreationDate DESC) AS VoteRank
    FROM 
        Users U
    JOIN 
        Votes V ON U.Id = V.UserId
), 
PostStats AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ANSWERCount,
        P.CreationDate,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount
    FROM 
        Posts P
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    GROUP BY 
        P.Id, P.Title, P.CreationDate, P.ANSWERCount
),
UserBadges AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        STRING_AGG(B.Name, ', ') AS BadgeNames
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
)
SELECT 
    U.DisplayName,
    U.Reputation,
    U.CreationDate AS UserCreationDate,
    U.CommentsCount,
    COALESCE(UB.BadgeCount, 0) AS BadgeCount,
    COALESCE(UB.BadgeNames, 'No Badges') AS BadgeNames,
    PS.PostId,
    PS.Title AS PostTitle,
    PS.UpVotes,
    PS.DownVotes,
    PS.CommentCount,
    PS.CreationDate AS PostCreationDate,
    COALESCE(ROW_NUMBER() OVER (PARTITION BY PS.PostId ORDER BY UV.CreationDate DESC), 0) AS UserVoteRank
FROM 
    Users U
LEFT JOIN 
    UserBadges UB ON U.Id = UB.UserId
LEFT JOIN 
    PostStats PS ON U.Id = PS.PostId
LEFT JOIN 
    RecursiveUserVotes UV ON U.Id = UV.UserId AND PS.PostId = UV.PostId
WHERE 
    U.Reputation > 100 AND
    PS.CommentCount > 5
ORDER BY 
    U.Reputation DESC, 
    PS.UpVotes DESC;
