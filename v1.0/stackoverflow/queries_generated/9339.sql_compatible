
WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        U.DisplayName AS OwnerName,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.Score DESC, P.CreationDate DESC) AS Rank,
        T.TagName,
        PT.Name AS PostTypeName
    FROM 
        Posts P
    JOIN 
        Users U ON P.OwnerUserId = U.Id
    JOIN 
        (SELECT value AS TagName FROM STRING_SPLIT(P.Tags, ',')) AS T ON T.TagName = T.TagName
    JOIN 
        PostTypes PT ON P.PostTypeId = PT.Id
    WHERE 
        P.Score > 0
),
PopularPosts AS (
    SELECT 
        RP.PostId,
        RP.Title,
        RP.OwnerName,
        RP.CreationDate,
        RP.Score,
        RP.ViewCount,
        RP.TagName,
        RP.PostTypeName
    FROM 
        RankedPosts RP
    WHERE 
        RP.Rank <= 3
),
PostInteraction AS (
    SELECT 
        P.PostId,
        COUNT(C.Id) AS CommentCount,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount
    FROM 
        PopularPosts P
    LEFT JOIN 
        Comments C ON P.PostId = C.PostId
    LEFT JOIN 
        Votes V ON P.PostId = V.PostId
    GROUP BY 
        P.PostId
)
SELECT 
    PP.PostId,
    PP.Title,
    PP.OwnerName,
    PP.CreationDate,
    PP.Score,
    PP.ViewCount,
    PP.TagName,
    PP.PostTypeName,
    PI.CommentCount,
    PI.UpVoteCount,
    PI.DownVoteCount
FROM 
    PopularPosts PP
JOIN 
    PostInteraction PI ON PP.PostId = PI.PostId
ORDER BY 
    PP.Score DESC, PI.UpVoteCount DESC;
