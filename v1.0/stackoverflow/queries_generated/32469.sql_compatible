
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        p.OwnerUserId,
        0 AS Depth
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL  
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.OwnerUserId,
        r.Depth + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON v.UserId = u.Id AND v.VoteTypeId IN (8, 9)  
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes,
        COALESCE(SUM(CASE WHEN c.Id IS NOT NULL THEN 1 ELSE 0 END), 0) AS CommentCount,
        COALESCE(SUM(CASE WHEN ph.Id IS NOT NULL THEN 1 ELSE 0 END), 0) AS EditCount
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON v.PostId = p.Id 
    LEFT JOIN 
        Comments c ON c.PostId = p.Id 
    LEFT JOIN 
        PostHistory ph ON ph.PostId = p.Id AND ph.PostHistoryTypeId IN (4, 5)  
    GROUP BY 
        p.Id, p.Title, p.OwnerUserId
)
SELECT 
    r.PostId,
    r.Title,
    u.DisplayName AS Owner,
    u.Reputation,
    u.TotalBounty,
    ps.Upvotes,
    ps.Downvotes,
    ps.CommentCount,
    ps.EditCount,
    r.Depth
FROM 
    RecursivePostHierarchy r
JOIN 
    Posts p ON r.PostId = p.Id
JOIN 
    UserReputation u ON p.OwnerUserId = u.UserId
JOIN 
    PostStatistics ps ON r.PostId = ps.PostId
WHERE 
    r.Depth < 3  
ORDER BY 
    ps.Upvotes DESC, ps.CommentCount DESC
LIMIT 100 OFFSET 0;
