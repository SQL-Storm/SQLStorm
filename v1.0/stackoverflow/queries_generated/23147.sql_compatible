
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) OVER (PARTITION BY p.Id) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) OVER (PARTITION BY p.Id) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
),

TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.OwnerUserId,
        rp.UpVotes,
        rp.DownVotes,
        CASE 
            WHEN rp.Rank <= 10 THEN 'Top 10'
            ELSE 'Others'
        END AS PostRankCategory
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 50
)

SELECT 
    tp.PostId,
    tp.Title,
    tp.CreationDate,
    tp.Score,
    tp.OwnerUserId,
    tp.UpVotes,
    tp.DownVotes,
    COALESCE(u.DisplayName, 'Deleted User') AS OwnerDisplayName,
    (SELECT COUNT(*) 
     FROM Comments c 
     WHERE c.PostId = tp.PostId) AS CommentCount,
    (SELECT STRING_AGG(t.TagName, ', ') 
     FROM Tags t 
     JOIN UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS tag ON t.TagName = tag
     WHERE p.Id = tp.PostId) AS RelatedTags,
    CASE 
        WHEN tp.Score <= 0 THEN 'Needs Attention'
        WHEN tp.UpVotes IS NULL OR tp.DownVotes IS NULL THEN 'Vote Data Missing'
        ELSE 'Active Post'
    END AS PostHealth
FROM 
    TopPosts tp
LEFT JOIN 
    Users u ON tp.OwnerUserId = u.Id
ORDER BY 
    tp.Score DESC, 
    tp.CreationDate DESC;
