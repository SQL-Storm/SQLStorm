
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        COALESCE(u.DisplayName, 'Deleted User') AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS ClosedDate,
        C.Name AS CloseReason
    FROM 
        PostHistory ph
    JOIN CloseReasonTypes C ON CAST(ph.Comment AS INT) = C.Id 
    WHERE 
        ph.PostHistoryTypeId = 10
),
CommentStats AS (
    SELECT 
        c.PostId,
        COUNT(*) AS TotalComments,
        AVG(c.Score) AS AvgCommentScore
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
UserBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeNames,
        COUNT(*) AS BadgeCount
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.ViewCount,
    rp.Score,
    rp.OwnerDisplayName,
    rp.Rank,
    COALESCE(cp.ClosedDate, 'No Closing Date') AS ClosedDate,
    COALESCE(cp.CloseReason, 'N/A') AS CloseReason,
    COALESCE(cs.TotalComments, 0) AS TotalComments,
    COALESCE(cs.AvgCommentScore, 0) AS AvgCommentScore,
    COALESCE(ub.BadgeNames, 'No Badges') AS BadgeNames,
    COALESCE(ub.BadgeCount, 0) AS BadgeCount,
    CASE 
        WHEN rp.Score IS NULL THEN 'Unscored'
        WHEN rp.Score > 0 THEN 'Positive'
        WHEN rp.Score < 0 THEN 'Negative'
        ELSE 'Neutral'
    END AS ScoreCategory
FROM 
    RankedPosts rp
LEFT JOIN ClosedPosts cp ON rp.PostId = cp.PostId
LEFT JOIN CommentStats cs ON rp.PostId = cs.PostId
LEFT JOIN UserBadges ub ON rp.OwnerUserId = ub.UserId
WHERE 
    rp.Rank = 1
ORDER BY 
    rp.ViewCount DESC;
