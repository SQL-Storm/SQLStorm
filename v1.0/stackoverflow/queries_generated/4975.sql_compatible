
WITH UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        ROW_NUMBER() OVER (ORDER BY COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) DESC) AS VoteRank
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        u.Reputation > 0
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
TopUsers AS (
    SELECT 
        UserId, 
        DisplayName, 
        Reputation, 
        UpVotes, 
        DownVotes, 
        PostCount, 
        TotalScore
    FROM 
        UserStats
    WHERE 
        VoteRank <= 10
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(pt.PostId) AS TagPostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::text[])
    JOIN 
        PostLinks pl ON p.Id = pl.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 month'
    GROUP BY 
        t.TagName
    ORDER BY 
        TagPostCount DESC
    LIMIT 5
)
SELECT 
    tu.DisplayName,
    tu.Reputation,
    tu.UpVotes,
    tu.DownVotes,
    tu.PostCount,
    tu.TotalScore,
    CASE 
        WHEN tu.Reputation < 100 THEN 'Beginner'
        WHEN tu.Reputation BETWEEN 100 AND 1000 THEN 'Intermediate'
        ELSE 'Expert' 
    END AS UserLevel,
    ARRAY_AGG(pt.TagName) AS RelatedTags
FROM 
    TopUsers tu
LEFT JOIN 
    PopularTags pt ON TRUE
GROUP BY 
    tu.DisplayName, tu.Reputation, tu.UpVotes, tu.DownVotes, tu.PostCount, tu.TotalScore
ORDER BY 
    tu.TotalScore DESC;
