
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount, p.CreationDate, p.OwnerUserId, p.PostTypeId
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Score,
        ViewCount,
        CreationDate,
        OwnerUserId,
        CommentCount
    FROM 
        RankedPosts
    WHERE 
        Rank <= 10
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
CommentStats AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS TotalComments,
        MAX(c.CreationDate) AS LastCommentDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id
)

SELECT 
    pp.Title,
    pp.Score,
    pp.ViewCount,
    pp.CreationDate,
    us.DisplayName AS PostOwner,
    us.UpVotes,
    us.DownVotes,
    cs.TotalComments,
    cs.LastCommentDate,
    CASE 
        WHEN cs.TotalComments > 10 THEN 'Popular' 
        ELSE 'Less active' 
    END AS CommentActivity,
    pht.Name AS PostType
FROM 
    TopPosts pp
JOIN 
    UserStats us ON pp.OwnerUserId = us.UserId
LEFT JOIN 
    CommentStats cs ON pp.PostId = cs.PostId
LEFT JOIN 
    PostTypes pht ON pp.PostTypeId = pht.Id
ORDER BY 
    pp.Score DESC, pp.ViewCount DESC;
