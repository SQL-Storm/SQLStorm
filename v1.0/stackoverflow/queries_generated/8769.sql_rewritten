WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        u.DisplayName AS OwnerDisplayName,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
), 
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(pt.PostId) AS TagUsage
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, '><')::int[])
    JOIN 
        PostLinks pl ON pl.PostId = p.Id OR pl.RelatedPostId = p.Id
    GROUP BY 
        t.TagName
    ORDER BY 
        TagUsage DESC
    LIMIT 5
), 
RecentBadges AS (
    SELECT 
        b.UserId,
        b.Name AS BadgeName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Badges b
    WHERE 
        b.Date >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
    GROUP BY 
        b.UserId, b.Name
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    pt.TagName,
    rb.BadgeName,
    rb.BadgeCount
FROM 
    RankedPosts rp
LEFT JOIN 
    PopularTags pt ON rp.PostId IN (SELECT PostId FROM Posts WHERE Tags LIKE '%' || pt.TagName || '%')
LEFT JOIN 
    RecentBadges rb ON rb.UserId = rp.OwnerUserId
WHERE 
    rp.Rank <= 10
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate DESC;