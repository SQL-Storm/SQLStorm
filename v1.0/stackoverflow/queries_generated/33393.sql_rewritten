WITH RecursivePostHierarchy AS (
    SELECT
        Id,
        ParentId,
        Title,
        CreationDate,
        OwnerUserId,
        0 AS Level
    FROM
        Posts
    WHERE
        ParentId IS NULL

    UNION ALL

    SELECT
        p.Id,
        p.ParentId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        ph.Level + 1
    FROM
        Posts p
    INNER JOIN RecursivePostHierarchy ph ON p.ParentId = ph.Id
),
PostActivity AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.UserId) AS VoteCount,
        MAX(ph.CreationDate) AS LastActivity,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        SUM(CASE WHEN b.Name IS NOT NULL THEN 1 ELSE 0 END) AS BadgeCount
    FROM
        Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Badges b ON p.OwnerUserId = b.UserId
    GROUP BY
        p.Id, p.Title
),
PostStatistics AS (
    SELECT
        p.PostId,
        p.Title,
        p.CommentCount,
        p.VoteCount,
        p.LastActivity,
        p.UpVotes,
        p.DownVotes,
        ph.Level AS HierarchyLevel,
        COALESCE(u.DisplayName, 'Anonymous') AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY ph.Level ORDER BY p.UpVotes DESC) AS Rank
    FROM
        PostActivity p
    LEFT JOIN Users u ON p.PostId = u.Id
    LEFT JOIN RecursivePostHierarchy ph ON p.PostId = ph.Id
)

SELECT
    ps.OwnerDisplayName,
    ps.Title,
    ps.CommentCount,
    ps.VoteCount,
    ps.LastActivity,
    ps.UpVotes,
    ps.DownVotes,
    ps.HierarchyLevel,
    ps.Rank
FROM
    PostStatistics ps
WHERE
    ps.LastActivity >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month'
    AND ps.UpVotes > ps.DownVotes
ORDER BY
    ps.HierarchyLevel, ps.Rank;