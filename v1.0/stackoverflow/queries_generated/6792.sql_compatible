
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        UNNEST(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><')) AS t(TagName)
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 month' 
    GROUP BY 
        p.Id, u.DisplayName, p.Title, p.CreationDate, p.Score, p.ViewCount
), 
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.OwnerDisplayName,
        rp.Score,
        rp.ViewCount,
        rp.Tags
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5
), 
PostDetails AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.CreationDate,
        tp.OwnerDisplayName,
        tp.Score,
        tp.ViewCount,
        tp.Tags,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        COALESCE(pb.FavoriteCount, 0) AS FavoriteCount
    FROM 
        TopPosts tp
    LEFT JOIN 
        (SELECT 
            PostId, COUNT(*) AS CommentCount 
         FROM 
            Comments 
         GROUP BY 
            PostId) pc ON tp.PostId = pc.PostId
    LEFT JOIN 
        (SELECT 
            PostId, COUNT(*) AS FavoriteCount 
         FROM 
            Posts 
         WHERE 
            FavoriteCount IS NOT NULL 
         GROUP BY 
            PostId) pb ON tp.PostId = pb.PostId
)
SELECT 
    pd.Title,
    pd.CreationDate,
    pd.OwnerDisplayName,
    pd.Score,
    pd.ViewCount,
    pd.Tags,
    pd.CommentCount,
    pd.FavoriteCount
FROM 
    PostDetails pd
ORDER BY 
    pd.Score DESC, pd.ViewCount DESC;
