WITH RECURSIVE UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        p.CreationDate AS PostDate,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        u.Reputation > 1000 
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation, p.CreationDate
),
PostSummary AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS CloseCount, 
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
    GROUP BY 
        p.Id, p.Title
),
RankedPosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CommentCount,
        ps.CloseCount,
        RANK() OVER (ORDER BY ps.CommentCount DESC, ps.CloseCount ASC) AS Rank
    FROM 
        PostSummary ps
),
TopPosts AS (
    SELECT 
        rp.*,
        CASE 
            WHEN rp.Rank <= 10 THEN 'Top 10 Posts'
            ELSE 'Other Posts'
        END AS PostRankGroup
    FROM 
        RankedPosts rp
)

SELECT 
    ua.UserId,
    ua.DisplayName,
    ua.Reputation,
    ua.PostCount,
    ua.UpVotes,
    ua.DownVotes,
    tp.Title,
    tp.CommentCount,
    tp.CloseCount,
    tp.PostRankGroup
FROM 
    UserActivity ua
LEFT JOIN 
    TopPosts tp ON ua.PostCount > 0
WHERE 
    EXISTS (
        SELECT 1
        FROM Posts p
        WHERE p.OwnerUserId = ua.UserId AND p.Score > 0
    )
ORDER BY 
    ua.Reputation DESC, 
    tp.CommentCount DESC NULLS LAST;