
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        COALESCE(ah.AnswerCount, 0) AS AnswerCount,
        COALESCE(ch.CommentCount, 0) AS CommentCount,
        RANK() OVER (ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN (
        SELECT 
            ParentId,
            COUNT(*) AS AnswerCount
        FROM 
            Posts
        WHERE 
            PostTypeId = 2
        GROUP BY 
            ParentId
    ) ah ON p.Id = ah.ParentId
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments
        GROUP BY 
            PostId
    ) ch ON p.Id = ch.PostId
    WHERE 
        p.PostTypeId = 1 AND  
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'  
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.ViewCount,
    rp.CreationDate,
    rp.Score,
    rp.OwnerDisplayName,
    rp.AnswerCount,
    rp.CommentCount,
    CASE 
        WHEN rp.Score >= 10 THEN 'High Score'
        WHEN rp.Score BETWEEN 5 AND 9 THEN 'Moderate Score'
        ELSE 'Low Score'
    END AS ScoreCategory,
    SUBSTRING(rp.Title, '([A-Za-z0-9 _-]+)') AS SimplifiedTitle, 
    STRING_AGG(t.TagName, ', ') AS TagsList
FROM 
    RankedPosts rp
LEFT JOIN 
    Posts p ON rp.PostId = p.Id
LEFT JOIN 
    LATERAL UNNEST(string_to_array(p.Tags, ',')) AS tag_name ON TRUE
LEFT JOIN 
    Tags t ON t.TagName = TRIM(tag_name)
GROUP BY 
    rp.PostId, rp.Title, rp.ViewCount, rp.CreationDate, rp.Score, 
    rp.OwnerDisplayName, rp.AnswerCount, rp.CommentCount, rp.PostRank
ORDER BY 
    rp.PostRank
LIMIT 50;
