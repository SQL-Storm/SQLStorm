WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COUNT(v.Id) AS VoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (2, 3) 
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.Score, p.CreationDate
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeBadges,
        SUM(u.Reputation) AS TotalReputation
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    u.DisplayName,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    ub.TotalReputation,
    COUNT(DISTINCT rp.PostId) AS TotalPosts,
    AVG(rp.ViewCount) AS AvgViews,
    AVG(CASE WHEN rp.Rank = 1 THEN rp.Score END) AS AvgTopScore
FROM 
    Users u
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
LEFT JOIN 
    RankedPosts rp ON u.Id = rp.OwnerUserId
WHERE 
    (ub.TotalReputation IS NOT NULL AND ub.TotalReputation > 1000) OR 
    (SELECT COUNT(*) FROM Posts p WHERE p.OwnerUserId = u.Id) > 5 
GROUP BY 
    u.Id, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges, ub.TotalReputation
HAVING 
    COUNT(DISTINCT rp.PostId) > 10 
ORDER BY 
    TotalReputation DESC, AvgViews DESC;