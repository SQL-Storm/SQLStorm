
WITH UserVoteSummary AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes,
        SUM(CASE WHEN v.VoteTypeId IN (2, 3) THEN 1 ELSE 0 END) AS TotalVotes
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RecentPostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate > CURRENT_TIMESTAMP - INTERVAL '30 days'
),
PostDetails AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        COALESCE(vs.UpVotes, 0) AS UpVotes,
        COALESCE(vs.DownVotes, 0) AS DownVotes,
        COALESCE(ph.LastEdit, 'No Edits') AS LastEdit,
        COUNT(DISTINCT c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        UserVoteSummary vs ON p.OwnerUserId = vs.UserId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT 
            PostId, MAX(CreationDate) AS LastEdit 
        FROM 
            PostHistory 
        WHERE 
            PostHistoryTypeId IN (4, 5) 
        GROUP BY 
            PostId
    ) ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id, p.Title, p.ViewCount, vs.UpVotes, vs.DownVotes, ph.LastEdit
)
SELECT 
    p.Id,
    p.Title,
    p.ViewCount,
    p.UpVotes,
    p.DownVotes,
    r.RecentPostRank,
    u.DisplayName AS OwnerDisplayName
FROM 
    PostDetails p
JOIN 
    RecentPosts r ON p.Id = r.PostId
JOIN 
    Users u ON p.OwnerUserId = u.Id
WHERE 
    p.UpVotes > p.DownVotes
ORDER BY 
    p.ViewCount DESC, p.UpVotes DESC
LIMIT 10;
