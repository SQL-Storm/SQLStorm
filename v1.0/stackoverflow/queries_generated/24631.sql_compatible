
WITH RECURSIVE UserBadgeStats AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        AVG(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        AVG(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        AVG(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Users U
    LEFT JOIN Badges B ON U.Id = B.UserId
    GROUP BY U.Id
),
PostStats AS (
    SELECT 
        P.OwnerUserId,
        COUNT(P.Id) AS PostCount,
        COUNT(CASE WHEN P.PostTypeId = 1 THEN 1 END) AS QuestionCount,
        COUNT(CASE WHEN P.PostTypeId = 2 THEN 1 END) AS AnswerCount,
        SUM(P.Score) AS TotalScore,
        SUM(COALESCE(P.ViewCount, 0)) AS TotalViewCount
    FROM Posts P
    GROUP BY P.OwnerUserId
),
UserPerformance AS (
    SELECT 
        U.Id AS UserId,
        COALESCE(UB.BadgeCount, 0) AS BadgeCount,
        COALESCE(PS.PostCount, 0) AS PostCount,
        COALESCE(PS.QuestionCount, 0) AS QuestionCount,
        COALESCE(PS.AnswerCount, 0) AS AnswerCount,
        COALESCE(PS.TotalScore, 0) AS TotalScore,
        COALESCE(PS.TotalViewCount, 0) AS TotalViewCount
    FROM Users U
    LEFT JOIN UserBadgeStats UB ON U.Id = UB.UserId
    LEFT JOIN PostStats PS ON U.Id = PS.OwnerUserId
),
RankedPerformance AS (
    SELECT 
        *,
        RANK() OVER (ORDER BY TotalScore DESC, BadgeCount DESC, PostCount DESC) AS PerformanceRank
    FROM UserPerformance
)
SELECT 
    U.DisplayName,
    UP.BadgeCount,
    UP.PostCount,
    UP.QuestionCount,
    UP.AnswerCount,
    UP.TotalScore,
    UP.TotalViewCount,
    RP.PerformanceRank,
    CASE 
        WHEN RP.PerformanceRank <= 10 THEN 'Top 10 User'
        WHEN RP.PerformanceRank <= 100 THEN 'Top 100 User'
        ELSE 'User'
    END AS PerformanceCategory,
    (
        SELECT STRING_AGG(DISTINCT T.TagName, ', ') 
        FROM Posts P 
        JOIN Tags T ON POSITION(',' || TRIM(T.TagName) || ',' IN ',' || P.Tags || ',') > 0
        WHERE P.OwnerUserId = U.Id AND P.PostTypeId = 1
    ) AS AssociatedTags
FROM RankedPerformance RP
JOIN Users U ON RP.UserId = U.Id
ORDER BY RP.PerformanceRank
LIMIT 50;
