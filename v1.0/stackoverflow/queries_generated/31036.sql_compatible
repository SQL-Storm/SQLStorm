
WITH RecursivePostHierarchy AS (
    SELECT Id, Title, ParentId, CreationDate, Score, OwnerUserId, 0 AS Level
    FROM Posts
    WHERE ParentId IS NULL
    UNION ALL
    SELECT p.Id, p.Title, p.ParentId, p.CreationDate, p.Score, p.OwnerUserId, r.Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.Id
),
PostStats AS (
    SELECT 
        p.Id,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBountyAmount,
        ROW_NUMBER() OVER(PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9) 
    GROUP BY p.Id, p.Title, p.OwnerUserId
),
PopularPosts AS (
    SELECT 
        ps.Id,
        ps.Title,
        rph.Level,
        rph.CreationDate,
        ps.CommentCount,
        ps.TotalBountyAmount
    FROM PostStats ps
    JOIN RecursivePostHierarchy rph ON ps.Id = rph.Id
    WHERE ps.CommentCount > 5 OR ps.TotalBountyAmount > 0
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS Badges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.Reputation
)
SELECT 
    pp.Title,
    pp.CommentCount,
    pp.TotalBountyAmount,
    ur.Reputation,
    CASE 
        WHEN ur.Reputation > 1000 THEN 'Expert'
        WHEN ur.Reputation BETWEEN 500 AND 1000 THEN 'Intermediate'
        ELSE 'Novice' 
    END AS UserLevel,
    ur.Badges
FROM PopularPosts pp
JOIN UserReputation ur ON pp.OwnerUserId = ur.UserId
ORDER BY pp.TotalBountyAmount DESC, pp.CommentCount DESC;
