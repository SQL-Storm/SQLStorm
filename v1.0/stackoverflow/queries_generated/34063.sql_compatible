
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE
        p.CreationDate >= DATEADD(month, -6, CURRENT_TIMESTAMP)
),
MostActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvoteCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName
    HAVING 
        COUNT(DISTINCT p.Id) > 5
),
ClosedPostReasons AS (
    SELECT 
        ph.PostId,
        STRING_AGG(cr.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes cr ON CAST(ph.Comment AS INT) = cr.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        ph.PostId
),
PostStatistics AS (
    SELECT
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Score,
        COALESCE(cr.CloseReasons, 'None') AS CloseReasons,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS CloseCount
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Comments c ON c.PostId = rp.PostId
    LEFT JOIN 
        PostHistory ph ON ph.PostId = rp.PostId
    LEFT JOIN 
        ClosedPostReasons cr ON cr.PostId = rp.PostId
    GROUP BY 
        rp.PostId, rp.Title, rp.CreationDate, rp.ViewCount, rp.Score, cr.CloseReasons
),
AggregateResults AS (
    SELECT 
        MAX(Score) AS MaxScore,
        AVG(ViewCount) AS AvgViewCount,
        SUM(CASE WHEN CloseCount > 0 THEN 1 ELSE 0 END) AS TotalClosedPosts
    FROM 
        PostStatistics
)

SELECT 
    ps.PostId,
    ps.Title,
    ps.ViewCount,
    ps.Score,
    ps.CommentCount,
    ps.CloseReasons,
    CASE 
        WHEN up.PostCount IS NOT NULL THEN 'Active User'
        ELSE 'Inactive User' 
    END AS UserActivity,
    ar.MaxScore,
    ar.AvgViewCount,
    ar.TotalClosedPosts
FROM 
    PostStatistics ps
LEFT JOIN 
    MostActiveUsers up ON up.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = ps.PostId LIMIT 1)
CROSS JOIN 
    AggregateResults ar
WHERE 
    ps.Rank <= 10 
ORDER BY 
    ps.ViewCount DESC, ps.Score DESC;
