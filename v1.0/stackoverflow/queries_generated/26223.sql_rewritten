WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
),
TagStatistics AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        COUNT(DISTINCT c.Id) AS CommentCount,
        AVG(u.Reputation) AS AverageUserReputation
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'  
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    GROUP BY 
        t.TagName
),
PostHistoryActions AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 END) AS CloseActions,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (12, 13) THEN 1 END) AS DeleteActions
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
FinalBenchmark AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerDisplayName,
        rp.OwnerReputation,
        rp.ViewCount,
        rp.Score,
        ts.PostCount,
        ts.CommentCount,
        ts.AverageUserReputation,
        pha.CloseActions,
        pha.DeleteActions
    FROM 
        RankedPosts rp
    LEFT JOIN 
        TagStatistics ts ON ts.PostCount > 0
    LEFT JOIN 
        PostHistoryActions pha ON rp.PostId = pha.PostId
)
SELECT 
    PostId,
    Title,
    OwnerDisplayName,
    OwnerReputation,
    ViewCount,
    Score,
    PostCount,
    CommentCount,
    AverageUserReputation,
    CloseActions,
    DeleteActions
FROM 
    FinalBenchmark
WHERE 
    PostRank = 1  
ORDER BY 
    Score DESC, ViewCount DESC
LIMIT 10;