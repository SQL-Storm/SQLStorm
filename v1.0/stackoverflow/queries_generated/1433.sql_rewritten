WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        U.DisplayName AS Author,
        P.Score,
        ROW_NUMBER() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC) AS Rank
    FROM 
        Posts P
    JOIN Users U ON P.OwnerUserId = U.Id
    WHERE 
        P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month'
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Author,
        CreationDate,
        Score
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
),
PostComments AS (
    SELECT 
        C.PostId,
        COUNT(*) AS CommentCount
    FROM 
        Comments C
    GROUP BY 
        C.PostId
),
PostDetails AS (
    SELECT 
        TP.PostId,
        TP.Title,
        TP.Author,
        TP.CreationDate,
        TP.Score,
        COALESCE(PC.CommentCount, 0) AS CommentCount
    FROM 
        TopPosts TP
    LEFT JOIN PostComments PC ON TP.PostId = PC.PostId
),
PostVotes AS (
    SELECT 
        V.PostId,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes V
    GROUP BY 
        V.PostId
)
SELECT 
    PD.Title,
    PD.Author,
    PD.CreationDate,
    PD.Score,
    PD.CommentCount,
    COALESCE(PV.UpVotes, 0) AS UpVotes,
    COALESCE(PV.DownVotes, 0) AS DownVotes,
    PTags.Tags
FROM 
    PostDetails PD
LEFT JOIN PostVotes PV ON PD.PostId = PV.PostId
LEFT JOIN (
    SELECT 
        PostId,
        STRING_AGG(TagName, ', ') AS Tags
    FROM 
        Tags T
    JOIN (
        SELECT 
            UNNEST(string_to_array(Tags, ',')) AS TagName,
            P.Id AS PostId
        FROM 
            Posts P
    ) PostTags ON T.TagName = TRIM(PostTags.TagName)
    GROUP BY 
        PostId
) PTags ON PD.PostId = PTags.PostId
ORDER BY 
    PD.Score DESC,
    PD.CreationDate DESC;