
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        p.Body,
        u.DisplayName AS OwnerDisplayName,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS TagRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= DATEADD(YEAR, -1, CURRENT_TIMESTAMP) 
),

TagAggregates AS (
    SELECT 
        STRING_AGG(DISTINCT TRIM(SUBSTRING(t.TagName, 2, LENGTH(t.TagName) - 2)), ', ') AS UniqueTags,
        COUNT(DISTINCT rp.PostId) AS PostCount,
        SUM(rp.ViewCount) AS TotalViews,
        AVG(rp.Score) AS AverageScore,
        MAX(rp.CommentCount) AS MaxComments,
        MIN(rp.CreationDate) AS EarliestPost
    FROM 
        RankedPosts rp
    JOIN 
        UNNEST(string_to_array(rp.Tags, ',')) AS t ON t = ANY(string_to_array(rp.Tags, ','))
    GROUP BY 
        rp.Tags
),

TopTags AS (
    SELECT 
        UniqueTags,
        PostCount,
        TotalViews,
        AverageScore,
        MaxComments,
        EarliestPost,
        ROW_NUMBER() OVER (ORDER BY PostCount DESC) AS Rank
    FROM 
        TagAggregates
)

SELECT 
    tt.UniqueTags,
    tt.PostCount,
    tt.TotalViews,
    tt.AverageScore,
    tt.MaxComments,
    tt.EarliestPost
FROM 
    TopTags tt
WHERE 
    tt.Rank <= 10 
ORDER BY 
    tt.PostCount DESC;
