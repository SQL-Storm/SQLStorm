WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        COUNT(c.Id) AS CommentCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id
), HighScorePosts AS (
    SELECT 
        rp.*,
        CASE 
            WHEN rp.Score IS NULL THEN 'No Score'
            WHEN rp.Score >= 100 THEN 'High Scorer'
            ELSE 'Regular'
        END AS ScoreCategory
    FROM RankedPosts rp
    WHERE rp.UserRank <= 5
), TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        AVG(hi.Score) AS AvgScore
    FROM Users u
    JOIN HighScorePosts hi ON u.Id = hi.PostOwnerUserId
    GROUP BY u.Id
)
SELECT 
    user.UserId,
    user.DisplayName,
    user.Reputation,
    user.AvgScore,
    hp.PostId,
    hp.Title,
    hp.CreationDate,
    hp.ViewCount,
    hp.CommentCount,
    hp.ScoreCategory
FROM TopUsers user
RIGHT JOIN HighScorePosts hp ON user.UserId = hp.OwnerUserId
WHERE user.Reputation IS NOT NULL 
ORDER BY user.AvgScore DESC, hp.CreationDate DESC
LIMIT 10
UNION 
SELECT 
    NULL AS UserId,
    'Deleted User' AS DisplayName,
    NULL AS Reputation,
    NULL AS AvgScore,
    p.Id AS PostId,
    p.Title,
    p.CreationDate,
    p.ViewCount,
    NULL AS CommentCount,
    'No Score' AS ScoreCategory
FROM Posts p
WHERE p.OwnerUserId IS NULL
ORDER BY p.CreationDate DESC
LIMIT 5;