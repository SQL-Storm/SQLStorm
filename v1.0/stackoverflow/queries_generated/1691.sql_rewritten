WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.CreationDate,
        p.LastActivityDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Tags, p.CreationDate, p.LastActivityDate, p.Score, p.OwnerUserId
), UserBadgeCounts AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Badges b
    GROUP BY 
        b.UserId
), UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        ub.BadgeCount,
        ub.HighestBadgeClass
    FROM 
        Users u
    LEFT JOIN 
        UserBadgeCounts ub ON u.Id = ub.UserId
)
SELECT 
    up.UserId,
    up.Reputation,
    up.BadgeCount,
    up.HighestBadgeClass,
    rp.PostId,
    rp.Title,
    rp.Tags,
    rp.CreationDate,
    rp.LastActivityDate,
    rp.Score,
    CASE 
        WHEN rp.CommentCount > 0 THEN 'Active'
        ELSE 'Inactive'
    END AS PostStatus
FROM 
    UserReputation up
INNER JOIN 
    RankedPosts rp ON up.UserId = rp.OwnerUserId
WHERE 
    up.Reputation > (SELECT AVG(Reputation) FROM Users)
    AND rp.rn <= 3 
ORDER BY 
    up.Reputation DESC, 
    rp.Score DESC;