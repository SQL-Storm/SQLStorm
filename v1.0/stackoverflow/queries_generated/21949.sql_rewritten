WITH UserVotes AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(DISTINCT P.Id) AS PostsVotedOn
    FROM 
        Users U
    LEFT JOIN 
        Votes V ON U.Id = V.UserId
    LEFT JOIN 
        Posts P ON V.PostId = P.Id
    GROUP BY 
        U.Id, U.DisplayName
),
TopBadgeHolders AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(B.Id) AS BadgeCount
    FROM 
        Users U
    INNER JOIN 
        Badges B ON U.Id = B.UserId
    WHERE 
        B.Class = 1 
    GROUP BY 
        U.Id, U.DisplayName
    HAVING 
        COUNT(B.Id) > 0 
),
PostStats AS (
    SELECT 
        P.Id,
        P.Title,
        P.Score,
        P.ViewCount,
        COALESCE(P.AcceptedAnswerId, -1) AS AcceptedAnswerId,
        ROW_NUMBER() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC) AS Rank
    FROM 
        Posts P
    WHERE 
        P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
)
SELECT 
    U.DisplayName AS User,
    U.Reputation,
    U.Votes.UpVotes,
    U.Votes.DownVotes,
    T.BadgeCount,
    P.Title AS TopPostTitle,
    P.Score AS TopPostScore,
    P.ViewCount AS TopPostViews
FROM 
    Users U
LEFT JOIN 
    (SELECT UserId, UpVotes, DownVotes FROM UserVotes) AS U.Votes ON U.Id = U.Votes.UserId
LEFT JOIN 
    (SELECT UserId, BadgeCount FROM TopBadgeHolders) AS T ON U.Id = T.UserId
LEFT JOIN 
    (SELECT Id, Title, Score, ViewCount, Rank FROM PostStats WHERE Rank <= 5) AS P ON U.Id = P.OwnerUserId
WHERE 
    U.Reputation > 100 AND 
    (U.Location IS NOT NULL OR U.WebsiteUrl IS NOT NULL) AND
    (U.AboutMe LIKE '%developer%' OR U.AboutMe IS NULL)
ORDER BY 
    U.Reputation DESC 
FETCH FIRST 10 ROW ONLY;