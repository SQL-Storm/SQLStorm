
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS ViewRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
    GROUP BY 
        p.Id, p.OwnerUserId, p.Title, p.CreationDate, p.ViewCount
),
PopularUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(rp.ViewCount) AS TotalViews,
        COUNT(DISTINCT rp.PostId) AS PostCount
    FROM 
        Users u
    JOIN 
        RankedPosts rp ON u.Id = rp.OwnerUserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName
    HAVING 
        COUNT(DISTINCT rp.PostId) > 5
),
ClosedPostHistory AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        COALESCE(MAX(ph.Comment), 'No close reason provided') AS CloseReason
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10  
    GROUP BY 
        ph.PostId, ph.CreationDate
),
FinalResult AS (
    SELECT 
        pu.DisplayName,
        pu.TotalViews,
        pu.PostCount,
        rp.Title,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        cph.CloseReason
    FROM 
        PopularUsers pu
    JOIN 
        RankedPosts rp ON pu.UserId = rp.OwnerUserId
    LEFT JOIN 
        ClosedPostHistory cph ON rp.PostId = cph.PostId
    ORDER BY 
        pu.TotalViews DESC
    LIMIT 50
)
SELECT 
    *,
    CASE 
        WHEN UpVotes > DownVotes THEN 'Positive'
        WHEN UpVotes < DownVotes THEN 'Negative'
        ELSE 'Neutral'
    END AS Sentiment
FROM 
    FinalResult
WHERE 
    CloseReason IS NOT NULL OR (CommentCount > 0)
ORDER BY 
    TotalViews DESC, PostCount DESC;
