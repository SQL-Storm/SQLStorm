WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers,
        MAX(p.CreationDate) AS LastPostDate
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    GROUP BY u.Id, u.DisplayName, u.Reputation
),

RecentActivity AS (
    SELECT 
        ua.UserId,
        ua.DisplayName,
        ROW_NUMBER() OVER (PARTITION BY ua.UserId ORDER BY ua.LastPostDate DESC) AS ActivityRank,
        ua.Reputation
    FROM UserActivity ua
    WHERE ua.TotalPosts > 0
),

TagsWithCounts AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT p.Id) AS TagPostCount
    FROM Tags t
    JOIN Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::int[])
    GROUP BY t.TagName
),

PopularTags AS (
    SELECT 
        TagName,
        TagPostCount,
        RANK() OVER (ORDER BY TagPostCount DESC) AS TagRank
    FROM TagsWithCounts
    WHERE TagPostCount > 10 
)

SELECT 
    ra.UserId,
    ra.DisplayName,
    ra.Reputation,
    COALESCE(pt.TagName, 'No Tags') AS PopularTag,
    COALESCE(pt.TagPostCount, 0) AS PopularTagCount,
    CASE
        WHEN ra.ActivityRank = 1 THEN 'Most Recent Activity'
        ELSE 'Earlier Activity'
    END AS ActivityStatus,
    CASE
        WHEN ra.Reputation > (SELECT AVG(Reputation) FROM Users) THEN 'Above Average'
        ELSE 'Below Average or Average'
    END AS ReputationStatus,
    (SELECT COUNT(*) FROM Votes v WHERE v.UserId = ra.UserId AND v.VoteTypeId IN (2, 3)) AS TotalVotes
FROM RecentActivity ra
LEFT JOIN PopularTags pt ON ra.Reputation BETWEEN 500 AND 1000 AND pt.TagRank <= 5
WHERE ra.ActivityRank <= 3
ORDER BY ra.Reputation DESC, ra.DisplayName ASC;