
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.UserId) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (2, 3) 
    WHERE 
        p.PostTypeId IN (1, 2) 
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreationDate, p.ViewCount, p.PostTypeId
),
TopPosts AS (
    SELECT 
        PostId, Title, Score, CreationDate, ViewCount, CommentCount, VoteCount
    FROM 
        RankedPosts
    WHERE 
        Rank <= 10
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    CASE 
        WHEN tp.VoteCount > 50 THEN 'Highly Engaged'
        WHEN tp.VoteCount BETWEEN 20 AND 50 THEN 'Moderately Engaged'
        ELSE 'Less Engaged'
    END AS EngagementLevel,
    TO_CHAR(tp.CreationDate, 'YYYY-MM-DD HH24:MI:SS') AS FormattedCreationDate,
    COALESCE(t.TagName, 'No Tags') AS PrimaryTag
FROM 
    TopPosts tp
LEFT JOIN 
    (SELECT 
        p.Id AS PostId, 
        STRING_AGG(t.TagName, ', ') AS TagName
     FROM 
        Posts p
     JOIN 
        (SELECT UNNEST(STRING_TO_ARRAY(p.Tags, ',')) AS TagName, p.Id AS PostId FROM Posts p) AS TagNames ON TRUE
     JOIN 
        Tags t ON t.Id = TagNames.TagName::int
     GROUP BY 
        p.Id) AS t ON tp.PostId = t.PostId
ORDER BY 
    tp.Score DESC, tp.CreationDate DESC;
