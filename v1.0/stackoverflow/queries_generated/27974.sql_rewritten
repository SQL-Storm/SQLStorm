WITH RankedPosts AS (
    SELECT p.Id AS PostId,
           p.Title,
           p.Tags,
           p.Score,
           p.CreationDate,
           COUNT(c.Id) AS CommentCount,
           ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS RankWithinTag
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.PostTypeId = 1 
      AND p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
    GROUP BY p.Id, p.Title, p.Tags, p.Score, p.CreationDate
),
TopPosts AS (
    SELECT rp.*, 
           ARRAY_AGG(DISTINCT t.TagName) AS UniqueTags
    FROM RankedPosts rp
    JOIN LATERAL (
        SELECT unnest(string_to_array(rp.Tags, '><')) AS TagName
    ) t ON TRUE
    WHERE rp.RankWithinTag <= 5 
    GROUP BY rp.PostId, rp.Title, rp.Tags, rp.Score, rp.CreationDate, rp.RankWithinTag
),
PostHistoryCounts AS (
    SELECT ph.PostId,
           COUNT(*) AS HistoryChanges
    FROM PostHistory ph
    GROUP BY ph.PostId
)
SELECT tp.PostId,
       tp.Title,
       tp.Score,
       tp.CommentCount,
       tp.CreationDate,
       tp.UniqueTags,
       COALESCE(phc.HistoryChanges, 0) AS HistoryChanges
FROM TopPosts tp
LEFT JOIN PostHistoryCounts phc ON tp.PostId = phc.PostId
ORDER BY tp.Score DESC, tp.CommentCount DESC;