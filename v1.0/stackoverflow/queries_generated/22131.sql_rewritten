WITH RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(a.ViewCount, 0) AS ViewCount,
        COALESCE(a.AcceptedAnswerId, -1) AS AcceptedAnswerId
    FROM Posts p
    LEFT JOIN (
        SELECT 
            ParentId, 
            COUNT(*) AS ViewCount, 
            MAX(CASE WHEN PostTypeId = 2 THEN Id END) AS AcceptedAnswerId
        FROM Posts 
        GROUP BY ParentId
    ) a ON p.Id = a.ParentId
    WHERE p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),

TopTags AS (
    SELECT 
        tags.Id AS TagId,
        tags.TagName,
        COUNT(p.Id) AS PostCount
    FROM Tags tags
    JOIN Posts p ON p.Tags LIKE CONCAT('%', tags.TagName, '%')
    GROUP BY tags.Id, tags.TagName
    HAVING COUNT(p.Id) > 5
),

UserInteractions AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT v.PostId) AS UpVotes,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges
    FROM Users u
    LEFT JOIN Votes v ON v.UserId = u.Id AND v.VoteTypeId = 2
    LEFT JOIN Comments c ON c.UserId = u.Id
    LEFT JOIN Badges b ON b.UserId = u.Id
    GROUP BY u.Id
)

SELECT 
    rp.PostId,
    rp.Title AS PostTitle,
    rp.ViewCount,
    rp.CreationDate,
    tt.TagName,
    ui.DisplayName AS UserDisplayName,
    ui.UpVotes,
    ui.CommentCount,
    ui.GoldBadges,
    COUNT(DISTINCT c.Id) OVER (PARTITION BY rp.PostId) AS TotalComments
FROM RecentPosts rp
JOIN TopTags tt ON tt.PostCount > 10
LEFT JOIN UserInteractions ui ON ui.UserId = rp.AcceptedAnswerId
LEFT JOIN Comments c ON c.PostId = rp.PostId
WHERE (rp.AcceptedAnswerId IS NULL OR rp.AcceptedAnswerId <> -1)
AND rp.Title IS NOT NULL
ORDER BY rp.ViewCount DESC NULLS LAST, rp.CreationDate DESC;