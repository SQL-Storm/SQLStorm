
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        p.PostTypeId
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= DATE_SUB(CAST('2024-10-01' AS DATE), INTERVAL 1 YEAR)
),
TopQuestions AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        CASE 
            WHEN rp.ViewCount > 1000 THEN 'High Views'
            WHEN rp.ViewCount BETWEEN 500 AND 1000 THEN 'Medium Views'
            ELSE 'Low Views'
        END AS ViewStatus
    FROM 
        RankedPosts rp
    WHERE 
        rp.PostTypeId = 1 AND rp.RankByScore <= 10
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotesReceived,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotesReceived,
        COUNT(b.Id) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
ActivityStats AS (
    SELECT 
        ua.UserId,
        ua.DisplayName,
        ua.UpVotesReceived,
        ua.DownVotesReceived,
        ua.TotalBadges,
        COUNT(DISTINCT tp.PostId) AS TopQuestionCount
    FROM 
        UserActivity ua
    INNER JOIN 
        TopQuestions tp ON ua.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = tp.PostId)
    GROUP BY 
        ua.UserId, ua.DisplayName, ua.UpVotesReceived, ua.DownVotesReceived, ua.TotalBadges
)
SELECT 
    as.UserId,
    as.DisplayName,
    as.UpVotesReceived,
    as.DownVotesReceived,
    as.TotalBadges,
    as.TopQuestionCount,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN v.BountyAmount ELSE 0 END), 0) AS TotalBountyAmount
FROM 
    ActivityStats as
LEFT JOIN 
    Votes v ON as.UserId = v.UserId
GROUP BY 
    as.UserId, as.DisplayName, as.UpVotesReceived, as.DownVotesReceived, as.TotalBadges, as.TopQuestionCount
ORDER BY 
    as.TotalBadges DESC, as.TopQuestionCount DESC;
