
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        u.DisplayName AS Owner,
        p.CreationDate,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, CURRENT_TIMESTAMP)
),
PostVotes AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
PostHistoryCounts AS (
    SELECT 
        PostId,
        COUNT(*) AS HistoryCount
    FROM 
        PostHistory
    WHERE 
        PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        PostId
),
RecentActivity AS (
    SELECT 
        pp.PostId,
        COALESCE(ph.HistoryCount, 0) AS HistoryCount,
        COALESCE(pv.UpVotes, 0) AS UpVotes,
        COALESCE(pv.DownVotes, 0) AS DownVotes,
        pp.RankScore
    FROM 
        RankedPosts pp
    LEFT JOIN 
        PostHistoryCounts ph ON pp.PostId = ph.PostId
    LEFT JOIN 
        PostVotes pv ON pp.PostId = pv.PostId
)
SELECT 
    ra.PostId,
    ra.Owner,
    ra.Title,
    ra.HistoryCount,
    ra.UpVotes,
    ra.DownVotes,
    CASE 
        WHEN ra.HistoryCount > 5 THEN 'Highly Active' 
        WHEN ra.HistoryCount BETWEEN 1 AND 5 THEN 'Moderately Active' 
        ELSE 'Inactive' 
    END AS ActivityLevel
FROM 
    RecentActivity ra
WHERE 
    ra.RankScore <= 10
ORDER BY 
    ra.HistoryCount DESC, ra.UpVotes DESC;
