WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount
    FROM
        Posts p
    LEFT JOIN
        Comments c ON p.Id = c.PostId
    WHERE
        p.Score > 0 AND
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY
        p.Id, p.OwnerUserId, p.CreationDate, p.Score, p.Tags
),
TopUsers AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS ActivePostCount,
        SUM(COALESCE(bp.Class, 0)) AS TotalBadgeClass
    FROM
        Users u
    LEFT JOIN
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN
        Badges bp ON u.Id = bp.UserId
    WHERE
        u.Reputation >= 100 AND
        u.CreationDate < cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY
        u.Id, u.DisplayName, u.Reputation
    HAVING
        COUNT(DISTINCT p.Id) > 2
),
PostHistorySummary AS (
    SELECT
        ph.PostId,
        MIN(ph.CreationDate) AS FirstEdit,
        MAX(ph.CreationDate) AS LastEdit,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes
    FROM
        PostHistory ph
    JOIN
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY
        ph.PostId
)
SELECT
    ru.UserId,
    ru.DisplayName,
    ru.Reputation,
    ru.ActivePostCount,
    ru.TotalBadgeClass,
    rp.Rank,
    rp.PostId,
    rp.Score,
    phs.FirstEdit,
    phs.LastEdit,
    COALESCE(phs.HistoryTypes, 'No edits') AS EditHistory
FROM
    TopUsers ru
LEFT JOIN
    RankedPosts rp ON ru.UserId = rp.OwnerUserId AND rp.Rank = 1
LEFT JOIN
    PostHistorySummary phs ON rp.PostId = phs.PostId
WHERE
    COALESCE(rp.Score, 0) > 10
ORDER BY
    ru.TotalBadgeClass DESC,
    ru.ActivePostCount DESC,
    phs.FirstEdit DESC
LIMIT 50;