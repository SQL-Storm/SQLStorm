
WITH UserBadgeCounts AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) FILTER (WHERE B.Class = 1) AS GoldBadges,
        COUNT(B.Id) FILTER (WHERE B.Class = 2) AS SilverBadges,
        COUNT(B.Id) FILTER (WHERE B.Class = 3) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
),
PostScoreCounts AS (
    SELECT 
        P.OwnerUserId,
        SUM(P.Score) AS TotalPostScore,
        COUNT(P.Id) AS TotalPosts,
        AVG(P.ViewCount) AS AverageViewCount
    FROM 
        Posts P
    WHERE 
        P.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
    GROUP BY 
        P.OwnerUserId
),
ClosedPosts AS (
    SELECT 
        PH.UserId,
        COUNT(PH.Id) AS TotalClosedPosts,
        STRING_AGG(DISTINCT PH.Comment, ', ') AS CloseReasons
    FROM 
        PostHistory PH
    WHERE 
        PH.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        PH.UserId
),
LatestPostInfo AS (
    SELECT 
        P.Id,
        P.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS rn
    FROM 
        Posts P
)
SELECT 
    U.DisplayName,
    COALESCE(UBC.GoldBadges, 0) AS GoldBadges,
    COALESCE(UBC.SilverBadges, 0) AS SilverBadges,
    COALESCE(UBC.BronzeBadges, 0) AS BronzeBadges,
    COALESCE(PSC.TotalPostScore, 0) AS TotalPostScore,
    COALESCE(PSC.TotalPosts, 0) AS TotalPosts,
    COALESCE(PSC.AverageViewCount, 0) AS AverageViewCount,
    COALESCE(CP.TotalClosedPosts, 0) AS TotalClosedPosts,
    COALESCE(CP.CloseReasons, 'None') AS CloseReasons,
    LP.Id AS LatestPostId,
    LP.CreationDate AS LatestPostDate
FROM 
    Users U
LEFT JOIN 
    UserBadgeCounts UBC ON U.Id = UBC.UserId
LEFT JOIN 
    PostScoreCounts PSC ON U.Id = PSC.OwnerUserId
LEFT JOIN 
    ClosedPosts CP ON U.Id = CP.UserId
LEFT JOIN 
    LatestPostInfo LP ON U.Id = LP.OwnerUserId AND LP.rn = 1
WHERE 
    U.Reputation > 1000 
ORDER BY 
    U.Reputation DESC
LIMIT 50;
