WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.PostTypeId,
        p.Title,
        p.CreationDate,
        p.AcceptedAnswerId,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.AcceptedAnswerId,
        rp.Score,
        rp.ViewCount,
        rp.RankScore,
        rp.UpVoteCount,
        rp.DownVoteCount,
        CASE 
            WHEN rp.AcceptedAnswerId IS NOT NULL THEN 'Has Accepted Answer'
            ELSE 'No Accepted Answer'
        END AS AnswerStatus
    FROM 
        RankedPosts rp
    WHERE 
        rp.RankScore <= 10
),
PostDetails AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.CreationDate,
        fp.Score,
        fp.ViewCount,
        fp.AnswerStatus,
        COALESCE((SELECT COUNT(c.Id) FROM Comments c WHERE c.PostId = fp.PostId), 0) AS CommentCount,
        COALESCE((SELECT STRING_AGG(DISTINCT t.TagName, ', ') FROM Tags t WHERE t.Id IN (SELECT UNNEST(string_to_array(SUBSTRING(fp.Title, 2, LENGTH(fp.Title) - 2), '><'))::int))) , 'No Tags') AS Tags
    FROM 
        FilteredPosts fp
),
PostHistoryAggregated AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        COUNT(ph.Id) AS HistoryCount
    FROM 
        PostHistory ph
    WHERE 
        ph.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId
),
PostSummary AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.CreationDate,
        pd.Score,
        pd.ViewCount,
        pd.AnswerStatus,
        pd.CommentCount,
        pd.Tags,
        COALESCE(SUM(pHa.HistoryCount), 0) AS TotalHistoryChanges,
        COUNT(pl.RelatedPostId) FILTER (WHERE pl.LinkTypeId = 1) AS LinkedPostsCount
    FROM 
        PostDetails pd
    LEFT JOIN 
        PostHistoryAggregated pHa ON pd.PostId = pHa.PostId
    LEFT JOIN 
        PostLinks pl ON pd.PostId = pl.PostId
    GROUP BY 
        pd.PostId
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.CreationDate,
    ps.Score,
    ps.ViewCount,
    ps.AnswerStatus,
    ps.CommentCount,
    ps.Tags,
    ps.TotalHistoryChanges,
    ps.LinkedPostsCount,
    CASE 
        WHEN ps.Score > 100 THEN 'High-Scoring'
        WHEN ps.Score BETWEEN 50 AND 100 THEN 'Medium-Scoring'
        ELSE 'Low-Scoring'
    END AS ScoreCategory
FROM 
    PostSummary ps
WHERE 
    ps.ViewCount > 10
    AND ps.TotalHistoryChanges > 1
ORDER BY 
    ps.Score DESC, ps.CreationDate DESC;