
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= CURRENT_DATE - INTERVAL '1 year'
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(p.Score) AS TotalScore,
        SUM(p.ViewCount) AS TotalViews,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    INNER JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName
),
ClosedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        ph.CreationDate AS ClosedDate,
        ph.Comment AS CloseReason
    FROM 
        Posts p
    INNER JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.PostHistoryTypeId = 10 
),
PostStatistics AS (
    SELECT 
        p.PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COALESCE(cp.ClosedDate, 'Not Closed') AS ClosedStatus,
        cp.CloseReason
    FROM 
        RankedPosts p
    LEFT JOIN 
        ClosedPosts cp ON p.PostId = cp.Id
    WHERE 
        p.UserRank = 1 
)
SELECT 
    tu.UserId,
    tu.DisplayName,
    SUM(ps.Score) AS TotalScore,
    SUM(ps.ViewCount) AS TotalViews,
    COUNT(ps.PostId) AS PostCount,
    COUNT(DISTINCT ps.ClosedStatus) AS ClosedPostCount,
    MIN(ps.ClosedDate) AS FirstClosedDate,
    STRING_AGG(CASE WHEN ps.ClosedStatus != 'Not Closed' THEN ps.Title END, ', ') AS ClosedPostTitles
FROM 
    TopUsers tu
INNER JOIN 
    PostStatistics ps ON tu.UserId = ps.OwnerUserId
GROUP BY 
    tu.UserId, tu.DisplayName
ORDER BY 
    TotalScore DESC
LIMIT 10;
