
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        u.DisplayName AS AuthorName,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        p.CreationDate,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RankByUser
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, u.DisplayName, p.CreationDate, p.OwnerUserId
),
TagStatistics AS (
    SELECT 
        value AS Tag,
        COUNT(*) AS PostCount
    FROM 
        Posts, UNNEST(string_to_array(substring(Tags, 2, length(Tags)-2), '><')))::text AS value
    WHERE 
        PostTypeId = 1 
    GROUP BY 
        value
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.Tags,
    rp.AuthorName,
    rp.CommentCount,
    rp.AnswerCount,
    rp.CreationDate,
    ts.Tag,
    ts.PostCount,
    ub.BadgeCount,
    CASE 
        WHEN rp.RankByUser <= 3 THEN 'Top Posts by Author'
        ELSE 'Regular Posts' 
    END AS PostRanking
FROM 
    RankedPosts rp
JOIN 
    TagStatistics ts ON ts.Tag = ANY(string_to_array(substring(rp.Tags, 2, length(rp.Tags)-2), '><'))
JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
ORDER BY 
    rp.CreationDate DESC, rp.CommentCount DESC;
