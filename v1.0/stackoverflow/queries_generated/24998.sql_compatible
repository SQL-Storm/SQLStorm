
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.CommentCount,
        COALESCE(b.Name, 'No Badge') AS BadgeName
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges b ON b.UserId IN (
            SELECT u.Id 
            FROM Users u 
            WHERE u.Reputation > 1000 AND u.CreationDate < rp.CreationDate
            LIMIT 1
        )
    WHERE 
        rp.RankScore <= 10
),
PostStatistics AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.Score,
        fp.CommentCount,
        fp.BadgeName,
        CASE 
            WHEN fp.CommentCount = 0 THEN 'No Comments'
            WHEN fp.CommentCount BETWEEN 1 AND 5 THEN 'Few Comments'
            ELSE 'Many Comments'
        END AS CommentCategory,
        fp.CreationDate
    FROM 
        FilteredPosts fp
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.Score,
    ps.CommentCount,
    ps.BadgeName,
    ps.CommentCategory,
    COALESCE((
        SELECT STRING_AGG(ct.Name, ', ') 
        FROM PostHistory ph
        JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
        WHERE ph.PostId = ps.PostId
        AND ph.CreationDate <= ps.CreationDate
        GROUP BY ph.PostId
        HAVING COUNT(*) > 1
    ), 'No History') AS PostHistoryNames,
    COUNT(v.Id) FILTER (WHERE vt.Name = 'UpMod') AS UpVoteCount,
    COUNT(v.Id) FILTER (WHERE vt.Name = 'DownMod') AS DownVoteCount
FROM 
    PostStatistics ps
LEFT JOIN 
    Votes v ON ps.PostId = v.PostId
LEFT JOIN 
    VoteTypes vt ON v.VoteTypeId = vt.Id
GROUP BY 
    ps.PostId, ps.Title, ps.Score, ps.CommentCount, ps.BadgeName, ps.CommentCategory, ps.CreationDate
ORDER BY 
    ps.Score DESC, ps.CommentCount DESC
LIMIT 50;
