WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS TotalPosts
    FROM Posts p
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS TotalUpVotes,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS TotalDownVotes,
        COALESCE(b.Count, 0) AS BadgeCount
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    LEFT JOIN (SELECT UserId, COUNT(*) AS Count FROM Badges GROUP BY UserId) b ON u.Id = b.UserId
    GROUP BY u.Id
),
PostsWithBadges AS (
    SELECT 
        rp.Id AS PostId,
        rp.Title,
        rs.DisplayName,
        rs.TotalUpVotes,
        rs.TotalDownVotes,
        rp.Score,
        rp.ViewCount,
        rp.CreationDate,
        rp.RankByScore,
        rp.TotalPosts,
        CASE 
            WHEN rs.BadgeCount > 0 THEN 'Has Badges'
            ELSE 'No Badges'
        END AS BadgeStatus
    FROM RankedPosts rp
    JOIN UserStats rs ON rp.OwnerUserId = rs.UserId
    WHERE rp.RankByScore <= 5
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS CloseCount,
        MAX(ph.CreationDate) AS LastClosed
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId = 10
    GROUP BY ph.PostId
)

SELECT 
    pwb.PostId,
    pwb.Title,
    pwb.DisplayName,
    pwb.TotalUpVotes,
    pwb.TotalDownVotes,
    pwb.Score,
    pwb.ViewCount,
    pwb.CreationDate,
    pb.CloseCount,
    pb.LastClosed,
    pwb.BadgeStatus
FROM PostsWithBadges pwb
LEFT JOIN ClosedPosts pb ON pwb.PostId = pb.PostId
ORDER BY pwb.Score DESC, pwb.ViewCount DESC
LIMIT 100;