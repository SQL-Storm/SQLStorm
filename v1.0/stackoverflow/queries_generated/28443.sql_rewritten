WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.OwnerUserId,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
          AND p.OwnerUserId IS NOT NULL
),
TagCounts AS (
    SELECT 
        t.Id AS TagId,
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'
    GROUP BY 
        t.Id, t.TagName
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostVoteStats AS (
    SELECT
        p.Id AS PostId,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        p.Id
)
SELECT 
    u.Id AS UserId,
    u.DisplayName AS UserDisplayName,
    COUNT(DISTINCT rp.PostId) AS QuestionCount,
    COALESCE(ub.BadgeCount, 0) AS BadgeCount,
    SUM(pvs.Upvotes) AS TotalUpvotes,
    SUM(pvs.Downvotes) AS TotalDownvotes,
    STRING_AGG(DISTINCT tc.TagName, ', ') AS Tags,
    MIN(rp.CreationDate) AS FirstPostDate
FROM 
    Users u
LEFT JOIN 
    RankedPosts rp ON u.Id = rp.OwnerUserId
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
LEFT JOIN 
    PostVoteStats pvs ON rp.PostId = pvs.PostId
LEFT JOIN 
    TagCounts tc ON tc.PostCount > 0 
                AND rp.Tags LIKE '%' || tc.TagName || '%'
GROUP BY 
    u.Id, u.DisplayName
HAVING 
    COUNT(DISTINCT rp.PostId) > 0
ORDER BY 
    QuestionCount DESC, TotalUpvotes DESC;