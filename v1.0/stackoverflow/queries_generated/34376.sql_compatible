
WITH RecentPosts AS (
    SELECT p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, u.Reputation AS OwnerReputation
    FROM Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    WHERE p.CreationDate >= CURRENT_DATE - INTERVAL '6 months'
),
PostWithTagCounts AS (
    SELECT p.Id, p.Title, COUNT(t.value) AS TagCount
    FROM Posts p
    LEFT JOIN LATERAL unnest(string_to_array(p.Tags, ',')) AS t(value) ON t.value IS NOT NULL
    WHERE p.PostTypeId = 1 
    GROUP BY p.Id, p.Title
),
UserBadges AS (
    SELECT b.UserId, COUNT(b.Id) AS BadgeCount,
           MAX(b.Class) AS HighestBadgeClass,
           STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM Badges b
    GROUP BY b.UserId
),
RecentPostsWithBadges AS (
    SELECT rp.Id, rp.Title, rp.CreationDate, rp.ViewCount, rp.Score, rp.OwnerReputation,
           ub.BadgeCount, ub.HighestBadgeClass, ub.BadgeNames
    FROM RecentPosts rp
    LEFT JOIN UserBadges ub ON rp.OwnerReputation IS NOT NULL AND ub.UserId = (SELECT u.Id FROM Users u WHERE u.Reputation = rp.OwnerReputation)
)
SELECT r.Id, r.Title, r.CreationDate, r.ViewCount, r.Score, r.OwnerReputation,
       COALESCE(t.TagCount, 0) AS TagCount,
       CASE 
           WHEN r.HighestBadgeClass IS NOT NULL THEN CASE r.HighestBadgeClass
               WHEN 1 THEN 'Gold'
               WHEN 2 THEN 'Silver'
               WHEN 3 THEN 'Bronze'
               ELSE 'None'
           END
           ELSE 'None'
       END AS HighestBadge,
       r.BadgeNames
FROM RecentPostsWithBadges r
LEFT JOIN PostWithTagCounts t ON r.Id = t.Id
ORDER BY r.Score DESC, r.ViewCount DESC
LIMIT 10 OFFSET 0;
