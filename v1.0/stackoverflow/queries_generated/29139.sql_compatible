
WITH PostSummary AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, u.DisplayName, p.CreationDate
),

TagAnalysis AS (
    SELECT 
        UNNEST(string_to_array(SUBSTRING(Tags FROM 2 FOR LENGTH(Tags) - 2), '><')) AS TagName,
        PostId
    FROM 
        PostSummary
),

TopTags AS (
    SELECT 
        TagName,
        COUNT(PostId) AS PostCount,
        AVG(EXTRACT(EPOCH FROM (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - CreationDate)) / 3600) AS AvgAgeInHours
    FROM 
        TagAnalysis ta
    JOIN 
        PostSummary ps ON ta.PostId = ps.PostId
    GROUP BY 
        TagName
    ORDER BY 
        PostCount DESC,
        AvgAgeInHours ASC
    LIMIT 10
)

SELECT 
    tt.TagName,
    tt.PostCount,
    tt.AvgAgeInHours,
    ps.Title,
    ps.OwnerDisplayName,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes
FROM 
    TopTags tt
JOIN 
    PostSummary ps ON ps.Tags LIKE '%' || tt.TagName || '%'
ORDER BY 
    tt.PostCount DESC;
