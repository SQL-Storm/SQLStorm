
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p 
    WHERE 
        p.ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes,
        SUM(CASE WHEN v.VoteTypeId = 1 THEN 1 ELSE 0 END) AS AcceptedByOriginator
    FROM 
        Posts p 
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
),
PostHistoryStats AS (
    SELECT 
        ph.PostId, 
        COUNT(*) AS HistoryEntries,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
UserBadges AS (
    SELECT 
        b.UserId, 
        COUNT(*) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)
SELECT 
    u.DisplayName,
    p.Title AS PostTitle,
    ps.CommentCount,
    ps.Upvotes,
    ps.Downvotes,
    ps.AcceptedByOriginator,
    phs.HistoryEntries,
    phs.LastEditDate,
    ub.BadgeCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY ps.Upvotes DESC) AS RankByUpvotes
FROM 
    Posts p
JOIN 
    Users u ON p.OwnerUserId = u.Id
JOIN 
    PostStatistics ps ON p.Id = ps.PostId
LEFT JOIN 
    PostHistoryStats phs ON p.Id = phs.PostId
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
WHERE 
    p.CreationDate >= DATEADD(DAY, -30, '2024-10-01') 
AND 
    (ps.Upvotes > ps.Downvotes OR ps.Upvotes = ps.AcceptedByOriginator) 
ORDER BY 
    ps.Upvotes DESC, 
    ps.CommentCount DESC;
