
WITH RECURSIVE PostHierarchy AS (
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        1 AS Level
    FROM Posts p
    WHERE p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        ph.Level + 1
    FROM Posts p
    JOIN PostHierarchy ph ON p.ParentId = ph.Id
),
TopUsers AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        COUNT(DISTINCT P.Id) AS TotalPosts,
        SUM(CASE WHEN P.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts,
        SUM(CASE WHEN P.Score < 0 THEN 1 ELSE 0 END) AS NegativePosts
    FROM Users U
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    GROUP BY U.Id
    HAVING COUNT(P.Id) > 0
),
PostHistoryAggregate AS (
    SELECT 
        ph.PostId,
        COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN ph.Id END) AS CloseActions,
        AVG(EXTRACT(EPOCH FROM (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - ph.CreationDate))) AS AvgTimeSinceLastAction
    FROM PostHistory ph
    GROUP BY ph.PostId
),
RecentVotes AS (
    SELECT 
        V.PostId,
        COUNT(V.Id) AS VoteCount,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Votes V
    WHERE V.CreationDate >= CURRENT_DATE - INTERVAL '6 months'
    GROUP BY V.PostId
)

SELECT 
    p.Id AS PostId,
    p.Title,
    CONCAT(U.DisplayName, ' (', U.Reputation, ' pts)') AS PostOwner,
    p.CreationDate AS PostDate,
    ph.Level,
    COALESCE(ha.CloseActions, 0) AS CloseActions,
    COALESCE(rv.VoteCount, 0) AS TotalVotes,
    COALESCE(rv.UpVotes, 0) AS UpVotes,
    COALESCE(rv.DownVotes, 0) AS DownVotes,
    (SELECT COUNT(*) FROM Comments C WHERE C.PostId = p.Id) AS CommentCount,
    (SELECT COUNT(*) FROM Badges B WHERE B.UserId = U.Id) AS BadgeCount,
    (SELECT STRING_AGG(Tag.TagName, ', ') FROM Tags AS Tag WHERE Tag.Id IN (SELECT unnest(string_to_array(p.Tags, ','))) ) AS PostTags,
    CASE 
        WHEN U.Reputation >= 1000 THEN 'Gold'
        WHEN U.Reputation >= 100 THEN 'Silver'
        ELSE 'Bronze'
    END AS UserBadge
FROM Posts p
JOIN Users U ON p.OwnerUserId = U.Id
LEFT JOIN PostHierarchy ph ON ph.Id = p.Id
LEFT JOIN PostHistoryAggregate ha ON ha.PostId = p.Id
LEFT JOIN RecentVotes rv ON rv.PostId = p.Id
WHERE p.CreationDate >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY p.Id, p.Title, U.DisplayName, U.Reputation, p.CreationDate, ph.Level, ha.CloseActions, rv.VoteCount, rv.UpVotes, rv.DownVotes
ORDER BY U.Reputation DESC, p.CreationDate DESC
LIMIT 100;
