
WITH RecursivePostHierarchy AS (
    SELECT p.Id,
           p.Title,
           p.ParentId,
           0 AS Level
    FROM Posts p
    WHERE p.PostTypeId = 1  

    UNION ALL

    SELECT p.Id,
           p.Title,
           p.ParentId,
           r.Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.Id
),
PostDetails AS (
    SELECT p.Id AS PostId,
           p.Title,
           COALESCE(a.UserDisplayName, 'No accepted answer') AS AcceptedAnswer,
           COALESCE(c.CommentCount, 0) AS TotalComments,
           COALESCE(v.UpVotes, 0) AS TotalUpVotes,
           COALESCE(v.DownVotes, 0) AS TotalDownVotes,
           COUNT(DISTINCT pl.RelatedPostId) AS RelatedPostsCount,
           MAX(ph.CreationDate) AS LastEditedDate
    FROM Posts p
    LEFT JOIN Posts a ON p.AcceptedAnswerId = a.Id
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT PostId,
               SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
               SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
        FROM Votes
        GROUP BY PostId
    ) v ON p.Id = v.PostId
    LEFT JOIN PostLinks pl ON p.Id = pl.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    WHERE p.PostTypeId = 1  
    GROUP BY p.Id, p.Title, a.UserDisplayName
),
FinalResults AS (
    SELECT pd.PostId,
           pd.Title,
           pd.AcceptedAnswer,
           pd.TotalComments,
           pd.TotalUpVotes,
           pd.TotalDownVotes,
           pd.RelatedPostsCount,
           pd.LastEditedDate,
           RANK() OVER (PARTITION BY CASE WHEN pd.TotalUpVotes > pd.TotalDownVotes THEN 'Positive' ELSE 'Negative' END 
                        ORDER BY pd.TotalUpVotes DESC, pd.TotalComments DESC) AS PopularityRank,
           STRING_AGG(DISTINCT CASE WHEN pt.TagName IS NOT NULL THEN pt.TagName ELSE 'No Tag' END, ', ') AS Tags
    FROM PostDetails pd
    LEFT JOIN (
        SELECT Id, TagName
        FROM Tags
        WHERE IsModeratorOnly = 0
    ) pt ON pd.PostId = pt.ExcerptPostId
    GROUP BY pd.PostId, pd.Title, pd.AcceptedAnswer, pd.TotalComments, pd.TotalUpVotes, pd.TotalDownVotes, pd.RelatedPostsCount, pd.LastEditedDate
)
SELECT *
FROM FinalResults
WHERE TotalComments > 5  
ORDER BY PopularityRank, LastEditedDate DESC
LIMIT 50 OFFSET 0;
