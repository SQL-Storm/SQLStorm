
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' 
        AND p.PostTypeId = 1
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        ViewCount,
        OwnerDisplayName
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
)
SELECT 
    tp.OwnerDisplayName,
    COUNT(DISTINCT tp.PostId) AS TotalPosts,
    SUM(tp.Score) AS TotalScore,
    AVG(tp.ViewCount) AS AvgViewCount,
    STRING_AGG(t.TagName, ', ') AS TagsUsed,
    ARRAY_AGG(DISTINCT b.Name) FILTER (WHERE b.Class = 1) AS GoldBadges,
    ARRAY_AGG(DISTINCT b.Name) FILTER (WHERE b.Class = 2) AS SilverBadges,
    ARRAY_AGG(DISTINCT b.Name) FILTER (WHERE b.Class = 3) AS BronzeBadges
FROM 
    TopPosts tp
LEFT JOIN 
    PostTags pt ON pt.PostId = tp.PostId
LEFT JOIN 
    Tags t ON pt.TagId = t.Id
LEFT JOIN 
    Badges b ON b.UserId = tp.OwnerDisplayName
GROUP BY 
    tp.OwnerDisplayName
ORDER BY 
    TotalScore DESC
LIMIT 
    10;
