
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        p.AcceptedAnswerId,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS TagRank,
        STRING_AGG(DISTINCT c.Text, ' | ') AS Comments,
        COUNT(v.Id) AS VoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Tags, p.Score, p.CreationDate, p.ViewCount, p.AcceptedAnswerId
),
TopPosts AS (
    SELECT 
        rp.*,
        pt.Name AS PostTypeName,
        STRING_AGG(DISTINCT u.DisplayName, ', ') AS UserNames
    FROM 
        RankedPosts rp
    JOIN 
        PostTypes pt ON pt.Id = 1 
    LEFT JOIN 
        Users u ON rp.AcceptedAnswerId = u.Id
    WHERE 
        rp.TagRank <= 5 
    GROUP BY 
        rp.PostId, rp.Title, rp.Tags, rp.Score, rp.CreationDate, rp.ViewCount, rp.AcceptedAnswerId, pt.Name
)
SELECT 
    tp.Title,
    tp.Tags,
    tp.Score,
    tp.ViewCount,
    tp.CreationDate,
    tp.Comments,
    tp.UserNames,
    COUNT(DISTINCT b.Id) AS BadgeCount,
    COUNT(DISTINCT v.Id) AS TotalVotes
FROM 
    TopPosts tp
LEFT JOIN 
    Badges b ON tp.PostId = b.UserId
LEFT JOIN 
    Votes v ON tp.PostId = v.PostId
GROUP BY 
    tp.Title, tp.Tags, tp.Score, tp.ViewCount, tp.CreationDate, tp.Comments, tp.UserNames, tp.PostId
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC;
