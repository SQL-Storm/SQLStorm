
WITH RecursivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Body,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Body,
        rp.Level + 1
    FROM 
        Posts p
    JOIN 
        Posts a ON p.ParentId = a.Id
    JOIN 
        RecursivePosts rp ON a.Id = rp.PostId
)
, UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers,
        SUM(COALESCE(b.Class, 0)) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
, CloseReasons AS (
    SELECT 
        ph.PostId,
        STRING_AGG(cr.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes cr ON CAST(ph.Comment AS integer) = cr.Id
    WHERE 
        ph.PostHistoryTypeId = 10 
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    us.DisplayName AS Owner,
    us.TotalQuestions,
    us.TotalAnswers,
    us.TotalBadges,
    cr.CloseReasons,
    ROW_NUMBER() OVER (PARTITION BY us.UserId ORDER BY rp.CreationDate DESC) AS UserPostRank,
    RANK() OVER (ORDER BY rp.Score DESC) AS PostPopularityRank
FROM 
    RecursivePosts rp
JOIN 
    UserStats us ON rp.OwnerId = us.UserId
LEFT JOIN 
    CloseReasons cr ON rp.PostId = cr.PostId
WHERE 
    rp.CreationDate >= CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year' 
AND 
    (us.TotalQuestions > 0 OR us.TotalAnswers > 0) 
ORDER BY 
    rp.ViewCount DESC, us.TotalPosts DESC;
