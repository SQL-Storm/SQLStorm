
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, CAST('2024-10-01' AS DATE))
), TopPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        ViewCount,
        Score,
        OwnerDisplayName
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
), PostsWithTags AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.CreationDate,
        tp.ViewCount,
        tp.Score,
        tp.OwnerDisplayName,
        t.TagName
    FROM 
        TopPosts tp
    LEFT JOIN 
        LATERAL (
            SELECT 
                UNNEST(SPLIT_PARTS(p.Tags, '><')) AS TagName
            FROM 
                Posts p
            WHERE 
                p.Id = tp.PostId
        ) t ON TRUE
), PostsWithBadgeCount AS (
    SELECT 
        pwt.PostId,
        pwt.Title,
        pwt.CreationDate,
        pwt.ViewCount,
        pwt.Score,
        pwt.OwnerDisplayName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        PostsWithTags pwt
    LEFT JOIN 
        Badges b ON b.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = pwt.PostId)
    GROUP BY 
        pwt.PostId, pwt.Title, pwt.CreationDate, pwt.ViewCount, pwt.Score, pwt.OwnerDisplayName
)
SELECT 
    p.PostId,
    p.Title,
    p.CreationDate,
    p.ViewCount,
    p.Score,
    p.OwnerDisplayName,
    p.BadgeCount,
    ARRAY_AGG(DISTINCT pwt.TagName) AS Tags
FROM 
    PostsWithBadgeCount p
LEFT JOIN 
    PostsWithTags pwt ON p.PostId = pwt.PostId
GROUP BY 
    p.PostId, p.Title, p.CreationDate, p.ViewCount, p.Score, p.OwnerDisplayName, p.BadgeCount
ORDER BY 
    p.Score DESC, p.CreationDate DESC
LIMIT 10;
