
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC, p.CreationDate DESC) AS Rank,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpvoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownvoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CURRENT_DATE - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.CreationDate, p.OwnerUserId
),
PostsWithTags AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.CreationDate,
        rp.OwnerUserId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Posts p ON rp.PostId = p.Id
    LEFT JOIN 
        LATERAL STRING_TO_ARRAY(p.Tags, ',') AS t ON t IS NOT NULL
    WHERE 
        rp.Rank <= 3
    GROUP BY 
        rp.PostId, rp.Title, rp.ViewCount, rp.CreationDate, rp.OwnerUserId
),
PostHistoryInfo AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate AS HistoryDate,
        MAX(ph.UserId) OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LastEditor,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (1, 2, 4) THEN 1 END) AS EditCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId, ph.CreationDate
)
SELECT 
    p.Title,
    pt.Name AS PostType,
    p.ViewCount,
    p.CreationDate,
    p.OwnerUserId,
    COALESCE(u.DisplayName, 'Community User') AS OwnerDisplayName,
    pwi.Tags,
    COALESCE(ARRAY_AGG(phih.HistoryDate), '{}'::json) AS HistoryDates,
    pwi.UpvoteCount,
    pwi.DownvoteCount
FROM 
    PostsWithTags pwi
JOIN 
    Posts p ON p.Id = pwi.PostId
LEFT JOIN 
    PostTypes pt ON p.PostTypeId = pt.Id
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    PostHistoryInfo phih ON pwi.PostId = phih.PostId
WHERE 
    pwi.ViewCount > 100 OR p.CreationDate > CURRENT_DATE - INTERVAL '6 months'
ORDER BY 
    pwi.ViewCount DESC, pwi.CreationDate DESC;
