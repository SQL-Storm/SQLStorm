WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS Author,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days' 
),
PostStats AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Author,
        Score,
        ViewCount,
        Rank,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(b.BadgeCount, 0) AS BadgeCount
    FROM 
        RankedPosts rp
    LEFT JOIN (
        SELECT 
            PostId, COUNT(*) AS CommentCount 
        FROM 
            Comments 
        GROUP BY 
            PostId
    ) c ON rp.PostId = c.PostId
    LEFT JOIN (
        SELECT 
            UserId, COUNT(*) AS BadgeCount 
        FROM 
            Badges 
        GROUP BY 
            UserId
    ) b ON (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId) = b.UserId
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.CreationDate,
    ps.Author,
    ps.Score,
    ps.ViewCount,
    ps.CommentCount,
    ps.BadgeCount,
    CASE 
        WHEN ps.Rank <= 5 THEN 'Top Post'
        ELSE 'Other Post'
    END AS PostCategory
FROM 
    PostStats ps
WHERE 
    ps.Rank <= 10
ORDER BY 
    ps.Score DESC, ps.ViewCount DESC;