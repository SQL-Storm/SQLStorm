
WITH RecursivePosts AS (
    SELECT 
        p.Id,
        p.Title,
        COALESCE(NULLIF(p.AcceptedAnswerId, -1), 0) AS AnswerId,
        p.CreationDate,
        p.OwnerUserId,
        p.ViewCount,
        p.AnswerCount,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        a.Id,
        a.Title,
        COALESCE(NULLIF(a.ParentId, -1), 0) AS AnswerId,
        a.CreationDate,
        a.OwnerUserId,
        a.ViewCount,
        a.AnswerCount,
        rp.Level + 1
    FROM 
        Posts a
    JOIN 
        RecursivePosts rp ON a.ParentId = rp.Id
    WHERE 
        a.PostTypeId = 2  
),
PostUserVotes AS (
    SELECT 
        p.Id AS PostId,
        u.DisplayName AS UserName,
        v.VoteTypeId,
        COUNT(v.Id) AS VoteCount
    FROM 
        Posts p
    JOIN 
        Votes v ON p.Id = v.PostId
    JOIN 
        Users u ON v.UserId = u.Id
    GROUP BY 
        p.Id, u.DisplayName, v.VoteTypeId
),
PostStatistics AS (
    SELECT 
        rp.Id AS PostId,
        rp.Title,
        rp.ViewCount,
        rp.CreationDate,
        rp.OwnerUserId,
        rp.Level,
        COALESCE(SUM(CASE WHEN pv.VoteTypeId = 2 THEN pv.VoteCount END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN pv.VoteTypeId = 3 THEN pv.VoteCount END), 0) AS DownVotes,
        COUNT(DISTINCT pv.UserName) AS VoterCount
    FROM 
        RecursivePosts rp
    LEFT JOIN 
        PostUserVotes pv ON rp.Id = pv.PostId
    GROUP BY 
        rp.Id, rp.Title, rp.ViewCount, rp.CreationDate, rp.OwnerUserId, rp.Level
),
ClosedPosts AS (
    SELECT 
        p.Id AS PostId,
        ph.CreationDate,
        pt.Name AS PostTypeName,
        COUNT(*) AS CloseCount
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId = 10 
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    GROUP BY 
        p.Id, ph.CreationDate, pt.Name
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.ViewCount,
    ps.CreationDate,
    ps.UpVotes,
    ps.DownVotes,
    ps.VoterCount,
    COALESCE(cp.CloseCount, 0) AS CloseCount,
    CASE
        WHEN ps.Level > 1 THEN 'Has Answers'
        ELSE 'No Answers'
    END AS AnswerStatus,
    CASE
       WHEN ps.ViewCount IS NULL THEN 'No Views'
       ELSE CONCAT(ps.ViewCount, ' Views')
    END AS ViewsSummary
FROM 
    PostStatistics ps
LEFT JOIN 
    ClosedPosts cp ON ps.PostId = cp.PostId
ORDER BY 
    ps.UpVotes DESC, ps.ViewCount DESC
LIMIT 100;
