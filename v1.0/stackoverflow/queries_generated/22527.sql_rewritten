WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= '2020-01-01' 
        AND p.OwnerUserId IS NOT NULL
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(p.Score) AS TotalScore,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(b.Class = 1) AS GoldBadges, 
        SUM(b.Class = 2) AS SilverBadges, 
        SUM(b.Class = 3) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.CreationDate < cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        u.Id, u.DisplayName
),
UserRanks AS (
    SELECT 
        *, 
        DENSE_RANK() OVER (ORDER BY TotalScore DESC) AS UserRank
    FROM 
        TopUsers
)
SELECT 
    ru.UserId,
    ru.DisplayName,
    ru.TotalScore,
    ru.PostCount,
    ru.GoldBadges,
    ru.SilverBadges,
    ru.BronzeBadges,
    COALESCE(rp.PostId, 0) AS TopPostId,
    COALESCE(rp.Title, 'No Posts') AS TopPostTitle,
    COALESCE(rp.Score, 0) AS TopPostScore,
    COALESCE(rp.ViewCount, 0) AS TopPostViews,
    rp.RankByScore AS PostRank
FROM 
    UserRanks ru
LEFT JOIN 
    RankedPosts rp ON ru.UserId = rp.OwnerUserId AND rp.RankByScore = 1
WHERE 
    (ru.GoldBadges + ru.SilverBadges + ru.BronzeBadges) > 0
ORDER BY 
    ru.UserRank, ru.DisplayName
WITH ROLLUP;