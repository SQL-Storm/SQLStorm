WITH RecursivePostHierarchy AS (
    
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.Title,
        p.Score,
        p.CreationDate,
        1 AS Level
    FROM Posts p
    WHERE p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id,
        p.ParentId,
        p.Title,
        p.Score,
        p.CreationDate,
        Level + 1
    FROM Posts p
    JOIN RecursivePostHierarchy rph ON p.ParentId = rph.PostId
    WHERE p.PostTypeId = 2  
),
UserReputation AS (
    
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(p.Id) AS TotalAnswers
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 2
    GROUP BY u.Id, u.DisplayName, u.Reputation
),
TopUsers AS (
    
    SELECT 
        UserId, 
        DisplayName, 
        Reputation,
        TotalAnswers,
        ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS Rank
    FROM UserReputation
    WHERE Reputation > 1000 
),
RecentPostHistory AS (
    
    SELECT 
        p.Id AS PostId,
        MAX(ph.CreationDate) AS LastEditDate,
        STRING_AGG(pt.Name, ', ') AS HistoryTypes
    FROM Posts p
    JOIN PostHistory ph ON p.Id = ph.PostId
    JOIN PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    GROUP BY p.Id
),
PopularQuestions AS (
    
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        COUNT(a.Id) AS AnswerCount,
        ROW_NUMBER() OVER (ORDER BY p.Score DESC) AS Rank
    FROM Posts p
    LEFT JOIN Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2
    WHERE p.PostTypeId = 1  
    GROUP BY p.Id
)


SELECT 
    pq.Title AS QuestionTitle,
    pu.DisplayName AS TopUser,
    pu.Reputation AS UserReputation,
    pq.Score AS QuestionScore,
    pq.ViewCount AS QuestionViews,
    pgh.HistoryTypes AS RecentHistory,
    pgh.LastEditDate AS LastEdit
FROM PopularQuestions pq
JOIN TopUsers pu ON pq.Rank = 1 
LEFT JOIN RecentPostHistory pgh ON pq.Id = pgh.PostId
WHERE pq.AnswerCount > 5 
ORDER BY pq.Score DESC, pu.Reputation DESC;