
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostID,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserPostRank,
        CASE 
            WHEN p.Score > 100 THEN 'High Score'
            WHEN p.Score BETWEEN 50 AND 100 THEN 'Medium Score'
            ELSE 'Low Score'
        END AS ScoreCategory,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Tags t ON t.Id = ANY(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')::int[])
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Date) AS MostRecentBadgeDate
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        ub.BadgeCount,
        RANK() OVER (ORDER BY u.Reputation DESC) AS UserRank
    FROM 
        Users u
    LEFT JOIN 
        UserBadges ub ON ub.UserId = u.Id
    WHERE 
        u.Reputation > 1000
)
SELECT 
    rp.PostID,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.ScoreCategory,
    tu.DisplayName AS TopUserName,
    tu.BadgeCount,
    COALESCE(MAX(v.CreationDate), 'Never') AS LastVoteDate,
    CASE 
        WHEN COUNT(DISTINCT c.Id) > 0 THEN TRUE
        ELSE FALSE
    END AS HasComments
FROM 
    RankedPosts rp
LEFT JOIN 
    Votes v ON v.PostId = rp.PostID
LEFT JOIN 
    Comments c ON c.PostId = rp.PostID
LEFT JOIN 
    TopUsers tu ON tu.UserId = rp.OwnerUserId
WHERE 
    rp.UserPostRank <= 5
GROUP BY 
    rp.PostID, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, rp.ScoreCategory, 
    tu.DisplayName, tu.BadgeCount
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC
LIMIT 100;
