WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(pv.VoteCount, 0) AS VoteCount,
        pb.AverageScore,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY COALESCE(pv.VoteCount, 0) DESC, pb.AverageScore DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS VoteCount
        FROM 
            Votes
        WHERE 
            VoteTypeId IN (2, 3) 
        GROUP BY 
            PostId
    ) pv ON p.Id = pv.PostId
    LEFT JOIN (
        SELECT 
            ParentId,
            AVG(Score) AS AverageScore
        FROM 
            Posts
        WHERE 
            PostTypeId = 2 
        GROUP BY 
            ParentId
    ) pb ON p.Id = pb.ParentId
), CommentsCount AS (
    SELECT 
        PostId,
        COUNT(*) AS CommentCount
    FROM 
        Comments
    GROUP BY 
        PostId
), ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        ph.UserDisplayName,
        ph.Comment,
        DENSE_RANK() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS CloseRank
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10 
), FinalRanking AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.VoteCount,
        cc.CommentCount,
        COALESCE(cp.CloseRank, 0) AS IsClosed
    FROM 
        RankedPosts rp
    LEFT JOIN 
        CommentsCount cc ON rp.PostId = cc.PostId
    LEFT JOIN 
        ClosedPosts cp ON rp.PostId = cp.PostId
)
SELECT 
    fr.PostId,
    fr.Title,
    fr.CreationDate,
    fr.VoteCount,
    fr.CommentCount,
    CASE 
        WHEN fr.IsClosed > 0 THEN 'Closed'
        ELSE 'Open' 
    END AS PostStatus
FROM 
    FinalRanking fr
WHERE 
    fr.Rank <= 10 
ORDER BY 
    fr.VoteCount DESC, fr.CreationDate DESC;