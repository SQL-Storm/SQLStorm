
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CommentCount,
        (rp.UpVoteCount - rp.DownVoteCount) AS NetScore,
        COALESCE(b.Name, 'No Badge') AS UserBadge
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges b ON rp.OwnerUserId = b.UserId AND b.Class = 1
    WHERE 
        rp.UserPostRank <= 5
),
PostHistoryCTE AS (
    SELECT 
        ph.PostId,
        p.Title,
        ph.CreationDate,
        p.OwnerUserId,
        ph.Comment
    FROM 
        PostHistory ph
    JOIN 
        Posts p ON p.Id = ph.PostId
    WHERE 
        ph.CreationDate > CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '30 days' AND 
        (ph.PostHistoryTypeId BETWEEN 10 AND 12)
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.CommentCount,
    tp.NetScore,
    tp.UserBadge,
    COUNT(ph.PostId) AS RecentActivityCount,
    MAX(ph.CreationDate) AS LastActivityDate
FROM 
    TopPosts tp
LEFT JOIN 
    PostHistoryCTE ph ON tp.PostId = ph.PostId
GROUP BY 
    tp.PostId, tp.Title, tp.CommentCount, tp.NetScore, tp.UserBadge
HAVING 
    COUNT(ph.PostId) > 3
ORDER BY 
    tp.NetScore DESC, tp.CommentCount DESC;
