WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
),
TopPosts AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.OwnerDisplayName
    FROM 
        RankedPosts rp
    WHERE 
        rp.PostRank <= 5 
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
PostVoteCounts AS (
    SELECT 
        v.PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes v
    GROUP BY 
        v.PostId
)
SELECT 
    tp.Title,
    tp.Score,
    tp.OwnerDisplayName,
    ub.BadgeCount,
    ub.HighestBadgeClass,
    pvc.UpVotes,
    pvc.DownVotes,
    CASE 
        WHEN tp.CreationDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days' THEN 'Old Question'
        ELSE 'Recent Question'
    END AS PostAge,
    STUFF((
        SELECT 
            ', ' + COALESCE(T.Tags, 'No Tags')
        FROM 
            (SELECT STRING_AGG(tag.TagName, ', ') AS Tags 
             FROM Tags tag 
             WHERE tag.WikiPostId IN (SELECT p.WikiPostId FROM Posts p WHERE p.Id = tp.Id) 
             GROUP BY tag.Id) T
    ), 1, 2, '') AS TagsList
FROM 
    TopPosts tp
LEFT JOIN 
    UserBadges ub ON tp.OwnerDisplayName = (SELECT u.DisplayName FROM Users u WHERE u.Id = ub.UserId)
LEFT JOIN 
    PostVoteCounts pvc ON tp.Id = pvc.PostId
ORDER BY 
    tp.Score DESC, 
    ub.BadgeCount DESC;