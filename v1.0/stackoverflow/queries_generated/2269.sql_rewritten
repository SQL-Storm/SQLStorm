WITH UserActivity AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(DISTINCT P.Id) AS PostCount,
        SUM(CASE WHEN P.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts,
        SUM(CASE WHEN P.Score < 0 THEN 1 ELSE 0 END) AS NegativePosts,
        COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY U.Id ORDER BY COUNT(DISTINCT P.Id) DESC) AS Rank
    FROM 
        Users U
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId 
    WHERE 
        U.Reputation > 1000
    GROUP BY 
        U.Id, U.DisplayName
),
PostDetails AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.Score,
        ARRAY_AGG(DISTINCT T.TagName) AS Tags,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount
    FROM 
        Posts P
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(P.Tags, ',')) AS TagName ON TRUE
    LEFT JOIN 
        Tags T ON TagName = T.TagName
    WHERE 
        P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        P.Id, P.Title, P.CreationDate, P.Score
),
ClosedPosts AS (
    SELECT 
        P.Id AS PostId,
        MAX(PH.CreationDate) AS LastClosedDate
    FROM 
        PostHistory PH
    JOIN 
        Posts P ON PH.PostId = P.Id
    WHERE 
        PH.PostHistoryTypeId = 10
    GROUP BY 
        P.Id
)
SELECT 
    UA.DisplayName,
    UA.PostCount,
    UA.PositivePosts,
    UA.NegativePosts,
    PD.PostId,
    PD.Title,
    PD.CreationDate,
    PD.Score,
    PD.Tags,
    COALESCE(CP.LastClosedDate, 'Never Closed') AS LastClosedDate,
    UA.Rank
FROM 
    UserActivity UA
JOIN 
    PostDetails PD ON UA.UserId = PD.OwnerUserId
LEFT JOIN 
    ClosedPosts CP ON PD.PostId = CP.PostId
WHERE 
    UA.Rank <= 10
ORDER BY 
    UA.PostCount DESC, UA.DisplayName;