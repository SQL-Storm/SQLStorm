
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.OwnerUserId,
        DENSE_RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpvoteCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownvoteCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= '2023-10-01 12:34:56'::timestamp - INTERVAL '1 year'
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(*) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)
SELECT 
    u.DisplayName,
    u.Reputation,
    COALESCE(rb.Rank, 0) AS PostRank,
    COALESCE(rb.UpvoteCount, 0) AS Upvotes,
    COALESCE(rb.DownvoteCount, 0) AS Downvotes,
    COALESCE(ub.BadgeCount, 0) AS TotalBadges,
    ub.BadgeNames,
    ARRAY_AGG(DISTINCT lt.Name) AS LinkTypes
FROM 
    Users u
LEFT JOIN 
    RankedPosts rb ON u.Id = rb.OwnerUserId
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
LEFT JOIN 
    Posts p ON p.OwnerUserId = u.Id
LEFT JOIN 
    PostLinks pl ON pl.PostId = p.Id
LEFT JOIN 
    LinkTypes lt ON pl.LinkTypeId = lt.Id
GROUP BY 
    u.Id, u.DisplayName, u.Reputation, rb.Rank, ub.BadgeCount, ub.BadgeNames
ORDER BY 
    u.Reputation DESC, PostRank ASC
LIMIT 50;
