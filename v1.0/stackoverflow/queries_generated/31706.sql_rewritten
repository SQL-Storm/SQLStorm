WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.AnswerCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
),
LatestPostHistory AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.UserId,
        ph.CreationDate,
        ph.Comment,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS rn
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.CreationDate,
    rp.AnswerCount,
    rp.OwnerDisplayName,
    COALESCE(up.GoldBadges, 0) AS GoldBadges,
    COALESCE(up.SilverBadges, 0) AS SilverBadges,
    COALESCE(up.BronzeBadges, 0) AS BronzeBadges,
    CASE 
        WHEN lph.PostId IS NOT NULL THEN 
            CASE WHEN lph.PostHistoryTypeId = 10 THEN 'Closed' 
                 WHEN lph.PostHistoryTypeId = 11 THEN 'Reopened' 
            END 
        ELSE 'No Recent Closure/Reopen Action'
    END AS ClosureStatus
FROM 
    RankedPosts rp
LEFT JOIN 
    LatestPostHistory lph ON rp.PostId = lph.PostId AND lph.rn = 1
LEFT JOIN 
    UserBadges up ON rp.OwnerUserId = up.UserId
WHERE 
    rp.rn = 1 
ORDER BY 
    rp.CreationDate DESC
LIMIT 10;