
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserPostRank,
        COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS UserPostCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
),
PostDetails AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation,
        COALESCE(b.Count, 0) AS BadgeCount,
        CASE 
            WHEN rp.UserPostRank = 1 THEN 'Top Post' 
            ELSE 'Regular Post' 
        END AS PostType,
        CASE 
            WHEN rp.Score IS NULL THEN 'No Votes'
            ELSE 
                CASE 
                    WHEN rp.Score > 0 THEN 'Positive'
                    ELSE 'Negative'
                END
        END AS VoteStatus
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Users u ON rp.OwnerUserId = u.Id
    LEFT JOIN 
        (SELECT UserId, COUNT(*) AS Count 
         FROM Badges 
         GROUP BY UserId) b ON u.Id = b.UserId
    WHERE 
        rp.UserPostCount > 5
),
TopPosts AS (
    SELECT 
        pd.Id,
        pd.Title,
        pd.Score,
        pd.CreationDate,
        pd.OwnerDisplayName,
        pd.Reputation,
        pd.BadgeCount,
        pd.PostType,
        pd.VoteStatus,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = pd.Id AND v.VoteTypeId = 2) AS UpvoteCount,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = pd.Id AND v.VoteTypeId = 3) AS DownvoteCount
    FROM 
        PostDetails pd
    WHERE 
        pd.Reputation > 100
),
PostHistoryExtract AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes,
        MIN(ph.CreationDate) AS FirstHistory,
        MAX(ph.CreationDate) AS MostRecentHistory
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
)
SELECT 
    tp.Title,
    tp.OwnerDisplayName,
    tp.Score,
    tp.VoteStatus,
    tp.UpvoteCount,
    tp.DownvoteCount,
    phe.HistoryTypes,
    phe.FirstHistory,
    phe.MostRecentHistory
FROM 
    TopPosts tp
LEFT JOIN 
    PostHistoryExtract phe ON tp.Id = phe.PostId
WHERE 
    tp.UpvoteCount - tp.DownvoteCount > 10
ORDER BY 
    tp.Score DESC, 
    tp.CreationDate DESC;
