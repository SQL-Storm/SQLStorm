
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId IN (1, 2)  
    GROUP BY 
        p.Id, p.Title, p.OwnerUserId, p.CreationDate
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
ClosedPostHistory AS (
    SELECT 
        ph.PostId,
        MAX(ph.CreationDate) AS LastClosedDate
    FROM 
        PostHistory ph 
    WHERE 
        ph.PostHistoryTypeId = 10 
    GROUP BY 
        ph.PostId
),
Analytics AS (
    SELECT 
        p.Title,
        rp.Rank,
        ub.BadgeCount,
        ch.LastClosedDate,
        COALESCE(ch.LastClosedDate > p.CreationDate, FALSE) AS WasClosedAfterCreation
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges ub ON rp.OwnerUserId = ub.UserId
    LEFT JOIN 
        ClosedPostHistory ch ON rp.PostId = ch.PostId
)
SELECT 
    a.Title,
    a.Rank,
    a.BadgeCount,
    a.LastClosedDate,
    a.WasClosedAfterCreation,
    CASE 
        WHEN a.WasClosedAfterCreation THEN 'Closed After Creation'
        ELSE 'Not Closed'
    END AS ClosureStatus
FROM 
    Analytics a
WHERE 
    a.Rank = 1  
ORDER BY 
    a.BadgeCount DESC NULLS LAST;
