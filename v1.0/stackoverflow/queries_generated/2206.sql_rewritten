WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        U.DisplayName AS OwnerDisplayName,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Users U ON p.OwnerUserId = U.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, U.DisplayName
),
PostStats AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.OwnerDisplayName,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount,
        CASE 
            WHEN rp.RankScore = 1 THEN 'Top Post'
            WHEN rp.RankScore BETWEEN 2 AND 5 THEN 'High Performer'
            ELSE 'Regular Post'
        END AS PostCategory
    FROM 
        RankedPosts rp
)
SELECT 
    ps.OwnerDisplayName,
    COUNT(ps.Id) AS TotalPosts,
    SUM(ps.ViewCount) AS TotalViews,
    AVG(ps.Score) AS AverageScore,
    STRING_AGG(DISTINCT ps.PostCategory, ', ') AS Categories
FROM 
    PostStats ps
JOIN 
    Badges b ON ps.OwnerDisplayName = b.UserId
WHERE 
    b.Date >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
GROUP BY 
    ps.OwnerDisplayName
ORDER BY 
    TotalPosts DESC
LIMIT 10;