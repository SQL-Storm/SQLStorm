WITH UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers,
        SUM(CASE WHEN p.PostTypeId = 1 AND p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AcceptedAnswers,
        AVG(p.Score) AS AvgScore
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId, 
        DisplayName, 
        TotalPosts, 
        Questions, 
        Answers, 
        AcceptedAnswers, 
        AvgScore,
        RANK() OVER (ORDER BY TotalPosts DESC) as UserRank
    FROM 
        UserPostStats
    WHERE 
        TotalPosts > 0
),
PostInteractions AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
),
PostDetails AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        COALESCE(pi.CommentCount, 0) AS CommentCount,
        COALESCE(pi.UpVotes, 0) AS UpVotes,
        COALESCE(pi.DownVotes, 0) AS DownVotes,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank
    FROM 
        Posts p
    LEFT JOIN 
        PostInteractions pi ON p.Id = pi.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
)
SELECT 
    tu.DisplayName,
    pd.Title,
    pd.ViewCount,
    pd.CommentCount,
    pd.UpVotes,
    pd.DownVotes,
    pd.CreationDate,
    (SELECT COUNT(1) 
     FROM PostHistory ph 
     WHERE ph.PostId = pd.Id 
     AND ph.CreationDate > pd.CreationDate) AS EditCount,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Tags t 
     WHERE t.Id IN (SELECT UNNEST(string_to_array(substring(pd.Tags, 2, length(pd.Tags)-2), '><')::int[]))) AS Tags,
    (SELECT COUNT(1) 
     FROM Badges b 
     WHERE b.UserId = tu.UserId AND b.Class = 1) AS GoldBadges
FROM 
    TopUsers tu
JOIN 
    PostDetails pd ON pd.Id IN (SELECT p.Id 
                                  FROM Posts p 
                                  WHERE p.OwnerUserId = tu.UserId) 
WHERE 
    tu.UserRank <= 10
    AND pd.ViewCount > 100
ORDER BY 
    pd.ViewCount DESC
LIMIT 5;