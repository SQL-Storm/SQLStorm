
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        pt.Name AS PostTypeName,
        COALESCE(COUNT(c.Id), 0) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        DENSE_RANK() OVER (PARTITION BY pt.Id ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(day, -30, '2024-10-01')
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, u.DisplayName, pt.Name
),

PostAgg AS (
    SELECT 
        PostId,
        Title,
        OwnerDisplayName,
        PostTypeName,
        CreationDate,
        CommentCount,
        UpVotes,
        DownVotes,
        (UpVotes - DownVotes) AS Score
    FROM 
        RankedPosts
    WHERE 
        Rank <= 10
)

SELECT 
    pa.PostId,
    pa.Title,
    pa.OwnerDisplayName,
    pa.PostTypeName,
    pa.CreationDate,
    pa.CommentCount,
    pa.UpVotes,
    pa.DownVotes,
    pa.Score,
    CASE 
        WHEN pa.Score > 0 THEN 'Positive'
        WHEN pa.Score < 0 THEN 'Negative'
        ELSE 'Neutral'
    END AS ScoreCategory
FROM 
    PostAgg pa
ORDER BY 
    pa.Score DESC, pa.CreationDate DESC;
