WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        0 AS Level,
        CAST(p.Title AS VARCHAR(MAX)) AS Path
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        p2.Id AS PostId,
        p2.Title,
        p2.CreationDate,
        p2.OwnerUserId,
        rp.Level + 1,
        CAST(rp.Path + ' -> ' + p2.Title AS VARCHAR(MAX)) AS Path
    FROM 
        Posts p2
    JOIN 
        RecursivePostCTE rp ON p2.ParentId = rp.PostId
    WHERE 
        p2.PostTypeId = 2 
),
PostVoteSummary AS (
    SELECT 
        p.Id AS PostId,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes, 
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes, 
        COUNT(v.Id) AS TotalVotes 
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId 
    GROUP BY 
        p.Id
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
FinalResults AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        u.Id AS UserId,
        u.DisplayName,
        ps.UpVotes,
        ps.DownVotes,
        ub.BadgeCount,
        rp.Path,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY rp.CreationDate DESC) AS UserPostRank
    FROM 
        RecursivePostCTE rp
    JOIN 
        Users u ON rp.OwnerUserId = u.Id
    LEFT JOIN 
        PostVoteSummary ps ON rp.PostId = ps.PostId
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
)

SELECT 
    fr.PostId,
    fr.Title,
    fr.CreationDate,
    fr.DisplayName,
    fr.UpVotes,
    fr.DownVotes,
    COALESCE(fr.BadgeCount, 0) AS BadgeCount,
    fr.Path,
    fr.UserPostRank
FROM 
    FinalResults fr
WHERE 
    fr.UserPostRank <= 5 
ORDER BY 
    fr.CreationDate DESC;