
WITH RecursiveTagCounts AS (
    SELECT 
        Tags.TagName,
        COUNT(Posts.Id) AS PostCount
    FROM 
        Tags
    LEFT JOIN 
        Posts ON Tags.Id = ANY(string_to_array(SUBSTRING(Posts.Tags FROM 2 FOR LENGTH(Posts.Tags) - 2), '><')::TEXT[])
    GROUP BY 
        Tags.TagName
), PopularPosts AS (
    SELECT 
        P.Id,
        P.Title,
        P.CreationDate,
        U.DisplayName AS Owner,
        COUNT(C.Id) AS CommentCount,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount
    FROM 
        Posts P
    JOIN 
        Users U ON P.OwnerUserId = U.Id
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    WHERE 
        P.PostTypeId = 1 
    GROUP BY 
        P.Id, P.Title, P.CreationDate, U.DisplayName
    HAVING 
        COUNT(C.Id) > 0 OR SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) > 10 
), TopTags AS (
    SELECT 
        T.TagName,
        TC.PostCount,
        ROW_NUMBER() OVER (ORDER BY TC.PostCount DESC) AS Rank
    FROM 
        RecursiveTagCounts TC
    JOIN 
        Tags T ON TC.TagName = T.TagName
    WHERE 
        TC.PostCount > 5 
)
SELECT 
    TP.Title AS PopularPostTitle,
    TP.CreationDate,
    TP.Owner AS PostOwner,
    TT.TagName AS AssociatedTag,
    TT.PostCount AS TagPostCount
FROM 
    PopularPosts TP
JOIN 
    Posts P ON TP.Id = P.Id
JOIN 
    UNNEST(string_to_array(SUBSTRING(P.Tags FROM 2 FOR LENGTH(P.Tags) - 2), '><')) AS TagIds ON P.Id = ANY(TagIds)
JOIN 
    TopTags TT ON TT.TagName = TagIds
ORDER BY 
    TT.Rank, TP.UpvoteCount DESC
LIMIT 10;
