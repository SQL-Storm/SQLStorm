WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank,
        COALESCE(NULLIF(p.Title, ''), 'Untitled') AS TitleFallback
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 YEAR'
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN p.Score >= 0 THEN p.Score ELSE 0 END) AS PositiveScore,
        SUM(CASE WHEN p.Score < 0 THEN p.Score ELSE 0 END) AS NegativeScore
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id
    HAVING 
        COUNT(DISTINCT p.Id) > 10
),
RecentVotes AS (
    SELECT 
        v.PostId,
        COUNT(DISTINCT v.UserId) AS TotalVotes
    FROM 
        Votes v
    WHERE 
        v.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 DAY'
    GROUP BY 
        v.PostId
)
SELECT 
    p.PostId,
    p.TitleFallback,
    u.DisplayName AS Author,
    p.Score,
    CASE 
        WHEN rv.TotalVotes IS NULL THEN 0
        ELSE rv.TotalVotes 
    END AS RecentVoteCount,
    (CASE 
        WHEN (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.PostId) > 0 
        THEN 'Has Comments' 
        ELSE 'No Comments' 
    END) AS CommentsStatus,
    (SELECT STUFF((SELECT ', ' + bt.Name 
                   FROM Badges bt 
                   WHERE bt.UserId = p.OwnerUserId 
                   FOR XML PATH('')), 1, 2, '')) AS UserBadges
FROM 
    RankedPosts p
INNER JOIN 
    TopUsers u ON p.OwnerUserId = u.UserId
LEFT JOIN 
    RecentVotes rv ON p.PostId = rv.PostId
WHERE 
    p.Rank = 1
ORDER BY 
    p.Score DESC, 
    u.PositiveScore DESC;