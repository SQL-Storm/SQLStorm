
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        u.DisplayName AS Author,
        p.CreationDate,
        COALESCE(p.Score, 0) AS PostScore,
        COUNT(c.Id) AS CommentCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVoteCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY COALESCE(p.Score, 0) DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id 
    LEFT JOIN 
        Comments c ON p.Id = c.PostId 
    WHERE 
        p.PostTypeId IN (1, 2) 
    GROUP BY 
        p.Id, p.Title, u.DisplayName, p.CreationDate, p.Score
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Author,
        CreationDate,
        PostScore,
        CommentCount,
        UpVoteCount,
        DownVoteCount
    FROM 
        RankedPosts
    WHERE 
        Rank <= 10
)
SELECT 
    tp.Title,
    tp.Author,
    tp.CreationDate,
    tp.PostScore,
    tp.CommentCount,
    tp.UpVoteCount,
    tp.DownVoteCount,
    t.TagName
FROM 
    TopPosts tp
LEFT JOIN 
    (SELECT 
        p.Id AS PostId, 
        STRING_AGG(t.TagName, ', ') AS TagName
     FROM 
        Posts p 
     JOIN 
        Tags t ON t.Id = ANY(string_to_array(p.Tags, ',')::text[]) 
     GROUP BY 
        p.Id) AS t ON tp.PostId = t.PostId
ORDER BY 
    tp.PostScore DESC, 
    tp.CreationDate DESC;
