WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBounty,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(RP.ViewCount), 0) AS TotalViews,
        COALESCE(SUM(RP.Upvotes), 0) AS TotalUpvotes,
        COALESCE(SUM(RP.Downvotes), 0) AS TotalDownvotes,
        COUNT(DISTINCT RP.PostId) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        RankedPosts RP ON u.Id = RP.OwnerUserId
    GROUP BY 
        u.Id
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        Reputation,
        TotalViews,
        TotalUpvotes,
        TotalDownvotes,
        PostCount,
        RANK() OVER (ORDER BY Reputation DESC) AS UserRank
    FROM 
        UserStats
)
SELECT 
    tu.DisplayName,
    tu.Reputation,
    tu.TotalViews,
    tu.TotalUpvotes,
    tu.TotalDownvotes,
    tu.PostCount,
    CASE 
        WHEN tu.PostCount > 0 THEN ROUND((tu.TotalUpvotes::decimal / (tu.TotalUpvotes + tu.TotalDownvotes + NULLIF(tu.TotalDownvotes, 0))) * 100, 2)
        ELSE NULL 
    END AS UpvotePercentage,
    CASE 
        WHEN tu.Reputation > 1000 AND tu.PostCount > 10 THEN 'Gold Contributor'
        WHEN tu.Reputation > 500 THEN 'Silver Contributor'
        ELSE 'Bronze Contributor'
    END AS ContributionLevel
FROM 
    TopUsers tu
WHERE 
    tu.UserRank <= 10
ORDER BY 
    tu.UserRank;