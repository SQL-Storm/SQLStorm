WITH RecursivePostChain AS (
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        0 AS Depth,
        p.Title,
        p.CreationDate,
        p.OwnerUserId
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.ParentId,
        rpc.Depth + 1,
        p.Title,
        p.CreationDate,
        p.OwnerUserId
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostChain rpc ON p.ParentId = rpc.PostId
)

SELECT 
    u.DisplayName,
    u.Reputation,
    COUNT(DISTINCT rpb.PostId) AS TotalPosts,
    COUNT(DISTINCT CASE 
        WHEN (p.PostTypeId = 1 AND rpb.Depth = 0) 
        THEN p.Id 
        ELSE NULL 
    END) AS QuestionCount,
    COUNT(DISTINCT CASE 
        WHEN (p.PostTypeId = 2) 
        THEN p.Id 
        ELSE NULL 
    END) AS AnswerCount,
    COALESCE(SUM(CASE 
        WHEN (p.Score IS NULL OR p.Score < 0) 
        THEN 0 
        ELSE p.Score 
    END), 0) AS TotalScore,
    STRING_AGG(DISTINCT tags.TagName, ', ') AS AllTags
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    RecursivePostChain rpb ON p.Id = rpb.PostId
LEFT JOIN 
    LATERAL (
        SELECT 
            unnest(string_to_array(p.Tags, '<>')) AS TagName 
        WHERE 
            p.PostTypeId = 1
    ) tags ON true
WHERE 
    u.Reputation > (
        SELECT 
            AVG(Reputation) 
        FROM 
            Users
    ) 
    AND EXISTS (
        SELECT 
            1 
        FROM 
            Votes v 
        WHERE 
            v.PostId = p.Id 
            AND v.VoteTypeId = 2 
            AND v.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    )
GROUP BY 
    u.Id
HAVING 
    COUNT(DISTINCT CASE 
        WHEN p.PostTypeId = 1 THEN p.Id 
    END) > 0 
    OR COUNT(DISTINCT CASE 
        WHEN p.PostTypeId = 2 AND p.Score > 0 THEN p.Id 
    END) > 2
ORDER BY 
    TotalScore DESC NULLS LAST
LIMIT 100;