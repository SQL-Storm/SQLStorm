WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COALESCE(p.AcceptedAnswerId, -1) AS AcceptedAnswerId,
        COALESCE(u.DisplayName, 'Anonymous') AS OwnerDisplayName
    FROM Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    WHERE p.PostTypeId = 1 
), 
UserBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeNames,
        COUNT(b.Id) AS TotalBadges
    FROM Badges b
    GROUP BY b.UserId
),
PostVoteCounts AS (
    SELECT 
        v.PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Votes v
    GROUP BY v.PostId
)
SELECT 
    rp.Id,
    rp.Title,
    rp.Score,
    rp.CreationDate,
    rp.OwnerDisplayName,
    ub.BadgeNames,
    pvc.UpVotes,
    pvc.DownVotes,
    CASE 
        WHEN rp.AcceptedAnswerId != -1 THEN 'Accepted'
        ELSE 'Not Accepted'
    END AS AnswerStatus,
    COUNT(c.Id) FILTER (WHERE c.CreationDate > cast('2024-10-01' as date) - INTERVAL '30 days') AS RecentComments
FROM RankedPosts rp
LEFT JOIN UserBadges ub ON rp.OwnerUserId = ub.UserId
LEFT JOIN PostVoteCounts pvc ON rp.Id = pvc.PostId
LEFT JOIN Comments c ON rp.Id = c.PostId
GROUP BY 
    rp.Id, 
    rp.Title, 
    rp.Score, 
    rp.CreationDate, 
    rp.OwnerDisplayName, 
    ub.BadgeNames, 
    pvc.UpVotes, 
    pvc.DownVotes
HAVING 
    SUM(CASE WHEN c.Score > 0 THEN 1 ELSE 0 END) > 0
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate DESC;