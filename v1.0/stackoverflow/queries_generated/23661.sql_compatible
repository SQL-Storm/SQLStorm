
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.Tags,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        COUNT(DISTINCT CASE WHEN p.PostTypeId = 1 THEN p.Id END) AS QuestionCount, 
        COUNT(DISTINCT CASE WHEN p.PostTypeId = 2 THEN p.Id END) AS AnswerCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.Reputation
),
ActiveUserPosts AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS ActivePostCount,
        AVG(p.ViewCount) AS AverageViewCount,
        SUM(CASE WHEN p.ClosedDate IS NOT NULL THEN 1 ELSE 0 END) AS ClosedPostCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 months'
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    u.Id AS UserId,
    u.DisplayName,
    u.Reputation,
    us.PostCount,
    us.BadgeCount,
    us.TotalBounty,
    COALESCE(ap.ActivePostCount, 0) AS ActivePostCount,
    COALESCE(ap.AverageViewCount, 0) AS AverageViewCount,
    COALESCE(ap.ClosedPostCount, 0) AS ClosedPostCount,
    ARRAY_AGG(DISTINCT rp.Title) AS RecentPosts,
    STRING_AGG(DISTINCT t.TagName, ', ') AS TagsUsed,
    CASE 
        WHEN us.Reputation > 1000 THEN 'High Reputation' 
        WHEN us.Reputation BETWEEN 500 AND 1000 THEN 'Medium Reputation' 
        ELSE 'Low Reputation' 
    END AS ReputationCategory
FROM 
    Users u
JOIN 
    UserStats us ON u.Id = us.UserId
LEFT JOIN 
    ActiveUserPosts ap ON u.Id = ap.UserId
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    (SELECT DISTINCT unnest(string_to_array(Tags, '<>')) AS TagName FROM Posts) t ON t.TagName IS NOT NULL
LEFT JOIN 
    RankedPosts rp ON rp.PostId = p.Id
WHERE 
    u.Reputation IS NOT NULL AND 
    u.CreationDate < TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
GROUP BY 
    u.Id, u.DisplayName, u.Reputation, us.PostCount, us.BadgeCount, us.TotalBounty, ap.ActivePostCount, ap.AverageViewCount, ap.ClosedPostCount
HAVING 
    COUNT(DISTINCT rp.PostId) > 3
ORDER BY 
    u.Reputation DESC, ap.ActivePostCount DESC;
