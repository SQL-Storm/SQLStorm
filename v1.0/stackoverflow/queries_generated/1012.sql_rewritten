WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
        AND p.Score > 0
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
TopPosts AS (
    SELECT *
    FROM RankedPosts
    WHERE PostRank = 1
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
)
SELECT 
    t.Title,
    t.CreationDate,
    t.Score,
    t.CommentCount,
    t.UpVotes,
    t.DownVotes,
    u.UserId,
    u.Reputation,
    u.BadgeCount
FROM 
    TopPosts t
JOIN 
    Users u ON t.PostId = (SELECT OwnerUserId FROM Posts WHERE Id = t.PostId)
JOIN 
    UserReputation ur ON u.Id = ur.UserId
WHERE 
    u.Reputation > 1000
ORDER BY 
    t.Score DESC
LIMIT 10
UNION ALL
SELECT 
    'Total Posts' AS Title,
    NULL AS CreationDate,
    COUNT(t.PostId) AS Score,
    NULL AS CommentCount,
    NULL AS UpVotes,
    NULL AS DownVotes,
    NULL AS UserId,
    NULL AS Reputation,
    NULL AS BadgeCount
FROM 
    TopPosts t
WHERE 
    t.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month'
GROUP BY 
    1;