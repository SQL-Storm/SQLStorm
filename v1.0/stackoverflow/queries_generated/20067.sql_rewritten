WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(v.VoteTypeId = 2) AS UpVotes,  
        SUM(v.VoteTypeId = 3) AS DownVotes, 
        COALESCE(SUM(b.Class = 1), 0) AS GoldBadges,
        COALESCE(SUM(b.Class = 2), 0) AS SilverBadges,
        COALESCE(SUM(b.Class = 3), 0) AS BronzeBadges
    FROM Users u 
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AcceptedAnswerId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        MAX(CASE WHEN p.ClosedDate IS NOT NULL THEN 1 ELSE 0 END) AS IsClosed,
        ARRAY_AGG(DISTINCT t.TagName) AS TagsArray
    FROM Posts p 
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN LATERAL (
        SELECT unnest(string_to_array(p.Tags, '><')) AS TagName
    ) AS t ON TRUE
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.AcceptedAnswerId
),
TopPosts AS (
    SELECT 
        pd.PostId,
        pd.Title,
        u.DisplayName AS Owner,
        pd.CreationDate,
        pd.Score,
        pd.ViewCount,
        pd.CommentCount,
        pd.IsClosed,
        ROW_NUMBER() OVER (PARTITION BY pd.IsClosed ORDER BY pd.Score DESC, pd.ViewCount DESC) AS Rank
    FROM PostDetails pd 
    JOIN Users u ON pd.PostId IS NOT NULL AND u.Id = (SELECT OwnerUserId FROM Posts WHERE Id = pd.PostId)
    WHERE pd.Score > 10 
),
VoterSummary AS (
    SELECT 
        v.UserId,
        COUNT(DISTINCT v.PostId) AS PostsVoted,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoterCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoterCount
    FROM Votes v
    GROUP BY v.UserId
),
FinalStats AS (
    SELECT 
        ua.UserId,
        ua.DisplayName,
        ua.PostCount,
        ua.UpVotes,
        ua.DownVotes,
        ua.GoldBadges,
        ua.SilverBadges,
        ua.BronzeBadges,
        COALESCE(vs.PostsVoted, 0) AS TotalVotedPosts,
        COALESCE(vs.UpVoterCount, 0) AS TotalUpVotesGiven,
        COALESCE(vs.DownVoterCount, 0) AS TotalDownVotesGiven
    FROM UserActivity ua
    LEFT JOIN VoterSummary vs ON ua.UserId = vs.UserId
)
SELECT 
    f.UserId,
    f.DisplayName,
    f.PostCount,
    f.UpVotes,
    f.DownVotes,
    f.GoldBadges,
    f.SilverBadges,
    f.BronzeBadges,
    tp.Title AS TopPostTitle,
    tp.Rank,
    tp.CommentCount,
    tp.IsClosed
FROM FinalStats f
LEFT JOIN TopPosts tp ON f.PostCount > 0
ORDER BY f.UpVotes DESC, f.PostCount DESC, tp.Rank;