
WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        p.FavoriteCount,
        p.CreationDate,
        u.Reputation AS OwnerReputation,
        pt.Name AS PostType,
        ARRAY_LENGTH(string_to_array(p.Tags, '>')) AS TagCount,
        COALESCE(COUNT(DISTINCT c.Id), 0) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
        LEFT JOIN Users u ON p.OwnerUserId = u.Id
        LEFT JOIN PostTypes pt ON p.PostTypeId = pt.Id
        LEFT JOIN Comments c ON c.PostId = p.Id
        LEFT JOIN Votes v ON v.PostId = p.Id
    GROUP BY 
        p.Id, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount, 
        p.FavoriteCount, p.CreationDate, u.Reputation, pt.Name
),
PostHistoryStats AS (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS EditCount,
        COUNT(DISTINCT ph.UserId) AS EditorsCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)

SELECT 
    ps.PostId,
    ps.Score,
    ps.ViewCount,
    ps.AnswerCount,
    ps.CommentCount,
    ps.FavoriteCount,
    ps.CreationDate,
    ps.OwnerReputation,
    ps.PostType,
    ps.TagCount,
    phs.EditCount,
    phs.EditorsCount,
    phs.LastEditDate,
    ps.UpVotes,
    ps.DownVotes
FROM 
    PostStats ps
    LEFT JOIN PostHistoryStats phs ON ps.PostId = phs.PostId
ORDER BY 
    ps.Score DESC, 
    ps.ViewCount DESC 
LIMIT 100;
