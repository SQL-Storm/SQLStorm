WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        CreationDate,
        Score,
        1 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL  
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.Score,
        ph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy ph ON p.ParentId = ph.Id  
),

AggregatedPostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.UserId) AS VoteCount,
        AVG(v.BountyAmount) AS AverageBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, 
        p.Title
),

UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)

SELECT 
    p.Title,
    p.Score,
    p.CommentCount,
    p.VoteCount,
    p.AverageBounty,
    u.DisplayName,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    ROW_NUMBER() OVER (PARTITION BY ph.Level ORDER BY p.Score DESC) AS RankWithinLevel
FROM 
    AggregatedPostStats p
JOIN 
    Users u ON p.PostId = u.Id
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
JOIN 
    RecursivePostHierarchy ph ON p.PostId = ph.Id
WHERE 
    p.CommentCount > 5 
    AND (p.AverageBounty IS NULL OR p.AverageBounty > 10) 
ORDER BY 
    ph.Level, p.Score DESC;