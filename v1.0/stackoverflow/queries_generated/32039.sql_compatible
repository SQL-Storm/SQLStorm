
WITH RECURSIVE UserBadges AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        B.Name AS BadgeName,
        COUNT(B.Id) AS BadgeCount
    FROM Users U
    LEFT JOIN Badges B ON U.Id = B.UserId
    GROUP BY U.Id, U.DisplayName, B.Name
),
RankedPosts AS (
    SELECT 
        P.Id,
        P.Title,
        P.Score,
        P.ViewCount,
        U.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.Score DESC) AS PostRank,
        COUNT(C.Id) AS CommentCount
    FROM Posts P
    LEFT JOIN Users U ON P.OwnerUserId = U.Id
    LEFT JOIN Comments C ON P.Id = C.PostId
    WHERE P.PostTypeId = 1 
    GROUP BY P.Id, P.Title, P.Score, P.ViewCount, U.DisplayName
),
RecentPostHistory AS (
    SELECT 
        PH.PostId,
        PH.CreationDate,
        PHT.Name AS HistoryType,
        PH.UserDisplayName,
        ROW_NUMBER() OVER (PARTITION BY PH.PostId ORDER BY PH.CreationDate DESC) AS HistoryRank
    FROM PostHistory PH
    JOIN PostHistoryTypes PHT ON PH.PostHistoryTypeId = PHT.Id
    WHERE PH.UserId IS NOT NULL
)

SELECT 
    U.Id AS UserId,
    U.DisplayName,
    COUNT(DISTINCT B.Id) AS TotalBadges,
    SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
    SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
    SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges,
    SUM(COALESCE(RP.CommentCount, 0)) AS TotalComments,
    MAX(RP.Score) AS HighestPostScore,
    COUNT(DISTINCT RP.Id) AS TotalPosts,
    (SELECT MAX(CreationDate) FROM RecentPostHistory RPH 
     WHERE RPH.PostId IN (SELECT RP.Id FROM RankedPosts RP WHERE RP.OwnerDisplayName = U.DisplayName)) AS LastPostHistoryDate
FROM Users U
LEFT JOIN Badges B ON U.Id = B.UserId
LEFT JOIN RankedPosts RP ON U.Id = RP.OwnerUserId
GROUP BY U.Id, U.DisplayName
ORDER BY TotalBadges DESC, HighestPostScore DESC;
