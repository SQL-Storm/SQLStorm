WITH RecursiveTags AS (
    SELECT Id, TagName, Count, 1 AS Level
    FROM Tags
    WHERE Count > 0
    UNION ALL
    SELECT t.Id, t.TagName, t.Count, rt.Level + 1
    FROM Tags t
    JOIN RecursiveTags rt ON t.Id = (SELECT MIN(Id) FROM Tags WHERE Count > rt.Count)
),
UserBadges AS (
    SELECT u.Id AS UserId, COUNT(b.Id) AS BadgeCount
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
),
ActivePostStats AS (
    SELECT p.OwnerUserId, COUNT(p.Id) AS PostCount, SUM(p.Score) AS TotalScore, 
           MAX(p.CreationDate) AS LastPostDate
    FROM Posts p
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.OwnerUserId
),
TopUsers AS (
    SELECT u.Id, u.DisplayName, u.Reputation, ub.BadgeCount, aps.PostCount, aps.TotalScore
    FROM Users u
    JOIN UserBadges ub ON u.Id = ub.UserId
    JOIN ActivePostStats aps ON u.Id = aps.OwnerUserId
    ORDER BY u.Reputation DESC
    LIMIT 10
),
PostHistoryAnalytics AS (
    SELECT post_history.UserDisplayName, p.Title, p.CreationDate, 
           p.LastEditDate, ph.PostHistoryTypeId, COUNT(ph.Id) AS ChangeCount
    FROM PostHistory ph
    JOIN Posts p ON ph.PostId = p.Id
    GROUP BY post_history.UserDisplayName, p.Title, p.CreationDate, p.LastEditDate, ph.PostHistoryTypeId
    ORDER BY ChangeCount DESC
)
SELECT tu.Id AS UserId, tu.DisplayName, tu.Reputation, tu.BadgeCount, 
       tu.PostCount, tu.TotalScore, 
       rt.TagName,
       ph.UserDisplayName AS Editor, ph.Title AS EditedPost, 
       ph.CreationDate AS PostCreationDate, ph.LastEditDate AS PostLastEditDate, 
       ph.PostHistoryTypeId, ph.ChangeCount
FROM TopUsers tu
LEFT JOIN RecursiveTags rt ON tu.Reputation > rt.Count
LEFT JOIN PostHistoryAnalytics ph ON tu.Id = ph.UserId
ORDER BY tu.Reputation DESC, ChangeCount DESC;