
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(DISTINCT c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),

TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM 
        Users u
),

PopularTags AS (
    SELECT 
        t.TagName,
        t.Count,
        RANK() OVER (ORDER BY t.Count DESC) AS TagRank
    FROM 
        Tags t
)

SELECT 
    p.Title,
    u.DisplayName AS OwnerDisplayName,
    p.CreationDate,
    p.Score,
    c.CommentCount,
    STRING_AGG(t.TagName, ', ') AS Tags,
    COALESCE(p.LastActivityDate, 'No Activity') AS LastActivity,
    CASE 
        WHEN COALESCE(p.Score, 0) > 0 THEN 'Popular'
        ELSE 'Unpopular'
    END AS Popularity
FROM 
    RankedPosts p
JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    Comments c ON p.PostId = c.PostId
LEFT JOIN 
    PostsTags pt ON p.PostId = pt.PostId
LEFT JOIN 
    Tags t ON pt.TagId = t.Id
JOIN 
    TopUsers tu ON u.Id = tu.UserId AND tu.ReputationRank <= 10
LEFT JOIN 
    PopularTags ptg ON ptg.TagRank <= 5 
WHERE 
    p.UserPostRank <= 5 
GROUP BY 
    p.Title, u.DisplayName, p.Score, p.CreationDate, p.LastActivityDate, c.CommentCount
ORDER BY 
    p.Score DESC, p.CreationDate ASC
LIMIT 100;
