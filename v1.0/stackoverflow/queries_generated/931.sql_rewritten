WITH UserBadgeCounts AS (
    SELECT UserId, COUNT(*) AS BadgeCount
    FROM Badges
    WHERE Class = 1 
    GROUP BY UserId
), RecentPostActivity AS (
    SELECT p.Id AS PostId, 
           p.OwnerUserId, 
           COUNT(c.Id) AS CommentCount,
           SUM(v.VoteTypeId = 2) AS UpVoteCount, 
           SUM(v.VoteTypeId = 3) AS DownVoteCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY p.Id, p.OwnerUserId
), UserReputation AS (
    SELECT u.Id AS UserId,
           u.Reputation,
           COALESCE(ubc.BadgeCount, 0) AS GoldBadgeCount
    FROM Users u
    LEFT JOIN UserBadgeCounts ubc ON u.Id = ubc.UserId
), PostMetrics AS (
    SELECT p.Id AS PostId,
           u.DisplayName AS UserName,
           u.Reputation,
           p.Title,
           ra.CommentCount,
           ra.UpVoteCount,
           ra.DownVoteCount
    FROM Posts p
    JOIN RecentPostActivity ra ON p.Id = ra.PostId
    JOIN UserReputation u ON ra.OwnerUserId = u.UserId
    WHERE p.PostTypeId = 1 AND p.Score > 0
), RankedPosts AS (
    SELECT *,
           RANK() OVER (PARTITION BY Reputation ORDER BY Score DESC) AS RankWithinReputation
    FROM PostMetrics
)
SELECT *
FROM RankedPosts
WHERE RankWithinReputation <= 5
UNION ALL
SELECT p.Title,
       u.DisplayName,
       u.Reputation,
       NULL AS CommentCount,
       NULL AS UpVoteCount,
       NULL AS DownVoteCount
FROM Posts p
JOIN Users u ON p.OwnerUserId = u.Id
WHERE p.PostTypeId = 2 AND
      p.AcceptedAnswerId IS NOT NULL
ORDER BY Reputation DESC, Score DESC;