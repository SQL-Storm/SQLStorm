WITH UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        CASE 
            WHEN u.Reputation >= 1000 THEN 'High Reputation'
            WHEN u.Reputation >= 100 THEN 'Medium Reputation'
            WHEN u.Reputation >= 10 THEN 'Low Reputation'
            ELSE 'No Reputation'
        END AS ReputationCategory
    FROM 
        Users u
),
PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(a.Id) AS AnswerCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS RecentActivity
    FROM 
        Posts p
        LEFT JOIN Comments c ON p.Id = c.PostId
        LEFT JOIN Posts a ON p.Id = a.ParentId
        LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1   
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        COUNT(*) AS CloseCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)  
    GROUP BY 
        ph.PostId, ph.CreationDate
),
AggregatedData AS (
    SELECT 
        pm.PostId,
        pm.Title,
        pm.CreationDate,
        pm.ViewCount,
        pm.CommentCount,
        pm.AnswerCount,
        pm.UpVotes,
        pm.DownVotes,
        COALESCE(cp.CloseCount, 0) AS CloseCount,
        CASE 
            WHEN pm.UpVotes - pm.DownVotes > 0 THEN 'Positive'
            WHEN pm.UpVotes - pm.DownVotes < 0 THEN 'Negative'
            ELSE 'Neutral'
        END AS OverallSentiment
    FROM 
        PostMetrics pm
        LEFT JOIN ClosedPosts cp ON pm.PostId = cp.PostId
),
FinalResults AS (
    SELECT 
        ad.PostId,
        ad.Title,
        ad.CreationDate,
        ad.ViewCount,
        ad.CommentCount,
        ad.AnswerCount,
        ad.UpVotes,
        ad.DownVotes,
        ad.CloseCount,
        ad.OverallSentiment,
        ur.ReputationCategory
    FROM 
        AggregatedData ad
        LEFT JOIN UserReputation ur ON ad.PostId IN (SELECT ParentId FROM Posts WHERE Posts.OwnerUserId = ur.UserId)
)

SELECT 
    fr.Title,
    fr.CreationDate,
    fr.ViewCount,
    fr.CommentCount,
    fr.AnswerCount,
    fr.UpVotes,
    fr.DownVotes,
    fr.CloseCount,
    fr.OverallSentiment,
    fr.ReputationCategory,
    CASE 
        WHEN fr.CloseCount > 0 THEN 'Posts requiring attention'
        ELSE 'Active Discussion'
    END AS Status
FROM 
    FinalResults fr
WHERE 
    fr.ReputationCategory <> 'No Reputation'
ORDER BY 
    fr.ViewCount DESC,
    fr.CloseCount ASC;