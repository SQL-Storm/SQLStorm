
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate ASC) AS RN
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 AND
        p.Score IS NOT NULL
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
RecentPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= DATE '2024-10-01' - INTERVAL '30 days'
    GROUP BY 
        p.Id, p.Title, p.CreationDate
),
PostInteractions AS (
    SELECT 
        p.Id AS PostId,
        COALESCE(v.UpVotes, 0) AS UpVotes,
        COALESCE(v.DownVotes, 0) AS DownVotes,
        COALESCE(ph.EditCount, 0) AS EditCount
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
        FROM 
            Votes
        GROUP BY 
            PostId
    ) v ON p.Id = v.PostId
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(Id) AS EditCount
        FROM 
            PostHistory
        WHERE 
            PostHistoryTypeId IN (4, 5, 6) 
        GROUP BY 
            PostId
    ) ph ON p.Id = ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rb.BadgeCount,
    rb.BadgeNames,
    rp.ViewCount,
    COALESCE(CAST(rp.CreationDate AS DATE), DATE '1970-01-01') AS CreationDate,
    pi.UpVotes,
    pi.DownVotes,
    COALESCE(rc.CommentCount, 0) AS CommentCount,
    pi.EditCount,
    CASE 
        WHEN pi.UpVotes > pi.DownVotes THEN 'Popular'
        WHEN pi.UpVotes < pi.DownVotes THEN 'Unpopular'
        ELSE 'Neutral'
    END AS InteractionStatus,
    CASE 
        WHEN rb.BadgeCount IS NULL OR rb.BadgeCount = 0 THEN 'No Badges'
        ELSE 'Has Badges'
    END AS BadgeStatus,
    CASE 
        WHEN pi.EditCount > 5 THEN 'Heavily Edited'
        ELSE 'Slightly Edited'
    END AS EditStatus
FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges rb ON rp.OwnerUserId = rb.UserId
LEFT JOIN 
    RecentPosts rc ON rp.PostId = rc.Id
LEFT JOIN 
    PostInteractions pi ON rp.PostId = pi.PostId
WHERE 
    rp.RN = 1 
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate ASC
LIMIT 100;
