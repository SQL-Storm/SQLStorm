
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 YEAR'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(SUM(b.Class), 0) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
ActiveUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        ur.Reputation,
        ur.TotalBadges
    FROM 
        Users u
    JOIN 
        UserReputation ur ON u.Id = ur.UserId
    WHERE 
        u.LastAccessDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '6 MONTH'
)

SELECT 
    au.DisplayName,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.CommentCount,
    ur.Reputation,
    ur.TotalBadges
FROM 
    RankedPosts rp
JOIN 
    ActiveUsers au ON rp.PostRank = 1 
JOIN 
    UserReputation ur ON au.UserId = ur.UserId
LEFT JOIN 
    Votes v ON rp.PostId = v.PostId AND v.VoteTypeId = 2 
WHERE 
    ur.Reputation > 1000 
    AND (rp.Score IS NOT NULL OR rp.CommentCount > 0)
ORDER BY 
    rp.Score DESC, 
    rp.CommentCount DESC, 
    ur.Reputation DESC
LIMIT 50;
