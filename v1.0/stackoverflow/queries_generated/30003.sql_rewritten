WITH RecursivePostHierarchy AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        1 AS Level
    FROM Posts p
    WHERE p.ParentId IS NULL  

    UNION ALL
    
    SELECT
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.PostId
)

, UserPostStats AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS TotalPosts,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        AVG(COALESCE(p.ViewCount, 0)) AS AvgViewCount
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    GROUP BY u.Id, u.DisplayName
)

, TagUsage AS (
    SELECT 
        t.Id AS TagId,
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        AVG(c.Score) AS AvgCommentScore
    FROM Tags t
    JOIN Posts p ON (t.Id = ANY(string_to_array(p.Tags, ',')))  
    LEFT JOIN Comments c ON p.Id = c.PostId
    GROUP BY t.Id, t.TagName
)

SELECT
    u.DisplayName AS UserName,
    ups.TotalPosts,
    ups.TotalScore,
    ups.AvgViewCount,
    pht.PostId AS QuestionId,
    pht.Title AS QuestionTitle,
    pht.Level AS QuestionLevel,
    tg.TagName,
    tg.PostCount,
    tg.AvgCommentScore
FROM UserPostStats ups
INNER JOIN RecursivePostHierarchy pht ON ups.UserId = pht.PostId
LEFT JOIN TagUsage tg ON (pht.PostId = tg.TagId)
WHERE
    ups.TotalPosts > 5
    AND ups.TotalScore > 100
ORDER BY ups.TotalScore DESC, tg.PostCount DESC;