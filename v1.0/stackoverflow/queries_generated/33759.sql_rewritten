WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.Score,
        P.ViewCount,
        P.CreationDate,
        U.DisplayName AS Author,
        RANK() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC) AS ScoreRank,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount
    FROM 
        Posts P
    LEFT JOIN 
        Users U ON P.OwnerUserId = U.Id
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    WHERE 
        P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        P.Id, U.DisplayName
),
ClosedPostHistory AS (
    SELECT 
        PH.PostId,
        COUNT(*) AS CloseCount,
        MIN(PH.CreationDate) AS FirstClosedDate
    FROM 
        PostHistory PH
    WHERE 
        PH.PostHistoryTypeId = 10 
    GROUP BY 
        PH.PostId
),
TopPosts AS (
    SELECT 
        RP.PostId,
        RP.Title,
        RP.Score,
        RP.ViewCount,
        RP.Author,
        RP.CommentCount,
        COALESCE(CPH.CloseCount, 0) AS CloseCount,
        COALESCE(CPH.FirstClosedDate, 'No Closure') AS FirstClosedDate
    FROM 
        RankedPosts RP
    LEFT JOIN 
        ClosedPostHistory CPH ON RP.PostId = CPH.PostId
    WHERE 
        RP.ScoreRank <= 10 
)
SELECT 
    TP.*,
    CASE 
        WHEN TP.CloseCount > 0 THEN 'Closed'
        ELSE 'Open'
    END AS PostStatus,
    (SELECT STRING_AGG(TAG.TagName, ', ') 
     FROM Tags TAG 
     JOIN UNNEST(string_to_array(P.Tags, '><')) AS Tag ON TAG.TagName = Tag
     WHERE Tag IS NOT NULL) AS Tags
FROM 
    TopPosts TP
ORDER BY 
    TP.Score DESC, 
    TP.ViewCount DESC;