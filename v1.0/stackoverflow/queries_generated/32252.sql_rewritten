WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, 
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount 
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount,
        rp.UpVoteCount,
        rp.DownVoteCount,
        CASE 
            WHEN rp.Rank = 1 THEN 'Top Post'
            WHEN rp.Rank <= 5 THEN 'Featured Post'
            ELSE 'Regular Post'
        END AS PostCategory
    FROM RankedPosts rp
    WHERE rp.Rank <= 5 
),
UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostsCreated,
        SUM(p.ViewCount) AS TotalViews,
        COUNT(DISTINCT c.Id) AS TotalComments,
        COUNT(DISTINCT v.Id) AS TotalVotes
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY u.Id, u.DisplayName
),
EngagedUsers AS (
    SELECT 
        ue.UserId,
        ue.DisplayName,
        ue.PostsCreated,
        ue.TotalViews,
        ue.TotalComments,
        ue.TotalVotes,
        ROW_NUMBER() OVER (ORDER BY ue.TotalVotes DESC) AS EngagementRank
    FROM UserEngagement ue
    WHERE ue.TotalVotes > 0 
)
SELECT 
    tp.Title AS TopPostTitle,
    tp.ViewCount AS TopPostViews,
    tp.CommentCount AS TopPostComments,
    eu.DisplayName AS EngagedUser,
    eu.TotalVotes AS UserTotalVotes,
    eu.TotalViews AS UserTotalViews,
    tp.PostCategory
FROM TopPosts tp
INNER JOIN EngagedUsers eu ON tp.ViewCount > eu.TotalViews 
WHERE tp.Score > 10
ORDER BY tp.Score DESC, eu.UserTotalVotes DESC;