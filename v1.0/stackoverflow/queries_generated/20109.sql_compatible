
WITH RecursivePosts AS (
    SELECT 
        P.Id AS PostId, 
        P.Title, 
        P.ViewCount,
        P.Score,
        P.CreationDate,
        P.OwnerUserId,
        CAST(NULL AS VARCHAR(300)) AS ParentTitle, 
        0 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1 
    UNION ALL
    SELECT 
        P2.Id AS PostId, 
        P2.Title, 
        P2.ViewCount,
        P2.Score,
        P2.CreationDate,
        P2.OwnerUserId,
        RP.Title AS ParentTitle,
        RP.Level + 1 AS Level
    FROM 
        Posts P2
    JOIN RecursivePosts RP ON RP.PostId = P2.ParentId
    WHERE 
        P2.PostTypeId = 2 
),
AggregatedStats AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(DISTINCT P.Id) AS QuestionCount,
        SUM(COALESCE(P.ViewCount, 0)) AS TotalViews,
        COUNT(DISTINCT CASE WHEN P.Score > 0 THEN P.Id END) AS PositiveQuestions,
        COUNT(DISTINCT CASE WHEN P.Score <= 0 THEN P.Id END) AS NonPositiveQuestions
    FROM 
        Users U
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId AND P.PostTypeId = 1
    GROUP BY 
        U.Id, U.DisplayName
),
TopUsers AS (
    SELECT 
        UserId, 
        DisplayName, 
        TotalViews,
        ROW_NUMBER() OVER (ORDER BY TotalViews DESC) AS Rank
    FROM 
        AggregatedStats
    WHERE 
        QuestionCount > 5
),
DetailedAnalysis AS (
    SELECT
        RP.PostId,
        RP.Title,
        RP.ViewCount,
        RP.Score,
        RP.CreationDate,
        RP.OwnerUserId,
        U.DisplayName AS OwnerDisplayName,
        NTILE(5) OVER (ORDER BY RP.ViewCount DESC) AS ViewQuartile,
        COALESCE(B.BadgeCount, 0) AS BadgeCount,
        CASE 
            WHEN RP.Score IS NULL OR RP.Score < 0 THEN 'Needs Improvement' 
            ELSE 'Performing Well' 
        END AS PerformanceStatus
    FROM 
        RecursivePosts RP 
    LEFT JOIN 
        Users U ON RP.OwnerUserId = U.Id
    LEFT JOIN (
        SELECT 
            UserId, 
            COUNT(*) AS BadgeCount
        FROM 
            Badges 
        GROUP BY 
            UserId
    ) B ON U.Id = B.UserId
)
SELECT 
    TA.DisplayName,
    TA.TotalViews,
    DA.Title,
    DA.ViewCount,
    DA.Score,
    DA.CreationDate,
    DA.PerformanceStatus,
    DENSE_RANK() OVER (PARTITION BY TA.Rank ORDER BY DA.ViewCount DESC) AS ViewRank
FROM 
    TopUsers TA
JOIN 
    DetailedAnalysis DA ON TA.UserId = DA.OwnerUserId
WHERE 
    DA.Score >= (SELECT AVG(Score) FROM Posts WHERE PostTypeId = 1) 
    AND DA.Title IS NOT NULL
ORDER BY 
    TA.Rank, 
    DA.ViewCount DESC;
