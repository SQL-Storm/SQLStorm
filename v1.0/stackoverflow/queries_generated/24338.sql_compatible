
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.LastActivityDate DESC) AS rn,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),

ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        CLOSE_REASON.comment AS CloseReason
    FROM 
        PostHistory ph
    LEFT JOIN 
        CloseReasonTypes CLOSE_REASON ON ph.Comment::int = CLOSE_REASON.Id
    WHERE 
        ph.PostHistoryTypeId = 10
),

ActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        COUNT(DISTINCT p.Id) AS PostCount,
        ARRAY_AGG(DISTINCT COALESCE(t.TagName, 'No Tags')) AS Tags
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags)-2), '>')) AS t ON t IS NOT NULL
    GROUP BY 
        u.Id, u.Reputation
)

SELECT 
    u.DisplayName,
    u.Reputation,
    p.Title,
    COALESCE(p.Score, 0) AS PostScore,
    p.ViewCount,
    SUBSTRING(UPPER(STRING_AGG(p.Title, ', ')) FROM 1 FOR 100) AS PostTitles,
    CASE 
        WHEN up.Upvotes > 0 THEN 'Has Upvotes'
        ELSE 'No Upvotes' 
    END AS VoteStatus,
    CASE 
        WHEN c.CloseReason IS NOT NULL THEN 'Closed' 
        ELSE 'Active' 
    END AS PostStatus
FROM 
    ActiveUsers u
JOIN 
    RankedPosts p ON u.UserId = p.OwnerUserId
LEFT JOIN 
    (SELECT DISTINCT PostId, Upvotes FROM RankedPosts) up ON p.PostId = up.PostId
LEFT JOIN 
    ClosedPosts c ON p.PostId = c.PostId
WHERE 
    u.Reputation IS NOT NULL 
    AND (COALESCE(up.Upvotes, 0) - COALESCE(up.Downvotes, 0)) > 0
ORDER BY 
    u.Reputation DESC, p.CreationDate DESC
LIMIT 50;
