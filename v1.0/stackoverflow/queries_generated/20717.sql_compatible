
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId AND c.CreationDate > p.CreationDate
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, u.DisplayName, p.Title, p.CreationDate, p.Score, p.ViewCount, p.Tags
),
FilteredPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        ViewCount,
        Tags,
        OwnerDisplayName,
        CommentCount,
        TotalUpvotes,
        TotalDownvotes,
        CASE 
            WHEN Score IS NULL THEN 'No Score'
            WHEN Score > 0 THEN 'Positive Post'
            ELSE 'Negative Post'
        END AS ScoreCategory
    FROM 
        RankedPosts
    WHERE 
        CommentCount > 5 
        AND TotalUpvotes > TotalDownvotes
),
TagCounts AS (
    SELECT
        TRIM(value) AS Tag,
        COUNT(PostId) AS PostCount
    FROM 
        FilteredPosts,
        UNNEST(STRING_TO_ARRAY(Tags, '><')) AS value
    GROUP BY 
        Tag
),
HighestTags AS (
    SELECT 
        Tag, 
        PostCount,
        RANK() OVER (ORDER BY PostCount DESC) AS TagRank
    FROM 
        TagCounts
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.CreationDate,
    fp.Score,
    fp.ViewCount,
    fp.OwnerDisplayName,
    CASE 
        WHEN fp.CreationDate < CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '30 days' THEN 'Archived'
        ELSE 'Active' 
    END AS ActivityStatus,
    ht.Tag AS MostFrequentlyUsedTag,
    ht.PostCount AS TagPostCount
FROM 
    FilteredPosts fp 
LEFT JOIN 
    HighestTags ht ON ht.TagRank = 1
WHERE 
    fp.PostRank <= 10
ORDER BY 
    fp.Score DESC NULLS LAST, 
    fp.ViewCount ASC;
