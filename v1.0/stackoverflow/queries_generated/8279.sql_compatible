
WITH RankedPosts AS (
    SELECT p.Id, 
           p.Title, 
           p.CreationDate, 
           p.Score, 
           pp.ViewCount, 
           COUNT(DISTINCT a.Id) AS AnswerCount,
           ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM Posts p
    LEFT JOIN Posts a ON a.ParentId = p.Id 
    LEFT JOIN PostHistory ph ON ph.PostId = p.Id
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN PostViews pp ON pp.PostId = p.Id -- Assuming pp is from PostViews table
    WHERE p.PostTypeId = 1 AND 
          p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' AND 
          ph.PostHistoryTypeId IN (1, 4, 6) 
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, pp.ViewCount
),
TopUsers AS (
    SELECT u.Id, 
           u.DisplayName, 
           SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
           SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
           SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName
    HAVING COUNT(b.Id) > 10
)
SELECT rp.Title, 
       rp.Score, 
       rp.ViewCount, 
       rp.CreationDate, 
       tu.DisplayName, 
       tu.GoldBadges, 
       tu.SilverBadges, 
       tu.BronzeBadges
FROM RankedPosts rp
JOIN TopUsers tu ON rp.OwnerUserId = tu.Id
WHERE rp.Rank <= 50
ORDER BY rp.Score DESC, rp.CreationDate DESC;
