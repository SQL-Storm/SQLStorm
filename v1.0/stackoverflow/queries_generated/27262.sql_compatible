
WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        MAX(h.CreationDate) AS LastEdited,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE vt.Name = 'UpMod') AS UpvoteCount,
        COUNT(v.Id) FILTER (WHERE vt.Name = 'DownMod') AS DownvoteCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadgeCount,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadgeCount,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadgeCount
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory h ON p.Id = h.PostId 
    LEFT JOIN 
        Comments c ON p.Id = c.PostId 
    LEFT JOIN 
        Votes v ON p.Id = v.PostId 
    LEFT JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id 
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    GROUP BY 
        p.Id, p.Title
),
TopPosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.LastEdited,
        ps.CommentCount,
        ps.UpvoteCount,
        ps.DownvoteCount,
        ROW_NUMBER() OVER (ORDER BY ps.UpvoteCount DESC, ps.CommentCount DESC) AS Rank
    FROM 
        PostStats ps
    WHERE 
        ps.CommentCount > 0
)
SELECT 
    t.Title AS PostTitle,
    t.CommentCount,
    t.UpvoteCount,
    t.DownvoteCount,
    ps.GoldBadgeCount,
    ps.SilverBadgeCount,
    ps.BronzeBadgeCount,
    CASE 
        WHEN t.Rank <= 10 THEN 'Top Post' 
        ELSE 'Regular Post' 
    END AS PostCategory
FROM 
    TopPosts t
JOIN 
    PostStats ps ON t.PostId = ps.PostId
WHERE 
    ps.LastEdited >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
ORDER BY 
    t.UpvoteCount DESC, 
    t.CommentCount DESC;
