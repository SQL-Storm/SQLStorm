
WITH RecursiveTagPostCounts AS (
    SELECT 
        t.Id AS TagId,
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t
    LEFT JOIN 
        Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::text[])
    GROUP BY 
        t.Id, t.TagName
), RankedUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS UserRank
    FROM 
        Users u
), PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        COUNT(DISTINCT c.Id) AS CommentCount,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS CloseDate
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.LastActivityDate
), UserInteractions AS (
    SELECT 
        u.Id AS UserId,
        COUNT(DISTINCT v.Id) AS VoteCount,
        COUNT(DISTINCT c.Id) AS UserCommentCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    GROUP BY 
        u.Id
)
SELECT 
    rt.TagName,
    rt.PostCount,
    pu.DisplayName AS TopUser,
    pu.Reputation AS TopUserReputation,
    COALESCE(pd.TotalBounty, 0) AS TotalBounty,
    pd.CommentCount AS TotalComments,
    pd.CloseDate
FROM 
    RecursiveTagPostCounts rt
JOIN 
    PostDetails pd ON pd.PostId IN (
        SELECT p.Id 
        FROM Posts p 
        WHERE rt.TagId = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::text[])
    )
JOIN 
    RankedUsers pu ON pu.UserRank = 1  
LEFT JOIN 
    UserInteractions ui ON ui.UserId = pu.UserId
WHERE 
    rt.PostCount > 0
ORDER BY 
    rt.PostCount DESC, pu.Reputation DESC;
