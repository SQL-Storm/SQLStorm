WITH PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COALESCE(p.AcceptedAnswerId, 0) AS AcceptedAnswerId
    FROM 
        Posts p
        LEFT JOIN Comments c ON p.Id = c.PostId
        LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate
),
UserMetrics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN p.OwnerUserId = u.Id THEN 1 ELSE 0 END) AS PostsCount,
        SUM(p.ViewCount) AS TotalViews
    FROM 
        Users u
        LEFT JOIN Badges b ON u.Id = b.UserId
        LEFT JOIN Posts p ON p.OwnerUserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName
),
FinalMetrics AS (
    SELECT 
        pm.PostId,
        pm.Title,
        pm.CreationDate,
        pm.CommentCount,
        pm.VoteCount,
        pm.UpVotes,
        pm.DownVotes,
        um.UserId,
        um.DisplayName,
        um.BadgeCount,
        um.PostsCount,
        um.TotalViews
    FROM 
        PostMetrics pm
        JOIN UserMetrics um ON pm.AcceptedAnswerId IN (SELECT Id FROM Posts WHERE OwnerUserId = um.UserId)
)
SELECT 
    PostId,
    Title,
    CreationDate,
    CommentCount,
    VoteCount,
    UpVotes,
    DownVotes,
    UserId,
    DisplayName,
    BadgeCount,
    PostsCount,
    TotalViews
FROM 
    FinalMetrics
ORDER BY 
    CreationDate DESC;