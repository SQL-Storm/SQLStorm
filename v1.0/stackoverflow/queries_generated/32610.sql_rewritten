WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL 
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
RecentPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        u.DisplayName AS Owner
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),
PostStatistics AS (
    SELECT 
        p.Id,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpvoteCount, 
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownvoteCount, 
        SUM(COALESCE(b.Class, 0)) AS BadgeCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    LEFT JOIN 
        Badges b ON b.UserId = p.OwnerUserId
    GROUP BY 
        p.Id
)
SELECT 
    p.Title,
    p.CreationDate,
    r.Level AS HierarchyLevel,
    ps.CommentCount,
    ps.UpvoteCount,
    ps.DownvoteCount,
    COALESCE(b.Name, 'None') AS TopBadge,
    CASE 
        WHEN ps.UpvoteCount > ps.DownvoteCount THEN 'Positive' 
        WHEN ps.UpvoteCount < ps.DownvoteCount THEN 'Negative' 
        ELSE 'Neutral' 
    END AS Sentiment
FROM 
    RecentPosts p
LEFT JOIN 
    RecursivePostHierarchy r ON p.Id = r.PostId
LEFT JOIN 
    PostStatistics ps ON p.Id = ps.Id
LEFT JOIN 
    (SELECT UserId, Name FROM Badges ORDER BY Class ASC) b ON b.UserId = p.OwnerUserId
ORDER BY 
    p.CreationDate DESC, ps.CommentCount DESC;