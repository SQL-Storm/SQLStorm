
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        p.PostTypeId,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN vt.Name = 'UpMod' THEN 1 ELSE -1 END) AS TotalVoteScore,
        COALESCE(NULLIF(p.Tags, ''), 'No Tags') AS EffectiveTags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN (
        SELECT 
            PostId,
            SUM(CASE WHEN vt.Name = 'UpMod' THEN 1 ELSE -1 END) AS VoteScore
        FROM 
            Votes v
        JOIN 
            VoteTypes vt ON v.VoteTypeId = vt.Id
        GROUP BY 
            PostId
    ) vb ON vb.PostId = p.Id
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId, p.PostTypeId
),
PostActivity AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS HistoryDate,
        p.Title,
        p.OwnerUserId,
        p.PostTypeId,
        MAX(CASE WHEN pht.Name = 'Post Closed' THEN ph.CreationDate END) AS ClosedDate,
        MAX(CASE WHEN pht.Name = 'Question Merged' THEN ph.CreationDate END) AS MergedDate
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    JOIN 
        Posts p ON ph.PostId = p.Id
    GROUP BY 
        ph.PostId, p.Title, p.OwnerUserId, p.PostTypeId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CommentCount,
    rp.TotalVoteScore,
    pa.ClosedDate,
    pa.MergedDate,
    rp.EffectiveTags,
    CASE 
        WHEN pa.ClosedDate IS NOT NULL AND pa.MergedDate IS NOT NULL THEN 'Closed and Merged'
        WHEN pa.ClosedDate IS NOT NULL THEN 'Closed'
        WHEN pa.MergedDate IS NOT NULL THEN 'Merged'
        ELSE 'Active'
    END AS PostStatus,
    COUNT(CASE WHEN b.Class = 1 THEN b.Id END) AS GoldBadges,
    COUNT(CASE WHEN b.Class = 2 THEN b.Id END) AS SilverBadges,
    COUNT(CASE WHEN b.Class = 3 THEN b.Id END) AS BronzeBadges
FROM 
    RankedPosts rp
LEFT JOIN 
    PostActivity pa ON rp.PostId = pa.PostId
LEFT JOIN 
    Badges b ON b.UserId = rp.OwnerUserId
WHERE 
    rp.UserPostRank = 1 
    AND rp.Score > 10 
    AND (rp.CommentCount > 0 OR rp.TotalVoteScore > 0)
GROUP BY 
    rp.PostId, rp.Title, rp.CommentCount, rp.TotalVoteScore, pa.ClosedDate, pa.MergedDate, rp.EffectiveTags
ORDER BY 
    rp.TotalVoteScore DESC, rp.CommentCount DESC, rp.PostId DESC
LIMIT 100;
