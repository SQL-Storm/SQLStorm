WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        0 AS Level
    FROM Posts
    WHERE ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.Id
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.DisplayName,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY u.Id, u.Reputation, u.DisplayName
),
PostsWithVoteCounts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpvoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownvoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id, p.Title, p.ViewCount, p.OwnerUserId
),
DetailedUserPosts AS (
    SELECT 
        u.DisplayName AS UserDisplayName,
        ph.Title AS PostTitle,
        ph.ParentPostId,
        ph.Level,
        COALESCE(pwv.UpvoteCount, 0) AS UpvoteCount,
        COALESCE(pwv.DownvoteCount, 0) AS DownvoteCount,
        COALESCE(badges.Name, 'None') AS BadgeName
    FROM Users u
    JOIN PostsWithVoteCounts pwv ON u.Id = pwv.OwnerUserId
    JOIN RecursivePostHierarchy ph ON pwv.PostId = ph.Id
    LEFT JOIN Badges badges ON u.Id = badges.UserId AND badges.Class = 1 
    WHERE u.Reputation > 1000
)

SELECT 
    d.UserDisplayName,
    d.PostTitle,
    d.Level,
    d.UpvoteCount,
    d.DownvoteCount,
    COUNT(*) OVER (PARTITION BY d.UserDisplayName) AS TotalPosts,
    MAX(d.Level) OVER (PARTITION BY d.UserDisplayName) AS MaxPostLevel,
    STRING_AGG(DISTINCT d.BadgeName, ', ') AS Badges
FROM DetailedUserPosts d
GROUP BY d.UserDisplayName, d.PostTitle, d.Level, d.UpvoteCount, d.DownvoteCount
HAVING COUNT(*) > 1
ORDER BY TotalPosts DESC, d.UserDisplayName;