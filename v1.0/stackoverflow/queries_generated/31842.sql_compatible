
WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(COUNT(DISTINCT c.Id), 0) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
FilteredPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        CommentCount,
        UpVotes,
        DownVotes,
        PostRank
    FROM 
        RecursivePostCTE
    WHERE 
        PostRank <= 5
)
SELECT 
    f.PostId,
    f.Title,
    f.CreationDate,
    f.Score,
    f.CommentCount,
    f.UpVotes,
    f.DownVotes,
    CASE 
        WHEN f.Score > 100 THEN 'High Score'
        WHEN f.Score BETWEEN 50 AND 100 THEN 'Medium Score'
        ELSE 'Low Score'
    END AS ScoreCategory,
    CASE 
        WHEN EXISTS (SELECT 1 FROM Posts p WHERE p.AcceptedAnswerId = f.PostId) THEN 'Has Accepted Answer'
        ELSE 'No Accepted Answer'
    END AS AnswerStatus,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Tags t 
     JOIN LATERAL unnest(string_to_array(f.Tags, '<>')) AS TagName ON t.TagName = TagName) AS Tags
FROM 
    FilteredPosts f
LEFT JOIN 
    Users u ON f.OwnerUserId = u.Id
WHERE 
    u.Reputation > 1000
ORDER BY 
    f.CreationDate DESC
LIMIT 20;
