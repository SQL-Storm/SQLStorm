
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        pt.Name AS PostType,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        u.DisplayName AS OwnerDisplayName,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY u.Reputation ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Posts a ON a.ParentId = p.Id
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN 
        LATERAL unnest(string_to_array(p.Tags, '><')) AS t(TagName) ON TRUE
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.Score, p.ViewCount, pt.Name, u.DisplayName, u.Reputation
),
FilteredPosts AS (
    SELECT 
        PostId, 
        Title, 
        Tags,
        OwnerDisplayName,
        Score,
        CommentCount
    FROM 
        RankedPosts
    WHERE 
        rn <= 10
),
AggregatedData AS (
    SELECT 
        STRING_AGG(DISTINCT Tags, ', ') AS AllTags,
        COUNT(PostId) AS TotalPosts,
        SUM(Score) AS TotalScore,
        AVG(CommentCount) AS AvgComments
    FROM 
        FilteredPosts
)
SELECT 
    f.PostId,
    f.Title,
    f.OwnerDisplayName,
    f.Tags,
    f.Score,
    ag.TotalPosts,
    ag.TotalScore,
    ag.AvgComments
FROM 
    FilteredPosts f
CROSS JOIN 
    AggregatedData ag
ORDER BY 
    f.Score DESC, f.CommentCount DESC;
