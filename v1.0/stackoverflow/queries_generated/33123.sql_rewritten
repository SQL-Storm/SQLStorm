WITH RecursivePostCTE AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1

    UNION ALL

    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostCTE r ON p.ParentId = r.PostId
    WHERE 
        p.PostTypeId = 2
),
PostStats AS (
    SELECT 
        PostId,
        COUNT(*) AS AnswerCount,
        MAX(Score) AS MaxScore,
        MIN(CreationDate) AS FirstActivityDate
    FROM 
        RecursivePostCTE
    GROUP BY 
        PostId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    p.PostId,
    p.Title,
    p.FirstActivityDate,
    p.AnswerCount,
    p.MaxScore,
    u.DisplayName AS OwnerDisplayName,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    CASE 
        WHEN p.AnswerCount IS NULL THEN 'No Answers Yet'
        WHEN p.AnswerCount < 5 THEN 'Few Answers'
        ELSE 'Many Answers'
    END AS AnswerCategory
FROM 
    PostStats p
JOIN 
    Posts post ON p.PostId = post.Id
JOIN 
    Users u ON post.OwnerUserId = u.Id
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
WHERE 
    p.MaxScore > 0
ORDER BY 
    p.MaxScore DESC,
    p.FirstActivityDate ASC
LIMIT 50;