
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS AuthorName,
        u.Reputation AS AuthorReputation,
        COUNT(co.Id) AS CommentCount,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVoteCount,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS TagRank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments co ON p.Id = co.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, 
        u.DisplayName, u.Reputation, p.Score, p.Tags
),
FilteredPosts AS (
    SELECT 
        PostId, 
        Title, 
        Body, 
        CreationDate, 
        AuthorName, 
        AuthorReputation, 
        CommentCount, 
        UpVoteCount, 
        DownVoteCount
    FROM 
        RankedPosts
    WHERE 
        TagRank = 1 
)

SELECT 
    fp.PostId,
    fp.Title,
    fp.Body,
    fp.CreationDate,
    fp.AuthorName,
    fp.AuthorReputation,
    fp.CommentCount,
    fp.UpVoteCount,
    fp.DownVoteCount,
    STRING_AGG(t.TagName, ', ') AS RelatedTags
FROM 
    FilteredPosts fp
LEFT JOIN 
    Posts p ON fp.PostId = p.Id
LEFT JOIN 
    Tags t ON t.Id = ANY(STRING_TO_ARRAY(p.Tags, '><')::TEXT[]) 
GROUP BY 
    fp.PostId, fp.Title, fp.Body, fp.CreationDate, 
    fp.AuthorName, fp.AuthorReputation, 
    fp.CommentCount, fp.UpVoteCount, fp.DownVoteCount
ORDER BY 
    fp.UpVoteCount DESC, 
    fp.CreationDate DESC;
