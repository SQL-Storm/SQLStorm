WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score
),
PopularTags AS (
    SELECT 
        unnest(string_to_array(p.Tags, '><')) AS TagName,
        COUNT(*) AS TagCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        TagName
    ORDER BY 
        TagCount DESC
    LIMIT 5
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.Views,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM 
        Users u
    WHERE 
        u.Reputation > 1000
)
SELECT 
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.CommentCount,
    pt.Name AS PostType,
    ARRAY_AGG(DISTINCT pt2.Name) AS RelatedTags,
    ur.DisplayName AS TopUser,
    ur.Reputation AS TopUserReputation
FROM 
    RankedPosts rp
LEFT JOIN 
    PostTypes pt ON rp.PostTypeId = pt.Id
LEFT JOIN 
    PostLinks pl ON rp.PostId = pl.PostId
LEFT JOIN 
    Posts rp2 ON pl.RelatedPostId = rp2.Id
LEFT JOIN 
    PopularTags pt2 ON pt2.TagName = ANY(string_to_array(rp.Tags, '><'))
LEFT JOIN 
    UserReputation ur ON rp.OwnerUserId = ur.UserId
WHERE 
    rp.ScoreRank <= 10 
    AND (rp.CommentCount > 5 OR rp.ViewCount > 100)
GROUP BY 
    rp.Title, rp.CreationDate, rp.ViewCount, rp.CommentCount, pt.Name, ur.DisplayName, ur.Reputation
ORDER BY 
    rp.CreationDate DESC;