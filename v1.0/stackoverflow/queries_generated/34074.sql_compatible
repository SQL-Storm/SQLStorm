
WITH RECURSIVE PostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ParentId,
        0 AS Level
    FROM Posts p
    WHERE p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ParentId,
        ph.Level + 1
    FROM Posts p
    INNER JOIN PostHierarchy ph ON p.ParentId = ph.PostId
),
UserRanking AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositivePostCount,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativePostCount,
        RANK() OVER (ORDER BY COUNT(DISTINCT p.Id) DESC) AS Rank
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    GROUP BY u.Id, u.DisplayName
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        unnest(string_to_array(p.Tags, ',')) AS Tag
    FROM Posts p
),
RankedPosts AS (
    SELECT 
        ph.PostId,
        ph.Title,
        ph.Score,
        ph.CreationDate,
        u.DisplayName AS Owner,
        COUNT(DISTINCT pt.Tag) AS TagCount,
        ROW_NUMBER() OVER (PARTITION BY ph.Level ORDER BY ph.Score DESC) AS RowNum
    FROM PostHierarchy ph
    LEFT JOIN Users u ON ph.PostId = u.Id
    LEFT JOIN PostTags pt ON ph.PostId = pt.PostId
    GROUP BY ph.PostId, ph.Title, ph.Score, ph.CreationDate, u.DisplayName
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.CreationDate,
    rp.Owner,
    rp.TagCount,
    ur.Rank AS UserRank,
    CASE 
        WHEN rp.Score > 0 THEN 'Positive'
        WHEN rp.Score < 0 THEN 'Negative'
        ELSE 'Neutral'
    END AS ScoreType
FROM RankedPosts rp
JOIN UserRanking ur ON rp.Owner = ur.DisplayName
WHERE rp.RowNum <= 10  
AND ur.Rank <= 5  
ORDER BY rp.Score DESC, rp.CreationDate DESC;
