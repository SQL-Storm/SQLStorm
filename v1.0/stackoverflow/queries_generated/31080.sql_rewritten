WITH RecursivePosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ParentId,
        0 AS Depth
    FROM Posts p
    WHERE p.PostTypeId = 1  
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ParentId,
        rp.Depth + 1
    FROM Posts p
    INNER JOIN RecursivePosts rp ON p.ParentId = rp.Id
    WHERE p.PostTypeId = 2 AND rp.Depth < 5  
),

PostScores AS (
    SELECT 
        p.Id,
        p.Title,
        COALESCE(p.Score, 0) AS Score,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVotes,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVotes,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS rn
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id, p.Title, p.Score
),

RecentBadges AS (
    SELECT 
        b.UserId,
        COUNT(Badge.Id) AS BadgeCount
    FROM Badges b
    WHERE b.Date >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
    GROUP BY b.UserId
),

UserReputation AS (
    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        rb.BadgeCount,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS Rank
    FROM Users u
    LEFT JOIN RecentBadges rb ON u.Id = rb.UserId
)

SELECT 
    u.DisplayName,
    u.Reputation,
    COALESCE(rb.BadgeCount, 0) AS BadgeCount,
    COUNT(DISTINCT rp.Id) AS TotalQuestions,
    SUM(ps.Score) AS TotalScore,
    AVG(ps.Score) AS AverageScore
FROM UserReputation u
LEFT JOIN Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1
LEFT JOIN PostScores ps ON p.Id = ps.Id
LEFT JOIN RecursivePosts rp ON p.Id = rp.Id
LEFT JOIN Votes v ON p.Id = v.PostId
WHERE u.Reputation > 1000  
GROUP BY u.Id, u.DisplayName, u.Reputation, rb.BadgeCount
HAVING SUM(ps.Score) >= 50  
ORDER BY AverageScore DESC, TotalQuestions DESC
LIMIT 10;