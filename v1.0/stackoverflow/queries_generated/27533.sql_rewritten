WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.Score,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2  
    WHERE 
        p.CreationDate >= DATEADD(year, -1, GETDATE())  
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, p.Score, p.CreationDate, u.DisplayName
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.Tags,
        rp.Score,
        rp.CreationDate,
        rp.OwnerDisplayName,
        rp.CommentCount,
        rp.VoteCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5
)
SELECT 
    t.PostId,
    t.Title,
    t.Body,
    t.Tags,
    t.Score,
    t.CreationDate,
    t.OwnerDisplayName,
    t.CommentCount,
    t.VoteCount,
    JSON_AGG(DISTINCT json_build_object('Id', ct.Id, 'Text', ct.Text)) AS Comments,
    JSON_AGG(DISTINCT json_build_object('Id', v.Id, 'Type', vt.Name)) AS Votes
FROM 
    TopPosts t
LEFT JOIN 
    Comments ct ON t.PostId = ct.PostId
LEFT JOIN 
    Votes v ON t.PostId = v.PostId
LEFT JOIN 
    VoteTypes vt ON v.VoteTypeId = vt.Id 
GROUP BY 
    t.PostId, t.Title, t.Body, t.Tags, t.Score, t.CreationDate, t.OwnerDisplayName, t.CommentCount, t.VoteCount
ORDER BY 
    t.Score DESC;