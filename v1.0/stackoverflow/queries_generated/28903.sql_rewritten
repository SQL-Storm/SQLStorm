WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.AnswerCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank
    FROM 
        Posts p
    JOIN 
        Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[]) 
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(p.ViewCount) AS TotalViews,
        COALESCE(SUM(b.Class = 1)::int, 0) AS GoldBadges,
        COALESCE(SUM(b.Class = 2)::int, 0) AS SilverBadges,
        COALESCE(SUM(b.Class = 3)::int, 0) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.Reputation > 1000 
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
TopUsers AS (
    SELECT 
        UserId, 
        DisplayName, 
        TotalPosts, 
        TotalViews, 
        GoldBadges, 
        SilverBadges, 
        BronzeBadges
    FROM 
        UserStats
    ORDER BY 
        TotalPosts DESC, TotalViews DESC
    LIMIT 5
)
SELECT 
    u.DisplayName,
    tp.PostId,
    tp.Title,
    tp.ViewCount,
    tp.Score,
    tp.Tags,
    tp.UserRank,
    us.TotalPosts,
    us.TotalViews,
    us.GoldBadges,
    us.SilverBadges,
    us.BronzeBadges
FROM 
    TopUsers us
JOIN 
    RankedPosts tp ON us.UserId = tp.OwnerUserId
ORDER BY 
    us.TotalPosts DESC, tp.ViewCount DESC;