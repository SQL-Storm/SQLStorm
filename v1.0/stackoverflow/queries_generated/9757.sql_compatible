
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 month'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, u.DisplayName
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        OwnerDisplayName,
        CommentCount,
        UpVotes,
        DownVotes
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
)
SELECT 
    t.*,
    pt.Name AS PostTypeName,
    COUNT(pl.Id) AS RelatedPostCount,
    AVG(b.Date) AS AverageBadgeDate
FROM 
    TopPosts t
LEFT JOIN 
    PostTypes pt ON t.PostTypeId = pt.Id
LEFT JOIN 
    PostLinks pl ON t.PostId = pl.PostId
LEFT JOIN 
    Badges b ON t.OwnerDisplayName = b.UserId
GROUP BY 
    t.PostId, t.Title, t.CreationDate, t.Score, t.OwnerDisplayName, t.CommentCount, t.UpVotes, t.DownVotes, pt.Name
ORDER BY 
    t.Score DESC, t.CreationDate DESC;
