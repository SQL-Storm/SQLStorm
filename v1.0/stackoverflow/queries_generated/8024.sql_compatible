
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId IN (1, 2) 
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerDisplayName,
        rp.Score
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 10
),
PostsWithComments AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.OwnerDisplayName,
        tp.Score,
        COALESCE(c.CommentCount, 0) AS CommentCount
    FROM 
        TopPosts tp
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments
        GROUP BY 
            PostId
    ) c ON tp.PostId = c.PostId
)
SELECT 
    p.Title,
    p.OwnerDisplayName,
    p.Score,
    p.CommentCount,
    COUNT(v.Id) AS VoteCount,
    AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - p.CreationDate))) AS AvgSecondsSinceCreation
FROM 
    PostsWithComments p
LEFT JOIN 
    Votes v ON p.PostId = v.PostId
WHERE 
    v.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '6 months' 
GROUP BY 
    p.Title, p.OwnerDisplayName, p.Score, p.CommentCount
ORDER BY 
    p.Score DESC, p.CommentCount DESC;
