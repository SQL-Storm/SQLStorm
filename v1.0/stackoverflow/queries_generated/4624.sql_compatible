
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) AS CommentCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldCount,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverCount,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeCount
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
),
PostStatistics AS (
    SELECT 
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        ub.GoldCount,
        ub.SilverCount,
        ub.BronzeCount,
        CASE 
            WHEN rp.Score > 10 THEN 'High Score'
            WHEN rp.Score BETWEEN 5 AND 10 THEN 'Medium Score'
            ELSE 'Low Score'
        END AS ScoreCategory
    FROM RankedPosts rp
    LEFT JOIN UserBadges ub ON rp.OwnerUserId = ub.UserId
)
SELECT 
    ps.Title,
    ps.CreationDate,
    ps.Score,
    ps.ViewCount,
    COALESCE(ps.GoldCount, 0) AS GoldBadges,
    COALESCE(ps.SilverCount, 0) AS SilverBadges,
    COALESCE(ps.BronzeCount, 0) AS BronzeBadges,
    ps.ScoreCategory
FROM PostStatistics ps
WHERE ps.ScoreCategory = 'High Score'
ORDER BY ps.ViewCount DESC
LIMIT 10
UNION ALL
SELECT 
    'Total Posts in last year' AS Title,
    NULL AS CreationDate,
    COUNT(*) AS Score,
    NULL AS ViewCount,
    NULL AS GoldBadges,
    NULL AS SilverBadges,
    NULL AS BronzeBadges,
    'Aggregate' AS ScoreCategory
FROM Posts
WHERE CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year';
