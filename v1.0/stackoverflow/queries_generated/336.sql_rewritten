WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
)

SELECT 
    u.DisplayName,
    COUNT(DISTINCT p.Id) AS PostCount,
    SUM(p.ViewCount) AS TotalViews,
    AVG(p.Score) AS AverageScore,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
    MAX(COALESCE(b.Date, '1970-01-01'::timestamp)) AS LastBadgeDate,
    COALESCE(MIN(p.ClosedDate), 'No Closed Posts') AS FirstClosedPostDate,
    CASE 
        WHEN COUNT(DISTINCT p.Id) > 0 THEN 
            ROUND(SUM(p.ViewCount) / COUNT(DISTINCT p.Id)::numeric, 2)
        ELSE 
            0 
    END AS AverageViewsPerPost
FROM 
    Users u 
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    PostLinks pl ON p.Id = pl.PostId
LEFT JOIN 
    Tags t ON t.Id = ANY(substring(p.Tags, '[0-9]+')::int[])
LEFT JOIN 
    Badges b ON u.Id = b.UserId
WHERE 
    u.Reputation > 1000
GROUP BY 
    u.Id
HAVING 
    COUNT(DISTINCT p.Id) > 5
ORDER BY 
    TotalViews DESC
LIMIT 10;