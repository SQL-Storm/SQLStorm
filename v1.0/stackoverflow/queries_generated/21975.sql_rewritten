WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.PostTypeId,
        p.Score,
        p.AnswerCount,
        p.ViewCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RecentPostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation, 
        COALESCE(SUM(CASE WHEN v.VoteTypeId IN (2, 5) THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
RecentComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount,
        MAX(c.CreationDate) AS LastCommentDate
    FROM 
        Comments c
    WHERE 
        c.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY 
        c.PostId
),
PostWithCommentStats AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.PostTypeId,
        rp.Score,
        rp.ScoreRank,
        rcs.CommentCount,
        rcs.LastCommentDate,
        COALESCE(usr.UserId, 0) AS MostActiveUserId,
        COALESCE(usr.Reputation, 0) AS UserReputation
    FROM 
        RankedPosts rp
    LEFT JOIN 
        RecentComments rcs ON rp.PostId = rcs.PostId
    LEFT JOIN 
        (SELECT Users.Id AS UserId, COUNT(Comments.Id) AS CommentCount
         FROM Users 
         JOIN Comments ON Users.Id = Comments.UserId
         GROUP BY Users.Id ORDER BY CommentCount DESC LIMIT 1) usr ON TRUE
    WHERE 
        rp.ScoreRank <= 5
)
SELECT 
    pwcs.PostId,
    pwcs.Title,
    pwcs.CreationDate,
    pwcs.Score,
    pwcs.CommentCount,
    pwcs.LastCommentDate,
    CASE 
      WHEN pwcs.UserReputation > 0 THEN 'Active'
      WHEN pwcs.UserReputation IS NULL THEN 'Inactive'
      ELSE 'Unknown'
    END AS UserStatus,
    (SELECT STRING_AGG(t.TagName, ', ') 
     FROM Tags t 
     WHERE t.Id IN (SELECT UNNEST(string_to_array(p.Tags, '><')::INT[]))) AS AssociatedTags
FROM 
    PostWithCommentStats pwcs
WHERE 
    pwcs.CommentCount > 0 
ORDER BY 
    pwcs.Score DESC, pwcs.CreationDate DESC
LIMIT 10;