WITH RecentPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.ViewCount,
        P.Score,
        P.OwnerUserId,
        COALESCE(U.DisplayName, 'Anonymous') AS OwnerDisplayName,
        COUNT(CASE WHEN C.PostId IS NOT NULL THEN 1 END) AS CommentCount,
        COUNT(V.Id) FILTER (WHERE V.VoteTypeId = 2) AS UpVotes,
        COUNT(V.Id) FILTER (WHERE V.VoteTypeId = 3) AS DownVotes,
        RANK() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC) AS ScoreRank
    FROM 
        Posts P
    LEFT JOIN 
        Users U ON P.OwnerUserId = U.Id
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    WHERE 
        P.CreationDate > cast('2024-10-01' as date) - INTERVAL '30 days'
    GROUP BY 
        P.Id, U.DisplayName
),
PopularTags AS (
    SELECT 
        T.TagName,
        COUNT(P.Tags) AS TagCount
    FROM 
        Tags T
    LEFT JOIN 
        Posts P ON P.Tags LIKE CONCAT('%', T.TagName, '%')
    GROUP BY 
        T.TagName
    ORDER BY 
        TagCount DESC
    LIMIT 5
),
PostDetails AS (
    SELECT 
        RP.PostId,
        RP.Title,
        RP.OwnerDisplayName,
        RP.ViewCount,
        RP.CommentCount,
        RP.Score,
        RP.UpVotes,
        RP.DownVotes,
        (RP.UpVotes - RP.DownVotes) AS NetVotes,
        CASE 
            WHEN RP.Score > 10 THEN 'High' 
            WHEN RP.Score BETWEEN 5 AND 10 THEN 'Medium' 
            ELSE 'Low' 
        END AS PopularityRank
    FROM 
        RecentPosts RP
)
SELECT 
    PD.PostId,
    PD.Title,
    PD.OwnerDisplayName,
    PD.ViewCount,
    PD.CommentCount,
    PD.Score,
    PD.UpVotes,
    PD.DownVotes,
    PD.NetVotes,
    PD.PopularityRank,
    T.TagName AS MostPopularTag
FROM 
    PostDetails PD
LEFT JOIN 
    (SELECT TagName FROM PopularTags) T ON PD.PostId IN (SELECT Unnest(string_to_array(PD.Tags, '><'))::text FROM Posts where PD.PostId = Posts.Id)
WHERE 
    PD.NetVotes > 0
    AND PD.ScoreRank <= 5
ORDER BY 
    PD.Score DESC, PD.ViewCount DESC;