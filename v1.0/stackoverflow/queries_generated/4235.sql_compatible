
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.PostTypeId
),
PostWithTags AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.RankScore,
        STRING_AGG(tag.TagName, ', ') AS Tags
    FROM 
        RankedPosts rp
    LEFT JOIN 
        LATERAL (
            SELECT 
                t.TagName 
            FROM 
                Tags t 
            WHERE 
                t.Id IN (SELECT UNNEST(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><')::int[]) FROM Posts p WHERE p.Id = rp.PostId)
        ) tag ON true
    GROUP BY 
        rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, rp.RankScore
),
PostVotes AS (
    SELECT 
        p.Id AS PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
)
SELECT 
    pwt.PostId,
    pwt.Title,
    pwt.CreationDate,
    pwt.Score,
    pwt.ViewCount,
    pwt.RankScore,
    COALESCE(pv.Upvotes, 0) AS TotalUpvotes,
    COALESCE(pv.Downvotes, 0) AS TotalDownvotes,
    pwt.Tags
FROM 
    PostWithTags pwt
LEFT JOIN 
    PostVotes pv ON pwt.PostId = pv.PostId
WHERE 
    pwt.RankScore <= 5
ORDER BY 
    pwt.Score DESC, pwt.ViewCount DESC
OFFSET 10
LIMIT 5;
