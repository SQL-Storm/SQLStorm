WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        ARRAY_AGG(DISTINCT pt.Name) AS PostTypeNames,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, u.DisplayName
),
PopularPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerDisplayName,
        rp.ViewCount,
        rp.Score,
        rp.CommentCount,
        rp.PostTypeNames
    FROM 
        RankedPosts rp
    WHERE 
        rp.ViewCount > 1000
)
SELECT 
    pp.Title,
    pp.OwnerDisplayName,
    pp.ViewCount,
    pp.Score,
    pp.CommentCount,
    STRING_AGG(DISTINCT pt.Name, ', ') AS PostTypes,
    (SELECT COUNT(DISTINCT b.UserId) FROM Badges b WHERE b.UserId = pp.OwnerDisplayName) AS BadgeCount
FROM 
    PopularPosts pp
LEFT JOIN 
    Posts p ON pp.PostId = p.Id
LEFT JOIN 
    PostHistory ph ON ph.PostId = p.Id AND ph.PostHistoryTypeId = 4 
LEFT JOIN 
    PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
GROUP BY 
    pp.PostId, pp.Title, pp.OwnerDisplayName, pp.ViewCount, pp.Score, pp.CommentCount
ORDER BY 
    pp.Score DESC;