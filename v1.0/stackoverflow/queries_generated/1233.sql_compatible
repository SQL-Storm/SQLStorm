
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserPostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
PostActivity AS (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS HistoryCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (4, 5, 10) 
    GROUP BY 
        ph.PostId
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Date) AS LastBadgeDate
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)
SELECT 
    rp.Title AS QuestionTitle,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    pa.HistoryCount,
    pa.LastEditDate,
    ub.BadgeCount,
    ub.LastBadgeDate,
    CASE 
        WHEN ub.BadgeCount > 0 THEN 'Has Badges'
        ELSE 'No Badges'
    END AS BadgeStatus
FROM 
    RankedPosts rp
LEFT JOIN 
    PostActivity pa ON rp.Id = pa.PostId
LEFT JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
WHERE 
    rp.Score > (SELECT AVG(Score) FROM Posts WHERE PostTypeId = 1) 
    AND rp.UserPostRank <= 3 
ORDER BY 
    rp.CreationDate DESC
FETCH FIRST 100 ROWS ONLY;
