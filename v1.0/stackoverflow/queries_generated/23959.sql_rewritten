WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.OwnerUserId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) OVER (PARTITION BY p.Id) AS VoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        MIN(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS ClosedDate,
        MAX(CASE WHEN ph.PostHistoryTypeId IN (11, 13) THEN ph.CreationDate END) AS ReopenedDate,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (10, 12) THEN 1 END) AS DeleteCount,
        STRING_AGG(DISTINCT c.Text, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    LEFT JOIN 
        CloseReasonTypes crt ON crt.Id::text = ph.Comment
    LEFT JOIN 
        Comments c ON ph.PostId = c.PostId AND ph.UserId = c.UserId
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.LastActivityDate,
    COALESCE(pd.ClosedDate, 'No Closure') AS ClosedDate,
    COALESCE(pd.ReopenedDate, 'Never Reopened') AS ReopenedDate,
    rp.ViewCount,
    rp.CommentCount,
    rp.VoteCount,
    pd.DeleteCount,
    pd.CloseReasons,
    CASE 
        WHEN pd.DELETECOUNT > 0 AND pd.ClosedDate IS NOT NULL THEN 'Closed with deletions'
        ELSE 'Active or Unclosed'
    END AS Status
FROM 
    RankedPosts rp
LEFT JOIN 
    PostHistoryDetails pd ON rp.PostId = pd.PostId
WHERE 
    rp.CommentCount > 0 OR rp.VoteCount > 0
ORDER BY 
    rp.ViewCount DESC, 
    rp.CreationDate ASC
LIMIT 50;