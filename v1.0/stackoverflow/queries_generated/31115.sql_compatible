
WITH RecursivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        1 AS Level,
        CAST(p.Title AS VARCHAR(255)) AS Path
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL
    
    SELECT 
        a.Id AS PostId,
        a.Title,
        a.OwnerUserId,
        a.CreationDate,
        a.Score,
        rp.Level + 1,
        CAST(rp.Path || ' -> ' || a.Title AS VARCHAR(255))
    FROM 
        Posts a
    INNER JOIN 
        Posts q ON a.ParentId = q.Id 
    INNER JOIN 
        RecursivePosts rp ON q.Id = rp.PostId
)
, PostVoteCounts AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
)
SELECT 
    p.PostId,
    p.Title,
    u.DisplayName AS Author,
    p.CreationDate,
    COALESCE(pvc.UpVotes, 0) AS UpVotes,
    COALESCE(pvc.DownVotes, 0) AS DownVotes,
    p.Score,
    rp.Path,
    COUNT(c.Id) AS CommentCount,
    ROW_NUMBER() OVER (PARTITION BY rp.Level ORDER BY p.Score DESC) AS RankByScore
FROM 
    RecursivePosts rp
LEFT JOIN 
    Posts p ON rp.PostId = p.Id
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    PostVoteCounts pvc ON p.Id = pvc.PostId
LEFT JOIN 
    Comments c ON p.Id = c.PostId
WHERE 
    u.Reputation > 1000  
    AND p.CreationDate >= DATEADD(day, -7, '2024-10-01')  
GROUP BY 
    p.PostId, p.Title, u.DisplayName, p.CreationDate, pvc.UpVotes, pvc.DownVotes, p.Score, rp.Path, rp.Level
ORDER BY 
    RankByScore, p.CreationDate DESC;
