WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Score,
        U.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank
    FROM 
        Posts p
    LEFT JOIN 
        Users U ON p.OwnerUserId = U.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id, U.DisplayName
), ClosedPostHistory AS (
    SELECT 
        ph.PostId, 
        ph.CreationDate AS CloseDate,
        RANK() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS CloseRank
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)  
), UserStatistics AS (
    SELECT 
        U.Id, 
        U.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(COALESCE(b.Class = 1, 0)) AS GoldBadges,
        SUM(COALESCE(b.Class = 2, 0)) AS SilverBadges,
        SUM(COALESCE(b.Class = 3, 0)) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Posts p ON U.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON U.Id = b.UserId
    GROUP BY 
        U.Id, U.DisplayName
), PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(pt.PostId) AS TagFrequency
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'
    JOIN 
        PostLinks pl ON p.Id = pl.PostId
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(pt.PostId) > 5  
)

SELECT 
    rp.Title,
    rp.ViewCount,
    rp.OwnerDisplayName,
    COALESCE(cph.CloseDate, 'Not Closed') AS LastClosed,
    COALESCE(ust.TotalPosts, 0) AS TotalPostsByUser,
    ust.GoldBadges,
    ust.SilverBadges,
    ust.BronzeBadges,
    pt.TagName,
    pt.TagFrequency
FROM 
    RankedPosts rp
LEFT JOIN 
    ClosedPostHistory cph ON rp.PostId = cph.PostId AND cph.CloseRank = 1
LEFT JOIN 
    UserStatistics ust ON rp.OwnerDisplayName = ust.DisplayName
LEFT JOIN 
    PopularTags pt ON pt.TagName IN (SELECT unnest(string_to_array(rp.Tags, ',')))
WHERE 
    rp.ScoreRank <= 10  
ORDER BY 
    rp.Score DESC, 
    rp.ViewCount DESC;