
WITH RECURSIVE UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        COUNT(p.Id) AS PostCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation, u.CreationDate, u.LastAccessDate

    UNION ALL
    
    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        ua.PostCount,
        ua.AnswerCount,
        ua.QuestionCount,
        ua.UpVoteCount,
        ua.DownVoteCount
    FROM 
        Users u
    JOIN 
        UserActivity ua ON u.Id = ua.UserId
    WHERE 
        u.Reputation > 0
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        p.Score,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(v.VoteCount, 0) AS VoteCount,
        p.OwnerUserId,
        COUNT(DISTINCT c.Id) AS TotalComments,
        AVG(p.Score) OVER(PARTITION BY p.OwnerUserId) AS AvgScoreByUser,
        RANK() OVER(ORDER BY p.Score DESC) AS RankInScore
    FROM 
        Posts p
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS CommentCount FROM Comments GROUP BY PostId) c ON p.Id = c.PostId
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS VoteCount FROM Votes GROUP BY PostId) v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.LastActivityDate, p.Score, 
        p.OwnerUserId, c.CommentCount, v.VoteCount
),
FilteredPosts AS (
    SELECT 
        ps.*,
        ua.DisplayName AS PostOwnerDisplayName
    FROM 
        PostStats ps
    JOIN 
        UserActivity ua ON ps.OwnerUserId = ua.UserId
    WHERE 
        (ps.RankInScore <= 10 AND ps.TotalComments > 5)
)

SELECT 
    fp.Title,
    fp.CreationDate,
    fp.LastActivityDate,
    fp.Score,
    fp.CommentCount,
    fp.VoteCount,
    fp.PostOwnerDisplayName,
    CASE 
        WHEN fp.Score > 10 THEN 'High Score'
        WHEN fp.Score BETWEEN 5 AND 10 THEN 'Medium Score'
        ELSE 'Low Score'
    END AS ScoreCategory,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    FilteredPosts fp
LEFT JOIN 
    PostsTags pt ON fp.PostId = pt.PostId
LEFT JOIN 
    Tags t ON pt.TagId = t.Id
GROUP BY 
    fp.PostId, fp.Title, fp.CreationDate, fp.LastActivityDate, fp.Score, 
    fp.CommentCount, fp.VoteCount, fp.PostOwnerDisplayName
ORDER BY 
    fp.Score DESC, fp.LastActivityDate DESC;
