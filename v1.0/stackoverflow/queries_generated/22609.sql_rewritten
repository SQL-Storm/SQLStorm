WITH UserBadgeCounts AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
),
RecentPosts AS (
    SELECT 
        P.OwnerUserId,
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS PostRank
    FROM 
        Posts P
    WHERE 
        P.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),
PostVoteCounts AS (
    SELECT 
        V.PostId,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(CASE WHEN V.VoteTypeId IS NOT NULL THEN 1 END) AS TotalVotes
    FROM 
        Votes V
    GROUP BY 
        V.PostId
),
JoinedData AS (
    SELECT 
        UBC.UserId,
        UBC.DisplayName,
        UBC.BadgeCount,
        UBC.GoldBadges,
        UBC.SilverBadges,
        UBC.BronzeBadges,
        RP.PostId,
        RP.Title,
        RP.CreationDate AS PostCreationDate,
        RP.Score AS PostScore,
        RP.ViewCount AS PostViewCount,
        PVC.UpVotes,
        PVC.DownVotes,
        PVC.TotalVotes
    FROM 
        UserBadgeCounts UBC
    LEFT JOIN 
        RecentPosts RP ON UBC.UserId = RP.OwnerUserId
    LEFT JOIN 
        PostVoteCounts PVC ON RP.PostId = PVC.PostId
)
SELECT 
    JD.DisplayName,
    JD.BadgeCount,
    JD.GoldBadges,
    JD.SilverBadges,
    JD.BronzeBadges,
    JD.Title AS RecentPostTitle,
    JD.PostCreationDate,
    COALESCE(JD.Score, 0) AS PostScore,
    COALESCE(JD.ViewCount, 0) AS PostViewCount,
    COALESCE(JD.UpVotes, 0) AS UpVotes,
    COALESCE(JD.DownVotes, 0) AS DownVotes,
    COALESCE(JD.TotalVotes, 0) AS TotalVotes,
    CASE 
        WHEN JD.BadgeCount IS NULL THEN 'No badges earned'
        ELSE CONCAT(JD.BadgeCount, ' badges received')
    END AS BadgeInfo
FROM 
    JoinedData JD
WHERE 
    (JD.BadgeCount > 0 OR JD.BadgeCount IS NULL)
    AND (JD.PostCreationDate IS NULL OR JD.Score > 0)
ORDER BY 
    JD.BadgeCount DESC,
    JD.PostCreationDate DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;