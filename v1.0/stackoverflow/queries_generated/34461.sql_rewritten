WITH RecursivePostHierarchy AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        1 AS Level
    FROM
        Posts p
    WHERE
        p.ParentId IS NULL  
    
    UNION ALL

    SELECT
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        Level + 1
    FROM
        Posts p
    INNER JOIN RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),
UserReputation AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostsCount,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounty
    FROM
        Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8  
    GROUP BY
        u.Id,
        u.DisplayName,
        u.Reputation
),
AggregatedTags AS (
    SELECT
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(p.ViewCount) AS TotalViews
    FROM
        Tags t
    JOIN Posts p ON p.Tags LIKE CONCAT('%', t.TagName, '%')
    GROUP BY
        t.TagName
),

VotingMetrics AS (
    SELECT
        p.Id AS PostId,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM
        Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY
        p.Id
)
SELECT
    ph.PostId,
    ph.Title,
    u.DisplayName AS Owner,
    u.Reputation,
    rph.Level,
    COALESCE(vm.UpVotes, 0) AS UpVotes,
    COALESCE(vm.DownVotes, 0) AS DownVotes,
    COUNT(DISTINCT c.Id) AS CommentCount,
    COALESCE(at.PostCount, 0) AS AssociatedTagCount,
    COALESCE(at.TotalViews, 0) AS TotalTagViews,
    CASE
        WHEN u.Reputation >= 1000 THEN 'High Reputation'
        WHEN u.Reputation BETWEEN 500 AND 999 THEN 'Moderate Reputation'
        ELSE 'Low Reputation'
    END AS ReputationCategory
FROM
    RecursivePostHierarchy ph
JOIN Users u ON ph.OwnerUserId = u.Id
LEFT JOIN VotingMetrics vm ON ph.PostId = vm.PostId
LEFT JOIN Comments c ON ph.PostId = c.PostId
LEFT JOIN AggregatedTags at ON at.TagName IN (SELECT unnest(string_to_array(ph.Title, ' ')))  
GROUP BY
    ph.PostId, u.DisplayName, u.Reputation, rph.Level, at.PostCount, at.TotalViews
ORDER BY
    ph.PostId;