
WITH RECURSIVE UserReputations AS (
    SELECT 
        Id,
        DisplayName,
        Reputation,
        LastAccessDate,
        1 AS Level
    FROM Users
    WHERE Reputation > 1000 
    UNION ALL
    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        u.LastAccessDate,
        ur.Level + 1
    FROM Users u
    INNER JOIN UserReputations ur ON u.Reputation < ur.Reputation
    WHERE ur.Level < 5 
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        MAX(p.CreationDate) AS LastActivity
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
    GROUP BY p.Id, p.OwnerUserId
),
UserPostStats AS (
    SELECT 
        ur.Id AS UserId,
        ur.DisplayName,
        SUM(ps.CommentCount) AS TotalComments,
        SUM(ps.VoteCount) AS TotalVotes,
        COUNT(DISTINCT ps.PostId) AS PostCount,
        COALESCE(AVG(ps.LastActivity), 0) AS AverageActivity
    FROM UserReputations ur
    LEFT JOIN PostStats ps ON ur.Id = ps.OwnerUserId
    GROUP BY ur.Id, ur.DisplayName
),
RankedUsers AS (
    SELECT 
        UserId,
        DisplayName,
        TotalComments,
        TotalVotes,
        PostCount,
        RANK() OVER (ORDER BY TotalVotes DESC, TotalComments DESC) AS VoteRank
    FROM UserPostStats
)
SELECT 
    ru.UserId,
    ru.DisplayName,
    ru.TotalComments,
    ru.TotalVotes,
    ru.PostCount,
    ru.VoteRank,
    CASE 
        WHEN ru.PostCount > 50 THEN 'Expert'
        WHEN ru.PostCount BETWEEN 20 AND 50 THEN 'Intermediate'
        ELSE 'Novice'
    END AS UserLevel,
    (SELECT COUNT(*) FROM Badges b WHERE b.UserId = ru.UserId AND b.Class = 1) AS GoldBadges,
    (SELECT COUNT(*) FROM Badges b WHERE b.UserId = ru.UserId AND b.Class = 2) AS SilverBadges
FROM RankedUsers ru
WHERE ru.TotalVotes > 10 
ORDER BY ru.VoteRank;
