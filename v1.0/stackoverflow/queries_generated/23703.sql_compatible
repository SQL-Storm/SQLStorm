
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,  
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes  
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year' 
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreationDate, p.PostTypeId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        b.Name AS BadgeName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, b.Name
),
PostsWithBadges AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.RankScore,
        ub.BadgeName,
        ub.BadgeCount,
        CASE 
            WHEN ub.BadgeCount IS NULL THEN 'No Badges'
            ELSE ub.BadgeName
        END AS BadgeStatus
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges ub ON rp.PostId = ub.UserId  
)
SELECT 
    p.PostId,
    p.Title,
    p.Score,
    p.CommentCount,
    p.BadgeStatus,
    CASE 
        WHEN p.RankScore <= 5 THEN 'Top Posts'
        WHEN p.RankScore BETWEEN 6 AND 15 THEN 'Moderately Ranked Posts'
        ELSE 'Low Rank'
    END AS RankingCategory,
    COALESCE(NULLIF(p.UpVotes, 0), p.DownVotes) AS EffectiveVoteScore
FROM 
    PostsWithBadges p
WHERE 
    p.BadgeStatus <> 'No Badges' OR p.Score > 100  
ORDER BY 
    EffectiveVoteScore DESC, p.RankScore ASC
LIMIT 50;
