
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        STRING_AGG(t.TagName, ', ') AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation
    FROM
        Posts p
    JOIN
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN
        Tags t ON t.Id = ANY(string_to_array(p.Tags, '>')::TEXT[])
    WHERE
        p.PostTypeId = 1 
    GROUP BY
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, u.DisplayName, u.Reputation
),
TopPostStatistics AS (
    SELECT
        rp.OwnerDisplayName,
        COUNT(rp.PostId) AS QuestionCount,
        AVG(rp.ViewCount) AS AvgViews,
        AVG(rp.Score) AS AvgScore,
        MAX(rp.Reputation) AS HighestReputation,
        STRING_AGG(DISTINCT rp.Tags, ', ') AS AllTags
    FROM
        RankedPosts rp
    WHERE
        rp.Rank <= 5 
    GROUP BY
        rp.OwnerDisplayName
),
ClosedPosts AS (
    SELECT
        ph.PostId,
        ph.CreationDate,
        ph.Comment,
        pt.Name AS PostHistoryType
    FROM
        PostHistory ph
    JOIN
        PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    WHERE
        pt.Name IN ('Post Closed', 'Post Reopened')
)
SELECT
    tps.OwnerDisplayName,
    tps.QuestionCount,
    tps.AvgViews,
    tps.AvgScore,
    tps.HighestReputation,
    tps.AllTags,
    COALESCE(cp.ClosedCount, 0) AS ClosedPostCount
FROM
    TopPostStatistics tps
LEFT JOIN (
    SELECT
        ph.UserDisplayName,
        COUNT(ph.PostId) AS ClosedCount
    FROM
        ClosedPosts ph
    JOIN
        Users u ON ph.UserId = u.Id
    WHERE
        ph.PostHistoryType = 'Post Closed'
    GROUP BY
        ph.UserDisplayName
) cp ON tps.OwnerDisplayName = cp.UserDisplayName
ORDER BY
    tps.QuestionCount DESC, tps.AvgScore DESC;
