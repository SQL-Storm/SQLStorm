
WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers,
        SUM(CASE WHEN c.Id IS NOT NULL THEN 1 ELSE 0 END) AS TotalComments,
        SUM(b.Class) AS TotalBadgePoints
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, ',')::TEXT[])
    GROUP BY 
        t.TagName
    ORDER BY 
        PostCount DESC
    LIMIT 10
),
PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COALESCE(SUM(c.Score), 0) AS CommentScore,
        p.ViewCount,
        p.CreationDate,
        p.LastActivityDate,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Tags t ON t.Id = ANY(string_to_array(p.Tags, ',')::TEXT[])
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.CreationDate, p.LastActivityDate
    ORDER BY 
        p.ViewCount DESC
    LIMIT 5
)
SELECT 
    ua.UserId,
    ua.DisplayName,
    ua.TotalPosts,
    ua.TotalQuestions,
    ua.TotalAnswers,
    ua.TotalComments,
    ua.TotalBadgePoints,
    pt.PostId,
    pt.Title AS PopularPostTitle,
    pt.CommentScore,
    pt.ViewCount,
    pt.CreationDate AS PostCreationDate,
    pt.LastActivityDate,
    pt.Tags
FROM 
    UserActivity ua
JOIN 
    PostMetrics pt ON ua.TotalPosts > 0
JOIN 
    PopularTags tag ON pt.Tags && ARRAY[tag.TagName]
WHERE 
    ua.TotalQuestions > 5
ORDER BY 
    ua.TotalBadgePoints DESC, pt.ViewCount DESC;
