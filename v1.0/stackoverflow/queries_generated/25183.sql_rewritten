WITH UserBadgeCounts AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Users U
    LEFT JOIN Badges B ON U.Id = B.UserId
    GROUP BY U.Id, U.DisplayName
),
PopularTags AS (
    SELECT 
        T.TagName,
        COUNT(P.Id) AS PostCount
    FROM Tags T
    JOIN Posts P ON P.Tags LIKE '%' || T.TagName || '%'
    GROUP BY T.TagName
    ORDER BY PostCount DESC
    LIMIT 10
),
RecentPostStats AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        U.DisplayName AS OwnerDisplayName,
        COUNT(C.Id) AS CommentCount,
        SUM(V.VoteTypeId = 2) AS UpVoteCount,
        SUM(V.VoteTypeId = 3) AS DownVoteCount,
        STRING_AGG(T.TagName, ', ') AS Tags
    FROM Posts P
    LEFT JOIN Users U ON P.OwnerUserId = U.Id
    LEFT JOIN Comments C ON P.Id = C.PostId
    LEFT JOIN Votes V ON P.Id = V.PostId
    WHERE P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY P.Id, P.Title, P.CreationDate, U.DisplayName
),
BenchmarkResults AS (
    SELECT 
        U.DisplayName,
        U.Reputation,
        U.BadgeCount,
        R.Tags,
        R.CommentCount,
        R.UpVoteCount,
        R.DownVoteCount,
        R.CreationDate,
        R.Title
    FROM UserBadgeCounts U
    JOIN RecentPostStats R ON U.UserId = R.OwnerUserId
)
SELECT 
    B.UserDisplayName,
    B.Reputation,
    B.BadgeCount,
    B.Tags,
    B.CommentCount,
    B.UpVoteCount,
    B.DownVoteCount,
    STRING_AGG(P.TagName, ', ') AS PopularTags
FROM BenchmarkResults B
JOIN PopularTags P ON P.PostCount > 5
GROUP BY B.UserDisplayName, B.Reputation, B.BadgeCount, B.Tags, B.CommentCount, B.UpVoteCount, B.DownVoteCount
ORDER BY B.Reputation DESC, B.BadgeCount DESC;