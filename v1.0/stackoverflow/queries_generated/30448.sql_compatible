
WITH RecursivePosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 /* Questions */
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.AcceptedAnswerId,
        rp.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePosts rp ON p.ParentId = rp.Id
    WHERE 
        p.PostTypeId = 2 /* Answers */
),
PostVoteCounts AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(*) AS TotalVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
PostHistoryWithClosure AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        ph.UserId,
        ph.Comment,
        ph.PostHistoryTypeId,
        CASE 
            WHEN ph.PostHistoryTypeId = 10 THEN 'Post Closed'
            WHEN ph.PostHistoryTypeId = 11 THEN 'Post Reopened'
            ELSE NULL
        END AS ClosureStatus
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    rp.Id AS PostId,
    rp.Title,
    rp.Score,
    rp.CreationDate,
    COALESCE(v.UpVotes, 0) AS UpVotes,
    COALESCE(v.DownVotes, 0) AS DownVotes,
    COALESCE(v.TotalVotes, 0) AS TotalVotes,
    ph.Comment AS PostHistoryComment,
    ph.ClosureStatus AS PostClosureStatus,
    ub.BadgeCount AS UserBadgeCount,
    CASE 
        WHEN ph.ClosureStatus = 'Post Closed' THEN 'This post has been closed.'
        WHEN ph.ClosureStatus = 'Post Reopened' THEN 'This post has been reopened.'
        ELSE 'Post status is active.'
    END AS PostStatusMessage
FROM 
    RecursivePosts rp
LEFT JOIN 
    PostVoteCounts v ON rp.Id = v.PostId
LEFT JOIN 
    PostHistoryWithClosure ph ON rp.Id = ph.PostId
LEFT JOIN 
    Users u ON rp.AcceptedAnswerId = u.Id
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
WHERE 
    rp.Score > 10
ORDER BY 
    COALESCE(v.TotalVotes, 0) DESC, 
    rp.CreationDate DESC;
