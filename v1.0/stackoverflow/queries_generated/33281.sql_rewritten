WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        ParentId,
        Title,
        CreationDate,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL 
    UNION ALL
    SELECT 
        p.Id,
        p.ParentId,
        p.Title,
        p.CreationDate,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.Id
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        COALESCE(pv.ViewCount, 0) AS ViewCount,
        COALESCE(pv.AnswerCount, 0) AS AnswerCount,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        COALESCE(vu.UpVotes, 0) AS UpVotes,
        COALESCE(vu.DownVotes, 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        (SELECT PostId, SUM(ViewCount) AS ViewCount, COUNT(*) AS AnswerCount 
         FROM Posts WHERE PostTypeId = 2 GROUP BY PostId) pv ON p.Id = pv.PostId
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS CommentCount 
         FROM Comments GROUP BY PostId) pc ON p.Id = pc.PostId
    LEFT JOIN 
        (SELECT OwnerUserId, SUM(UpVotes) AS UpVotes, SUM(DownVotes) AS DownVotes 
         FROM Users GROUP BY OwnerUserId) vu ON p.OwnerUserId = vu.OwnerUserId
),
UserBadgeCounts AS (
    SELECT 
        UserId, 
        COUNT(*) AS BadgeCount, 
        MAX(CASE WHEN Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        MAX(CASE WHEN Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        MAX(CASE WHEN Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Badges
    GROUP BY 
        UserId
),
TopUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        COALESCE(ub.BadgeCount, 0) AS BadgeCount,
        (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = u.Id) AS PostsCount 
    FROM 
        Users u
    LEFT JOIN 
        UserBadgeCounts ub ON u.Id = ub.UserId
    WHERE 
        u.Reputation > 1000 
)
SELECT 
    p.Id AS PostId,
    p.Title,
    ps.ViewCount,
    ps.AnswerCount,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes,
    u.DisplayName AS OwnerName,
    ub.BadgeCount AS OwnerBadgeCount,
    utc.Level AS PostLevel
FROM 
    Posts p
JOIN 
    PostStatistics ps ON p.Id = ps.PostId
JOIN 
    TopUsers u ON p.OwnerUserId = u.Id
JOIN 
    RecursivePostHierarchy utc ON p.ParentId = utc.Id
WHERE 
    (ps.UpVotes - ps.DownVotes) > 10 
ORDER BY 
    ps.ViewCount DESC, 
    ps.AnswerCount DESC;