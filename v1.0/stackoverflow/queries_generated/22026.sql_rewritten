WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COALESCE(
            (SELECT COUNT(*) 
             FROM Votes v 
             WHERE v.PostId = p.Id AND v.VoteTypeId = (SELECT Id FROM VoteTypes WHERE Name = 'UpMod')), 0) AS UpvoteCount,
        COALESCE(
            (SELECT COUNT(*) 
             FROM Votes v 
             WHERE v.PostId = p.Id AND v.VoteTypeId = (SELECT Id FROM VoteTypes WHERE Name = 'DownMod')), 0) AS DownvoteCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
)
SELECT 
    up.UsersReputation,
    p.PostId,
    p.Title,
    p.Score,
    p.CreationDate,
    p.UpvoteCount,
    p.DownvoteCount,
    CASE 
        WHEN p.Score > 10 THEN 'Hot'
        WHEN p.Score BETWEEN 1 AND 10 THEN 'Warm'
        ELSE 'Cold' 
    END AS HeatStatus,
    (SELECT COUNT(*) 
     FROM Comments c 
     WHERE c.PostId = p.PostId AND c.CreationDate > (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days')) AS RecentComments,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    RankedPosts p
LEFT JOIN 
    Users up ON up.Id = p.OwnerUserId
LEFT JOIN 
    LATERAL (SELECT unnest(string_to_array(p.Tags, '<>')) AS TagName) tags ON TRUE
LEFT JOIN 
    Tags t ON t.TagName = tags.TagName
WHERE 
    p.rn = 1 
    AND p.UpvoteCount >= p.DownvoteCount 
GROUP BY 
    up.UsersReputation, p.PostId, p.Title, p.Score, p.CreationDate, p.UpvoteCount, p.DownvoteCount
HAVING 
    SUM(CASE WHEN t.IsModeratorOnly THEN 1 ELSE 0 END) = 0 
ORDER BY 
    CASE 
        WHEN HeatStatus = 'Hot' THEN 1
        WHEN HeatStatus = 'Warm' THEN 2
        ELSE 3 
    END, 
    p.Score DESC
LIMIT 100;