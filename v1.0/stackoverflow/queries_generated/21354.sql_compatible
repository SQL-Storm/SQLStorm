
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        p.AnswerCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RecentPost
    FROM 
        Posts p
    WHERE
        p.CreationDate >= DATE_SUB(CAST('2024-10-01' AS DATE), INTERVAL 1 YEAR)
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        rp.AnswerCount,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        CASE 
            WHEN rp.Score IS NULL THEN 'Unknown Score'
            WHEN rp.Score > 0 THEN 'Positive Score'
            ELSE 'Non-Positive Score' 
        END AS ScoreCategory,
        CASE 
            WHEN rp.ViewCount IS NULL OR rp.ViewCount = 0 THEN 'No Views'
            ELSE 'Has Views'
        END AS ViewCategory
    FROM 
        RankedPosts rp
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments
        GROUP BY 
            PostId
    ) pc ON rp.PostId = pc.PostId
    WHERE
        rp.RankScore <= 5
),
SubQueries AS (
    SELECT 
        fp.*,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = fp.PostId AND v.VoteTypeId = 2) AS UpVotes,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = fp.PostId AND v.VoteTypeId = 3) AS DownVotes
    FROM 
        FilteredPosts fp
),
FinalSelection AS (
    SELECT 
        sq.PostId,
        sq.Title,
        sq.Score,
        sq.ViewCount,
        sq.AnswerCount,
        sq.CommentCount,
        sq.UpVotes,
        sq.DownVotes,
        SQRT(sq.Score + COALESCE(sq.CommentCount, 0)) AS EngagementScore,
        (CAST(sq.UpVotes AS DECIMAL) / NULLIF(sq.DownVotes, 0)) AS UpVoteRatio
    FROM 
        SubQueries sq
    WHERE 
        sq.ScoreCategory = 'Positive Score' AND
        sq.UpVoteRatio IS NOT NULL
)
SELECT 
    fs.*,
    CASE 
        WHEN fs.EngagementScore >= 10 THEN 'Highly Engaged'
        WHEN fs.EngagementScore >= 5 THEN 'Moderately Engaged'
        ELSE 'Low Engagement'
    END AS EngagementLevel
FROM 
    FinalSelection fs
WHERE 
    fs.CommentCount > 0
ORDER BY 
    fs.EngagementScore DESC, 
    fs.Score DESC
LIMIT 100;
