WITH TaggedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.CreationDate,
        p.ViewCount,
        p.AcceptedAnswerId,
        p.AnswerCount,
        p.CommentCount,
        t.TagName,
        ROW_NUMBER() OVER (PARTITION BY t.TagName ORDER BY p.ViewCount DESC) AS TagRank
    FROM 
        Posts p
    JOIN 
        Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::int[])
    WHERE 
        p.PostTypeId = 1 
),

TopTaggedPosts AS (
    SELECT 
        PostId,
        Title,
        Body,
        Tags,
        CreationDate,
        ViewCount,
        AcceptedAnswerId,
        AnswerCount,
        CommentCount
    FROM 
        TaggedPosts
    WHERE 
        TagRank <= 5
),

UserBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName
),

PostStatistics AS (
    SELECT 
        p.PostId,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVoteCount,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVoteCount
    FROM 
        TopTaggedPosts p
    LEFT JOIN 
        Comments c ON c.PostId = p.PostId
    LEFT JOIN 
        Votes v ON v.PostId = p.PostId
    GROUP BY 
        p.PostId
)

SELECT 
    tp.Title,
    tp.Body,
    tp.Tags,
    tp.CreationDate,
    tp.ViewCount,
    tp.AcceptedAnswerId,
    tp.AnswerCount,
    tp.CommentCount,
    ub.DisplayName AS TopContributor,
    ub.BadgeCount,
    ps.CommentCount AS TotalComments,
    ps.UpVoteCount,
    ps.DownVoteCount
FROM 
    TopTaggedPosts tp
JOIN 
    UserBadges ub ON ub.UserId = tp.AcceptedAnswerId
JOIN 
    PostStatistics ps ON ps.PostId = tp.PostId
ORDER BY 
    tp.ViewCount DESC, 
    tp.CreationDate DESC
LIMIT 10;