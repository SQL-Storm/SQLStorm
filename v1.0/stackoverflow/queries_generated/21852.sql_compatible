
WITH RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.CreationDate > DATEADD(day, -30, CAST('2024-10-01' AS DATE))
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        CASE 
            WHEN u.Reputation IS NULL OR u.Reputation < 100 THEN 'Low Reputation'
            WHEN u.Reputation BETWEEN 100 AND 500 THEN 'Medium Reputation'
            ELSE 'High Reputation'
        END AS ReputationLevel
    FROM 
        Users u
),
PostLinks AS (
    SELECT 
        pl.PostId,
        pl.RelatedPostId,
        lt.Name AS LinkType
    FROM 
        PostLinks pl
    JOIN 
        LinkTypes lt ON pl.LinkTypeId = lt.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    COALESCE(u.DisplayName, 'Anonymous') AS OwnerDisplayName,
    ur.ReputationLevel,
    (SELECT COUNT(c.Id) 
     FROM Comments c 
     WHERE c.PostId = rp.PostId) AS CommentCount,
    (SELECT COUNT(v.Id) 
     FROM Votes v 
     WHERE v.PostId = rp.PostId AND v.VoteTypeId = 2) AS UpVoteCount,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Tags t 
     WHERE t.Id IN (SELECT CAST(UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS INTEGER)) 
                    WHERE t.Id IS NOT NULL) 
    ) AS AssociatedTags
FROM 
    RecentPosts rp
LEFT JOIN 
    Users u ON rp.OwnerUserId = u.Id
JOIN 
    UserReputation ur ON ur.UserId = u.Id
LEFT JOIN 
    PostLinks pl ON pl.PostId = rp.PostId
WHERE 
    rp.rn = 1
    AND (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.PostId AND v.VoteTypeId = 3) > 0 
GROUP BY 
    rp.PostId, rp.Title, rp.CreationDate, rp.Score, u.DisplayName, ur.ReputationLevel
ORDER BY 
    ur.ReputationLevel DESC, rp.Score DESC
OFFSET 10 ROWS FETCH NEXT 20 ROWS ONLY;
