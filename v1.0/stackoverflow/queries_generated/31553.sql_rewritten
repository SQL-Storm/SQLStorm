WITH RECURSIVE UserHierarchy AS (
    SELECT Id, DisplayName, Reputation, CreationDate, UpVotes, DownVotes, 1 AS Level
    FROM Users
    WHERE Id = (SELECT MIN(Id) FROM Users) 

    UNION ALL

    SELECT u.Id, u.DisplayName, u.Reputation, u.CreationDate, u.UpVotes, u.DownVotes, uh.Level + 1
    FROM Users u
    INNER JOIN UserHierarchy uh ON u.Id = uh.Id + 1  
),

PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),

UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.PostId) AS PostCount,
        COALESCE(SUM(ps.CommentCount), 0) AS TotalComments,
        COALESCE(SUM(ps.UpVotes), 0) AS TotalUpVotes,
        COALESCE(SUM(ps.DownVotes), 0) AS TotalDownVotes
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN PostStats ps ON p.Id = ps.PostId
    GROUP BY u.Id, u.DisplayName
),

RankedUsers AS (
    SELECT 
        u.*,
        RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank,
        ROW_NUMBER() OVER (ORDER BY u.CreationDate) AS AccountAgeRank
    FROM Users u
)

SELECT 
    r.DisplayName, 
    r.Reputation, 
    r.ReputationRank, 
    r.AccountAgeRank, 
    ups.PostCount,
    ups.TotalComments,
    ups.TotalUpVotes,
    ups.TotalDownVotes
FROM RankedUsers r
LEFT JOIN UserPostStats ups ON r.Id = ups.UserId
WHERE r.Reputation > 1000 
ORDER BY r.Reputation DESC, ups.PostCount DESC;