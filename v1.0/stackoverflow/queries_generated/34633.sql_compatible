
WITH RecursiveUserVotes AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        v.PostId,
        vt.Name AS VoteType,
        v.CreationDate,
        1 AS VoteLevel
    FROM Users u
    JOIN Votes v ON u.Id = v.UserId
    JOIN VoteTypes vt ON v.VoteTypeId = vt.Id
    WHERE v.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days'
    
    UNION ALL
    
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        pv.PostId,
        vt.Name AS VoteType,
        pv.CreationDate,
        rv.VoteLevel + 1 AS VoteLevel
    FROM Votes pv
    JOIN Users u ON pv.UserId = u.Id
    JOIN VoteTypes vt ON pv.VoteTypeId = vt.Id
    JOIN RecursiveUserVotes rv ON rv.PostId = pv.PostId
    WHERE rv.VoteLevel < 3
),

PostAnalytics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        COUNT(v.Id) AS TotalVotes,
        AVG(u.Reputation) AS AverageReputation,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 
            (SELECT COUNT(*) FROM Posts ans WHERE ans.Id = p.AcceptedAnswerId AND ans.PostTypeId = 2) 
        ELSE 0 END AS AnswerAccepted 
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Users u ON v.UserId = u.Id
    LEFT JOIN LATERAL STRING_TO_ARRAY(p.Tags, ',') AS tag ON TRUE
    LEFT JOIN Tags t ON tag = t.TagName
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '90 days'
    GROUP BY p.Id, p.Title, p.ViewCount
),

UserBadgeCounts AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
)

SELECT 
    p.Title,
    p.ViewCount,
    p.TotalVotes,
    p.AverageReputation,
    p.Tags,
    ub.BadgeCount,
    ub.HighestBadgeClass,
    rv.UserId,
    rv.DisplayName,
    rv.VoteType,
    rv.CreationDate AS VoteDate
FROM PostAnalytics p
LEFT JOIN UserBadgeCounts ub ON p.PostId = ub.UserId
LEFT JOIN RecursiveUserVotes rv ON p.PostId = rv.PostId
ORDER BY p.ViewCount DESC, p.TotalVotes DESC, ub.BadgeCount DESC
LIMIT 10;
