
WITH RecursivePosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.OwnerUserId, 
        p.PostTypeId,
        0 AS Depth
    FROM 
        Posts p 
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id, 
        p.Title, 
        p.OwnerUserId,
        p.PostTypeId,
        rp.Depth + 1 AS Depth
    FROM 
        Posts p
    INNER JOIN 
        RecursivePosts rp ON p.ParentId = rp.PostId
),
PostVoteSummary AS (
    SELECT 
        p.Id AS PostId,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes,
        COUNT(v.Id) AS TotalVotes
    FROM 
        Posts p 
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
ClosedPosts AS (
    SELECT 
        h.PostId,
        STRING_AGG(h.Comment, '; ') AS CloseComments
    FROM 
        PostHistory h
    WHERE 
        h.PostHistoryTypeId = 10
    GROUP BY 
        h.PostId
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerDisplayName,
        COALESCE(ps.UpVotes, 0) AS UpVotes,
        COALESCE(ps.DownVotes, 0) AS DownVotes,
        COALESCE(bs.BadgeCount, 0) AS UserBadgeCount,
        COALESCE(cp.CloseComments, 'No comments') AS CloseComments,
        rp.Depth AS PostDepth
    FROM 
        Posts p 
    LEFT JOIN 
        PostVoteSummary ps ON p.Id = ps.PostId
    LEFT JOIN 
        UserBadges bs ON p.OwnerUserId = bs.UserId
    LEFT JOIN 
        ClosedPosts cp ON p.Id = cp.PostId
    LEFT JOIN 
        RecursivePosts rp ON p.Id = rp.PostId
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '90 DAY')
        AND p.PostTypeId = 1
),
FinalResults AS (
    SELECT 
        pd.*,
        ROW_NUMBER() OVER (PARTITION BY pd.PostDepth ORDER BY pd.UpVotes DESC) AS RankPerDepth
    FROM 
        PostDetails pd
)
SELECT 
    PostId,
    Title,
    OwnerDisplayName,
    UpVotes,
    DownVotes,
    UserBadgeCount,
    CloseComments,
    RankPerDepth
FROM 
    FinalResults
WHERE 
    RankPerDepth <= 5
ORDER BY 
    PostDepth, UpVotes DESC;
