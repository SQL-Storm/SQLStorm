WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        COALESCE(SUM(v.VoteTypeId = 2) - SUM(v.VoteTypeId = 3), 0) AS NetVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
TopUsers AS (
    SELECT 
        OwnerUserId,
        COUNT(*) AS PostCount,
        SUM(Score) AS TotalScore
    FROM 
        RankedPosts
    WHERE 
        PostCount > 0
    GROUP BY 
        OwnerUserId
    ORDER BY 
        TotalScore DESC
    LIMIT 10
),
PostDetails AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CommentCount,
        rp.CreationDate,
        rp.Score,
        tu.PostCount,
        tu.TotalScore,
        CASE 
            WHEN rp.NetVotes > 0 THEN 'Popular' 
            WHEN rp.NetVotes < 0 THEN 'Unpopular'
            ELSE 'Neutral' 
        END AS PopularityStatus
    FROM 
        RankedPosts rp
    LEFT JOIN 
        TopUsers tu ON rp.OwnerUserId = tu.OwnerUserId
)

SELECT 
    pd.Id,
    pd.Title,
    pd.CommentCount,
    pd.CreationDate,
    pd.Score,
    pd.PostCount,
    pd.TotalScore,
    pd.PopularityStatus,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    PostDetails pd
LEFT JOIN 
    Posts p ON pd.Id = p.Id
LEFT JOIN 
    LATERAL (
        SELECT 
            unnest(string_to_array(p.Tags, '><')) AS TagName
    ) t ON true
WHERE 
    pd.CommentCount > 5
GROUP BY 
    pd.Id, pd.Title, pd.CommentCount, pd.CreationDate, pd.Score, pd.PostCount, pd.TotalScore, pd.PopularityStatus
ORDER BY 
    pd.TotalScore DESC, pd.CommentCount DESC;