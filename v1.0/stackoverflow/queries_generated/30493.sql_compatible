
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.ParentId, 
        0 AS Level
    FROM 
        Posts p 
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id, 
        p.Title, 
        p.ParentId, 
        ph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy ph ON p.ParentId = ph.PostId 
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COALESCE(pc.CommentCount, 0) AS TotalComments,
        COALESCE(pa.AnswerCount, 0) AS TotalAnswers,
        COALESCE(pt.ViewCount, 0) AS TotalViews,
        COALESCE(v.UpVotes, 0) AS TotalUpVotes,
        COALESCE(v.DownVotes, 0) AS TotalDownVotes,
        CASE 
            WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Accepted'
            ELSE 'Not Accepted'
        END AS AcceptanceStatus,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId, 
            COUNT(*) AS CommentCount 
        FROM 
            Comments 
        GROUP BY 
            PostId
    ) pc ON p.Id = pc.PostId
    LEFT JOIN (
        SELECT 
            ParentId, 
            COUNT(*) AS AnswerCount 
        FROM 
            Posts 
        WHERE 
            PostTypeId = 2  
        GROUP BY 
            ParentId 
    ) pa ON p.Id = pa.ParentId
    LEFT JOIN (
        SELECT 
            PostId, 
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes 
        FROM 
            Votes 
        GROUP BY 
            PostId
    ) v ON p.Id = v.PostId
    LEFT JOIN (
        SELECT 
            pt.Id, 
            STRING_AGG(t.TagName, ', ') AS TagName 
        FROM 
            Posts pt
        CROSS JOIN 
            UNNEST(string_to_array(pt.Tags, '><')) AS t(TagName) 
        GROUP BY 
            pt.Id
    ) t ON p.Id = t.Id
    GROUP BY 
        p.Id, p.Title, p.AcceptedAnswerId
)
SELECT 
    r.PostId,
    r.Title,
    ps.TotalComments,
    ps.TotalAnswers,
    ps.TotalViews,
    ps.TotalUpVotes,
    ps.TotalDownVotes,
    ps.AcceptanceStatus,
    r.Level AS HierarchyLevel,
    COUNT(DISTINCT t.TagName) AS UniqueTags
FROM 
    RecursivePostHierarchy r
JOIN 
    PostStats ps ON r.PostId = ps.PostId
LEFT JOIN 
    (SELECT DISTINCT UNNEST(string_to_array(ps.Tags, ', ')) AS TagName) t ON t.TagName IN (SELECT UNNEST(string_to_array(ps.Tags, ', ')))
GROUP BY 
    r.PostId, r.Title, ps.TotalComments, ps.TotalAnswers, ps.TotalViews, 
    ps.TotalUpVotes, ps.TotalDownVotes, ps.AcceptanceStatus, r.Level
ORDER BY 
    r.Level, ps.TotalViews DESC
LIMIT 100 OFFSET 0;
