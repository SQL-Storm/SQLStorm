WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id
),
BadgeSummary AS (
    SELECT 
        u.Id AS UserId,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        COUNT(*) as ChangeCount,
        MAX(phi.CreationDate) AS LastChangeDate
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes phi ON ph.PostHistoryTypeId = phi.Id
    WHERE 
        ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId
),
UserInteraction AS (
    SELECT 
        p.PostId,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS TotalUpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS TotalDownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.Score,
    rp.CommentCount,
    bs.UserId,
    bs.GoldBadges,
    bs.SilverBadges,
    bs.BronzeBadges,
    phi.LastChangeDate,
    ui.TotalUpVotes,
    ui.TotalDownVotes,
    CASE 
        WHEN rp.Score IS NULL THEN 'No Score'
        WHEN rp.Score < 0 THEN 'Negative Score'
        WHEN rp.Score BETWEEN 1 AND 10 THEN 'Low Score'
        ELSE 'High Score'
    END AS ScoreCategory,
    CASE 
        WHEN EXISTS (SELECT 1 FROM Posts WHERE AcceptedAnswerId IS NULL AND Id = rp.PostId) THEN 'Unanswered'
        ELSE 'Answered'
    END AS AnswerStatus
FROM 
    RankedPosts rp
JOIN 
    BadgeSummary bs ON rp.PostId = bs.UserId
JOIN 
    PostHistorySummary phi ON rp.PostId = phi.PostId
JOIN 
    UserInteraction ui ON rp.PostId = ui.PostId
WHERE 
    rp.rn = 1
    AND rp.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
ORDER BY 
    rp.CreationDate DESC
FETCH FIRST 50 ROWS ONLY;