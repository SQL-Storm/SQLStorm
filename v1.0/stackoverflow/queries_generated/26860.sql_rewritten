WITH RankedQuestions AS (
    SELECT 
        p.Id AS QuestionId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COUNT(a.Id) AS AnswerCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
        ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId AND p.PostTypeId = 1 AND a.PostTypeId = 2
    LEFT JOIN 
        Tags t ON t.Id = ANY (string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score
),
TopQuestions AS (
    SELECT *
    FROM RankedQuestions
    WHERE Rank <= 10 
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.Views,
        u.UpVotes,
        u.DownVotes
    FROM 
        Users u
    WHERE 
        u.Reputation > 1000 
),
DetailedAnalysis AS (
    SELECT 
        tq.QuestionId,
        tq.Title,
        tq.CreationDate,
        tq.ViewCount,
        tq.Score,
        tq.AnswerCount,
        tq.Tags,
        ur.UserId,
        ur.DisplayName AS UserDisplayName,
        ur.Reputation AS UserReputation,
        ur.Views AS UserViews,
        ur.UpVotes AS UserUpVotes,
        ur.DownVotes AS UserDownVotes
    FROM 
        TopQuestions tq
    JOIN 
        Posts p ON tq.QuestionId = p.Id
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    JOIN 
        UserReputation ur ON u.Id = ur.UserId
)
SELECT 
    da.QuestionId,
    da.Title,
    da.CreationDate,
    da.ViewCount,
    da.Score,
    da.AnswerCount,
    da.Tags,
    da.UserDisplayName,
    da.UserReputation,
    da.UserViews,
    da.UserUpVotes,
    da.UserDownVotes,
    (SELECT COUNT(*) FROM Comments c WHERE c.PostId = da.QuestionId) AS CommentCount
FROM 
    DetailedAnalysis da
ORDER BY 
    da.Score DESC, da.ViewCount DESC;