
WITH UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpvoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownvoteCount,
        COUNT(DISTINCT p.Id) AS PostCount,
        COUNT(DISTINCT c.Id) AS CommentCount
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Comments c ON p.Id = c.PostId
    GROUP BY u.Id, u.DisplayName
),
PostAnalytics AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(DISTINCT c.Id) AS TotalComments,
        COUNT(DISTINCT CASE WHEN v.VoteTypeId = 2 THEN v.Id END) AS TotalUpvotes,
        COUNT(DISTINCT CASE WHEN v.VoteTypeId = 3 THEN v.Id END) AS TotalDownvotes,
        COUNT(DISTINCT bh.Id) AS BadgeCount
    FROM Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Badges bh ON u.Id = bh.UserId
    WHERE p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 YEAR'
    GROUP BY p.Id, p.Title, p.CreationDate, u.DisplayName
),
TopPosts AS (
    SELECT 
        pa.Title,
        pa.OwnerDisplayName,
        pa.ViewCount,
        pa.TotalComments,
        (pa.TotalUpvotes - pa.TotalDownvotes) AS NetVotes,
        RANK() OVER (ORDER BY pa.ViewCount DESC) AS ViewRank
    FROM PostAnalytics pa
    WHERE pa.TotalComments > 0
)
SELECT 
    u.DisplayName,
    ue.PostCount,
    ue.UpvoteCount,
    ue.DownvoteCount,
    tp.Title,
    tp.ViewCount,
    tp.TotalComments,
    tp.NetVotes,
    CASE 
        WHEN tp.ViewRank <= 10 THEN 'Top 10 Posts'
        ELSE 'Other Posts'
    END AS PostGroup
FROM UserEngagement ue
INNER JOIN TopPosts tp ON ue.UserId = tp.OwnerDisplayName
ORDER BY ue.Reputation DESC, tp.ViewCount DESC;
