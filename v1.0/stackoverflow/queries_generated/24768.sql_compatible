
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        p.ParentId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RecentPostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(p.Score, 0) AS NonNullScore
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE
        p.CreationDate >= DATEADD(YEAR, -1, '2024-10-01')
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBountyCount,
        COUNT(DISTINCT ph.Id) AS TotalPostHistory,
        COUNT(b.Id) AS TotalBadges,
        AVG(p.ViewCount) AS AvgPostViewCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        PostHistory ph ON u.Id = ph.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
MergedPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.ViewCount,
        COALESCE(SUM(p2.Score) FILTER (WHERE rp.ParentId IS NOT NULL), 0) AS TotalParentScore,
        COUNT(p2.Id) FILTER (WHERE p2.PostTypeId = 2) AS TotalAnswers,
        COALESCE(t.TagName, 'Unlabeled') AS TagName
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Posts p2 ON rp.ParentId = p2.Id
    LEFT JOIN 
        Tags t ON rp.Tags LIKE '%' || t.TagName || '%'
    GROUP BY 
        rp.PostId, rp.Title, rp.Score, rp.CreationDate, rp.ViewCount, t.TagName
),
FilteredPosts AS (
    SELECT 
        mp.*,
        ua.DisplayName,
        ua.TotalBadges,
        ua.TotalBountyCount
    FROM 
        MergedPosts mp
    JOIN 
        UserActivity ua ON ua.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = mp.PostId)
    WHERE 
        mp.Score > 10 AND
        (ua.TotalBountyCount > 0 OR ua.TotalBadges >= 1)
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.CreationDate,
    fp.ViewCount,
    fp.TotalParentScore,
    fp.TotalAnswers,
    COALESCE(fp.TagName, 'No Tags') AS TagDescription,
    CASE 
        WHEN fp.Score >= 100 THEN 'Highly Rated'
        WHEN fp.Score >= 50 THEN 'Moderately Rated'
        ELSE 'Low Rated'
    END AS RatingCategory,
    NULLIF(ua.DisplayName, '') AS UserName,
    COALESCE(ua.TotalBadges, 0) AS UserBadges,
    COUNT(DISTINCT c.Id) AS TotalComments
FROM 
    FilteredPosts fp
LEFT JOIN 
    Comments c ON c.PostId = fp.PostId
LEFT JOIN 
    UserActivity ua ON ua.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = fp.PostId)
GROUP BY 
    fp.PostId, fp.Title, fp.Score, fp.CreationDate, fp.ViewCount, fp.TotalParentScore, fp.TotalAnswers, fp.TagName, ua.DisplayName, ua.TotalBadges
ORDER BY 
    fp.Score DESC, fp.CreationDate ASC
LIMIT 100;
