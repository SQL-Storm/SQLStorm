WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.UserId) AS VoteCount,
        JSON_AGG(DISTINCT t.TagName) AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id AND v.VoteTypeId = 2  
    LEFT JOIN 
        UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')) AS t(TagName) ON TRUE
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
UserRankedPosts AS (
    SELECT 
        r.OwnerUserId,
        COUNT(*) AS PostCount,
        AVG(r.Score) AS AvgScore,
        AVG(r.ViewCount) AS AvgViewCount,
        SUM(r.CommentCount) AS TotalComments,
        SUM(r.VoteCount) AS TotalVotes
    FROM 
        RankedPosts r
    JOIN 
        Users u ON r.OwnerUserId = u.Id
    WHERE 
        r.UserRank <= 3
    GROUP BY 
        r.OwnerUserId
)
SELECT 
    u.Id AS UserId,
    u.DisplayName,
    u.Reputation,
    urp.PostCount,
    urp.AvgScore,
    urp.AvgViewCount,
    urp.TotalComments,
    urp.TotalVotes
FROM 
    Users u
JOIN 
    UserRankedPosts urp ON u.Id = urp.OwnerUserId
ORDER BY 
    urp.TotalVotes DESC, u.Reputation DESC
LIMIT 10;