
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER(PARTITION BY p.PostTypeId ORDER BY SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CURRENT_DATE - INTERVAL '30 DAY'
    GROUP BY 
        p.Id, p.Title, p.PostTypeId
),

RecentBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Badges b
    WHERE 
        b.Date >= CURRENT_DATE - INTERVAL '1 YEAR'
    GROUP BY 
        b.UserId
),

FinalRank AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        rb.BadgeCount,
        CASE 
            WHEN rb.BadgeCount IS NULL THEN 'No Badges'
            ELSE 
                CASE 
                    WHEN rb.BadgeCount > 10 THEN 'Active Contributor'
                    WHEN rb.BadgeCount BETWEEN 1 AND 10 THEN 'Novice Contributor'
                END
        END AS ContributorLevel
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Users u ON u.Id = (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
    LEFT JOIN 
        RecentBadges rb ON rb.UserId = u.Id
)

SELECT 
    fr.PostId,
    fr.Title,
    fr.CommentCount,
    fr.UpVotes,
    fr.DownVotes,
    fr.BadgeCount,
    fr.ContributorLevel
FROM 
    FinalRank fr
WHERE 
    fr.Rank <= 5 
ORDER BY 
    fr.UpVotes DESC, 
    fr.DownVotes ASC NULLS LAST, 
    fr.CommentCount DESC;
