WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        COALESCE(COALESCE(pa.Score, 0), 0) AS AcceptedAnswerScore,
        p.AnswerCount,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Posts pa ON p.AcceptedAnswerId = pa.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, u.DisplayName, pa.Score
),
RemarkablePosts AS (
    SELECT 
        rp.*,
        CONCAT('Post Title: ', rp.Title, ' | Posted by: ', rp.OwnerDisplayName) AS RemarkableTitle,
        CASE 
            WHEN rp.ViewCount > 1000 THEN 'Popular'
            WHEN rp.AnswerCount > 5 THEN 'Active'
            ELSE 'Standard' 
        END AS PostClassification
    FROM 
        RankedPosts rp
    WHERE 
        rp.PostRank <= 5 
)
SELECT 
    r.RemarkableTitle,
    r.CreatedDate,
    r.AnswerCount,
    r.ViewCount,
    r.CommentCount,
    r.PostClassification,
    string_agg(DISTINCT tt.TagName, ', ') AS Tags
FROM 
    RemarkablePosts r
LEFT JOIN 
    UNNEST(r.Tags) AS tt(TagName)
GROUP BY 
    r.RemarkableTitle, r.CreatedDate, r.AnswerCount, r.ViewCount, r.CommentCount, r.PostClassification
ORDER BY 
    r.ViewCount DESC;