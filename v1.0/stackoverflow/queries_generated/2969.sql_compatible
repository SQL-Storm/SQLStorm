
WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        MAX(b.Date) AS LastBadgeDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
PostHistoryStats AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS CloseCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 END) AS ReopenCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
RankedPosts AS (
    SELECT 
        ps.PostId,
        ps.CommentCount,
        ps.UpVoteCount,
        ps.DownVoteCount,
        COALESCE(phs.CloseCount, 0) AS CloseCount,
        COALESCE(phs.ReopenCount, 0) AS ReopenCount,
        ROW_NUMBER() OVER (ORDER BY ps.UpVoteCount DESC, ps.CommentCount DESC) AS Rank
    FROM 
        PostStats ps
    LEFT JOIN 
        PostHistoryStats phs ON ps.PostId = phs.PostId
)

SELECT 
    p.Title,
    p.OwnerDisplayName,
    r.CommentCount,
    r.UpVoteCount,
    r.DownVoteCount,
    r.CloseCount,
    r.ReopenCount,
    r.Rank,
    STRING_AGG(t.TagName, ', ') AS Tags
FROM 
    RankedPosts r
JOIN 
    Posts p ON r.PostId = p.Id
LEFT JOIN 
    (SELECT 
        UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) ) AS TagName
     FROM 
        Posts p) tags ON t.TagName = tags.TagName
JOIN 
    Tags t ON t.TagName = tags.TagName
WHERE 
    r.Rank <= 10
GROUP BY 
    p.Title, p.OwnerDisplayName, r.CommentCount, r.UpVoteCount, r.DownVoteCount, r.CloseCount, r.ReopenCount, r.Rank
ORDER BY 
    r.Rank;
