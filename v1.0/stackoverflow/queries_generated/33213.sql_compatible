
WITH RECURSIVE RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
)

SELECT 
    u.DisplayName AS UserName,
    u.Reputation,
    p.Title AS QuestionTitle,
    p.CreationDate AS QuestionDate,
    COALESCE(ah.AcceptedAnswerId, 0) AS AcceptedAnswerId,
    COUNT(DISTINCT c.Id) AS CommentCount,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
    STRING_AGG(DISTINCT tag.TagName, ', ') AS Tags,
    ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY SUM(v.VoteTypeId) DESC) AS UserRank,
    ROW_NUMBER() OVER (PARTITION BY ah.AcceptedAnswerId ORDER BY p.CreationDate DESC) AS AnswerRank
FROM 
    Posts p
LEFT JOIN 
    Posts ah ON p.AcceptedAnswerId = ah.Id
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    Comments c ON p.Id = c.PostId
LEFT JOIN 
    Votes v ON p.Id = v.PostId
LEFT JOIN 
    LATERAL (
        SELECT 
            STRING_AGG(DISTINCT tag.TagName, ', ') AS TagList
        FROM 
            Tags tag
        WHERE 
            tag.ExcerptPostId = p.Id
    ) AS tag ON TRUE
WHERE 
    p.PostTypeId = 1
GROUP BY 
    u.Id, u.DisplayName, u.Reputation, p.Id, p.Title, p.CreationDate, ah.AcceptedAnswerId
HAVING 
    COUNT(DISTINCT c.Id) > 0 OR SUM(v.VoteTypeId) > 0
ORDER BY 
    u.Reputation DESC, COALESCE(SUM(v.VoteTypeId), 0) DESC
LIMIT 100;
