WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM Posts p
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(u.UpVotes) AS TotalUpVotes,
        SUM(u.DownVotes) AS TotalDownVotes,
        COUNT(DISTINCT b.Id) AS TotalBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
),
ClosedPostStats AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS CloseCount,
        MAX(ph.CreationDate) AS LastClosed
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId IN (10, 11)
    GROUP BY ph.PostId
)

SELECT 
    p.Title,
    p.CreationDate,
    p.Score,
    p.ViewCount,
    u.DisplayName AS Owner,
    us.TotalUpVotes,
    us.TotalDownVotes,
    us.TotalBadges,
    c.CloseCount,
    c.LastClosed,
    CASE 
        WHEN p.ViewCount > 1000 THEN 'High Views'
        WHEN p.ViewCount BETWEEN 100 AND 1000 THEN 'Medium Views'
        ELSE 'Low Views'
    END AS ViewCategory
FROM RankedPosts p
JOIN Users u ON p.OwnerUserId = u.Id
JOIN UserStats us ON u.Id = us.UserId
LEFT JOIN ClosedPostStats c ON p.PostId = c.PostId
WHERE p.rn = 1
ORDER BY p.Score DESC, p.ViewCount DESC;