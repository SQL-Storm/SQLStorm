WITH RecursivePostHistory AS (
    SELECT Id, PostId, CreationDate, UserId, PostHistoryTypeId, 
           ROW_NUMBER() OVER (PARTITION BY PostId ORDER BY CreationDate DESC) AS RevCount
    FROM PostHistory
    WHERE PostHistoryTypeId IN (10, 11)  
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COUNT(c.Id) AS CommentsCount,
        COALESCE(SUM(v.voteCount), 0) AS TotalVotes,
        AVG(u.Reputation) AS AverageUserReputation
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS voteCount
        FROM Votes
        WHERE VoteTypeId IN (2, 3)  
        GROUP BY PostId
    ) v ON p.Id = v.PostId
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    GROUP BY p.Id, p.Title, p.CreationDate
),
PostLinksStats AS (
    SELECT
        pl.PostId,
        COUNT(*) AS RelatedPostsCount,
        STRING_AGG(DISTINCT pt.Name, ', ') AS LinkTypes
    FROM 
        PostLinks pl
    JOIN 
        LinkTypes lt ON pl.LinkTypeId = lt.Id
    GROUP BY 
        pl.PostId
),
RankedPosts AS (
    SELECT
        ps.PostId,
        ps.Title,
        ps.CommentsCount,
        ps.TotalVotes,
        ps.AverageUserReputation,
        COALESCE(pl.RelatedPostsCount, 0) AS RelatedPostsCount,
        COALESCE(pl.LinkTypes, 'None') AS LinkTypes,
        ROW_NUMBER() OVER (ORDER BY ps.TotalVotes DESC, ps.CommentsCount DESC) AS PostRank
    FROM 
        PostStats ps
    LEFT JOIN 
        PostLinksStats pl ON ps.PostId = pl.PostId
)
SELECT 
    p.PostId,
    p.Title,
    p.CreationDate,
    p.CommentsCount,
    p.TotalVotes,
    p.AverageUserReputation,
    p.RelatedPostsCount,
    p.LinkTypes,
    (SELECT UserDisplayName FROM Users WHERE Id IN (SELECT UserId FROM RecursivePostHistory WHERE PostId = p.PostId ORDER BY CreationDate DESC LIMIT 1)) AS LastEditor
FROM 
    RankedPosts p
WHERE 
    p.PostRank <= 10  
ORDER BY 
    p.TotalVotes DESC;