
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.AnswerCount,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RN,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 AND 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
AggregatedUserData AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        SUM(u.UpVotes) AS TotalUpVotes,
        SUM(u.DownVotes) AS TotalDownVotes,
        SUM(p.ViewCount) AS TotalViewCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id
)
SELECT 
    up.DisplayName,
    COALESCE(a.TotalViewCount, 0) AS TotalViews,
    COALESCE(bp.BadgeCount, 0) AS TotalBadges,
    COUNT(rp.Id) AS RecentPostCount,
    AVG(rp.Score) AS AverageScore,
    CASE 
        WHEN COUNT(rp.Id) > 0 THEN 'Active User'
        ELSE 'Inactive User'
    END AS UserActivityStatus
FROM 
    Users up
LEFT JOIN 
    RankedPosts rp ON up.Id = rp.OwnerUserId 
LEFT JOIN 
    AggregatedUserData a ON up.Id = a.UserId
LEFT JOIN 
    (SELECT UserId, COUNT(Id) AS BadgeCount FROM Badges GROUP BY UserId) bp ON up.Id = bp.UserId
WHERE 
    up.Reputation >= 1000
GROUP BY 
    up.Id, up.DisplayName, a.TotalViewCount, bp.BadgeCount
HAVING 
    AVG(rp.Score) IS NOT NULL OR COUNT(rp.Id) > 0
ORDER BY 
    TotalViews DESC, AverageScore DESC
LIMIT 10;
