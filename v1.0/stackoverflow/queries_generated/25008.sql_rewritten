WITH RankedPosts AS (
    SELECT 
        p.Id AS PostID,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Tags,
        COUNT(DISTINCT c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.Tags
),
TopPosts AS (
    SELECT 
        rp.*
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5 
),
UserReputation AS (
    SELECT 
        u.Id AS UserID,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PostDetails AS (
    SELECT 
        tp.PostID,
        tp.Title,
        tp.CreationDate,
        tp.Score,
        tp.ViewCount,
        tp.CommentCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
        ur.UserID,
        ur.Reputation,
        ur.BadgeCount
    FROM 
        TopPosts tp
    JOIN 
        PostsTags pt ON tp.PostID = pt.PostID
    JOIN 
        Tags t ON pt.TagId = t.Id
    JOIN 
        Users u ON tp.OwnerUserId = u.Id
    JOIN 
        UserReputation ur ON u.Id = ur.UserID
    GROUP BY 
        tp.PostID, tp.Title, tp.CreationDate, tp.Score, tp.ViewCount, tp.CommentCount, ur.UserID, ur.Reputation, ur.BadgeCount
)
SELECT 
    pd.PostID,
    pd.Title,
    pd.CreationDate,
    pd.Score,
    pd.ViewCount,
    pd.CommentCount,
    pd.Tags,
    pd.Reputation,
    pd.BadgeCount
FROM 
    PostDetails pd
ORDER BY 
    pd.Score DESC, pd.ViewCount DESC;