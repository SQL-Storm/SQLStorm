
WITH RecursiveCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title AS PostTitle,
        p.AcceptedAnswerId,
        p.CreationDate,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.AcceptedAnswerId,
        p.CreationDate,
        r.Level + 1
    FROM 
        Posts p
    JOIN 
        RecursiveCTE r ON p.ParentId = r.PostId  
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON v.UserId = u.Id
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    WHERE 
        u.Reputation IS NOT NULL
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PostHistoryDetail AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name, ', ') AS ChangeTypes,
        STRING_AGG(DISTINCT ph.Comment, '; ') AS Comments,
        COUNT(ph.Id) AS HistoryCount
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
),
RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        RANK() OVER (ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.Score IS NOT NULL
)

SELECT 
    u.DisplayName AS User,
    us.Reputation,
    phd.PostId,
    phd.ChangeTypes,
    phd.Comments,
    rp.Title AS TopPostTitle,
    rp.Rank,
    COUNT(DISTINCT rc.PostId) AS RelatedPosts
FROM 
    UserStats us
JOIN 
    Users u ON us.UserId = u.Id
LEFT JOIN 
    PostHistoryDetail phd ON u.Id = (SELECT OwnerUserId FROM Posts WHERE Id = phd.PostId)
LEFT JOIN 
    RankedPosts rp ON rp.Score BETWEEN 50 AND 100  
LEFT JOIN 
    RecursiveCTE rc ON rc.AcceptedAnswerId = rp.Id
WHERE 
    us.Upvotes - us.Downvotes > 10  
GROUP BY 
    u.DisplayName, us.Reputation, phd.PostId, phd.ChangeTypes, phd.Comments, rp.Title, rp.Rank
HAVING 
    COUNT(DISTINCT rc.PostId) > 0  
ORDER BY 
    us.Reputation DESC, rp.Rank;
