
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COALESCE(u.DisplayName, 'Deleted User') AS OwnerDisplayName,
        COUNT(v.Id) AS VoteCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 YEAR'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName
), PostHistoryStats AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        COUNT(*) AS HistoryCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId
), PostWithHistory AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.OwnerDisplayName,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.VoteCount,
        rp.UpVotes,
        rp.DownVotes,
        COALESCE(ps.HistoryCount, 0) AS HistoryCount
    FROM 
        RankedPosts rp
    LEFT JOIN 
        PostHistoryStats ps ON rp.Id = ps.PostId
)
SELECT 
    p.Id,
    p.Title,
    p.OwnerDisplayName,
    p.CreationDate,
    p.Score,
    p.ViewCount,
    p.VoteCount,
    p.UpVotes,
    p.DownVotes,
    p.HistoryCount,
    CASE 
        WHEN p.Score > 100 THEN 'Highly Rated'
        WHEN p.Score BETWEEN 20 AND 100 THEN 'Moderately Rated'
        ELSE 'Low Rated'
    END AS RatingCategory
FROM 
    PostWithHistory p
WHERE 
    p.Rank = 1
ORDER BY 
    p.Score DESC, p.ViewCount DESC
LIMIT 10;
