WITH RecursivePostCTE AS (
    SELECT p.Id, p.Title, p.CreationDate, p.OwnerUserId, p.AcceptedAnswerId, 1 AS Level
    FROM Posts p
    WHERE p.PostTypeId = 1 

    UNION ALL

    SELECT a.Id, a.Title, a.CreationDate, a.OwnerUserId, a.AcceptedAnswerId, rp.Level + 1
    FROM Posts a
    INNER JOIN RecursivePostCTE rp ON a.ParentId = rp.Id
    WHERE a.PostTypeId = 2 
),
UserReputation AS (
    SELECT u.Id, u.DisplayName, u.Reputation,
           ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM Users u
    WHERE u.Reputation IS NOT NULL
),
LatestPostChanges AS (
    SELECT p.Id AS PostId, ph.PostHistoryTypeId, ph.CreationDate, 
           ph.UserDisplayName, ph.Comment,
           DENSE_RANK() OVER (PARTITION BY p.Id ORDER BY ph.CreationDate DESC) AS ChangeRank
    FROM PostHistory ph
    INNER JOIN Posts p ON ph.PostId = p.Id
    WHERE ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
)
SELECT 
    rp.Id AS QuestionId,
    rp.Title AS QuestionTitle,
    rp.CreationDate AS QuestionCreationDate,
    u.DisplayName AS OwnerDisplayName,
    u.Reputation AS OwnerReputation,
    uR.ReputationRank,
    COALESCE(lpc.Comment, 'No recent changes') AS LastChangeComment,
    COALESCE(lpc.CreationDate, 'No changes recorded') AS LastChangeDate,
    
    
    (SELECT COUNT(*) FROM Posts a WHERE a.ParentId = rp.Id AND a.PostTypeId = 2) AS AnswerCount,

    
    CASE 
        WHEN rp.AcceptedAnswerId IS NOT NULL 
            THEN (SELECT Title FROM Posts WHERE Id = rp.AcceptedAnswerId)
        ELSE 'No accepted answer'
    END AS AcceptedAnswerTitle,

    
    (SELECT COUNT(*) FROM Comments c WHERE c.PostId = rp.Id) AS TotalComments

FROM RecursivePostCTE rp
INNER JOIN Users u ON rp.OwnerUserId = u.Id
LEFT JOIN LatestPostChanges lpc ON lpc.PostId = rp.Id AND lpc.ChangeRank = 1
LEFT JOIN UserReputation uR ON u.Id = uR.Id
WHERE u.Reputation > 1000
ORDER BY OwnerReputation DESC, AnswerCount DESC;