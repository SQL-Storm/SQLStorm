WITH RecursivePostHierarchy AS (
    SELECT 
        P.Id AS PostId,
        P.ParentId,
        P.Title,
        P.CreationDate,
        1 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1 

    UNION ALL

    SELECT 
        P2.Id,
        P2.ParentId,
        P2.Title,
        P2.CreationDate,
        R.Level + 1
    FROM 
        Posts P2
    INNER JOIN 
        RecursivePostHierarchy R ON P2.ParentId = R.PostId
    WHERE 
        P2.PostTypeId = 2 
)
, RecentPosts AS (
    SELECT 
        P.Id,
        P.Title,
        P.CreationDate,
        P.Score,
        P.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS LatestPostRank
    FROM 
        Posts P
    WHERE 
        P.CreationDate >= DATEADD(MONTH, -3, GETDATE())
)
, UserReputation AS (
    SELECT 
        U.Id AS UserId,
        SUM(U.Reputation) AS TotalReputation
    FROM 
        Users U
    GROUP BY 
        U.Id
)
SELECT 
    RPH.PostId,
    RPH.Title AS QuestionTitle,
    RPH.CreationDate AS QuestionCreationDate,
    RPH.Level AS QuestionLevel,
    RP.Title AS LatestAnswerTitle,
    UP.TotalReputation,
    CASE WHEN RP.Score IS NULL THEN 'No Answers Yet' 
         ELSE CAST(RP.Score AS VARCHAR) + ' Votes' END AS AnswerScore
FROM 
    RecursivePostHierarchy RPH
LEFT JOIN (
    SELECT 
        PostId,
        Title,
        Score,
        ROW_NUMBER() OVER (PARTITION BY ParentId ORDER BY CreationDate DESC) AS AnswerRank
    FROM 
        Posts
    WHERE 
        PostTypeId = 2 
) RP ON RPH.PostId = RP.ParentId AND RP.AnswerRank = 1
JOIN 
    Users U ON RPH.OwnerUserId = U.Id
JOIN 
    UserReputation UP ON U.Id = UP.UserId
WHERE 
    RPH.Level <= 3 
ORDER BY 
    RPH.CreationDate DESC;