
WITH PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.PostTypeId,
        p.ViewCount,
        COALESCE(a.AnswerCount, 0) AS AnswerCount,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(b.BadgeCount, 0) AS BadgeCount,
        COALESCE(v.VoteCount, 0) AS VoteCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
    LEFT JOIN (
        SELECT ParentId, COUNT(*) AS AnswerCount
        FROM Posts
        WHERE PostTypeId = 2
        GROUP BY ParentId
    ) a ON p.Id = a.ParentId
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT UserId, COUNT(DISTINCT b.Id) AS BadgeCount
        FROM Badges b 
        JOIN Users u ON b.UserId = u.Id
        GROUP BY UserId
    ) b ON p.OwnerUserId = b.UserId
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS VoteCount
        FROM Votes
        GROUP BY PostId
    ) v ON p.Id = v.PostId
    LEFT JOIN (
        SELECT Id, TagName
        FROM Tags
    ) t ON t.Id IN (
        SELECT UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><'))
    )
    WHERE p.PostTypeId = 1
    GROUP BY p.Id, p.Title, p.Body, p.CreationDate, p.PostTypeId, p.ViewCount
), PostHistoryAggregation AS (
    SELECT 
        PostId,
        COUNT(*) AS HistoryCount,
        MAX(CreationDate) AS LastEditDate
    FROM PostHistory
    GROUP BY PostId
)

SELECT 
    pm.PostId,
    pm.Title,
    pm.Body,
    pm.CreationDate,
    pm.ViewCount,
    pm.AnswerCount,
    pm.CommentCount,
    pm.BadgeCount,
    pm.VoteCount,
    pm.Tags,
    ph.LastEditDate,
    ph.HistoryCount
FROM 
    PostMetrics pm
JOIN 
    PostHistoryAggregation ph ON pm.PostId = ph.PostId
ORDER BY 
    pm.ViewCount DESC,
    pm.AnswerCount DESC,
    pm.CommentCount DESC
FETCH FIRST 100 ROWS ONLY;
