WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        CreationDate,
        Score,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.Score,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.Id
),
TopPosts AS (
    SELECT 
        Id,
        Title,
        Score,
        CreationDate,
        ROW_NUMBER() OVER (ORDER BY Score DESC) AS Rank
    FROM 
        Posts
    WHERE 
        PostTypeId = 1 
    AND 
        ClosedDate IS NULL
),
UserPosts AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
RecentPostHistory AS (
    SELECT 
        ph.PostId,
        ph.UserDisplayName,
        ph.CreationDate,
        ph.Comment,
        pt.Name AS PostHistoryType
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    WHERE 
        ph.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
)
SELECT 
    pp.Title AS PostTitle,
    pp.Score AS PostScore,
    r.Level AS HierarchyLevel,
    u.DisplayName AS UserName,
    up.PostCount,
    up.TotalViews,
    up.PositivePosts,
    r2.UserDisplayName AS RecentEditor,
    r2.CreationDate AS EditDate,
    r2.Comment AS EditComment,
    r2.PostHistoryType
FROM 
    TopPosts pp
JOIN 
    RecursivePostHierarchy r ON pp.Id = r.Id
JOIN 
    UserPosts up ON pp.OwnerUserId = up.UserId
LEFT JOIN 
    RecentPostHistory r2 ON pp.Id = r2.PostId
WHERE 
    r.Level = 0 
ORDER BY 
    pp.Score DESC, 
    r.Level;