WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.PostTypeId,
        COALESCE(SUM(v.VoteTypeId = 2) - SUM(v.VoteTypeId = 3), 0) AS Score,
        COUNT(DISTINCT c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY COALESCE(SUM(v.VoteTypeId = 2) - SUM(v.VoteTypeId = 3), 0) DESC) AS RN
    FROM
        Posts p
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    LEFT JOIN
        Comments c ON p.Id = c.PostId
    WHERE
        p.CreationDate > cast('2024-10-01' as date) - INTERVAL '30 days'
        AND p.PostTypeId IN (1, 2) 
    GROUP BY
        p.Id
),
PostsWithTags AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.CommentCount,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM
        RankedPosts rp
    LEFT JOIN
        Posts p ON rp.PostId = p.Id
    LEFT JOIN
        STRING_TO_ARRAY(LOWER(p.Tags), ',') AS tag ON true
    LEFT JOIN
        Tags t ON LOWER(t.TagName) = LOWER(tag)
    GROUP BY
        rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.CommentCount
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        RANK() OVER (ORDER BY u.Reputation DESC) AS UserRank
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
)
SELECT 
    p.Title AS PostTitle,
    p.CreationDate AS PostDate,
    p.Score AS PostScore,
    p.CommentCount AS NumberOfComments,
    p.Tags AS AssociatedTags,
    u.DisplayName AS OwnerName,
    u.Reputation AS OwnerReputation,
    u.QuestionCount,
    u.AnswerCount,
    (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = u.UserId AND CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year') AS PostsLastYear,
    (SELECT COUNT(*) FROM Badges WHERE UserId = u.UserId AND Class = 1) AS GoldBadges,
    CASE 
        WHEN u.Reputation IS NULL THEN 'Reputation Unknown'
        ELSE CASE 
            WHEN u.Reputation < 100 THEN 'Newbie'
            WHEN u.Reputation < 500 THEN 'Intermediate'
            ELSE 'Expert'
        END
    END AS UserLevel
FROM 
    PostsWithTags p
JOIN 
    UserStatistics u ON p.PostId IN (SELECT AcceptedAnswerId FROM Posts WHERE Id = p.PostId)
WHERE 
    p.RN <= 5
ORDER BY 
    p.Score DESC, u.Reputation DESC
OFFSET 10 ROWS FETCH NEXT 5 ROWS ONLY
;