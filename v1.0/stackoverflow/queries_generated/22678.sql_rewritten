WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS TotalPosts
    FROM 
        Posts p 
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
        AND p.Score IS NOT NULL
),
UserReputation AS (
    SELECT 
        u.Id AS UserId, 
        u.Reputation,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM 
        Users u 
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostAnalysis AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.PostRank,
        ur.Reputation,
        ur.GoldBadges,
        ur.SilverBadges,
        ur.BronzeBadges,
        CASE 
            WHEN rp.PostRank = 1 THEN 'Top Post'
            WHEN rp.TotalPosts > 10 THEN 'Active User'
            ELSE 'Regular Post'
        END AS PostCategory
    FROM 
        RankedPosts rp
    JOIN 
        UserReputation ur ON rp.OwnerUserId = ur.UserId
)
SELECT 
    pa.PostId,
    pa.Title,
    pa.CreationDate,
    pa.Score,
    pa.ViewCount,
    pa.PostCategory,
    CASE 
        WHEN pa.Reputation IS NULL THEN 'User has no reputation'
        WHEN pa.Reputation < 1000 THEN 'Beginner'
        WHEN pa.Reputation BETWEEN 1000 AND 5000 THEN 'Intermediate'
        ELSE 'Advanced'
    END AS UserLevel,
    (SELECT 
         COALESCE(AVG(vote.VoteTypeId), 0) 
     FROM 
         Votes vote 
     WHERE 
         vote.PostId = pa.PostId) AS AvgVoteType
FROM 
    PostAnalysis pa
WHERE 
    pa.ViewCount > (SELECT AVG(ViewCount) FROM Posts)
    AND pa.Score > 0
ORDER BY 
    pa.Score DESC, pa.ViewCount DESC
FETCH FIRST 10 ROWS ONLY;