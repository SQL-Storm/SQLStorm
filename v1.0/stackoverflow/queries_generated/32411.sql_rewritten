WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        0 AS Level
    FROM Posts
    WHERE ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy rph ON p.ParentId = rph.Id
),
UserReputationCTE AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(v.VoteTypeId = 2) AS UpVotesCount,
        SUM(v.VoteTypeId = 3) AS DownVotesCount
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY u.Id, u.DisplayName, u.Reputation
),
MaxReputationCTE AS (
    SELECT 
        MAX(Reputation) AS MaxReputation
    FROM UserReputationCTE
),
UserHighlyActive AS (
    SELECT 
        ur.DisplayName,
        ur.Reputation,
        ur.PostCount,
        ur.UpVotesCount,
        ur.DownVotesCount
    FROM UserReputationCTE ur
    INNER JOIN MaxReputationCTE mr ON ur.Reputation = mr.MaxReputation
    WHERE ur.PostCount > 5 OR (ur.UpVotesCount - ur.DownVotesCount) > 10
)
SELECT 
    p.Title AS PostTitle,
    p.CreationDate AS PostDate,
    u.DisplayName AS OwnerName,
    COALESCE(COUNT(DISTINCT c.Id), 0) AS CommentCount,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS TotalUpVotes,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS TotalDownVotes,
    ph.Level AS PostLevel
FROM Posts p
LEFT JOIN Comments c ON p.Id = c.PostId
LEFT JOIN Votes v ON p.Id = v.PostId
JOIN Users u ON p.OwnerUserId = u.Id
LEFT JOIN RecursivePostHierarchy ph ON p.Id = ph.Id
JOIN UserHighlyActive uh ON uh.DisplayName = u.DisplayName
WHERE p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
GROUP BY p.Id, p.Title, u.DisplayName, p.CreationDate, ph.Level
HAVING COUNT(DISTINCT c.Id) > 0
ORDER BY p.CreationDate DESC, TotalUpVotes DESC;