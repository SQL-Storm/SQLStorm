
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(v.Id) OVER (PARTITION BY p.Id) AS VoteCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM
        Posts p
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    LEFT JOIN
        UNNEST(string_to_array(p.Tags, ',')) AS t(TagName) ON TRUE
    WHERE
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
    GROUP BY
        p.Id, p.Title, p.Score, p.CreationDate, p.PostTypeId
),
BountiedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Score,
        bp.BountyAmount,
        CASE WHEN bp.BountyAmount IS NOT NULL THEN 'Yes' ELSE 'No' END AS HasBounty
    FROM
        Posts p
    LEFT JOIN
        Votes bp ON p.Id = bp.PostId AND bp.VoteTypeId = 8
    GROUP BY
        p.Id, p.Title, p.Score, bp.BountyAmount
),
UserActivity AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounties,
        COUNT(DISTINCT bh.PostId) AS PostsEdited,
        COUNT(DISTINCT c.Id) AS CommentsMade
    FROM
        Users u
    LEFT JOIN
        Votes v ON u.Id = v.UserId AND v.VoteTypeId = 9
    LEFT JOIN
        PostHistory bh ON u.Id = bh.UserId
    LEFT JOIN
        Comments c ON u.Id = c.UserId
    GROUP BY
        u.Id, u.DisplayName
),
ClosedPosts AS (
    SELECT
        p.Id AS PostId,
        COUNT(DISTINCT ph.Id) AS CloseReasons
    FROM
        Posts p
    LEFT JOIN
        PostHistory ph ON p.Id = ph.PostId
    WHERE
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY
        p.Id
)
SELECT
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.Rank,
    bp.HasBounty,
    ua.DisplayName AS UserCreator,
    ua.TotalBounties,
    ua.PostsEdited,
    ua.CommentsMade,
    cp.CloseReasons
FROM
    RankedPosts rp
LEFT JOIN
    BountiedPosts bp ON rp.PostId = bp.PostId
LEFT JOIN
    UserActivity ua ON rp.Score > 5 
LEFT JOIN
    ClosedPosts cp ON rp.PostId = cp.PostId
WHERE
    COALESCE(rp.Tags, '') LIKE '%SQL%'
ORDER BY
    rp.Rank, rp.Score DESC
LIMIT 1000;
