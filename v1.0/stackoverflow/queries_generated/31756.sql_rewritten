WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
      AND p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS ClosedPosts,
        SUM(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 ELSE 0 END) AS ReopenedPosts
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        u.Id
    HAVING 
        COUNT(p.Id) > 5 
),
UserBadgeCounts AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Badges b
    WHERE 
        b.Class IN (1, 2, 3) 
    GROUP BY 
        b.UserId
),
PostAnalysis AS (
    SELECT 
        r.PostId,
        r.Title,
        r.CreationDate,
        u.DisplayName AS Owner,
        r.ViewCount,
        r.Score,
        r.AnswerCount,
        t.BadgeCount,
        t.ClosedPosts,
        t.ReopenedPosts
    FROM 
        RankedPosts r
    JOIN 
        Users u ON r.OwnerUserId = u.Id
    LEFT JOIN 
        TopUsers t ON u.Id = t.UserId
)
SELECT 
    pa.PostId,
    pa.Title,
    pa.CreationDate,
    pa.Owner,
    pa.ViewCount,
    pa.Score,
    pa.AnswerCount,
    COALESCE(pa.BadgeCount, 0) AS BadgeCount,
    COALESCE(pa.ClosedPosts, 0) AS ClosedPosts,
    COALESCE(pa.ReopenedPosts, 0) AS ReopenedPosts,
    CONCAT(pa.Owner, ' has ', COALESCE(pa.BadgeCount, 0), ' badges') AS UserBadgeInfo,
    CASE 
        WHEN pa.Score > 100 THEN 'High Score'
        WHEN pa.Score BETWEEN 50 AND 100 THEN 'Moderate Score'
        ELSE 'Low Score'
    END AS ScoreCategory
FROM 
    PostAnalysis pa
WHERE 
    pa.PostRank = 1 
ORDER BY 
    pa.Score DESC, 
    pa.CreationDate ASC;