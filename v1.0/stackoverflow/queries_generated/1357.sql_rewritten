WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY ph.CreationDate DESC) AS RevisionRank
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score
), UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
), PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount,
        MAX(c.CreationDate) AS LastCommentDate
    FROM 
        Comments c
    GROUP BY 
        c.PostId
)
SELECT 
    rp.Id AS PostId,
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.UpVotes,
    rp.DownVotes,
    CASE 
        WHEN ub.GoldBadges IS NULL THEN 0 
        ELSE ub.GoldBadges 
    END AS GoldBadges,
    COALESCE(pc.CommentCount, 0) AS CommentCount,
    pc.LastCommentDate,
    CASE 
        WHEN rp.RevisionRank = 1 THEN 'Latest'
        ELSE 'Earlier'
    END AS RevisionStatus
FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges ub ON rp.Id = ub.UserId
LEFT JOIN 
    PostComments pc ON rp.Id = pc.PostId
WHERE 
    rp.Score > (SELECT AVG(Score) FROM Posts) 
ORDER BY 
    rp.Score DESC, rp.CreationDate ASC
LIMIT 100;