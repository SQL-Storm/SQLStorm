
WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        MAX(ps.CreationDate) AS LastActiveDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    LEFT JOIN 
        PostHistory ph ON ph.PostId = p.Id
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM 
        Users u
)
SELECT 
    ps.Title,
    ps.PostId,
    ps.CommentCount,
    ps.UpVoteCount,
    ps.DownVoteCount,
    ps.BadgeCount,
    ps.LastActiveDate,
    CASE 
        WHEN ur.Reputation IS NULL THEN 'Unknown User'
        ELSE ur.Reputation 
    END AS UserReputation,
    CASE 
        WHEN ur.ReputationRank < 10 THEN 'Top User'
        ELSE 'Regular User'
    END AS UserStatus
FROM 
    PostStats ps
LEFT JOIN 
    UserReputation ur ON ps.PostId = ur.UserId
WHERE 
    ps.CommentCount > 5
    OR ps.UpVoteCount > 10
ORDER BY 
    ps.LastActiveDate DESC
LIMIT 100;
