
WITH PostStats AS (
    SELECT
        p.Id AS PostId,
        p.PostTypeId,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN vote.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN vote.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM
        Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes vote ON p.Id = vote.PostId
    GROUP BY
        p.Id, p.PostTypeId, p.CreationDate, p.Score, p.ViewCount
),
UserStats AS (
    SELECT
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        COUNT(DISTINCT p.Id) AS PostCount,
        COALESCE(SUM(upvotes.UpVotes), 0) AS TotalUpVotes,
        COALESCE(SUM(downvotes.DownVotes), 0) AS TotalDownVotes
    FROM
        Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    LEFT JOIN PostStats p ON u.Id = p.OwnerUserId
    LEFT JOIN (
        SELECT
            p.OwnerUserId,
            SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes
        FROM
            Posts p
        LEFT JOIN Votes v ON p.Id = v.PostId
        GROUP BY
            p.OwnerUserId
    ) upvotes ON u.Id = upvotes.OwnerUserId
    LEFT JOIN (
        SELECT
            p.OwnerUserId,
            SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
        FROM
            Posts p
        LEFT JOIN Votes v ON p.Id = v.PostId
        GROUP BY
            p.OwnerUserId
    ) downvotes ON u.Id = downvotes.OwnerUserId
    GROUP BY
        u.Id, u.Reputation
)

SELECT
    ps.PostId,
    pt.Name AS PostTypeName,
    ps.CreationDate,
    ps.Score,
    ps.ViewCount,
    ps.CommentCount,
    us.UserId,
    us.Reputation,
    us.BadgeCount,
    us.PostCount,
    us.TotalUpVotes,
    us.TotalDownVotes
FROM
    PostStats ps
JOIN Posts p ON ps.PostId = p.Id
JOIN PostTypes pt ON p.PostTypeId = pt.Id
JOIN UserStats us ON p.OwnerUserId = us.UserId
ORDER BY
    ps.CreationDate DESC
LIMIT 100;
