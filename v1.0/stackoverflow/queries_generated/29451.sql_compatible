
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        pt.Name AS PostTypeName,
        ROW_NUMBER() OVER(PARTITION BY pt.Id ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
        JOIN Users u ON p.OwnerUserId = u.Id
        JOIN PostTypes pt ON p.PostTypeId = pt.Id
        LEFT JOIN Comments c ON c.PostId = p.Id
        LEFT JOIN unnest(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')) AS t(TagName) ON true
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, u.DisplayName, pt.Name
),
TopPosts AS (
    SELECT 
        PostId, Title, Body, CreationDate, ViewCount, OwnerDisplayName, PostTypeName, Tags
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        ph.PostHistoryTypeId,
        COUNT(ph.Id) AS ChangeCount,
        MIN(ph.CreationDate) AS FirstChangeDate,
        MAX(ph.CreationDate) AS LastChangeDate
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId, ph.UserId, ph.PostHistoryTypeId
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Body,
    tp.CreationDate,
    tp.ViewCount,
    tp.OwnerDisplayName,
    tp.PostTypeName,
    tp.Tags,
    phs.UserId,
    phs.PostHistoryTypeId,
    phs.ChangeCount,
    phs.FirstChangeDate,
    phs.LastChangeDate
FROM 
    TopPosts tp
    LEFT JOIN PostHistorySummary phs ON tp.PostId = phs.PostId
ORDER BY 
    tp.ViewCount DESC, 
    tp.CreationDate DESC;
