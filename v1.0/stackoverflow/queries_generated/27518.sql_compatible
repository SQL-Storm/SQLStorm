
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        ARRAY_AGG(DISTINCT t.TagName) AS TagsArray,
        ROW_NUMBER() OVER (PARTITION BY t.TagName ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    JOIN 
        UNNEST(SPLIT(SUBSTRING(p.Tags, 2, LENGTH(p.Tags)-2), '><')) AS t(tag) ON t.tag = t.TagName
    JOIN 
        Tags t ON t.TagName = t.tag
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.Score, p.ViewCount, u.DisplayName
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Body,
        CreationDate,
        Score,
        ViewCount,
        OwnerDisplayName,
        TagsArray
    FROM 
        RankedPosts
    WHERE 
        PostRank <= 5 
),
TagEngagement AS (
    SELECT 
        t.TagName,
        COUNT(tp.PostId) AS PostCount,
        SUM(tp.ViewCount) AS TotalViews,
        AVG(tp.Score) AS AverageScore
    FROM 
        Tags t
    LEFT JOIN 
        TopPosts tp ON t.TagName = ANY(tp.TagsArray)
    GROUP BY 
        t.TagName
),
EngagementStats AS (
    SELECT 
        te.TagName,
        te.PostCount,
        te.TotalViews,
        te.AverageScore,
        CASE 
            WHEN te.PostCount > 0 THEN te.TotalViews / te.PostCount
            ELSE 0
        END AS AverageViewsPerPost
    FROM 
        TagEngagement te
)
SELECT 
    es.TagName,
    es.PostCount,
    es.TotalViews,
    es.AverageScore,
    es.AverageViewsPerPost
FROM 
    EngagementStats es
ORDER BY 
    es.AverageScore DESC,
    es.TotalViews DESC;
