WITH PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerName,
        COUNT(c.Id) AS CommentCount,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagList
    FROM Posts p
    JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Badges b ON u.Id = b.UserId
    LEFT JOIN Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
    WHERE p.PostTypeId = 1 
    GROUP BY p.Id, u.DisplayName
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS CloseVotes,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 END) AS ReopenVotes,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 12 THEN 1 END) AS DeleteVotes,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 52 THEN 1 END) AS HotQuestionVotes
    FROM PostHistory ph
    GROUP BY ph.PostId
)
SELECT 
    pd.PostId,
    pd.Title,
    pd.Body,
    pd.CreationDate,
    pd.ViewCount,
    pd.Score,
    pd.OwnerName,
    pd.CommentCount,
    pd.BadgeCount,
    pd.TagList,
    phs.CloseVotes,
    phs.ReopenVotes,
    phs.DeleteVotes,
    phs.HotQuestionVotes
FROM PostDetails pd
LEFT JOIN PostHistorySummary phs ON pd.PostId = phs.PostId
ORDER BY pd.Score DESC, pd.ViewCount DESC
LIMIT 100;