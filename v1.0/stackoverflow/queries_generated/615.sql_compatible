
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId, p.AcceptedAnswerId, p.PostTypeId
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.OwnerUserId,
        rp.AcceptedAnswerId,
        rp.CommentCount,
        rp.UpvoteCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 10
),
PostStats AS (
    SELECT 
        u.DisplayName,
        COUNT(DISTINCT tp.PostId) AS TotalPosts,
        SUM(tp.UpvoteCount) AS TotalUpvotes,
        SUM(tp.CommentCount) AS TotalComments
    FROM 
        Users u
    JOIN 
        TopPosts tp ON u.Id = tp.OwnerUserId
    GROUP BY 
        u.DisplayName
)
SELECT 
    ps.DisplayName,
    ps.TotalPosts,
    ps.TotalUpvotes,
    ps.TotalComments,
    COALESCE(ROUND(AVG(CAST(ps.TotalUpvotes AS FLOAT) / NULLIF(ps.TotalPosts, 0)), 2), 0) AS AvgUpvotesPerPost
FROM 
    PostStats ps
WHERE 
    ps.TotalPosts > 0
ORDER BY 
    ps.TotalUpvotes DESC
LIMIT 20;
