
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        DENSE_RANK() OVER (PARTITION BY pt.Name ORDER BY p.Score DESC) AS ScoreRank,
        COUNT(DISTINCT c.Id) AS CommentCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        UNNEST(string_to_array(p.Tags, '><')) AS tag(TagName) ON TRUE
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, pt.Name
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Score,
        rp.ScoreRank,
        rp.CommentCount,
        rp.Tags
    FROM 
        RankedPosts rp
    WHERE 
        rp.ScoreRank <= 5
)
SELECT 
    up.DisplayName AS UserDisplayName,
    COUNT(DISTINCT bp.Id) AS BadgeCount,
    tp.*
FROM 
    TopPosts tp
JOIN 
    Users up ON tp.PostId = up.Id
LEFT JOIN 
    Badges bp ON up.Id = bp.UserId
GROUP BY 
    up.DisplayName, tp.PostId, tp.Title, tp.CreationDate, tp.ViewCount, tp.Score, tp.ScoreRank, tp.CommentCount, tp.Tags
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC;
