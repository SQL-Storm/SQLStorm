
WITH RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.PostTypeId,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id 
    WHERE 
        p.CreationDate >= DATEADD(day, -30, '2024-10-01')
    AND 
        p.PostTypeId IN (1, 2)  
),
PostViewCounts AS (
    SELECT 
        PostId,
        SUM(ViewCount) AS TotalViews
    FROM 
        Posts
    GROUP BY 
        PostId
),
BadgesSummary AS (
    SELECT 
        UserId,
        COUNT(*) AS BadgeCount,
        STRING_AGG(Name, ', ') AS BadgeNames
    FROM 
        Badges
    WHERE 
        Date >= DATEADD(year, -1, '2024-10-01')
    GROUP BY 
        UserId
),
FilteredBadges AS (
    SELECT 
        ub.UserId,
        ub.BadgeCount,
        ub.BadgeNames
    FROM 
        BadgesSummary ub
    WHERE 
        ub.BadgeCount > 5  
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.OwnerDisplayName,
    rp.Reputation,
    COALESCE(pvc.TotalViews, 0) AS TotalViews,
    fb.BadgeCount,
    fb.BadgeNames,
    CASE 
        WHEN rp.PostTypeId = 1 AND rp.Score > 10 THEN 'Highly Active Question'
        WHEN rp.PostTypeId = 2 THEN 'Answer'
        ELSE 'Other'
    END AS PostCategory,
    CASE 
        WHEN rp.ViewCount IS NULL OR rp.ViewCount = 0 THEN 'No Views'
        ELSE 'Has Views'
    END AS ViewStatus
FROM 
    RecentPosts rp
LEFT JOIN 
    PostViewCounts pvc ON rp.PostId = pvc.PostId
LEFT JOIN 
    FilteredBadges fb ON fb.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
WHERE 
    EXISTS (
        SELECT 1 
        FROM Comments c 
        WHERE c.PostId = rp.PostId 
        AND c.CreationDate >= DATEADD(day, -7, '2024-10-01')
    )
ORDER BY 
    rp.CreationDate DESC
LIMIT 10;
