WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        u.DisplayName AS OwnerDisplayName,
        p.CreationDate,
        p.ViewCount,
        COALESCE(pv.VoteCount, 0) AS VoteCount,
        COALESCE(ac.AcceptedAnswerId, 0) AS AcceptedAnswer,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS rn
    FROM Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS VoteCount
        FROM Votes
        WHERE CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
        GROUP BY PostId
    ) pv ON pv.PostId = p.Id
    LEFT JOIN (
        SELECT 
            ParentId AS AcceptedAnswerId
        FROM Posts
        WHERE PostTypeId = 1
    ) ac ON p.Id = ac.AcceptedAnswerId
    WHERE p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '90 days' 
    AND p.ViewCount > 100
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM Posts p
    JOIN LATERAL string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><') AS tag ON TRUE
    JOIN Tags t ON t.TagName = tag
    GROUP BY p.Id
),
PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount
    FROM Comments c
    GROUP BY c.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.OwnerDisplayName,
    rp.CreationDate,
    rp.ViewCount,
    rp.VoteCount,
    pt.Tags,
    COALESCE(pc.CommentCount, 0) AS CommentCount,
    CASE 
        WHEN rp.AcceptedAnswer > 0 THEN 'Yes' 
        ELSE 'No' 
    END AS HasAcceptedAnswer
FROM RankedPosts rp
JOIN PostTags pt ON rp.PostId = pt.PostId
LEFT JOIN PostComments pc ON rp.PostId = pc.PostId
WHERE rp.rn = 1
ORDER BY rp.ViewCount DESC, rp.VoteCount DESC
LIMIT 100;