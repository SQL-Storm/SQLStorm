
WITH TagStats AS (
    SELECT 
        Tags.TagName,
        COUNT(DISTINCT Posts.Id) AS PostCount,
        COUNT(DISTINCT Comments.Id) AS CommentCount,
        SUM(Posts.ViewCount) AS TotalViews,
        AVG(Posts.Score) AS AvgScore
    FROM Tags
    LEFT JOIN Posts ON Tags.Id = ANY(string_to_array(Posts.Tags, ',')::text[])
    LEFT JOIN Comments ON Posts.Id = Comments.PostId
    GROUP BY Tags.TagName
),
UserBadges AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(B.Id) FILTER (WHERE B.Class = 1) AS GoldBadges,
        COUNT(B.Id) FILTER (WHERE B.Class = 2) AS SilverBadges,
        COUNT(B.Id) FILTER (WHERE B.Class = 3) AS BronzeBadges
    FROM Users U
    LEFT JOIN Badges B ON U.Id = B.UserId
    GROUP BY U.Id, U.DisplayName
),
PostStats AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.ViewCount,
        P.AnswerCount,
        U.DisplayName AS OwnerDisplayName,
        COALESCE(UB.GoldBadges, 0) AS GoldBadges,
        COALESCE(UB.SilverBadges, 0) AS SilverBadges,
        COALESCE(UB.BronzeBadges, 0) AS BronzeBadges
    FROM Posts P
    JOIN Users U ON P.OwnerUserId = U.Id
    LEFT JOIN UserBadges UB ON U.Id = UB.UserId
    WHERE P.PostTypeId = 1 
),
RankedPosts AS (
    SELECT 
        PS.*,
        RANK() OVER (ORDER BY PS.ViewCount DESC) AS ViewRank,
        RANK() OVER (ORDER BY PS.AnswerCount DESC) AS AnswerRank
    FROM PostStats PS
)
SELECT 
    TS.TagName,
    TS.PostCount,
    TS.CommentCount,
    TS.TotalViews,
    TS.AvgScore,
    RP.Title,
    RP.CreationDate,
    RP.ViewCount,
    RP.OwnerDisplayName,
    RP.GoldBadges,
    RP.SilverBadges,
    RP.BronzeBadges,
    RP.ViewRank,
    RP.AnswerRank
FROM TagStats TS
JOIN RankedPosts RP ON TS.TagName = ANY(string_to_array(RP.Title, ' '))
WHERE TS.PostCount > 5 
ORDER BY TS.TotalViews DESC, TS.AvgScore DESC
LIMIT 10;
