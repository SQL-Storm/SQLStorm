
WITH RECURSIVE user_activity AS (
    
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT a.Id) AS TotalAnswers
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Posts a ON u.Id = a.OwnerUserId AND a.PostTypeId = 2
    GROUP BY u.Id, u.DisplayName
), post_with_votes AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        COALESCE(v_up.UpVoteCount, 0) AS UpVoteCount,
        COALESCE(v_down.DownVoteCount, 0) AS DownVoteCount,
        (COALESCE(v_up.UpVoteCount, 0) - COALESCE(v_down.DownVoteCount, 0)) AS NetScore,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY (COALESCE(v_up.UpVoteCount, 0) - COALESCE(v_down.DownVoteCount, 0)) DESC) AS Rank
    FROM Posts p
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS UpVoteCount
        FROM Votes
        WHERE VoteTypeId = 2 
        GROUP BY PostId
    ) v_up ON p.Id = v_up.PostId
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS DownVoteCount
        FROM Votes
        WHERE VoteTypeId = 3 
        GROUP BY PostId
    ) v_down ON p.Id = v_down.PostId
), popular_posts AS (
    
    SELECT 
        p.PostId,
        p.Title,
        p.OwnerUserId,
        p.NetScore
    FROM post_with_votes p
    WHERE p.Rank <= CEIL(0.1 * (SELECT COUNT(*) FROM post_with_votes WHERE OwnerUserId = p.OwnerUserId)) 
), user_badge_counts AS (
    
    SELECT 
        b.UserId,
        COUNT(*) AS BadgeCount
    FROM Badges b
    GROUP BY b.UserId
)
SELECT 
    ua.UserId,
    ua.DisplayName,
    ua.TotalPosts,
    ua.TotalAnswers,
    COALESCE(ub.BadgeCount, 0) AS BadgeCount,
    pp.Title AS PopularPostTitle,
    pp.NetScore
FROM user_activity ua
LEFT JOIN user_badge_counts ub ON ua.UserId = ub.UserId
LEFT JOIN popular_posts pp ON ua.UserId = pp.OwnerUserId
ORDER BY ua.TotalPosts DESC, BadgeCount DESC, pp.NetScore DESC
LIMIT 50;
