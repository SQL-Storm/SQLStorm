
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title AS PostTitle,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostVotes AS (
    SELECT 
        v.PostId, 
        vt.Name AS VoteType, 
        COUNT(v.Id) AS VoteCount
    FROM 
        Votes v
    INNER JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id
    GROUP BY 
        v.PostId, vt.Name
),
PostCloseReasons AS (
    SELECT 
        ph.PostId,
        STRING_AGG(cr.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    INNER JOIN 
        CloseReasonTypes cr ON CAST(ph.Comment AS INTEGER) = cr.Id 
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)  
    GROUP BY 
        ph.PostId
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(p.ViewCount), 0) AS TotalViews,
        COALESCE(SUM(p.AnswerCount), 0) AS TotalQuestionsAnswered,
        COUNT(DISTINCT v.Id) AS TotalVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    u.Id AS UserId, 
    u.DisplayName,
    COALESCE(pv.VoteCount, 0) AS TotalVotes,
    COALESCE(pcr.CloseReasons, 'No close reasons') AS CloseReasons,
    COALESCE(up.TotalViews, 0) AS TotalViews,
    COALESCE(up.TotalQuestionsAnswered, 0) AS TotalQuestionsAnswered
FROM 
    Users u
LEFT JOIN 
    PostVotes pv ON u.Id = pv.PostId
LEFT JOIN 
    PostCloseReasons pcr ON pv.PostId = pcr.PostId
LEFT JOIN 
    UserActivity up ON u.Id = up.UserId
WHERE 
    u.Reputation > 1000  
ORDER BY 
    u.DisplayName;
