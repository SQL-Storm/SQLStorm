WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Score,
        U.DisplayName AS OwnerName,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Users U ON p.OwnerUserId = U.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month' AND
        (p.Score >= 10 OR p.ViewCount >= 100)  
    GROUP BY 
        p.Id, U.DisplayName
),
TopPosts AS (
    SELECT 
        *,
        (UpvoteCount - DownvoteCount) AS NetVoteScore
    FROM 
        RankedPosts
    WHERE 
        PostRank <= 10
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS HistoryDate,
        GROUP_CONCAT(ph.Comment ORDER BY ph.CreationDate DESC) AS HistoryComments
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId, ph.CreationDate
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.ViewCount,
    tp.Score,
    tp.OwnerName,
    tp.CommentCount,
    tp.NetVoteScore,
    COALESCE(phd.HistoryComments, 'No history available') AS PostHistoryComments
FROM 
    TopPosts tp
LEFT JOIN 
    PostHistoryDetails phd ON tp.PostId = phd.PostId
ORDER BY 
    tp.NetVoteScore DESC, 
    tp.ViewCount DESC;