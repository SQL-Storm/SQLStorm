
WITH RECURSIVE UserRankings AS (
    SELECT 
        Id, 
        Reputation, 
        DisplayName, 
        CreationDate, 
        1 AS Rank
    FROM 
        Users
    WHERE 
        Reputation IS NOT NULL

    UNION ALL

    SELECT 
        u.Id, 
        u.Reputation, 
        u.DisplayName, 
        u.CreationDate, 
        ur.Rank + 1
    FROM 
        Users u
    INNER JOIN 
        UserRankings ur ON u.Reputation > ur.Reputation
),
PostSummary AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        MAX(v.CreationDate) AS LastVoteDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(ph.Id) AS EditCount,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(u.UpVotes, 0)) AS TotalUpVotes,
        SUM(COALESCE(u.DownVotes, 0)) AS TotalDownVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId IN (4, 5, 6)
    GROUP BY 
        u.Id, u.DisplayName
),
MergedData AS (
    SELECT 
        us.Id AS UserId,
        us.DisplayName,
        up.PostId,
        up.Title,
        up.CommentCount,
        up.VoteCount,
        up.UpVotes,
        up.DownVotes,
        ua.EditCount,
        ua.PostCount,
        ua.TotalUpVotes,
        ua.TotalDownVotes,
        r.Rank
    FROM 
        PostSummary up
    JOIN 
        UserActivity ua ON up.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = ua.UserId)
    JOIN 
        Users us ON up.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = us.Id)
    JOIN 
        UserRankings r ON us.Id = r.Id
)
SELECT
    UserId,
    DisplayName,
    COUNT(PostId) AS TotalPosts,
    SUM(CommentCount) AS TotalComments,
    SUM(VoteCount) AS TotalVotes,
    AVG(UpVotes - DownVotes) AS AverageVoteDifference,
    MAX(LastVoteDate) AS LastVoteActivity,
    Rank
FROM 
    MergedData
GROUP BY 
    UserId, DisplayName, Rank
ORDER BY 
    Rank ASC, TotalPosts DESC
LIMIT 100 OFFSET 0;
