WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        u.Reputation AS OwnerReputation,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR'
),
TopOwners AS (
    SELECT 
        OwnerUserId,
        COUNT(PostId) AS PostCount,
        SUM(Score) AS TotalScore,
        AVG(OwnerReputation) AS AvgReputation
    FROM 
        RankedPosts
    WHERE 
        PostRank <= 5
    GROUP BY 
        OwnerUserId
    HAVING 
        COUNT(PostId) >= 3
),
PostStatistics AS (
    SELECT 
        u.DisplayName,
        u.Reputation,
        to.PostCount,
        to.TotalScore,
        to.AvgReputation,
        ARRAY_AGG(tp.Title) AS TopPosts
    FROM 
        TopOwners to
    JOIN 
        Users u ON to.OwnerUserId = u.Id
    JOIN 
        RankedPosts rp ON to.OwnerUserId = rp.OwnerUserId
    GROUP BY 
        u.DisplayName, u.Reputation, to.PostCount, to.TotalScore, to.AvgReputation
) 
SELECT 
    ps.DisplayName,
    ps.Reputation,
    ps.PostCount,
    ps.TotalScore,
    ps.AvgReputation,
    ps.TopPosts,
    (SELECT COUNT(*) FROM Votes v WHERE v.UserId = ps.DisplayName) AS TotalVotes 
FROM 
    PostStatistics ps
ORDER BY 
    ps.TotalScore DESC
LIMIT 10;