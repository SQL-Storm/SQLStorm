WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
RecentBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    WHERE 
        b.Date >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
    GROUP BY 
        b.UserId
)
SELECT 
    u.DisplayName AS UserName,
    r.Title,
    r.ViewCount,
    r.CommentCount,
    r.UpVotes,
    rb.BadgeNames,
    CASE 
        WHEN r.CommentCount > 10 THEN 'Popular'
        WHEN r.PostRank = 1 THEN 'Most Recent Post'
        ELSE 'Regular Post'
    END AS PostCategory
FROM 
    RankedPosts r
JOIN 
    Users u ON r.OwnerUserId = u.Id
LEFT JOIN 
    RecentBadges rb ON u.Id = rb.UserId
WHERE 
    r.UpVotes > 5 
ORDER BY 
    r.ViewCount DESC, r.CommentCount DESC
LIMIT 100;