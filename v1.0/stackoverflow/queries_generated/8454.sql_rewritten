WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.LastActivityDate DESC) AS RowNum
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= DATEADD(YEAR, -1, cast('2024-10-01 12:34:56' as timestamp))
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName
),
PopularTags AS (
    SELECT 
        TRIM(SUBSTRING(tag, 2, LEN(tag) - 2)) AS TagName, 
        COUNT(*) AS TagCount
    FROM 
        Posts
    CROSS APPLY 
        STRING_SPLIT(Tags, ',') AS tag
    GROUP BY 
        TRIM(SUBSTRING(tag, 2, LEN(tag) - 2))
    ORDER BY 
        TagCount DESC
    OFFSET 0 ROWS 
    FETCH NEXT 5 ROWS ONLY
),
PostHistoryAggregates AS (
    SELECT 
        p.Id AS PostId,
        COUNT(ph.Id) AS EditCount,
        MIN(ph.CreationDate) AS FirstEditDate,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    pga.EditCount,
    pga.FirstEditDate,
    pga.LastEditDate,
    (SELECT STRING_AGG(TagName, ', ') FROM PopularTags) AS TopTags
FROM 
    RankedPosts rp
JOIN 
    PostHistoryAggregates pga ON rp.PostId = pga.PostId
WHERE 
    rp.RowNum = 1
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC;