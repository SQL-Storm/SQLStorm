
WITH RecursivePostCTE AS (
    SELECT 
        Id,
        Title,
        ParentId,
        CreationDate,
        Score,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.Score,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostCTE r ON p.ParentId = r.Id
),
RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        DENSE_RANK() OVER (PARTITION BY EXTRACT(YEAR FROM p.CreationDate) ORDER BY p.Score DESC) AS RankByScore,
        COUNT(c.Id) AS CommentCount,
        p.OwnerUserId
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
PostVoteCounts AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
UserBadges AS (
    SELECT 
        UserId,
        COUNT(*) AS BadgeCount
    FROM 
        Badges
    WHERE 
        Date >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        UserId
)
SELECT 
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.RankByScore,
    COALESCE(pvc.Upvotes, 0) AS TotalUpvotes,
    COALESCE(pvc.Downvotes, 0) AS TotalDownvotes,
    u.DisplayName,
    ub.BadgeCount,
    (SELECT COUNT(*) FROM Comments c WHERE c.PostId = rp.Id) AS NumberOfComments,
    EXISTS (
        SELECT 1
        FROM Votes v
        WHERE v.PostId = rp.Id AND v.UserId = u.Id AND v.VoteTypeId = 2 
    ) AS UserUpvoted
FROM 
    RankedPosts rp
JOIN 
    Users u ON u.Id = rp.OwnerUserId
LEFT JOIN 
    PostVoteCounts pvc ON rp.Id = pvc.PostId
LEFT JOIN 
    UserBadges ub ON ub.UserId = u.Id
WHERE 
    rp.RankByScore <= 10 
ORDER BY 
    rp.CreationDate DESC;
