
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.AnswerCount,
        p.CommentCount,
        p.ViewCount,
        STRING_AGG(t.TagName, ', ') AS Tags,
        u.DisplayName AS OwnerDisplayName,
        COALESCE(u.Reputation, 0) AS OwnerReputation,
        RANK() OVER (ORDER BY p.CreationDate DESC) AS RankByDate,
        RANK() OVER (ORDER BY p.Score DESC) AS RankByScore
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        LATERAL (
            SELECT 
                unnest(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')) AS TagName
        ) t ON TRUE
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.Score, p.AnswerCount, p.CommentCount, p.ViewCount, u.DisplayName
),
EnhancedHistory AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.UserDisplayName,
        ph.Comment,
        ph.Text AS RevisionContent,
        ph.UserId,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS RevisionOrder
    FROM 
        PostHistory ph
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.Score,
    rp.AnswerCount,
    rp.CommentCount,
    rp.ViewCount,
    rp.Tags,
    rp.OwnerDisplayName,
    rp.OwnerReputation,
    eh.PostHistoryTypeId,
    eh.CreationDate AS HistoryDate,
    eh.UserDisplayName AS Editor,
    eh.Comment AS EditComment,
    eh.RevisionContent
FROM 
    RankedPosts rp
LEFT JOIN 
    EnhancedHistory eh ON rp.PostId = eh.PostId AND eh.RevisionOrder = 1 
WHERE 
    rp.RankByDate <= 100  
    OR rp.RankByScore <= 100 
ORDER BY 
    rp.Score DESC, rp.CreationDate DESC;
