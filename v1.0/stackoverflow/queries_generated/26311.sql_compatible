
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        ARRAY(SELECT unnest(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) ORDER BY 1) AS TagList,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) - SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS NetVotes,  
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        ROW_NUMBER() OVER (ORDER BY COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) - SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId  
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.Body
), FilteredTags AS (
    SELECT
        rp.PostId,
        rp.TagList,
        rp.NetVotes,
        rp.CommentCount,
        rp.AnswerCount,
        rp.Rank,
        STRING_AGG(DISTINCT t.TagName, ', ') AS FilteredTags  
    FROM
        RankedPosts rp
    JOIN
        Posts p ON rp.PostId = p.Id
    LEFT JOIN
        Tags t ON t.Id = ANY(rp.TagList)  
    WHERE
        t.Count > 10  
    GROUP BY
        rp.PostId, rp.TagList, rp.NetVotes, rp.CommentCount, rp.AnswerCount, rp.Rank
)
SELECT 
    ft.PostId,
    ft.NetVotes,
    ft.CommentCount,
    ft.AnswerCount,
    ft.Rank,
    ft.FilteredTags
FROM 
    FilteredTags ft
WHERE
    ft.Rank <= 10  
ORDER BY 
    ft.Rank;
