
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Body,
        p.ViewCount,
        p.Score,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY pt.Name ORDER BY p.CreationDate DESC) AS PostRank,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation
    FROM 
        Posts p
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, '2024-10-01')
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.OwnerReputation,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    STRING_AGG(t.TagName, ', ') AS Tags,
    CASE 
        WHEN rp.Score > 10 THEN 'High Score'
        WHEN rp.Score BETWEEN 5 AND 10 THEN 'Medium Score'
        ELSE 'Low Score'
    END AS ScoreCategory
FROM 
    RankedPosts rp
LEFT JOIN 
    PostsTags ptg ON rp.PostId = ptg.PostId
LEFT JOIN 
    Tags t ON ptg.TagId = t.Id
WHERE 
    rp.PostRank <= 5
GROUP BY 
    rp.PostId, rp.Title, rp.OwnerDisplayName, rp.OwnerReputation, rp.CreationDate, 
    rp.ViewCount, rp.Score
ORDER BY 
    rp.CreationDate DESC;
