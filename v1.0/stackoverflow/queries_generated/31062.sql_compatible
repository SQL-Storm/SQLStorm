
WITH RecursivePostHierarchy AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ParentId,
        P.OwnerUserId,
        1 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1 
    
    UNION ALL
    
    SELECT 
        P.Id,
        P.Title,
        P.ParentId,
        P.OwnerUserId,
        RPH.Level + 1
    FROM 
        Posts P
    INNER JOIN 
        RecursivePostHierarchy RPH ON P.ParentId = RPH.PostId
),
UserReputationRank AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        RANK() OVER (ORDER BY U.Reputation DESC) AS ReputationRank
    FROM 
        Users U
),
PostVoteSummary AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
)
SELECT
    RPH.PostId,
    RPH.Title,
    UDR.DisplayName AS OwnerName,
    UDR.Reputation,
    UDR.ReputationRank,
    PVS.UpVotes,
    PVS.DownVotes,
    CASE 
        WHEN PVS.UpVotes > PVS.DownVotes THEN 'Positive'
        WHEN PVS.UpVotes < PVS.DownVotes THEN 'Negative'
        ELSE 'Neutral'
    END AS VoteSentiment,
    COALESCE(PH.Comment, 'No comments') AS LastEditComment,
    PH.CreationDate
FROM 
    RecursivePostHierarchy RPH
LEFT JOIN 
    Users UDR ON RPH.OwnerUserId = UDR.Id
LEFT JOIN 
    PostVoteSummary PVS ON RPH.PostId = PVS.PostId
LEFT JOIN 
    PostHistory PH ON RPH.PostId = PH.PostId
WHERE 
    RPH.Level = 1 
    AND UDR.Reputation > 100 
ORDER BY 
    RPH.Title ASC, 
    UDR.Reputation DESC,
    PVS.UpVotes DESC;
