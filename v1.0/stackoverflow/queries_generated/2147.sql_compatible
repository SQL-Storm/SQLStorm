
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        MAX(v.CreationDate) FILTER (WHERE v.VoteTypeId = 2) AS LastUpvoteDate
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id, p.Title, p.ViewCount, p.Score, p.CreationDate, p.OwnerUserId
),
TopPosts AS (
    SELECT 
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.CreationDate,
        u.DisplayName AS OwnerName,
        COALESCE(NULLIF(rp.LastUpvoteDate, CAST('2024-10-01 12:34:56' AS TIMESTAMP)), p.CreationDate) AS LastActivity
    FROM RankedPosts rp
    JOIN Users u ON rp.OwnerUserId = u.Id
    WHERE rp.Rank <= 3
),
PostStats AS (
    SELECT 
        tp.*,
        CASE 
            WHEN tp.ViewCount > 1000 THEN 'Popular'
            WHEN tp.ViewCount BETWEEN 100 AND 1000 THEN 'Moderate'
            ELSE 'Less Popular'
        END AS Popularity,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = tp.Id AND v.VoteTypeId = 3) AS Downvotes
    FROM TopPosts tp
)
SELECT 
    ps.Title,
    ps.ViewCount,
    ps.Score,
    ps.CreationDate,
    ps.OwnerName,
    ps.Popularity,
    ps.LastActivity,
    ps.Downvotes,
    CASE 
        WHEN ps.Downvotes > 10 THEN 'Needs Attention'
        ELSE 'Good'
    END AS Status
FROM PostStats ps
WHERE ps.LastActivity IS NOT NULL
ORDER BY ps.Score DESC, ps.ViewCount DESC
LIMIT 10;
