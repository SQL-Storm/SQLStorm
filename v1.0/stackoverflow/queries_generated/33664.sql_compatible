
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AcceptedAnswerId,
        p.OwnerUserId,
        p.AnswerCount,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(p.Score) AS TotalScore,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotesCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS CloseDate,
        ph.Comment AS CloseReason,
        ph.UserDisplayName AS Closer
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10
),
RecursiveRanked AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        u.DisplayName AS OwnerName,
        COALESCE(cp.CloseDate, 'Not Closed') AS ClosureDate,
        COALESCE(cp.CloseReason, 'N/A') AS CloseReason,
        rp.OwnerUserId
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Users u ON rp.OwnerUserId = u.Id
    LEFT JOIN 
        ClosedPosts cp ON rp.Id = cp.PostId
    WHERE 
        rp.RankByScore <= 5
    ORDER BY 
        rp.Score DESC
)
SELECT 
    r.Title,
    r.CreationDate,
    r.OwnerName,
    r.ClosureDate,
    r.CloseReason,
    us.PostCount,
    us.TotalScore,
    us.UpVotesCount
FROM 
    RecursiveRanked r
JOIN 
    UserStats us ON r.OwnerUserId = us.UserId
WHERE 
    us.Reputation > 1000
ORDER BY 
    r.Score DESC;
