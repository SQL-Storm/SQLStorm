
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COALESCE(upvote_counts.UpVoteCount, 0) AS UpVoteCount,
        COALESCE(downvote_counts.DownVoteCount, 0) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS UpVoteCount 
        FROM Votes 
        WHERE VoteTypeId = 2 
        GROUP BY PostId
    ) upvote_counts ON upvote_counts.PostId = p.Id
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS DownVoteCount 
        FROM Votes 
        WHERE VoteTypeId = 3 
        GROUP BY PostId
    ) downvote_counts ON downvote_counts.PostId = p.Id
    GROUP BY 
        p.Id, p.OwnerUserId, p.Title, p.CreationDate, p.Score, p.ViewCount, 
        upvote_counts.UpVoteCount, downvote_counts.DownVoteCount
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id
)
SELECT 
    rp.Id,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.UpVoteCount,
    rp.DownVoteCount,
    rp.CommentCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges
FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
WHERE 
    rp.Score > 0 
    AND rp.ViewCount > 100
    AND EXISTS (
        SELECT 1 
        FROM Votes v 
        WHERE v.PostId = rp.Id 
          AND v.VoteTypeId IN (2, 3)
    )
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC
FETCH FIRST 10 ROWS ONLY;
