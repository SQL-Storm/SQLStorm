WITH RecursivePostHierarchy AS (
    
    SELECT Id, Title, ParentId, OwnerUserId, 0 AS Level
    FROM Posts
    WHERE PostTypeId = 1  

    UNION ALL

    SELECT p.Id, p.Title, p.ParentId, p.OwnerUserId, ph.Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy ph ON p.ParentId = ph.Id
    WHERE p.PostTypeId = 2  
),

PostStats AS (
    
    SELECT
        p.Id,
        p.Title,
        p.ViewCount,
        COALESCE(SUM(v.VoteTypeId = 2) OVER (PARTITION BY p.Id), 0) AS UpVotes,
        COALESCE(SUM(v.VoteTypeId = 3) OVER (PARTITION BY p.Id), 0) AS DownVotes,
        COALESCE(SUM(v.VoteTypeId = 10) OVER (PARTITION BY p.Id), 0) AS DeletionVotes,
        (SELECT COUNT(c.Id) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        (SELECT COUNT(DISTINCT b.UserId) FROM Badges b WHERE b.UserId = p.OwnerUserId) AS BadgeCount
    FROM Posts p
    LEFT JOIN Votes v ON v.PostId = p.Id
),

PostHistoryDetails AS (
    
    SELECT
        ph.PostId,
        ph.CreationDate,
        MAX(CASE WHEN ph.PostHistoryTypeId IN (2, 4, 6, 10) THEN ph.CreationDate END) AS LastEditDate,
        MAX(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN ph.CreationDate END) AS LastCloseReopenDate
    FROM PostHistory ph
    GROUP BY ph.PostId
)

SELECT
    p.Id AS PostId,
    p.Title,
    p.ViewCount,
    ps.UpVotes,
    ps.DownVotes,
    ps.CommentCount,
    pst.BadgeCount,
    pH.LastEditDate,
    pH.LastCloseReopenDate,
    CASE 
        WHEN pH.LastCloseReopenDate IS NOT NULL THEN 'Closed/Reopened'
        ELSE 'Open'
    END AS PostStatus,
    r.Level AS AnswerLevel
FROM Posts p
LEFT JOIN PostStats ps ON p.Id = ps.Id
LEFT JOIN PostHistoryDetails pH ON p.Id = pH.PostId
LEFT JOIN RecursivePostHierarchy r ON p.Id = r.Id
ORDER BY p.ViewCount DESC, ps.UpVotes DESC
LIMIT 100;