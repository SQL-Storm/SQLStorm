
WITH PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
        u.DisplayName AS OwnerDisplayName,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId IN (2, 3)) AS VoteCount, 
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY ph.CreationDate DESC) AS LatestHistoryRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Users u ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Tags t ON t.ExcerptPostId = p.Id
    LEFT JOIN 
        PostHistory ph ON ph.PostId = p.Id 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName
),
FilteredPosts AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.CreationDate,
        pd.Score,
        pd.ViewCount,
        pd.CommentCount,
        pd.Tags,
        pd.OwnerDisplayName,
        pd.VoteCount
    FROM 
        PostDetails pd
    WHERE 
        pd.LatestHistoryRank = 1 AND
        pd.Score > 10 AND
        pd.CommentCount BETWEEN 1 AND 5
)

SELECT 
    fp.PostId,
    fp.Title,
    fp.CreationDate,
    fp.Score,
    fp.ViewCount,
    fp.CommentCount,
    fp.Tags,
    fp.OwnerDisplayName,
    CASE
        WHEN fp.VoteCount IS NULL THEN 'No votes yet'
        WHEN fp.VoteCount > 10 THEN 'Popular'
        ELSE 'Moderate engagement'
    END AS EngagementLevel,
    (SELECT COUNT(*) 
     FROM PostLinks pl 
     WHERE pl.PostId = fp.PostId 
       AND pl.LinkTypeId = 1) AS LinkedPosts,
    (SELECT MIN(CreationDate) 
     FROM PostHistory ph 
     WHERE ph.PostId = fp.PostId 
       AND ph.Comment IS NOT NULL) AS FirstCommentDate
FROM 
    FilteredPosts fp
ORDER BY 
    fp.Score DESC, 
    fp.ViewCount ASC;
