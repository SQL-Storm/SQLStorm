
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL
        
    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        ph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy ph ON p.ParentId = ph.PostId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(u.Reputation) AS TotalReputation,
        COUNT(b.Id) AS BadgeCount,
        ROW_NUMBER() OVER (ORDER BY SUM(u.Reputation) DESC) AS UserRank
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        COALESCE(COUNT(c.Id), 0) AS CommentCount,
        AVG(v.VoteTypeId) AS AvgVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.CreationDate
)
SELECT 
    ph.PostId,
    ph.Title AS PostTitle,
    ph.OwnerUserId,
    CONCAT('User: ', u.DisplayName, ' - Reputation: ', COALESCE(ur.TotalReputation, 0)) AS OwnerInfo,
    ps.ViewCount,
    ps.CommentCount,
    ps.AvgVotes,
    ph.Level
FROM 
    RecursivePostHierarchy ph
LEFT JOIN 
    Users u ON ph.OwnerUserId = u.Id
LEFT JOIN 
    UserReputation ur ON u.Id = ur.UserId
LEFT JOIN 
    PostStatistics ps ON ph.PostId = ps.Id
WHERE 
    COALESCE(ps.CommentCount, 0) > 5 OR COALESCE(ps.ViewCount, 0) > 100
ORDER BY 
    ph.Level, COALESCE(ps.ViewCount, 0) DESC;
