WITH UserReputation AS (
    SELECT 
        Id, 
        Reputation, 
        CreationDate, 
        DisplayName,
        CASE 
            WHEN Reputation > 1000 THEN 'High Reputation'
            WHEN Reputation BETWEEN 500 AND 1000 THEN 'Medium Reputation'
            ELSE 'Low Reputation'
        END AS ReputationCategory
    FROM Users
),
PostStatistics AS (
    SELECT 
        P.Id AS PostId,
        P.PostTypeId,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount,
        COUNT(CASE WHEN V.Id IS NOT NULL AND V.VoteTypeId = 2 THEN 1 END) AS UpVoteCount,
        COUNT(CASE WHEN V.Id IS NOT NULL AND V.VoteTypeId = 3 THEN 1 END) AS DownVoteCount,
        P.Score
    FROM Posts P
    LEFT JOIN Comments C ON P.Id = C.PostId
    LEFT JOIN Votes V ON P.Id = V.PostId
    WHERE P.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY P.Id, P.PostTypeId, P.Score
),
TopPosts AS (
    SELECT 
        PS.PostId,
        PS.PostTypeId,
        PS.CommentCount,
        PS.UpVoteCount,
        PS.DownVoteCount,
        PS.Score,
        RANK() OVER (PARTITION BY PS.PostTypeId ORDER BY PS.Score DESC) AS PostRank
    FROM PostStatistics PS
)
SELECT 
    UR.DisplayName,
    UR.ReputationCategory,
    TP.PostId,
    PT.Name AS PostType,
    TP.CommentCount,
    TP.UpVoteCount,
    TP.DownVoteCount,
    TP.Score
FROM UserReputation UR
JOIN Posts P ON P.OwnerUserId = UR.Id
JOIN TopPosts TP ON TP.PostId = P.Id
JOIN PostTypes PT ON P.PostTypeId = PT.Id
WHERE TP.PostRank <= 5  
AND UR.CreationDate < P.CreationDate 
AND (UR.Location IS NULL OR UR.Location <> '')  
ORDER BY UR.Reputation DESC, TP.Score DESC;