
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        p.ViewCount, 
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS PostRank,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id), 0) AS TotalUpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id), 0) AS TotalDownVotes,
        COUNT(DISTINCT c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        MAX(b.Class) OVER (PARTITION BY p.OwnerUserId) AS UserBadgeClass
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    WHERE 
        p.CreationDate >= CURRENT_DATE - INTERVAL '30 days'
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.OwnerDisplayName,
    rp.PostRank,
    rp.TotalUpVotes,
    rp.TotalDownVotes,
    CASE 
        WHEN rp.CommentCount > 0 THEN 'Has Comments'
        ELSE 'No Comments'
    END AS CommentStatus,
    CASE 
        WHEN rp.UserBadgeClass IS NULL THEN 'No Badge'
        ELSE 
            CASE rp.UserBadgeClass 
                WHEN 1 THEN 'Gold' 
                WHEN 2 THEN 'Silver' 
                WHEN 3 THEN 'Bronze' 
                ELSE 'Unknown Badge' 
            END 
    END AS OwnerBadgeStatus
FROM 
    RankedPosts rp
WHERE 
    rp.PostRank = 1
    AND ((rp.TotalUpVotes - rp.TotalDownVotes) > 10
    OR (rp.CommentCount = 0 AND rp.ViewCount > 1000))
ORDER BY 
    rp.Score DESC;
