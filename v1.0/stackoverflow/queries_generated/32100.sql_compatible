
WITH RecursivePostCTE AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.AcceptedAnswerId,
        0 AS Depth
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        a.Id,
        a.Title,
        a.Score,
        a.CreationDate,
        a.AcceptedAnswerId,
        rp.Depth + 1
    FROM 
        Posts a
    INNER JOIN 
        RecursivePostCTE rp ON a.ParentId = rp.Id
), 

PostStats AS (
    SELECT 
        p.Id,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title
),

PostHistoryStats AS (
    SELECT 
        ph.PostId,
        COUNT(DISTINCT ph.UserId) AS EditCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (4, 5)  
    GROUP BY 
        ph.PostId
),

TagCounts AS (
    SELECT 
        unnest(string_to_array(p.Tags, '><')) AS TagName, 
        COUNT(*) AS PostCount
    FROM 
        Posts p 
    GROUP BY 
        unnest(string_to_array(p.Tags, '><'))
    HAVING 
        COUNT(*) > 1
)

SELECT 
    r.Id AS PostId,
    r.Title,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes,
    COALESCE(peds.EditCount, 0) AS EditCount,
    peds.LastEditDate,
    tc.TagName,
    tc.PostCount
FROM 
    RecursivePostCTE r
JOIN 
    PostStats ps ON r.Id = ps.Id
LEFT JOIN 
    PostHistoryStats peds ON r.Id = peds.PostId
LEFT JOIN 
    TagCounts tc ON r.Id IN (
        SELECT p.Id 
        FROM Posts p 
        WHERE p.Tags LIKE '%' || tc.TagName || '%'
    )
WHERE 
    r.Depth = 0  
    AND ps.UpVotes - ps.DownVotes > 5  
ORDER BY 
    r.CreationDate DESC, 
    ps.CommentCount DESC 
LIMIT 100;
