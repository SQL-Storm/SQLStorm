
WITH UserReputation AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        COUNT(DISTINCT P.Id) AS PostCount
    FROM 
        Users U
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId
    GROUP BY 
        U.Id, U.DisplayName, U.Reputation
),
RecentPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS rn
    FROM 
        Posts P
    WHERE 
        P.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days'
),
PostDetails AS (
    SELECT 
        RP.PostId,
        RP.Title,
        UR.DisplayName,
        UR.Reputation,
        COALESCE(V.UpVotes, 0) AS UpVotes,
        COALESCE(V.DownVotes, 0) AS DownVotes,
        COALESCE(C.CommentCount, 0) AS CommentCount
    FROM 
        RecentPosts RP
    JOIN 
        UserReputation UR ON RP.OwnerUserId = UR.UserId
    LEFT JOIN 
        (SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, 
                       SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
         FROM Votes
         GROUP BY PostId) V ON RP.PostId = V.PostId
    LEFT JOIN 
        (SELECT PostId, COUNT(Id) AS CommentCount
         FROM Comments
         GROUP BY PostId) C ON RP.PostId = C.PostId
)
SELECT 
    PD.PostId,
    PD.Title,
    PD.DisplayName,
    PD.Reputation,
    PD.UpVotes,
    PD.DownVotes,
    PD.CommentCount,
    CASE 
        WHEN PD.Reputation > 1000 THEN 'High Reputation User'
        WHEN PD.Reputation BETWEEN 500 AND 1000 THEN 'Medium Reputation User'
        ELSE 'Low Reputation User'
    END AS ReputationCategory
FROM 
    PostDetails PD
WHERE 
    PD.rn = 1
ORDER BY 
    PD.Reputation DESC NULLS LAST
LIMIT 10;
