
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.Body,
        p.CreationDate,
        p.OwnerUserId,
        p.PostTypeId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CURRENT_DATE - INTERVAL '6 MONTH'  
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.OwnerUserId, p.PostTypeId, p.Score
),
TagsWithPostCount AS (
    SELECT 
        t.TagName, 
        COUNT(DISTINCT p.Id) AS PostCount 
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE CONCAT('%', t.TagName, '%')
    GROUP BY 
        t.TagName
),
PostHistoryStats AS (
    SELECT 
        ph.PostId, 
        COUNT(*) AS EditCount,
        MAX(CASE WHEN ph.PostHistoryTypeId IN (4, 5, 6) THEN ph.CreationDate END) AS LastEditedOn
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.CommentCount,
    rp.UpVoteCount,
    rp.DownVoteCount,
    ths.TagName,
    ths.PostCount,
    p_stats.EditCount,
    p_stats.LastEditedOn
FROM 
    RankedPosts rp
LEFT JOIN 
    TagsWithPostCount ths ON ths.PostCount = (
        SELECT MAX(PostCount) 
        FROM TagsWithPostCount 
        WHERE TagName IN (SELECT unnest(string_to_array(rp.Tags, ',')))
    )
LEFT JOIN 
    PostHistoryStats p_stats ON rp.PostId = p_stats.PostId
WHERE 
    rp.Rank <= 10  
ORDER BY 
    rp.PostTypeId, rp.Score DESC;
