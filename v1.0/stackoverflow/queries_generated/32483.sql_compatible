
WITH RecursivePostHierarchy AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title AS PostTitle,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL
    
    UNION ALL
    
    SELECT 
        p.Id AS PostId,
        p.Title AS PostTitle,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
UserActivity AS (
    
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS TotalUpvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS TotalDownvotes,
        COUNT(c.Id) AS TotalComments,
        COALESCE(SUM(CASE WHEN ph.UserId IS NOT NULL THEN 1 ELSE 0 END), 0) AS TotalPostEdits
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        PostHistory ph ON u.Id = ph.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostDetails AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COALESCE(ph.Comment, 'No comments') AS EditComment,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY ph.CreationDate DESC) AS LatestEdit
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId IN (4, 5) 
)
SELECT 
    pd.PostId,
    pd.Title,
    pd.Score,
    pd.CreationDate,
    pd.ViewCount,
    pd.OwnerDisplayName,
    ua.DisplayName AS EditorDisplayName,
    ua.TotalUpvotes,
    ua.TotalDownvotes,
    ua.TotalComments,
    COALESCE(rph.Level, -1) AS PostLevel,
    CASE WHEN pd.LatestEdit = 1 THEN 'Yes' ELSE 'No' END AS RecentlyEdited
FROM 
    PostDetails pd
LEFT JOIN 
    UserActivity ua ON pd.OwnerDisplayName = ua.DisplayName
LEFT JOIN 
    RecursivePostHierarchy rph ON pd.PostId = rph.PostId
WHERE 
    pd.ViewCount > 100
ORDER BY 
    pd.Score DESC,
    pd.CreationDate DESC;
