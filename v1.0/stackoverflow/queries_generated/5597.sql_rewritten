WITH UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS QuestionCount,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositiveAnswers,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativeAnswers,
        AVG(DATEDIFF(second, u.CreationDate, p.LastActivityDate)) AS AvgResponseTime,
        SUM(CAST(b.Class AS int)) AS TotalBadges 
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount
),
TopUsers AS (
    SELECT 
        ue.UserId,
        ue.DisplayName,
        ue.QuestionCount,
        ue.PositiveAnswers,
        ue.NegativeAnswers,
        ue.AvgResponseTime,
        ue.TotalBadges,
        ROW_NUMBER() OVER (ORDER BY ue.QuestionCount DESC) AS Rank
    FROM 
        UserEngagement ue
)
SELECT 
    tu.Rank,
    tu.DisplayName,
    tu.QuestionCount,
    tu.PositiveAnswers,
    tu.NegativeAnswers,
    tu.AvgResponseTime,
    ps.Title AS TopQuestion,
    ps.Score,
    ps.ViewCount,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes
FROM 
    TopUsers tu
JOIN 
    PostStatistics ps ON tu.UserId = ps.PostId
WHERE 
    tu.Rank <= 10
ORDER BY 
    tu.Rank;