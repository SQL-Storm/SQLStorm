WITH RecursivePostCTE AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.OwnerUserId,
        P.CreationDate,
        P.LastActivityDate,
        P.Score,
        P.ViewCount,
        0 AS Depth
    FROM Posts P
    WHERE P.ParentId IS NULL

    UNION ALL

    SELECT 
        P.Id AS PostId,
        P.Title,
        P.OwnerUserId,
        P.CreationDate,
        P.LastActivityDate,
        P.Score,
        P.ViewCount,
        Depth + 1
    FROM Posts P
    INNER JOIN RecursivePostCTE R ON P.ParentId = R.PostId
),
PostScores AS (
    SELECT 
        R.PostId,
        R.Title,
        R.OwnerUserId,
        R.CreationDate,
        R.LastActivityDate,
        R.Score + COALESCE(SUM(V.BountyAmount), 0) AS TotalScore,
        R.ViewCount,
        R.Depth
    FROM RecursivePostCTE R
    LEFT JOIN Votes V ON R.PostId = V.PostId AND V.VoteTypeId IN (8, 9) 
    GROUP BY R.PostId, R.Title, R.OwnerUserId, R.CreationDate, R.LastActivityDate, R.Score, R.ViewCount, R.Depth
),
UserBadgeCounts AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Users U
    LEFT JOIN Badges B ON U.Id = B.UserId
    GROUP BY U.Id
),
MostActiveUsers AS (
    SELECT 
        U.Id,
        U.DisplayName,
        COUNT(P.Id) AS PostCount,
        SUM(P.Score) AS TotalScore,
        U.Reputation,
        U.CreationDate
    FROM Users U
    JOIN Posts P ON U.Id = P.OwnerUserId
    WHERE U.LastAccessDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY U.Id, U.DisplayName, U.Reputation, U.CreationDate
)
SELECT 
    PAU.DisplayName AS ActiveUser,
    PAU.PostCount,
    PAU.TotalScore AS UserPostScore,
    PU.BadgeCount,
    PU.GoldBadges,
    PU.SilverBadges,
    PU.BronzeBadges,
    PS.PostId,
    PS.Title,
    PS.TotalScore AS PostScore,
    PS.ViewCount,
    PS.Depth
FROM MostActiveUsers PAU
INNER JOIN UserBadgeCounts PU ON PAU.Id = PU.UserId
JOIN PostScores PS ON PAU.Id = PS.OwnerUserId
WHERE PU.BadgeCount > 0
AND PS.TotalScore > 0
ORDER BY PAU.TotalScore DESC, PS.TotalScore DESC
LIMIT 10;