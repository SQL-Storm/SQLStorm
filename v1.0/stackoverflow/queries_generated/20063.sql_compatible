
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.LastActivityDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS ViewRank,
        COUNT(c.Id) OVER (PARTITION BY p.OwnerUserId) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.OwnerUserId) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.OwnerUserId) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 YEAR'
),
FilteredPosts AS (
    SELECT 
        rp.*,
        CASE 
            WHEN rp.ViewRank <= 3 THEN 'Top View'
            ELSE 'Regular View'
        END AS ViewCategory
    FROM 
        RankedPosts rp
    WHERE 
        rp.CommentCount > 0 AND 
        rp.LastActivityDate IS NOT NULL
),
PostDetails AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.ViewCount,
        fp.ViewCategory,
        COALESCE(b.Name, 'No Badge') AS BadgeName,
        COALESCE(ph.ProfileImageUrl, 'https://default.image.url') AS ProfileImageUrl,
        fp.OwnerUserId  -- Added OwnerUserId to GROUP BY
    FROM 
        FilteredPosts fp
    LEFT JOIN 
        Badges b ON b.UserId = fp.OwnerUserId AND b.Class = 1
    LEFT JOIN 
        Users ph ON ph.Id = fp.OwnerUserId
)
SELECT 
    pd.Title,
    pd.ViewCount,
    pd.ViewCategory,
    COUNT(DISTINCT c.Id) AS TotalComments,
    pd.BadgeName,
    pd.ProfileImageUrl
FROM 
    PostDetails pd
LEFT JOIN 
    Comments c ON pd.PostId = c.PostId
WHERE 
    pd.ViewCategory = 'Top View'
GROUP BY 
    pd.Title, pd.ViewCount, pd.ViewCategory, pd.BadgeName, pd.ProfileImageUrl
ORDER BY 
    pd.ViewCount DESC
LIMIT 10;
