WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVoteCount,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVoteCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY (p.Score + COALESCE(SUM(v.VoteTypeId = 2), 0) - COALESCE(SUM(v.VoteTypeId = 3), 0)) DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Tags t ON t.Id IN (SELECT UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')))
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),

PostRankings AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.LastActivityDate,
        rp.CommentCount,
        rp.UpVoteCount,
        rp.DownVoteCount,
        rp.Tags,
        CASE 
            WHEN rp.CommentCount > 10 THEN 'High Engagement'
            WHEN rp.CommentCount BETWEEN 5 AND 10 THEN 'Moderate Engagement'
            ELSE 'Low Engagement' 
        END AS EngagementLevel
    FROM 
        RankedPosts rp
)

SELECT 
    pr.*,
    (pr.UpVoteCount - pr.DownVoteCount) AS NetVoteScore,
    DENSE_RANK() OVER (ORDER BY (pr.UpVoteCount - pr.DownVoteCount) DESC) AS VoteRank
FROM 
    PostRankings pr
WHERE 
    pr.EngagementLevel = 'High Engagement'
ORDER BY 
    NetVoteScore DESC, pr.LastActivityDate DESC
LIMIT 20;