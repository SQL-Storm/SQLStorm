
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2), 0) AS UpVotes,
        COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3), 0) AS DownVotes
    FROM 
        Posts p
    WHERE 
        p.CreationDate > DATE_SUB(CAST('2024-10-01' AS DATE), INTERVAL 30 DAY)
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerUserId,
        rp.Score,
        rp.CreationDate,
        rp.UpVotes,
        rp.DownVotes,
        CASE 
            WHEN rp.Score >= 10 THEN 'Hot'
            WHEN rp.UpVotes - rp.DownVotes > 5 THEN 'Trending'
            ELSE 'Regular'
        END AS PostType
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn = 1
)

SELECT 
    fp.PostId,
    fp.Title,
    u.DisplayName AS Author,
    fp.Score,
    fp.UpVotes,
    fp.DownVotes,
    fp.CreationDate,
    (
        SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
        FROM Tags t 
        JOIN UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS tag ON tag = t.TagName
        WHERE p.Id = fp.PostId
    ) AS TagsUsed,
    COALESCE(b.BadgeCount, 0) AS BadgeCount
FROM 
    FilteredPosts fp
LEFT JOIN 
    Users u ON fp.OwnerUserId = u.Id
LEFT JOIN (
    SELECT 
        UserId,
        COUNT(*) AS BadgeCount 
    FROM 
        Badges 
    WHERE 
        Class = 1  
    GROUP BY 
        UserId
) b ON fp.OwnerUserId = b.UserId
WHERE 
    fp.PostType = 'Hot' OR 
    (fp.PostType = 'Trending' AND EXISTS (
        SELECT 1 
        FROM Comments c 
        WHERE c.PostId = fp.PostId AND c.Score > 0
    ))
ORDER BY 
    fp.Score DESC, 
    fp.CreationDate ASC
LIMIT 50
OFFSET 10;
