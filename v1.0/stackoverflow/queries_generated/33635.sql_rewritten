WITH RecursivePosts AS (
    SELECT 
        p.Id, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        p.OwnerUserId,
        0 AS Level,
        p.ParentId
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        p.Id, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        p.OwnerUserId,
        rp.Level + 1 AS Level,
        p.ParentId
    FROM 
        Posts p
    JOIN 
        RecursivePosts rp ON p.ParentId = rp.Id
)
SELECT 
    rp.Id AS QuestionId,
    rp.Title AS QuestionTitle,
    rp.CreationDate AS QuestionCreationDate,
    rp.Score AS QuestionScore,
    U.DisplayName AS QuestionOwner,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
    COUNT(DISTINCT c.Id) AS CommentCount,
    (SELECT COUNT(*) 
     FROM Posts p 
     WHERE p.ParentId = rp.Id) AS AnswerCount,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Posts p
     JOIN UNNEST(string_to_array(p.Tags, '<>')) AS tag ON true
     JOIN Tags t ON t.TagName ILIKE '%' || tag || '%' 
     WHERE p.Id = rp.Id) AS AssociatedTags
FROM 
    RecursivePosts rp
LEFT JOIN 
    Users U ON U.Id = rp.OwnerUserId
LEFT JOIN 
    Votes v ON v.PostId = rp.Id
LEFT JOIN 
    Comments c ON c.PostId = rp.Id
WHERE 
    rp.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR'
GROUP BY 
    rp.Id, U.DisplayName
ORDER BY 
    QuestionScore DESC
FETCH FIRST 100 ROWS ONLY;