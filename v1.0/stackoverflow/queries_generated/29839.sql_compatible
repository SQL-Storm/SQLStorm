
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        u.DisplayName AS Owner,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
        JSON_AGG(DISTINCT pt.Name ORDER BY ht.CreationDate DESC) AS HistoryTypes
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId
    LEFT JOIN 
        PostHistory ht ON p.Id = ht.PostId
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(p.Tags, ',')) AS tag_names ON TRUE
    LEFT JOIN 
        Tags t ON t.TagName = tag_names AND t.TagName IS NOT NULL
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.Score, u.DisplayName
),
FilteredPosts AS (
    SELECT
        rp.*,
        ROW_NUMBER() OVER (ORDER BY rp.Score DESC, rp.CreationDate DESC) AS Rank
    FROM 
        RankedPosts rp
    WHERE 
        rp.CreationDate > CURRENT_DATE - INTERVAL '30 days'
        AND rp.Score > 0
)

SELECT 
    fp.PostId,
    fp.Title,
    fp.Body,
    fp.Owner,
    fp.CommentCount,
    fp.AnswerCount,
    fp.Tags,
    fp.Rank,
    h.Name AS LastPostHistoryType
FROM 
    FilteredPosts fp
LEFT JOIN 
    PostHistory h ON fp.PostId = h.PostId
WHERE 
    h.CreationDate = (SELECT MAX(CreationDate) FROM PostHistory WHERE PostId = fp.PostId)
ORDER BY 
    fp.Rank;
