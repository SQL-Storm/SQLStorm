
WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.OwnerUserId,
        P.CreationDate,
        P.LastActivityDate,
        P.Score,
        P.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.Score DESC) AS Rank
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1 
        AND P.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year' 
        AND P.Score > 10
),
UserReputation AS (
    SELECT 
        U.Id AS UserId,
        U.Reputation,
        U.DisplayName,
        COALESCE(SUM(V.BountyAmount), 0) AS TotalBounties
    FROM 
        Users U
    LEFT JOIN 
        Votes V ON U.Id = V.UserId
    GROUP BY 
        U.Id, U.Reputation, U.DisplayName
),
RecentPosts AS (
    SELECT 
        RP.PostId,
        RP.Title,
        UR.DisplayName,
        UR.Reputation,
        UR.TotalBounties,
        RP.CreationDate,
        RP.LastActivityDate,
        RP.Score,
        RP.ViewCount
    FROM 
        RankedPosts RP
    JOIN 
        UserReputation UR ON RP.OwnerUserId = UR.UserId
    WHERE 
        RP.Rank <= 5
)
SELECT 
    RP.PostId,
    RP.Title,
    RP.DisplayName,
    RP.Reputation,
    RP.TotalBounties,
    RP.Score,
    RP.ViewCount,
    CASE 
        WHEN RP.Score > 50 THEN 'High Score'
        WHEN RP.Score BETWEEN 20 AND 50 THEN 'Medium Score'
        ELSE 'Low Score'
    END AS ScoreCategory,
    (SELECT COUNT(*) FROM Comments C WHERE C.PostId = RP.PostId) AS CommentCount,
    (SELECT STRING_AGG(T.TagName, ', ') FROM Tags T JOIN LATERAL UNNEST(string_to_array(RP.Tags, ',')) AS tag ON tag = T.TagName) AS TaggedWith
FROM 
    RecentPosts RP
ORDER BY 
    RP.Score DESC, RP.CreationDate DESC
LIMIT 10;
