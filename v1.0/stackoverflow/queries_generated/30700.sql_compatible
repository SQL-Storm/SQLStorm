
WITH RECURSIVE TagHierarchy AS (
    SELECT 
        t.Id AS TagId, 
        t.TagName,
        t.Count,
        0 AS Level,
        CAST(t.TagName AS VARCHAR(1000)) AS FullPath
    FROM 
        Tags t
    WHERE 
        t.IsModeratorOnly = 0
    
    UNION ALL
    
    SELECT 
        t.Id AS TagId, 
        t.TagName,
        t.Count,
        th.Level + 1,
        CAST(CONCAT(th.FullPath, ' > ', t.TagName) AS VARCHAR(1000)) AS FullPath
    FROM 
        Tags t
    JOIN 
        PostLinks pl ON t.Id = pl.RelatedPostId
    JOIN 
        TagHierarchy th ON pl.PostId = th.TagId
)

SELECT 
    u.DisplayName,
    u.Reputation,
    COALESCE(SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END), 0) AS QuestionCount,
    COALESCE(SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END), 0) AS AnswerCount,
    COUNT(DISTINCT pl.RelatedPostId) AS RelatedPostCount,
    STRING_AGG(DISTINCT th.FullPath, ', ') AS RelatedTags,
    MAX(b.Date) AS LastBadgeDate,
    COUNT(DISTINCT c.Id) AS CommentCount,
    u.CreationDate,
    u.LastAccessDate,
    EXTRACT(EPOCH FROM (TIMESTAMP '2024-10-01 12:34:56' - u.CreationDate)) AS AccountAgeInSeconds
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    Comments c ON p.Id = c.PostId
LEFT JOIN 
    PostLinks pl ON p.Id = pl.PostId
LEFT JOIN 
    Badges b ON u.Id = b.UserId
LEFT JOIN 
    TagHierarchy th ON pl.RelatedPostId = th.TagId
WHERE 
    u.Reputation > 1000
GROUP BY 
    u.Id, u.DisplayName, u.Reputation, u.CreationDate, u.LastAccessDate
ORDER BY 
    QuestionCount DESC, AnswerCount DESC
LIMIT 50;
