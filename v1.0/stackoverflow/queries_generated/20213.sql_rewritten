WITH UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.CreationDate,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        SUM(CASE WHEN p.PostTypeId = 1 AND p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AcceptedAnswers,
        SUM(coalesce(v.BountyAmount, 0)) AS TotalBounty,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY COUNT(DISTINCT p.Id) DESC) AS rn
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8 
    GROUP BY 
        u.Id, u.Reputation, u.CreationDate
),
PostHistoryStats AS (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS EditCount,
        MAX(ph.CreationDate) AS LastEdited,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
),
TopUsers AS (
    SELECT 
        UserId,
        Reputation,
        PostCount,
        AnswerCount,
        AcceptedAnswers,
        TotalBounty,
        ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS Rank
    FROM 
        UserStats
    WHERE 
        Reputation > 1000 
),
HighActivityPosts AS (
    SELECT 
        p.Id,
        p.Title,
        ps.EditCount,
        ps.LastEdited,
        ps.HistoryTypes,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVotes,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        PostHistoryStats ps ON p.Id = ps.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, ps.EditCount, ps.LastEdited, ps.HistoryTypes
    HAVING 
        (EXTRACT(EPOCH FROM ps.LastEdited) IS NOT NULL) 
        AND ((p.AnswerCount > 5 AND ps.EditCount > 2) OR (ps.EditCount > 5 AND UpVotes > DownVotes)) 
),
FinalReport AS (
    SELECT 
        u.DisplayName AS UserName,
        c.PostTitle,
        c.EditCount AS TotalEdits,
        c.LastEdited AS LastEdit,
        c.UpVotes,
        c.DownVotes,
        COALESCE(SUM(b.Class), 0) AS TotalBadges
    FROM 
        HighActivityPosts c
    JOIN 
        Posts p ON c.Id = p.Id
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.LastAccessDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months' 
    GROUP BY 
        u.DisplayName, c.PostTitle, c.EditCount, c.LastEdited, c.UpVotes, c.DownVotes
)
SELECT 
    *,
    CASE 
        WHEN UpVotes > DownVotes THEN 'Prosperous'
        WHEN UpVotes = DownVotes THEN 'Neutral'
        ELSE 'Neglected'
    END AS PostStatus
FROM 
    FinalReport
ORDER BY 
    Reel = 'Prosperous' DESC, UpVotes DESC, TotalEdits DESC;