
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.Reputation AS OwnerReputation,
        COUNT(a.Id) AS AnswerCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, u.Reputation
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.CreationDate,
        rp.OwnerReputation,
        rp.AnswerCount,
        rp.UpVoteCount,
        rp.DownVoteCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank = 1 AND 
        rp.AnswerCount > 0 
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(SUBSTRING(t.TagName FROM 2 FOR LENGTH(t.TagName) - 2), ', ') AS Tags 
    FROM 
        Posts p
    JOIN 
        Tags t ON t.Id = ANY(string_to_array(p.Tags, '>')) 
    GROUP BY 
        p.Id
),
FinalResults AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.Body,
        fp.CreationDate,
        fp.OwnerReputation,
        fp.AnswerCount,
        fp.UpVoteCount,
        fp.DownVoteCount,
        pt.Tags
    FROM 
        FilteredPosts fp
    LEFT JOIN 
        PostTags pt ON fp.PostId = pt.PostId
)
SELECT 
    PostId,
    Title,
    Body,
    CreationDate,
    OwnerReputation,
    AnswerCount,
    UpVoteCount,
    DownVoteCount,
    Tags
FROM 
    FinalResults
ORDER BY 
    UpVoteCount DESC, 
    CreationDate DESC;
