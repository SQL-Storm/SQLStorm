WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
          AND p.PostTypeId = 1 
          AND p.Score > 0
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Score
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn = 1
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE 
            WHEN b.Class = 1 THEN 1 
            ELSE 0 
        END) AS GoldBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostVoteStats AS (
    SELECT 
        p.Id AS PostId,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
),
FinalResults AS (
    SELECT 
        tp.PostId,
        tp.Title,
        ub.BadgeCount,
        ub.GoldBadges,
        pvs.UpVotes,
        pvs.DownVotes,
        tp.ViewCount,
        tp.CreationDate,
        CASE 
            WHEN tp.ViewCount > 1000 THEN 'Highly Viewed'
            WHEN tp.ViewCount BETWEEN 500 AND 1000 THEN 'Moderately Viewed'
            ELSE 'Less Viewed' 
        END AS ViewCategory
    FROM 
        TopPosts tp
    JOIN 
        Users u ON u.Id = (SELECT OwnerUserId FROM Posts WHERE Id = tp.PostId)
    JOIN 
        UserBadges ub ON ub.UserId = u.Id
    LEFT JOIN 
        PostVoteStats pvs ON pvs.PostId = tp.PostId
)
SELECT 
    fr.PostId,
    fr.Title,
    fr.BadgeCount,
    fr.GoldBadges,
    fr.UpVotes,
    fr.DownVotes,
    fr.ViewCount,
    fr.CreationDate,
    fr.ViewCategory,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Tags t 
     JOIN STRING_TO_ARRAY(substring(p.Tags, 2, length(p.Tags) - 2), '><') AS tag ON t.TagName = tag) AS TagsUsed
FROM 
    FinalResults fr
JOIN 
    Posts p ON p.Id = fr.PostId
WHERE 
    p.Tags IS NOT NULL
ORDER BY 
    fr.Score DESC, fr.CreationDate DESC;