
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COALESCE((
            SELECT COUNT(*)
            FROM Comments c
            WHERE c.PostId = p.Id
        ), 0) AS CommentCount,
        p.OwnerUserId
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
),

UserPostEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotesCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotesCount,
        COALESCE(SUM(ph.Id IS NOT NULL), 0) AS PostsEditedCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        u.Id, u.DisplayName
)

SELECT 
    up.UserId,
    up.DisplayName,
    up.UpVotesCount,
    up.DownVotesCount,
    COUNT(DISTINCT rp.PostId) AS PostsCreated,
    SUM(rp.CommentCount) AS TotalComments,
    (SELECT AVG(ViewCount) FROM RankedPosts WHERE Rank <= 5) AS AvgTopPostViewCount,
    CASE 
        WHEN SUM(up.UpVotesCount) > SUM(up.DownVotesCount) THEN 'Positive Engagement'
        WHEN SUM(up.DownVotesCount) > SUM(up.UpVotesCount) THEN 'Negative Engagement'
        ELSE 'Neutral Engagement'
    END AS EngagementStatus
FROM 
    UserPostEngagement up
LEFT JOIN 
    RankedPosts rp ON up.UserId = rp.OwnerUserId
GROUP BY 
    up.UserId, up.DisplayName, up.UpVotesCount, up.DownVotesCount
HAVING 
    COUNT(DISTINCT rp.PostId) > 0
ORDER BY 
    up.UpVotesCount DESC, EngagementStatus;
