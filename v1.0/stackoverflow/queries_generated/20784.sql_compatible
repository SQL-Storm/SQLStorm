
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AcceptedAnswerId,
        COALESCE(
            (SELECT COUNT(*)
             FROM Comments c
             WHERE c.PostId = p.Id), 0) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RowNum,
        p.OwnerUserId
    FROM
        Posts p
    WHERE
        p.CreationDate >= CURRENT_DATE - INTERVAL '1 year'
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(b.Id) AS TotalBadges,
        MAX(p.CreationDate) AS LastPostDate
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes V ON V.UserId = u.Id
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName
),
ClosedPostHistory AS (
    SELECT 
        p.Id AS PostId,
        MAX(ph.CreationDate) AS LastClosedDate,
        STRING_AGG(DISTINCT c.Name, ', ') AS CloseReason
    FROM 
        Posts p
    INNER JOIN 
        PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId IN (10, 11) 
    LEFT JOIN 
        CloseReasonTypes c ON c.Id = ph.Comment::INTEGER
    GROUP BY 
        p.Id
)
SELECT 
    u.DisplayName,
    ua.TotalPosts,
    ua.TotalBadges,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    ph.LastClosedDate,
    ph.CloseReason,
    ROW_NUMBER() OVER (ORDER BY ua.TotalPosts DESC) AS RankBasedOnPosts,
    CASE 
        WHEN ua.LastPostDate = CURRENT_DATE - INTERVAL '1 day' THEN 'Active'
        ELSE 'Inactive'
    END AS ActivityStatus
FROM 
    UserActivity ua
JOIN 
    RankedPosts rp ON ua.UserId = rp.OwnerUserId
LEFT JOIN 
    ClosedPostHistory ph ON rp.PostId = ph.PostId
WHERE 
    rp.RowNum = 1 
    AND ua.TotalPosts > 0 
ORDER BY 
    (ua.TotalUpvotes - ua.TotalDownvotes) DESC, 
    rp.Score DESC;
