
WITH RankedPosts AS (
    SELECT
        P.Id AS PostId,
        P.Title,
        P.ViewCount,
        P.Score,
        P.CreationDate,
        STRING_AGG(T.TagName, ', ') AS Tags,
        COUNT(C.Comment) AS CommentCount,
        ROW_NUMBER() OVER (ORDER BY P.ViewCount DESC) AS Rank
    FROM 
        Posts P
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(SUBSTRING(P.Tags, 2, LENGTH(P.Tags) - 2), '><')) AS T(TagName)
    WHERE 
        P.PostTypeId = 1  
    GROUP BY 
        P.Id, P.Title, P.ViewCount, P.Score, P.CreationDate
),
PopularTags AS (
    SELECT
        TagName,
        COUNT(*) AS TagCount
    FROM 
        Posts P
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(SUBSTRING(P.Tags, 2, LENGTH(P.Tags) - 2), '><')) AS T(TagName)
    WHERE 
        P.PostTypeId = 1
    GROUP BY 
        TagName
    ORDER BY 
        TagCount DESC
    LIMIT 10
),
TopUsers AS (
    SELECT
        U.Id AS UserId,
        U.DisplayName,
        SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionsAnswered,
        SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswersGiven
    FROM 
        Users U
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId
    GROUP BY 
        U.Id, U.DisplayName
    ORDER BY 
        QuestionsAnswered DESC, AnswersGiven DESC
    LIMIT 5
)
SELECT 
    RP.PostId,
    RP.Title,
    RP.ViewCount,
    RP.Score,
    RP.CreationDate,
    RP.Tags,
    RP.CommentCount,
    PT.TagName AS PopularTag,
    TU.DisplayName AS TopUser,
    TU.QuestionsAnswered,
    TU.AnswersGiven
FROM 
    RankedPosts RP
CROSS JOIN 
    PopularTags PT 
CROSS JOIN 
    TopUsers TU
WHERE 
    RP.Rank <= 10
ORDER BY 
    RP.ViewCount DESC, PT.TagCount DESC, TU.QuestionsAnswered DESC;
