WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        COALESCE(u.DisplayName, 'Community User') AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PostSummary AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.OwnerDisplayName,
        rp.DownVotes,
        CASE 
            WHEN rp.DownVotes > (SELECT AVG(DownVotes) FROM RankedPosts) THEN 'High Downvote'
            ELSE 'Normal'
        END AS DownvoteCategory,
        RANK() OVER (ORDER BY rp.Score DESC) AS ScoreRank
    FROM 
        RankedPosts rp
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.CreationDate,
    ps.Score,
    ps.OwnerDisplayName,
    ps.DownVotes,
    ps.DownvoteCategory,
    CASE 
        WHEN ps.Score > 0 THEN 'Positive'
        WHEN ps.Score < 0 THEN 'Negative'
        ELSE 'Neutral' 
    END AS ScoreSentiment,
    (SELECT STRING_AGG(t.TagName, ', ') 
        FROM Tags t 
        INNER JOIN LATERAL (
            SELECT unnest(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><'))::varchar) AS TagName
            WHERE p.Id = ps.PostId
        ) AS TagList ON t.ExcerptPostId = ps.PostId) AS TagNames
FROM 
    PostSummary ps
WHERE 
    ps.ScoreRank <= 10
ORDER BY 
    ps.Score DESC, ps.CreationDate ASC;