
WITH RecursiveTagHierarchy AS (
    SELECT Id, TagName, Count, WikiPostId, 0 AS Level
    FROM Tags
    WHERE IsModeratorOnly = 0
    UNION ALL
    SELECT t.Id, t.TagName, t.Count, t.WikiPostId, Level + 1
    FROM Tags t
    INNER JOIN RecursiveTagHierarchy rth ON t.ExcerptPostId = rth.Id
),
UserActivity AS (
    SELECT u.Id AS UserId, u.DisplayName, SUM(P.Score) AS TotalScore, COUNT(DISTINCT P.Id) AS PostCount,
           SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
           SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM Users u
    LEFT JOIN Posts P ON u.Id = P.OwnerUserId
    LEFT JOIN Votes V ON P.Id = V.PostId
    GROUP BY u.Id, u.DisplayName
),
UserBadges AS (
    SELECT b.UserId, 
           COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS Gold,
           COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS Silver,
           COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS Bronze
    FROM Badges b
    GROUP BY b.UserId
)
SELECT u.DisplayName, ua.TotalScore AS UserScore, ub.Gold, ub.Silver, ub.Bronze,
       COUNT(DISTINCT ph.PostId) AS TotalPostHistory,
       STRING_AGG(DISTINCT t.TagName, ', ') AS AssociatedTags,
       COALESCE(MAX(ph.LastEditDate), 'Never') AS LastEdited,
       SUM(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS ClosedPostsCount
FROM UserActivity ua
JOIN Users u ON ua.UserId = u.Id
LEFT JOIN PostHistory ph ON u.Id = ph.UserId
LEFT JOIN RecursiveTagHierarchy t ON t.Id = CAST(SUBSTRING(STRING_AGG(DISTINCT p.Tags, ', '), 3, LEN(STRING_AGG(DISTINCT p.Tags, ', ')) - 4) AS INT)
LEFT JOIN UserBadges ub ON u.Id = ub.UserId
WHERE u.Reputation > 10
GROUP BY u.DisplayName, ua.TotalScore, ub.Gold, ub.Silver, ub.Bronze
ORDER BY ua.TotalScore DESC, u.DisplayName ASC
LIMIT 50;
