WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 AND (p.Score > 5 OR p.ViewCount > 100)
), UserBadgeCounts AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
), RecentComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount
    FROM 
        Comments c
    WHERE 
        c.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY 
        c.PostId
)
SELECT 
    p.PostId,
    p.Title,
    COALESCE(u.DisplayName, 'Anonymous') AS OwnerName,
    u.Reputation,
    COALESCE(b.GoldBadges, 0) AS GoldBadges,
    COALESCE(b.SilverBadges, 0) AS SilverBadges,
    COALESCE(b.BronzeBadges, 0) AS BronzeBadges,
    COALESCE(rc.CommentCount, 0) AS RecentComments,
    p.Score,
    p.ViewCount,
    p.AnswerCount,
    p.CreationDate,
    R.UserRank
FROM 
    RankedPosts R
LEFT JOIN 
    Users u ON R.PostId = u.Id
LEFT JOIN 
    UserBadgeCounts b ON u.Id = b.UserId
LEFT JOIN 
    RecentComments rc ON R.PostId = rc.PostId
WHERE 
    R.UserRank <= 3
ORDER BY 
    R.UserRank, p.CreationDate DESC;