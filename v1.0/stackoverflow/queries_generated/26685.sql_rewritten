WITH PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COALESCE(a.AnswerCount, 0) AS AnswerCount,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            ParentId,
            COUNT(*) AS AnswerCount
        FROM 
            Posts
        WHERE 
            PostTypeId = 2
        GROUP BY 
            ParentId
    ) a ON p.Id = a.ParentId
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments
        GROUP BY 
            PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT 
            p.Id,
            unnest(string_to_array(p.Tags, ', ')) AS TagName
        FROM 
            Posts p
    ) t ON p.Id = t.Id
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score
), UserRankings AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(u.UpVotes) AS TotalUpVotes,
        SUM(u.DownVotes) AS TotalDownVotes,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(b.Class) AS TotalBadges,
        SUM(v.BountyAmount) AS TotalBounty
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
), PerformanceAnalysis AS (
    SELECT 
        pm.PostId,
        pm.Title,
        pm.CreationDate,
        pm.ViewCount,
        pm.Score,
        pm.AnswerCount,
        pm.CommentCount,
        pm.Tags,
        ur.UserId,
        ur.DisplayName AS AuthorDisplayName,
        ur.TotalUpVotes,
        ur.TotalDownVotes,
        ur.TotalPosts,
        ur.TotalBadges,
        ur.TotalBounty
    FROM 
        PostMetrics pm
    JOIN 
        Users ur ON pm.PostId IN (
            SELECT 
                p.Id
            FROM 
                Posts p
            WHERE 
                p.OwnerUserId = ur.UserId
        )
    ORDER BY 
        pm.Score DESC, 
        pm.ViewCount DESC
)
SELECT 
    *,
    (Score + ViewCount) AS EngagementScore,
    (TotalUpVotes - TotalDownVotes) AS ReputationBalance
FROM 
    PerformanceAnalysis
WHERE 
    AnswerCount > 0 
ORDER BY 
    EngagementScore DESC
LIMIT 10;