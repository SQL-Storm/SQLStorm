WITH UserMetrics AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpvotesReceived,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownvotesReceived,
        COUNT(DISTINCT P.Id) AS PostCount,
        SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionsAsked,
        SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswersGiven,
        SUM(COALESCE(Ph.PostId IS NOT NULL, 0)::int) AS EditsCount,
        COUNT(DISTINCT B.Id) AS BadgesCount
    FROM Users U
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN Votes V ON P.Id = V.PostId
    LEFT JOIN PostHistory Ph ON P.Id = Ph.PostId
    LEFT JOIN Badges B ON U.Id = B.UserId
    GROUP BY U.Id
),
RankedUsers AS (
    SELECT 
        UserId,
        DisplayName,
        Reputation,
        UpvotesReceived,
        DownvotesReceived,
        PostCount,
        QuestionsAsked,
        AnswersGiven,
        EditsCount,
        BadgesCount,
        RANK() OVER (ORDER BY Reputation DESC, UpvotesReceived DESC) AS UserRank
    FROM UserMetrics
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        Reputation,
        UpvotesReceived,
        DownvotesReceived,
        PostCount,
        QuestionsAsked,
        AnswersGiven,
        EditsCount,
        BadgesCount,
        UserRank
    FROM RankedUsers
    WHERE UserRank <= 10
),
PostDetails AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.Score,
        ARRAY_AGG(DISTINCT Tag.TagName ORDER BY Tag.TagName) AS Tags,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount,
        U.DisplayName AS OwnerDisplayName
    FROM Posts P
    JOIN Users U ON P.OwnerUserId = U.Id
    LEFT JOIN Comments C ON P.Id = C.PostId
    LEFT JOIN LATERAL (
        SELECT DISTINCT UNNEST(string_to_array(P.Tags, '>')) AS TagName
    ) Tag ON true
    WHERE P.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
    GROUP BY P.Id, U.DisplayName
),
PostMetrics AS (
    SELECT 
        PD.PostId,
        PD.Title,
        PD.CreationDate,
        PD.Score,
        PD.Tags,
        PD.CommentCount,
        PD.OwnerDisplayName,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes
    FROM PostDetails PD
    LEFT JOIN Votes V ON PD.PostId = V.PostId
    GROUP BY PD.PostId, PD.Title, PD.CreationDate, PD.Score, PD.Tags, PD.CommentCount, PD.OwnerDisplayName
)
SELECT 
    U.DisplayName AS TopUser,
    U.Reputation AS TopUserReputation,
    P.Title AS PopularPost,
    P.CreationDate AS PostCreationDate,
    P.Score AS PostScore,
    P.Tags AS PostTags,
    P.CommentCount AS PostCommentCount,
    P.Upvotes AS TotalUpvotes,
    P.Downvotes AS TotalDownvotes
FROM TopUsers U
JOIN PostMetrics P ON U.UserId = P.OwnerDisplayName
ORDER BY U.Reputation DESC, P.Score DESC
OFFSET 0 ROWS 
FETCH NEXT 10 ROWS ONLY;