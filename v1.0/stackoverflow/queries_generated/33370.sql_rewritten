WITH RecursivePostHierarchy AS (
    
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.Title,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        a.Id,
        a.ParentId,
        a.Title,
        Level + 1
    FROM 
        Posts a
    INNER JOIN 
        RecursivePostHierarchy r ON a.ParentId = r.PostId
    WHERE 
        a.PostTypeId = 2 
        AND Level < 5 
),
PostWithVotes AS (
    
    SELECT 
        p.Id,
        p.Title,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title
),
UserBadges AS (
    
    SELECT 
        b.UserId,
        COUNT(b.Id) AS GoldBadgeCount
    FROM 
        Badges b
    WHERE 
        b.Class = 1 
    GROUP BY 
        b.UserId
),
TopUsers AS (
    
    SELECT 
        u.Id,
        u.DisplayName,
        u.Reputation,
        COALESCE(ub.GoldBadgeCount, 0) AS GoldBadgeCount
    FROM 
        Users u
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
    WHERE 
        u.Reputation > 1000 
)

SELECT 
    ph.PostId AS QuestionId,
    ph.Title AS QuestionTitle,
    pw.UpVotes,
    pw.DownVotes,
    tu.DisplayName AS TopUserName,
    tu.Reputation AS TopUserReputation,
    tu.GoldBadgeCount AS TopUserGoldBadgeCount,
    ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.Level) AS AnswerLevel
FROM 
    RecursivePostHierarchy ph
JOIN 
    PostWithVotes pw ON ph.PostId = pw.Id
JOIN 
    TopUsers tu ON pw.UpVotes > 5 
ORDER BY 
    ph.PostId, AnswerLevel;