WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(b.Class = 1), 0) AS GoldBadges,
        COALESCE(SUM(b.Class = 2), 0) AS SilverBadges,
        COALESCE(SUM(b.Class = 3), 0) AS BronzeBadges,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    WHERE 
        u.CreationDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '3 years'
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        us.DisplayName AS OwnerDisplayName,
        us.Reputation,
        us.PostCount,
        us.GoldBadges,
        us.SilverBadges,
        us.BronzeBadges,
        rp.CommentCount,
        CASE 
            WHEN rp.PostRank = 1 THEN 'Most Recent'
            WHEN rp.PostRank > 1 AND rp.PostRank <= 5 THEN 'Recent Posts'
            ELSE 'Older Posts' 
        END AS PostGroup
    FROM 
        RankedPosts rp
    JOIN 
        UserStats us ON rp.OwnerUserId = us.UserId
)
SELECT 
    pd.PostId, 
    pd.Title, 
    pd.CreationDate,
    pd.OwnerDisplayName,
    pd.Reputation,
    pd.PostCount,
    pd.GoldBadges,
    pd.SilverBadges,
    pd.BronzeBadges,
    pd.CommentCount,
    pd.PostGroup,
    COALESCE(STRING_AGG(c.Text, '; '), 'No Comments') AS Comments
FROM 
    PostDetails pd
LEFT JOIN 
    Comments c ON pd.PostId = c.PostId
GROUP BY 
    pd.PostId, pd.Title, pd.CreationDate, 
    pd.OwnerDisplayName, pd.Reputation, 
    pd.PostCount, pd.GoldBadges, 
    pd.SilverBadges, pd.BronzeBadges, 
    pd.CommentCount, pd.PostGroup
ORDER BY 
    pd.CreationDate DESC, pd.Reputation DESC
LIMIT 100
OFFSET 0
UNION ALL
SELECT 
    NULL AS PostId, 
    'Total Users' AS Title, 
    NULL AS CreationDate,
    NULL AS OwnerDisplayName,
    COUNT(*) AS Reputation,
    NULL AS PostCount,
    NULL AS GoldBadges,
    NULL AS SilverBadges,
    NULL AS BronzeBadges,
    NULL AS CommentCount,
    NULL AS PostGroup,
    NULL AS Comments
FROM 
    Users
WHERE 
    Reputation > 1000
HAVING 
    COUNT(*) > 0;