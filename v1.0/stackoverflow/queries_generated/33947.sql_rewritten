WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COALESCE((SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id), 0) AS CommentCount,
        COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2), 0) AS UpVoteCount,
        COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3), 0) AS DownVoteCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
RecentPostHistory AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        ph.UserDisplayName,
        ph.CreationDate AS EditDate,
        ph.Comment
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.PostHistoryTypeId IN (4, 5, 6) 
        AND ph.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),
PostRankings AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.Rank,
        ub.BadgeCount,
        ub.GoldBadges,
        ub.SilverBadges,
        ub.BronzeBadges,
        COALESCE(rph.UserDisplayName, 'No Edits') AS LastEditor,
        COALESCE(rph.EditDate, 'No Edits') AS LastEditDate,
        COALESCE(rph.Comment, 'No Comments on Edits') AS EditComment
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges ub ON rp.OwnerUserId = ub.UserId
    LEFT JOIN 
        RecentPostHistory rph ON rp.Id = rph.PostId
)
SELECT 
    pr.Title,
    pr.CreationDate,
    pr.Score,
    pr.ViewCount,
    pr.BadgeCount,
    pr.GoldBadges,
    pr.SilverBadges,
    pr.BronzeBadges,
    pr.LastEditor,
    pr.LastEditDate,
    pr.EditComment,
    (pr.UpVoteCount - pr.DownVoteCount) AS NetVotes,
    CASE 
        WHEN pr.Rank = 1 THEN 'Top'
        WHEN pr.Rank <= 3 THEN 'Top 3'
        ELSE 'Regular'
    END AS PostRankCategory
FROM 
    PostRankings pr
WHERE 
    pr.BadgeCount > 0
ORDER BY 
    pr.Score DESC, 
    pr.CreationDate ASC
LIMIT 50;