
WITH UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        COUNT(DISTINCT CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN p.Id END) AS AcceptedQuestions,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.Reputation
),
PopularTags AS (
    SELECT 
        LOWER(TRIM(SUBSTRING(t.TagName, 1, 20))) AS TagName,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = p.TagId
    WHERE 
        p.Title IS NOT NULL 
        AND t.Count > 50
    GROUP BY 
        TagName
    HAVING 
        COUNT(DISTINCT p.Id) > 10
),
PostHistoryDetails AS (
    SELECT 
        p.Id AS PostId,
        MAX(ph.CreationDate) AS LastEdited,
        STRING_AGG(DISTINCT ph.Comment, ', ') AS HistoryComments,
        COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN ph.Id END) AS CloseReopenCount
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.CreationDate IS NOT NULL
    GROUP BY 
        p.Id
)
SELECT 
    us.UserId,
    us.Reputation,
    COALESCE(pt.PostCount, 0) AS PopularTagCount,
    us.BadgeCount,
    us.AcceptedQuestions,
    us.Upvotes,
    us.Downvotes,
    p.LastEdited,
    p.HistoryComments,
    p.CloseReopenCount
FROM 
    UserStatistics us
LEFT JOIN 
    PopularTags pt ON us.Reputation > (SELECT AVG(Reputation) FROM Users) 
LEFT JOIN 
    PostHistoryDetails p ON us.UserId = p.PostId
WHERE 
    (us.Reputation IS NOT NULL OR us.BadgeCount > 0)
    AND (p.LastEdited IS NULL OR p.LastEdited >= CURRENT_TIMESTAMP - INTERVAL '1 year')
ORDER BY 
    us.Reputation DESC, us.BadgeCount DESC, PopularTagCount DESC
LIMIT 100
OFFSET 0;
