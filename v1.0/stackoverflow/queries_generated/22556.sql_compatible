
WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.PostTypeId,
        p.Title,
        COALESCE(p.AcceptedAnswerId, -1) AS AcceptedAnswerId,
        p.ViewCount,
        COALESCE(p.AnswerCount, 0) AS AnswerCount,
        COALESCE(NULLIF(p.FavoriteCount, 0), NULL) AS FavoriteCount,
        COALESCE(NULLIF(p.CommentCount, 0), NULL) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS MostRecentPostRank,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) OVER (PARTITION BY p.Id) AS TotalUpvotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) OVER (PARTITION BY p.Id) AS TotalDownvotes,
        (COALESCE(NULLIF(p.Score, 0), 1) * COALESCE(p.ViewCount, 1)) AS EngagementScore
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.PostTypeId,
    u.DisplayName AS OwnerDisplayName,
    ps.ViewCount,
    ps.FavoriteCount,
    ps.CommentCount,
    ps.TotalUpvotes,
    ps.TotalDownvotes,
    ps.EngagementScore,
    CASE 
        WHEN ps.MostRecentPostRank = 1 THEN 'Most Recent Post'
        ELSE 'Other Post'
    END AS PostCategory,
    STRING_AGG(DISTINCT pt.Name, ', ') AS PostTypes,
    COUNT(DISTINCT bh.Id) FILTER (WHERE bh.PostHistoryTypeId IN (1, 4, 10)) AS RecentEdits
FROM 
    PostStats ps
JOIN 
    Users u ON ps.PostId = u.Id
LEFT JOIN 
    PostHistory bh ON bh.PostId = ps.PostId
LEFT JOIN 
    PostTypes pt ON pt.Id = ps.PostTypeId
GROUP BY 
    ps.PostId, ps.Title, ps.PostTypeId, u.DisplayName, ps.ViewCount, ps.FavoriteCount, ps.CommentCount, ps.TotalUpvotes, ps.TotalDownvotes, ps.EngagementScore, ps.MostRecentPostRank
HAVING 
    SUM(CASE WHEN ps.ViewCount IS NULL THEN 1 ELSE 0 END) < 2
    AND AVG(ps.EngagementScore) > 50
ORDER BY 
    ps.EngagementScore DESC
LIMIT 100;
