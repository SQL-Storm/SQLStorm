
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS RankByViews,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        AVG(p.Score) OVER (PARTITION BY p.OwnerUserId) AS AvgScoreByUser
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.CreationDate, p.OwnerUserId
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS CloseCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 END) AS ReopenCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(CASE WHEN b.Id IS NOT NULL THEN 1 ELSE 0 END), 0) AS BadgeCount,
        MAX(p.Score) AS HighestScore,
        AVG(p.AvgScoreByUser) AS UserAvgScore
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        RankedPosts p ON u.Id = p.OwnerUserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
)

SELECT 
    us.DisplayName, 
    us.Reputation,
    ps.PostId,
    ps.Title, 
    ps.ViewCount,
    phs.CloseCount,
    phs.ReopenCount,
    us.BadgeCount,
    us.HighestScore,
    us.UserAvgScore,
    CASE 
        WHEN ps.RankByViews <= 3 THEN 'Top Viewers'
        WHEN ps.RankByViews IS NULL THEN 'No Posts'
        ELSE 'Regular'
    END AS PostRank,
    COALESCE(NULLIF(ps.CommentCount, 0), 'No Comments') AS CommentsInfo
FROM 
    UserStats us
LEFT JOIN 
    RankedPosts ps ON us.UserId = ps.OwnerUserId
LEFT JOIN 
    PostHistorySummary phs ON ps.PostId = phs.PostId
WHERE 
    us.BadgeCount > 0 OR ps.ViewCount > 100
ORDER BY 
    us.Reputation DESC, ps.ViewCount DESC;
