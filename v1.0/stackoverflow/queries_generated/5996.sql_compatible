
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT h.Id) AS EditHistoryCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate ASC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostHistory h ON p.Id = h.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate > DATE_SUB(CAST('2024-10-01' AS DATE), INTERVAL 1 MONTH) 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.PostTypeId
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount,
        rp.EditHistoryCount,
        rp.UpVotes,
        rp.DownVotes
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 10
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.CreationDate,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    tp.EditHistoryCount,
    tp.UpVotes,
    tp.DownVotes,
    COALESCE(bt.TagName, 'No Tag') AS TagName
FROM 
    TopPosts tp
LEFT JOIN 
    (SELECT 
         t.Id, 
         t.TagName, 
         pl.PostId
     FROM 
         Tags t
     JOIN 
         PostLinks pl ON t.Id = pl.TagId
     JOIN 
         Posts p ON pl.PostId = p.Id) bt ON tp.PostId = bt.PostId
ORDER BY 
    tp.Score DESC, tp.CreationDate ASC;
