WITH UserBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') FILTER (WHERE b.Class = 1) AS GoldBadges,
        STRING_AGG(b.Name, ', ') FILTER (WHERE b.Class = 2) AS SilverBadges,
        STRING_AGG(b.Name, ', ') FILTER (WHERE b.Class = 3) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostAnalytics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate,
        MIN(ph.CreationDate) AS FirstCloseDate,
        MAX(ph.CreationDate) AS LastCloseDate,
        COUNT(*) AS CloseCount,
        STRING_AGG(DISTINCT cr.Name, '; ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes cr ON ph.Comment IS NOT NULL AND ph.PostHistoryTypeId = 10 AND ph.Comment = cr.Id::text
    GROUP BY 
        ph.PostId, ph.CreationDate
)
SELECT 
    ub.DisplayName,
    ub.BadgeCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    pa.PostId,
    pa.Title,
    pa.CommentCount,
    pa.VoteCount,
    pa.UpVotes,
    pa.DownVotes,
    cp.FirstCloseDate,
    cp.LastCloseDate,
    cp.CloseCount,
    cp.CloseReasons
FROM 
    UserBadges ub
LEFT JOIN 
    PostAnalytics pa ON pa.PostRank = 1
LEFT JOIN 
    ClosedPosts cp ON pa.PostId = cp.PostId
WHERE 
    ub.BadgeCount > 0
ORDER BY 
    pa.VoteCount DESC, ub.BadgeCount ASC, pa.CommentCount DESC;