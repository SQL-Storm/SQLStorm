WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        COALESCE(NULLIF(u.Location, ''), 'Unknown') AS Location,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore,
        ARRAY_LENGTH(string_to_array(p.Tags, '><'), 1) AS TagCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1  
        AND p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'  
),
PostHistoryStats AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS CloseCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 END) AS ReopenCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 12 THEN 1 END) AS DeleteCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.Score,
    rp.Tags,
    rp.OwnerDisplayName,
    rp.Location,
    rp.RankByScore,
    rp.TagCount,
    phs.CloseCount,
    phs.ReopenCount,
    phs.DeleteCount,
    ub.BadgeCount,
    ub.BadgeNames
FROM 
    RankedPosts rp
LEFT JOIN 
    PostHistoryStats phs ON rp.PostId = phs.PostId
LEFT JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
WHERE 
    rp.RankByScore <= 3  
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate DESC;