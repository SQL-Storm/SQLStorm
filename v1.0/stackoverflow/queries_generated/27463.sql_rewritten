WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        SUM(v.VoteTypeId = 2) AS UpVotes,
        SUM(v.VoteTypeId = 3) AS DownVotes,
        AVG(extract(epoch from (cast('2024-10-01 12:34:56' as timestamp) - COALESCE(c.CreationDate, u.CreationDate))) / 3600)::numeric) AS AveragePostAgeHours,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagsUsed
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.UserId = u.Id
    LEFT JOIN 
        unnest(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '>')) AS t(TagName) ON TRUE
    GROUP BY 
        u.Id, u.DisplayName
), 
PostStatistics AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT p2.Id) AS RelatedPosts,
        MAX(p.Body) AS PostBody, 
        MAX(p.Score) AS PostScore
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostLinks pl ON p.Id = pl.PostId
    LEFT JOIN 
        Posts p2 ON pl.RelatedPostId = p2.Id
    GROUP BY 
        p.Id, p.Title, p.CreationDate
)
SELECT 
    ua.UserId,
    ua.DisplayName,
    ua.TotalPosts,
    ua.TotalComments,
    ua.UpVotes,
    ua.DownVotes,
    ua.AveragePostAgeHours,
    ua.TagsUsed,
    ps.PostId,
    ps.Title,
    ps.CreationDate,
    ps.CommentCount,
    ps.RelatedPosts,
    ps.PostBody,
    ps.PostScore
FROM 
    UserActivity ua
JOIN 
    PostStatistics ps ON ua.TotalPosts > 0
ORDER BY 
    ua.TotalPosts DESC, ua.UpVotes DESC;