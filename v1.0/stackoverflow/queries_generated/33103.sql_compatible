
WITH RecursivePostHistory AS (
    SELECT 
        ph.Id,
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.UserId,
        ph.Comment,
        1 AS Level,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS rn
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    UNION ALL
    SELECT 
        ph.Id,
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.UserId,
        ph.Comment,
        Level + 1,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS rn
    FROM 
        PostHistory ph
    INNER JOIN 
        RecursivePostHistory rph ON ph.PostId = rph.PostId AND ph.CreationDate < rph.CreationDate
)

SELECT 
    p.Id AS PostId,
    p.Title,
    u.DisplayName AS OwnerDisplayName,
    COUNT(DISTINCT rph.Id) AS HistoryCount,
    MAX(CASE WHEN rph.PostHistoryTypeId = 10 THEN rph.CreationDate END) AS LastClosedDate,
    MAX(CASE WHEN rph.PostHistoryTypeId = 11 THEN rph.CreationDate END) AS LastReopenedDate,
    (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVotes,
    (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVotes,
    COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
    COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
    COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges,
    CASE 
        WHEN p.AcceptedAnswerId IS NOT NULL THEN 
            (SELECT Title FROM Posts pa WHERE pa.Id = p.AcceptedAnswerId)
        ELSE 
            'No Accepted Answer'
    END AS AcceptedAnswerTitle,
    CASE 
        WHEN p.LastEditDate IS NOT NULL THEN 
            DATEDIFF(CAST('2024-10-01 12:34:56' AS TIMESTAMP), p.LastEditDate)
        ELSE 
            NULL
    END AS DaysSinceLastEdit
FROM 
    Posts p
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    RecursivePostHistory rph ON p.Id = rph.PostId
LEFT JOIN 
    Badges b ON b.UserId = p.OwnerUserId
WHERE 
    p.CreationDate >= DATEADD(YEAR, -2, CURRENT_TIMESTAMP)
GROUP BY 
    p.Id, p.Title, u.DisplayName
ORDER BY 
    HistoryCount DESC, p.Title ASC;
