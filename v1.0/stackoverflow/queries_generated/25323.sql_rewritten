WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC, p.CreationDate DESC) AS TagRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
        AND p.Score > 0 
),
TopQuestions AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS RelatedTags
    FROM 
        RankedPosts rp
    JOIN 
        Tags t ON POSITION(t.TagName IN rp.Tags) > 0 
    WHERE 
        rp.TagRank <= 5 
    GROUP BY 
        rp.PostId, rp.Title, rp.Body, rp.CreationDate, rp.Score, rp.ViewCount
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvoteCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    tq.PostId,
    tq.Title,
    tq.Body,
    tq.CreationDate,
    tq.Score,
    tq.ViewCount,
    tq.RelatedTags,
    ua.UserId,
    ua.DisplayName,
    ua.BadgeCount,
    ua.UpvoteCount,
    ua.DownvoteCount
FROM 
    TopQuestions tq
JOIN 
    Posts p ON tq.PostId = p.Id
JOIN 
    Users ua ON p.OwnerUserId = ua.Id
WHERE 
    ua.Reputation > 1000 
ORDER BY 
    tq.Score DESC, tq.ViewCount DESC;