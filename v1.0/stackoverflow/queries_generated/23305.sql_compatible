
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM Posts p
    WHERE p.PostTypeId = 1 AND p.Score IS NOT NULL
),
RecentUserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVoteCount
    FROM Users u
    LEFT JOIN Comments c ON u.Id = c.UserId
    LEFT JOIN Votes v ON u.Id = v.UserId AND v.CreationDate >= DATEADD(day, -30, '2024-10-01')
    GROUP BY u.Id, u.DisplayName
),
AggregatedUserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM Badges b
    GROUP BY b.UserId
),
UserPostSummary AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(rp.PostCount, 0) AS TotalPosts,
        COALESCE(uba.GoldBadges, 0) AS GoldBadges,
        COALESCE(uba.SilverBadges, 0) AS SilverBadges,
        COALESCE(uba.BronzeBadges, 0) AS BronzeBadges
    FROM Users u
    LEFT JOIN (
        SELECT 
            OwnerUserId,
            COUNT(*) AS PostCount
        FROM Posts
        WHERE PostTypeId = 1
        GROUP BY OwnerUserId
    ) rp ON u.Id = rp.OwnerUserId
    LEFT JOIN AggregatedUserBadges uba ON u.Id = uba.UserId
)

SELECT 
    u.DisplayName,
    ups.TotalPosts,
    ups.GoldBadges,
    ups.SilverBadges,
    ups.BronzeBadges,
    rua.CommentCount,
    rua.UpVoteCount,
    rua.DownVoteCount,
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount
FROM UserPostSummary ups
JOIN RecentUserActivity rua ON ups.UserId = rua.UserId
LEFT JOIN RankedPosts rp ON ups.UserId = rp.OwnerUserId AND rp.PostRank = 1
WHERE ups.TotalPosts > 0
ORDER BY rua.UpVoteCount DESC, rua.CommentCount DESC, ups.TotalPosts DESC, rp.Score DESC
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;
