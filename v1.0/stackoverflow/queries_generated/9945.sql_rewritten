WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate > cast('2024-10-01' as date) - INTERVAL '30 days'
),
AverageScores AS (
    SELECT 
        PostTypeId,
        AVG(Score) AS AvgScore,
        COUNT(*) AS PostCount
    FROM 
        Posts
    GROUP BY 
        PostTypeId
),
PopularTags AS (
    SELECT 
        unnest(string_to_array(Tags, ',')) AS Tag,
        COUNT(*) AS UsageCount
    FROM 
        Posts
    WHERE 
        Tags IS NOT NULL
    GROUP BY 
        Tag
    ORDER BY 
        UsageCount DESC
    LIMIT 10
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.AnswerCount,
    rp.CommentCount,
    rp.OwnerDisplayName,
    ascores.AvgScore,
    pt.Tag AS PopularTag,
    pt.UsageCount
FROM 
    RankedPosts rp
JOIN 
    AverageScores ascores ON rp.PostTypeId = ascores.PostTypeId
JOIN 
    PopularTags pt ON pt.Tag = ANY(string_to_array(rp.Tags, ','))
WHERE 
    rp.Rank <= 5
ORDER BY 
    rp.PostTypeId, rp.Score DESC;