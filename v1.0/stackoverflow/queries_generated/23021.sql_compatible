
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        COUNT(DISTINCT c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 2) OVER (PARTITION BY p.Id) AS UpVoteCount,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 3) OVER (PARTITION BY p.Id) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.CreationDate >= '2022-01-01' AND 
        p.ViewCount IS NOT NULL
), UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges,
        COUNT(DISTINCT p.Id) AS TotalPosts
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName
), CommentsPerPost AS (
    SELECT 
        p.Id AS PostId,
        COALESCE(ARRAY_AGG(c.Text) FILTER (WHERE c.Text IS NOT NULL), '{}') AS Comments,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    GROUP BY 
        p.Id
)
SELECT 
    ups.UserId,
    ups.DisplayName,
    ups.QuestionCount,
    ups.AnswerCount,
    ups.GoldBadges,
    ups.SilverBadges,
    ups.BronzeBadges,
    pp.PostId,
    pp.Title AS PostTitle,
    pp.CreationDate,
    pp.Score,
    pp.CommentCount,
    pp.UpVoteCount,
    pp.DownVoteCount,
    cpp.Comments,
    CASE 
        WHEN pp.Score > 10 THEN 'High Score'
        WHEN pp.Score BETWEEN 1 AND 10 THEN 'Medium Score'
        ELSE 'Low Score'
    END AS ScoreCategory
FROM 
    UserStats ups
JOIN 
    RankedPosts pp ON pp.OwnerUserId = ups.UserId
LEFT JOIN 
    CommentsPerPost cpp ON cpp.PostId = pp.PostId
WHERE 
    ups.QuestionCount > 0 AND 
    (SELECT COUNT(*) FROM Votes v WHERE v.PostId = pp.PostId AND v.VoteTypeId = 2) > 3
ORDER BY 
    ups.DisplayName, pp.Score DESC;
