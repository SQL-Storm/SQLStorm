
WITH UserVoteSummary AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId IN (2, 6) THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        AVG(COALESCE(p.ViewCount, 0)) AS AvgPostViews
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
PostSummary AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(SUM(CASE WHEN c.Id IS NOT NULL THEN 1 END), 0) AS TotalComments,
        COALESCE(AVG(CASE WHEN v.VoteTypeId = 2 THEN 1 END), 0) AS AvgUpvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate
),
DeletedPostHistory AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS NumberOfHistoryRecords
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (12, 13) 
    GROUP BY 
        ph.PostId
),
CombinedSummary AS (
    SELECT 
        us.UserId,
        us.DisplayName,
        us.TotalUpvotes,
        us.TotalDownvotes,
        p.PostId,
        p.Title,
        p.CreationDate,
        p.TotalComments,
        p.AvgUpvotes,
        COALESCE(dph.NumberOfHistoryRecords, 0) AS TotalDeletedHistory
    FROM 
        UserVoteSummary us
    LEFT JOIN 
        PostSummary p ON us.TotalPosts > 0
    LEFT JOIN 
        DeletedPostHistory dph ON p.PostId = dph.PostId
)
SELECT 
    cs.UserId,
    cs.DisplayName,
    cs.TotalUpvotes,
    cs.TotalDownvotes,
    cs.PostId,
    cs.Title,
    cs.CreationDate,
    cs.TotalComments,
    cs.AvgUpvotes,
    CASE 
        WHEN cs.TotalDeletedHistory > 0 THEN 'Contains Deleted Records'
        ELSE 'No Deleted Records'
    END AS DeletedPostIndicator,
    CASE 
        WHEN cs.TotalDownvotes > cs.TotalUpvotes THEN 'Net Negative Feedback'
        WHEN cs.TotalDownvotes < cs.TotalUpvotes THEN 'Net Positive Feedback'
        ELSE 'Neutral Feedback'
    END AS FeedbackStatus
FROM 
    CombinedSummary cs
WHERE 
    cs.TotalPosts > 0
ORDER BY 
    cs.TotalUpvotes DESC, cs.TotalDownvotes ASC;
