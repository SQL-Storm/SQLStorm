
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        0 AS Level,
        p.CreationDate
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        a.Id AS PostId,
        a.Title,
        a.OwnerUserId,
        rph.Level + 1 AS Level,
        a.CreationDate
    FROM 
        Posts a
    INNER JOIN RecursivePostHierarchy rph ON a.ParentId = rph.PostId
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVoteCount,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVoteCount,
        MAX(ph.CreationDate) AS LastActivityDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        ub.GoldBadges,
        ub.SilverBadges,
        ub.BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
),
PostWithUserStats AS (
    SELECT 
        ps.PostId,
        ps.Title,
        u.DisplayName AS Owner,
        u.Reputation,
        u.GoldBadges,
        u.SilverBadges,
        u.BronzeBadges,
        ps.CommentCount,
        ps.UpVoteCount,
        ps.DownVoteCount,
        ps.LastActivityDate
    FROM 
        PostStatistics ps
    JOIN 
        UserReputation u ON ps.OwnerUserId = u.UserId
)
SELECT 
    pws.*,
    CASE 
        WHEN pws.CommentCount > 10 THEN 'High Interaction'
        WHEN pws.CommentCount BETWEEN 5 AND 10 THEN 'Moderate Interaction'
        ELSE 'Low Interaction'
    END AS InteractionLevel,
    CASE 
        WHEN pws.Reputation > 1000 THEN 'Highly Regarded'
        WHEN pws.Reputation BETWEEN 500 AND 1000 THEN 'Moderately Regarded'
        ELSE 'New User'
    END AS UserStatus
FROM 
    PostWithUserStats pws
LEFT JOIN 
    RecursivePostHierarchy rph ON pws.PostId = rph.PostId
ORDER BY 
    pws.LastActivityDate DESC, pws.UpVoteCount DESC
LIMIT 50;
