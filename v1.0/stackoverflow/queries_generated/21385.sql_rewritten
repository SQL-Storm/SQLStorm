WITH RecursiveBadges AS (
    SELECT Id, UserId, Name, Date, Class, TagBased, 1 AS RecursionDepth
    FROM Badges
    WHERE Class = 1 
    UNION ALL
    SELECT b.Id, b.UserId, b.Name, b.Date, b.Class, b.TagBased, rb.RecursionDepth + 1
    FROM Badges b
    INNER JOIN RecursiveBadges rb ON b.UserId = rb.UserId
    WHERE b.Class < rb.Class 
),
UserStats AS (
    SELECT
        u.Id,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(v.BountyAmount) AS TotalBounty,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY u.Id, u.Reputation
),
BadgeSummary AS (
    SELECT
        r.UserId,
        STRING_AGG(r.Name, ', ') AS GoldBadges,
        COUNT(*) AS TotalGoldBadges
    FROM RecursiveBadges r
    GROUP BY r.UserId
),
FinalStats AS (
    SELECT
        us.Id AS UserId,
        us.Reputation,
        us.PostCount,
        COALESCE(bs.GoldBadges, '') AS GoldBadges,
        us.TotalBounty,
        us.UpVotes,
        us.DownVotes,
        CASE
            WHEN us.UpVotes > us.DownVotes THEN 'Positive'
            WHEN us.UpVotes < us.DownVotes THEN 'Negative'
            ELSE 'Neutral'
        END AS ReputationTrend
    FROM UserStats us
    LEFT JOIN BadgeSummary bs ON us.Id = bs.UserId
)
SELECT
    f.UserId,
    f.Reputation,
    f.PostCount,
    f.GoldBadges,
    f.TotalBounty,
    f.UpVotes,
    f.DownVotes,
    f.ReputationTrend
FROM FinalStats f
WHERE f.PostCount > 0
  AND (f.UpVotes - f.DownVotes) > 5 
  AND EXISTS (
      SELECT 1
      FROM Posts p
      WHERE p.OwnerUserId = f.UserId
        AND (p.Title ILIKE '%performance%' OR p.Body ILIKE '%performance%')
  )
ORDER BY f.Reputation DESC, f.TotalBounty ASC
LIMIT 10;