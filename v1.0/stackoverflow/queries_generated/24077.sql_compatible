
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.PostTypeId,
        p.Score,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= DATEADD(year, -5, '2024-10-01 12:34:56')
),

UserStats AS (
    SELECT 
        u.Id AS UserId,
        SUM(b.Class) AS TotalBadgePoints,
        COUNT(v.Id) AS TotalVotes
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id
),

PostHistoryInfo AS (
    SELECT 
        ph.PostId,
        MAX(CASE 
            WHEN ph.PostHistoryTypeId IN (10, 11) THEN ph.CreationDate 
            ELSE NULL END) AS LastCloseReopenDate,
        COUNT(DISTINCT ph.UserId) AS UniqueEditors,
        JSON_AGG(DISTINCT ph.UserDisplayName) AS EditorNames,
        STRING_AGG(CASE 
            WHEN ph.Comment IS NOT NULL THEN ph.Comment 
            ELSE 'No comment' END, ', ') AS EditorComments
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)

SELECT 
    p.PostId,
    p.Title,
    p.CommentCount,
    u.TotalBadgePoints,
    u.TotalVotes,
    JSON_BUILD_OBJECT(
        'LastCloseOrReopen', phi.LastCloseReopenDate, 
        'UniqueEditors', phi.UniqueEditors,
        'EditorNames', phi.EditorNames,
        'EditorComments', phi.EditorComments
    ) AS PostHistoryDetails
FROM 
    RankedPosts p
JOIN 
    UserStats u ON p.PostId IN (SELECT PostId FROM Posts WHERE OwnerUserId = u.UserId)
LEFT JOIN 
    PostHistoryInfo phi ON p.PostId = phi.PostId
WHERE 
    p.PostRank <= 5 
    AND (u.TotalVotes IS NULL OR u.TotalVotes > 0)
    AND p.CommentCount > 10
ORDER BY 
    p.CreationDate DESC;
