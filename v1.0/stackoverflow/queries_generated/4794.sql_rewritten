WITH UserVoteMetrics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT CASE WHEN p.PostTypeId = 1 THEN p.Id END) AS QuestionCount,
        COUNT(DISTINCT CASE WHEN p.PostTypeId = 2 THEN p.Id END) AS AnswerCount
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    LEFT JOIN Posts p ON v.PostId = p.Id
    GROUP BY u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        UpVotes,
        DownVotes,
        TotalPosts,
        QuestionCount,
        AnswerCount,
        RANK() OVER (ORDER BY UpVotes DESC) AS VoteRank
    FROM UserVoteMetrics
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM Posts p
    LEFT JOIN Tags t ON p.Tags LIKE '%' || t.TagName || '%'
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score
)
SELECT 
    tu.DisplayName,
    tu.UpVotes,
    tu.DownVotes,
    tu.TotalPosts,
    pd.PostId,
    pd.Title,
    pd.CreationDate,
    pd.ViewCount,
    pd.Score,
    CASE 
        WHEN pd.Score > 10 THEN 'High Score'
        WHEN pd.Score BETWEEN 5 AND 10 THEN 'Medium Score'
        ELSE 'Low Score' 
    END AS ScoreCategory,
    STRING_AGG(tg.TagName, ', ') AS Tags
FROM TopUsers tu
LEFT JOIN PostDetails pd ON tu.UserId = pd.OwnerUserId
LEFT JOIN LATERAL (
    SELECT 
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagName
    FROM Tags t
    WHERE pd.Tags LIKE '%' || t.TagName || '%'
) AS tg ON TRUE
WHERE tu.VoteRank <= 10
GROUP BY tu.UserId, tu.DisplayName, tu.UpVotes, tu.DownVotes, tu.TotalPosts, pd.PostId, pd.Title, pd.CreationDate, pd.ViewCount, pd.Score
ORDER BY tu.UpVotes DESC, pd.ViewCount DESC;