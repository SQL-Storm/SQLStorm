
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.ViewCount,
        p.CreationDate,
        p.AnswerCount,
        p.CommentCount,
        p.FavoriteCount,
        u.DisplayName AS AuthorName,
        u.Reputation AS AuthorReputation,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS AuthorPostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS TotalComments
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    WHERE 
        p.PostTypeId = 1 
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        unnest(string_to_array(substring(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS TagName
    FROM 
        Posts p
    WHERE 
        p.Tags IS NOT NULL
),
AggregateData AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.ViewCount,
        rp.CreationDate,
        rp.AnswerCount,
        rp.CommentCount,
        rp.FavoriteCount,
        rp.AuthorName,
        rp.AuthorReputation,
        pt.TagName,
        COUNT(pt.TagName) OVER (PARTITION BY rp.PostId) AS TagFrequency
    FROM 
        RankedPosts rp
    LEFT JOIN 
        PostTags pt ON rp.PostId = pt.PostId
)
SELECT 
    PostId,
    Title,
    Body,
    ViewCount,
    CreationDate,
    AnswerCount,
    CommentCount,
    FavoriteCount,
    AuthorName,
    AuthorReputation,
    ARRAY_AGG(DISTINCT TagName) AS Tags,
    AVG(AuthorReputation) OVER () AS AvgAuthorReputation,
    SUM(TagFrequency) OVER (PARTITION BY PostId) AS TotalTags,
    COUNT(PostId) OVER () AS TotalQuestions
FROM 
    AggregateData
WHERE 
    AnswerCount > 0 
GROUP BY 
    PostId, Title, Body, ViewCount, CreationDate, AnswerCount, CommentCount, FavoriteCount, AuthorName, AuthorReputation
ORDER BY 
    ViewCount DESC, CreationDate DESC
LIMIT 10;
