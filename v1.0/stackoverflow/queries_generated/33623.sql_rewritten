WITH RecursivePostCTE AS (
    SELECT 
        Id, 
        Title, 
        OwnerUserId, 
        CreationDate,
        Score,
        1 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL 
    UNION ALL
    SELECT 
        p.Id, 
        p.Title, 
        p.OwnerUserId, 
        p.CreationDate,
        p.Score,
        c.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostCTE c ON p.ParentId = c.Id 
),  
UserWithBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostVoteSummary AS (
    SELECT 
        p.OwnerUserId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year' 
    GROUP BY 
        p.OwnerUserId
),
FinalSummary AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        ub.BadgeCount,
        ub.GoldBadges,
        ub.SilverBadges,
        ub.BronzeBadges,
        COALESCE(pvs.UpVotes, 0) AS UpVotes,
        COALESCE(pvs.DownVotes, 0) AS DownVotes,
        COUNT(DISTINCT r.Id) AS AnswerCount
    FROM 
        Users u
    LEFT JOIN 
        UserWithBadges ub ON u.Id = ub.UserId
    LEFT JOIN 
        PostVoteSummary pvs ON u.Id = pvs.OwnerUserId
    LEFT JOIN 
        RecursivePostCTE r ON u.Id = r.OwnerUserId
    GROUP BY 
        u.Id, ub.BadgeCount, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges, pvs.UpVotes, pvs.DownVotes
)
SELECT 
    *,
    CASE 
        WHEN Reputation > 100 THEN 'High Reputation'
        WHEN Reputation BETWEEN 50 AND 100 THEN 'Medium Reputation'
        ELSE 'Low Reputation'
    END AS ReputationLevel,
    ROW_NUMBER() OVER (ORDER BY Reputation DESC, AnswerCount DESC) AS Ranking
FROM 
    FinalSummary
WHERE 
    BadgeCount > 0 OR UpVotes > 0
ORDER BY 
    Reputation DESC, AnswerCount DESC;