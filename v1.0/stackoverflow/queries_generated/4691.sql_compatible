
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 YEAR'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.PostTypeId
),
PopularTags AS (
    SELECT 
        UNNEST(REGEXP_SPLIT_TO_ARRAY(Tags, '>')) AS TagName, 
        COUNT(*) AS TagCount
    FROM 
        Posts
    WHERE 
        Tags IS NOT NULL
    GROUP BY 
        TagName
    HAVING 
        COUNT(*) > 5
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
    HAVING 
        SUM(CASE WHEN b.Class IS NOT NULL THEN 1 ELSE 0 END) > 0
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    ut.UserId,
    ut.GoldBadges,
    ut.SilverBadges,
    ut.BronzeBadges,
    pt.TagName,
    pt.TagCount
FROM 
    RankedPosts rp
JOIN 
    UserBadges ut ON ut.UserId = (
        SELECT u.Id 
        FROM Users u 
        WHERE u.UpVotes + u.DownVotes > 1000 
        ORDER BY u.Reputation DESC 
        LIMIT 1
    )
LEFT JOIN 
    PopularTags pt ON pt.TagName IN (
        SELECT UNNEST(REGEXP_SPLIT_TO_ARRAY(rp.Tags, '>')) 
        WHERE rp.Tags IS NOT NULL
    )
WHERE 
    rp.PostRank <= 10 
ORDER BY 
    rp.CreationDate DESC, 
    ut.GoldBadges DESC;
