
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY STRING_AGG(tag.TagName, ',') ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    CROSS JOIN 
        LATERAL STRING_TO_ARRAY(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><') AS tagName
    JOIN 
        Tags tag ON tag.TagName = TRIM(tagName)
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.Tags, p.CreationDate, u.DisplayName, p.Score
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Tags,
        rp.OwnerDisplayName,
        rp.Score
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5  
),
PostWithCommentCounts AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.Tags,
        tp.OwnerDisplayName,
        tp.Score,
        COALESCE(c.CommentCount, 0) AS CommentCount
    FROM 
        TopPosts tp
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments
        GROUP BY 
            PostId
    ) c ON tp.PostId = c.PostId
)
SELECT 
    pwc.PostId,
    pwc.Title,
    pwc.Tags,
    pwc.OwnerDisplayName,
    pwc.Score,
    pwc.CommentCount,
    pt.Name AS PostTypeName
FROM 
    PostWithCommentCounts pwc
JOIN 
    PostTypes pt ON pt.Id = (SELECT p.PostTypeId FROM Posts p WHERE p.Id = pwc.PostId LIMIT 1)
ORDER BY 
    pwc.Score DESC, pwc.CommentCount DESC;
