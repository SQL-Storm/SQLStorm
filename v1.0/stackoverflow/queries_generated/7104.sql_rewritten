WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC, p.Score DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PostTags AS (
    SELECT 
        pt.PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts pt
    JOIN 
        UNNEST(string_to_array(pt.Tags, ',')) AS tagName ON TRUE
    JOIN 
        Tags t ON t.TagName = TRIM(tagName)
    GROUP BY 
        pt.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.ViewCount,
    rp.Score,
    pt.Tags,
    CASE 
        WHEN rp.Score > 10 THEN 'High Engagement'
        WHEN rp.Score BETWEEN 5 AND 10 THEN 'Moderate Engagement'
        ELSE 'Low Engagement'
    END AS EngagementLevel
FROM 
    RankedPosts rp
LEFT JOIN 
    PostTags pt ON rp.PostId = pt.PostId
WHERE 
    rp.rn <= 5
ORDER BY 
    rp.PostTypeId, rp.ViewCount DESC;