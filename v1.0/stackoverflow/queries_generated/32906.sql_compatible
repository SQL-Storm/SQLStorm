
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.AcceptedAnswerId,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.PostTypeId,
        p.AcceptedAnswerId,
        p.ParentId,
        rph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),
PostScores AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        COALESCE(v.UpVotes, 0) AS UpVotes,
        COALESCE(v.DownVotes, 0) AS DownVotes,
        v.Reputation,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.LastActivityDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN (
        SELECT 
            v.PostId,
            SUM(CASE WHEN vt.Name = 'UpMod' THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN vt.Name = 'DownMod' THEN 1 ELSE 0 END) AS DownVotes,
            u.Reputation
        FROM 
            Votes v
        JOIN 
            VoteTypes vt ON v.VoteTypeId = vt.Id
        JOIN 
            Users u ON v.UserId = u.Id
        GROUP BY 
            v.PostId, u.Reputation
    ) AS v ON p.Id = v.PostId
),
RecentPostHistory AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.UserId,
        ph.CreationDate,
        PHT.Name AS HistoryType,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS rn
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes PHT ON ph.PostHistoryTypeId = PHT.Id
)

SELECT 
    rph.PostId,
    rph.Title,
    rph.Level,
    ps.Score,
    ps.UpVotes,
    ps.DownVotes,
    COALESCE(rph2.Title, 'N/A') AS ParentTitle,
    pht.HistoryType,
    pht.CreationDate AS LastHistoryChange,
    u.DisplayName AS OwnerUserName,
    u.Reputation AS OwnerReputation
FROM 
    RecursivePostHierarchy rph
LEFT JOIN 
    PostScores ps ON rph.PostId = ps.Id
LEFT JOIN 
    RecursivePostHierarchy rph2 ON rph.ParentId = rph2.PostId
LEFT JOIN 
    RecentPostHistory pht ON rph.PostId = pht.PostId AND pht.rn = 1
JOIN 
    Users u ON rph.OwnerUserId = u.Id
WHERE 
    (ps.Score + ps.UpVotes - ps.DownVotes) > 50  
    AND ps.rn = 1
ORDER BY 
    rph.Level, ps.Score DESC;
