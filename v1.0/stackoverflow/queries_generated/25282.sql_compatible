
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS tagname ON true
    LEFT JOIN 
        Tags t ON t.TagName = tagname
    WHERE 
        p.PostTypeId IN (1, 2) 
    GROUP BY 
        p.Id, u.DisplayName, p.Body, p.CreationDate, p.ViewCount, p.AnswerCount, p.CommentCount, p.Score
),
TopPosts AS (
    SELECT 
        * 
    FROM 
        RankedPosts 
    WHERE 
        RankScore <= 5 
),
PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS TotalComments
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
PostBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS TotalBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(pb.TotalBadges, 0) AS BadgeCount,
        COALESCE(pc.TotalComments, 0) AS CommentCount
    FROM 
        Users u
    LEFT JOIN 
        PostBadges pb ON u.Id = pb.UserId
    LEFT JOIN 
        PostComments pc ON u.Id = pc.PostId
)
SELECT 
    tp.Title,
    tp.OwnerDisplayName,
    tp.ViewCount,
    tp.AnswerCount,
    tp.CommentCount,
    tp.Score,
    tp.Tags,
    ur.Reputation,
    ur.BadgeCount,
    ur.CommentCount
FROM 
    TopPosts tp
JOIN 
    UserReputation ur ON tp.OwnerDisplayName = ur.UserId
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC;
