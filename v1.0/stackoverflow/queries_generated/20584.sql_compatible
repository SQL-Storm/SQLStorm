
WITH UserReputation AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COALESCE(SUM(V.BountyAmount), 0) AS TotalBounty,
        U.Reputation,
        ROW_NUMBER() OVER (ORDER BY U.Reputation DESC) AS ReputationRank
    FROM 
        Users U
    LEFT JOIN 
        Votes V ON U.Id = V.UserId AND V.VoteTypeId = 8 
    GROUP BY 
        U.Id, U.DisplayName, U.Reputation
),
PostStats AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount,
        COALESCE(SUM(V.Score), 0) AS TotalVotes,
        (SELECT COUNT(*) FROM Posts WHERE ParentId = P.Id) AS AnswerCount
    FROM 
        Posts P
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    WHERE 
        P.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 month'
    GROUP BY 
        P.Id, P.Title
),
ClosedPosts AS (
    SELECT 
        PH.PostId,
        COUNT(*) AS CloseCount,
        STRING_AGG(CR.Name, ', ' ORDER BY CR.Name) AS CloseReasons
    FROM 
        PostHistory PH
    JOIN 
        CloseReasonTypes CR ON CAST(PH.Comment AS INT) = CR.Id 
    WHERE 
        PH.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        PH.PostId
),
TopPosts AS (
    SELECT 
        PS.PostId,
        PS.Title,
        PS.CommentCount,
        PS.TotalVotes,
        PS.AnswerCount,
        COALESCE(CP.CloseCount, 0) AS CloseCount,
        CP.CloseReasons
    FROM 
        PostStats PS
    LEFT JOIN 
        ClosedPosts CP ON PS.PostId = CP.PostId
    ORDER BY 
        PS.TotalVotes DESC
    LIMIT 10
)
SELECT 
    U.DisplayName,
    U.Reputation,
    U.TotalBounty,
    TP.Title AS TopPostTitle,
    TP.CommentCount,
    TP.TotalVotes,
    TP.AnswerCount,
    TP.CloseCount,
    TP.CloseReasons,
    CASE 
        WHEN U.Reputation > 1000 THEN 'High Reputation'
        WHEN U.Reputation BETWEEN 500 AND 1000 THEN 'Medium Reputation'
        ELSE 'Low Reputation'
    END AS ReputationCategory,
    CASE 
        WHEN CTE.ReputationRank IS NOT NULL THEN 'Active' 
        ELSE 'Inactive'
    END AS UserStatus
FROM 
    UserReputation U
LEFT JOIN 
    TopPosts TP ON U.UserId = TP.PostId 
LEFT JOIN 
    (
        SELECT 
            UserId, 
            ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS ReputationRank
        FROM 
            Users
    ) AS CTE ON U.Id = CTE.UserId
WHERE 
    U.TotalBounty > 100
ORDER BY 
    U.Reputation DESC;
