
WITH RecursivePostTree AS (
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.ParentId,
        0 AS Depth
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.ParentId,
        pt.Depth + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostTree pt ON p.ParentId = pt.Id
),
PostVoteCounts AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p
    CROSS JOIN 
        UNNEST(string_to_array(p.Tags, ',')) AS tag_name 
    JOIN 
        Tags t ON t.TagName = TRIM(tag_name)
    GROUP BY 
        p.Id
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.DisplayName
    FROM 
        Users u
)
SELECT 
    p.Id AS PostId,
    p.Title,
    p.Depth,
    COALESCE(pc.UpVotes, 0) AS UpVotes,
    COALESCE(pc.DownVotes, 0) AS DownVotes,
    pt.Tags,
    ur.DisplayName AS OwnerDisplayName,
    ur.Reputation AS OwnerReputation,
    CASE 
        WHEN COALESCE(pc.UpVotes, 0) > COALESCE(pc.DownVotes, 0) THEN 'Positive'
        WHEN COALESCE(pc.UpVotes, 0) < COALESCE(pc.DownVotes, 0) THEN 'Negative'
        ELSE 'Neutral'
    END AS VoteSentiment,
    p.CreationDate
FROM 
    RecursivePostTree p
LEFT JOIN 
    PostVoteCounts pc ON p.Id = pc.PostId
LEFT JOIN 
    PostTags pt ON p.Id = pt.PostId
JOIN 
    UserReputation ur ON p.OwnerUserId = ur.UserId
WHERE 
    (p.Depth = 0 OR p.Depth >= 1)  
ORDER BY 
    p.CreationDate DESC;
