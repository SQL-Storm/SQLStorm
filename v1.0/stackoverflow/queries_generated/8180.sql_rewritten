SELECT 
    p.Id AS PostId,
    p.Title,
    u.DisplayName AS OwnerDisplayName,
    COUNT(c.Id) AS CommentCount,
    AVG(vote.Score) AS AverageVoteScore,
    STRING_AGG(t.TagName, ', ') AS Tags,
    COUNT(DISTINCT b.Id) AS BadgeCount,
    MAX(ph.CreationDate) AS LastEditDate,
    COUNT(DISTINCT ph.UserId) AS UniqueEditors,
    SUM(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS CloseCount,
    SUM(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 ELSE 0 END) AS ReopenCount
FROM 
    Posts p
JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    Comments c ON p.Id = c.PostId
LEFT JOIN 
    Votes v ON p.Id = v.PostId
LEFT JOIN 
    Badges b ON u.Id = b.UserId
LEFT JOIN 
    PostHistory ph ON p.Id = ph.PostId
LEFT JOIN 
    STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '>') AS tag_array 
    ON TRUE 
LEFT JOIN 
    Tags t ON t.TagName = tag_array
WHERE 
    p.CreationDate BETWEEN cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' AND cast('2024-10-01 12:34:56' as timestamp)
GROUP BY 
    p.Id, u.DisplayName
HAVING 
    COUNT(c.Id) > 5 AND AVG(vote.Score) > 0
ORDER BY 
    CommentCount DESC, AverageVoteScore DESC
LIMIT 100;