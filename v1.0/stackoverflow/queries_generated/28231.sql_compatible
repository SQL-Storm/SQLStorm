
WITH UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS TotalPosts,
        COUNT(CASE WHEN p.PostTypeId = 1 THEN 1 END) AS TotalQuestions,
        COUNT(CASE WHEN p.PostTypeId = 2 THEN 1 END) AS TotalAnswers,
        SUM(p.Score) AS TotalScore,
        AVG(EXTRACT(EPOCH FROM (p.LastActivityDate - p.CreationDate))) AS AvgPostLifetime
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId
    WHERE 
        u.Reputation > 100
    GROUP BY 
        u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        TotalPosts,
        TotalQuestions,
        TotalAnswers,
        TotalScore,
        AvgPostLifetime,
        RANK() OVER (ORDER BY TotalScore DESC) AS ScoreRank,
        RANK() OVER (ORDER BY TotalPosts DESC) AS PostRank
    FROM 
        UserPostStats
),
UserBadges AS (
    SELECT 
        ub.UserId,
        COUNT(b.Id) AS TotalBadges,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Badges b
    JOIN 
        Users ub ON b.UserId = ub.Id
    WHERE 
        ub.Reputation > 100
    GROUP BY 
        ub.UserId
),
FinalResults AS (
    SELECT 
        u.DisplayName,
        u.TotalPosts,
        u.TotalQuestions,
        u.TotalAnswers,
        u.TotalScore,
        u.AvgPostLifetime,
        COALESCE(b.TotalBadges, 0) AS TotalBadges,
        COALESCE(b.HighestBadgeClass, 0) AS HighestBadgeClass,
        u.ScoreRank,
        u.PostRank
    FROM 
        TopUsers u
    LEFT JOIN 
        UserBadges b ON u.UserId = b.UserId
)
SELECT 
    DisplayName,
    TotalPosts,
    TotalQuestions,
    TotalAnswers,
    TotalScore,
    ROUND(AvgPostLifetime / 3600, 2) AS AvgPostLifetimeInHours, 
    TotalBadges,
    HighestBadgeClass,
    ScoreRank,
    PostRank
FROM 
    FinalResults
WHERE 
    ScoreRank <= 10 OR PostRank <= 10
ORDER BY 
    TotalScore DESC, TotalPosts DESC;
