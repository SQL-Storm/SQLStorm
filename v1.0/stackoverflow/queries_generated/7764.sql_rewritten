WITH UserBadgeCounts AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName
),
PopularPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(v.VoteTypeId = 2) AS UpvoteCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id, p.Title
    HAVING COUNT(c.Id) > 5 AND SUM(v.VoteTypeId = 2) > 10
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        p.Title,
        COUNT(ph.Id) AS EditCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM PostHistory ph
    JOIN Posts p ON ph.PostId = p.Id
    WHERE ph.PostHistoryTypeId IN (4, 5, 6)
    GROUP BY ph.PostId, p.Title
)
SELECT 
    u.UserId,
    u.DisplayName,
    ub.BadgeCount,
    pp.PostId,
    pp.Title AS PopularPostTitle,
    pp.CommentCount,
    pp.UpvoteCount,
    phs.EditCount,
    phs.LastEditDate
FROM UserBadgeCounts ub
JOIN Users u ON u.Id = ub.UserId
JOIN PopularPosts pp ON pp.CommentCount > 5
LEFT JOIN PostHistorySummary phs ON pp.PostId = phs.PostId
ORDER BY ub.BadgeCount DESC, pp.UpvoteCount DESC;