
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (2, 4) 
    LEFT JOIN 
        UNNEST(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><')) AS tagName ON tagName IS NOT NULL
    LEFT JOIN 
        Tags t ON t.TagName = tagName
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.ViewCount, p.OwnerUserId
),
PopularUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(p.ViewCount) AS TotalViews,
        SUM(p.UpVotes) AS TotalUpVotes,
        COUNT(p.Id) AS QuestionCount
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        u.Id, u.DisplayName
    HAVING 
        COUNT(p.Id) > 2 AND SUM(p.UpVotes) > 10
    ORDER BY 
        TotalViews DESC
    LIMIT 10
)
SELECT 
    r.PostId,
    r.Title,
    r.ViewCount,
    r.CommentCount,
    r.VoteCount,
    r.Tags,
    u.DisplayName AS OwnerName,
    u.Reputation,
    u.CreationDate AS UserCreationDate,
    r.CreationDate AS PostCreationDate
FROM 
    RankedPosts r
JOIN 
    Users u ON r.PostRank = 1 AND r.PostId IN (SELECT PostId FROM Posts WHERE OwnerUserId = u.Id)
WHERE 
    EXISTS (SELECT 1 FROM PopularUsers pu WHERE pu.UserId = u.Id)
ORDER BY 
    r.ViewCount DESC, r.CreationDate DESC
LIMIT 50;
