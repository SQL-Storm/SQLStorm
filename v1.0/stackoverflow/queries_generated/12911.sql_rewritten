SELECT
    p.Id AS PostId,
    p.Title,
    p.CreationDate,
    p.Score,
    p.ViewCount,
    p.AnswerCount,
    p.CommentCount,
    p.FavoriteCount,
    u.DisplayName AS OwnerDisplayName,
    COUNT(c.Id) AS TotalComments,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownVotes,
    COUNT(b.Id) AS TotalBadges,
    TAGS.TagName,
    TAGS.Count AS TagCount
FROM
    Posts p
LEFT JOIN
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN
    Comments c ON p.Id = c.PostId
LEFT JOIN
    Votes v ON p.Id = v.PostId
LEFT JOIN
    Badges b ON u.Id = b.UserId
LEFT JOIN
    (SELECT
        PostId,
        STRING_AGG(TagName, ', ') AS TagName,
        COUNT(*) AS Count
     FROM
        Tags t
     JOIN
        (SELECT UNNEST(string_to_array(p.Tags, '<>')) AS TagName, p.Id AS PostId FROM Posts p) AS TagResults
     ON t.TagName = TagResults.TagName
     GROUP BY PostId) AS TAGS ON p.Id = TAGS.PostId
GROUP BY
    p.Id, u.DisplayName, TAGS.TagName, TAGS.Count
ORDER BY
    p.CreationDate DESC
LIMIT 100;