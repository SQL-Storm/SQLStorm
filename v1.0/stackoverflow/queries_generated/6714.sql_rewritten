WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(DISTINCT c.Id) AS TotalComments,
        COUNT(DISTINCT v.Id) AS TotalVotes,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, u.DisplayName
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.OwnerDisplayName,
        rp.TotalComments,
        rp.TotalVotes
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 10
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Score,
    tp.ViewCount,
    tp.TotalComments,
    tp.TotalVotes,
    COALESCE((SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
               FROM Tags t 
               WHERE t.WikiPostId IN (SELECT pt.Id FROM Posts pt WHERE pt.Id = tp.PostId)), 'No Tags') AS Tags,
    COALESCE((SELECT ARRAY_AGG(DISTINCT bh.Name ORDER BY bh.Date DESC)
               FROM Badges bh 
               JOIN Users u ON bh.UserId = u.Id 
               WHERE u.Id = (SELECT OwnerUserId FROM Posts WHERE Id = tp.PostId)), 
               ARRAY['No Badges']) AS UserBadges
FROM 
    TopPosts tp
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC;