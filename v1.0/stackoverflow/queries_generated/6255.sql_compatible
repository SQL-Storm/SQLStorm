
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        ROW_NUMBER() OVER (ORDER BY p.ViewCount DESC) AS ViewRank
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Badges b ON p.OwnerUserId = b.UserId
    WHERE p.CreationDate >= timestamp '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount
),
PostStatistics AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.UpVotes,
        rp.DownVotes,
        rp.CommentCount,
        bp.UserId AS OwnerId,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation
    FROM RankedPosts rp
    JOIN Posts p ON rp.PostId = p.Id
    JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN Badges bp ON bp.UserId = p.OwnerUserId
    WHERE rp.ViewRank <= 10
)
SELECT 
    ps.Title,
    ps.ViewCount,
    ps.UpVotes,
    ps.DownVotes,
    ps.CommentCount,
    ps.OwnerDisplayName,
    ps.OwnerReputation,
    JSON_AGG(DISTINCT b.Name) AS BadgeNames
FROM PostStatistics ps
LEFT JOIN Badges b ON ps.OwnerId = b.UserId
GROUP BY ps.Title, ps.ViewCount, ps.UpVotes, ps.DownVotes, ps.CommentCount, ps.OwnerDisplayName, ps.OwnerReputation
ORDER BY ps.ViewCount DESC;
