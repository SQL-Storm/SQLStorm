
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Body,
        p.Tags,
        p.Score,
        u.DisplayName AS Author,
        ROW_NUMBER() OVER (PARTITION BY STRING_AGG(t.TagName, ',') ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    JOIN 
        Tags t ON t.Id IN (SELECT UNNEST(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><'))::int)
    WHERE 
        p.PostTypeId = 1 AND  
        p.Score > 0  
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Body, p.Tags, p.Score, u.DisplayName
),

TopUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        SUM(p.Score) AS TotalScore,
        COUNT(p.Id) AS QuestionCount
    FROM 
        Users u
    JOIN 
        Posts p ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        u.Id, u.DisplayName
    HAVING 
        COUNT(p.Id) > 10  
    ORDER BY 
        TotalScore DESC
    LIMIT 5
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Author,
    rp.Rank,
    tu.DisplayName AS TopUser,
    COUNT(c.Id) AS CommentCount,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    RankedPosts rp
JOIN 
    Comments c ON c.PostId = rp.PostId
JOIN 
    Votes v ON v.PostId = rp.PostId
JOIN 
    TopUsers tu ON tu.Id = rp.PostId
LEFT JOIN 
    Tags t ON t.Id IN (SELECT UNNEST(string_to_array(SUBSTRING(rp.Tags FROM 2 FOR LENGTH(rp.Tags) - 2), '><'))::int)
GROUP BY 
    rp.PostId, rp.Title, rp.CreationDate, rp.Author, rp.Rank, tu.DisplayName
HAVING 
    rp.Rank <= 3  
ORDER BY 
    rp.Rank, rp.Score DESC;
