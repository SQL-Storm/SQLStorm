
WITH PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS LatestEdit
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        MAX(u.Reputation) AS MaxReputation,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
FilteredPosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CommentCount,
        ps.Upvotes,
        ps.Downvotes,
        us.MaxReputation,
        us.BadgeCount
    FROM 
        PostStatistics ps
    JOIN 
        UserStatistics us ON ps.LatestEdit = 1 
    WHERE 
        ps.CommentCount > 5 AND us.MaxReputation > 1000
)
SELECT 
    fp.Title,
    fp.CommentCount,
    fp.Upvotes,
    fp.Downvotes,
    COALESCE(fp.MaxReputation, 0) AS UserMaxReputation,
    COALESCE(fp.BadgeCount, 0) AS UserBadgeCount,
    CASE 
        WHEN fp.Upvotes > fp.Downvotes THEN 'Positive'
        WHEN fp.Upvotes < fp.Downvotes THEN 'Negative'
        ELSE 'Neutral'
    END AS VoteSentiment
FROM 
    FilteredPosts fp
ORDER BY 
    fp.Upvotes DESC, 
    fp.CommentCount DESC;
