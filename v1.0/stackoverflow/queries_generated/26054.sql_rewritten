WITH PostTagCounts AS (
    SELECT 
        p.Id AS PostId,
        COUNT(DISTINCT unnest(string_to_array(p.Tags, '>'))) AS TagCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id
),
RecentPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        pt.Name AS PostTypeName,
        tagCounts.TagCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN 
        PostTagCounts tagCounts ON p.Id = tagCounts.PostId
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'  
)
SELECT 
    r.PostId,
    r.Title,
    r.Body,
    r.CreationDate,
    r.OwnerDisplayName,
    r.PostTypeName,
    r.TagCount,
    COALESCE(c.CommentCount, 0) AS CommentCount,
    COALESCE(v.UpVoteCount, 0) AS UpVoteCount,
    COALESCE(b.BadgeCount, 0) AS BadgeCount
FROM 
    RecentPosts r
LEFT JOIN (
    SELECT 
        PostId,
        COUNT(*) AS CommentCount
    FROM 
        Comments
    GROUP BY 
        PostId
) c ON r.Id = c.PostId
LEFT JOIN (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount
    FROM 
        Votes
    GROUP BY 
        PostId
) v ON r.Id = v.PostId
LEFT JOIN (
    SELECT 
        UserId,
        COUNT(*) AS BadgeCount
    FROM 
        Badges
    GROUP BY 
        UserId
) b ON r.OwnerDisplayName = b.UserId
ORDER BY 
    r.CreationDate DESC
LIMIT 50;