
WITH RecursivePostHierarchy AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.AcceptedAnswerId,
        p.ParentId,
        p.CreationDate,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.PostTypeId,
        p.AcceptedAnswerId,
        p.ParentId,
        p.CreationDate,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
    WHERE 
        p.PostTypeId = 2 
),
VoteSummary AS (
    
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
PostStats AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(vs.UpVotes, 0) AS UpVotes,
        COALESCE(vs.DownVotes, 0) AS DownVotes,
        COUNT(c.Id) AS CommentCount,
        CASE 
            WHEN p.PostTypeId = 1 THEN COUNT(DISTINCT a.Id) 
            ELSE 0 
        END AS AnswerCount
    FROM 
        Posts p
    LEFT JOIN 
        VoteSummary vs ON p.Id = vs.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId 
    GROUP BY 
        p.Id, p.Title, p.CreationDate
),
PostHistorySummary AS (
    
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS CloseCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 END) AS ReopenCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)
SELECT 
    p.Id,
    p.Title,
    p.CreationDate,
    ps.UpVotes,
    ps.DownVotes,
    ps.CommentCount,
    ps.AnswerCount,
    COALESCE(phs.CloseCount, 0) AS CloseCount,
    COALESCE(phs.ReopenCount, 0) AS ReopenCount,
    CASE 
        WHEN rh.PostId IS NOT NULL THEN 'Has Answers'
        ELSE 'No Answers'
    END AS Status
FROM 
    Posts p
LEFT JOIN 
    PostStats ps ON p.Id = ps.PostId
LEFT JOIN 
    PostHistorySummary phs ON p.Id = phs.PostId
LEFT JOIN 
    RecursivePostHierarchy rh ON p.Id = rh.ParentId 
WHERE 
    p.CreationDate >= CURRENT_DATE - INTERVAL '1 year'
ORDER BY 
    ps.UpVotes DESC, ps.CommentCount DESC;
