
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.AnswerCount,
        p.CommentCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' AND
        p.PostTypeId IN (1, 2) 
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Score,
        rp.AnswerCount,
        rp.CommentCount,
        rp.OwnerDisplayName
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 10
)
SELECT 
    tp.Title,
    tp.CreationDate,
    tp.ViewCount,
    tp.Score,
    COALESCE(ac.AcceptedCount, 0) AS AcceptedAnswerCount,
    COALESCE(c.CommentCount, 0) AS TotalCommentCount,
    COALESCE(CAST(badgeCounts AS JSON), '{}'::JSON) AS BadgeStats
FROM 
    TopPosts tp
LEFT JOIN (
    SELECT 
        p.AcceptedAnswerId, 
        COUNT(*) AS AcceptedCount
    FROM 
        Posts p
    WHERE 
        p.AcceptedAnswerId IS NOT NULL
    GROUP BY 
        p.AcceptedAnswerId
) ac ON tp.PostId = ac.AcceptedAnswerId
LEFT JOIN (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount
    FROM 
        Comments c
    GROUP BY 
        c.PostId
) c ON tp.PostId = c.PostId
LEFT JOIN (
    SELECT 
        b.UserId,
        JSON_AGG(b.Name) AS badgeCounts
    FROM 
        Badges b
    GROUP BY 
        b.UserId
) badge ON tp.OwnerDisplayName = badge.UserId
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC;
