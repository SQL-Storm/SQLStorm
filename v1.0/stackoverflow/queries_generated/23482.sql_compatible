
WITH RankedUsers AS (
    SELECT 
        U.Id,
        U.DisplayName,
        U.Reputation,
        U.CreationDate,
        ROW_NUMBER() OVER (ORDER BY U.Reputation DESC) AS UserRank
    FROM 
        Users U
    WHERE 
        U.Reputation > (SELECT AVG(Reputation) FROM Users)
),
UserBadges AS (
    SELECT 
        B.UserId,
        COUNT(*) AS BadgeCount,
        STRING_AGG(B.Name, ', ') AS BadgeNames
    FROM 
        Badges B
    GROUP BY 
        B.UserId
),
RecentPosts AS (
    SELECT 
        P.Id AS PostId,
        P.OwnerUserId,
        P.Score,
        P.ViewCount,
        P.CreationDate,
        P.Title,
        P.Tags,
        (
            SELECT COUNT(*)
            FROM Comments C
            WHERE C.PostId = P.Id
        ) AS CommentCount
    FROM 
        Posts P
    WHERE 
        P.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days'
),
AggregatedPostData AS (
    SELECT 
        UP.OwnerUserId,
        SUM(UP.Score) AS TotalScore,
        SUM(UP.ViewCount) AS TotalViews,
        SUM(UP.CommentCount) AS TotalComments
    FROM 
        RecentPosts UP
    GROUP BY 
        UP.OwnerUserId
),
UserStats AS (
    SELECT 
        RU.DisplayName,
        RU.Reputation,
        COALESCE(APD.TotalScore, 0) AS TotalScore,
        COALESCE(APD.TotalViews, 0) AS TotalViews,
        COALESCE(APD.TotalComments, 0) AS TotalComments,
        COALESCE(UB.BadgeCount, 0) AS BadgeCount,
        RU.UserRank
    FROM 
        RankedUsers RU
    LEFT JOIN 
        AggregatedPostData APD ON RU.Id = APD.OwnerUserId
    LEFT JOIN 
        UserBadges UB ON RU.Id = UB.UserId
)
SELECT 
    U.DisplayName,
    U.Reputation,
    U.TotalScore,
    U.TotalViews,
    U.TotalComments,
    U.BadgeCount,
    (CASE 
        WHEN U.BadgeCount >= 10 THEN 'Expert'
        WHEN U.BadgeCount BETWEEN 5 AND 9 THEN 'Intermediate'
        ELSE 'Novice'
     END) AS UserLevel
FROM 
    UserStats U
WHERE 
    EXISTS (SELECT 1 
            FROM Posts P 
            WHERE P.OwnerUserId = U.Id 
              AND P.Score > (SELECT AVG(P2.Score) FROM Posts P2 WHERE P2.OwnerUserId = U.Id))
ORDER BY 
    U.TotalScore DESC, 
    U.BadgeCount DESC;
