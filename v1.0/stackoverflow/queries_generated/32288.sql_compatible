
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        0 AS Depth
    FROM Posts p
    WHERE p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        r.Depth + 1
    FROM Posts p
    JOIN RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostVoteSummary AS (
    SELECT 
        p.Id AS PostId,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes,
        COUNT(v.Id) AS TotalVotes
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id
),
PostStatistics AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        ps.Upvotes,
        ps.Downvotes,
        ps.TotalVotes,
        DENSE_RANK() OVER (ORDER BY ps.Upvotes DESC) AS RankByUpvotes,
        DENSE_RANK() OVER (ORDER BY ps.TotalVotes DESC) AS RankByTotalVotes,
        COALESCE(CAST(p.Body AS CHAR(255)), 'No Content') AS BodySnippet
    FROM Posts p
    JOIN PostVoteSummary ps ON p.Id = ps.PostId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
),
UserTopPosts AS (
    SELECT 
        u.Id AS UserId,
        ps.Title,
        ps.Upvotes,
        ps.Downvotes,
        ps.RankByUpvotes,
        ps.RankByTotalVotes
    FROM Users u
    JOIN Posts p ON u.Id = p.OwnerUserId
    JOIN PostStatistics ps ON p.Id = ps.Id
    WHERE ps.RankByTotalVotes <= 10  
),
FinalReport AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        ub.BadgeCount,
        COUNT(tp.Title) AS TopPostCount,
        STRING_AGG(tp.Title, ', ') AS TopPosts
    FROM Users u
    LEFT JOIN UserBadges ub ON u.Id = ub.UserId
    LEFT JOIN UserTopPosts tp ON u.Id = tp.UserId
    GROUP BY u.Id, u.DisplayName, ub.BadgeCount
)
SELECT 
    fr.UserId,
    fr.DisplayName,
    fr.BadgeCount,
    fr.TopPostCount,
    fr.TopPosts,
    prh.Depth AS PostHierarchyDepth,
    STRING_AGG(prh.Title, ' -> ') AS PostHierarchyTitles
FROM FinalReport fr
LEFT JOIN RecursivePostHierarchy prh ON prh.PostId IN (
    SELECT p.Id 
    FROM Posts p 
    WHERE p.OwnerUserId = fr.UserId
)
GROUP BY fr.UserId, fr.DisplayName, fr.BadgeCount, prh.Depth
ORDER BY fr.TopPostCount DESC, fr.BadgeCount DESC;
