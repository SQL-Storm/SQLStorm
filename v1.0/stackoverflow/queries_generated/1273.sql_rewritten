WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        SUM(v.VoteTypeId = 2)::int AS UpVotes,
        SUM(v.VoteTypeId = 3)::int AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
)
SELECT 
    u.Id AS UserId,
    u.DisplayName,
    COUNT(rp.PostId) AS PostCount,
    SUM(rp.CommentCount) AS TotalComments,
    SUM(rp.UpVotes) AS TotalUpVotes,
    SUM(rp.DownVotes) AS TotalDownVotes,
    CASE 
        WHEN SUM(rp.UpVotes) IS NOT NULL AND SUM(rp.DownVotes) IS NOT NULL THEN 
            (SUM(rp.UpVotes)::float / NULLIF(SUM(rp.DownVotes), 0)) * 100
        ELSE 0
    END AS VoteRatio,
    MAX(rp.CreationDate) AS LastPostDate
FROM 
    Users u
LEFT JOIN 
    RankedPosts rp ON u.Id = rp.OwnerUserId
WHERE 
    u.Reputation >= 100
GROUP BY 
    u.Id, u.DisplayName
HAVING 
    COUNT(rp.PostId) > 0
ORDER BY 
    VoteRatio DESC
LIMIT 10;