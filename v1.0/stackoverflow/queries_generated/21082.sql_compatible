
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        MAX(v.CreationDate) OVER (PARTITION BY p.Id) AS LastVoteDate,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        unnest(string_to_array(p.Tags, ',')) AS tag ON TRUE
    LEFT JOIN 
        Tags t ON t.TagName = TRIM(tag)
    WHERE 
        p.CreationDate > (CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year')
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.Score, p.CreationDate
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.CreationDate,
        rp.RankScore,
        rp.CommentCount,
        rp.LastVoteDate,
        rp.Tags
    FROM 
        RankedPosts rp
    WHERE 
        rp.RankScore <= 5 
        AND rp.ViewCount > 100
        AND (rp.CommentCount IS NULL OR rp.CommentCount < 5)
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(u.UpVotes - u.DownVotes) AS NetVotes
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName
    HAVING 
        SUM(u.UpVotes - u.DownVotes) > 10
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.ViewCount,
    fp.Score,
    fp.CreationDate,
    u.UserId,
    u.DisplayName,
    u.BadgeCount,
    u.NetVotes,
    COALESCE(fp.LastVoteDate, 'No Votes Yet') AS VoteStatus,
    CASE 
        WHEN fp.Tags IS NOT NULL THEN 'Tags exist: ' || fp.Tags 
        ELSE 'No Tags Associated'
    END AS TagStatus
FROM 
    FilteredPosts fp
JOIN 
    Posts p ON fp.PostId = p.Id
JOIN 
    TopUsers u ON u.UserId = p.OwnerUserId
WHERE 
    (p.CreationDate BETWEEN '2022-01-01' AND CAST('2024-10-01 12:34:56' AS timestamp))
    OR (EXTRACT(MONTH FROM p.CreationDate) = 2 AND EXTRACT(DAY FROM p.CreationDate) = 29)
ORDER BY 
    fp.Score DESC,
    u.NetVotes ASC;
