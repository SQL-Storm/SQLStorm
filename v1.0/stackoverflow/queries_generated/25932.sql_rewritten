WITH PostTagCounts AS (
    SELECT 
        p.Id AS PostId,
        COUNT(DISTINCT pt.Id) AS TagCount
    FROM 
        Posts p
    LEFT JOIN 
        LATERAL string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><') AS tag ON true
    LEFT JOIN 
        Tags pt ON pt.TagName = tag
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        p.Id
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS QuestionCount,
        SUM(COALESCE(b.Class, 0)) AS TotalBadgeClass
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.Reputation
),
TagAnalysis AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(pc.TagCount) AS TotalTagCount
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'
    JOIN 
        PostTagCounts pc ON pc.PostId = p.Id
    GROUP BY 
        t.TagName
)
SELECT 
    u.DisplayName,
    u.Reputation AS UserReputation,
    uc.QuestionCount,
    tb.TagName,
    tb.PostCount,
    tb.TotalTagCount,
    (SELECT COUNT(*) FROM Votes v WHERE v.UserId = u.Id) AS TotalVotes
FROM 
    Users u
JOIN 
    UserReputation uc ON u.Id = uc.UserId
JOIN 
    TagAnalysis tb ON tb.PostCount > 10
WHERE 
    u.LastAccessDate > cast('2024-10-01 12:34:56' as timestamp) - interval '1 year'
ORDER BY 
    UserReputation DESC, tb.PostCount DESC;