
WITH TaggedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Tags,
        t.TagName,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        COUNT(DISTINCT v.Id) AS VoteCount
    FROM 
        Posts p
    JOIN 
        Tags t ON t.Id IN (SELECT unnest(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags)-2), '><'))::integer)
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Posts a ON a.ParentId = p.Id AND a.PostTypeId = 2
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.Tags, t.TagName
),
AggregatedTags AS (
    SELECT 
        TagName,
        SUM(CommentCount) AS TotalComments,
        SUM(AnswerCount) AS TotalAnswers,
        SUM(VoteCount) AS TotalVotes
    FROM 
        TaggedPosts
    GROUP BY 
        TagName
),
TopTags AS (
    SELECT 
        TagName,
        TotalComments,
        TotalAnswers,
        TotalVotes,
        ROW_NUMBER() OVER (ORDER BY TotalVotes DESC) AS Rank
    FROM 
        AggregatedTags
)
SELECT 
    TagName,
    TotalComments,
    TotalAnswers,
    TotalVotes,
    Rank
FROM 
    TopTags
WHERE 
    Rank <= 10
ORDER BY 
    Rank;
