WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.OwnerUserId,
        0 AS Level,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        COALESCE(parent.Title, 'N/A') AS ParentTitle
    FROM 
        Posts p
    LEFT JOIN 
        Posts parent ON p.ParentId = parent.Id
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        p.Id,
        p.ParentId,
        p.OwnerUserId,
        Level + 1,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        COALESCE(parent.Title, 'N/A') 
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),

PostStats AS (
    SELECT 
        p.Id,
        p.Title,
        p.LastActivityDate,
        CASE 
            WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Accepted'
            ELSE 'Not Accepted'
        END AS AnswerStatus,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
         FROM Tags t 
         WHERE t.Id IN (SELECT unnest(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'))::int))
        ) AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.LastActivityDate DESC) AS UserPostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY
        p.Id, p.Title, p.LastActivityDate, p.AcceptedAnswerId
)

SELECT 
    rph.PostId,
    rph.Title,
    rph.ParentTitle,
    ps.AnswerStatus,
    ps.CommentCount,
    ps.UpVoteCount,
    ps.DownVoteCount,
    ps.Tags,
    ps.UserPostRank
FROM 
    RecursivePostHierarchy rph
JOIN 
    PostStats ps ON rph.PostId = ps.Id
WHERE 
    rph.Level = 0 AND 
    (ps.CommentCount > 0 OR ps.UpVoteCount > 10)
ORDER BY 
    rph.LastActivityDate DESC
LIMIT 100;