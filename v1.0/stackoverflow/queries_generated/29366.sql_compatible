
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Tags,
        COALESCE(SUBSTRING_INDEX(p.Body, ' ', 50), 'No content') AS Preview,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        DENSE_RANK() OVER (PARTITION BY p.PostTypeId ORDER BY COUNT(c.Id) DESC) AS RankByComments
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Tags, p.Body
),

PopularTags AS (
    SELECT 
        TRIM(BOTH '<>' FROM tag) AS TagName,
        COUNT(*) AS UsageCount
    FROM 
        Posts p, 
        STRING_SPLIT(p.Tags, '> <') AS tag
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        TRIM(BOTH '<>' FROM tag)
    ORDER BY 
        COUNT(*) DESC
    LIMIT 10
),

UserMetrics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Preview,
    rp.CommentCount,
    rp.UpVotes,
    rp.DownVotes,
    um.DisplayName AS Author,
    um.TotalPosts AS AuthorPostCount,
    pt.Name AS PostType,
    (SELECT STRING_AGG(ptag.TagName, ', ') 
     FROM STRING_SPLIT(rp.Tags, '> <') AS ptag) AS TagList,
    ptg.UsageCount AS TagUsageCount
FROM 
    RankedPosts rp
JOIN 
    PostTypes pt ON rp.PostId = pt.Id 
JOIN 
    UserMetrics um ON pt.OwnerUserId = um.UserId
LEFT JOIN 
    PopularTags ptg ON ptg.TagName IN (SELECT TRIM(BOTH '<>' FROM tag) 
                                         FROM STRING_SPLIT(rp.Tags, '> <') AS tag)
WHERE 
    rp.RankByComments <= 5
ORDER BY 
    rp.CommentCount DESC;
