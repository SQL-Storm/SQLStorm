WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(a.Id) AS AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY v.CreationDate DESC) AS LatestVoteRank,
        CASE 
            WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Accepted Answer Exists'
            ELSE 'No Accepted Answer'
        END AS AnswerStatus
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount
), 
UserBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeNames,
        COUNT(*) AS BadgeCount
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
PostHistoryData AS (
    SELECT 
        ph.PostId,
        ARRAY_AGG(DISTINCT ph.Comment) AS CloseReasons,
        MAX(ph.CreationDate) AS LastStatusChange
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.AnswerCount,
    rp.AnswerStatus,
    ub.BadgeNames,
    phd.CloseReasons,
    phd.LastStatusChange
FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges ub ON ub.UserId IN (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
LEFT JOIN 
    PostHistoryData phd ON phd.PostId = rp.PostId
WHERE 
    rp.ViewCount > 100
    AND (rp.Score > 5 OR rp.AnswerCount > 3)
    AND (phd.CloseReasons IS NULL OR phd.LastStatusChange < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month')
ORDER BY 
    rp.ViewCount DESC, 
    rp.Score DESC
LIMIT 50;