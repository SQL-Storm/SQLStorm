
WITH UserScoreCTE AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        U.UpVotes,
        U.DownVotes,
        (U.UpVotes - U.DownVotes) AS NetVotes,
        ROW_NUMBER() OVER (ORDER BY U.Reputation DESC) AS Rank
    FROM Users U
    WHERE U.Reputation IS NOT NULL
),
FilteredPosts AS (
    SELECT 
        P.Id AS PostId,
        P.OwnerUserId,
        P.Title,
        P.CreationDate AS PostCreationDate,
        P.ViewCount,
        P.AnswerCount,
        P.CommentCount,
        P.Score,
        PH.CreationDate AS ChangeDate,
        PHT.Name AS ChangeType,
        COALESCE(PH.Comment, 'No comment') AS ChangeComment
    FROM Posts P
    LEFT JOIN PostHistory PH ON P.Id = PH.PostId
    LEFT JOIN PostHistoryTypes PHT ON PH.PostHistoryTypeId = PHT.Id
    WHERE P.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
    AND (P.Score IS NULL OR P.Score > 0) 
),
PostRanked AS (
    SELECT 
        FP.*,
        ROW_NUMBER() OVER (PARTITION BY FP.OwnerUserId ORDER BY FP.Score DESC) AS RankPerUser
    FROM FilteredPosts FP
),
TopPosts AS (
    SELECT 
        PR.*,
        US.DisplayName AS OwnerDisplayName,
        US.Reputation AS OwnerReputation,
        COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS Downvotes
    FROM PostRanked PR
    LEFT JOIN Users US ON PR.OwnerUserId = US.Id
    LEFT JOIN Votes V ON PR.PostId = V.PostId
    WHERE PR.RankPerUser <= 3
    GROUP BY PR.PostId, PR.Title, PR.PostCreationDate, PR.ViewCount, PR.AnswerCount, PR.CommentCount, PR.Score, 
             US.DisplayName, US.Reputation
)
SELECT 
    TP.PostId,
    TP.Title,
    TP.ViewCount,
    TP.AnswerCount,
    TP.CommentCount,
    TP.Score,
    TP.ChangeType,
    TP.ChangeDate,
    TP.ChangeComment,
    TP.OwnerDisplayName,
    TP.OwnerReputation,
    TP.Downvotes,
    CASE 
        WHEN TP.Score IS NULL THEN 'Score not available'
        WHEN TP.Score > 10 THEN 'High Score'
        WHEN TP.Score BETWEEN 1 AND 10 THEN 'Moderate Score'
        ELSE 'Low Score'
    END AS ScoreCategory,
    RANK() OVER (ORDER BY TP.Score DESC) AS GlobalRank
FROM TopPosts TP
WHERE TP.Downvotes > 2 OR TP.OwnerReputation > 1000
ORDER BY TP.Score DESC, TP.ViewCount DESC
LIMIT 50;
