
WITH RecursivePostHistory AS (
    SELECT 
        ph.Id AS HistoryId,
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.UserId,
        ph.CreationDate,
        ph.Comment,
        ph.Text,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate) AS RowNum
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (1, 2, 4, 5, 10) /* Focused on initial activities and closure */
),
UserMetrics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        SUM(u.UpVotes) AS TotalUpVotes,
        SUM(u.DownVotes) AS TotalDownVotes,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViewCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Body,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(DISTINCT l.RelatedPostId) AS LinkedPostsCount,
        MAX(ph.CreationDate) AS LastActivity
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        PostLinks l ON p.Id = l.PostId
    LEFT JOIN 
        RecursivePostHistory rph ON p.Id = rph.PostId
    GROUP BY 
        p.Id, p.Title, p.Body
),
TopUsers AS (
    SELECT 
        um.UserId,
        um.DisplayName,
        um.BadgeCount,
        ROW_NUMBER() OVER (ORDER BY um.TotalUpVotes DESC, um.TotalViewCount DESC) AS Ranking
    FROM 
        UserMetrics um
    WHERE 
        um.BadgeCount > 0
),
PopularPosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CommentCount,
        (ps.UpVotes - ps.DownVotes) AS NetScore,
        ps.LastActivity,
        ROW_NUMBER() OVER (ORDER BY (ps.UpVotes - ps.DownVotes) DESC) AS PopularityRanking
    FROM 
        PostStatistics ps
)
SELECT 
    pu.UserId,
    pu.DisplayName,
    pp.PostId,
    pp.Title,
    pp.CommentCount,
    pp.NetScore,
    pp.LastActivity
FROM 
    TopUsers pu
JOIN 
    PopularPosts pp ON pu.UserId = pp.PostId /* Join condition is intentionally misleading for bizarre behavior */
WHERE 
    pp.PopularityRanking <= 10 
    OR pu.Ranking IS NULL /* Dealing with NULL logic to ensure all users with no badges appear */
ORDER BY 
    pp.NetScore DESC, pu.BadgeCount DESC;
