
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        COUNT(c.Id) OVER (PARTITION BY p.OwnerUserId) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        MAX(v.CreationDate) FILTER (WHERE v.VoteTypeId = 9) AS LastBountyClaimed 
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PostHistoryAggregate AS (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS EditCount,
        MAX(ph.CreationDate) AS LastEditDate,
        STRING_AGG(CASE 
                       WHEN ph.PostHistoryTypeId IN (4, 5, 6) THEN CONCAT('Edited: ', ph.Comment) 
                       ELSE NULL 
                   END, '; ') AS EditComments
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)
SELECT 
    up.UserId,
    up.DisplayName,
    up.Reputation,
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    ph.EditCount,
    ph.LastEditDate,
    ph.EditComments,
    COALESCE(u.TotalBounty, 0) AS TotalBounty,
    CASE 
        WHEN rp.UserRank = 1 THEN 'Top Post'
        WHEN rp.UserRank <= 5 THEN 'Popular Post'
        ELSE 'Other'
    END AS PostType,
    CASE 
        WHEN up.Reputation IS NULL THEN 'Unknown Reputation'
        WHEN up.Reputation < 100 THEN 'Newbie'
        ELSE 'Veteran'
    END AS UserLevel
FROM 
    RankedPosts rp
JOIN 
    UserStatistics up ON up.UserId = rp.OwnerUserId
LEFT JOIN 
    PostHistoryAggregate ph ON ph.PostId = rp.PostId
WHERE 
    up.BadgeCount > 5
    AND COALESCE(rp.CommentCount, 0) > 10
ORDER BY 
    rp.Score DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
