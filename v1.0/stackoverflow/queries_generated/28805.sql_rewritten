WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2  
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, u.DisplayName, p.Title, p.Body
),

ProcessedTags AS (
    SELECT 
        pt.PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts pt
    JOIN 
        UNNEST(string_to_array(substring(pt.Tags, 2, length(pt.Tags)-2), '> <'))::text[]) AS tag ON TRUE
    JOIN 
        Tags t ON t.TagName = tag
    WHERE 
        pt.PostTypeId = 1  
    GROUP BY 
        pt.PostId
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.OwnerDisplayName,
    rp.CommentCount,
    rp.VoteCount,
    pt.Tags,
    CASE 
        WHEN rp.VoteCount > 10 THEN 'Popular'
        WHEN rp.CommentCount > 5 THEN 'Engaging'
        ELSE 'Standard'
    END AS PostCategory
FROM 
    RankedPosts rp
JOIN 
    ProcessedTags pt ON rp.PostId = pt.PostId
WHERE 
    rp.Rank = 1
ORDER BY 
    rp.VoteCount DESC, rp.CommentCount DESC
LIMIT 50;