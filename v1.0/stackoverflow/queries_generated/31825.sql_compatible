
WITH RecursivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.CreationDate,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        1 AS Level
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 

    UNION ALL

    SELECT 
        a.Id AS PostId,
        a.Title,
        a.PostTypeId,
        a.CreationDate,
        a.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        r.Level + 1 AS Level
    FROM 
        Posts a
    JOIN 
        RecursivePosts r ON a.ParentId = r.PostId
    JOIN 
        Users u ON a.OwnerUserId = u.Id
),
PostMetrics AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerDisplayName,
        COUNT(DISTINCT cm.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVoteCount,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVoteCount,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS ClosedDate,
        COUNT(DISTINCT ph.Id) FILTER (WHERE ph.PostHistoryTypeId = 24) AS EditCount
    FROM 
        RecursivePosts rp
    LEFT JOIN 
        Comments cm ON rp.PostId = cm.PostId
    LEFT JOIN 
        Votes v ON rp.PostId = v.PostId
    LEFT JOIN 
        PostHistory ph ON rp.PostId = ph.PostId
    GROUP BY 
        rp.PostId, rp.Title, rp.OwnerDisplayName
)
SELECT 
    pm.*, 
    (COALESCE(pm.UpVoteCount, 0) - COALESCE(pm.DownVoteCount, 0)) AS NetVote,
    CASE 
        WHEN pm.ClosedDate IS NOT NULL THEN 'Closed'
        ELSE 'Open'
    END AS PostStatus,
    CASE 
        WHEN pm.EditCount > 5 THEN 'Highly Edited'
        ELSE 'Moderately Edited'
    END AS EditStatus
FROM 
    PostMetrics pm
WHERE 
    pm.CommentCount > 0 OR pm.UpVoteCount > 0
ORDER BY 
    NetVote DESC, pm.CommentCount DESC
LIMIT 100;
