
WITH UserStats AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        COUNT(DISTINCT P.Id) AS TotalPosts,
        SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
        SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers,
        SUM(CASE WHEN P.PostTypeId = 1 AND P.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AcceptedQuestions,
        SUM(CASE WHEN P.PostTypeId = 1 THEN P.ViewCount ELSE 0 END) AS TotalViews,
        ROW_NUMBER() OVER (PARTITION BY U.Id ORDER BY SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) DESC) AS RankByUpvotes
    FROM 
        Users U
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId AND V.VoteTypeId = 2
    GROUP BY 
        U.Id, U.DisplayName, U.Reputation
),
PostHistoryStats AS (
    SELECT 
        PH.PostId,
        COUNT(CASE WHEN PH.PostHistoryTypeId IN (10, 11) THEN 1 END) AS CloseReopenCount,
        COUNT(CASE WHEN PH.PostHistoryTypeId IN (12, 13) THEN 1 END) AS DeleteUndeleteCount,
        COUNT(*) AS TotalHistory
    FROM 
        PostHistory PH
    GROUP BY 
        PH.PostId
),
TagAnalysis AS (
    SELECT 
        T.TagName,
        COUNT(DISTINCT P.Id) AS AssociatedPosts,
        SUM(CASE WHEN C.Id IS NOT NULL THEN C.Score ELSE 0 END) AS TotalCommentScore,
        STRING_AGG(DISTINCT U.DisplayName, ', ') AS ActiveUsers
    FROM 
        Tags T
    LEFT JOIN 
        Posts P ON P.Tags LIKE CONCAT('%', T.TagName, '%')
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        Users U ON C.UserId = U.Id
    GROUP BY 
        T.TagName
)
SELECT 
    S.UserId,
    S.DisplayName,
    COALESCE(PS.CloseReopenCount, 0) AS CloseReopenCount,
    COALESCE(PS.DeleteUndeleteCount, 0) AS DeleteUndeleteCount,
    S.TotalPosts,
    S.Questions,
    S.Answers,
    S.AcceptedQuestions,
    S.TotalViews,
    TA.TagName,
    TA.AssociatedPosts,
    TA.TotalCommentScore,
    TA.ActiveUsers
FROM 
    UserStats S
LEFT JOIN 
    PostHistoryStats PS ON PS.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = S.UserId)
LEFT JOIN 
    TagAnalysis TA ON TA.TagName IN (SELECT DISTINCT TRIM(value) FROM STRING_SPLIT((SELECT Tags FROM Posts WHERE OwnerUserId = S.UserId), ',')) 
WHERE 
    S.Reputation > (SELECT AVG(Reputation) FROM Users) 
    AND S.RankByUpvotes <= 10
ORDER BY 
    S.Reputation DESC, 
    S.TotalPosts DESC;
