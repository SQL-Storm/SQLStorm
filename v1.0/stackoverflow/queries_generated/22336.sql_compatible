
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COUNT(DISTINCT v.UserId) OVER (PARTITION BY p.Id) AS UniqueVoteCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
    WHERE p.CreationDate >= DATEADD(YEAR, -1, '2024-10-01'::DATE)
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        MIN(CASE WHEN ph.PostHistoryTypeId = 1 THEN ph.CreationDate END) AS InitialTitleChange,
        MIN(CASE WHEN ph.PostHistoryTypeId = 2 THEN ph.CreationDate END) AS InitialBodyChange,
        MIN(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS PostClosed,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 12 THEN 1 END) AS DeleteHistoryCount
    FROM PostHistory ph
    GROUP BY ph.PostId
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.CommentCount,
        ph.InitialTitleChange,
        ph.InitialBodyChange,
        ph.PostClosed,
        ph.DeleteHistoryCount,
        CASE 
            WHEN ph.DeleteHistoryCount > 0 THEN 'Deleted'
            WHEN rp.Rank <= 5 THEN 'Top 5 Posts'
            ELSE 'Other'
        END AS PostCategory
    FROM RankedPosts rp
    LEFT JOIN PostHistoryDetails ph ON rp.PostId = ph.PostId
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.CreationDate,
    fp.CommentCount,
    fp.PostCategory,
    COALESCE(fp.InitialTitleChange, 'No Title Change') AS FirstTitleChange,
    COALESCE(fp.InitialBodyChange, 'No Body Change') AS FirstBodyChange,
    COUNT(DISTINCT b.Id) AS BadgeCount,
    SUM(CASE WHEN u.Reputation > 1000 THEN 1 ELSE 0 END) AS HighReputationUsersCount
FROM FilteredPosts fp
LEFT JOIN Badges b ON fp.PostId = b.UserId
LEFT JOIN Users u ON b.UserId = u.Id
GROUP BY 
    fp.PostId, 
    fp.Title, 
    fp.CreationDate, 
    fp.CommentCount, 
    fp.PostCategory, 
    fp.InitialTitleChange, 
    fp.InitialBodyChange
ORDER BY 
    fp.CommentCount DESC, 
    fp.CreationDate DESC;
