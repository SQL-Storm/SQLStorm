
WITH RecursivePosts AS (
    SELECT
        Id,
        Title,
        Score,
        ViewCount,
        CreationDate,
        ARRAY_AGG(DISTINCT Tags) AS AllTags,
        OwnerUserId,
        0 AS Level
    FROM
        Posts
    WHERE
        PostTypeId = 1  
    GROUP BY
        Id, Title, Score, ViewCount, CreationDate, OwnerUserId
    
    UNION ALL
    
    SELECT
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        rp.AllTags,
        p.OwnerUserId,
        Level + 1
    FROM
        Posts p
    JOIN RecursivePosts rp ON p.ParentId = rp.Id
    WHERE
        p.PostTypeId = 2  
)
SELECT
    u.DisplayName,
    u.Reputation,
    rp.Title,
    rp.Score,
    rp.ViewCount,
    rp.CreationDate,
    rp.Level,
    COUNT(c.Id) AS CommentCount,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
    CASE
        WHEN MAX(b.Class) IS NOT NULL THEN STRING_AGG(DISTINCT b.Name, ', ')
        ELSE 'No Badges'
    END AS Badges
FROM
    RecursivePosts rp
JOIN
    Users u ON rp.OwnerUserId = u.Id
LEFT JOIN
    Comments c ON c.PostId = rp.Id
LEFT JOIN
    Votes v ON v.PostId = rp.Id
LEFT JOIN
    Badges b ON b.UserId = u.Id
WHERE
    rp.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
GROUP BY
    u.DisplayName, u.Reputation, rp.Title, rp.Score, rp.ViewCount, rp.CreationDate, rp.Level
ORDER BY
    rp.Score DESC, rp.ViewCount DESC
LIMIT 100;
