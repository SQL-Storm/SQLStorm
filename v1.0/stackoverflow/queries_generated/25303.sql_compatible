
WITH TagCounts AS (
    SELECT 
        Tags.TagName,
        COUNT(Posts.Id) AS PostCount
    FROM 
        Tags
    LEFT JOIN 
        Posts ON Tags.Id = ANY(string_to_array(substring(Posts.Tags, 2, length(Posts.Tags) - 2), '><')::text[])
    GROUP BY 
        Tags.TagName
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostsCreated,
        COUNT(DISTINCT c.Id) AS CommentsMade,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotesReceived,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotesReceived
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
PostHistorySummary AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        STRING_AGG(DISTINCT pt.Name, ',') AS PostTypes,
        ph.UserDisplayName AS LastEditor,
        ph.CreationDate AS LastEditDate
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    JOIN 
        PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    WHERE 
        ph.CreationDate > p.LastEditDate
    GROUP BY 
        p.Id, p.Title, p.CreationDate, ph.UserDisplayName
)
SELECT 
    tc.TagName,
    tc.PostCount,
    ua.UserId,
    ua.DisplayName,
    ua.PostsCreated,
    ua.CommentsMade,
    ua.UpVotesReceived,
    ua.DownVotesReceived,
    p.PostId,
    p.Title,
    p.CreationDate,
    p.PostTypes,
    p.LastEditor,
    p.LastEditDate
FROM 
    TagCounts tc
JOIN 
    UserActivity ua ON ua.PostsCreated > 0
JOIN 
    PostHistorySummary p ON p.PostId IS NOT NULL
ORDER BY 
    tc.PostCount DESC, ua.UpVotesReceived DESC
LIMIT 100;
