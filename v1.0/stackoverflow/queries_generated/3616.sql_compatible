
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(v.Id) OVER (PARTITION BY p.Id) AS VoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVoteCount,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        p.OwnerUserId
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year')
    AND 
        p.Score > 0
),
AggregatedUserData AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        AVG(p.Score) AS AveragePostScore,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    au.DisplayName,
    au.TotalPosts,
    au.AveragePostScore,
    COALESCE(rp.RankByScore, 'No posts') AS PostRank,
    rp.Title,
    rp.Score,
    rp.ViewCount,
    rp.VoteCount,
    rp.CommentCount,
    rp.UpVoteCount,
    rp.DownVoteCount
FROM 
    AggregatedUserData au
FULL OUTER JOIN 
    RankedPosts rp ON au.UserId = rp.OwnerUserId 
WHERE 
    (au.TotalPosts > 5 OR rp.PostId IS NOT NULL)
ORDER BY 
    au.AveragePostScore DESC, 
    rp.VoteCount DESC
LIMIT 50;
