
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
UserBadgeCounts AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
TopPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        ph.UserId AS PostOwnerId,
        ROW_NUMBER() OVER (ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        (SELECT DISTINCT PostId, UserId FROM Votes) ph ON p.Id = ph.PostId
    WHERE 
        p.PostTypeId IN (1, 2) 
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        COALESCE(MAX(c.Score), 0) AS MaxCommentScore,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AnswerAcceptedCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id
)
SELECT 
    u.Id AS UserId,
    u.DisplayName,
    u.Reputation,
    ub.BadgeCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    ph.PostId,
    ph.Title AS PostTitle,
    ph.CreationDate AS PostCreationDate,
    ps.MaxCommentScore,
    ps.CommentCount,
    ps.AnswerAcceptedCount,
    rh.Level AS PostLevel
FROM 
    Users u
JOIN 
    UserBadgeCounts ub ON u.Id = ub.UserId
JOIN 
    TopPosts ph ON u.Id = ph.PostOwnerId
JOIN 
    PostStatistics ps ON ph.Id = ps.PostId
LEFT JOIN 
    RecursivePostHierarchy rh ON ph.PostId = rh.PostId 
WHERE 
    u.Reputation > 1000
ORDER BY 
    ub.BadgeCount DESC, 
    ph.Score DESC
FETCH FIRST 50 ROWS ONLY;
