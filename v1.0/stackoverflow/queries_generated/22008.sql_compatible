
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Views,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankByScore,
        DENSE_RANK() OVER (PARTITION BY p.PostTypeId, DATE_TRUNC('month', p.CreationDate) ORDER BY p.CreationDate) AS MonthlyRank,
        COALESCE(UPPER(SUBSTRING(p.Title FROM 1 FOR 5)), '') AS TitlePrefix,
        p.CreationDate,
        COUNT(c.Id) FILTER (WHERE c.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days') AS RecentComments,
        COUNT(v.Id) FILTER (WHERE v.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' AND v.VoteTypeId = 2) AS RecentUpVotes,
        COUNT(v.Id) FILTER (WHERE v.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' AND v.VoteTypeId = 3) AS RecentDownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '2 years'
    GROUP BY 
        p.Id, p.Title, p.Views, p.Score, p.CreationDate
),
PostSummary AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Views,
        rp.Score,
        rp.RankByScore,
        rp.MonthlyRank,
        rp.TitlePrefix,
        rp.RecentComments,
        rp.RecentUpVotes,
        rp.RecentDownVotes,
        CASE 
            WHEN rp.Score > 100 THEN 'Highly Rated'
            WHEN rp.Score BETWEEN 51 AND 100 THEN 'Moderately Rated'
            ELSE 'Low Rated'
        END AS RatingCategory
    FROM 
        RankedPosts rp
    WHERE 
        rp.RankByScore <= 5
    OR
        (rp.RecentComments > 0 AND rp.RecentUpVotes > rp.RecentDownVotes)
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT crt.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes crt ON ph.Comment = crt.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        ph.PostId
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.Views,
    ps.Score,
    ps.RankByScore,
    ps.MonthlyRank,
    ps.TitlePrefix,
    ps.RecentComments,
    ps.RecentUpVotes,
    ps.RecentDownVotes,
    ps.RatingCategory,
    COALESCE(cp.CloseReasons, 'No Close Reasons') AS CloseReasons
FROM 
    PostSummary ps
LEFT JOIN 
    ClosedPosts cp ON ps.PostId = cp.PostId
WHERE 
    ps.TitlePrefix LIKE 'Q%' 
ORDER BY 
    ps.RatingCategory DESC, ps.Score DESC;
