WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY ARRAY(SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><'))) ORDER BY p.Score DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.Score,
    COUNT(c.Id) AS CommentCount,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
    rp.CreationDate,
    CASE 
        WHEN rp.Score > 100 THEN 'Popular'
        WHEN rp.Score BETWEEN 51 AND 100 THEN 'Notable'
        ELSE 'Underwhelming'
    END AS PopularityRank
FROM 
    RankedPosts rp
LEFT JOIN 
    Comments c ON c.PostId = rp.PostId
LEFT JOIN 
    LATERAL string_to_array(substring(rp.Tags, 2, length(rp.Tags) - 2), '><') AS tag_array ON true
LEFT JOIN 
    Tags t ON t.TagName = unnest(tag_array)
WHERE 
    rp.rn <= 5
GROUP BY 
    rp.PostId, rp.Title, rp.OwnerDisplayName, rp.Score, rp.CreationDate
ORDER BY 
    rp.Score DESC, rp.CreationDate DESC;