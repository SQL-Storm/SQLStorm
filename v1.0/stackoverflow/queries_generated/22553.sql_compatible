
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank,
        COALESCE(NULLIF(SUBSTRING(p.Body, 1, 50), ''), 'No Content Available') AS ShortBody,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVotesCount,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVotesCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
        AND p.Score > 0
),

PostHistoryAggregates AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS CloseCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 12 THEN 1 END) AS DeleteCount,
        MAX(ph.CreationDate) AS LastModified
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),

UserMetrics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(u.UpVotes) AS TotalUpVotes,
        SUM(u.DownVotes) AS TotalDownVotes,
        COUNT(DISTINCT b.Id) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)

SELECT 
    up.DisplayName AS User_DisplayName,
    pp.PostId,
    pp.Title,
    pp.ShortBody,
    pp.ViewCount,
    pp.Rank,
    pm.CloseCount,
    pm.DeleteCount,
    um.TotalUpVotes,
    um.TotalDownVotes,
    um.TotalBadges,
    CASE 
        WHEN pp.Rank = 1 THEN 'Top Post'
        ELSE 'Regular Post'
    END AS PostCategory,
    COALESCE(pp.UpVotesCount, 0) - COALESCE(pp.DownVotesCount, 0) AS VoteBalance
FROM 
    RankedPosts pp
JOIN 
    Users up ON pp.OwnerUserId = up.Id
LEFT JOIN 
    PostHistoryAggregates pm ON pp.PostId = pm.PostId
JOIN 
    UserMetrics um ON up.Id = um.UserId
WHERE 
    pp.Rank <= 5
ORDER BY 
    pp.Rank, pp.ViewCount DESC;
