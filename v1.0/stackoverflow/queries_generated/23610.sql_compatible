
WITH RecursivePostHistory AS (
    
    SELECT 
        ph.Id, 
        ph.PostId, 
        ph.PostHistoryTypeId, 
        ph.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS RevisionRank
    FROM 
        PostHistory ph
),
UserBadges AS (
    
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes, 
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
)
SELECT 
    p.Id AS PostId,
    p.Title,
    p.CreationDate,
    ph.RevisionRank,
    COALESCE(ps.CommentCount, 0) AS TotalComments,
    up.UserId AS TopUserId,
    up.BadgeCount,
    MAX(CASE WHEN up.Reputation > 1000 THEN up.BadgeNames END) AS HighReputationBadges,
    MAX(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN ph.CreationDate END) AS CloseReopenDate
FROM 
    Posts p
LEFT JOIN 
    RecursivePostHistory ph ON p.Id = ph.PostId
LEFT JOIN 
    PostStats ps ON p.Id = ps.PostId
LEFT JOIN 
    UserBadges up ON p.OwnerUserId = up.UserId
WHERE 
    p.CreationDate > DATE_SUB(CAST('2024-10-01' AS DATE), INTERVAL 1 YEAR)
GROUP BY 
    p.Id, p.Title, p.CreationDate, ph.RevisionRank, up.UserId, up.BadgeCount
HAVING 
    COUNT(DISTINCT ph.Id) > 1 AND
    (MAX(ph.CreationDate) IS NOT NULL OR up.BadgeCount > 5) 
ORDER BY 
    p.CreationDate DESC, ps.UpVotes DESC;
