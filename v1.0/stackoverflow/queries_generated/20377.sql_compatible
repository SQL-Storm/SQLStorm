
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= (CAST('2024-10-01' AS DATE) - INTERVAL '1 year') 
        AND p.AcceptedAnswerId IS NOT NULL
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PostAnalytics AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        ur.UserId,
        ur.Reputation,
        ur.GoldBadges,
        ur.SilverBadges,
        ur.BronzeBadges
    FROM 
        RankedPosts rp
    JOIN 
        UserReputation ur ON rp.OwnerUserId = ur.UserId
    WHERE 
        rp.Rank <= 5
),
TagStatistics AS (
    SELECT 
        t.Id AS TagId,
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, '<>')::text[])
    GROUP BY 
        t.Id, t.TagName
    HAVING 
        COUNT(DISTINCT p.Id) > 10
)
SELECT 
    pa.Title AS PopularPostTitle,
    pa.ViewCount AS PopularPostViewCount,
    CONCAT('User ID: ', pa.UserId, ', Reputation: ', pa.Reputation) AS UserInfo,
    CONCAT('Gold: ', pa.GoldBadges, ', Silver: ', pa.SilverBadges, ', Bronze: ', pa.BronzeBadges) AS BadgeSummary,
    ts.TagName AS TagName,
    ts.PostCount AS RelatedPostCount
FROM 
    PostAnalytics pa
LEFT JOIN 
    TagStatistics ts ON ts.TagId IN (
        SELECT unnest(string_to_array((SELECT Tags FROM Posts WHERE Id = pa.PostId), '<>'))
    )
ORDER BY 
    pa.ViewCount DESC, 
    ts.PostCount DESC
LIMIT 10;
