WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COALESCE(COUNT(DISTINCT c.Id), 0) AS CommentCount,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate ASC) AS RowRank,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 9 
    LEFT JOIN 
        (SELECT 
            postId, UNNEST(SPLIT(Tags, ', ')) AS TagName 
         FROM 
            Posts) t ON p.Id = t.PostId
    GROUP BY 
        p.Id
),
ActiveUsers AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS UserRank
    FROM 
        Users u
    WHERE 
        u.LastAccessDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month' AND
        u.Reputation > 100
),
PostHistoryAnalysis AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.UserId,
        pt.Name AS PostHistoryType,
        COUNT(*) AS EditCount
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pt ON pt.Id = ph.PostHistoryTypeId
    WHERE 
        ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '3 months'
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId, ph.CreationDate, ph.UserId, pt.Name
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    rp.TotalBounty,
    rp.Tags,
    u.DisplayName AS ActiveUser,
    u.Reputation AS UserReputation,
    COALESCE(SUM(phi.EditCount), 0) AS TotalEdits,
    CASE 
        WHEN p.Score > 100 THEN 'Highly Popular'
        WHEN p.Score BETWEEN 50 AND 100 THEN 'Moderately Popular'
        ELSE 'Less Popular'
    END AS PopularityCategory
FROM 
    RankedPosts rp
LEFT JOIN 
    ActiveUsers u ON u.UserId = rp.PostId 
LEFT JOIN 
    PostHistoryAnalysis phi ON phi.PostId = rp.PostId
WHERE 
    rp.RowRank <= 10
GROUP BY 
    rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, 
    rp.CommentCount, rp.TotalBounty, rp.Tags, u.DisplayName, u.Reputation
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC, u.Reputation DESC;