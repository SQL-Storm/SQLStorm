
WITH RankedPosts AS (
    SELECT p.Id,
           p.Title,
           p.CreationDate,
           p.Score,
           p.ViewCount,
           COUNT(c.Id) AS CommentCount,
           COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
           COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.PostTypeId = 1 AND p.Score > 10
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserStatistics AS (
    SELECT u.Id AS UserId,
           u.DisplayName,
           SUM(COALESCE(b.Class, 0)) AS TotalBadges,
           AVG(p.ViewCount) AS AveragePostViews,
           MAX(p.Score) AS MaxPostScore
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    WHERE u.Reputation > 1000
    GROUP BY u.Id, u.DisplayName
)
SELECT u.DisplayName,
       r.Title,
       r.CreationDate,
       r.Score,
       r.ViewCount,
       r.CommentCount,
       u.TotalBadges,
       u.AveragePostViews,
       u.MaxPostScore
FROM RankedPosts r
JOIN UserStatistics u ON r.OwnerUserId = u.UserId
WHERE r.PostRank = 1
ORDER BY u.TotalBadges DESC, r.Score DESC
LIMIT 10;
