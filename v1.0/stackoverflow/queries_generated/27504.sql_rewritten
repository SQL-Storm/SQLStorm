WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        u.Reputation AS OwnerReputation,
        ROW_NUMBER() OVER (PARTITION BY t.TagName ORDER BY p.ViewCount DESC) AS RankWithinTag,
        ARRAY_AGG(DISTINCT t.TagName) FILTER (WHERE t.TagName IS NOT NULL) AS AssociatedTags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        LATERAL (SELECT UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags)-2), '><')) AS TagName) AS t) ON TRUE
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.ViewCount, u.Reputation
),
TagStats AS (
    SELECT 
        t.TagName,
        COUNT(rp.PostId) AS PostCount,
        AVG(rp.OwnerReputation) AS AvgReputation,
        MAX(rp.ViewCount) AS MaxViews
    FROM 
        RankedPosts rp
    JOIN 
        UNNEST(rp.AssociatedTags) AS t(TagName) ON TRUE
    GROUP BY 
        t.TagName
)
SELECT 
    ts.TagName,
    ts.PostCount,
    ts.AvgReputation,
    ts.MaxViews,
    (SELECT STRING_AGG(DISTINCT p.Title, ', ') 
     FROM RankedPosts rp 
     JOIN Posts p ON rp.PostId = p.Id 
     WHERE t.TagName = ANY(rp.AssociatedTags)) AS ExamplePostTitles
FROM 
    TagStats ts
ORDER BY 
    ts.MaxViews DESC, ts.PostCount DESC;