
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
),
UserReputations AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        CASE 
            WHEN u.Reputation < 100 THEN 'Newbie'
            WHEN u.Reputation BETWEEN 100 AND 1000 THEN 'Intermediate'
            ELSE 'Expert'
        END AS ReputationCategory
    FROM 
        Users u
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    ur.Reputation,
    ur.ReputationCategory,
    COALESCE(NULLIF(rp.CommentCount, 0), 'No Comments') AS CommentDetails,
    (SELECT AVG(v.Score) 
     FROM Votes v 
     WHERE v.PostId = rp.PostId AND v.VoteTypeId = 2) AS AvgUpvotes,
    (SELECT COUNT(*) 
     FROM PostHistory ph 
     WHERE ph.PostId = rp.PostId 
       AND ph.PostHistoryTypeId IN (10, 11, 12, 13)) AS TotalStateChanges
FROM 
    RankedPosts rp
JOIN 
    UserReputations ur ON rp.OwnerUserId = ur.UserId
WHERE 
    rp.rn = 1
ORDER BY 
    rp.CreationDate DESC
LIMIT 10
OFFSET 5;
