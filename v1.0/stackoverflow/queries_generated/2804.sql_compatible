
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        p.ViewCount, 
        p.AcceptedAnswerId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        p.Body,
        CASE 
            WHEN p.ClosedDate IS NOT NULL THEN 'Closed'
            ELSE 'Open'
        END AS Status,
        p.Tags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
),
PopularTags AS (
    SELECT 
        TRIM(REGEXP_SUBSTR(Tags, '[^><]+', 1, level)) AS Tag
    FROM 
        Posts
    CONNECT BY 
        REGEXP_SUBSTR(Tags, '[^><]+', 1, level) IS NOT NULL
    WHERE 
        PostTypeId = 1 AND
        CreationDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)
),
TagCounts AS (
    SELECT 
        Tag, 
        COUNT(*) AS TagFrequency
    FROM 
        PopularTags
    GROUP BY 
        Tag
    ORDER BY 
        TagFrequency DESC
    LIMIT 5
),
PostDetails AS (
    SELECT 
        rp.PostId, 
        rp.Title, 
        rp.CreationDate, 
        rp.Score, 
        rp.ViewCount, 
        rp.CommentCount,
        rp.Status,
        COALESCE(tc.Tag, 'No Tags') AS Tag
    FROM 
        RankedPosts rp
    LEFT JOIN 
        TagCounts tc ON POSITION(tc.Tag IN rp.Tags) > 0
    WHERE 
        rp.Rank <= 3
)
SELECT 
    pd.PostId, 
    pd.Title, 
    pd.CreationDate, 
    pd.Score, 
    pd.ViewCount, 
    pd.CommentCount, 
    pd.Status, 
    STRING_AGG(pd.Tag, ', ') AS Tags
FROM 
    PostDetails pd
GROUP BY 
    pd.PostId, pd.Title, pd.CreationDate, pd.Score, pd.ViewCount, pd.CommentCount, pd.Status
ORDER BY 
    pd.Score DESC, pd.ViewCount DESC;
