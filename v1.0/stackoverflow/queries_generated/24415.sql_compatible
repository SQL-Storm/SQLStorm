
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank,
        COALESCE((SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id), 0) AS CommentCount,
        COALESCE((SELECT COUNT(DISTINCT b.Id) FROM Badges b WHERE b.UserId = p.OwnerUserId), 0) AS UserBadgeCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 YEAR'
),
FilteredPosts AS (
    SELECT 
        rp.*,
        CASE 
            WHEN rp.CommentCount > 5 THEN 'High Activity'
            WHEN rp.CommentCount BETWEEN 3 AND 5 THEN 'Moderate Activity'
            ELSE 'Low Activity'
        END AS ActivityLevel
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 10
),
TagCounts AS (
    SELECT 
        t.TagName,
        COUNT(pt.PostId) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts pt ON pt.Tags LIKE '%' || t.TagName || '%'
    GROUP BY 
        t.TagName
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.ViewCount,
    fp.ActivityLevel,
    T.TagName,
    TC.PostCount AS RelatedTagCount,
    CASE 
        WHEN TC.PostCount > 0 THEN 1
        ELSE 0
    END AS HasRelatedTags
FROM 
    FilteredPosts fp
LEFT JOIN 
    LATERAL (
        SELECT 
            UNNEST(STRING_TO_ARRAY(fp.Tags, '<>')) AS TagName
    ) AS T ON TRUE
LEFT JOIN 
    TagCounts TC ON T.TagName = TC.TagName
WHERE 
    fp.UserBadgeCount < 3
ORDER BY 
    fp.Score DESC, fp.ViewCount DESC, T.TagName
LEFT JOIN ( 
    SELECT 
        ph.PostId,
        STRING_AGG(ph.Comment, '; ') AS HistoryComments
    FROM 
        PostHistory ph
    WHERE 
        ph.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 MONTH'
    GROUP BY 
        ph.PostId
) AS PH ON PH.PostId = fp.PostId;
