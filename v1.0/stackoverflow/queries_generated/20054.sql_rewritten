WITH UserScoreCTE AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        (U.UpVotes - U.DownVotes) AS NetVotes,
        U.Views,
        COALESCE(DATE_PART('epoch', MAX(P.CreationDate))::int, 0) AS LastActiveEpoch,
        COUNT(P.Id) AS PostCount
    FROM 
        Users U
        LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    GROUP BY U.Id
),
RecentPostsCTE AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.ViewCount,
        P.Score,
        CASE 
            WHEN P.AcceptedAnswerId IS NOT NULL THEN 'Accepted' 
            ELSE 'Not Accepted' 
        END AS AnswerStatus,
        U.DisplayName AS OwnerName,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount
    FROM 
        Posts P
        LEFT JOIN Users U ON P.OwnerUserId = U.Id
        LEFT JOIN Comments C ON P.Id = C.PostId
    WHERE 
        P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY P.Id, U.DisplayName
),
PostHistoryCTE AS (
    SELECT 
        PH.PostId,
        COUNT(CASE WHEN PH.PostHistoryTypeId = 10 THEN 1 END) AS CloseCount,
        MAX(PH.CreationDate) AS LastClosedDate
    FROM 
        PostHistory PH
    GROUP BY PH.PostId
)

SELECT 
    US.UserId,
    US.DisplayName,
    US.Reputation,
    US.NetVotes,
    US.Views,
    RPT.PostId,
    RPT.Title,
    RPT.CreationDate,
    RPT.ViewCount,
    RPT.Score,
    RPT.AnswerStatus,
    RPT.OwnerName,
    COALESCE(PH.CloseCount, 0) AS TotalCloseCount,
    PH.LastClosedDate,
    RPT.CommentCount,
    CASE 
        WHEN PH.LastClosedDate IS NOT NULL AND (RPT.CreationDate < PH.LastClosedDate) THEN 'Closed Before'
        ELSE 'Active or Open'
    END AS PostStatus
FROM 
    UserScoreCTE US
    LEFT JOIN RecentPostsCTE RPT ON US.UserId = RPT.OwnerName
    LEFT JOIN PostHistoryCTE PH ON RPT.PostId = PH.PostId
WHERE 
    US.Reputation > 100 
ORDER BY 
    US.Reputation DESC, 
    RPT.Score DESC 
LIMIT 50;