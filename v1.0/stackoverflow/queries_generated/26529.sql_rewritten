WITH RankedPosts AS (
    SELECT 
        p.Id AS PostID,
        p.Title,
        u.DisplayName AS Author,
        p.CreationDate,
        p.LastActivityDate,
        p.Body,
        p.AnswerCount,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.LastActivityDate DESC) AS ActivityRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
),
PopularTags AS (
    SELECT 
        unnest(string_to_array(substring(Tags, 2, length(Tags)-2), '><')) AS Tag
    FROM 
        Posts
    WHERE 
        PostTypeId = 1
),
TagPopularity AS (
    SELECT 
        Tag,
        COUNT(*) AS UsageCount
    FROM 
        PopularTags
    GROUP BY 
        Tag
    ORDER BY 
        UsageCount DESC
    LIMIT 10
),
CommentsStatistics AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount,
        AVG(c.Score) AS AverageScore
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
PostDetail AS (
    SELECT 
        rp.PostID,
        rp.Title,
        rp.Author,
        rp.CreationDate,
        rp.LastActivityDate,
        rp.Body,
        rp.AnswerCount,
        rp.ViewCount,
        cs.CommentCount,
        cs.AverageScore
    FROM 
        RankedPosts rp
    LEFT JOIN 
        CommentsStatistics cs ON rp.PostID = cs.PostId
)
SELECT 
    pd.Title, 
    pd.Author,
    pd.CreationDate,
    pd.LastActivityDate,
    pd.Body,
    pd.AnswerCount,
    pd.ViewCount,
    pd.CommentCount,
    pd.AverageScore,
    ARRAY_AGG(tp.Tag) AS PopularTags
FROM 
    PostDetail pd
LEFT JOIN 
    TagPopularity tp ON pd.Title LIKE '%' || tp.Tag || '%'
WHERE 
    pd.ActivityRank <= 5 
GROUP BY 
    pd.PostID, pd.Title, pd.Author, pd.CreationDate, pd.LastActivityDate, pd.Body, pd.AnswerCount, pd.ViewCount, pd.CommentCount, pd.AverageScore
ORDER BY 
    pd.LastActivityDate DESC
LIMIT 50;