WITH UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN vt.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN vt.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes vt ON p.Id = vt.PostId
    GROUP BY u.Id, u.DisplayName, u.Reputation
),
PopularPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM Posts p
    LEFT JOIN Tags t ON p.Tags LIKE '%' || t.TagName || '%'
    WHERE p.Score > 0
    GROUP BY p.Id, p.Title, p.Score, p.ViewCount, p.PostTypeId
    HAVING COUNT(DISTINCT t.TagName) > 0
),
RecentEdits AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        ph.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS EditRank,
        ph.Comment,
        ph.Text,
        p.Title,
        p.Body
    FROM PostHistory ph
    INNER JOIN Posts p ON ph.PostId = p.Id
    WHERE ph.PostHistoryTypeId IN (4, 5, 6)
)

SELECT 
    us.DisplayName,
    us.Reputation,
    us.PostCount,
    us.Upvotes,
    us.Downvotes,
    pp.PostId,
    pp.Title AS PopularPostTitle,
    pp.Score AS PopularPostScore,
    pp.ViewCount AS PopularPostViewCount,
    pp.Tags AS PopularPostTags,
    re.UserId AS EditorUserId,
    re.CreationDate AS EditDate,
    re.Comment AS EditComment,
    re.Text AS OldContent,
    COALESCE(re.Title, 'N/A') AS EditedPostTitle,
    COALESCE(re.Body, 'N/A') AS EditedBody
FROM UserStats us
JOIN PopularPosts pp ON us.PostCount > 10 AND us.Upvotes > us.Downvotes
LEFT JOIN RecentEdits re ON pp.PostId = re.PostId AND re.EditRank = 1
WHERE 
    us.Reputation BETWEEN 100 AND 1000
    AND (us.DisplayName LIKE 'A%' OR us.Location IS NULL)
ORDER BY us.Reputation DESC, pp.Score DESC
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;