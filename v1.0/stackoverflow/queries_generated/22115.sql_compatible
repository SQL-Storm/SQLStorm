
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank,
        AVG(v.BountyAmount) OVER (PARTITION BY p.Id) AS AvgBounty
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9)  
    WHERE 
        p.CreationDate >= DATE_SUB(CAST('2024-10-01' AS DATE), INTERVAL 1 YEAR)
    AND 
        p.Score > 0
),
RecentUserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(c.Id) AS CommentCount,
        COUNT(b.Id) AS BadgeCount,
        MAX(c.CreationDate) AS LastCommentDate
    FROM 
        Users u
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.CreationDate < DATE_SUB(CAST('2024-10-01 12:34:56' AS TIMESTAMP), INTERVAL 6 MONTH)
    GROUP BY 
        u.Id, u.Reputation
),
PostHistoryDetail AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.UserDisplayName,
        ph.Comment,
        STRING_AGG(pht.Name, ', ') AS HistoryTypeNames
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId, ph.CreationDate, ph.UserDisplayName, ph.Comment
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.CreationDate,
        rp.Score,
        r.UserId,
        r.Reputation AS UserReputation,
        PH.HistoryTypeNames,
        CASE 
            WHEN r.CommentCount > 10 THEN 'Active User'
            ELSE 'New User'
        END AS UserStatus
    FROM 
        RankedPosts rp
    JOIN 
        RecentUserActivity r ON rp.PostId IN (SELECT p.Id FROM Posts p WHERE p.OwnerUserId = r.UserId)
    LEFT JOIN 
        PostHistoryDetail PH ON rp.PostId = PH.PostId
)
SELECT 
    f.Title,
    CASE 
        WHEN f.UserReputation > 1000 THEN 'Veteran'
        WHEN f.UserReputation BETWEEN 500 AND 1000 THEN 'Experienced'
        ELSE 'Novice'
    END AS UserExperience,
    f.ViewCount,
    f.Score,
    f.UserStatus,
    f.HistoryTypeNames,
    YEAR(CAST('2024-10-01' AS DATE)) - YEAR(f.CreationDate) AS AgeInYears,
    COALESCE(PH.Comment, 'No Comments') AS LatestComment
FROM 
    FilteredPosts f
LEFT JOIN 
    (SELECT 
         PostId, 
         MAX(CreationDate) AS LatestDate, 
         Comment 
     FROM 
         PostHistory 
     WHERE 
         PostHistoryTypeId = 10  
     GROUP BY 
         PostId, Comment) AS PH ON f.PostId = PH.PostId
WHERE 
    f.ScoreRank <= 5 
ORDER BY 
    f.UserReputation DESC, 
    f.ViewCount DESC
LIMIT 100;
