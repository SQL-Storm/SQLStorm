WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(comment.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments comment ON p.Id = comment.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(pt.PostId) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::int[])
    LEFT JOIN 
        PostLinks pl ON p.Id = pl.PostId
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(pt.PostId) > 5
),
CloseReasonVotes AS (
    SELECT 
        ph.PostId,
        ph.Comment AS CloseReason,
        COUNT(ph.UserId) AS VoteCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10
    GROUP BY 
        ph.PostId, ph.Comment
    HAVING 
        COUNT(ph.UserId) > 2
)
SELECT 
    rp.PostId, 
    rp.Title, 
    rp.CreationDate,
    rp.CommentCount,
    rp.UpVoteCount,
    rp.DownVoteCount,
    COALESCE(pt.TagName, 'No Tags') AS PopularTag,
    crv.CloseReason AS MostCommonCloseReason
FROM 
    RankedPosts rp
LEFT JOIN 
    PopularTags pt ON pt.PostCount > 10
LEFT JOIN 
    CloseReasonVotes crv ON rp.PostId = crv.PostId
WHERE 
    rp.rn = 1 
    AND (rp.UpVoteCount - rp.DownVoteCount) > 0
ORDER BY 
    rp.CreationDate DESC 
LIMIT 50;