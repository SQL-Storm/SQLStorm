
WITH UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.Views,
        u.UpVotes,
        u.DownVotes,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.Reputation, u.Views, u.UpVotes, u.DownVotes
),
PostEngagement AS (
    SELECT 
        p.Id AS PostId,
        p.OwnerUserId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY COUNT(DISTINCT c.Id) DESC) AS EngagementRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
    GROUP BY 
        p.Id, p.OwnerUserId
),
HighEngagementPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        ue.UserId,
        ue.Reputation,
        ue.TotalPosts,
        ue.Questions,
        ue.Answers,
        pe.CommentCount,
        pe.UpVotes,
        pe.DownVotes,
        pe.EngagementRank
    FROM 
        Posts p
    JOIN 
        UserStatistics ue ON p.OwnerUserId = ue.UserId
    JOIN 
        PostEngagement pe ON p.Id = pe.PostId
    WHERE 
        pe.EngagementRank <= 5
)
SELECT 
    hp.PostId,
    hp.Title,
    hp.Score,
    hp.ViewCount,
    hp.Reputation,
    hp.TotalPosts,
    hp.Questions,
    hp.Answers,
    hp.CommentCount,
    hp.UpVotes,
    hp.DownVotes,
    CASE 
        WHEN hp.UpVotes > hp.DownVotes THEN 'Positive Engagement' 
        WHEN hp.UpVotes < hp.DownVotes THEN 'Negative Engagement' 
        ELSE 'No Engagement' 
    END AS EngagementType,
    STRING_AGG(DISTINCT pht.Name, ', ') AS PostHistoryTypes
FROM 
    HighEngagementPosts hp
LEFT JOIN 
    PostHistory ph ON hp.PostId = ph.PostId
LEFT JOIN 
    PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
GROUP BY 
    hp.PostId, hp.Title, hp.Score, hp.ViewCount, hp.Reputation, hp.TotalPosts, hp.Questions, hp.Answers, hp.CommentCount, hp.UpVotes, hp.DownVotes
ORDER BY 
    hp.Reputation DESC, hp.Score DESC
LIMIT 50;
