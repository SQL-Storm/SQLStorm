
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        p.Score,
        p.ViewCount,
        COUNT(a.Id) AS AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.LastActivityDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        AVG(COALESCE(v.BountyAmount, 0)) AS AvgBountyAmount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PopularTags AS (
    SELECT 
        TRIM(UNNEST(string_to_array(TRIM(BOTH '<>' FROM Tags), '><'))) AS Tag,
        COUNT(*) AS TagCount
    FROM 
        Posts
    WHERE 
        PostTypeId = 1
    GROUP BY 
        Tag
    HAVING 
        COUNT(*) > 10 
)
SELECT 
    up.UserId,
    up.Reputation,
    up.BadgeCount,
    up.GoldBadges,
    up.AvgBountyAmount,
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.LastActivityDate,
    rp.Score,
    rp.ViewCount,
    pt.Tag,
    pt.TagCount
FROM 
    UserReputation up
JOIN 
    RankedPosts rp ON up.UserId = rp.PostId
LEFT JOIN 
    PopularTags pt ON pt.Tag IN (SELECT TRIM(UNNEST(string_to_array(TRIM(BOTH '<>' FROM rp.Tags), '><'))))
WHERE 
    up.Reputation > 1000 AND 
    rp.rn = 1 
ORDER BY 
    up.Reputation DESC, 
    rp.Score DESC;
