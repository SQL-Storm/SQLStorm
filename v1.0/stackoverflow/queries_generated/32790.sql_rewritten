WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        p.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p2.Id,
        p2.Title,
        p2.OwnerUserId,
        p2.CreationDate,
        p2.Score,
        p2.AcceptedAnswerId,
        Level + 1
    FROM 
        Posts p2
    INNER JOIN 
        RecursivePostCTE r ON p2.ParentId = r.PostId
)

SELECT 
    u.DisplayName AS UserName,
    COUNT(DISTINCT p.Id) AS QuestionCount,
    COUNT(DISTINCT a.Id) AS AcceptedAnswers,
    SUM(COALESCE(a.Score, 0)) AS TotalAcceptedScore,
    STRING_AGG(DISTINCT t.TagName, ', ') AS TagsUsed,
    MAX(p.CreationDate) AS LastQuestionDate,
    AVG(DATEDIFF(MINUTE, p.CreationDate, COALESCE(a.CreationDate, p.CreationDate))) AS AvgTimeToAccept
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1  
LEFT JOIN 
    Posts a ON p.AcceptedAnswerId = a.Id  
LEFT JOIN 
    LATERAL (
        SELECT 
            UNNEST(string_to_array(p.Tags, '>')) AS TagName
    ) AS t ON t.TagName IS NOT NULL
GROUP BY 
    u.DisplayName
HAVING 
    COUNT(DISTINCT p.Id) > 5  
ORDER BY 
    TotalAcceptedScore DESC
LIMIT 10;