WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        COALESCE(NULLIF(p.AcceptedAnswerId, -1), 0) AS HasAcceptedAnswer,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreationDate, p.ViewCount, p.AcceptedAnswerId
), 
PostMetadata AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.ViewCount,
        rp.HasAcceptedAnswer,
        u.DisplayName AS OwnerDisplayName,
        SUM(v.BountyAmount) AS TotalBounty
    FROM 
        RankedPosts rp
    JOIN 
        Users u ON rp.PostId = u.Id 
    LEFT JOIN 
        Votes v ON rp.PostId = v.PostId AND v.VoteTypeId IN (8, 9) 
    WHERE 
        rp.PostRank = 1
    GROUP BY 
        rp.PostId, rp.Title, rp.Score, rp.CreationDate, rp.ViewCount, rp.HasAcceptedAnswer, u.DisplayName
)
SELECT 
    pm.PostId,
    pm.Title,
    pm.Score,
    pm.CreationDate,
    pm.ViewCount,
    pm.HasAcceptedAnswer,
    pm.OwnerDisplayName,
    COALESCE(pm.TotalBounty, 0) AS TotalBounty,
    pt.Name AS PostTypeName,
    COUNT(DISTINCT bh.Id) AS BadgeCount
FROM 
    PostMetadata pm
JOIN 
    PostTypes pt ON pm.PostId = pt.Id
LEFT JOIN 
    Badges bh ON bh.UserId = pm.OwnerDisplayName 
WHERE 
    pm.Score > 10
GROUP BY 
    pm.PostId, pm.Title, pm.Score, pm.CreationDate, pm.ViewCount, pm.HasAcceptedAnswer, pm.OwnerDisplayName, pm.TotalBounty, pt.Name
ORDER BY 
    pm.Score DESC, pm.ViewCount DESC
LIMIT 100;