
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.AnswerCount,
        p.OwnerUserId,
        U.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM Posts p
    JOIN Users U ON p.OwnerUserId = U.Id
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),

PostVoteStats AS (
    SELECT
        PostId,
        COUNT(CASE WHEN VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN VoteTypeId = 3 THEN 1 END) AS DownVotes,
        COUNT(*) AS TotalVotes
    FROM Votes
    GROUP BY PostId
),

ClosedPosts AS (
    SELECT 
        p.Id,
        ph.CreationDate AS ClosedDate,
        CT.Name AS CloseReason
    FROM Posts p
    JOIN PostHistory ph ON p.Id = ph.PostId
    JOIN CloseReasonTypes CT ON (ph.Comment::jsonb ->> 'CloseReasonId') = CT.Id::text 
    WHERE ph.PostHistoryTypeId = 10
)

SELECT 
    rp.Title,
    rp.Score,
    rp.CreationDate,
    rp.OwnerDisplayName,
    COALESCE(pvs.UpVotes, 0) AS UpVotes,
    COALESCE(pvs.DownVotes, 0) AS DownVotes,
    COALESCE(cp.ClosedDate, 'Open') AS PostStatus,
    COALESCE(cp.CloseReason, 'N/A') AS CloseReason,
    CASE 
        WHEN rp.AnswerCount > 0 THEN 'Answered'
        ELSE 'Unanswered'
    END AS AnswerStatus
FROM RankedPosts rp
LEFT JOIN PostVoteStats pvs ON rp.Id = pvs.PostId
LEFT JOIN ClosedPosts cp ON rp.Id = cp.Id
WHERE rp.PostRank = 1
ORDER BY rp.Score DESC
LIMIT 50;
