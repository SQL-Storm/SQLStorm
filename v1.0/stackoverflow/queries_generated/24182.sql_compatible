
WITH UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeBadges,
        COUNT(b.Id) AS TotalBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COALESCE(p.AcceptedAnswerId, -1) AS AcceptedAnswer,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)
    GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.AcceptedAnswerId
),
RecentPostHistory AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS rn
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId IN (10, 11, 12, 13, 14)
),
ClosedPosts AS (
    SELECT p.PostId, 
           ph.CreationDate AS ClosedDate,
           ph.PostHistoryTypeId AS CloseType
    FROM PostDetails p
    INNER JOIN RecentPostHistory ph ON p.PostId = ph.PostId
    WHERE ph.PostHistoryTypeId = 10
),
AnalyticalData AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        ub.GoldBadges,
        ub.SilverBadges,
        ub.BronzeBadges,
        COUNT(DISTINCT p.PostId) AS TotalPosts,
        AVG(pd.ViewCount) AS AvgViews,
        SUM(CASE WHEN pd.Score < 0 THEN 1 ELSE 0 END) AS NegativeScoredPosts
    FROM Users u
    LEFT JOIN UserBadges ub ON u.Id = ub.UserId
    LEFT JOIN PostDetails pd ON u.Id = pd.OwnerUserId
    LEFT JOIN ClosedPosts cp ON pd.PostId = cp.PostId
    WHERE u.Reputation > 100
    GROUP BY u.Id, u.DisplayName, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges
),
FinalResult AS (
    SELECT 
        ad.UserId,
        ad.DisplayName,
        ad.GoldBadges,
        ad.SilverBadges,
        ad.BronzeBadges,
        ad.TotalPosts,
        ad.AvgViews,
        ad.NegativeScoredPosts,
        CASE 
            WHEN ad.TotalPosts = 0 THEN 0
            ELSE ROUND(ad.AvgViews / NULLIF(ad.TotalPosts, 0), 2) 
        END AS AvgViewsPerPost,
        CASE 
            WHEN ad.NegativeScoredPosts > 5 THEN 'Frequent Negative Feedback'
            ELSE 'Generally Positive'
        END AS UserFeedback
    FROM AnalyticalData ad
)
SELECT 
    UserId, 
    DisplayName,
    GoldBadges,
    SilverBadges,
    BronzeBadges,
    TotalPosts,
    AvgViews,
    AvgViewsPerPost,
    NegativeScoredPosts,
    UserFeedback
FROM FinalResult
ORDER BY TotalPosts DESC, AvgViewsPerPost DESC
LIMIT 50;
