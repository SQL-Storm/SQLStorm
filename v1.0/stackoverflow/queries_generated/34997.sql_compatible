
WITH RecursivePostHierarchy AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        1 AS Level,
        p.CreationDate
    FROM Posts p
    WHERE p.PostTypeId = 1 
    
    UNION ALL
    
    SELECT 
        a.Id AS PostId,
        a.Title,
        a.OwnerUserId,
        r.Level + 1,
        a.CreationDate
    FROM Posts a
    INNER JOIN RecursivePostHierarchy r ON a.ParentId = r.PostId
    WHERE a.PostTypeId = 2 
),
PostVoteCounts AS (
    
    SELECT 
        p.Id,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id
),
UserBadges AS (
    
    SELECT
        u.Id AS UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
)

SELECT 
    r.PostId AS PostId,
    r.Title AS PostTitle,
    u.DisplayName AS Author,
    COALESCE(b.GoldBadges, 0) AS GoldBadges,
    COALESCE(b.SilverBadges, 0) AS SilverBadges,
    COALESCE(b.BronzeBadges, 0) AS BronzeBadges,
    COALESCE(pvc.UpVotes, 0) AS UpVotes,
    COALESCE(pvc.DownVotes, 0) AS DownVotes,
    r.Level AS PostLevel,
    r.CreationDate,
    CASE 
        WHEN r.Level = 1 THEN 'Question'
        ELSE 'Answer'
    END AS PostType,
    DENSE_RANK() OVER (PARTITION BY r.OwnerUserId ORDER BY r.CreationDate DESC) AS RecentActivityRank
FROM RecursivePostHierarchy r
JOIN Users u ON r.OwnerUserId = u.Id
LEFT JOIN UserBadges b ON u.Id = b.UserId
LEFT JOIN PostVoteCounts pvc ON r.PostId = pvc.Id
ORDER BY r.CreationDate DESC, r.Level;
