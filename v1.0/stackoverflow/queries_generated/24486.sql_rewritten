WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        SUM(v.BountyAmount) OVER (PARTITION BY p.Id) AS TotalBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
        AND p.PostTypeId = 1
        AND (p.Score IS NOT NULL OR p.ViewCount IS NOT NULL)
),
ClosedPostHistory AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        ph.CreationDate,
        ph.PostHistoryTypeId,
        ph.Comment,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS RecentClose
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)  
),
UserMaxReputation AS (
    SELECT 
        Id,
        Reputation,
        ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS MaxReputationRank
    FROM 
        Users
    WHERE 
        Reputation IS NOT NULL
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.ViewCount,
    rp.CreationDate,
    COALESCE(cph.UserId, -1) AS LastClosedByUserId,
    MAX(cph.CreationDate) AS LastClosedDate,
    COALESCE(umb.Reputation, 0) AS UserMaxReputation,
    CASE 
        WHEN SUM(rp.Score) = 0 THEN 'No Activity'
        ELSE 'Active'
    END AS ActivityStatus,
    STRING_AGG(DISTINCT pt.Name, ', ') AS PostTagNames
FROM 
    RankedPosts rp
LEFT JOIN 
    ClosedPostHistory cph ON rp.PostId = cph.PostId AND cph.RecentClose = 1
LEFT JOIN 
    UserMaxReputation umb ON rp.PostId = umb.Id
LEFT JOIN 
    UNNEST(string_to_array(rp.Tags, ',')) AS tag ON TRUE
LEFT JOIN 
    PostTypes pt ON pt.Id = rp.RankScore 
WHERE 
    rp.RankScore <= 10 
GROUP BY 
    rp.PostId, rp.Title, rp.Score, rp.ViewCount, rp.CreationDate, umb.Reputation
HAVING 
    COUNT(cph.PostId) > 1 
ORDER BY 
    rp.Score DESC, LastClosedDate DESC;