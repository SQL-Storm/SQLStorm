
WITH RECURSIVE UserPostCounts AS (
    SELECT 
        OwnerUserId AS UserId,
        COUNT(*) AS PostCount
    FROM 
        Posts
    GROUP BY 
        OwnerUserId
),
UserBadges AS (
    SELECT 
        UserId,
        COUNT(*) AS BadgeCount,
        SUM(CASE WHEN Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Badges
    GROUP BY 
        UserId
),
VotesSummary AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(*) AS TotalVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(ub.BadgeCount, 0) AS BadgeCount,
        COALESCE(upc.PostCount, 0) AS PostCount,
        COALESCE(SUM(v.UpVotes - v.DownVotes), 0) AS VoteDifference
    FROM 
        Users u
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
    LEFT JOIN 
        UserPostCounts upc ON u.Id = upc.UserId
    LEFT JOIN 
        VotesSummary v ON EXISTS (
            SELECT 1 FROM Posts p WHERE p.OwnerUserId = u.Id AND p.Id = v.PostId
        )
    GROUP BY 
        u.Id, u.DisplayName
    ORDER BY 
        VoteDifference DESC, BadgeCount DESC
    LIMIT 10
)
SELECT 
    tu.UserId,
    tu.DisplayName,
    tu.PostCount,
    tu.BadgeCount,
    tu.VoteDifference,
    (
        SELECT 
            STRING_AGG(DISTINCT COALESCE(t.TagName, 'No Tags'), ', ')
        FROM 
            Posts p
        LEFT JOIN 
            Tags t ON t.ExcerptPostId = p.Id
        WHERE 
            p.OwnerUserId = tu.UserId
    ) AS TagsUsed,
    (
        SELECT 
            COUNT(*)
        FROM 
            Comments c
        WHERE 
            c.UserId = tu.UserId
    ) AS CommentCount
FROM 
    TopUsers tu
ORDER BY 
    tu.VoteDifference DESC;
