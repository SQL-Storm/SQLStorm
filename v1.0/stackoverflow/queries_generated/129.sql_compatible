
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        (SELECT COUNT(*) 
         FROM Comments c 
         WHERE c.PostId = p.Id) AS CommentCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
      AND 
        p.Score > 0
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(SUM(b.Class), 0) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
TopUserPosts AS (
    SELECT 
        r.PostId,
        r.Title,
        u.Reputation,
        r.CommentCount,
        CASE 
            WHEN r.Rank <= 5 THEN 'Top Post'
            ELSE 'Regular Post'
        END AS PostCategory
    FROM 
        RankedPosts r
    JOIN 
        UserReputation u ON r.OwnerUserId = u.UserId
    WHERE 
        u.Reputation >= 1000
)
SELECT 
    t.UserId AS TopUserId,
    t.Reputation,
    t.Title,
    t.PostCategory,
    (SELECT 
         STRING_AGG(c.Text, '; ') 
     FROM 
         Comments c 
     WHERE 
         c.PostId = t.PostId) AS CommentsTexts
FROM 
    TopUserPosts t
LEFT JOIN 
    Votes v ON t.PostId = v.PostId AND v.VoteTypeId = 2
WHERE 
    v.Id IS NULL
ORDER BY 
    t.Reputation DESC, t.PostId;
