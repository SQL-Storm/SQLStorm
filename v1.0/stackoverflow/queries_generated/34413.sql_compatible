
WITH RECURSIVE UserPostStats AS (
    SELECT 
        u.Id AS UserId, 
        u.DisplayName, 
        COUNT(p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers,
        SUM(CASE WHEN p.Score >= 0 THEN 1 ELSE 0 END) AS UpvotedPosts,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS DownvotedPosts,
        SUM(COALESCE(ph.Comment, 0)) AS TotalHistoryChanges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
RecentBadges AS (
    SELECT 
        b.UserId, 
        b.Name AS BadgeName, 
        b.Date, 
        ROW_NUMBER() OVER (PARTITION BY b.UserId ORDER BY b.Date DESC) AS rn
    FROM 
        Badges b
),
PopularTags AS (
    SELECT 
        unnest(string_to_array(Tags, '><')) AS TagName, 
        COUNT(*) AS TagCount
    FROM 
        Posts
    WHERE 
        Tags IS NOT NULL
    GROUP BY 
        TagName
    ORDER BY 
        TagCount DESC
    LIMIT 5
)
SELECT 
    ups.UserId, 
    ups.DisplayName,
    ups.TotalPosts, 
    ups.Questions,
    ups.Answers,
    ups.UpvotedPosts,
    ups.DownvotedPosts,
    rb.BadgeName,
    rb.Date AS BadgeDate,
    pt.TagName,
    pt.TagCount
FROM 
    UserPostStats ups
LEFT JOIN 
    RecentBadges rb ON ups.UserId = rb.UserId AND rb.rn = 1
CROSS JOIN 
    PopularTags pt
WHERE 
    ups.TotalPosts > 10 
    AND (ups.TotalHistoryChanges > 5 OR rb.BadgeName IS NOT NULL)
ORDER BY 
    ups.TotalPosts DESC, 
    ups.DisplayName;
