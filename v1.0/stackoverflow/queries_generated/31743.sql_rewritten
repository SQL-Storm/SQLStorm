WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        1 AS Level,
        CAST(p.Title AS VARCHAR(MAX)) AS Path
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    
    UNION ALL
    
    SELECT 
        p2.Id,
        p2.Title,
        p2.CreationDate,
        p2.OwnerUserId,
        Level + 1,
        CAST(cte.Path + ' -> ' + p2.Title AS VARCHAR(MAX))
    FROM 
        Posts p2
    INNER JOIN 
        RecursivePostCTE cte ON cte.PostId = p2.ParentId
)

SELECT 
    u.DisplayName AS AuthorName,
    COUNT(DISTINCT p.Id) AS NumberOfPosts,
    SUM(COALESCE(v.UpVotes, 0)) AS TotalUpVotes,
    SUM(COALESCE(v.DownVotes, 0)) AS TotalDownVotes,
    MAX(REPLACE(REPLACE(STRING_AGG(DISTINCT t.TagName, ', '), 'NULL', ''), ' ,', '')) AS Tags,
    AVG(DATEDIFF(DAY, p.CreationDate, GETDATE())) AS AverageAgeInDays,
    (SELECT 
        COUNT(*) 
     FROM 
        Badges b 
     WHERE 
        b.UserId = u.Id AND b.Class = 1) AS GoldBadges,
    (SELECT 
        COUNT(*) 
     FROM 
        Badges b 
     WHERE 
        b.UserId = u.Id AND b.Class = 2) AS SilverBadges,
    (SELECT 
        COUNT(*) 
     FROM 
        Badges b 
     WHERE 
        b.UserId = u.Id AND b.Class = 3) AS BronzeBadges
FROM 
    Users u
LEFT JOIN 
    Posts p ON p.OwnerUserId = u.Id 
LEFT JOIN 
    (SELECT 
         PostId, 
         SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, 
         SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes 
     FROM 
         Votes 
     GROUP BY 
         PostId) v ON v.PostId = p.Id
LEFT JOIN 
    (SELECT 
         PostId, 
         STRING_AGG(TagName, ', ') AS TagName 
     FROM 
         Tags t 
     INNER JOIN 
         STRING_SPLIT(p.Tags, ', ') AS splitTags ON splitTags.value = t.TagName
     GROUP BY 
         PostId) t ON t.PostId = p.Id
WHERE 
    u.Reputation > 1000 
GROUP BY 
    u.DisplayName
HAVING 
    COUNT(DISTINCT p.Id) > 10 
ORDER BY 
    NumberOfPosts DESC, 
    TotalUpVotes DESC;