WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.PostTypeId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate ASC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
        AND p.Score > 0
),
FilteredUsers AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.DisplayName,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.Reputation BETWEEN 1000 AND 10000
    GROUP BY 
        u.Id
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        COUNT(ph.Id) AS HistoryCount,
        STRING_AGG(ph.Comment, '; ') AS UserComments,
        MAX(ph.CreationDate) AS LastModified
    FROM 
        PostHistory ph
    WHERE 
        ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months' 
        AND ph.PostHistoryTypeId IN (10, 11, 12, 13, 14, 15)  
    GROUP BY 
        ph.PostId, ph.UserId
),
UserPostInteractions AS (
    SELECT 
        u.UserId,
        COUNT(DISTINCT p.PostId) AS InteractionCount,
        MAX(v.CreationDate) AS LastVoteDate,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,  
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes  
    FROM 
        FilteredUsers u
    LEFT JOIN 
        Votes v ON u.UserId = v.UserId
    LEFT JOIN 
        Posts p ON v.PostId = p.Id
    GROUP BY 
        u.UserId
)
SELECT 
    u.DisplayName,
    u.Reputation,
    COALESCE(f.InteractionCount, 0) AS InteractionCount,
    COALESCE(f.LastVoteDate, 'No interactions') AS LastVoteDate,
    COUNT(DISTINCT rp.PostId) AS HighRankedPostsCount,
    p.UserComments,
    p.LastModified
FROM 
    FilteredUsers u
LEFT JOIN 
    UserPostInteractions f ON u.UserId = f.UserId
LEFT JOIN 
    RankedPosts rp ON u.UserId IN (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
LEFT JOIN 
    (SELECT PostId, UserId, UserComments, LastModified FROM PostHistoryDetails) p ON rp.PostId = p.PostId
WHERE 
    u.Reputation IS NOT NULL
GROUP BY 
    u.UserId, u.DisplayName, u.Reputation, f.InteractionCount, f.LastVoteDate, p.UserComments, p.LastModified
HAVING 
    COUNT(DISTINCT rp.PostId) > 0
ORDER BY 
    u.Reputation DESC, InteractionCount DESC;