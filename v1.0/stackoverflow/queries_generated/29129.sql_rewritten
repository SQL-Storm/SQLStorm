WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        p.CreationDate,
        p.LastActivityDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.LastActivityDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.Tags,
        rp.OwnerDisplayName,
        rp.CreationDate,
        rp.LastActivityDate
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn <= 5 
),
TagStats AS (
    SELECT 
        unnest(string_to_array(substring(Posts.Tags, 2, length(Posts.Tags)-2), '><')) AS Tag,
        COUNT(Posts.Id) AS TagCount
    FROM 
        Posts
    GROUP BY 
        Tag
),
UserPostsStats AS (
    SELECT 
        u.Id AS UserId,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.Body,
    fp.Tags,
    fp.OwnerDisplayName,
    fp.CreationDate,
    fp.LastActivityDate,
    ts.Tag,
    ts.TagCount,
    ups.TotalPosts,
    ups.TotalAnswers,
    ups.TotalQuestions
FROM 
    FilteredPosts fp
JOIN 
    TagStats ts ON ts.Tag = ANY(string_to_array(substring(fp.Tags, 2, length(fp.Tags)-2), '><'))
JOIN 
    UserPostsStats ups ON fp.OwnerUserId = ups.UserId
ORDER BY 
    fp.CreationDate DESC;