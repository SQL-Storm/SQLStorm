
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS rn,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= DATE_ADD(CURRENT_DATE, INTERVAL -1 YEAR)
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.OwnerUserId
),
UserScores AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        SUM(p.Score) AS TotalScore,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.Reputation
),
TopUsers AS (
    SELECT 
        UserId,
        Reputation,
        TotalScore,
        PostCount,
        RANK() OVER (ORDER BY TotalScore DESC) AS UserRank
    FROM 
        UserScores
    WHERE 
        PostCount > 0
)
SELECT 
    up.DisplayName,
    up.Reputation,
    up.TotalScore,
    rp.Title,
    rp.ViewCount,
    rp.CommentCount,
    rp.CreationDate,
    COALESCE(b.Class, 'No Badge') AS BadgeClass,
    COUNT(CASE WHEN v.VoteTypeId = 2 THEN v.Id END) AS UpVotes,
    COUNT(CASE WHEN v.VoteTypeId = 3 THEN v.Id END) AS DownVotes
FROM 
    TopUsers tu
JOIN 
    Users up ON tu.UserId = up.Id
JOIN 
    RankedPosts rp ON rp.OwnerUserId = up.Id
LEFT JOIN 
    Badges b ON up.Id = b.UserId
LEFT JOIN 
    Votes v ON rp.Id = v.PostId
WHERE 
    tu.UserRank <= 10
GROUP BY 
    up.DisplayName, up.Reputation, up.TotalScore, rp.Title, rp.ViewCount, rp.CommentCount, rp.CreationDate, b.Class
ORDER BY 
    tu.TotalScore DESC, rp.Score DESC;
