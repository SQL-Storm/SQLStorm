WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.Id
),
UserReputationRanks AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM 
        Users u
),
TopPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CreationDate,
        r.Level,
        u.DisplayName AS OwnerDisplayName
    FROM 
        Posts p
    LEFT JOIN 
        RecursivePostHierarchy r ON p.Id = r.Id
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
        AND p.Score > 100
),
PostStats AS (
    SELECT 
        Title,
        OwnerDisplayName,
        COUNT(Comment.Id) AS CommentCount,
        SUM(V.Score) AS TotalVotes,
        MAX(V.CreationDate) AS LastVoteDate
    FROM 
        TopPosts tp
    LEFT JOIN 
        Comments Comment ON tp.Id = Comment.PostId
    LEFT JOIN 
        Votes V ON tp.Id = V.PostId
    GROUP BY 
        Title, OwnerDisplayName
)
SELECT 
    ps.Title,
    ps.OwnerDisplayName,
    ps.CommentCount,
    ps.TotalVotes,
    ps.LastVoteDate,
    upr.ReputationRank
FROM 
    PostStats ps
INNER JOIN 
    UserReputationRanks upr ON ps.OwnerDisplayName = upr.DisplayName
WHERE 
    ps.CommentCount > 50
ORDER BY 
    ps.TotalVotes DESC, 
    upr.ReputationRank ASC
LIMIT 10;