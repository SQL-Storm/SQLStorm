WITH UserScore AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(COALESCE(v.VoteTypeId = 2, 0)) AS UpVotes,
        SUM(COALESCE(v.VoteTypeId = 3, 0)) AS DownVotes,
        SUM(COALESCE(v.VoteTypeId = 4, 0)) AS OffensiveVotes,
        COUNT(DISTINCT p.Id) AS PostCount,
        COUNT(DISTINCT c.Id) AS CommentCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        pt.Name AS PostType,
        COUNT(c.Id) AS Comments,
        SUM(CASE WHEN pt.Id = 1 THEN 1 ELSE 0 END) AS IsQuestion,
        SUM(CASE WHEN pt.Id = 2 THEN 1 ELSE 0 END) AS IsAnswer
    FROM 
        Posts p
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, pt.Name
),
Ranking AS (
    SELECT 
        us.UserId,
        us.DisplayName,
        us.UpVotes,
        us.DownVotes,
        us.PostCount,
        us.CommentCount,
        ROW_NUMBER() OVER (ORDER BY us.UpVotes DESC, us.DownVotes ASC) AS Rank
    FROM 
        UserScore us
)
SELECT 
    r.Rank,
    r.DisplayName,
    r.UpVotes,
    r.DownVotes,
    p.Title,
    p.Score,
    p.ViewCount,
    p.CreationDate,
    p.PostType
FROM 
    Ranking r
JOIN 
    PostStats p ON r.UserId = p.OwnerUserId
WHERE 
    r.Rank <= 10
ORDER BY 
    r.Rank, p.Score DESC;