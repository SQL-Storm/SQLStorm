
WITH RankedPosts AS (
    SELECT
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM Posts p
    WHERE p.CreationDate > '2022-01-01' AND p.Score IS NOT NULL
),
UserReputation AS (
    SELECT 
        u.Id AS UserId, 
        SUM(b.Class) AS TotalBadges,
        SUM(CASE WHEN b.TagBased = 1 THEN 1 ELSE 0 END) AS TagBadges,
        COUNT(DISTINCT v.PostId) AS TotalVotes,
        COALESCE(MAX(u.Reputation), 0) AS Reputation
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY u.Id
),
PostHistoryDetails AS (
    SELECT
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes,
        MAX(ph.CreationDate) FILTER (WHERE ph.PostHistoryTypeId IN (10, 11)) AS LastClosedDate
    FROM PostHistory ph
    JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY ph.PostId
),
UserActivity AS (
    SELECT 
        p.OwnerUserId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT pl.RelatedPostId) AS LinkedPosts,
        COUNT(DISTINCT ph.PostHistoryTypeId) FILTER (WHERE ph.PostHistoryTypeId = 10) AS CloseVotes 
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN PostLinks pl ON p.Id = pl.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    WHERE p.CreationDate >= DATEADD(DAY, -30, '2024-10-01')
    GROUP BY p.OwnerUserId
)
SELECT
    u.DisplayName,
    u.Reputation,
    COALESCE(ur.TotalBadges, 0) AS TotalBadges,
    COALESCE(ur.TagBadges, 0) AS TagBadges,
    COALESCE(ua.CommentCount, 0) AS CommentCount,
    COALESCE(ua.LinkedPosts, 0) AS LinkedPosts,
    COUNT(DISTINCT rp.Id) AS TotalPosts,
    COALESCE(MAX(phd.LastClosedDate), 'Never Closed') AS LastClosedPostDate,
    STRING_AGG(DISTINCT phd.HistoryTypes) AS PostHistoryTypes,
    MAX(rp.ViewCount) AS MaxViewCount,
    AVG(rp.Score) AS AveragePostScore
FROM Users u
LEFT JOIN UserReputation ur ON u.Id = ur.UserId
LEFT JOIN UserActivity ua ON u.Id = ua.OwnerUserId
LEFT JOIN RankedPosts rp ON u.Id = rp.OwnerUserId
LEFT JOIN PostHistoryDetails phd ON rp.Id = phd.PostId
WHERE u.Reputation >= 1000
GROUP BY u.Id, u.DisplayName, u.Reputation
ORDER BY TotalPosts DESC, u.Reputation DESC
LIMIT 10;
