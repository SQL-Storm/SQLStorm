WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
),
TopPosts AS (
    SELECT 
        PostId, 
        Title, 
        CreatedDate,
        OwnerUserId, 
        CommentCount, 
        UpVotes, 
        DownVotes
    FROM 
        RankedPosts 
    WHERE 
        rn <= 10
),
UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        AVG(u.Reputation) AS AvgReputation,
        SUM(p.ViewCount) AS TotalPostViews,
        SUM(p.AnswerCount) AS TotalAnswers,
        MAX(lastAccessDate) AS LastAccessed
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    tp.Title,
    tp.CommentCount,
    tp.UpVotes,
    tp.DownVotes,
    ue.DisplayName AS UserDisplay,
    CASE 
        WHEN ue.BadgeCount > 0 THEN 'Badged User' 
        ELSE 'Regular User' 
    END AS UserType,
    GREATEST(ue.TotalPostViews, 1) AS AdjustedViews,  
    CASE 
        WHEN ue.AvgReputation IS NULL THEN 'No Reputation Data'
        ELSE ROUND(ue.AvgReputation, 2)::TEXT
    END AS AvgReputationDisplay,
    COALESCE(ue.LastAccessed::DATE, 'N/A') AS LastAccessDate
FROM 
    TopPosts tp
JOIN 
    UserEngagement ue ON tp.OwnerUserId = ue.UserId
ORDER BY 
    tp.UpVotes DESC, 
    tp.CommentCount DESC
LIMIT 100
OFFSET (SELECT COUNT(*) FROM TopPosts) / 2;