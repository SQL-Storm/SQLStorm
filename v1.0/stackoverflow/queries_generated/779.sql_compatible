
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AcceptedAnswerId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.AcceptedAnswerId, p.OwnerUserId
),
TopPosts AS (
    SELECT 
        rp.*,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = rp.PostId AND v.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*)
         FROM Votes v 
         WHERE v.PostId = rp.PostId AND v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank = 1
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.CreationDate,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    COALESCE(tp.UpVoteCount - tp.DownVoteCount, 0) AS NetVote,
    CASE 
        WHEN tp.AcceptedAnswerId IS NOT NULL THEN 'Accepted Answer Exists' 
        ELSE 'No Accepted Answer' 
    END AS AnswerStatus
FROM 
    TopPosts tp
LEFT JOIN 
    Users u ON tp.OwnerUserId = u.Id
WHERE 
    u.Reputation > 1000 
    AND tp.ViewCount > 100
ORDER BY 
    NetVote DESC, tp.ViewCount DESC
LIMIT 10;
