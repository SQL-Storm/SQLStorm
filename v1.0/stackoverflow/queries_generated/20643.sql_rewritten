WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.Score IS NOT NULL
        AND p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        COUNT(*) AS ChangeCount
    FROM 
        PostHistory ph
    WHERE 
        ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
        AND ph.PostHistoryTypeId IN (10, 11, 12) 
    GROUP BY 
        ph.PostId, 
        ph.PostHistoryTypeId
),
TopViews AS (
    SELECT 
        p.OwnerUserId,
        SUM(p.ViewCount) AS TotalViews
    FROM 
        Posts p
    GROUP BY 
        p.OwnerUserId
),
CombinedData AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(rb.GoldBadges, 0) AS GoldBadges,
        COALESCE(rb.SilverBadges, 0) AS SilverBadges,
        COALESCE(rb.BronzeBadges, 0) AS BronzeBadges,
        COALESCE(dp.PostRank, 0) AS TopPostRank,
        COALESCE(tv.TotalViews, 0) AS TotalViews,
        COALESCE(phd.ChangeCount, 0) AS HistoryChanges
    FROM 
        Users u
    LEFT JOIN UserBadges rb ON u.Id = rb.UserId
    LEFT JOIN RankedPosts dp ON u.Id = dp.OwnerUserId AND dp.PostRank = 1
    LEFT JOIN TopViews tv ON u.Id = tv.OwnerUserId
    LEFT JOIN PostHistoryDetails phd ON u.Id = (SELECT OwnerUserId FROM Posts WHERE Id = phd.PostId)
    WHERE 
        u.Reputation > 1000
)
SELECT 
    cd.UserId,
    cd.DisplayName,
    cd.GoldBadges,
    cd.SilverBadges,
    cd.BronzeBadges,
    cd.TopPostRank,
    cd.TotalViews,
    cd.HistoryChanges,
    CASE 
        WHEN cd.TopPostRank > 0 THEN 'Active Innovator'
        WHEN cd.TotalViews > 1000 THEN 'Notable Contributor'
        ELSE 'Newbie'
    END AS UserStatus
FROM 
    CombinedData cd
ORDER BY 
    cd.Reputation DESC NULLS LAST,
    cd.TotalViews DESC NULLS LAST;