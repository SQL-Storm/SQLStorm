WITH RecursivePostHierarchy AS (
    
    SELECT
        Id,
        ParentId,
        Title,
        CreationDate,
        Score,
        0 AS Level
    FROM Posts
    WHERE ParentId IS NULL

    UNION ALL

    SELECT
        p.Id,
        p.ParentId,
        p.Title,
        p.CreationDate,
        p.Score,
        Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.Id
),
VotesSummary AS (
    
    SELECT
        PostId,
        COUNT(*) AS TotalVotes,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Votes
    GROUP BY PostId
),
PopularPosts AS (
    
    SELECT
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(vs.TotalVotes, 0) AS TotalVotes,
        COALESCE(vs.UpVotes, 0) AS UpVotes,
        COALESCE(vs.DownVotes, 0) AS DownVotes,
        ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM Posts p
    LEFT JOIN VotesSummary vs ON p.Id = vs.PostId
    WHERE p.PostTypeId = 1
),
UserEngagement AS (
    
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostsCreated,
        COUNT(DISTINCT c.Id) AS CommentsMade,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounty
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Comments c ON u.Id = c.UserId
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY u.Id, u.DisplayName
)
SELECT
    pp.Title AS PopularPostTitle,
    pp.Score AS PopularPostScore,
    pp.TotalVotes,
    pp.UpVotes,
    pp.DownVotes,
    ue.DisplayName AS EngagedUser,
    ue.PostsCreated,
    ue.CommentsMade,
    ue.TotalBounty
FROM PopularPosts pp
JOIN UserEngagement ue ON pp.Rank <= 10  
WHERE ue.PostsCreated > 0
ORDER BY pp.Score DESC, ue.TotalBounty DESC
OPTION (MAXRECURSION 100);