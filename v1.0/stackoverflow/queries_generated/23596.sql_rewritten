WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        p.ViewCount, 
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COALESCE((
            SELECT COUNT(*)
            FROM Votes v
            WHERE v.PostId = p.Id AND v.VoteTypeId = 2
        ), 0) AS UpvoteCount,
        COALESCE((
            SELECT COUNT(*)
            FROM Votes v
            WHERE v.PostId = p.Id AND v.VoteTypeId = 3
        ), 0) AS DownvoteCount
    FROM 
        Posts p
    WHERE
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PostsWithComments AS (
    SELECT 
        rp.PostId, 
        rp.Title, 
        rp.CreationDate, 
        rp.Score, 
        rp.ViewCount, 
        rp.Rank, 
        COALESCE(c.CommentCount, 0) AS CommentCount
    FROM 
        RankedPosts rp
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON rp.PostId = c.PostId
),
AggregatedVotes AS (
    SELECT 
        p.PostId,
        SUM(CASE WHEN v.VoteTypeId IN (2, 4) THEN 1 ELSE 0 END) AS PositiveVotes,
        SUM(CASE WHEN v.VoteTypeId IN (3, 12) THEN 1 ELSE 0 END) AS NegativeVotes
    FROM 
        Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.PostId
)
SELECT 
    pwc.PostId,
    pwc.Title,
    pwc.CreationDate,
    pwc.Score,
    pwc.ViewCount,
    pwc.Rank,
    pwc.CommentCount,
    av.PositiveVotes,
    av.NegativeVotes,
    (pwc.Score + av.PositiveVotes - av.NegativeVotes) AS AdjustedScore,
    (SELECT STRING_AGG(t.TagName, ', ') 
     FROM Tags t 
     WHERE t.Id IN (SELECT UNNEST(string_to_array(p.Tags, '>'))::int)) AS RelatedTags
FROM 
    PostsWithComments pwc
JOIN 
    AggregatedVotes av ON pwc.PostId = av.PostId
WHERE 
    (pwc.ViewCount > 100 OR pwc.CommentCount > 5)
    AND pwc.Rank <= 10
ORDER BY 
    AdjustedScore DESC;