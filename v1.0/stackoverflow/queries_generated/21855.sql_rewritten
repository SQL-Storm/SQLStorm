WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserRank,
        COALESCE(SUM(v.VoteTypeId = 2) OVER (PARTITION BY p.Id), 0) AS UpVotes,
        COALESCE(SUM(v.VoteTypeId = 3) OVER (PARTITION BY p.Id), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),

PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        MAX(ph.CreationDate) AS LastModificationDate,
        STRING_AGG(DISTINCT CASE 
            WHEN ph.PostHistoryTypeId IN (10, 11) THEN cr.Name 
            ELSE 'Other' END, ', ') AS EditComments
    FROM 
        PostHistory ph
    LEFT JOIN 
        CloseReasonTypes cr ON cr.Id = CAST(ph.Comment AS INT)
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId
),

FinalPostData AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        CASE 
            WHEN b.Id IS NOT NULL THEN 'Winner'
            ELSE 'Participant'
        END AS WinnerStatus,
        COALESCE(phd.LastModificationDate, 'No Edits') AS LastEditDate,
        phd.EditComments
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges b ON b.UserId = rp.UserRank AND b.Class = 1
    LEFT JOIN 
        PostHistoryDetails phd ON rp.PostId = phd.PostId
)

SELECT 
    *,
    CASE 
        WHEN Score <= 0 THEN 'Needs Attention'
        WHEN CommentCount > 10 AND UpVotes > DownVotes THEN 'Popular Post'
        ELSE 'Standard Post'
    END AS PostCategory
FROM 
    FinalPostData
WHERE 
    (CommentCount > 5 OR UpVotes > 3)
    AND WinnerStatus = 'Winner'
ORDER BY 
    Score DESC, LastEditDate DESC NULLS LAST;