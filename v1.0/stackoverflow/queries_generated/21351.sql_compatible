
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.OwnerUserId,
        p.PostTypeId,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) AS CommentCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM Posts p
    LEFT JOIN Comments c ON c.PostId = p.Id
    LEFT JOIN (
        SELECT 
            unnest(string_to_array(substring(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS TagName
        FROM Posts p
    ) t ON true
    GROUP BY p.Id, p.OwnerUserId, p.PostTypeId, p.CreationDate, p.Score
),
UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT v.PostId) AS VotedPosts,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Users u
    LEFT JOIN Votes v ON v.UserId = u.Id
    GROUP BY u.Id, u.DisplayName
),
PostHistoryAnalysis AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.UserId,
        MAX(ph.CreationDate) AS LastModification,
        COUNT(*) AS ChangeCount,
        SUM(CASE WHEN ph.PostHistoryTypeId IN (10, 11, 12) THEN 1 ELSE 0 END) AS CloseOpenCount
    FROM PostHistory ph
    GROUP BY ph.PostId, ph.PostHistoryTypeId, ph.UserId
)
SELECT 
    rp.PostId,
    rp.OwnerUserId,
    ue.DisplayName,
    rp.RankScore,
    rp.CommentCount,
    ua.VotedPosts,
    ua.UpVotes,
    ua.DownVotes,
    COALESCE(pah.LastModification, 'N/A') AS LastChange,
    pah.ChangeCount,
    pah.CloseOpenCount,
    rp.Tags,
    CASE 
        WHEN rp.ViewCount IS NULL THEN 'No Views'
        WHEN rp.ViewCount < 100 THEN 'Low Engagement'
        WHEN rp.ViewCount BETWEEN 100 AND 1000 THEN 'Moderate Engagement'
        ELSE 'High Engagement'
    END AS EngagementLevel
FROM RankedPosts rp
LEFT JOIN UserEngagement ue ON ue.UserId = rp.OwnerUserId
LEFT JOIN PostHistoryAnalysis pah ON pah.PostId = rp.PostId
WHERE 
    rp.RankScore <= 5
    AND rp.PostTypeId = 1
    AND EXISTS (
        SELECT 1
        FROM Votes v
        WHERE v.PostId = rp.PostId AND v.VoteTypeId IN (2, 3)
    )
ORDER BY rp.RankScore ASC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
