
WITH RecursiveCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        u.DisplayName AS OwnerName,
        1 AS Level
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        u.DisplayName AS OwnerName,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursiveCTE r ON p.ParentId = r.PostId
    JOIN 
        Users u ON p.OwnerUserId = u.Id
)
SELECT 
    r.PostId,
    r.Title,
    r.OwnerName,
    r.Score,
    r.CreationDate,
    COUNT(c.Id) AS CommentCount,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvoteCount,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
    r.Level
FROM 
    RecursiveCTE r
LEFT JOIN 
    Comments c ON r.PostId = c.PostId
LEFT JOIN 
    Votes v ON r.PostId = v.PostId
LEFT JOIN 
    (SELECT 
        p.Id AS PostId, 
        unnest(string_to_array(p.Tags, ',')) AS TagName 
     FROM 
        Posts p) AS t ON t.PostId = r.PostId
GROUP BY 
    r.PostId, r.Title, r.OwnerName, r.Score, r.CreationDate, r.Level
HAVING 
    COUNT(c.Id) > 5 AND SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) > 10
ORDER BY 
    r.Score DESC, r.CreationDate DESC;
