WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        Score,
        CreationDate,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.Score,
        p.CreationDate,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.Id
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title
),
RankedPosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CommentCount,
        ps.VoteCount,
        ps.UpVotes,
        ps.DownVotes,
        r.Level AS HierarchyLevel
    FROM 
        PostStatistics ps
    LEFT JOIN 
        RecursivePostHierarchy r ON ps.PostId = r.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CommentCount,
    rp.VoteCount,
    rp.UpVotes,
    rp.DownVotes,
    COALESCE(rp.HierarchyLevel, -1) AS HierarchyLevel,
    CASE WHEN rp.UpVotes > rp.DownVotes THEN 'Positive' ELSE 'Negative' END AS Sentiment,
    CASE 
        WHEN rp.HierarchyLevel IS NULL AND rp.UpVotes > 0 THEN 'Top Level Post with Votes'
        WHEN rp.HierarchyLevel IS NOT NULL THEN 'Child Post'
        ELSE 'Unclassified'
    END AS Classification
FROM 
    RankedPosts rp
WHERE 
    (rp.UpVotes = 0 OR rp.DownVotes = 0 OR rp.CommentCount > 10)
ORDER BY 
    rp.VoteCount DESC, 
    rp.CommentCount DESC;