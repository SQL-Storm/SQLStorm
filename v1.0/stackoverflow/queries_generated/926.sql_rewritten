WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
TopUsers AS (
    SELECT 
        OwnerUserId,
        COUNT(DISTINCT PostId) AS PostCount,
        AVG(Score) AS AverageScore
    FROM 
        RankedPosts
    WHERE 
        rn = 1
    GROUP BY 
        OwnerUserId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        ARRAY_AGG(b.Name) AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    u.DisplayName,
    u.Reputation,
    t.PostCount,
    t.AverageScore,
    COALESCE(ub.BadgeNames, '{}') AS Badges,
    r.PostId,
    r.Title,
    r.CommentCount,
    r.UpVotes,
    r.DownVotes
FROM 
    Users u
JOIN 
    TopUsers t ON u.Id = t.OwnerUserId
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
JOIN 
    RankedPosts r ON u.Id = r.OwnerUserId
ORDER BY 
    t.PostCount DESC, 
    r.Score DESC
LIMIT 10;