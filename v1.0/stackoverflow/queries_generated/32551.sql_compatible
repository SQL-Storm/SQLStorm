
WITH RECURSIVE UserPostCount AS (
    SELECT u.Id AS UserId, COUNT(p.Id) AS PostCount
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    GROUP BY u.Id
),
PostDetails AS (
    SELECT p.Id AS PostId, p.Title, p.Score, p.CreationDate, 
           COALESCE(c.CommentCount, 0) AS CommentCount,
           COALESCE(a.VoteCount, 0) AS UpVotes,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM Posts p
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS VoteCount
        FROM Votes
        WHERE VoteTypeId = 2 
        GROUP BY PostId
    ) a ON p.Id = a.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
TopUsers AS (
    SELECT u.Id, u.DisplayName, u.Reputation,
           COALESCE(up.PostCount, 0) AS PostCount
    FROM Users u
    LEFT JOIN UserPostCount up ON u.Id = up.UserId
    WHERE u.Reputation > 1000
)
SELECT 
    tu.DisplayName,
    tu.Reputation,
    pd.Title,
    pd.Score,
    pd.CommentCount,
    pd.UpVotes,
    pd.Rank
FROM TopUsers tu
JOIN PostDetails pd ON tu.Id = pd.OwnerUserId
WHERE pd.Rank <= 5 
ORDER BY tu.Reputation DESC, pd.Score DESC;
