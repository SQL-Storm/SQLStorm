WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        CreationDate,
        Score,
        0 AS Level
    FROM Posts
    WHERE ParentId IS NULL 

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.Score,
        Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.Id
),
PostSummary AS (
    SELECT 
        p.Id,
        p.Title,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS UpVotesCount,
        MAX(b.Class) AS HighestBadgeClass,
        COUNT(DISTINCT ph.Id) AS EditsCount,
        SUM(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 ELSE 0 END) AS CloseReopenCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
    LEFT JOIN Badges b ON p.OwnerUserId = b.UserId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    GROUP BY p.Id
),
MostActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(distinct p.Id) AS PostsCount,
        SUM(p.Score) AS TotalScore,
        RANK() OVER (ORDER BY COUNT(DISTINCT p.Id) DESC) AS UserRank
    FROM Users u
    INNER JOIN Posts p ON u.Id = p.OwnerUserId
    GROUP BY u.Id, u.DisplayName
),
FilteredPosts AS (
    SELECT 
        ps.*,
        pha.UserId,
        pha.DisplayName
    FROM PostSummary ps
    LEFT JOIN MostActiveUsers pha ON ps.OwnerUserId = pha.UserId
    WHERE ps.CommentCount > 0
      AND ps.CloseReopenCount > 0
      AND ps.HighestBadgeClass IS NOT NULL
      AND ps.Id IN (SELECT Id FROM RecursivePostHierarchy WHERE Level < 2) 
)
SELECT 
    fp.Title,
    fp.CommentCount,
    fp.UpVotesCount,
    fp.EditsCount,
    fp.CloseReopenCount,
    CONCAT('User: ', fp.DisplayName, ' (Rank: ', COALESCE(mau.UserRank, 'N/A'), ')') AS UserDetails
FROM FilteredPosts fp
LEFT JOIN MostActiveUsers mau ON fp.OwnerUserId = mau.UserId
ORDER BY fp.UpVotesCount DESC, fp.CommentCount DESC;