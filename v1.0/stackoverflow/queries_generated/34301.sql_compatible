
WITH RecursivePostCTE AS (
    SELECT 
        Id,
        ParentId,
        Score,
        CreationDate,
        ROW_NUMBER() OVER (PARTITION BY ParentId ORDER BY Score DESC) AS AnswerRank
    FROM 
        Posts
    WHERE 
        PostTypeId = 2
),
UserBadgeCounts AS (
    SELECT 
        UserId,
        COUNT(*) AS BadgeCount,
        SUM(CASE WHEN Class = 1 THEN 1 ELSE 0 END) AS GoldCount,
        SUM(CASE WHEN Class = 2 THEN 1 ELSE 0 END) AS SilverCount,
        SUM(CASE WHEN Class = 3 THEN 1 ELSE 0 END) AS BronzeCount
    FROM 
        Badges
    GROUP BY 
        UserId
),
TopUsers AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        U.Reputation,
        COALESCE(UB.BadgeCount, 0) AS TotalBadges,
        COALESCE(UB.GoldCount, 0) AS GoldBadges,
        COALESCE(UB.SilverCount, 0) AS SilverBadges,
        COALESCE(UB.BronzeCount, 0) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        UserBadgeCounts UB ON U.Id = UB.UserId
    WHERE 
        U.Reputation > 1000
),
ClosedPostHistories AS (
    SELECT 
        PHPostId,
        COUNT(*) AS CloseCount
    FROM 
        PostHistory
    WHERE 
        PostHistoryTypeId = 10
    GROUP BY 
        PHPostId
    HAVING COUNT(*) > 1
),
PopularTags AS (
    SELECT 
        Tags.TagName,
        COUNT(P.Id) AS PostCount
    FROM 
        Tags
    JOIN 
        Posts P ON P.Tags LIKE '%' || Tags.TagName || '%'
    GROUP BY 
        Tags.TagName
    HAVING 
        COUNT(P.Id) > 50
)
SELECT 
    U.UserId,
    U.DisplayName,
    U.Reputation,
    P.Title AS TopAnswerTitle,
    P.Score AS TopAnswerScore,
    COALESCE(Closed.CloseCount, 0) AS TotalClosures,
    T.TagName,
    T.PostCount
FROM 
    TopUsers U
LEFT JOIN 
    (SELECT 
        P.Id, P.Title, P.Score
     FROM 
        Posts P
     JOIN 
        RecursivePostCTE R ON P.Id = R.ParentId
     WHERE 
        R.AnswerRank = 1) P ON U.UserId = P.OwnerUserId
LEFT JOIN 
    ClosedPostHistories Closed ON P.Id = Closed.PHPostId
JOIN 
    PopularTags T ON T.TagName IN (SELECT unnest(string_to_array(P.Tags, ',')) FROM Posts P WHERE P.Id = P.Id)
WHERE 
    U.Reputation >= 2000
GROUP BY 
    U.UserId, U.DisplayName, U.Reputation, P.Title, P.Score, Closed.CloseCount, T.TagName, T.PostCount
ORDER BY 
    U.Reputation DESC, U.DisplayName;
