
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        p.OwnerUserId
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
),
TopPosts AS (
    SELECT 
        rp.Title,
        rp.Score,
        u.DisplayName AS Owner,
        RANK() OVER (ORDER BY rp.Score DESC) AS OwnerRank
    FROM 
        RankedPosts rp
    JOIN 
        Users u ON rp.OwnerUserId = u.Id
    WHERE 
        rp.Rank <= 5
),
UserBadges AS (
    SELECT
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    tp.Title AS TopPostTitle,
    tp.Score AS TopPostScore,
    tp.Owner AS PostOwner,
    ub.BadgeCount AS OwnerBadgeCount,
    ub.BadgeNames AS OwnerBadges,
    COALESCE(COUNT(c.Id), 0) AS CommentCount,
    COALESCE(AVG(c.Score), 0) AS AvgCommentScore,
    STRING_AGG(DISTINCT pt.Name, ', ') AS PostTypeNames
FROM 
    TopPosts tp
LEFT JOIN 
    Comments c ON tp.PostId = c.PostId
LEFT JOIN 
    Users u ON tp.Owner = u.DisplayName
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
LEFT JOIN 
    PostTypes pt ON pt.Id = (SELECT PostTypeId FROM Posts WHERE Id = tp.PostId) 
GROUP BY 
    tp.Title, tp.Score, tp.Owner, ub.BadgeCount, ub.BadgeNames
HAVING 
    COUNT(c.Id) > 0 OR AVG(c.Score) IS NOT NULL
ORDER BY 
    tp.Score DESC
LIMIT 10;
