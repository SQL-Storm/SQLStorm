WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        unnest(string_to_array(substring(Tags, 2, length(Tags)-2), '><')) AS Tag
    FROM 
        Posts p
    WHERE 
        p.Tags IS NOT NULL
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.OwnerDisplayName,
        rp.Score,
        rp.ViewCount,
        pt.Tag
    FROM 
        RankedPosts rp
    JOIN 
        PostTags pt ON rp.PostId = pt.PostId
    WHERE 
        rp.Rank <= 5
)
SELECT 
    t.Tag,
    COUNT(*) AS PostCount,
    AVG(tp.Score) AS AverageScore,
    SUM(tp.ViewCount) AS TotalViews,
    ARRAY_AGG(DISTINCT tp.Title) AS TopPostTitles
FROM 
    TopPosts tp
GROUP BY 
    t.Tag
ORDER BY 
    PostCount DESC, AverageScore DESC
LIMIT 10;