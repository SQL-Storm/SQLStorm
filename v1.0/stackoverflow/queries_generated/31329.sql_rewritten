WITH RecursiveCTE AS (
    SELECT Id, Title, CreationDate, OwnerUserId, AcceptedAnswerId, 1 AS Level
    FROM Posts
    WHERE PostTypeId = 1  

    UNION ALL

    SELECT p.Id, p.Title, p.CreationDate, p.OwnerUserId, p.AcceptedAnswerId, rc.Level + 1
    FROM Posts p
    INNER JOIN RecursiveCTE rc ON p.ParentId = rc.Id
),
TopTags AS (
    SELECT Tags, COUNT(*) AS TagCount
    FROM Posts
    WHERE Length(Tags) > 0
    GROUP BY Tags
    ORDER BY TagCount DESC
    LIMIT 5
),
PostScores AS (
    SELECT p.Id, p.Title, p.OwnerUserId, p.Score,
           RANK() OVER (ORDER BY p.Score DESC) AS RankByScore
    FROM Posts p
    WHERE p.PostTypeId = 1 
),
RecentActivity AS (
    SELECT p.Id, p.Title, COUNT(c.Id) AS CommentCount,
           COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
           COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.LastActivityDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY p.Id, p.Title
)
SELECT q.Id AS QuestionId, q.Title, q.CreationDate, q.OwnerUserId,
       COALESCE(a.Id, 0) AS AcceptedAnswerId,
       ta.TagCount, ps.Score, ra.CommentCount, ra.UpVotes, ra.DownVotes,
       CASE 
           WHEN ps.RankByScore <= 10 THEN 'Top Score'
           ELSE 'Normal Score'
       END AS ScoreCategory,
       STRING_AGG(DISTINCT t.TagName, ', ') AS TopTags
FROM RecursiveCTE q
LEFT JOIN Posts a ON q.AcceptedAnswerId = a.Id
LEFT JOIN TopTags t ON t.Tags = ANY(STRING_TO_ARRAY(q.Tags, ','))
LEFT JOIN PostScores ps ON ps.Id = q.Id
LEFT JOIN RecentActivity ra ON ra.Id = q.Id
WHERE q.Level = 1  
GROUP BY q.Id, q.Title, q.CreationDate, q.OwnerUserId, a.Id, ta.TagCount, ps.Score, ra.CommentCount, ra.UpVotes, ra.DownVotes, ps.RankByScore
ORDER BY ra.CommentCount DESC, ps.Score DESC;