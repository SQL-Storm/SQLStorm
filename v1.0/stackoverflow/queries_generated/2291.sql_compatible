
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.LastActivityDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.LastActivityDate, p.Score, p.OwnerUserId
),
PopularPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CommentCount,
        u.DisplayName,
        u.Reputation,
        CASE 
            WHEN rp.UserRank = 1 THEN 'Top Post'
            ELSE 'Regular Post'
        END AS PostTag
    FROM 
        RankedPosts rp
    JOIN 
        Users u ON rp.UserRank <= 3 AND u.Id = rp.OwnerUserId
)
SELECT 
    pp.PostId,
    pp.Title,
    pp.Score,
    pp.CommentCount,
    pp.DisplayName AS Owner,
    pp.Reputation,
    COALESCE(NULLIF(pp.PostTag, 'Regular Post'), 'Featured Post') AS PostCategory,
    (SELECT 
         COUNT(*) 
     FROM 
         Votes v 
     WHERE 
         v.PostId = pp.PostId AND v.VoteTypeId = 2) AS Upvotes,
    (SELECT 
         COUNT(*) 
     FROM 
         Votes v 
     WHERE 
         v.PostId = pp.PostId AND v.VoteTypeId = 3) AS Downvotes
FROM 
    PopularPosts pp
WHERE 
    pp.Score > 5 AND
    pp.CommentCount > 0
ORDER BY 
    pp.Score DESC, 
    pp.CommentCount DESC;
