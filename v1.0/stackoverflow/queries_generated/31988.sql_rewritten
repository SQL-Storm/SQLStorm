WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.AcceptedAnswerId,
        r.Level + 1
    FROM 
        Posts p
    JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
    WHERE 
        p.PostTypeId = 2  
), 
UserScore AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(v.VoteTypeId = 2) AS UpVotes,
        SUM(v.VoteTypeId = 3) AS DownVotes,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId  
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        UpVotes - DownVotes AS NetVotes,
        PostCount,
        RANK() OVER (ORDER BY UpVotes DESC) AS UpvoteRank,
        RANK() OVER (ORDER BY DownVotes DESC) AS DownvoteRank
    FROM 
        UserScore
    WHERE 
        PostCount > 5  
)
SELECT 
    p.Id AS PostID,
    p.Title,
    COALESCE(p.AcceptedAnswerId, 0) AS AcceptedAnswerId,
    COALESCE(ph.CommentCount, 0) AS CommentCount,
    COALESCE(voteStats.UpVotes, 0) AS UpVotes,
    COALESCE(voteStats.DownVotes, 0) AS DownVotes,
    u.DisplayName AS OwnerDisplayName,
    RANK() OVER (ORDER BY p.CreationDate DESC) AS RecentPostRank,
    (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS TotalComments,
    CASE 
        WHEN EXISTS (SELECT 1 FROM Posts p2 WHERE p2.ParentId = p.Id AND p2.PostTypeId = 2)
        THEN 'Answered' 
        ELSE 'Unanswered' 
    END AS AnswerStatus,
    ph.Level AS PostLevel
FROM 
    Posts p
LEFT JOIN 
    Comments c ON c.PostId = p.Id
LEFT JOIN 
    (SELECT PostId, COUNT(*) AS CommentCount FROM Comments GROUP BY PostId) AS ph ON ph.PostId = p.Id
LEFT JOIN 
    (SELECT PostId, COUNT(*) AS UpVotes, SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes 
     FROM Votes 
     GROUP BY PostId) AS voteStats ON voteStats.PostId = p.Id
JOIN 
    Users u ON u.Id = p.OwnerUserId
LEFT JOIN 
    RecursivePostHierarchy r ON r.PostId = p.Id
ORDER BY 
    RecentPostRank, p.Title;