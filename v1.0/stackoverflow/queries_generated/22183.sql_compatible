
WITH RECURSIVE UserRankings AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS Rank
    FROM Users u
),
FilteredPosts AS (
    SELECT 
        p.Id AS PostId,
        p.PostTypeId,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id), 0) AS UpVotes, 
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id), 0) AS DownVotes
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY p.Id, p.PostTypeId, p.Title, p.CreationDate, p.Score
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        STRING_AGG(ph.UserDisplayName || ': ' || ph.Comment, '; ') AS CommentSummary
    FROM PostHistory ph
    WHERE ph.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 months'
    GROUP BY ph.PostId, ph.PostHistoryTypeId, ph.CreationDate
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name || ' (' || b.Class || ')', ', ') AS BadgeNames
    FROM Badges b
    GROUP BY b.UserId
)
SELECT 
    ur.UserId,
    ur.DisplayName,
    ur.Rank,
    fp.PostId,
    fp.Title,
    fp.CreationDate AS PostCreationDate,
    fp.Score,
    fp.UpVotes,
    fp.DownVotes,
    COALESCE(pbd.CommentSummary, 'No comments') AS RecentComments,
    COALESCE(ub.BadgeCount, 0) AS TotalBadges,
    COALESCE(ub.BadgeNames, 'No badges') AS BadgeDetails
FROM UserRankings ur
JOIN FilteredPosts fp ON ur.UserId = fp.PostId
LEFT JOIN PostHistoryDetails pbd ON fp.PostId = pbd.PostId
LEFT JOIN UserBadges ub ON ur.UserId = ub.UserId
WHERE (SELECT COUNT(*) FROM PostHistory ph WHERE ph.PostId = fp.PostId AND ph.PostHistoryTypeId IN (10, 11)) > 0  
AND ur.Reputation > 1000  
ORDER BY ur.Rank, fp.Score DESC;
