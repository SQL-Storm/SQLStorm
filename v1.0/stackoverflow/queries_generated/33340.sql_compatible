
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title, p.OwnerUserId, p.CreationDate, p.Score, p.ViewCount
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(b.Id) AS TotalBadges,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        us.DisplayName AS OwnerDisplayName,
        us.Reputation AS OwnerReputation,
        rp.CommentCount,
        rp.TotalUpvotes,
        rp.TotalDownvotes
    FROM 
        RankedPosts rp
    INNER JOIN 
        UserStats us ON rp.OwnerUserId = us.UserId
    WHERE 
        rp.rn = 1
),
TopPosts AS (
    SELECT 
        pd.*,
        CASE 
            WHEN pd.Score > 10 THEN 'High'
            WHEN pd.Score BETWEEN 5 AND 10 THEN 'Medium'
            ELSE 'Low'
        END AS ScoreCategory
    FROM 
        PostDetails pd
)
SELECT 
    tp.*,
    COALESCE(ph.Name, 'No History') AS PostHistoryType
FROM 
    TopPosts tp
LEFT JOIN 
    PostHistory ph ON tp.PostId = ph.PostId
WHERE 
    tp.OwnerReputation > 100
ORDER BY 
    tp.CreationDate DESC,
    (tp.TotalUpvotes - tp.TotalDownvotes) DESC
LIMIT 50;
