WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score
), PostStats AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.CommentCount,
        rp.UpVoteCount,
        rp.DownVoteCount,
        CASE 
            WHEN rp.Score > 0 THEN 'Positive'
            WHEN rp.Score < 0 THEN 'Negative'
            ELSE 'Neutral' 
        END AS ScoreCategory
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn = 1
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.CreationDate,
    ps.Score,
    ps.CommentCount,
    ps.UpVoteCount,
    ps.DownVoteCount,
    ps.ScoreCategory,
    COALESCE(u.DisplayName, 'Anonymous') AS AuthorDisplayName,
    COALESCE(b.Class, 0) AS BadgeClass
FROM 
    PostStats ps
LEFT JOIN 
    Users u ON ps.PostId = u.Id
LEFT JOIN 
    Badges b ON b.UserId = u.Id AND b.Class = 1
WHERE 
    ps.CommentCount > 10
ORDER BY 
    ps.Score DESC
LIMIT 50
UNION ALL
SELECT 
    NULL AS PostId,
    'Total Posts' AS Title,
    NULL AS CreationDate,
    COUNT(*) AS Score,
    NULL AS CommentCount,
    NULL AS UpVoteCount,
    NULL AS DownVoteCount,
    NULL AS ScoreCategory,
    NULL AS AuthorDisplayName,
    NULL AS BadgeClass
FROM 
    Posts
WHERE 
    CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
HAVING 
    COUNT(*) > 0;