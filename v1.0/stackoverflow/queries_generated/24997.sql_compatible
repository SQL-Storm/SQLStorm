
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 8 THEN v.BountyAmount ELSE 0 END), 0) AS TotalBounty,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS UpvoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS DownvoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
),
RecentPosts AS (
    SELECT 
        PostId,
        Title,
        Score,
        CommentCount,
        TotalBounty,
        UpvoteCount,
        DownvoteCount,
        CASE 
            WHEN rn = 1 THEN 'New' 
            WHEN rn <= 5 THEN 'Popular' 
            ELSE 'Archived' 
        END AS PostStatus
    FROM 
        RankedPosts 
    WHERE 
        CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' 
),
TagsWithPostCount AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Tags t
    LEFT JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, '>'::text))
    GROUP BY 
        t.TagName
),
DistinctUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostsCreated
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.CommentCount,
    rp.TotalBounty,
    rp.UpvoteCount,
    rp.DownvoteCount,
    rp.PostStatus,
    t.TagName,
    tp.PostCount AS RelatedPostCount,
    u.DisplayName AS UserName,
    u.PostsCreated
FROM 
    RecentPosts rp
LEFT JOIN 
    TagsWithPostCount t ON t.PostCount > 1
LEFT JOIN 
    DistinctUsers u ON u.UserId IN (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
WHERE 
    rp.Score > (SELECT AVG(Score) FROM Posts) 
ORDER BY 
    rp.CreationDate DESC,
    rp.Score DESC
LIMIT 50;
