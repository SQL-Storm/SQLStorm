WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.OwnerDisplayName
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5
),
TagsAggregated AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, ',')::int[])
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(p.Id) > 10
    ORDER BY 
        PostCount DESC
),
PostHistoryDetails AS (
    SELECT DISTINCT 
        ph.PostId,
        p.Title,
        ph.CreationDate,
        p.OwnerDisplayName,
        p.Score,
        p.Comment,
        p.Body,
        p.Tags
    FROM 
        PostHistory ph
    JOIN 
        Posts p ON ph.PostId = p.Id
    WHERE 
        ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '60 days' AND
        ph.PostHistoryTypeId IN (10, 11, 12, 13)
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Score,
    tp.OwnerDisplayName,
    ta.TagName,
    phd.Comment,
    phd.Body,
    phd.CreationDate AS HistoryCreationDate
FROM 
    TopPosts tp
LEFT JOIN 
    TagsAggregated ta ON ta.TagName = ANY(string_to_array(tp.Tags, ','))
LEFT JOIN 
    PostHistoryDetails phd ON phd.PostId = tp.PostId
ORDER BY 
    tp.Score DESC, 
    tp.Title ASC;