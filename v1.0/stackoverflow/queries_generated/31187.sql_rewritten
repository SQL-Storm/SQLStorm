WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        r.Level + 1 AS Level
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.Id
),
RecentPostActivity AS (
    SELECT 
        p.Id, 
        p.Title, 
        p.OwnerUserId, 
        p.LastActivityDate, 
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.LastActivityDate DESC) AS UserPostRank
    FROM 
        Posts p
    WHERE 
        p.LastActivityDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),
UsersWithPosts AS (
    SELECT 
        u.Id AS UserId, 
        u.DisplayName, 
        COALESCE(MAX(p.ViewCount), 0) AS MaxViewCount,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id
),
PopularBadges AS (
    SELECT 
        b.UserId, 
        COUNT(*) AS TotalBadges 
    FROM 
        Badges b
    GROUP BY 
        b.UserId
    HAVING 
        COUNT(*) > 5
)
SELECT 
    u.DisplayName, 
    u.Reputation,
    up.PostCount,
    up.MaxViewCount,
    rb.Level AS PostLevel,
    rb.Title AS PostTitle,
    rp.UserPostRank,
    pb.TotalBadges
FROM 
    Users u
LEFT JOIN 
    UsersWithPosts up ON u.Id = up.UserId
LEFT JOIN 
    RecursivePostHierarchy rb ON rb.Level <= 2 AND rb.Id IN (SELECT DISTINCT pa.Id FROM RecentPostActivity ra WHERE ra.OwnerUserId = u.Id)
LEFT JOIN 
    PopularBadges pb ON u.Id = pb.UserId
WHERE 
    u.Reputation > 1000
ORDER BY 
    u.Reputation DESC, 
    up.MaxViewCount DESC;