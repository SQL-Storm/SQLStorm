
WITH UserVoteSummary AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(v.Id) AS TotalVotes,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        COALESCE(ph.TotalEdits, 0) AS TotalEdits,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS TotalEdits
        FROM 
            PostHistory
        WHERE 
            PostHistoryTypeId IN (4, 5, 6) 
        GROUP BY 
            PostId
    ) ph ON p.Id = ph.PostId
    LEFT JOIN 
        (SELECT 
            PostId, 
            unnest(string_to_array(Tags, '><')) AS TagName 
        FROM 
            Posts 
        WHERE 
            Tags IS NOT NULL) t ON p.Id = t.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.Score, TotalEdits
),
TopPosts AS (
    SELECT 
        ps.*, 
        ROW_NUMBER() OVER (ORDER BY ps.Score DESC, ps.ViewCount DESC) AS rnk
    FROM 
        PostStatistics ps
)
SELECT 
    ups.UserId, 
    ups.DisplayName,
    tp.PostId,
    tp.Title,
    tp.ViewCount,
    tp.Score,
    tp.TotalEdits,
    tp.Tags,
    CASE 
        WHEN ups.Upvotes > ups.Downvotes THEN 'Positive'
        WHEN ups.Upvotes < ups.Downvotes THEN 'Negative'
        ELSE 'Neutral'
    END AS VoteSentiment
FROM 
    UserVoteSummary ups
JOIN 
    TopPosts tp ON ups.TotalVotes > 5
WHERE 
    tp.rnk <= 10
ORDER BY 
    ups.TotalVotes DESC, tp.Score DESC;
