
WITH RecursivePostCTE AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.AnswerCount,
        p.Tags,
        0 AS Level
    FROM Posts p
    WHERE p.ParentId IS NULL

    UNION ALL

    SELECT
        p.Id,
        p.Title,
        p.ViewCount,
        p.AnswerCount,
        p.Tags,
        Level + 1
    FROM Posts p
    INNER JOIN RecursivePostCTE cte ON p.ParentId = cte.PostId
), 
PostVoteSummary AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Votes
    GROUP BY PostId
),
PostHistoryDetail AS (
    SELECT 
        ph.PostId,
        MAX(ph.CreationDate) AS LastEditDate,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (4, 5) THEN 1 END) AS EditCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS CloseCount
    FROM PostHistory ph
    GROUP BY ph.PostId
)
SELECT
    r.PostId,
    r.Title,
    r.ViewCount,
    r.AnswerCount,
    r.Tags,
    COALESCE(pvs.UpVotes, 0) AS UpVotes,
    COALESCE(pvs.DownVotes, 0) AS DownVotes,
    phd.LastEditDate,
    COALESCE(phd.EditCount, 0) AS EditCount,
    COALESCE(phd.CloseCount, 0) AS CloseCount,
    CASE 
        WHEN COALESCE(phd.CloseCount, 0) > 0 THEN 'Closed'
        ELSE 'Active'
    END AS PostStatus
FROM RecursivePostCTE r
LEFT JOIN PostVoteSummary pvs ON r.PostId = pvs.PostId
LEFT JOIN PostHistoryDetail phd ON r.PostId = phd.PostId
WHERE 
    r.Level = 0 AND 
    r.ViewCount > 50 AND 
    (COALESCE(pvs.UpVotes, 0) - COALESCE(pvs.DownVotes, 0) > 10) 
ORDER BY 
    r.AnswerCount DESC, 
    r.ViewCount DESC
LIMIT 100;
