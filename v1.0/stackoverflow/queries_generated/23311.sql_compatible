
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.Score,
        p.CreationDate,
        p.AcceptedAnswerId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.Tags, p.Score, p.CreationDate, p.AcceptedAnswerId, p.PostTypeId
),
FinalPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Tags,
        rp.Score,
        rp.CommentCount,
        COALESCE(rp.Upvotes - rp.Downvotes, 0) AS NetVotes,
        CASE 
            WHEN rp.RankScore = 1 THEN 'Top Post' 
            ELSE 'Regular Post' 
        END AS PostCategory,
        COUNT(DISTINCT bh.UserId) AS BadgeCount
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges bh ON bh.UserId = rp.OwnerUserId
    GROUP BY 
        rp.PostId, rp.Title, rp.Tags, rp.Score, rp.CommentCount, rp.RankScore
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.Tags,
    fp.Score,
    fp.CommentCount,
    fp.NetVotes,
    fp.PostCategory,
    CASE 
        WHEN fp.NetVotes = 0 THEN 'No Votes'
        WHEN fp.NetVotes < 0 THEN 'Negative Votes'
        ELSE 'Positive Votes'
    END AS VoteStatus,
    CASE 
        WHEN fp.CommentCount IS NULL THEN 'No Comments'
        WHEN fp.CommentCount BETWEEN 1 AND 5 THEN 'Few Comments'
        ELSE 'Many Comments'
    END AS CommentStatus
FROM 
    FinalPosts fp
WHERE 
    EXISTS (SELECT 1 FROM Posts p WHERE p.Id = fp.PostId AND p.AcceptedAnswerId IS NOT NULL)
ORDER BY 
    fp.NetVotes DESC, fp.CommentCount DESC
LIMIT 10;
