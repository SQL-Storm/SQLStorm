
WITH RecursivePostPaths AS (
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        CAST(p.Title AS VARCHAR) AS Path,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id,
        p.ParentId,
        CONCAT(rpp.Path, ' -> ', p.Title) AS Path,
        rpp.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostPaths rpp ON p.ParentId = rpp.PostId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostAggregates AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9)  
    GROUP BY 
        p.Id, p.Title, p.ViewCount
),
ActiveUserPosts AS (
    SELECT 
        u.Id AS UserId,
        COUNT(p.Id) AS ActivePostCount,
        SUM(p.ViewCount) AS TotalViews,
        AVG(p.Score) AS AverageScore
    FROM 
        Users u
    INNER JOIN 
        Posts p ON u.Id = p.OwnerUserId
    WHERE 
        p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 YEAR'
    GROUP BY 
        u.Id
)
SELECT 
    up.UserId,
    up.ActivePostCount,
    up.TotalViews,
    up.AverageScore,
    ub.BadgeCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    pp.Path AS PostPath,
    pa.Title,
    pa.ViewCount,
    pa.CommentCount,
    pa.TotalBounty
FROM 
    ActiveUserPosts up
LEFT JOIN 
    UserBadges ub ON up.UserId = ub.UserId
LEFT JOIN 
    (SELECT 
        DISTINCT ON (pp.PostId) pp.PostId, pp.Path, pap.Title
     FROM 
        RecursivePostPaths pp
     JOIN 
        PostAggregates pap ON pp.PostId = pap.PostId 
     ORDER BY 
        pp.PostId, pp.Level DESC) pp ON pp.PostId IN (
        SELECT Id FROM Posts WHERE OwnerUserId = up.UserId
    )
LEFT JOIN 
    PostAggregates pa ON pa.PostId = pp.PostId
WHERE 
    up.ActivePostCount > 5
ORDER BY 
    up.TotalViews DESC, ub.BadgeCount DESC, pa.ViewCount DESC;
