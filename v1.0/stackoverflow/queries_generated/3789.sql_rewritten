WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.PostTypeId,
        p.OwnerUserId,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RN
    FROM 
        Posts p
    WHERE 
        p.Score IS NOT NULL
), RecentUserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount,
        MAX(c.CreationDate) AS LastCommentDate
    FROM 
        Users u
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id
), PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t
    INNER JOIN 
        Posts p ON t.Id = ANY (string_to_array(p.Tags, ',')::int[])
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(p.Id) > 5
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    u.DisplayName AS OwnerDisplayName,
    ra.CommentCount,
    ra.UpvoteCount,
    pt.TagName,
    pt.PostCount
FROM 
    RankedPosts rp
LEFT JOIN 
    Users u ON rp.OwnerUserId = u.Id
LEFT JOIN 
    RecentUserActivity ra ON u.Id = ra.UserId
LEFT JOIN 
    PopularTags pt ON pt.TagName = ANY(string_to_array(rp.Title, ' ')) 
WHERE 
    rp.RN = 1
    AND (ra.LastCommentDate IS NULL OR ra.LastCommentDate > cast('2024-10-01' as date) - INTERVAL '30 days')
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate DESC
LIMIT 10;