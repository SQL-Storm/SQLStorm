
WITH UserBadges AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        STRING_AGG(B.Name, ', ') AS Badges,
        MAX(B.Class) AS HighestBadgeClass
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
),
PostScores AS (
    SELECT 
        P.Id AS PostId,
        P.Score,
        COALESCE(P.ViewCount, 0) AS ViewCount,
        COALESCE(C.CommentsCount, 0) AS CommentsCount,
        (COALESCE(P.ViewCount, 0) + COALESCE(C.CommentsCount, 0)) AS TotalEngagement,
        RANK() OVER (ORDER BY COALESCE(P.Score, 0) DESC, COALESCE(P.ViewCount, 0) DESC) AS ScoreRank,
        STRING_AGG(T.TagName, ', ') AS Tags
    FROM 
        Posts P
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS CommentsCount FROM Comments GROUP BY PostId) C ON P.Id = C.PostId
    LEFT JOIN 
        (SELECT DISTINCT UNNEST(STRING_TO_ARRAY(P.Tags, '>')) AS TagName, P.Id FROM Posts P) T ON P.Id = T.Id
    WHERE 
        P.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' 
    GROUP BY 
        P.Id
),
RecentPostHistory AS (
    SELECT 
        PH.PostId,
        MAX(PH.CreationDate) AS LastChange,
        STRING_AGG(PHT.Name, ', ' ORDER BY PH.CreationDate DESC) AS HistoryTypes
    FROM 
        PostHistory PH
    JOIN 
        PostHistoryTypes PHT ON PH.PostHistoryTypeId = PHT.Id
    GROUP BY 
        PH.PostId
)
SELECT 
    U.DisplayName,
    U.Reputation,
    UB.BadgeCount,
    UB.Badges,
    P.PostId,
    P.Score,
    P.TotalEngagement,
    P.Tags,
    RPH.LastChange,
    RPH.HistoryTypes
FROM 
    Users U
JOIN 
    UserBadges UB ON U.Id = UB.UserId
JOIN 
    PostScores P ON U.Id = P.PostId
LEFT JOIN 
    RecentPostHistory RPH ON P.PostId = RPH.PostId
WHERE 
    U.Reputation > 1000 
    AND UB.HighestBadgeClass < 3 
    AND P.Score > 0 
    AND (P.TotalEngagement > 5 OR P.TotalEngagement IS NULL)
ORDER BY 
    U.Reputation DESC,
    P.ScoreRank,
    RPH.LastChange DESC
FETCH FIRST 10 ROWS ONLY;
