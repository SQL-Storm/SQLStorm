
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        COALESCE(p.ParentId, 0) AS ParentId,
        ROW_NUMBER() OVER (PARTITION BY COALESCE(p.ParentId, 0) ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 year'
),
UserStats AS (
    SELECT
        u.Id AS UserId,
        u.Reputation,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostsCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotesCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotesCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        u.CreationDate < CURRENT_TIMESTAMP - INTERVAL '6 months' 
        AND (u.Reputation IS NOT NULL OR u.AboutMe IS NOT NULL)
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PostWithComments AS (
    SELECT 
        p.Id AS PostId,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(c.TopComment, 'No Comments') AS TopComment
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount,
            STRING_AGG(Text, ', ' ORDER BY CreationDate DESC) AS TopComment
        FROM 
            Comments
        GROUP BY 
            PostId
    ) c ON p.Id = c.PostId
),
CombinedStats AS (
    SELECT
        u.UserId,
        u.DisplayName,
        u.Reputation,
        p.Title,
        p.ViewCount,
        p.CommentCount,
        p.TopComment,
        rp.Score
    FROM 
        UserStats u
    JOIN 
        PostWithComments p ON u.PostsCount > 0
    LEFT JOIN 
        RankedPosts rp ON rp.PostId = p.PostId AND rp.Rank = 1
)
SELECT 
    u.DisplayName,
    CTEViewCount.ViewCount,
    COALESCE(rp.Title, 'No Top Post') AS TopPost,
    COALESCE(rp.Score, 0) AS PostScore,
    u.Reputation,
    CASE 
        WHEN u.Reputation IS NULL THEN 'Unknown Reputation'
        ELSE CAST(u.Reputation AS VARCHAR)
    END AS ReputationDisplay,
    ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS UserRank
FROM 
    UserStats u
LEFT JOIN 
    (SELECT * FROM PostWithComments) CTEViewCount
ON 
    CTEViewCount.PostId = u.UserId 
WHERE 
    u.Reputation >= (SELECT AVG(Reputation) FROM Users) 
    OR NOT EXISTS (SELECT 1 FROM Users WHERE Reputation IS NOT NULL) 
ORDER BY 
    u.Reputation DESC 
LIMIT 10;
