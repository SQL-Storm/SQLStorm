WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(DISTINCT c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p 
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges,
        COALESCE(SUM(ph.PostHistoryTypeId IN (10, 11, 12, 13, 14, 15)), 0) AS CloseReasonCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        PostHistory ph ON u.Id = ph.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id
),
PostCommentStats AS (
    SELECT 
        p.Id,
        p.Title,
        COUNT(com.Id) AS TotalComments,
        MAX(com.CreationDate) AS LastCommentDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments com ON p.Id = com.PostId
    WHERE 
        p.PostTypeId IN (1, 2)
    GROUP BY 
        p.Id
),
FinalResult AS (
    SELECT 
        ups.UserId,
        ups.DisplayName,
        ups.Reputation,
        ups.GoldBadges,
        ups.SilverBadges,
        ups.BronzeBadges,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(pcs.TotalComments, 0) AS TotalComments,
        CASE 
            WHEN ups.CloseReasonCount > 5 THEN 'Frequently closed'
            ELSE 'Rarely closed' 
        END AS ClosureFrequency
    FROM 
        UserStats ups
    INNER JOIN 
        RankedPosts p ON ups.UserId = p.OwnerUserId
    LEFT JOIN 
        PostCommentStats pcs ON pcs.Id = p.Id
    WHERE 
        ups.Reputation > 2000 AND 
        p.UserPostRank = 1
)
SELECT 
    *,
    CONCAT(DisplayName, ' has posted ', COUNT(Title) OVER (PARTITION BY UserId), 
           ' posts, the latest being: ', Title, 
           ' with ', Score, ' points.') AS UserPostSummary
FROM 
    FinalResult
ORDER BY 
    Reputation DESC, Score DESC
OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY;