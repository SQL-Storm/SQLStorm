WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(rp.PostId) AS PostCount,
        SUM(rp.Score) AS TotalScore,
        AVG(rp.ViewCount) AS AvgViewCount
    FROM 
        Users u
    LEFT JOIN 
        RankedPosts rp ON u.Id = rp.OwnerUserId
    GROUP BY 
        u.Id
),
TopUsers AS (
    SELECT 
        ups.DisplayName,
        ups.PostCount,
        ups.TotalScore,
        ups.AvgViewCount,
        RANK() OVER (ORDER BY ups.TotalScore DESC) AS UserRank
    FROM 
        UserPostStats ups
    WHERE 
        ups.PostCount > 5
)
SELECT 
    tu.DisplayName,
    tu.PostCount,
    tu.TotalScore,
    tu.AvgViewCount,
    COALESCE(SUM(b.Class), 0) AS TotalBadges,
    COALESCE(STRING_AGG(bt.Name, ', ' ORDER BY bt.Name), 'None') AS BadgesList
FROM 
    TopUsers tu
LEFT JOIN 
    Badges b ON tu.UserId = b.UserId
LEFT JOIN 
    PostHistory ph ON tu.PostCount = (SELECT COUNT(*) FROM Posts WHERE OwnerUserId = tu.UserId AND Status IS NOT NULL)
LEFT JOIN 
    PostHistoryTypes bt ON ph.PostHistoryTypeId = bt.Id
WHERE 
    tu.UserRank <= 10
GROUP BY 
    tu.DisplayName, tu.PostCount, tu.TotalScore, tu.AvgViewCount
HAVING 
    COUNT(DISTINCT ph.Id) > 0
ORDER BY 
    tu.TotalScore DESC, tu.PostCount DESC;