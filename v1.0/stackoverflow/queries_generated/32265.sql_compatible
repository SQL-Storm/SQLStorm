
WITH RecursivePostHierarchy AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ParentId,
        0 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1  
    UNION ALL
    SELECT 
        P.Id,
        P.Title,
        P.ParentId,
        RPH.Level + 1
    FROM 
        Posts P
    INNER JOIN 
        RecursivePostHierarchy RPH ON P.ParentId = RPH.PostId
),

PostVoteStatistics AS (
    SELECT 
        PostId,
        COUNT(CASE WHEN VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN VoteTypeId = 3 THEN 1 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),

PostDetail AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        COALESCE(PVS.UpVotes, 0) AS UpVotes,
        COALESCE(PVS.DownVotes, 0) AS DownVotes,
        P.CreationDate,
        P.Body,
        P.Tags,
        RPH.Level
    FROM 
        Posts P
    LEFT JOIN 
        PostVoteStatistics PVS ON P.Id = PVS.PostId
    LEFT JOIN 
        RecursivePostHierarchy RPH ON P.Id = RPH.PostId
)

SELECT 
    PD.PostId,
    PD.Title,
    PD.UpVotes,
    PD.DownVotes,
    PD.CreationDate,
    PD.Body,
    PD.Tags,
    CASE 
        WHEN PD.UpVotes - PD.DownVotes > 10 THEN 'Highly Favorable' 
        WHEN PD.UpVotes - PD.DownVotes < -10 THEN 'Highly Unfavorable' 
        ELSE 'Neutral' 
    END AS VoteSentiment,
    COUNT(CASE WHEN PH.PostHistoryTypeId = 10 THEN 1 END) AS CloseVotes,
    COUNT(CASE WHEN PH.PostHistoryTypeId = 12 THEN 1 END) AS DeleteVotes,
    ARRAY_AGG(DISTINCT U.DisplayName) AS Voters,
    RPH.Level AS HierarchyLevel
FROM 
    PostDetail PD
LEFT JOIN 
    PostHistory PH ON PD.PostId = PH.PostId
LEFT JOIN 
    Users U ON PH.UserId = U.Id
GROUP BY 
    PD.PostId, PD.Title, PD.UpVotes, PD.DownVotes, PD.CreationDate, PD.Body, PD.Tags, RPH.Level
HAVING 
    COUNT(DISTINCT PH.UserId) > 5  
ORDER BY 
    PD.UpVotes DESC, PD.CreationDate DESC;
