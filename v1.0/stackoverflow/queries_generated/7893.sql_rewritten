WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVoteCount,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVoteCount,
        ARRAY_AGG(DISTINCT t.TagName) AS TagsArray
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        STRING_TO_ARRAY(p.Tags, ',') AS tags_id ON t.TagName = tags_id
    LEFT JOIN 
        Tags t ON t.TagName = tags_id
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
        AND p.PostTypeId = 1
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName, p.OwnerUserId
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        ViewCount,
        OwnerDisplayName,
        CommentCount,
        Rank,
        UpVoteCount,
        DownVoteCount,
        TagsArray
    FROM 
        RankedPosts
    WHERE 
        Rank <= 10
)
SELECT 
    tp.*,
    COALESCE(ph.CloseReasonId, 0) AS CloseReasonId,
    COUNT(DISTINCT bl.RelatedPostId) AS RelatedPostCount
FROM 
    TopPosts tp
LEFT JOIN 
    PostHistory ph ON tp.PostId = ph.PostId AND ph.PostHistoryTypeId = 10
LEFT JOIN 
    PostLinks bl ON tp.PostId = bl.PostId
GROUP BY 
    tp.PostId, tp.Title, tp.CreationDate, tp.Score, tp.ViewCount, 
    tp.OwnerDisplayName, tp.CommentCount, tp.Rank, 
    tp.UpVoteCount, tp.DownVoteCount, tp.TagsArray, ph.CloseReasonId
ORDER BY 
    tp.Score DESC, tp.CreationDate DESC;