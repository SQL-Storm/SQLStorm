
WITH RankedPosts AS (
    SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, 
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM Posts p
    JOIN Users u ON p.OwnerUserId = u.Id
    WHERE u.Reputation > 1000
),
RecentTags AS (
    SELECT p.Id AS PostId, 
           UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS Tag
    FROM Posts p
    WHERE p.CreationDate > (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
),
UserBadges AS (
    SELECT u.Id AS UserId, 
           COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges, 
           COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
           COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
)
SELECT rp.PostId, rp.Title, rp.CreationDate, rp.Score, 
       rt.Tag, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges
FROM RankedPosts rp
JOIN RecentTags rt ON rp.PostId = rt.PostId
JOIN UserBadges ub ON rp.OwnerUserId = ub.UserId
WHERE rp.rn = 1
GROUP BY rp.PostId, rp.Title, rp.CreationDate, rp.Score, rt.Tag, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges
ORDER BY rp.Score DESC, ub.GoldBadges DESC, ub.SilverBadges DESC, ub.BronzeBadges DESC
LIMIT 50;
