
WITH RecursiveCTE AS (
    SELECT 
        P.Id AS PostId, 
        P.OwnerUserId, 
        P.CreationDate, 
        P.Score,
        0 AS Level,
        CAST(P.Title AS VARCHAR(300)) AS PostTitle
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1 

    UNION ALL

    SELECT 
        A.Id AS PostId, 
        A.OwnerUserId, 
        A.CreationDate, 
        A.Score,
        Level + 1,
        CAST(CONCAT(A.Title, ' (Answer)') AS VARCHAR(300)) AS PostTitle
    FROM 
        Posts A
    JOIN 
        RecursiveCTE R ON A.ParentId = R.PostId
),
UserBadges AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
)
SELECT 
    U.DisplayName,
    U.Reputation,
    COALESCE(UB.BadgeCount, 0) AS TotalBadges,
    COALESCE(UB.GoldBadges, 0) AS GoldBadges,
    COALESCE(UB.SilverBadges, 0) AS SilverBadges,
    COALESCE(UB.BronzeBadges, 0) AS BronzeBadges,
    COUNT(DISTINCT R.PostId) AS TotalPosts,
    SUM(R.Score) AS TotalScore,
    AVG(R.Score) AS AveragePostScore
FROM 
    Users U
LEFT JOIN 
    UserBadges UB ON U.Id = UB.UserId
LEFT JOIN 
    RecursiveCTE R ON U.Id = R.OwnerUserId
WHERE 
    U.Reputation > 1000
GROUP BY 
    U.DisplayName, U.Reputation, UB.BadgeCount, UB.GoldBadges, UB.SilverBadges, UB.BronzeBadges
HAVING 
    COALESCE(SUM(R.Score), 0) > 50
ORDER BY 
    TotalPosts DESC, AveragePostScore DESC
LIMIT 10;
