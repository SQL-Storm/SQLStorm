
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        COALESCE(p.AnswerCount, 0) AS AnswerCount,
        COALESCE(p.FavoriteCount, 0) AS FavoriteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM
        Posts p
    LEFT JOIN
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN
        Tags t ON t.Id = ANY(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><'))
    WHERE
        p.PostTypeId = 1 
    GROUP BY
        p.Id, u.DisplayName, p.CreationDate, p.ViewCount, p.Score, p.AnswerCount, p.FavoriteCount
),
TopPosts AS (
    SELECT
        PostId,
        Title,
        Body,
        CreationDate,
        ViewCount,
        Score,
        OwnerDisplayName,
        AnswerCount,
        FavoriteCount,
        Tags
    FROM
        RankedPosts
    WHERE
        PostRank = 1 
)
SELECT
    p.PostId,
    p.Title,
    p.ViewCount,
    p.Score,
    p.AnswerCount,
    p.FavoriteCount,
    p.OwnerDisplayName,
    p.Tags,
    COUNT(c.Id) AS CommentCount,
    COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
    COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes,
    COALESCE(MAX(b.Date), 'No Badge') AS LastBadgeDate
FROM
    TopPosts p
LEFT JOIN
    Comments c ON c.PostId = p.PostId
LEFT JOIN
    Votes v ON v.PostId = p.PostId
LEFT JOIN
    Badges b ON b.UserId = (SELECT Id FROM Users WHERE DisplayName = p.OwnerDisplayName) 
GROUP BY
    p.PostId, p.Title, p.Body, p.ViewCount, p.Score, p.AnswerCount, p.FavoriteCount, p.OwnerDisplayName, p.Tags
ORDER BY
    p.ViewCount DESC,
    p.Score DESC,
    p.CreationDate DESC
LIMIT 10;
