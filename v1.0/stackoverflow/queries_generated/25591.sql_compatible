
WITH TagCount AS (
    SELECT
        Tag,
        COUNT(*) AS PostCount
    FROM (
        SELECT
            unnest(string_to_array(substring(Tags, 2, length(Tags)-2), '><')) AS Tag
        FROM
            Posts
        WHERE
            PostTypeId = 1  
    ) AS UnnestedTags
    GROUP BY
        Tag
),
TopTags AS (
    SELECT
        Tag,
        PostCount,
        ROW_NUMBER() OVER (ORDER BY PostCount DESC) AS TagRank
    FROM
        TagCount
),
PopularQuestions AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        u.DisplayName AS Author,
        ARRAY_AGG(DISTINCT t.Tag) AS Tags
    FROM
        Posts p
    JOIN
        Users u ON p.OwnerUserId = u.Id
    JOIN
        TopTags tt ON tt.Tag = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'))
    LEFT JOIN
        TagCount t ON t.Tag = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'))
    GROUP BY
        p.Id, p.Title, p.Score, p.ViewCount, u.DisplayName
    ORDER BY
        p.Score DESC
    LIMIT 10
),
AnswerDetails AS (
    SELECT
        q.Id AS PostId,
        COUNT(a.Id) AS AnswerCount,
        COALESCE(SUM(a.Score), 0) AS TotalAnswerScore
    FROM
        Posts q
    LEFT JOIN
        Posts a ON q.Id = a.ParentId
    WHERE
        q.PostTypeId = 1  
    GROUP BY
        q.Id
)
SELECT
    pq.PostId,
    pq.Title,
    pq.Score AS QuestionScore,
    pq.ViewCount,
    pq.Author,
    pq.Tags,
    ad.AnswerCount,
    ad.TotalAnswerScore
FROM
    PopularQuestions pq
LEFT JOIN
    AnswerDetails ad ON pq.PostId = ad.PostId
ORDER BY
    pq.QuestionScore DESC, ad.TotalAnswerScore DESC;
