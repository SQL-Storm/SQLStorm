
WITH RecursiveUserPosts AS (
    SELECT 
        P.OwnerUserId,
        P.Id AS PostId,
        P.Title,
        P.Score,
        P.CreationDate,
        1 AS Depth
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1  

    UNION ALL

    SELECT 
        P.OwnerUserId,
        P.Id AS PostId,
        P.Title,
        P.Score,
        P.CreationDate,
        R.Depth + 1
    FROM 
        Posts P
    INNER JOIN 
        RecursiveUserPosts R ON P.ParentId = R.PostId
    WHERE 
        P.PostTypeId = 2  
),
UserBadges AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        STRING_AGG(B.Name, ', ') AS BadgeNames
    FROM 
        Users U 
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
),
PostStatistics AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COUNT(P.Id) AS TotalPosts,
        SUM(P.Score) AS TotalScore,
        AVG(P.ViewCount) AS AvgViewCount,
        MAX(P.CreationDate) AS LastPostDate,
        COALESCE(UB.BadgeCount, 0) AS BadgeCount,
        COALESCE(UB.BadgeNames, 'None') AS BadgeNames
    FROM 
        Users U 
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN 
        UserBadges UB ON U.Id = UB.UserId
    GROUP BY 
        U.Id, U.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        TotalPosts,
        TotalScore,
        AvgViewCount,
        BadgeCount,
        BadgeNames,
        ROW_NUMBER() OVER (ORDER BY TotalScore DESC) AS RN
    FROM 
        PostStatistics
)
SELECT 
    TU.DisplayName,
    TU.TotalPosts,
    TU.TotalScore,
    TU.AvgViewCount,
    TU.BadgeNames,
    COALESCE(RUP.Depth, 0) AS PostDepth,
    CASE 
        WHEN TU.BadgeCount > 5 THEN 'Veteran'
        WHEN TU.BadgeCount BETWEEN 1 AND 5 THEN 'Active'
        ELSE 'Newbie'
    END AS UserStatus
FROM 
    TopUsers TU
LEFT JOIN 
    RecursiveUserPosts RUP ON TU.UserId = RUP.OwnerUserId
WHERE 
    TU.RN <= 10  
ORDER BY 
    TU.TotalScore DESC;
