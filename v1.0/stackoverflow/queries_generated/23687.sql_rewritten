WITH UserEngagement AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COALESCE(COUNT(DISTINCT P.Id), 0) AS PostsCount,
        MIN(P.CreationDate) AS FirstPostDate,
        MAX(P.CreationDate) AS LastPostDate,
        DATEDIFF('day', MIN(P.CreationDate), MAX(P.CreationDate)) AS ActiveDays,
        CASE 
            WHEN DATEDIFF('day', MIN(P.CreationDate), MAX(P.CreationDate)) = 0 THEN 1 
            ELSE DATEDIFF('day', MIN(P.CreationDate), MAX(P.CreationDate)) 
        END AS DaysActive
    FROM 
        Users U
    LEFT JOIN 
        Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    WHERE 
        U.Reputation > 0
    GROUP BY 
        U.Id, U.DisplayName
),
BadgeStats AS (
    SELECT 
        B.UserId,
        COUNT(CASE WHEN B.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN B.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN B.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges B
    GROUP BY 
        B.UserId
),
PostStats AS (
    SELECT 
        P.OwnerUserId,
        COUNT(*) AS TotalPosts,
        SUM(CASE WHEN P.Score > 10 THEN 1 ELSE 0 END) AS HighlyRatedPosts,
        AVG(P.ViewCount) AS AvgViewCount
    FROM 
        Posts P
    WHERE 
        P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        P.OwnerUserId
)
SELECT 
    UE.DisplayName,
    UE.UpVotes,
    UE.DownVotes,
    COALESCE(PS.TotalPosts, 0) AS TotalPosts,
    COALESCE(PS.HighlyRatedPosts, 0) AS HighlyRatedPosts,
    COALESCE(PS.AvgViewCount, 0) AS AvgViewCount,
    COALESCE(BS.GoldBadges, 0) AS GoldBadges,
    COALESCE(BS.SilverBadges, 0) AS SilverBadges,
    COALESCE(BS.BronzeBadges, 0) AS BronzeBadges,
    CASE 
        WHEN UE.DaysActive > 30 THEN 'Active'
        WHEN UE.DaysActive BETWEEN 1 AND 30 THEN 'Recently Active'
        ELSE 'Inactive'
    END AS UserStatus
FROM 
    UserEngagement UE
LEFT JOIN 
    BadgeStats BS ON UE.UserId = BS.UserId
LEFT JOIN 
    PostStats PS ON UE.UserId = PS.OwnerUserId
WHERE 
    UE.UpVotes - UE.DownVotes > 10
ORDER BY 
    UE.UpVotes DESC, UserStatus DESC;