WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM
        Posts p
    WHERE
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
        AND p.PostTypeId = 1
),
UserReputation AS (
    SELECT
        u.Id,
        u.Reputation,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM
        Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY
        u.Id
),
ClosedPosts AS (
    SELECT
        ph.PostId,
        COUNT(*) AS CloseCount
    FROM
        PostHistory ph
    WHERE
        ph.PostHistoryTypeId = 10
    GROUP BY
        ph.PostId
)
SELECT
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.AnswerCount,
    u.DisplayName,
    COALESCE(up.Reputation, 0) AS UserReputation,
    (SELECT COUNT(*) FROM Comments c WHERE c.PostId = rp.PostId) AS CommentCount,
    COALESCE(cp.CloseCount, 0) AS TotalClosed,
    CASE 
        WHEN rp.ViewCount IS NOT NULL AND rp.ViewCount > 1000 THEN 'Popular'
        ELSE 'Less Popular'
    END AS PopularityStatus
FROM
    RankedPosts rp
LEFT JOIN Users u ON rp.OwnerUserId = u.Id
LEFT JOIN UserReputation up ON u.Id = up.Id
LEFT JOIN ClosedPosts cp ON rp.PostId = cp.PostId
WHERE
    rp.rn = 1 
ORDER BY
    rp.Score DESC, rp.ViewCount DESC
LIMIT 50
OFFSET 0;