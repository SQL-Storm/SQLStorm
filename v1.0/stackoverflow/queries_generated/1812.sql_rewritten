WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVoteCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.OwnerUserId
), UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        SUM(COALESCE(up.UpVoteCount, 0)) AS TotalUpVotes,
        SUM(COALESCE(down.DownVoteCount, 0)) AS TotalDownVotes,
        SUM(COALESCE(rp.CommentCount, 0)) AS TotalComments
    FROM 
        Users u
    LEFT JOIN 
        RankedPosts rp ON u.Id = rp.OwnerUserId
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS UpVoteCount FROM Votes WHERE VoteTypeId = 2 GROUP BY PostId) up ON rp.PostId = up.PostId
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS DownVoteCount FROM Votes WHERE VoteTypeId = 3 GROUP BY PostId) down ON rp.PostId = down.PostId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
)
SELECT 
    u.UserId,
    u.DisplayName,
    u.Reputation,
    u.TotalUpVotes,
    u.TotalDownVotes,
    u.TotalComments,
    CASE 
        WHEN u.TotalUpVotes > u.TotalDownVotes THEN 'Dominantly Positive'
        WHEN u.TotalDownVotes > u.TotalUpVotes THEN 'Dominantly Negative'
        ELSE 'Neutral'
    END AS UserSentiment,
    COALESCE(NULLIF(u.TotalComments, 0), 'No Comments') AS CommentsFeedback
FROM 
    UserStats u
ORDER BY 
    u.Reputation DESC, u.TotalUpVotes DESC
LIMIT 10;