
WITH RecursivePostHistory AS (
    
    SELECT 
        p.Id AS PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate AS EditDate,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY ph.CreationDate DESC) AS EditRank
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.PostHistoryTypeId IN (4,5,6) 
),
UserPostInteraction AS (
    
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        p.Id AS PostId,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotesCount,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotesCount,
        COUNT(DISTINCT c.Id) AS CommentsCount,
        COUNT(DISTINCT b.Id) AS BadgesCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id AND v.UserId = u.Id
    LEFT JOIN 
        Comments c ON c.PostId = p.Id AND c.UserId = u.Id
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName, p.Id
),
PostTagCounts AS (
    
    SELECT 
        TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(Tags, '>', numbers.n), '>', -1)) AS TagName,
        COUNT(*) AS PostsCount
    FROM 
        Posts
    INNER JOIN 
        (SELECT 1 n UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5) numbers ON CHAR_LENGTH(Tags)
        -CHAR_LENGTH(REPLACE(Tags, '>', '')) >= numbers.n - 1
    GROUP BY 
        TagName
),
PostMetrics AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(SUM(ph.EditRank), 0) AS TotalEdits,
        ROUND(AVG(p.ViewCount), 2) AS AverageViews
    FROM 
        Posts p
    LEFT JOIN 
        RecursivePostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score
),
OverallMetrics AS (
    
    SELECT 
        upti.DisplayName,
        SUM(COALESCE(upti.UpVotesCount, 0)) AS TotalUpVotes,
        SUM(COALESCE(upti.DownVotesCount, 0)) AS TotalDownVotes,
        SUM(COALESCE(upti.CommentsCount, 0)) AS TotalComments,
        SUM(COALESCE(upti.BadgesCount, 0)) AS TotalBadges,
        COUNT(DISTINCT pm.PostId) AS TotalPosts,
        SUM(pm.TotalEdits) AS TotalEdits,
        AVG(pm.AverageViews) AS AvgViewsPerPost
    FROM 
        UserPostInteraction upti
    LEFT JOIN 
        PostMetrics pm ON pm.PostId = upti.PostId
    GROUP BY 
        upti.DisplayName
)
SELECT 
    o.DisplayName,
    o.TotalUpVotes,
    o.TotalDownVotes,
    o.TotalComments,
    o.TotalBadges,
    o.TotalPosts,
    o.TotalEdits,
    o.AvgViewsPerPost,
    CASE 
        WHEN o.TotalPosts > 0 THEN ROUND(CAST(o.TotalUpVotes AS decimal) / o.TotalPosts, 2) 
        ELSE 0 
    END AS UpVotesPerPost,
    CASE 
        WHEN o.TotalPosts > 0 THEN ROUND(CAST(o.TotalDownVotes AS decimal) / o.TotalPosts, 2) 
        ELSE 0 
    END AS DownVotesPerPost
FROM 
    OverallMetrics o
ORDER BY 
    o.TotalUpVotes DESC;
