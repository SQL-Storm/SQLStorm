WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.ViewCount,
        COUNT(v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC, COUNT(v.Id) DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= '2020-01-01' 
    GROUP BY 
        p.Id, p.Title, p.PostTypeId, p.ViewCount
),
PostStats AS (
    SELECT 
        p.PostId,
        COALESCE(COUNT(c.Id), 0) AS CommentCount,
        COALESCE(SUM(b.Class), 0) AS TotalBadges, 
        COALESCE(MAX(ph.CreationDate), '1970-01-01') AS LastEditDate
    FROM 
        RankedPosts p
    LEFT JOIN 
        Comments c ON p.PostId = c.PostId
    LEFT JOIN 
        Badges b ON b.UserId = p.OwnerUserId
    LEFT JOIN 
        PostHistory ph ON p.PostId = ph.PostId AND ph.PostHistoryTypeId IN (4, 5, 6) 
    GROUP BY 
        p.PostId
),
FilteredStats AS (
    SELECT 
        ps.PostId,
        ps.CommentCount,
        ps.TotalBadges,
        ps.LastEditDate,
        rp.ViewCount,
        rp.Rank
    FROM 
        PostStats ps
    JOIN 
        RankedPosts rp ON ps.PostId = rp.PostId
    WHERE 
        ps.CommentCount < 10 AND ps.TotalBadges > 1
),
RankedFilteredStats AS (
    SELECT 
        PostId,
        CommentCount,
        TotalBadges,
        LastEditDate,
        ViewCount,
        Rank,
        ROW_NUMBER() OVER (ORDER BY ViewCount DESC, CommentCount ASC) AS FilteredRank
    FROM 
        FilteredStats
)
SELECT 
    ffs.PostId,
    ffs.CommentCount,
    ffs.TotalBadges,
    ffs.LastEditDate,
    ffs.ViewCount,
    ffs.Rank,
    CASE 
        WHEN ffs.LastEditDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' THEN 'Stale'
        WHEN ffs.LastEditDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month' THEN 'Recently Edited'
        ELSE 'Old Edit'
    END AS EditStatus
FROM 
    RankedFilteredStats ffs
WHERE 
    ffs.FilteredRank <= 100
ORDER BY 
    ffs.FilteredRank ASC;