
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS ScoreRank,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Posts t ON p.Id = t.Id
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.Score, p.ViewCount, u.DisplayName, u.Reputation
),
PostPerformance AS (
    SELECT 
        PostId,
        Title,
        Body,
        CreationDate,
        Score,
        ViewCount,
        OwnerDisplayName,
        OwnerReputation,
        Tags,
        CASE 
            WHEN Score >= 100 THEN 'High Performer'
            WHEN Score >= 50 THEN 'Medium Performer'
            ELSE 'Low Performer'
        END AS PerformanceCategory
    FROM 
        RankedPosts
),
CommentCounts AS (
    SELECT 
        PostId,
        COUNT(*) AS TotalComments
    FROM 
        Comments
    GROUP BY 
        PostId
),
FinalResults AS (
    SELECT 
        pp.PostId,
        pp.Title,
        pp.OwnerDisplayName,
        pp.OwnerReputation,
        pp.CreationDate,
        pp.Score,
        pp.ViewCount,
        pp.Tags,
        COALESCE(pc.TotalComments, 0) AS TotalComments,
        pp.PerformanceCategory
    FROM 
        PostPerformance pp
    LEFT JOIN 
        CommentCounts pc ON pp.PostId = pc.PostId
)

SELECT 
    *,
    CONCAT(OwnerDisplayName, ' - ', PerformanceCategory) AS OwnerWithPerformance
FROM 
    FinalResults
WHERE 
    TotalComments IS NOT NULL 
ORDER BY 
    Score DESC, CreationDate DESC;
