
WITH Recursive_Posts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        a.Id AS PostId,
        a.Title,
        a.Body,
        a.CreationDate,
        a.Score,
        a.OwnerUserId,
        rp.Level + 1
    FROM 
        Posts a
    INNER JOIN 
        Recursive_Posts rp ON a.ParentId = rp.PostId
),
Post_Scores AS (
    SELECT 
        p.OwnerUserId,
        SUM(p.Score) AS TotalScore,
        COUNT(DISTINCT p.Id) AS QuestionCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 AND p.CreationDate > (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year') 
    GROUP BY 
        p.OwnerUserId
),
User_Statistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(b.Count, 0) AS BadgeCount,
        ps.TotalScore,
        ps.QuestionCount
    FROM 
        Users u
    LEFT JOIN (
        SELECT 
            UserId,
            COUNT(*) AS Count
        FROM 
            Badges
        GROUP BY 
            UserId
    ) b ON u.Id = b.UserId
    LEFT JOIN Post_Scores ps ON u.Id = ps.OwnerUserId
)
SELECT 
    us.UserId,
    us.DisplayName,
    COALESCE(us.BadgeCount, 0) AS BadgeCount,
    COALESCE(us.TotalScore, 0) AS TotalScore,
    COALESCE(us.QuestionCount, 0) AS QuestionCount,
    COUNT(DISTINCT rp.PostId) AS AnswerCount,
    AVG(rp.Score) AS AverageAnswerScore,
    ARRAY_AGG(DISTINCT rp.Title) AS RelatedQuestions,
    STRING_AGG(DISTINCT CASE 
        WHEN ph.PostHistoryTypeId = 10 THEN cr.Name 
        ELSE NULL 
    END, ', ') AS CloseReasons
FROM 
    User_Statistics us
LEFT JOIN 
    Recursive_Posts rp ON us.UserId = rp.OwnerUserId
LEFT JOIN 
    PostHistory ph ON ph.UserId = us.UserId
LEFT JOIN 
    CloseReasonTypes cr ON cr.Id = ph.Comment 
WHERE 
    ph.PostHistoryTypeId IN (10, 11, 12) 
GROUP BY 
    us.UserId, us.DisplayName, us.TotalScore, us.QuestionCount, us.BadgeCount
ORDER BY 
    TotalScore DESC, QuestionCount DESC
LIMIT 50;
