WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
        AND p.Score IS NOT NULL
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount
),
PostHistoryData AS (
    SELECT 
        ph.PostId,
        MAX(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN ph.CreationDate END) AS ClosureDate,
        STRING_AGG(DISTINCT CASE WHEN ph.PostHistoryTypeId = 6 THEN ph.Text END, ', ') AS EditedTags,
        COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId = 12 THEN ph.Id END) AS DeletionCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT v.Id) AS VoteCount,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounty,
        AVG(u.Reputation) AS AvgReputation
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    p.PostId,
    p.Title,
    p.CreationDate,
    p.Score,
    COALESCE(ph.ClosureDate, 'Not Closed') AS ClosureStatus,
    COALESCE(ph.EditedTags, 'No Tags Edited') AS EditedTags,
    ph.DeletionCount,
    ue.UserId,
    ue.DisplayName,
    ue.VoteCount,
    ue.TotalBounty
FROM 
    RankedPosts p
LEFT JOIN 
    PostHistoryData ph ON p.PostId = ph.PostId
LEFT JOIN 
    UserEngagement ue ON p.PostId = (SELECT ParentId FROM Posts WHERE Id = p.PostId AND ParentId IS NOT NULL)
WHERE 
    p.Rank <= 10
ORDER BY 
    p.Score DESC, p.CreationDate DESC;