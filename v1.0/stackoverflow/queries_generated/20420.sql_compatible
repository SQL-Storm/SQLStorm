
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS PostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id), 0) AS DownVotes,
        COALESCE(STRING_AGG(DISTINCT t.TagName, ', '), '') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        LATERAL (SELECT UNNEST(string_to_array(p.Tags, '>')) AS TagName) t ON TRUE
    WHERE 
        p.Score > 0
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount, p.CreationDate
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        BadgeCount,
        GoldBadges,
        SilverBadges,
        BronzeBadges,
        RANK() OVER (ORDER BY SUM(UpVotes - DownVotes) DESC) AS UserRank
    FROM 
        UserStatistics
    GROUP BY 
        UserId, DisplayName, BadgeCount, GoldBadges, SilverBadges, BronzeBadges
),
PostsWithUserStats AS (
    SELECT 
        r.PostId,
        r.Title,
        r.Score,
        r.ViewCount,
        r.CommentCount,
        r.UpVotes,
        r.DownVotes,
        r.Tags,
        u.UserId,
        u.DisplayName AS OwnerDisplayName,
        u.BadgeCount,
        ROW_NUMBER() OVER (PARTITION BY r.PostId ORDER BY r.Score DESC) AS RankInPost
    FROM 
        RankedPosts r
    JOIN 
        Users u ON u.Id = r.OwnerUserId
    WHERE 
        r.PostRank <= 5
)
SELECT 
    p.PostId,
    p.Title,
    p.Score,
    p.ViewCount,
    p.CommentCount,
    p.UpVotes,
    p.DownVotes,
    p.Tags,
    p.OwnerDisplayName,
    p.BadgeCount,
    COALESCE(NULLIF(STRING_AGG(p.Tags, '; '), ''), 'No Tags') AS TagsList,
    CASE 
        WHEN p.CommentCount = 0 THEN 'No Comments'
        ELSE 'Has Comments'
    END AS CommentStatus,
    CASE 
        WHEN p.UpVotes > p.DownVotes THEN 'Positive Engagement'
        WHEN p.UpVotes < p.DownVotes THEN 'Negative Engagement'
        ELSE 'Neutral Engagement'
    END AS EngagementStatus
FROM 
    PostsWithUserStats p
ORDER BY 
    p.Score DESC, 
    p.ViewCount DESC;
