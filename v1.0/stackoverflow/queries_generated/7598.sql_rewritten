WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.ViewCount DESC) AS UserPostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        u.Reputation > 1000 AND 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
), MostActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(p.Score) AS TotalScore
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId
    WHERE 
        u.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '5 years'
    GROUP BY 
        u.Id
    HAVING 
        COUNT(DISTINCT p.Id) > 10
), TopBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
), UserPerformance AS (
    SELECT 
        mu.UserId,
        mu.DisplayName,
        mu.PostCount,
        mu.TotalScore,
        tb.BadgeCount,
        rp.PostId,
        rp.Title
    FROM 
        MostActiveUsers mu
    LEFT JOIN 
        TopBadges tb ON mu.UserId = tb.UserId
    LEFT JOIN 
        RankedPosts rp ON mu.UserId = rp.OwnerUserId
)
SELECT 
    up.DisplayName,
    up.PostCount,
    up.TotalScore,
    up.BadgeCount,
    up.Title,
    up.PostId
FROM 
    UserPerformance up
WHERE 
    up.UserId IS NOT NULL
ORDER BY 
    up.TotalScore DESC, up.PostCount DESC 
LIMIT 100;