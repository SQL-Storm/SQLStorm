WITH RankedPosts AS (
    SELECT 
        p.Id AS PostID,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS OwnerPostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        p.Id, u.DisplayName
),
TopOwnerPosts AS (
    SELECT 
        PostID, 
        Title, 
        Body, 
        CreationDate, 
        ViewCount, 
        AnswerCount, 
        CommentCount, 
        OwnerDisplayName
    FROM 
        RankedPosts
    WHERE 
        OwnerPostRank = 1
),
TagAggregate AS (
    SELECT
        unnest(string_to_array(tags, '><')) AS Tag, 
        COUNT(*) AS PostCount
    FROM 
        Posts
    WHERE 
        tags IS NOT NULL
    GROUP BY 
        Tag
    ORDER BY 
        PostCount DESC
    LIMIT 10
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    t.PostID,
    t.Title,
    t.Body,
    t.CreationDate,
    t.ViewCount,
    t.AnswerCount,
    t.CommentCount,
    t.OwnerDisplayName,
    ta.Tag,
    ta.PostCount,
    ub.BadgeCount
FROM 
    TopOwnerPosts t
JOIN 
    TagAggregate ta ON true 
JOIN 
    UserBadges ub ON ub.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = t.PostID)
ORDER BY 
    t.ViewCount DESC, t.AnswerCount DESC, t.CommentCount DESC;