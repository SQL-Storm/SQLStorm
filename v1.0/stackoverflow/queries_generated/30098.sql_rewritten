WITH RecursiveTagUsage AS (
    SELECT
        t.Id AS TagId,
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM
        Tags t
    LEFT JOIN
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'
    GROUP BY
        t.Id, t.TagName
    UNION ALL
    SELECT
        tu.TagId,
        tu.TagName,
        tu.PostCount + 1
    FROM
        RecursiveTagUsage tu
    JOIN
        PostLinks pl ON pl.RelatedPostId = tu.TagId
    JOIN
        Posts p ON p.Id = pl.PostId
)

SELECT
    u.Id AS UserId,
    u.DisplayName,
    SUM(COALESCE(b.Class, 0)) AS TotalBadges,
    SUM(COALESCE(p.AnswerCount, 0)) AS TotalAnswers,
    SUM(v.BountyAmount) AS TotalBounties,
    STRING_AGG(DISTINCT t.TagName, ', ') AS PopularTags,
    AVG(CASE WHEN p.CreationDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' THEN p.Score END) AS AverageOldPostScore
FROM
    Users u
LEFT JOIN
    Badges b ON b.UserId = u.Id
LEFT JOIN
    Posts p ON p.OwnerUserId = u.Id
LEFT JOIN
    Votes v ON v.UserId = u.Id
LEFT JOIN
    Tags t ON p.Tags LIKE '%' || t.TagName || '%'
WHERE
    u.Reputation >= 100
GROUP BY
    u.Id, u.DisplayName
HAVING
    SUM(COALESCE(b.Class, 0)) > 0 OR COUNT(p.Id) > 5
ORDER BY
    TotalBadges DESC,
    TotalAnswers DESC
LIMIT 10;