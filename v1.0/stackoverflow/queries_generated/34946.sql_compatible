
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
),

UserBadges AS (
    SELECT 
        b.UserId, 
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),

PostWithHistory AS (
    SELECT 
        p.Id AS PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate AS HistoryDate
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.OwnerDisplayName,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    ph.HistoryDate AS LastClosureDate,
    COUNT(c.Id) AS CommentCount,

    
    COALESCE((SELECT COUNT(DISTINCT pl.RelatedPostId)
               FROM PostLinks pl
               WHERE pl.PostId = rp.PostId), 0) AS RelatedPostsCount,

    
    CASE 
        WHEN rp.Score > 100 THEN 'High'
        WHEN rp.Score BETWEEN 51 AND 100 THEN 'Medium'
        ELSE 'Low'
    END AS ScoreCategory

FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges ub ON rp.OwnerDisplayName = ub.UserId
LEFT JOIN 
    Comments c ON rp.PostId = c.PostId
LEFT JOIN 
    PostWithHistory ph ON rp.PostId = ph.PostId
WHERE 
    rp.PostRank = 1 
GROUP BY 
    rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.OwnerDisplayName, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges, ph.HistoryDate
ORDER BY 
    rp.Score DESC, rp.CreationDate DESC;
