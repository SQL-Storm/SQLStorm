
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Body,
        ARRAY_LENGTH(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'), 1) AS TagCount,
        u.DisplayName AS OwnerDisplayName,
        p.CreationDate,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM
        Posts p
    JOIN
        Users u ON p.OwnerUserId = u.Id
    WHERE
        p.PostTypeId = 1 
),
PostStats AS (
    SELECT
        rp.PostId,
        rp.Title,
        rp.TagCount,
        rp.OwnerDisplayName,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        COALESCE(pa.AnswerCount, 0) AS AnswerCount,
        COALESCE(v.UpVotes, 0) AS UpVotes,
        COALESCE(v.DownVotes, 0) AS DownVotes,
        rp.PostRank
    FROM
        RankedPosts rp
    LEFT JOIN (
        SELECT
            PostId,
            COUNT(*) AS CommentCount
        FROM
            Comments
        GROUP BY
            PostId
    ) pc ON rp.PostId = pc.PostId
    LEFT JOIN (
        SELECT
            ParentId AS PostId,
            COUNT(*) AS AnswerCount
        FROM
            Posts
        WHERE
            PostTypeId = 2 
        GROUP BY
            ParentId
    ) pa ON rp.PostId = pa.PostId
    LEFT JOIN (
        SELECT
            PostId,
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
        FROM
            Votes
        GROUP BY
            PostId
    ) v ON rp.PostId = v.PostId
)
SELECT
    ps.PostId,
    ps.Title,
    ps.TagCount,
    ps.OwnerDisplayName,
    ps.CommentCount,
    ps.AnswerCount,
    ps.UpVotes,
    ps.DownVotes,
    CASE
        WHEN ps.PostRank = 1 THEN 'Latest'
        WHEN ps.PostRank = 2 THEN 'Second Latest'
        ELSE 'Older'
    END AS PostAgeCategory
FROM
    PostStats ps
WHERE
    ps.TagCount > 2 
ORDER BY
    ps.UpVotes DESC, ps.CreationDate DESC
LIMIT 100;
