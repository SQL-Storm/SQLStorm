
WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.Score,
        COALESCE(V.UpVotes, 0) AS UpVotes,
        COALESCE(V.DownVotes, 0) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC) AS Rank,
        (SELECT COUNT(C.Id) 
         FROM Comments C 
         WHERE C.PostId = P.Id) AS CommentCount,
        (SELECT COUNT(B.Id) 
         FROM Badges B 
         WHERE B.UserId = P.OwnerUserId) AS BadgeCount
    FROM 
        Posts P
    LEFT JOIN 
        Users U ON P.OwnerUserId = U.Id
    LEFT JOIN (
        SELECT 
            PostId,
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
        FROM 
            Votes
        GROUP BY 
            PostId
    ) V ON P.Id = V.PostId
    WHERE 
        P.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    AND 
        P.Score > (SELECT AVG(Score) FROM Posts WHERE CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year')
),
FilteredPosts AS (
    SELECT 
        RP.*,
        CASE 
            WHEN RP.Rank < 5 THEN 'Top Post'
            ELSE 'Regular Post'
        END AS PostCategory,
        AVG(PH.CreationDate) AS AvgHistoryDate
    FROM 
        RankedPosts RP
    LEFT JOIN 
        PostHistory PH ON RP.PostId = PH.PostId
    WHERE 
        RP.BadgeCount > 0
    GROUP BY 
        RP.PostId, RP.Title, RP.CreationDate, RP.Score, RP.UpVotes, RP.DownVotes, RP.Rank
)
SELECT 
    FP.PostId,
    FP.Title,
    FP.CreationDate,
    FP.Score,
    FP.UpVotes,
    FP.DownVotes,
    FP.PostCategory,
    COALESCE(PH.Comment, 'No Comments') AS LastComment,
    FP.AvgHistoryDate
FROM 
    FilteredPosts FP
LEFT JOIN (
    SELECT 
        P.Id AS PostId,
        MAX(C.CreationDate) AS LastCommentDate,
        MAX(C.Text) AS Comment
    FROM 
        Posts P
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    GROUP BY 
        P.Id
) PH ON FP.PostId = PH.PostId
ORDER BY 
    FP.Score DESC, FP.CreationDate ASC
FETCH FIRST 10 ROWS ONLY;
