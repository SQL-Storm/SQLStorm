WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS total_posts
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR'
),
UserReputation AS (
    SELECT 
        u.Id,
        u.Reputation,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.Reputation
),
FeaturedBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    WHERE 
        b.Class = 1 
    GROUP BY 
        b.UserId
    HAVING 
        COUNT(*) > 2 
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        ur.Reputation,
        ur.UpVotes,
        ur.DownVotes,
        fb.BadgeNames,
        CASE 
            WHEN rp.Score > 100 THEN 'High Scorer' 
            ELSE 'Regular' 
        END AS Popularity
    FROM 
        RankedPosts rp
    JOIN 
        Users u ON rp.OwnerUserId = u.Id
    LEFT JOIN 
        UserReputation ur ON u.Id = ur.Id
    LEFT JOIN 
        FeaturedBadges fb ON u.Id = fb.UserId
)
SELECT 
    pd.*,
    COALESCE(ph.Comment, 'No comments') AS LastComment,
    MAX(CASE WHEN c.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 MONTH' THEN c.Text END) AS RecentComment,
    COUNT(DISTINCT pl.RelatedPostId) AS RelatedPostCount,
    COUNT(DISTINCT c.Id) AS TotalComments
FROM 
    PostDetails pd
LEFT JOIN 
    Comments c ON pd.PostId = c.PostId
LEFT JOIN 
    PostLinks pl ON pd.PostId = pl.PostId
LEFT JOIN 
    PostHistory ph ON pd.PostId = ph.PostId AND ph.CreationDate IN (
        SELECT MAX(CreationDate) 
        FROM PostHistory 
        WHERE PostId = pd.PostId
    )
GROUP BY 
    pd.PostId, pd.Title, pd.Score, pd.CreationDate, pd.OwnerDisplayName, 
    pd.Reputation, pd.UpVotes, pd.DownVotes, pd.BadgeNames, 
    ph.Comment
HAVING 
    AVG(pd.Reputation) IS NOT NULL
ORDER BY 
    pd.Score DESC, pd.Popularity;