
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= DATE_SUB(DATE '2024-10-01', INTERVAL 1 YEAR)
),
BadgesSummary AS (
    SELECT 
        b.UserId,
        COUNT(*) AS TotalBadges,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
ActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.Views,
        COALESCE(bs.TotalBadges, 0) AS TotalBadges,
        COALESCE(bs.GoldBadges, 0) AS GoldBadges,
        COALESCE(bs.SilverBadges, 0) AS SilverBadges,
        COALESCE(bs.BronzeBadges, 0) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        BadgesSummary bs ON u.Id = bs.UserId
    WHERE 
        u.LastAccessDate >= DATE_SUB(DATE '2024-10-01', INTERVAL 30 DAY)
),
PostInteractions AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Comments c
    LEFT JOIN 
        Votes v ON c.PostId = v.PostId
    GROUP BY 
        c.PostId
)
SELECT 
    au.DisplayName,
    au.Reputation,
    apr.PostId,
    apr.Title,
    apr.CreationDate,
    apr.Score,
    pi.CommentCount,
    pi.UpVotes,
    pi.DownVotes,
    CASE 
        WHEN au.Reputation > 1000 THEN 'Top Contributor'
        WHEN au.Reputation BETWEEN 500 AND 1000 THEN 'Moderate Contributor'
        ELSE 'New Contributor'
    END AS ContributorLevel
FROM 
    ActiveUsers au
JOIN 
    RankedPosts apr ON au.UserId = apr.OwnerUserId AND apr.UserPostRank <= 5
JOIN 
    PostInteractions pi ON apr.PostId = pi.PostId
ORDER BY 
    au.Reputation DESC, apr.CreationDate DESC
LIMIT 100;
