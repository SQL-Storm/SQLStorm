
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostID,
        p.Title,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        p.ViewCount,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS OwnerPostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= CURRENT_DATE - INTERVAL '1 year' 
        AND p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, u.DisplayName, p.ViewCount, p.Score
),
TopRankedPosts AS (
    SELECT 
        PostID, Title, CreationDate, OwnerDisplayName, ViewCount, Score, CommentCount
    FROM 
        RankedPosts
    WHERE 
        OwnerPostRank <= 5
)
SELECT 
    tr.PostID,
    tr.Title,
    tr.CreationDate,
    tr.OwnerDisplayName,
    tr.ViewCount,
    tr.Score,
    tr.CommentCount,
    pt.Name AS PostTypeName,
    COUNT(DISTINCT v.Id) AS VoteCount,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    TopRankedPosts tr
JOIN 
    PostTypes pt ON EXISTS (SELECT 1 FROM Posts p WHERE p.Id = tr.PostID AND p.PostTypeId = pt.Id)
LEFT JOIN 
    Votes v ON tr.PostID = v.PostId
LEFT JOIN 
    LATERAL (SELECT unnest(string_to_array((SELECT Tags FROM Posts WHERE Id = tr.PostID), ',')) AS TagName) AS tagList ON TRUE
LEFT JOIN 
    Tags t ON t.TagName = tagList.TagName
GROUP BY 
    tr.PostID, tr.Title, tr.CreationDate, tr.OwnerDisplayName, tr.ViewCount, tr.Score, pt.Name
ORDER BY 
    tr.Score DESC, tr.ViewCount DESC;
