WITH UserReputation AS (
    SELECT 
        Id,
        DisplayName,
        Reputation,
        RANK() OVER (ORDER BY Reputation DESC) AS ReputationRank,
        CASE 
            WHEN Reputation > 10000 THEN 'High'
            WHEN Reputation BETWEEN 1000 AND 10000 THEN 'Medium'
            ELSE 'Low'
        END AS ReputationCategory
    FROM 
        Users
),
ActivePosts AS (
    SELECT 
        Id AS PostId,
        Title,
        Body,
        CreationDate,
        Score,
        ViewCount,
        OwnerUserId,
        (SELECT COUNT(*) FROM Comments WHERE PostId = Posts.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY OwnerUserId ORDER BY CreationDate DESC) AS UserPostRank
    FROM 
        Posts
    WHERE 
        LastActivityDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' AND 
        PostTypeId IN (1, 2)  
),
FilteredPosts AS (
    SELECT 
        ap.PostId,
        ap.Title,
        ap.Body,
        ap.CreationDate,
        ap.Score,
        ap.ViewCount,
        ur.DisplayName,
        ur.ReputationCategory,
        ap.CommentCount,
        CASE 
            WHEN ap.CommentCount = 0 THEN 'No Comments'
            ELSE 'Has Comments'
        END AS CommentStatus,
        COUNT(DISTINCT pl.RelatedPostId) AS RelatedLinks,
        COALESCE(SUM(vb.BountyAmount), 0) AS TotalBounty
    FROM 
        ActivePosts ap
    JOIN 
        UserReputation ur ON ap.OwnerUserId = ur.Id
    LEFT JOIN 
        PostLinks pl ON pl.PostId = ap.PostId
    LEFT JOIN 
        Votes vb ON vb.PostId = ap.PostId AND vb.VoteTypeId = 8  
    GROUP BY 
        ap.PostId, ap.Title, ap.Body, ap.CreationDate, ap.Score, ap.ViewCount, ur.DisplayName, ur.ReputationCategory, ap.CommentCount
),
TopPosts AS (
    SELECT 
        fp.*,
        RANK() OVER (PARTITION BY ReputationCategory ORDER BY Score DESC) AS ScoreRank
    FROM 
        FilteredPosts fp
)
SELECT 
    tp.Title,
    tp.OwnerUserId,
    tp.DisplayName AS OwnerDisplayName,
    tp.ReputationCategory,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    tp.CommentStatus,
    tp.RelatedLinks,
    tp.TotalBounty
FROM 
    TopPosts tp
WHERE 
    tp.ScoreRank <= 5  
ORDER BY 
    tp.ReputationCategory, tp.Score DESC
OPTION (RECOMPILE);