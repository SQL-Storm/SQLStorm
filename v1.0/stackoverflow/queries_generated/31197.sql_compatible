
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.OwnerUserId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id,
        p.ParentId,
        p.OwnerUserId,
        ph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy ph ON p.ParentId = ph.PostId
),

UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN bh.Class = 1 THEN 3 WHEN bh.Class = 2 THEN 2 WHEN bh.Class = 3 THEN 1 ELSE 0 END) AS BadgeScore,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        Badges bh ON u.Id = bh.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),

PostVoteStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title
),

TagPostAggregates AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews
    FROM 
        Tags t
    LEFT JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'
    GROUP BY 
        t.TagName
),

RecentPostHistory AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.UserDisplayName,
        ph.CreationDate, 
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS rn
    FROM 
        PostHistory ph
)

SELECT 
    u.DisplayName AS UserName,
    u.Reputation AS UserReputation,
    COALESCE(p.Title, 'No Title') AS PostTitle,
    COALESCE(ps.UpVotes, 0) AS TotalUpVotes,
    COALESCE(ps.DownVotes, 0) AS TotalDownVotes,
    COUNT(DISTINCT tags.TagName) AS DistinctTags,
    SUM(CASE WHEN p.CloseReasonId IS NOT NULL THEN 1 ELSE 0 END) AS ClosedPosts,
    MAX(rp.PostId) AS RootPostId,
    COUNT(DISTINCT rp.PostId) AS ChildPostCount,
    MAX(rp.Level) AS MaxHierarchyLevel,
    STRING_AGG(DISTINCT pht.UserDisplayName, ', ') AS RecentEditors
FROM 
    Users u
JOIN 
    UserReputation ur ON u.Id = ur.UserId
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    PostVoteStats ps ON p.Id = ps.PostId
LEFT JOIN 
    RecursivePostHierarchy rp ON p.Id = rp.PostId
LEFT JOIN 
    TagPostAggregates tags ON p.Tags LIKE '%' || tags.TagName || '%'
LEFT JOIN 
    RecentPostHistory pht ON p.Id = pht.PostId AND pht.rn <= 5
WHERE 
    u.Reputation > 1000 
GROUP BY 
    u.DisplayName, u.Reputation, p.Title
HAVING 
    COUNT(DISTINCT tags.TagName) > 3 
    AND SUM(CASE WHEN p.CloseReasonId IS NOT NULL THEN 1 ELSE 0 END) = 0
ORDER BY 
    u.Reputation DESC;
