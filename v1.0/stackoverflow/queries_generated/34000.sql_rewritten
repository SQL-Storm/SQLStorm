WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(b.Class) AS TotalBadgeClass,
        u.Reputation,
        u.Views
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostsWithDetails AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.Score,
        COALESCE(p.CLOSED_DATE, 'Active') AS PostStatus,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
RankedPosts AS (
    SELECT 
        p.Title,
        p.CreationDate,
        u.DisplayName,
        p.Score,
        p.CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM 
        PostsWithDetails p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
)
SELECT 
    p.Title,
    p.CreationDate,
    u.DisplayName,
    u.Reputation,
    u.TotalBadgeClass,
    p.Score,
    p.CommentCount,
    CASE 
        WHEN u.TotalBadgeClass > 5 THEN 'Experienced User'
        WHEN u.TotalBadgeClass BETWEEN 1 AND 5 THEN 'Novice User'
        ELSE 'Newcomer'
    END AS UserCategory,
    COALESCE(r.PostId, 0) AS IsAParentPost
FROM 
    RankedPosts p
JOIN 
    UserReputation u ON p.OwnerUserId = u.UserId
LEFT JOIN 
    RecursivePostHierarchy r ON p.Title = r.Title
WHERE 
    p.Rank = 1
ORDER BY 
    p.Score DESC, 
    u.Reputation DESC;