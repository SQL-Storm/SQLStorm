WITH UserBadges AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
),
PostScores AS (
    SELECT 
        P.Id AS PostId,
        P.OwnerUserId,
        SUM(V.VoteTypeId = 2) - SUM(V.VoteTypeId = 3) AS Score,
        COUNT(C.Id) AS CommentCount
    FROM 
        Posts P
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    WHERE 
        P.CreationDate >= cast('2024-10-01' as date) - interval '1 year'
    GROUP BY 
        P.Id
),
RankedPosts AS (
    SELECT 
        PS.PostId,
        PS.OwnerUserId,
        PS.Score,
        PS.CommentCount,
        RANK() OVER (PARTITION BY PS.OwnerUserId ORDER BY PS.Score DESC) AS PostRank
    FROM 
        PostScores PS
    WHERE 
        PS.Score IS NOT NULL
),
TopUsers AS (
    SELECT 
        UB.UserId,
        UB.BadgeCount,
        RB.PostId,
        RB.Score,
        RB.PostRank
    FROM 
        UserBadges UB
    JOIN 
        RankedPosts RB ON UB.UserId = RB.OwnerUserId
    WHERE 
        UB.BadgeCount > 0
)
SELECT 
    U.DisplayName,
    COALESCE(SUM(TU.Score), 0) AS TotalScore,
    COALESCE(MAX(TU.PostRank), 0) AS HighestPostRank,
    COALESCE(AVG(TU.BadgeCount), 0) AS AverageBadges,
    ARRAY_AGG(DISTINCT P.Title) AS TopPostTitles
FROM 
    Users U
LEFT JOIN 
    TopUsers TU ON U.Id = TU.UserId
LEFT JOIN 
    Posts P ON TU.PostId = P.Id
GROUP BY 
    U.DisplayName
ORDER BY 
    TotalScore DESC
LIMIT 10;