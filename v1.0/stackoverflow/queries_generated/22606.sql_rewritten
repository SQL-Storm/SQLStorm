WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.PostTypeId,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS PostRank,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVoteCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
RolledBackTitles AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        ph.CreationDate,
        ph.Comment
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 7 
        AND ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '2 months'
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(p.Id) > 10
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    rp.UpVoteCount,
    COALESCE(u.UserId, 0) AS UserId,
    COALESCE(ur.Reputation, 0) AS UserReputation,
    COALESCE(ur.BadgeCount, 0) AS UserBadgeCount,
    pt.TagName,
    CASE 
        WHEN rb.UserId IS NOT NULL THEN 'Title Rolled Back'
        ELSE 'No Rollback'
    END AS RollbackStatus
FROM 
    RankedPosts rp
LEFT JOIN 
    RolledBackTitles rb ON rp.PostId = rb.PostId
LEFT JOIN 
    UserReputation ur ON rp.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = ur.UserId)
LEFT JOIN 
    PopularTags pt ON pt.PostCount = (SELECT MAX(PostCount) FROM PopularTags)
WHERE 
    rp.PostRank <= 5
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC
LIMIT 50
WITH ORDINALITY;