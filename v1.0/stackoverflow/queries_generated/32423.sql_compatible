
WITH RecursivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        CAST(NULL AS VARCHAR) AS ParentTitle,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        a.Id AS PostId,
        a.Title,
        a.CreationDate,
        a.ViewCount,
        a.Score,
        a.OwnerUserId,
        r.Title AS ParentTitle,
        r.Level + 1
    FROM 
        Posts a
    INNER JOIN 
        RecursivePosts r ON a.ParentId = r.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.ParentTitle,
    rp.ViewCount,
    rp.Score,
    u.DisplayName AS OwnerDisplayName,
    u.Reputation AS OwnerReputation,
    COALESCE(bp.BadgeCount, 0) AS BadgeCount,
    COUNT(c.Id) AS CommentCount,
    COUNT(DISTINCT pl.RelatedPostId) AS RelatedPostCount
FROM 
    RecursivePosts rp
LEFT JOIN 
    Users u ON rp.OwnerUserId = u.Id
LEFT JOIN (
    SELECT 
        UserId, 
        COUNT(*) AS BadgeCount
    FROM 
        Badges
    GROUP BY 
        UserId
) bp ON u.Id = bp.UserId
LEFT JOIN 
    Comments c ON c.PostId = rp.PostId
LEFT JOIN 
    PostLinks pl ON pl.PostId = rp.PostId
WHERE 
    rp.CreationDate >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)
GROUP BY 
    rp.PostId, rp.Title, rp.ParentTitle, rp.ViewCount, rp.Score, 
    u.DisplayName, u.Reputation, bp.BadgeCount
HAVING 
    AVG(rp.Score) OVER () > 5 
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
