
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank,
        COALESCE(up.UpVotes, 0) AS UpVotes,
        COALESCE(dn.DownVotes, 0) AS DownVotes
    FROM Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN (
        SELECT UserId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
                       SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
        FROM Votes
        GROUP BY UserId
    ) AS up ON u.Id = up.UserId
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) AS c ON p.Id = c.PostId
    WHERE p.CreationDate >= CURRENT_DATE - INTERVAL '2 years'
),
TopUsers AS (
    SELECT 
        OwnerUserId,
        COUNT(*) AS PostCount,
        SUM(Score) AS TotalScore
    FROM RankedPosts
    GROUP BY OwnerUserId
    HAVING COUNT(*) > 5
)
SELECT 
    u.DisplayName,
    tu.PostCount,
    tu.TotalScore,
    COALESCE(rp.Title, 'No Posts') AS PostTitle,
    SUM(rp.UpVotes - rp.DownVotes) AS NetVotes,
    COUNT(DISTINCT c.Id) AS TotalComments
FROM TopUsers tu
JOIN Users u ON tu.OwnerUserId = u.Id
LEFT JOIN RankedPosts rp ON u.Id = rp.OwnerUserId AND rp.PostRank = 1
LEFT JOIN Comments c ON rp.Id = c.PostId
GROUP BY u.DisplayName, tu.PostCount, tu.TotalScore, rp.Title
ORDER BY tu.TotalScore DESC, tu.PostCount DESC
LIMIT 10;
