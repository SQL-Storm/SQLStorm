
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.CreationDate,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY TRIM(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2)) ORDER BY p.ViewCount DESC) AS TagRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= CURRENT_DATE - INTERVAL '1 year'
),
TagStats AS (
    SELECT 
        TRIM(UNNEST(string_to_array(TRIM(SUBSTRING(Tags, 2, LENGTH(Tags) - 2)), '><'))) ) AS Tag,
        COUNT(*) AS TotalPosts,
        SUM(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AcceptedAnswers,
        AVG(p.ViewCount) AS AvgViews
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        TRIM(UNNEST(string_to_array(TRIM(SUBSTRING(Tags, 2, LENGTH(Tags) - 2)), '><')))
),
PopularTags AS (
    SELECT
        Tag,
        TotalPosts,
        AcceptedAnswers,
        AvgViews,
        RANK() OVER (ORDER BY TotalPosts DESC) AS PopularityRank
    FROM 
        TagStats
),
RecentTopQuestions AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerDisplayName,
        rp.CreationDate,
        rp.ViewCount,
        pt.Tag,
        pt.PopularityRank
    FROM 
        RankedPosts rp
    JOIN 
        PopularTags pt ON TRIM(BOTH ' ' FROM ANY(STRING_TO_ARRAY(rp.Tags, '><'))) = pt.Tag
    WHERE 
        rp.TagRank = 1 
)
SELECT 
    rt.PostId,
    rt.Title,
    rt.OwnerDisplayName,
    rt.CreationDate,
    rt.ViewCount,
    pt.Tag,
    pt.PopularityRank
FROM 
    RecentTopQuestions rt
JOIN 
    PopularTags pt ON rt.Tag = pt.Tag
ORDER BY 
    pt.PopularityRank, rt.ViewCount DESC;
