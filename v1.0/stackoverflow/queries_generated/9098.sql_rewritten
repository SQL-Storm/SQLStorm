WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        COALESCE(a.AcceptedAnswerId, 0) AS AcceptedAnswerId,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.AcceptedAnswerId = a.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2  
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, a.AcceptedAnswerId
), 
TopQuestions AS (
    SELECT 
        rp.PostId, 
        rp.Title, 
        rp.ViewCount, 
        rp.Score, 
        rp.CreationDate, 
        rp.AcceptedAnswerId, 
        rp.CommentCount, 
        rp.VoteCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 10 AND rp.PostTypeId = 1  
), 
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        b.Name AS BadgeName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, b.Name
)
SELECT 
    tq.Title,
    tq.ViewCount,
    tq.Score,
    tq.CommentCount,
    tq.VoteCount,
    ub.BadgeName,
    ub.BadgeCount,
    tq.CreationDate
FROM 
    TopQuestions tq
JOIN 
    Users u ON tq.AcceptedAnswerId = u.Id
LEFT JOIN 
    UserBadges ub ON ub.UserId = u.Id
ORDER BY 
    tq.Score DESC, tq.ViewCount DESC;