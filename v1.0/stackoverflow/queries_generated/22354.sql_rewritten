WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.PostTypeId,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank,
        DENSE_RANK() OVER (ORDER BY p.CreationDate DESC) AS RecentRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR' 
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
CloseReasons AS (
    SELECT 
        post.Id AS PostId,
        c.Name AS CloseReasonName,
        COUNT(ch.Id) AS CloseCount
    FROM 
        Posts post
    LEFT JOIN 
        PostHistory ph ON ph.PostId = post.Id AND ph.PostHistoryTypeId = 10
    LEFT JOIN 
        CloseReasonTypes c ON c.Id::text = ph.Comment::text
    GROUP BY 
        post.Id, c.Name
),
PostsWithLinks AS (
    SELECT 
        p.Id AS PostId,
        COUNT(pl.RelatedPostId) AS LinkCount,
        STRING_AGG(DISTINCT l.Name, ', ') AS LinkTypes
    FROM 
        Posts p
    LEFT JOIN 
        PostLinks pl ON p.Id = pl.PostId
    LEFT JOIN 
        LinkTypes l ON l.Id = pl.LinkTypeId
    GROUP BY 
        p.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    ub.BadgeCount,
    CA.CloseReasonName,
    wp.LinkCount,
    wp.LinkTypes
FROM 
    RankedPosts rp
LEFT JOIN 
    UserBadges ub ON ub.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
LEFT JOIN 
    CloseReasons CA ON CA.PostId = rp.PostId
LEFT JOIN 
    PostsWithLinks wp ON wp.PostId = rp.PostId
WHERE 
    rp.ScoreRank <= 10  
ORDER BY 
    rp.RecentRank, rp.Score DESC, rp.Title
FETCH FIRST 100 ROWS ONLY;