WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RankByType,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        STRING_AGG(CAST(ph.PostHistoryTypeId AS VARCHAR), ', ') AS HistoryTypes,
        MAX(ph.CreationDate) AS LastChangeDate
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.CreationDate,
        rp.Score,
        ub.BadgeCount,
        phd.HistoryTypes,
        phd.LastChangeDate
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges ub ON rp.PostId = ub.UserId /* Implicitly using UserId for demonstration */
    LEFT JOIN 
        PostHistoryDetails phd ON rp.PostId = phd.PostId 
    WHERE 
        rp.RankByType <= 2 
        AND (rp.ViewCount > (SELECT AVG(ViewCount) FROM Posts) OR rp.Score > 0)
),
FinalOutput AS (
    SELECT 
        *,
        CASE 
            WHEN BadgeCount > 5 THEN 'Expert'
            ELSE 'Novice'
        END AS UserLevel,
        CASE 
            WHEN LastChangeDate IS NULL THEN 'Never edited'
            ELSE 'Last edited on ' || TO_CHAR(LastChangeDate, 'YYYY-MM-DD HH24:MI:SS')
        END AS LastChangeInfo
    FROM 
        FilteredPosts
)

SELECT 
    PostId,
    Title,
    ViewCount,
    CreationDate,
    Score,
    BadgeCount,
    HistoryTypes,
    UserLevel,
    LastChangeInfo
FROM 
    FinalOutput
ORDER BY 
    Score DESC, ViewCount DESC
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;