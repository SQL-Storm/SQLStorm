
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.OwnerUserId
),
FilteredPosts AS (
    SELECT 
        rp.*,
        (UpVotes - DownVotes) AS NetVotes,
        CASE 
            WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Has Accepted Answer' 
            ELSE 'No Accepted Answer' 
        END AS AnswerStatus
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Posts p ON p.Id = rp.AcceptedAnswerId
    WHERE 
        rp.Rank <= 3
)

SELECT 
    fp.Title,
    fp.CreationDate,
    fp.ViewCount,
    fp.Score,
    fp.NetVotes,
    fp.AnswerStatus,
    u.DisplayName AS OwnerName,
    u.Reputation AS OwnerReputation,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    FilteredPosts fp
JOIN 
    Users u ON u.Id = fp.OwnerUserId
LEFT JOIN 
    LATERAL string_to_array(substring(fp.Tags, 2, length(fp.Tags) - 2), '><') AS tag
JOIN 
    Tags t ON t.TagName = tag
WHERE 
    fp.NetVotes > 0 OR fp.CommentCount > 5
GROUP BY 
    fp.Title, fp.CreationDate, fp.ViewCount, fp.Score, fp.NetVotes, fp.AnswerStatus, u.DisplayName, u.Reputation
ORDER BY 
    fp.NetVotes DESC, fp.Score DESC
LIMIT 10
OFFSET 5;
