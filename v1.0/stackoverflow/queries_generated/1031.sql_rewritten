WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.AnswerCount,
        p.CreationDate,
        COALESCE(NULLIF(p.AcceptedAnswerId, -1), 0) AS AcceptedAnswerId,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVoteCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVoteCount,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= (cast('2024-10-01' as date) - INTERVAL '1 year')
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.AnswerCount, p.CreationDate, p.AcceptedAnswerId
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)
SELECT 
    u.DisplayName,
    ps.PostId,
    ps.Title,
    ps.ViewCount,
    ps.AnswerCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    (COALESCE(ps.UpVoteCount, 0) - COALESCE(ps.DownVoteCount, 0)) AS NetVotes,
    ps.CreationDate,
    CASE 
        WHEN ps.AcceptedAnswerId > 0 THEN 'Accepted Answer Available' 
        ELSE 'No Accepted Answer' 
    END AS AnswerStatus,
    ROW_NUMBER() OVER (ORDER BY ps.ViewCount DESC) AS RankByViews
FROM 
    Users u
JOIN 
    PostStats ps ON u.Id = ps.OwnerUserId
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
WHERE 
    (ub.GoldBadges > 0 OR ub.SilverBadges > 0 OR ub.BronzeBadges > 0)
    AND ps.PostRank <= 5
ORDER BY 
    ps.ViewCount DESC, 
    u.Reputation DESC
LIMIT 100;