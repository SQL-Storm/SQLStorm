
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COALESCE(PostTypes.Name, 'Unknown') AS PostType,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RankPerUser,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = p.Id 
           AND v.VoteTypeId = 2) AS UpvoteCount,
        (SELECT COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = p.Id 
           AND v.VoteTypeId = 3) AS DownvoteCount
    FROM 
        Posts p
    LEFT JOIN 
        PostTypes ON p.PostTypeId = PostTypes.Id
),
PostsWithBadges AS (
    SELECT 
        rp.Id AS PostId,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Score,
        rp.PostType,
        ub.Reputation AS UserReputation,
        B.Name AS BadgeName,
        B.Class AS BadgeClass
    FROM 
        RankedPosts rp
    JOIN 
        Users ub ON rp.OwnerUserId = ub.Id
    LEFT JOIN 
        Badges B ON B.UserId = ub.Id AND B.Date <= rp.CreationDate
    WHERE 
        rp.RankPerUser = 1
)
SELECT 
    pb.PostId,
    pb.Title,
    pb.CreationDate,
    pb.ViewCount,
    pb.Score,
    pb.PostType,
    pb.UserReputation,
    COALESCE(pb.BadgeName, 'No Badge') AS BadgeName,
    COUNT(CASE WHEN comments.IsSpam IS NOT NULL THEN 1 END) AS SpamComments,
    ARRAY_AGG(DISTINCT t.TagName) AS Tags
FROM 
    PostsWithBadges pb
LEFT JOIN 
    Comments comments ON comments.PostId = pb.PostId
LEFT JOIN 
    LATERAL (
        SELECT 
            DISTINCT TRIM(UNNEST(STRING_TO_ARRAY(pb.Title, ' '))) AS TagName 
        FROM 
            Tags t
        WHERE 
            LOWER(t.TagName) = LOWER(TRIM(UNNEST(STRING_TO_ARRAY(pb.Title, ' ')))) 
    ) t ON true
WHERE 
    pb.Score >= 0
GROUP BY 
    pb.PostId, pb.Title, pb.CreationDate, pb.ViewCount, pb.Score, pb.PostType, pb.UserReputation, pb.BadgeName
ORDER BY 
    pb.Score DESC, pb.CreationDate DESC
LIMIT 10;
