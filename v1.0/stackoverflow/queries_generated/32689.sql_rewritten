WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.AcceptedAnswerId,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        a.Id AS PostId,
        a.Title,
        a.CreationDate,
        a.Score,
        a.AcceptedAnswerId,
        a.ParentId,
        Level + 1
    FROM 
        Posts a
    INNER JOIN 
        RecursivePostCTE rp ON a.ParentId = rp.PostId
)

SELECT 
    p.Title,
    COUNT(DISTINCT c.UserId) AS UniqueCommenters,
    AVG(u.Reputation) AS AverageReputation,
    SUM(v.BountyAmount) AS TotalBountyAwards,
    STRING_AGG(DISTINCT t.TagName, ', ') AS AssociatedTags,
    MAX(p.CreationDate) AS LastActivityDate,
    COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS PostsCreatedByUser,
    CASE 
        WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Accepted'
        ELSE 'Not Accepted'
    END AS AnswerStatus,
    CASE 
        WHEN SUM(v.VoteTypeId = 2) > SUM(v.VoteTypeId = 3) THEN 'More Upvotes'
        ELSE 'More Downvotes or Neutral'
    END AS VotesSummary
FROM 
    Posts p
LEFT JOIN 
    Comments c ON p.Id = c.PostId
LEFT JOIN 
    Votes v ON p.Id = v.PostId
LEFT JOIN 
    Tags t ON p.Tags LIKE '%' || t.TagName || '%'
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
WHERE 
    p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
GROUP BY 
    p.Id, p.Title
HAVING 
    COUNT(DISTINCT c.UserId) > 5
ORDER BY 
    TotalBountyAwards DESC, AverageReputation DESC;