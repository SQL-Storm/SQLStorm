
WITH UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers,
        SUM(CASE WHEN p.UpVotes > p.DownVotes THEN 1 ELSE 0 END) AS PositivePosts,
        SUM(p.ViewCount) AS TotalViews,
        AVG(p.Score) AS AverageScore,
        COUNT(DISTINCT c.Id) AS TotalComments,
        COUNT(DISTINCT b.Id) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT 
        pt.Id AS PostTypeId,
        pt.Name AS PostTypeName,
        COUNT(p.Id) AS PostCount,
        AVG(p.Score) AS AveragePostScore,
        SUM(p.ViewCount) AS TotalPostViews
    FROM 
        PostTypes pt
    LEFT JOIN 
        Posts p ON pt.Id = p.PostTypeId
    GROUP BY 
        pt.Id, pt.Name
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(pt.Id) AS PostCount,
        SUM(pt.ViewCount) AS TotalViews
    FROM 
        Tags t
    JOIN 
        Posts pt ON pt.Tags LIKE CONCAT('%,', t.TagName, ',%')
    GROUP BY 
        t.TagName
    ORDER BY 
        PostCount DESC
    LIMIT 10
)
SELECT 
    ue.DisplayName,
    ue.TotalPosts,
    ue.Questions,
    ue.Answers,
    ue.PositivePosts,
    ue.TotalViews,
    ue.AverageScore,
    ue.TotalComments,
    ue.TotalBadges,
    ps.PostTypeName,
    ps.PostCount,
    ps.AveragePostScore,
    ps.TotalPostViews,
    pt.TagName,
    pt.PostCount AS TagPostCount,
    pt.TotalViews AS TagTotalViews
FROM 
    UserEngagement ue
CROSS JOIN 
    PostStatistics ps
CROSS JOIN 
    PopularTags pt
ORDER BY 
    ue.TotalPosts DESC, 
    ps.PostCount DESC, 
    pt.PostCount DESC;
