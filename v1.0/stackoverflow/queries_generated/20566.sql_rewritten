WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COALESCE(u.Reputation, 0) AS UserReputation,
        ARRAY_AGG(DISTINCT t.TagName) AS TagsArray
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        LATERAL (SELECT * FROM string_to_array(p.Tags, '>')) AS tags ON TRUE
    LEFT JOIN 
        Tags t ON t.TagName = tags.array
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
        AND p.PostTypeId IN (1, 2)  
    GROUP BY 
        p.Id, u.Reputation
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.Comment,
        ph.CreationDate,
        p.Title AS PostTitle,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS Closed,
        MAX(CASE WHEN ph.PostHistoryTypeId IN (11, 13) THEN 1 ELSE 0 END) AS Opened,
        COUNT(*) FILTER (WHERE ph.PostHistoryTypeId IN (2, 4, 6)) AS EditCount
    FROM 
        PostHistory ph
    JOIN 
        Posts p ON ph.PostId = p.Id
    GROUP BY 
        ph.PostId, p.Title
)
SELECT 
    r.PostId,
    r.Title,
    r.CreationDate,
    r.Score,
    r.ViewCount,
    r.UserReputation,
    r.TagsArray,
    COALESCE(phd.Closed, 0) AS IsClosed,
    COALESCE(phd.Opened, 0) AS IsOpened,
    phd.EditCount
FROM 
    RankedPosts r
LEFT JOIN 
    PostHistoryDetails phd ON r.PostId = phd.PostId
WHERE 
    r.rn = 1  
    AND (r.Score > 0 OR r.ViewCount > 100)  
ORDER BY 
    r.UserReputation DESC,
    r.Score DESC,
    r.CreationDate ASC
LIMIT 100;