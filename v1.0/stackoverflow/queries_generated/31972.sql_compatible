
WITH RecursivePostHierarchy AS (
    SELECT
        Id,
        Title,
        ParentId,
        CreationDate,
        Score,
        0 AS Level
    FROM
        Posts
    WHERE
        ParentId IS NULL
    UNION ALL
    SELECT
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.Score,
        r.Level + 1
    FROM
        Posts p
    INNER JOIN
        RecursivePostHierarchy r ON p.ParentId = r.Id
),
PostVoteCounts AS (
    SELECT
        PostId,
        COUNT(*) AS VoteCount,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM
        Votes
    GROUP BY
        PostId
),
PostComments AS (
    SELECT
        PostId,
        COUNT(*) AS CommentCount
    FROM
        Comments
    GROUP BY
        PostId
),
PostWithStats AS (
    SELECT
        p.Id,
        p.Title,
        p.CreationDate,
        COALESCE(pv.VoteCount, 0) AS TotalVotes,
        COALESCE(pv.UpVotes, 0) AS UpVotes,
        COALESCE(pv.DownVotes, 0) AS DownVotes,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        p.Score,
        r.Level
    FROM
        Posts p
    LEFT JOIN
        PostVoteCounts pv ON p.Id = pv.PostId
    LEFT JOIN
        PostComments pc ON p.Id = pc.PostId
    LEFT JOIN
        RecursivePostHierarchy r ON p.Id = r.Id
)
SELECT
    ps.Id,
    ps.Title,
    ps.CreationDate,
    ps.TotalVotes,
    ps.UpVotes,
    ps.DownVotes,
    ps.CommentCount,
    ps.Score,
    r.Level AS PostLevel,
    COALESCE(ClosedPostInfo.Comment, 'No Close Reason') AS CloseReason
FROM
    PostWithStats ps
LEFT JOIN (
    SELECT
        ph.PostId,
        STRING_AGG(ph.Comment, ', ') AS Comment
    FROM
        PostHistory ph
    WHERE
        ph.PostHistoryTypeId = 10 
    GROUP BY
        ph.PostId
) ClosedPostInfo ON ps.Id = ClosedPostInfo.PostId
WHERE
    ps.Score > 10 
ORDER BY
    ps.Score DESC, 
    ps.CreationDate ASC
LIMIT 100;
