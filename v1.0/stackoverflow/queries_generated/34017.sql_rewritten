WITH RecursiveTagHierarchy AS (
    SELECT Id, TagName, Count, ExcerptPostId, WikiPostId, IsModeratorOnly, IsRequired, 0 AS Level
    FROM Tags
    WHERE IsModeratorOnly = 0

    UNION ALL

    SELECT t.Id, t.TagName, t.Count, t.ExcerptPostId, t.WikiPostId, t.IsModeratorOnly, t.IsRequired, r.Level + 1
    FROM Tags t
    INNER JOIN RecursiveTagHierarchy r ON t.Id = r.Id
    WHERE r.Level < 5
),

RecentPostActivities AS (
    SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName AS OwnerDisplayName,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RecentActivityRank
    FROM Posts p
    JOIN Users u ON p.OwnerUserId = u.Id
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR'
),

ClosedPosts AS (
    SELECT PostId, COUNT(*) AS CloseCount
    FROM PostHistory
    WHERE PostHistoryTypeId = 10
    GROUP BY PostId
),

VoteStats AS (
    SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes,
           SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownVotes
    FROM Votes
    GROUP BY PostId
)

SELECT pt.TagName, rpa.Title, rpa.OwnerDisplayName, rpa.CreationDate, rpa.Score, 
       COALESCE(cp.CloseCount, 0) AS CloseCount,
       COALESCE(vs.TotalUpVotes, 0) AS TotalUpVotes,
       COALESCE(vs.TotalDownVotes, 0) AS TotalDownVotes,
       CASE 
           WHEN rpa.Score > 100 THEN 'High'
           WHEN rpa.Score BETWEEN 50 AND 100 THEN 'Medium'
           ELSE 'Low'
       END AS PopularityCategory
FROM RecursiveTagHierarchy pt
LEFT JOIN RecentPostActivities rpa ON rpa.PostId = pt.ExcerptPostId
LEFT JOIN ClosedPosts cp ON cp.PostId = rpa.PostId
LEFT JOIN VoteStats vs ON vs.PostId = rpa.PostId
WHERE rpa.RecentActivityRank <= 5
ORDER BY pt.TagName, rpa.CreationDate DESC;