
WITH RankedPosts AS (
    SELECT p.Id AS PostId,
           p.Title,
           p.Body,
           p.CreationDate,
           p.ViewCount,
           p.Score,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank,
           STRING_AGG(t.TagName, ', ') AS TagsList
    FROM Posts p
    JOIN Tags t ON p.Tags LIKE CONCAT('%<', t.TagName, '>%')
    WHERE p.PostTypeId = 1 
    GROUP BY p.Id, p.Title, p.Body, p.CreationDate, p.ViewCount, p.Score, p.OwnerUserId
),
UserBadges AS (
    SELECT u.Id AS UserId,
           u.DisplayName,
           COUNT(b.Id) AS BadgeCount,
           SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
           SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
           SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName
),
ActiveUsers AS (
    SELECT u.Id AS UserId,
           u.DisplayName,
           u.Reputation,
           u.CreationDate,
           u.LastAccessDate,
           u.Location,
           ub.BadgeCount,
           ub.GoldBadges,
           ub.SilverBadges,
           ub.BronzeBadges,
           ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS ActiveRank
    FROM Users u
    JOIN UserBadges ub ON u.Id = ub.UserId
    WHERE u.Reputation > 0
)
SELECT p.PostId,
       p.Title,
       p.ViewCount,
       p.Score,
       u.DisplayName AS Author,
       u.Reputation AS AuthorReputation,
       u.BadgeCount,
       u.GoldBadges,
       u.SilverBadges,
       u.BronzeBadges,
       p.TagsList
FROM RankedPosts p
JOIN ActiveUsers u ON p.OwnerUserId = u.UserId
WHERE p.Rank <= 5 
ORDER BY p.Score DESC, p.ViewCount DESC;
