
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate > CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year'
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(SUM(b.Class), 0) AS TotalBadges,
        COUNT(DISTINCT v.Id) AS TotalVotes
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.Reputation
),
PostClosure AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS ClosureCount,
        MAX(COALESCE(ph.CreationDate, '1970-01-01 00:00:00')) AS LastClosedDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        ph.PostId
)
SELECT 
    u.DisplayName AS UserName,
    COUNT(DISTINCT rp.PostId) AS TotalPosts,
    SUM(rp.Score) AS TotalScore,
    us.Reputation,
    us.TotalBadges,
    COALESCE(pc.ClosureCount, 0) AS TotalClosures,
    COALESCE(pc.LastClosedDate, 'Never Closed') AS LastClosedDate,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    Users u
LEFT JOIN 
    RankedPosts rp ON u.Id = rp.OwnerUserId
LEFT JOIN 
    UserStats us ON u.Id = us.UserId
LEFT JOIN 
    PostClosure pc ON rp.PostId = pc.PostId
LEFT JOIN 
    LATERAL (
       SELECT 
           UNNEST(STRING_TO_ARRAY(rp.Tags, ',')) AS TagName
       FROM 
           Posts p
       WHERE
           p.Id = rp.PostId
    ) t ON TRUE
WHERE 
    u.Reputation > 100 AND 
    (us.TotalVotes > 10 OR us.TotalBadges > 1)
GROUP BY 
    u.Id, u.DisplayName, us.Reputation, us.TotalBadges
HAVING 
    COUNT(DISTINCT rp.PostId) > 5
ORDER BY 
    TotalScore DESC, 
    UserName ASC;
