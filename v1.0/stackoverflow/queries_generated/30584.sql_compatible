
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        rph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),

PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.AnswerCount,
        p.FavoriteCount,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBountyAmount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9)
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.AnswerCount, p.FavoriteCount
),

UserBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS Badges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)

SELECT 
    pm.Title AS QuestionTitle,
    pm.ViewCount,
    pm.AnswerCount,
    pm.FavoriteCount,
    pm.CommentCount,
    pm.TotalBountyAmount,
    ub.DisplayName AS UserName,
    ub.BadgeCount,
    ub.Badges,
    rph.Level AS HierarchyLevel,
    ROW_NUMBER() OVER (PARTITION BY ub.UserId ORDER BY pm.ViewCount DESC) AS UserPostRank
FROM 
    PostMetrics pm
JOIN 
    Users u ON pm.OwnerUserId = u.Id
JOIN 
    UserBadges ub ON u.Id = ub.UserId
LEFT JOIN 
    RecursivePostHierarchy rph ON pm.PostId = rph.PostId
WHERE 
    ub.BadgeCount > 0 AND pm.TotalBountyAmount IS NOT NULL
ORDER BY 
    pm.ViewCount DESC,
    pm.AnswerCount DESC;
