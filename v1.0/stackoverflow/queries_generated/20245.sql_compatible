
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.OwnerUserId, p.CreationDate
), 
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(b.Class), 0) AS TotalBadges,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
), 
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.CommentCount,
        rp.Upvotes,
        rp.Downvotes,
        us.DisplayName,
        us.Reputation,
        us.TotalBadges
    FROM 
        RankedPosts rp
    JOIN 
        Users us ON rp.OwnerUserId = us.Id
    WHERE 
        rp.PostRank = 1
)
SELECT 
    pd.PostId,
    pd.Title,
    pd.CreationDate,
    pd.CommentCount,
    pd.Upvotes,
    pd.Downvotes,
    pd.DisplayName,
    pd.Reputation,
    pd.TotalBadges,
    CASE 
        WHEN pd.Upvotes > pd.Downvotes THEN 'Positive'
        WHEN pd.Upvotes < pd.Downvotes THEN 'Negative'
        ELSE 'Neutral'
    END AS VoteSentiment,
    CASE 
        WHEN pd.Reputation >= 1000 THEN 'Experienced'
        WHEN pd.Reputation BETWEEN 500 AND 999 THEN 'Moderate'
        ELSE 'Novice'
    END AS UserExperienceLevel
FROM 
    PostDetails pd
WHERE 
    pd.CommentCount > 10 OR 
    pd.Upvotes > pd.Downvotes
ORDER BY 
    pd.CreationDate DESC
LIMIT 50
UNION ALL
SELECT 
    p.Id,
    CONCAT(p.Title, ' - Archived') AS Title,
    p.CreationDate,
    NULL AS CommentCount,
    COUNT(v.Id) AS Upvotes,
    NULL AS Downvotes,
    u.DisplayName,
    u.Reputation,
    COALESCE(SUM(b.Class), 0) AS TotalBadges
FROM 
    Posts p
LEFT JOIN 
    Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2
JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    Badges b ON u.Id = b.UserId
WHERE 
    p.CreationDate < '2024-10-01 12:34:56' - INTERVAL '5 years'
    AND p.AcceptedAnswerId IS NULL
GROUP BY 
    p.Id, u.DisplayName, u.Reputation
HAVING 
    COUNT(v.Id) > 5
ORDER BY 
    p.CreationDate DESC;
