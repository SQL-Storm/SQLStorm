WITH StringBenchmark AS (
    SELECT 
        p.Title AS PostTitle,
        p.Body,
        p.CreationDate,
        u.DisplayName AS Author,
        u.Reputation,
        length(p.Body) AS BodyLength,
        COALESCE(NULLIF(p.Title, ''), 'No Title') AS SafeTitle,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagsList,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        STRING_AGG(DISTINCT ph.Comment, ', ') AS PostHistoryComments
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Tags t ON t.Id IN (SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><'))::int) )
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, u.DisplayName
)

SELECT 
    PostTitle,
    Author,
    Reputation,
    BodyLength,
    SafeTitle,
    TagsList,
    CommentCount,
    VoteCount,
    UpVotes,
    DownVotes,
    PostHistoryComments
FROM 
    StringBenchmark
WHERE 
    BodyLength > 300
ORDER BY 
    Reputation DESC, CommentCount DESC
LIMIT 10;