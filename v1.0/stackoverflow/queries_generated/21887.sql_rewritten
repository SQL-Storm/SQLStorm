WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
    GROUP BY 
        p.Id, u.Id
),

ClosedPosts AS (
    SELECT 
        PostId,
        MAX(CreationDate) AS LastClosedDate
    FROM 
        PostHistory
    WHERE 
        PostHistoryTypeId = 10
    GROUP BY 
        PostId
),

UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(*) AS BadgeCount
    FROM 
        Badges b
    WHERE 
        b.Class = 1 
    GROUP BY 
        b.UserId
),

PostMetrics AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.OwnerUserId,
        rp.OwnerDisplayName,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        COALESCE(cp.LastClosedDate, 'Never Closed') AS LastClosedDate,
        COALESCE(ub.BadgeCount, 0) AS GoldBadgeCount
    FROM 
        RankedPosts rp
    LEFT JOIN 
        ClosedPosts cp ON rp.PostId = cp.PostId
    LEFT JOIN 
        UserBadges ub ON rp.OwnerUserId = ub.UserId
    WHERE 
        rp.rn = 1 
)

SELECT 
    pm.PostId,
    pm.Title,
    pm.CreationDate,
    pm.Score,
    pm.OwnerUserId,
    pm.OwnerDisplayName,
    pm.CommentCount,
    pm.UpVotes,
    pm.DownVotes,
    pm.LastClosedDate,
    pm.GoldBadgeCount,
    CASE 
        WHEN pm.Score > 10 THEN 'High Score' 
        WHEN pm.Score BETWEEN 5 AND 10 THEN 'Medium Score'
        ELSE 'Low Score' 
    END AS ScoreCategory,
    CASE 
        WHEN pm.LastClosedDate = 'Never Closed' THEN 'Open'
        ELSE 'Closed'
    END AS PostStatus
FROM 
    PostMetrics pm
WHERE 
    pm.CommentCount > 5 OR pm.UpVotes > pm.DownVotes
ORDER BY 
    pm.Score DESC, pm.CreationDate DESC
LIMIT 100;