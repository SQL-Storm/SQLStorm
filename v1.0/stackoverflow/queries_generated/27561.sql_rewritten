WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Body,
        p.ViewCount,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.Body, u.DisplayName, p.ViewCount, p.CreationDate
),

BestRatedPost AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.ViewCount,
        rp.CommentCount,
        rp.Rank
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank = 1
),

MostCommentedPost AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CommentCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.CommentCount = (SELECT MAX(CommentCount) FROM RankedPosts)
),

PostsWithTags AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p
    CROSS JOIN 
        Tags t ON position(t.TagName IN p.Tags) > 0  
    GROUP BY 
        p.Id, p.Title
)

SELECT 
    bpp.Title AS BestRatedTitle,
    bpp.ViewCount AS BestRatedViewCount,
    mcp.Title AS MostCommentedTitle,
    mp.Tags AS PostTags
FROM 
    BestRatedPost bpp
CROSS JOIN
    MostCommentedPost mcp
LEFT JOIN 
    PostsWithTags mp ON mp.PostId = bpp.Id OR mp.PostId = mcp.Id
WHERE 
    bpp.Id <> mcp.Id;