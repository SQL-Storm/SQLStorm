WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS RankScore,
        (SELECT COUNT(*) 
         FROM Comments c 
         WHERE c.PostId = p.Id) AS CommentCount
    FROM Posts p
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.RankScore,
        COALESCE(b.Name, 'No Badge') AS UserBadge,
        (SELECT 
             COUNT(*) 
         FROM Votes v 
         WHERE v.PostId = rp.PostId
         AND v.VoteTypeId IN (2, 3)) AS VoteCount,
        (SELECT 
             STRING_AGG(DISTINCT t.TagName, ', ')
         FROM Tags t 
         WHERE t.Id IN (
             SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
             ) 
             AND p.PostTypeId = 1
        ) AS Tags
    FROM RankedPosts rp
    LEFT JOIN Badges b ON b.UserId = (SELECT OwnerUserId FROM Posts p2 WHERE p2.Id = rp.PostId)
    WHERE rp.RankScore <= 5
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS ClosedDate,
        c.Name AS CloseReason
    FROM PostHistory ph
    JOIN CloseReasonTypes c ON ph.Comment::int = c.Id
    WHERE ph.PostHistoryTypeId = 10
),
PostMetrics AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.Score,
        pd.ViewCount,
        pd.RankScore,
        pd.UserBadge,
        COALESCE(cp.ClosedDate, 'Not Closed') AS ClosedDate,
        COALESCE(cp.CloseReason, 'N/A') AS CloseReason,
        pd.Tags
    FROM PostDetails pd
    LEFT JOIN ClosedPosts cp ON pd.PostId = cp.PostId
),
FinalResults AS (
    SELECT 
        *,
        CASE 
            WHEN RANK() OVER (ORDER BY Score DESC) <= 10 THEN 'Top Posts'
            ELSE 'Other Posts'
        END AS Category
    FROM PostMetrics
)
SELECT 
    *,
    CASE 
        WHEN ClosedDate = 'Not Closed' THEN 'Active'
        ELSE 'Closed'
    END AS Status
FROM FinalResults
WHERE 
    UserBadge NOT LIKE '%gold%'
    OR UserBadge IS NULL
ORDER BY
    Score DESC, CreatedDate DESC;