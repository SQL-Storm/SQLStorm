
WITH PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COALESCE(ph.CloseReasonId, NULL) AS CloseReasonId,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN (
        SELECT  
            PostId,
            JSON_AGG(Comment) AS CloseReasonId
        FROM PostHistory
        WHERE PostHistoryTypeId IN (10, 11) 
        GROUP BY PostId
    ) ph ON p.Id = ph.PostId
    WHERE p.CreationDate > DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
    GROUP BY p.Id, p.Title, ph.CloseReasonId, p.OwnerUserId, p.CreationDate
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        ARRAY_AGG(b.Name) AS BadgeNames
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
)
SELECT 
    pm.PostId,
    pm.Title,
    pm.CommentCount,
    pm.UpVotes,
    pm.DownVotes,
    pm.CloseReasonId,
    ub.BadgeNames,
    CASE 
        WHEN pm.CommentCount > 5 THEN 'Active Discussion'
        WHEN pm.UpVotes > pm.DownVotes THEN 'Positive Feedback'
        ELSE 'Needs Attention'
    END AS PostStatus
FROM PostMetrics pm
LEFT JOIN UserBadges ub ON pm.OwnerUserId = ub.UserId
WHERE pm.PostRank <= 5
ORDER BY pm.UpVotes DESC, pm.CommentCount DESC;
