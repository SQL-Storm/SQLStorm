
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpvoteCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    AND 
        p.Score > 0
),
ActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(SUM(b.Class), 0) AS TotalBadges
    FROM 
        Users u 
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.LastAccessDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 months'
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
PopularTags AS (
    SELECT 
        unnest(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')) AS TagName,
        COUNT(*) AS UsageCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        TagName
    HAVING 
        COUNT(*) > 10
)
SELECT 
    p.Title,
    p.Score,
    p.CreationDate,
    u.DisplayName AS OwnerDisplay,
    r.UpvoteCount,
    t.TagName,
    u.Reputation,
    u.TotalBadges
FROM 
    RankedPosts p
JOIN 
    ActiveUsers u ON p.OwnerUserId = u.UserId
JOIN 
    PostLinks pl ON pl.PostId = p.PostId
JOIN 
    PopularTags t ON t.TagName = ANY (string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><'))
LEFT JOIN 
    PostHistory ph ON ph.PostId = p.PostId AND ph.PostHistoryTypeId = 10
WHERE 
    p.Rank <= 5
    OR (p.Score >= 10 AND u.TotalBadges > 0)
ORDER BY 
    p.Score DESC, p.CreationDate DESC
LIMIT 100;
