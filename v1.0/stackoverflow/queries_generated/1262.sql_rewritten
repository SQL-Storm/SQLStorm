WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        SUM(v.VoteTypeId = 2) AS TotalUpVotes,
        SUM(v.VoteTypeId = 3) AS TotalDownVotes,
        RANK() OVER (ORDER BY COUNT(DISTINCT p.Id) DESC) AS Rank
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
), HighReputationUsers AS (
    SELECT 
        UserId,
        DisplayName,
        TotalPosts,
        TotalComments,
        TotalUpVotes,
        TotalDownVotes,
        Rank
    FROM 
        UserActivity
    WHERE 
        Rank <= 100 AND (TotalUpVotes - TotalDownVotes) > 10
), RecentPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.AcceptedAnswerId,
        u.DisplayName AS OwnerDisplayName,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RecentPostRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
)
SELECT 
    r.DisplayName AS ActiveUser,
    COUNT(DISTINCT rp.Id) AS RecentPostCount,
    AVG(COALESCE(rp.AcceptedAnswerId IS NOT NULL, 0)) * 100 AS AcceptanceRate
FROM 
    HighReputationUsers r
LEFT JOIN 
    RecentPosts rp ON r.UserId = rp.OwnerUserId
WHERE 
    rp.RecentPostRank <= 5
GROUP BY 
    r.UserId, r.DisplayName
HAVING 
    RecentPostCount > 0
ORDER BY 
    AcceptanceRate DESC
LIMIT 10;