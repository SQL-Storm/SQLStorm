
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        MAX(v.CreationDate) AS LastVoteDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.Score IS NOT NULL AND 
        p.CreationDate >= (DATE '2024-10-01' - INTERVAL '1 year') AND
        (p.Tags ILIKE ANY (ARRAY['%sql%', '%postgres%', '%database%'])) 
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount, p.CreationDate
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        MIN(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS ClosedDate,
        COUNT(DISTINCT ph.UserId) AS CloseVoteCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)
    GROUP BY 
        ph.PostId
),
PostBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Badges b
    WHERE 
        b.Class = 1 
    GROUP BY 
        b.UserId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    COALESCE(rb.BadgeCount, 0) AS UserBadgeCount,
    rp.ViewCount,
    rp.CommentCount,
    cp.ClosedDate,
    cp.CloseVoteCount,
    CASE
        WHEN cp.CloseVoteCount > 5 THEN 'Highly Controversial'
        WHEN cp.ClosedDate IS NOT NULL THEN 'Closed'
        ELSE 'Open'
    END AS PostStatus,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    RankedPosts rp
LEFT JOIN 
    ClosedPosts cp ON rp.PostId = cp.PostId
LEFT JOIN 
    Users u ON rp.PostId = u.Id
LEFT JOIN 
    PostBadges rb ON u.Id = rb.UserId
LEFT JOIN 
    UNNEST(string_to_array(rp.Tags, ',')) AS tag_names ON tag_names IS NOT NULL
LEFT JOIN 
    Tags t ON t.TagName ILIKE '%' || TRIM(tag_names) || '%'
WHERE 
    rp.Rank <= 10
GROUP BY 
    rp.PostId, rp.Title, rp.Score, rp.ViewCount, rp.CommentCount, rb.BadgeCount, cp.ClosedDate, cp.CloseVoteCount
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC
LIMIT 50;
