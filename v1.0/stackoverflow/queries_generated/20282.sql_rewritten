WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        p.PostTypeId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year')
),

UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),

PostDetail AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        ub.BadgeCount,
        ub.HighestBadgeClass,
        COALESCE((
            SELECT 
                COUNT(c.Id) 
            FROM 
                Comments c 
            WHERE 
                c.PostId = rp.PostId AND c.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days')
        ), 0) AS RecentCommentsCount,
        COALESCE((
            SELECT 
                MAX(v.CreationDate) 
            FROM 
                Votes v 
            WHERE 
                v.PostId = rp.PostId AND v.VoteTypeId IN (2, 3)
        ), '1970-01-01') AS LastVoteDate
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges ub ON rp.PostId IN (SELECT p.Id FROM Posts p WHERE p.OwnerUserId = ub.UserId)
)

SELECT 
    pd.PostId,
    pd.Title,
    pd.Score,
    pd.BadgeCount,
    pd.HighestBadgeClass,
    pd.RecentCommentsCount,
    pd.LastVoteDate,
    (SELECT COUNT(*) 
     FROM PostHistory ph 
     WHERE ph.PostId = pd.PostId AND ph.PostHistoryTypeId IN (10, 11)
    ) AS CloseReopenCount,
    string_agg(DISTINCT CASE 
        WHEN pd.HighestBadgeClass = 1 THEN 'Gold Badge' 
        WHEN pd.HighestBadgeClass = 2 THEN 'Silver Badge' 
        ELSE 'Bronze Badge' 
    END, ', ') AS BadgeDescriptions
FROM 
    PostDetail pd
WHERE 
    pd.UserRank <= 5
GROUP BY 
    pd.PostId, pd.Title, pd.Score, pd.BadgeCount, pd.HighestBadgeClass, pd.RecentCommentsCount, pd.LastVoteDate
ORDER BY 
    pd.Score DESC, pd.Title ASC
LIMIT 50;