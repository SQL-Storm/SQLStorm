WITH RECURSIVE UserReputation AS (
    SELECT 
        UserId,
        Reputation,
        1 AS Level
    FROM Users
    WHERE Reputation IS NOT NULL

    UNION ALL

    SELECT 
        u.UserId,
        u.Reputation,
        ur.Level + 1
    FROM Users u
    JOIN UserReputation ur ON u.Id = ur.UserId
    WHERE u.Reputation > ur.Reputation
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        ARRAY_AGG(t.TagName) AS Tags
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Tags t ON t.WikiPostId = p.Id
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id
),
TopUsers AS (
    SELECT DISTINCT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(COALESCE(b.Class, 0)) AS BadgeCount,
        SUM(COALESCE(ps.VoteCount, 0)) AS PostVoteCount,
        SUM(COALESCE(ps.CommentCount, 0)) AS TotalComments
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    LEFT JOIN PostStatistics ps ON U.Id = ps.OwnerUserId
    GROUP BY u.Id
    HAVING SUM(COALESCE(b.Class, 0)) > 0
),
RankedUsers AS (
    SELECT 
        UserId,
        DisplayName,
        BadgeCount,
        PostVoteCount,
        TotalComments,
        RANK() OVER (ORDER BY BadgeCount DESC, PostVoteCount DESC) AS UserRank
    FROM TopUsers
)
SELECT 
    ru.UserId,
    ru.DisplayName,
    ru.BadgeCount,
    ru.PostVoteCount,
    ru.TotalComments,
    COALESCE(p.Title, 'No Posts') AS TopPostTitle,
    p.CreationDate AS TopPostDate
FROM RankedUsers ru
LEFT JOIN PostStatistics p ON ru.UserId = p.OwnerUserId
WHERE ru.UserRank <= 10
ORDER BY ru.UserRank;