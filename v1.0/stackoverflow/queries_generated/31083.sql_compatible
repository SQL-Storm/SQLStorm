
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(DISTINCT CASE WHEN b.UserId IS NOT NULL THEN b.UserId END) AS BadgeCount,
        p.OwnerUserId
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, CURRENT_DATE)
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.PostTypeId, p.OwnerUserId
), FilteredPosts AS (
    SELECT 
        rp.*,
        CASE 
            WHEN rp.Score > 100 THEN 'High Score'
            WHEN rp.Score BETWEEN 50 AND 100 THEN 'Medium Score'
            ELSE 'Low Score'
        END AS ScoreCategory,
        CASE 
            WHEN rp.CommentCount >= 10 THEN 'Active'
            ELSE 'Less Active'
        END AS ActivityLevel
    FROM 
        RankedPosts rp
    WHERE 
        rp.RankByScore <= 10
), UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.DisplayName,
        CASE 
            WHEN u.Reputation > 5000 THEN 'Highly Reputed'
            WHEN u.Reputation BETWEEN 1000 AND 5000 THEN 'Moderately Reputed'
            ELSE 'New User'
        END AS UserCategory
    FROM 
        Users u
), FinalResults AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.CreationDate,
        fp.Score,
        fp.ViewCount,
        fp.CommentCount,
        fp.UpVotes,
        fp.DownVotes,
        fp.BadgeCount,
        fp.ScoreCategory,
        fp.ActivityLevel,
        ur.DisplayName AS PostOwner,
        ur.UserCategory AS OwnerCategory
    FROM 
        FilteredPosts fp
    LEFT JOIN 
        UserReputation ur ON fp.OwnerUserId = ur.UserId
)
SELECT 
    *,
    CASE 
        WHEN UpVotes > DownVotes THEN 'More Upvotes'
        WHEN DownVotes > UpVotes THEN 'More Downvotes'
        ELSE 'Equal Votes'
    END AS VoteComparison
FROM 
    FinalResults
WHERE 
    OwnerCategory != 'New User'
ORDER BY 
    CreationDate DESC;
