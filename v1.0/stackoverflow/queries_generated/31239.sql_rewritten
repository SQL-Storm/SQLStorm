WITH RECURSIVE UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        ROW_NUMBER() OVER (ORDER BY COUNT(p.Id) DESC) AS Rank
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        PostCount,
        TotalViews,
        TotalScore,
        Rank
    FROM 
        UserPostStats
    WHERE
        Rank <= 10
),
TagStats AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews
    FROM 
        Tags t
    LEFT JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, '><')::int[])
    WHERE
        p.PostTypeId = 1  
    GROUP BY 
        t.TagName
),
CombinedStats AS (
    SELECT 
        u.UserId,
        u.DisplayName,
        u.PostCount AS UserPostCount,
        u.TotalViews AS UserTotalViews,
        u.TotalScore AS UserTotalScore,
        t.TagName,
        t.PostCount AS TagPostCount,
        t.TotalViews AS TagTotalViews
    FROM 
        TopUsers u
    FULL OUTER JOIN 
        TagStats t ON u.UserId IS NOT NULL OR t.PostCount IS NOT NULL
)
SELECT 
    COALESCE(u.DisplayName, 'No User') AS UserDisplayName,
    COALESCE(u.UserPostCount, 0) AS UserPostCount,
    COALESCE(u.UserTotalViews, 0) AS UserTotalViews,
    COALESCE(u.UserTotalScore, 0) AS UserTotalScore,
    COALESCE(t.TagName, 'No Tag') AS TagName,
    COALESCE(t.TagPostCount, 0) AS TagPostCount,
    COALESCE(t.TagTotalViews, 0) AS TagTotalViews
FROM 
    CombinedStats u
FULL OUTER JOIN 
    TagStats t ON u.TagName = t.TagName
ORDER BY 
    u.UserTotalViews DESC, t.TotalViews DESC;