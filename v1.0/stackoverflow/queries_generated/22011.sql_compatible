
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS ViewRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(SUM(v.BountyAmount) FILTER (WHERE v.UserId IS NOT NULL), 0) AS TotalBounty 
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8  
    WHERE 
        p.CreationDate >= '2022-01-01' AND 
        (p.Score > 0 OR p.ViewCount > 10) 
), 
AbandonedPosts AS (
    SELECT 
        PostId, 
        Title, 
        ViewCount, 
        CreationDate 
    FROM 
        RankedPosts 
    WHERE 
        ViewCount < 20 AND 
        CommentCount = 0
), 
ScoreArchive AS (
    SELECT 
        p.Id AS PostId,
        p.Score,
        p.CreationDate,
        ph.UserDisplayName,
        ph.Comment,
        RANK() OVER (ORDER BY p.Score DESC) AS HighScoreRank
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId 
    WHERE 
        ph.PostHistoryTypeId = 24  
        AND p.CreationDate < '2024-10-01 12:34:56'::timestamp - INTERVAL '2 months'
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.ViewCount,
    rp.CreationDate,
    rp.ViewRank,
    ap.Title AS AbandonedTitle,
    sac.Score,
    sac.UserDisplayName AS Editor,
    sac.Comment AS EditComment,
    CASE 
        WHEN rp.ViewCount IS NULL THEN 'No Views Yet'
        WHEN rp.ViewCount < 50 THEN 'Low Engagement'
        ELSE 'Popular'
    END AS EngagementLevel,
    COALESCE(sac.HighScoreRank, 0) AS ScoreRank
FROM 
    RankedPosts rp
LEFT JOIN 
    AbandonedPosts ap ON rp.PostId = ap.PostId
LEFT JOIN 
    ScoreArchive sac ON rp.PostId = sac.PostId
WHERE 
    rp.ViewRank = 1
ORDER BY 
    rp.ViewCount DESC, 
    rp.CreationDate ASC 
LIMIT 100;
