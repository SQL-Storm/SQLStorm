WITH PostScoreCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) OVER (PARTITION BY p.Id) AS UpVoteCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) OVER (PARTITION BY p.Id) AS DownVoteCount,
        COALESCE(ROUND((COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2)::decimal / NULLIF(COUNT(v.Id), 0) * 100), 2), 0) AS UpVotePercentage
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PostHistoryGrouped AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        COUNT(ph.Id) AS HistoryCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId, 
        ph.PostHistoryTypeId
),
TopPosts AS (
    SELECT 
        psc.*,
        phg.HistoryCount,
        phg.LastEditDate
    FROM 
        PostScoreCTE psc
    LEFT JOIN 
        PostHistoryGrouped phg ON psc.PostId = phg.PostId
    WHERE 
        psc.Rank <= 10
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    tp.UpVoteCount,
    tp.DownVoteCount,
    tp.UpVotePercentage,
    tp.HistoryCount,
    tp.LastEditDate,
    u.DisplayName AS OwnerDisplayName,
    COALESCE(b.Name, 'No Badge') AS BadgeName,
    CASE 
        WHEN tp.HistoryCount > 5 THEN 'Frequently Edited' 
        ELSE 'Seldom Edited' 
    END AS EditFrequency
FROM 
    TopPosts tp
LEFT JOIN 
    Users u ON tp.OwnerUserId = u.Id
LEFT JOIN 
    Badges b ON u.Id = b.UserId AND b.Class = 1  
ORDER BY 
    tp.Score DESC, 
    tp.ViewCount DESC;