
WITH RecursivePostHistory AS (
    SELECT 
        ph.Id,
        ph.PostId,
        ph.CreationDate,
        ph.UserId,
        ph.UserDisplayName,
        ph.Comment,
        ph.PostHistoryTypeId,
        ph.Text,
        1 AS RecursionLevel
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    UNION ALL
    SELECT 
        ph.Id,
        ph.PostId,
        ph.CreationDate,
        ph.UserId,
        ph.UserDisplayName,
        ph.Comment,
        ph.PostHistoryTypeId,
        ph.Text,
        rp.RecursionLevel + 1
    FROM 
        PostHistory ph
    INNER JOIN 
        RecursivePostHistory rp ON ph.Id = rp.Id
    WHERE 
        ph.CreationDate < rp.CreationDate 
),
UserDetails AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
FilteredPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.OwnerUserId,
        p.ViewCount,
        COUNT(DISTINCT c.Id) AS CommentCount,
        MAX(v.CreationDate) AS LastVoteDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId 
    WHERE 
        p.ViewCount > 100 
    GROUP BY 
        p.Id, p.Title, p.Score, p.OwnerUserId, p.ViewCount
),
PostStatistics AS (
    SELECT 
        fp.Id AS PostId,
        fp.Title,
        fp.Score,
        fp.ViewCount,
        fp.CommentCount,
        ud.DisplayName AS OwnerName,
        ud.Reputation AS OwnerReputation,
        ROW_NUMBER() OVER (PARTITION BY fp.OwnerUserId ORDER BY fp.Score DESC) AS Rank
    FROM 
        FilteredPosts fp
    JOIN 
        UserDetails ud ON fp.OwnerUserId = ud.UserId
)
SELECT 
    ps.Title,
    ps.Score,
    ps.ViewCount,
    ps.CommentCount,
    ps.OwnerName,
    ps.OwnerReputation,
    CASE 
        WHEN rp.PostId IS NOT NULL THEN 'Closed' 
        ELSE 'Open' 
    END AS PostStatus,
    COALESCE(rp.UserDisplayName, 'N/A') AS LastActionBy,
    rp.CreationDate AS LastActionDate,
    CASE 
        WHEN rp.PostHistoryTypeId = 10 THEN 'Closed'
        WHEN rp.PostHistoryTypeId = 11 THEN 'Reopened'
        ELSE 'No actions' 
    END AS LastActionType
FROM 
    PostStatistics ps
LEFT JOIN 
    RecursivePostHistory rp ON ps.PostId = rp.PostId
WHERE 
    ps.Rank = 1 
ORDER BY 
    ps.Score DESC, ps.ViewCount DESC
FETCH FIRST 100 ROWS ONLY;
