WITH RankedPosts AS (
    SELECT p.Id,
           p.Title,
           p.CreationDate,
           p.ViewCount,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS Rank,
           EXTRACT(EPOCH FROM (cast('2024-10-01 12:34:56' as timestamp) - p.CreationDate)) / 3600 AS AgeInHours
    FROM Posts p
    WHERE p.PostTypeId = 1 
),
UsersWithBadges AS (
    SELECT u.Id AS UserId,
           COUNT(b.Id) AS BadgeCount,
           MAX(b.Class) AS MaxBadgeClass
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
),
CommentStats AS (
    SELECT c.PostId,
           COUNT(c.Id) AS CommentCount,
           SUM(CASE WHEN c.Score > 0 THEN 1 ELSE 0 END) AS PositiveComments,
           SUM(CASE WHEN c.Score < 0 THEN 1 ELSE 0 END) AS NegativeComments
    FROM Comments c
    GROUP BY c.PostId
),
PostHistoryInfo AS (
    SELECT ph.PostId,
           STRING_AGG(ph.Comment, '; ') AS ChangeComments,
           MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS CloseDate,
           MAX(CASE WHEN ph.PostHistoryTypeId = 11 THEN ph.CreationDate END) AS ReopenDate
    FROM PostHistory ph
    GROUP BY ph.PostId
),
AggregatedData AS (
    SELECT rp.Id,
           rp.Title,
           rsp.BadgeCount,
           rsp.MaxBadgeClass,
           cs.CommentCount,
           cs.PositiveComments,
           cs.NegativeComments,
           ph.ChangeComments,
           ph.CloseDate,
           ph.ReopenDate,
           rp.AgeInHours,
           rp.ViewCount
    FROM RankedPosts rp
    LEFT JOIN UsersWithBadges rsp ON rp.OwnerUserId = rsp.UserId
    LEFT JOIN CommentStats cs ON rp.Id = cs.PostId
    LEFT JOIN PostHistoryInfo ph ON rp.Id = ph.PostId
)
SELECT *,
       CASE 
           WHEN CloseDate IS NOT NULL AND ReopenDate IS NULL THEN 'Closed'
           WHEN CloseDate IS NULL AND ReopenDate IS NOT NULL THEN 'Reopened'
           ELSE 'Active'
       END AS PostStatus,
       (CASE 
            WHEN AgeInHours > 24 THEN 'Stale Post'
            ELSE 'Fresh Post'
        END) AS PostFreshness,
       (SELECT COUNT(*) 
        FROM Votes v 
        WHERE v.PostId = a.Id AND v.VoteTypeId = 2) AS UpvoteCount,
       (SELECT COUNT(*) 
        FROM Votes v 
        WHERE v.PostId = a.Id AND v.VoteTypeId = 3) AS DownvoteCount
FROM AggregatedData a
WHERE COALESCE(a.BadgeCount, 0) > 0
ORDER BY rp.ViewCount DESC, rp.AgeInHours ASC;