WITH RECURSIVE UserReputation AS (
    SELECT 
        Id, 
        Reputation, 
        CreationDate,
        LastAccessDate,
        DisplayName,
        1 AS Level
    FROM Users
    WHERE Reputation > 1000  

    UNION ALL

    SELECT 
        u.Id, 
        u.Reputation, 
        u.CreationDate,
        u.LastAccessDate,
        u.DisplayName,
        ur.Level + 1
    FROM Users u
    JOIN UserReputation ur ON u.Reputation < ur.Reputation  
    WHERE ur.Level < 5  
),
RecentPosts AS (
    SELECT 
        p.OwnerUserId,
        COUNT(p.Id) AS TotalPosts,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativePosts,
        MAX(p.LastActivityDate) AS LastActive
    FROM Posts p
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'  
    GROUP BY p.OwnerUserId
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS TotalBadges,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM Badges b
    GROUP BY b.UserId
),
TopContributors AS (
    SELECT 
        ur.DisplayName,
        ur.Reputation,
        rp.TotalPosts,
        rp.PositivePosts,
        rp.NegativePosts,
        ub.TotalBadges,
        ub.BadgeNames,
        ROW_NUMBER() OVER (ORDER BY ur.Reputation DESC) AS RowNum
    FROM UserReputation ur
    LEFT JOIN RecentPosts rp ON ur.Id = rp.OwnerUserId
    LEFT JOIN UserBadges ub ON ur.Id = ub.UserId
)
SELECT 
    tc.DisplayName,
    tc.Reputation,
    COALESCE(tc.TotalPosts, 0) AS TotalPosts,
    COALESCE(tc.PositivePosts, 0) AS PositivePosts,
    COALESCE(tc.NegativePosts, 0) AS NegativePosts,
    COALESCE(tc.TotalBadges, 0) AS TotalBadges,
    COALESCE(tc.BadgeNames, 'None') AS BadgeNames,
    CASE 
        WHEN tc.Reputation > 5000 THEN 'Expert'
        WHEN tc.Reputation BETWEEN 1000 AND 5000 THEN 'Pro'
        ELSE 'Novice'
    END AS UserLevel
FROM TopContributors tc
WHERE tc.RowNum <= 10  
ORDER BY tc.Reputation DESC;