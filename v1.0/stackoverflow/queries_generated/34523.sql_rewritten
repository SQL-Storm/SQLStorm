WITH RECURSIVE UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        u.Views,
        u.UpVotes,
        u.DownVotes,
        1 AS Level
    FROM 
        Users u
    WHERE 
        u.Reputation > 1000  

    UNION ALL

    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        u.Views,
        u.UpVotes,
        u.DownVotes,
        us.Level + 1 AS Level
    FROM 
        Users u
    JOIN UserStats us ON u.Id != us.UserId AND u.Reputation > us.Reputation  
    WHERE 
        us.Level < 5  
)

, RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month' 
        AND p.OwnerUserId IS NOT NULL
)

SELECT 
    us.UserId,
    us.DisplayName,
    us.Reputation,
    us.CreationDate,
    COUNT(DISTINCT rp.PostId) AS RecentPostCount,
    AVG(rp.Score) AS AveragePostScore,
    CASE 
        WHEN COUNT(bp.Id) > 0 THEN 'Has Badges' 
        ELSE 'No Badges' 
    END AS BadgeStatus
FROM 
    UserStats us
LEFT JOIN 
    RecentPosts rp ON us.UserId = rp.OwnerUserId
LEFT JOIN 
    Badges bp ON us.UserId = bp.UserId
WHERE 
    us.Reputation > 1000 
GROUP BY 
    us.UserId, us.DisplayName, us.Reputation, us.CreationDate
HAVING 
    COUNT(DISTINCT rp.PostId) > 0  
ORDER BY 
    us.Reputation DESC, RecentPostCount DESC;