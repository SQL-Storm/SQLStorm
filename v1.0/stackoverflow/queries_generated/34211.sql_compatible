
WITH RecursiveCTE AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.OwnerUserId,
        P.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1 

    UNION ALL

    SELECT 
        P.Id,
        P.Title,
        P.CreationDate,
        P.OwnerUserId,
        P.AcceptedAnswerId,
        Level + 1
    FROM 
        Posts P
    INNER JOIN 
        Posts Parent ON Parent.Id = P.ParentId
    WHERE 
        P.PostTypeId = 2 
)
SELECT 
    Q.Title AS QuestionTitle,
    Q.CreationDate AS QuestionCreationDate,
    U.DisplayName AS OwnerDisplayName,
    COUNT(DISTINCT A.Id) AS AnswerCount,
    O.ClosingReason,
    ROW_NUMBER() OVER (PARTITION BY Q.PostId ORDER BY A.CreationDate DESC) AS LatestAnswerRank,
    COALESCE(CASE WHEN U.EmailHash IS NULL THEN 'No Email' ELSE U.EmailHash END, 'Unknown') AS EmailStatus,
    STRING_AGG(DISTINCT T.TagName, ', ') AS Tags,
    (SELECT COUNT(*) FROM Votes V WHERE V.PostId = Q.PostId AND V.VoteTypeId = 3) AS DownVoteCount
FROM 
    RecursiveCTE Q
LEFT JOIN 
    Posts A ON A.ParentId = Q.PostId AND A.PostTypeId = 2
LEFT JOIN 
    Users U ON U.Id = Q.OwnerUserId
LEFT JOIN 
    PostHistory PH ON PH.PostId = Q.PostId AND PH.PostHistoryTypeId = 10
LEFT JOIN 
    CloseReasonTypes O ON O.Id = PH.Comment 
LEFT JOIN 
    Tags T ON T.Id IN (SELECT UNNEST(string_to_array(Q.Tags, ','))::integer) 
WHERE 
    Q.Level = 1 
GROUP BY 
    Q.PostId, Q.Title, Q.CreationDate, U.DisplayName, O.ClosingReason
HAVING 
    COUNT(DISTINCT A.Id) > 0 AND COUNT(DISTINCT T.TagName) > 2 
ORDER BY 
    Q.CreationDate DESC, AnswerCount DESC;
