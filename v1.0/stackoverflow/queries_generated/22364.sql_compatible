
WITH RecursivePostHistory AS (
    SELECT 
        ph.Id,
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.UserId,
        ph.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate) AS RowNum
    FROM 
        PostHistory ph
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        CASE 
            WHEN u.Reputation IS NULL THEN 'No Reputation'
            WHEN u.Reputation < 100 THEN 'Low Reputation'
            WHEN u.Reputation BETWEEN 100 AND 1000 THEN 'Medium Reputation'
            ELSE 'High Reputation'
        END AS ReputationLevel
    FROM 
        Users u
),
PostAnalytics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.PostTypeId,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        MAX(v.CreationDate) AS LastVoteDate,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes,
        MAX(ph.CreationDate) AS LastEdits
    FROM 
        Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN RecursivePostHistory ph ON ph.PostId = p.Id
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.PostTypeId
),
PostComments AS (
    SELECT 
        c.Id AS CommentId,
        c.Text,
        c.CreationDate,
        u.DisplayName AS UserName,
        p.Title AS PostTitle,
        p.Id AS PostId
    FROM 
        Comments c
    INNER JOIN Users u ON c.UserId = u.Id
    INNER JOIN Posts p ON c.PostId = p.Id
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.UserDisplayName,
        MIN(ph.CreationDate) AS FirstClose
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10
    GROUP BY 
        ph.PostId, ph.UserDisplayName
),
PostsWithClosedInfo AS (
    SELECT 
        pa.*,
        cp.FirstClose
    FROM 
        PostAnalytics pa
    LEFT JOIN ClosedPosts cp ON pa.PostId = cp.PostId
)

SELECT 
    p.Title, 
    p.CreationDate,
    p.CommentCount,
    p.VoteCount,
    p.Upvotes,
    p.Downvotes,
    COALESCE(CAST(p.FirstClose AS VARCHAR), 'Not Closed') AS FirstCloseDate,
    ur.ReputationLevel,
    COUNT(pc.CommentId) AS CommentsInclusion,
    STRING_AGG(pc.Text, ' || ') AS CommentsSnippet,
    CASE 
        WHEN p.VoteCount = 0 THEN 'No votes yet.'
        ELSE CONCAT('Most recent vote on: ', TO_CHAR(p.LastVoteDate, 'YYYY-MM-DD HH24:MI:SS'))
    END AS LatestVoteStatus,
    CASE 
        WHEN ur.Reputation IS NULL THEN 'Anonymous'
        WHEN ur.Reputation > 1000 THEN 'Big Shot'
        ELSE 'Regular User'
    END AS UserCategory
FROM 
    PostsWithClosedInfo p
JOIN 
    UserReputation ur ON ur.UserId = p.PostId  
LEFT JOIN 
    PostComments pc ON pc.PostId = p.PostId
GROUP BY 
    p.Title, p.CreationDate, p.CommentCount, p.VoteCount, 
    p.Upvotes, p.Downvotes, p.FirstClose, ur.ReputationLevel,
    p.LastVoteDate, ur.Reputation
ORDER BY 
    p.CreationDate DESC;
