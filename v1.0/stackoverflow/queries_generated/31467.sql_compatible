
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.Id AS OwnerId,
        u.DisplayName AS OwnerDisplayName,
        COUNT(*) OVER (PARTITION BY p.Id) AS CommentCount,
        ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.CreationDate ASC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1
),
RecentActivity AS (
    SELECT 
        p.Id,
        MAX(ph.CreationDate) AS LastEditDate,
        SUM(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 ELSE 0 END) AS CloseReopenCount
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id
),
TopPosts AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Score,
        rp.OwnerId,
        rp.OwnerDisplayName,
        ra.LastEditDate,
        ra.CloseReopenCount,
        rp.Rank
    FROM 
        RankedPosts rp
    JOIN 
        RecentActivity ra ON rp.Id = ra.Id
    WHERE 
        rp.Rank <= 10
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p 
    JOIN 
        LATERAL STRING_TO_ARRAY(p.Tags, ',') AS tag_array ON TRUE
    JOIN 
        Tags t ON t.TagName = TRIM(tag_array)
    GROUP BY 
        p.Id
)
SELECT 
    tp.Id,
    tp.Title,
    tp.CreationDate,
    tp.ViewCount,
    tp.Score,
    tp.OwnerDisplayName,
    pt.Tags,
    tp.LastEditDate,
    COALESCE(tp.CloseReopenCount, 0) AS CloseReopenCount,
    CASE WHEN tp.CloseReopenCount > 0 THEN 'YES' ELSE 'NO' END AS WasClosedOrReopened
FROM 
    TopPosts tp
LEFT JOIN 
    PostTags pt ON tp.Id = pt.PostId
ORDER BY 
    tp.Score DESC, 
    tp.CreationDate DESC;
