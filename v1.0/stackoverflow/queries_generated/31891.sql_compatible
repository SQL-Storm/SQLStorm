
WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.Id
),
UserReputation AS (
    SELECT 
        Id AS UserId,
        DisplayName,
        Reputation,
        CASE 
            WHEN Reputation >= 10000 THEN 'High'
            WHEN Reputation >= 1000 THEN 'Medium'
            ELSE 'Low'
        END AS ReputationLevel
    FROM 
        Users
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        COALESCE(c.TotalComments, 0) AS TotalComments,
        COALESCE(v.VoteCount, 0) AS VoteCount,
        CASE 
            WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 
        END AS HasAcceptedAnswer
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId, 
            COUNT(*) AS TotalComments 
        FROM 
            Comments 
        GROUP BY 
            PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT 
            PostId, 
            COUNT(*) AS VoteCount 
        FROM 
            Votes 
        GROUP BY 
            PostId
    ) v ON p.Id = v.PostId
),
PostHistoryChanges AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS ChangeCount,
        MAX(CreationDate) AS LastChangeDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11, 12, 13)  
    GROUP BY 
        ph.PostId
)
SELECT 
    ph.PostId,
    ph.Title,
    ph.ViewCount,
    ph.TotalComments,
    ph.VoteCount,
    ph.HasAcceptedAnswer,
    COUNT(rph.Id) AS ChildPosts,
    U.DisplayName AS UserDisplayName,
    U.ReputationLevel,
    COALESCE(phc.ChangeCount, 0) AS ChangeCount,
    phc.LastChangeDate
FROM 
    PostStatistics ph
JOIN 
    RecursivePostHierarchy rph ON ph.PostId = rph.Id
JOIN 
    Users U ON ph.OwnerUserId = U.Id
LEFT JOIN 
    PostHistoryChanges phc ON ph.PostId = phc.PostId
WHERE 
    ph.ViewCount > 100
GROUP BY 
    ph.PostId, 
    ph.Title, 
    ph.ViewCount, 
    ph.TotalComments, 
    ph.VoteCount, 
    ph.HasAcceptedAnswer, 
    U.DisplayName, 
    U.ReputationLevel, 
    phc.ChangeCount, 
    phc.LastChangeDate
ORDER BY 
    ph.ViewCount DESC,
    ChildPosts DESC;
