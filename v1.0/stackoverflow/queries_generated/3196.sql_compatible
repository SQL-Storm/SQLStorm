
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 month' 
        AND p.Score > 10
),
UserScores AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        u.Reputation >= 100
    GROUP BY 
        u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        us.UserId,
        us.DisplayName,
        us.UpVotes - us.DownVotes AS NetVotes,
        RANK() OVER (ORDER BY us.UpVotes DESC) AS VoteRank
    FROM 
        UserScores us
    WHERE 
        us.PostCount > 5
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    tu.DisplayName AS TopUser,
    tu.NetVotes,
    CASE 
        WHEN tu.NetVotes IS NULL THEN 'No Votes'
        ELSE 'Has Votes'
    END AS VoteStatus,
    (
        SELECT 
            COUNT(*) 
        FROM 
            Comments c 
        WHERE 
            c.PostId = rp.PostId
    ) AS CommentCount,
    COALESCE(
        (SELECT 
            STRING_AGG(DISTINCT t.TagName, ', ') 
         FROM 
            Tags t 
         WHERE 
            t.Id IN (
                 SELECT 
                    CAST(UNNEST(string_to_array(substring(rp.Tags, 2, LENGTH(rp.Tags) - 2), '><')) AS INT)
            )
        ), 
    'No Tags') AS RelatedTags
FROM 
    RankedPosts rp
LEFT JOIN 
    TopUsers tu ON rp.RankByScore = 1 AND rp.OwnerUserId = tu.UserId
WHERE 
    rp.RankByScore <= 3
ORDER BY 
    rp.CreationDate DESC;
