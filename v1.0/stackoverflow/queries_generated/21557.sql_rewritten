WITH UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        COUNT(DISTINCT p.Id) AS PostCount,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounties,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE u.Reputation > 1000
    GROUP BY u.Id
),
PostAnalytics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(CNT.CommentsCount, 0) AS CommentsCount,
        COALESCE(PV.ViewCount, 0) AS ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RecentPostRank
    FROM Posts p
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentsCount
        FROM Comments
        GROUP BY PostId
    ) CNT ON p.Id = CNT.PostId
    LEFT JOIN (
        SELECT PostId, SUM(ViewCount) AS ViewCount
        FROM Posts
        GROUP BY PostId
    ) PV ON p.Id = PV.PostId
    WHERE p.CreationDate >= cast('2024-10-01' as date) - interval '365 days'
),
CloseReasons AS (
    SELECT 
        ph.PostId,
        STRING_AGG(cr.Name, ', ') AS CloseReasons
    FROM PostHistory ph
    JOIN CloseReasonTypes cr ON ph.Comment::int = cr.Id
    WHERE ph.PostHistoryTypeId = 10
    GROUP BY ph.PostId
)
SELECT 
    us.UserId,
    us.DisplayName,
    us.Reputation,
    us.PostCount,
    us.TotalBounties,
    us.TotalUpvotes,
    us.TotalDownvotes,
    pa.Title,
    pa.CreationDate,
    pa.Score,
    pa.CommentsCount,
    pa.ViewCount,
    cr.CloseReasons
FROM UserStatistics us
JOIN PostAnalytics pa ON us.UserId = pa.OwnerUserId 
LEFT JOIN CloseReasons cr ON pa.PostId = cr.PostId
WHERE (us.TotalUpvotes - us.TotalDownvotes) > 10
  AND EXISTS (
      SELECT 1
      FROM Badges b
      WHERE b.UserId = us.UserId
        AND b.Class = 1
  )
ORDER BY us.Reputation DESC, pa.Score DESC 
OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY;