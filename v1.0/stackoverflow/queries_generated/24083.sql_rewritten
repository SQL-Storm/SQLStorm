WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.Score DESC) AS rn
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Score,
        rp.CommentCount,
        (SELECT 
             AVG(Score) 
         FROM 
             Posts 
         WHERE 
             Score >= 0 AND 
             CreationDate < rp.CreationDate
        ) AS AvgPrevScore
    FROM 
        RankedPosts rp
    WHERE 
        rn = 1 AND 
        rp.Score > COALESCE((SELECT 
                                 MAX(Score) 
                             FROM 
                                 Posts 
                             WHERE 
                                 ClosedDate IS NOT NULL), 0)
),
PostDetails AS (
    SELECT 
        fp.*,
        CASE 
            WHEN fp.Score > fp.AvgPrevScore THEN 'Trending'
            WHEN fp.CommentCount > 10 THEN 'Popular'
            WHEN fp.Score IS NULL THEN 'Score Unavailable'
            ELSE 'Normal'
        END AS PostStatus,
        CASE 
            WHEN fp.ViewCount IS NULL THEN 'No Views'
            ELSE fp.ViewCount::text || ' views'
        END AS FormattedViewCount
    FROM 
        FilteredPosts fp
)
SELECT 
    pd.PostId,
    pd.Title,
    pd.CreationDate,
    pd.FormattedViewCount,
    pd.Score,
    pd.CommentCount,
    pd.PostStatus,
    STRING_AGG(DISTINCT tag.TagName, ', ') AS Tags
FROM 
    PostDetails pd
LEFT JOIN 
    LATERAL (
        SELECT 
            t.TagName
        FROM 
            Tags t
        JOIN 
            LATERAL string_to_array(pd.Tags, ',') AS tag_name ON tag_name = t.TagName
    ) AS tag ON true
GROUP BY 
    pd.PostId, pd.Title, pd.CreationDate, pd.FormattedViewCount, pd.Score, pd.CommentCount, pd.PostStatus
ORDER BY 
    pd.Score DESC NULLS LAST, 
    pd.CreationDate ASC
LIMIT 100;