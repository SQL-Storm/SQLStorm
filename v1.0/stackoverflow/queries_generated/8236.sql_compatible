
WITH UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        SUM(p.ViewCount) AS TotalViews
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COALESCE(SUM(CASE WHEN c.Id IS NOT NULL THEN 1 ELSE 0 END), 0) AS CommentCount,
        COALESCE(SUM(CASE WHEN ph.Id IS NOT NULL THEN 1 ELSE 0 END), 0) AS EditCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount
),
AggregatedStats AS (
    SELECT
        us.UserId,
        us.DisplayName,
        ps.PostId,
        ps.Title,
        ps.Score,
        ps.ViewCount,
        us.BadgeCount,
        us.UpVotes,
        us.DownVotes,
        ps.CommentCount,
        ps.EditCount
    FROM 
        UserStats us
    JOIN 
        PostStats ps ON us.UserId = ps.OwnerUserId
)

SELECT 
    as.UserId,
    as.DisplayName,
    as.BadgeCount,
    as.UpVotes,
    as.DownVotes,
    SUM(as.ViewCount) AS TotalPostViews,
    AVG(as.Score) AS AveragePostScore,
    SUM(as.CommentCount) AS TotalComments,
    SUM(as.EditCount) AS TotalEdits
FROM 
    AggregatedStats as
GROUP BY 
    as.UserId, as.DisplayName, as.BadgeCount, as.UpVotes, as.DownVotes
ORDER BY 
    TotalPostViews DESC,
    AveragePostScore DESC
LIMIT 10;
