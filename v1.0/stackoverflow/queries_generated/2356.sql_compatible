
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore,
        DENSE_RANK() OVER (ORDER BY p.CreationDate DESC) AS RankByDate
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1
        AND p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
),
UserMetrics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(p.Score) AS TotalScore
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS CloseCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10  
    GROUP BY 
        ph.PostId
)
SELECT 
    up.UserId,
    up.DisplayName,
    up.GoldBadges,
    up.SilverBadges,
    up.BronzeBadges,
    up.TotalPosts,
    up.TotalScore,
    COALESCE(cp.CloseCount, 0) AS ClosedPostsCount,
    rp.Title,
    rp.CreationDate,
    rp.Score AS PostScore,
    CASE 
        WHEN up.TotalScore > 1000 THEN 'Active Contributor' 
        ELSE 'New Contributor' 
    END AS ContributorStatus
FROM 
    UserMetrics up
LEFT JOIN 
    ClosedPosts cp ON cp.PostId IN (SELECT p.Id FROM Posts p WHERE p.OwnerUserId = up.UserId)
LEFT JOIN 
    RankedPosts rp ON rp.OwnerUserId = up.UserId AND rp.RankByScore = 1
WHERE 
    up.TotalPosts > 0
ORDER BY 
    up.TotalScore DESC, 
    up.DisplayName ASC;
