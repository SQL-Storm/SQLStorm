
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM p.CreationDate) ORDER BY p.Score DESC) AS RankByScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        p.OwnerUserId
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= '2024-10-01 12:34:56'::timestamp - INTERVAL '5 years'
),
TopPosts AS (
    SELECT 
        rp.*,
        bt.Name AS BadgeType,
        u.Reputation,
        CASE 
            WHEN u.Reputation >= 1000 THEN 'High Reputation'
            WHEN u.Reputation >= 500 THEN 'Medium Reputation'
            ELSE 'Low Reputation'
        END AS ReputationCategory
    FROM 
        RankedPosts rp
    INNER JOIN 
        Users u ON u.Id = rp.OwnerUserId
    LEFT JOIN 
        Badges b ON b.UserId = u.Id AND b.Class = 1
    LEFT JOIN 
        (SELECT Id, Name FROM Badges WHERE Class = 1) bt ON b.Id = bt.Id
    WHERE 
        rp.RankByScore <= 10
),
FinalSelection AS (
    SELECT 
        tp.Id,
        tp.Title,
        tp.ViewCount,
        tp.Score,
        tp.AnswerCount,
        tp.CommentCount,
        tp.Reputation,
        tp.ReputationCategory,
        COALESCE(bt.Name, 'No Badge') AS Badge
    FROM 
        TopPosts tp
    LEFT JOIN 
        Badges b ON tp.OwnerUserId = b.UserId
)

SELECT 
    fs.Title,
    fs.ViewCount,
    fs.Score,
    fs.AnswerCount,
    fs.CommentCount,
    fs.Reputation,
    fs.ReputationCategory,
    fs.Badge
FROM 
    FinalSelection fs
ORDER BY 
    fs.Score DESC, fs.ViewCount DESC;
