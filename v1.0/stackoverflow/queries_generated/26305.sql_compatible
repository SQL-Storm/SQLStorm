
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Body,
        p.Tags,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY STRING_AGG(t.TagName, ',') ORDER BY p.CreationDate DESC) AS rn,
        STRING_AGG(t.TagName, ',') AS TagList
    FROM 
        Posts p
    JOIN 
        Tags t ON t.Id = ANY (STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')::int[])
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, p.CreationDate, p.ViewCount, p.Score
),
FilteredPosts AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.Body,
        rp.TagList,
        rp.ViewCount,
        rp.Score
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn = 1 
),
PostStatistics AS (
    SELECT 
        fp.TagList,
        COUNT(fp.Id) AS PostCount,
        SUM(fp.ViewCount) AS TotalViews,
        AVG(fp.Score) AS AverageScore
    FROM 
        FilteredPosts fp
    GROUP BY 
        fp.TagList
),
TopTags AS (
    SELECT 
        TagList, 
        ROW_NUMBER() OVER (ORDER BY PostCount DESC) AS TagRank
    FROM 
        PostStatistics
)
SELECT 
    t.TagList,
    ps.PostCount,
    ps.TotalViews,
    ps.AverageScore,
    ot.UserId,
    u.DisplayName,
    u.Reputation
FROM 
    PostStatistics ps
JOIN 
    TopTags t ON ps.TagList = t.TagList
JOIN 
    (SELECT 
         p.TagList,
         p.Id AS PostId,
         v.UserId
     FROM 
         PostStatistics ps
     JOIN 
         Posts p ON p.TagList = ps.TagList
     JOIN 
         Votes v ON p.Id = v.PostId 
     WHERE 
         v.VoteTypeId = 2 
     ) AS ot ON ps.TagList = ot.TagList
JOIN 
    Users u ON ot.UserId = u.Id
WHERE 
    t.TagRank <= 10 
ORDER BY 
    ps.TotalViews DESC;
