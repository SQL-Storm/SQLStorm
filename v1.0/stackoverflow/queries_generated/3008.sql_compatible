
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS ScoreRank,
        COUNT(c.Id) AS CommentCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
),
UserPostStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(up.BadgeCount, 0) AS BadgeCount,
        COALESCE(SUM(rp.CommentCount), 0) AS TotalComments,
        SUM(CASE WHEN rp.ScoreRank = 1 THEN 1 ELSE 0 END) AS TopScoringPosts
    FROM Users u
    LEFT JOIN UserBadges up ON u.Id = up.UserId
    LEFT JOIN RankedPosts rp ON u.Id = rp.OwnerUserId
    GROUP BY u.Id, u.DisplayName
)
SELECT 
    u.UserId,
    u.DisplayName,
    u.BadgeCount,
    u.TotalComments,
    u.TopScoringPosts,
    JSON_AGG(JSON_BUILD_OBJECT('PostId', p.PostId, 'Title', p.Title, 'Score', p.Score)) AS TopPosts
FROM UserPostStatistics u
LEFT JOIN Posts p ON u.UserId = p.OwnerUserId
WHERE p.Score > 0
GROUP BY u.UserId, u.DisplayName, u.BadgeCount, u.TotalComments, u.TopScoringPosts
HAVING COUNT(p.Id) > 3
ORDER BY u.TopScoringPosts DESC, u.BadgeCount DESC
LIMIT 10;
