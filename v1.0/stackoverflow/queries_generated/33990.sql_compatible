
WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        U.DisplayName AS OwnerDisplayName,
        COUNT(CASE WHEN C.UserId IS NOT NULL THEN 1 END) AS CommentCount,
        RANK() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC, P.CreationDate DESC) AS PostRank
    FROM 
        Posts P
    LEFT JOIN 
        Users U ON P.OwnerUserId = U.Id
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    GROUP BY 
        P.Id, P.Title, P.CreationDate, P.Score, P.ViewCount, U.DisplayName
),
RecentBadges AS (
    SELECT 
        B.UserId,
        COUNT(*) AS TotalBadges,
        STRING_AGG(B.Name, ', ') AS BadgeNames
    FROM 
        Badges B
    WHERE 
        B.Date >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 month')
    GROUP BY 
        B.UserId
),
PostEngagement AS (
    SELECT 
        P.Id AS PostId,
        COALESCE(SUM(V.BountyAmount), 0) AS TotalBounty,
        COUNT(V.Id) AS TotalVotes,
        AVG(CASE WHEN V.VoteTypeId = 2 THEN 1.0 ELSE 0 END) AS AverageUpVotes,
        AVG(CASE WHEN V.VoteTypeId = 3 THEN 1.0 ELSE 0 END) AS AverageDownVotes
    FROM 
        Posts P
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    GROUP BY 
        P.Id
)
SELECT 
    RP.Title,
    RP.OwnerDisplayName,
    RP.Score,
    RP.ViewCount,
    RP.CommentCount,
    REB.TotalBadges,
    REB.BadgeNames,
    PE.TotalBounty,
    PE.TotalVotes,
    PE.AverageUpVotes,
    PE.AverageDownVotes
FROM 
    RankedPosts RP
LEFT JOIN 
    RecentBadges REB ON REB.UserId = RP.OwnerDisplayName
LEFT JOIN 
    PostEngagement PE ON PE.PostId = RP.PostId
WHERE 
    RP.PostRank <= 5
ORDER BY 
    RP.Score DESC, RP.ViewCount DESC;
