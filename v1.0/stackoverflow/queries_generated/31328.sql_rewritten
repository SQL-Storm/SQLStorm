WITH RecursivePostHistory AS (
    SELECT 
        p.Id AS PostId,
        ph.CreationDate,
        ph.UserId,
        ph.PostHistoryTypeId,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY ph.CreationDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
RecentActivePosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        COALESCE(MAX(v.CreationDate), '1970-01-01') AS LastVoteDate,
        COUNT(DISTINCT c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.LastActivityDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month'
    GROUP BY 
        p.Id
),
TopPosts AS (
    SELECT
        r.PostId,
        COUNT(*) AS EditCount
    FROM 
        RecursivePostHistory r
    WHERE 
        r.PostHistoryTypeId IN (4, 5, 6)  
    GROUP BY 
        r.PostId
),
PostRankings AS (
    SELECT 
        rp.Id AS PostId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        rp.AnswerCount,
        rp.CommentCount,
        tp.EditCount,
        RANK() OVER (ORDER BY rp.Score DESC, rp.ViewCount DESC) AS Rank
    FROM 
        RecentActivePosts rp
    LEFT JOIN 
        TopPosts tp ON rp.Id = tp.PostId
)
SELECT 
    pr.Title,
    pr.Score,
    pr.ViewCount,
    pr.AnswerCount,
    pr.CommentCount,
    COALESCE(tp.EditCount, 0) AS EditCount,
    CASE 
        WHEN pr.Score > 50 THEN 'Hot'
        WHEN pr.Score BETWEEN 20 AND 50 THEN 'Trending'
        ELSE 'New'
    END AS PopularityStatus,
    ph.UserDisplayName AS LastEditor
FROM 
    PostRankings pr
LEFT JOIN 
    RecursivePostHistory ph ON pr.PostId = ph.PostId AND ph.rn = 1
WHERE 
    pr.Rank <= 100
ORDER BY 
    pr.Rank;