
WITH RECURSIVE PostHierarchy AS (
    SELECT 
        p.Id, 
        p.Title, 
        p.PostTypeId, 
        p.AcceptedAnswerId,
        p.OwnerUserId,
        p.CreationDate,
        0 AS Level 
    FROM 
        Posts p 
    WHERE 
        p.PostTypeId = 1 
    UNION ALL
    SELECT 
        p.Id, 
        p.Title, 
        p.PostTypeId, 
        p.AcceptedAnswerId,
        p.OwnerUserId,
        p.CreationDate,
        ph.Level + 1 
    FROM 
        Posts p
    JOIN 
        PostHierarchy ph ON p.ParentId = ph.Id 
    WHERE 
        p.PostTypeId = 2 
),
RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.AcceptedAnswerId,
        ph.Level,
        RANK() OVER (PARTITION BY ph.Level ORDER BY p.ViewCount DESC) AS ViewRank,
        COALESCE(u.Reputation, 0) AS OwnerReputation
    FROM 
        Posts p
    LEFT JOIN 
        PostHierarchy ph ON p.Id = ph.Id OR p.ParentId = ph.Id
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
),
PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount
    FROM 
        Comments c
    GROUP BY 
        c.PostId
)
SELECT 
    rp.Id,
    rp.Title,
    rp.ViewCount,
    rp.Level,
    rp.ViewRank,
    pc.CommentCount,
    CASE 
        WHEN rp.AcceptedAnswerId IS NOT NULL THEN 1
        ELSE 0
    END AS HasAcceptedAnswer,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Tags t 
     JOIN Posts p ON p.Tags LIKE '%' || t.TagName || '%'
     WHERE p.Id = rp.Id) AS Tags
FROM 
    RankedPosts rp
LEFT JOIN 
    PostComments pc ON rp.Id = pc.PostId
WHERE 
    rp.ViewRank <= 5 
ORDER BY 
    rp.Level, rp.ViewRank;
