WITH UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COUNT(DISTINCT p.Id) AS PostCount,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        AVG(COALESCE(EXTRACT(EPOCH FROM (cast('2024-10-01 12:34:56' as timestamp) - u.CreationDate)) / 86400, 1)) AS DaysSinceCreation
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
RankedUsers AS (
    SELECT 
        UserId,
        DisplayName,
        UpVotes,
        DownVotes,
        PostCount,
        BadgeCount,
        DaysSinceCreation,
        RANK() OVER (ORDER BY UpVotes - DownVotes DESC, PostCount DESC) AS UserRank
    FROM 
        UserStats
),
TopUsers AS (
    SELECT *
    FROM RankedUsers
    WHERE UserRank <= 10
)
SELECT 
    tu.DisplayName,
    tu.UpVotes,
    tu.DownVotes,
    tu.PostCount,
    tu.BadgeCount,
    CASE 
        WHEN tu.DaysSinceCreation < 30 THEN 'New User'
        WHEN tu.DaysSinceCreation BETWEEN 30 AND 365 THEN 'Active User'
        ELSE 'Veteran User'
    END AS UserCategory,
    CASE 
        WHEN EXISTS (SELECT 1 FROM Badges ba WHERE ba.UserId = tu.UserId AND ba.Class = 1) THEN 'Gold Badge Holder'
        ELSE 'Non-Gold Badge Holder'
    END AS BadgeStatus,
    STRING_AGG(DISTINCT t.TagName, ', ') AS UserTags
FROM 
    TopUsers tu
LEFT JOIN 
    Posts p ON tu.UserId = p.OwnerUserId
LEFT JOIN 
    UNNEST(string_to_array(p.Tags, ',')) AS t(TagName)
GROUP BY 
    tu.UserId, tu.DisplayName, tu.UpVotes, tu.DownVotes, tu.PostCount, tu.BadgeCount, tu.DaysSinceCreation
ORDER BY 
    tu.UpVotes - tu.DownVotes DESC, tu.PostCount DESC;