
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        p.Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId IN (1, 2) 
        AND p.CreationDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)
),
TagStats AS (
    SELECT 
        tag AS TagName,
        COUNT(*) AS TagCount
    FROM (
        SELECT 
            TRIM(UNNEST(string_to_array(SUBSTRING(Tags, 2, LENGTH(Tags) - 2), '><'))) ) AS tag
        FROM 
            Posts
        WHERE 
            PostTypeId = 1 
    ) AS extracted_tags
    GROUP BY 
        tag
),
PostHistoryAggregates AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 END) AS CloseReopenCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (12, 13) THEN 1 END) AS DeleteUndeleteCount,
        AVG(EXTRACT(EPOCH FROM (ph.CreationDate - p.CreationDate))) AS AvgTimeToEdit
    FROM 
        PostHistory ph
    JOIN 
        Posts p ON ph.PostId = p.Id
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    ts.TagCount,
    pha.CloseReopenCount,
    pha.DeleteUndeleteCount,
    pha.AvgTimeToEdit,
    rp.PostRank
FROM 
    RankedPosts rp
LEFT JOIN 
    TagStats ts ON ts.TagName IN (SELECT TRIM(UNNEST(string_to_array(SUBSTRING(rp.Tags, 2, LENGTH(rp.Tags) - 2), '><'))))
    LEFT JOIN 
    PostHistoryAggregates pha ON pha.PostId = rp.PostId
ORDER BY 
    rp.Score DESC, 
    rp.ViewCount DESC, 
    rp.CreationDate DESC;
