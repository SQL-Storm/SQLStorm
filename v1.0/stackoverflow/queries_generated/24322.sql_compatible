
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
AggregatedVotes AS (
    SELECT 
        v.PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes v
    GROUP BY 
        v.PostId
),
PostHistories AS (
    SELECT 
        ph.PostId,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS LastClosedDate,
        MAX(CASE WHEN ph.PostHistoryTypeId = 11 THEN ph.CreationDate END) AS LastReopenedDate
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)
SELECT 
    r.PostId,
    r.Title,
    r.CreationDate,
    r.Score,
    COALESCE(a.UpVotes, 0) AS UpVotes,
    COALESCE(a.DownVotes, 0) AS DownVotes,
    r.CommentCount,
    ph.LastClosedDate,
    ph.LastReopenedDate,
    CASE 
        WHEN ph.LastClosedDate IS NOT NULL AND (ph.LastReopenedDate IS NULL OR ph.LastClosedDate > ph.LastReopenedDate) 
        THEN 'Closed' 
        ELSE 'Open' 
    END AS PostStatus,
    COUNT(DISTINCT u.Id) FILTER (WHERE u.Reputation > 500) AS HighRepUsersEngaged
FROM 
    RankedPosts r
LEFT JOIN 
    AggregatedVotes a ON r.PostId = a.PostId
LEFT JOIN 
    PostHistories ph ON r.PostId = ph.PostId
LEFT JOIN 
    Users u ON u.Id = r.OwnerUserId 
WHERE 
    r.PostRank = 1 
    AND (r.CommentCount > 10 OR (ph.LastClosedDate IS NOT NULL))
GROUP BY 
    r.PostId, r.Title, r.CreationDate, r.Score, 
    r.CommentCount, ph.LastClosedDate, ph.LastReopenedDate, 
    a.UpVotes, a.DownVotes
ORDER BY 
    r.Score DESC, r.ViewCount DESC
LIMIT 50;
