
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreatedAt,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankInType,
        p.OwnerUserId -- Added to GROUP BY
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 YEAR'
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreatedAt, p.OwnerUserId -- Added OwnerUserId
),
MostCommentedPosts AS (
    SELECT 
        PostId, 
        Title, 
        Score, 
        CreatedAt, 
        CommentCount, 
        RankInType
    FROM 
        RankedPosts 
    WHERE 
        CommentCount > 10
    ORDER BY 
        CommentCount DESC
    LIMIT 5
)
SELECT 
    mcp.PostId,
    mcp.Title,
    mcp.Score,
    mcp.CreatedAt,
    u.DisplayName AS PostOwner,
    COUNT(b.Id) AS BadgeCount,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    MostCommentedPosts mcp
JOIN 
    Users u ON mcp.OwnerUserId = u.Id
LEFT JOIN 
    Badges b ON b.UserId = u.Id
LEFT JOIN 
    PostsTags pt ON pt.PostId = mcp.PostId
LEFT JOIN 
    Tags t ON pt.TagId = t.Id
GROUP BY 
    mcp.PostId, mcp.Title, mcp.Score, mcp.CreatedAt, u.DisplayName
ORDER BY 
    mcp.Score DESC, mcp.CreatedAt DESC;
