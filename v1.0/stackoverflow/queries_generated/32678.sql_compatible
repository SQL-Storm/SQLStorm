
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(day, -30, DATE '2024-10-01')
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName
),
TopOwningUsers AS (
    SELECT 
        OwnerDisplayName,
        SUM(Score) AS TotalScore,
        AVG(ViewCount) AS AvgViewCount
    FROM 
        RankedPosts
    WHERE 
        rn = 1
    GROUP BY 
        OwnerDisplayName
    HAVING 
        SUM(Score) >= 50
),
SubQueryPostHistory AS (
    SELECT 
        ph.PostId,
        MAX(CASE WHEN pht.Name = 'Post Closed' THEN ph.CreationDate END) AS LastClosedDate,
        MAX(CASE WHEN pht.Name = 'Post Reopened' THEN ph.CreationDate END) AS LastReopenedDate
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
),
FinalReport AS (
    SELECT 
        ru.OwnerDisplayName,
        tp.PostId,
        tp.Title,
        tp.CreationDate,
        tp.CommentCount,
        tp.UpVotes,
        tp.DownVotes,
        COALESCE(s.LastClosedDate, 'Never') AS LastClosedDate,
        COALESCE(s.LastReopenedDate, 'Never') AS LastReopenedDate,
        ru.TotalScore
    FROM 
        TopOwningUsers ru
    JOIN 
        RankedPosts tp ON ru.OwnerDisplayName = tp.OwnerDisplayName
    LEFT JOIN 
        SubQueryPostHistory s ON tp.PostId = s.PostId
    ORDER BY 
        ru.TotalScore DESC, tp.CreationDate DESC
)
SELECT * 
FROM FinalReport 
WHERE LastClosedDate = 'Never' OR LastClosedDate < DATEADD(day, -30, LAST_DAY(DATE '2024-10-01'));
