
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        DENSE_RANK() OVER (ORDER BY p.Score DESC) AS RankScore
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount
),
TopPosts AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.RankScore <= 10
),
UsersWithBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    tp.Title,
    tp.CreationDate,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    u.DisplayName AS OwnerDisplayName,
    u.BadgeCount,
    u.GoldBadges,
    u.SilverBadges,
    u.BronzeBadges,
    CASE 
        WHEN u.Location IS NOT NULL THEN 'Located in: ' || u.Location
        ELSE 'Location not specified'
    END AS UserLocation,
    CASE 
        WHEN tsp.PostId IS NULL THEN 'Not linked'
        ELSE 'Linked to: ' || tsp.PostId
    END AS LinkStatus
FROM 
    TopPosts tp
LEFT JOIN 
    UsersWithBadges u ON tp.Id = u.UserId
LEFT JOIN (
    SELECT 
        pl.PostId, pl.RelatedPostId 
    FROM 
        PostLinks pl
    WHERE 
        pl.LinkTypeId = 1
) tsp ON tp.Id = tsp.PostId
WHERE 
    tp.ViewCount > 1000 AND 
    tp.CreationDate > (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC;
