
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
RecentComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount,
        MAX(c.CreationDate) AS LastCommentDate
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
PostStatistics AS (
    SELECT 
        rp.Id AS PostId,
        rp.Title,
        rp.CreationDate,
        ub.BadgeCount,
        ub.HighestBadgeClass,
        COALESCE(rc.CommentCount, 0) AS CommentCount,
        COALESCE(rc.LastCommentDate, DATE '1970-01-01') AS LastCommentDate
    FROM 
        RankedPosts rp
    JOIN 
        Users u ON rp.OwnerUserId = u.Id
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
    LEFT JOIN 
        RecentComments rc ON rp.Id = rc.PostId
    WHERE 
        rp.rn = 1
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.CreationDate,
    ps.BadgeCount,
    ps.HighestBadgeClass,
    ps.CommentCount,
    ps.LastCommentDate,
    CASE 
        WHEN ps.HighestBadgeClass = 1 THEN 'Gold'
        WHEN ps.HighestBadgeClass = 2 THEN 'Silver'
        WHEN ps.HighestBadgeClass = 3 THEN 'Bronze'
        ELSE 'No Badge'
    END AS BadgeLevel,
    CASE 
        WHEN ps.LastCommentDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' THEN 'Active'
        ELSE 'Inactive'
    END AS PostActivity
FROM 
    PostStatistics ps
ORDER BY 
    ps.Score DESC, 
    ps.CommentCount DESC;
