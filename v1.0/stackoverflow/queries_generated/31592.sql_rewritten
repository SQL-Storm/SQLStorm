WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.OwnerUserId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL 

    UNION ALL

    SELECT 
        p.Id,
        p.ParentId,
        p.OwnerUserId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),

PostVoteStatistics AS (
    SELECT 
        v.PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(v.Id) AS TotalVotes
    FROM 
        Votes v
    GROUP BY 
        v.PostId
),

UserBadgeCounts AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Date) AS LastBadgeDate
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),

PostComments AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id
)

SELECT 
    p.Id AS PostId,
    p.Title,
    p.CreationDate,
    COALESCE(ph.Level, 0) AS PostLevel,
    pst.UpVotes,
    pst.DownVotes,
    pst.TotalVotes,
    u.BadgeCount,
    u.LastBadgeDate,
    c.CommentCount
FROM 
    Posts p
LEFT JOIN 
    RecursivePostHierarchy ph ON p.Id = ph.PostId
LEFT JOIN 
    PostVoteStatistics pst ON p.Id = pst.PostId
LEFT JOIN 
    UserBadgeCounts u ON p.OwnerUserId = u.UserId
LEFT JOIN 
    PostComments c ON p.Id = c.PostId
WHERE 
    p.PostTypeId = 1 
AND 
    (p.ViewCount > 100 OR u.BadgeCount > 0) 
ORDER BY 
    p.CreationDate DESC
LIMIT 10;