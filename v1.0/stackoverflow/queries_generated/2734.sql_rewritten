WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
UserReputations AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(b.Class), 0) AS TotalBadges,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
Combined AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        ur.UserId,
        ur.DisplayName AS UserDisplayName,
        ur.TotalBadges,
        ur.ReputationRank
    FROM 
        RankedPosts rp
    JOIN 
        Users ur ON rp.OwnerUserId = ur.Id
)
SELECT 
    c.*,
    CASE 
        WHEN c.Score >= 100 THEN 'High Score'
        WHEN c.Score BETWEEN 50 AND 99 THEN 'Moderate Score'
        ELSE 'Low Score'
    END AS ScoreCategory
FROM 
    Combined c
LEFT JOIN 
    PostHistory ph ON c.PostId = ph.PostId AND ph.PostHistoryTypeId IN (10, 11) 
WHERE 
    c.CommentCount > 5
    AND c.ReputationRank <= 10
ORDER BY 
    c.ViewCount DESC, c.CreationDate DESC
LIMIT 50;