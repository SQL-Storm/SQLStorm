WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    AND p.Score IS NOT NULL
),
TopPosts AS (
    SELECT 
        rp.PostId, 
        rp.Title, 
        rp.Score,
        rp.ViewCount,
        COALESCE(uc.UpvoteCount, 0) AS UpvoteCount,
        COALESCE(dc.DownvoteCount, 0) AS DownvoteCount
    FROM 
        RankedPosts rp
    LEFT JOIN (
        SELECT 
            v.PostId,
            SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount,
            SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvoteCount
        FROM 
            Votes v
        GROUP BY 
            v.PostId
    ) uc ON rp.PostId = uc.PostId
    LEFT JOIN (
        SELECT 
            p.Id, 
            COUNT(c.Id) AS CommentCount
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.Id = c.PostId
        GROUP BY 
            p.Id
    ) cc ON rp.PostId = cc.Id
    WHERE 
        rp.rn <= 10
),
PostDetails AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.Score,
        tp.ViewCount,
        tp.UpvoteCount,
        tp.DownvoteCount,
        COUNT(ph.Id) AS EditCount
    FROM 
        TopPosts tp
    LEFT JOIN 
        PostHistory ph ON tp.PostId = ph.PostId
    GROUP BY 
        tp.PostId, tp.Title, tp.Score, tp.ViewCount, tp.UpvoteCount, tp.DownvoteCount
),
FinalResults AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.Score,
        pd.ViewCount,
        pd.UpvoteCount,
        pd.DownvoteCount,
        CASE 
            WHEN pd.EditCount > 0 THEN 'Edited'
            ELSE 'Not Edited'
        END AS EditStatus
    FROM 
        PostDetails pd
)
SELECT 
    *,
    (CASE 
        WHEN ViewCount = 0 THEN 'No Views'
        ELSE 'Viewed'
    END) AS ViewStatus,
    (SELECT STRING_AGG(t.TagName, ', ') 
        FROM Tags t 
        JOIN Posts p ON p.Tags LIKE '%' || t.TagName || '%' 
        WHERE p.Id = f.PostId) AS TagList
FROM 
    FinalResults f
ORDER BY 
    Score DESC, ViewCount DESC;