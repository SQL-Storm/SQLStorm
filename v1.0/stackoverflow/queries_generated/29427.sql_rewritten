WITH TagFrequency AS (
    SELECT 
        UNNEST(string_to_array(substring(Tags, 2, length(Tags) - 2), '><')) AS TagName,
        COUNT(*) AS PostCount
    FROM 
        Posts
    WHERE 
        PostTypeId = 1 
    GROUP BY 
        TagName
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(p.ViewCount) AS TotalViews,
        SUM(p.UpVotes) AS TotalUpVotes,
        SUM(b.Class = 1)::int AS GoldBadges, 
        SUM(b.Class = 2)::int AS SilverBadges, 
        SUM(b.Class = 3)::int AS BronzeBadges 
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
ActivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        p.AnswerCount,
        p.ViewCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
)
SELECT 
    tf.TagName,
    COUNT(DISTINCT ap.PostId) AS ActivePostCount,
    AVG(ur.TotalViews) AS AverageViewsPerUser,
    AVG(ur.TotalUpVotes) AS AverageUpVotesPerUser,
    SUM(ur.GoldBadges) AS TotalGoldBadges,
    SUM(ur.SilverBadges) AS TotalSilverBadges,
    SUM(ur.BronzeBadges) AS TotalBronzeBadges
FROM 
    TagFrequency tf
JOIN 
    Posts p ON p.Tags LIKE '%' || tf.TagName || '%' 
JOIN 
    ActivePosts ap ON ap.PostId = p.Id
JOIN 
    Users u ON p.OwnerUserId = u.Id
JOIN 
    UserReputation ur ON u.Id = ur.UserId
GROUP BY 
    tf.TagName
ORDER BY 
    ActivePostCount DESC, tf.TagName;