WITH RecursivePostHierarchy AS (
    SELECT 
        Id, 
        Title, 
        ParentId,
        0 AS Level 
    FROM 
        Posts 
    WHERE 
        ParentId IS NULL
    
    UNION ALL

    SELECT 
        p.Id, 
        p.Title, 
        p.ParentId,
        Level + 1 
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.Id
), 
UserPostAnalytics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS TotalPosts,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS UpvotedPosts,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS DownvotedPosts,
        COALESCE(SUM(p.ViewCount), 0) AS TotalViews,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY COUNT(p.Id) DESC) AS PostRank
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
), 
RecentPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        ROW_NUMBER() OVER (ORDER BY p.CreationDate DESC) AS RecentRank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
)

SELECT 
    up.UserId,
    up.DisplayName,
    up.TotalPosts,
    up.UpvotedPosts,
    up.DownvotedPosts,
    up.TotalViews,
    rp.Title AS RecentPostTitle,
    rp.CreationDate AS RecentPostDate,
    rh.Level AS PostHierarchyLevel
FROM 
    UserPostAnalytics up
LEFT JOIN 
    RecentPosts rp ON up.PostRank = 1
LEFT JOIN 
    RecursivePostHierarchy rh ON rh.Id = rp.Id
WHERE 
    up.TotalPosts > 0
ORDER BY 
    up.TotalViews DESC, 
    up.DisplayName;