
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVoteCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 AND 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserRankings AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        SUM(rp.Score) AS TotalScore,
        COUNT(rp.PostId) AS PostCount,
        SUM(rp.CommentCount) AS TotalComments
    FROM 
        Users u
    LEFT JOIN 
        RankedPosts rp ON u.Id = rp.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        Reputation,
        TotalScore,
        PostCount,
        TotalComments,
        RANK() OVER (ORDER BY TotalScore DESC, Reputation DESC) AS UserRank
    FROM 
        UserRankings
    WHERE 
        TotalScore > 0
)

SELECT 
    tu.UserId,
    tu.DisplayName,
    tu.Reputation,
    tu.TotalScore,
    tu.PostCount,
    tu.TotalComments,
    b.MenuItem AS Badge,
    CASE WHEN b.Class = 1 THEN 'Gold' 
         WHEN b.Class = 2 THEN 'Silver' 
         WHEN b.Class = 3 THEN 'Bronze' END AS BadgeClass
FROM 
    TopUsers tu
LEFT JOIN 
    Badges b ON tu.UserId = b.UserId
WHERE 
    tu.UserRank <= 10
ORDER BY 
    tu.UserRank;
