WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.LastActivityDate,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, u.DisplayName
),
TopPosts AS (
    SELECT 
        r.* 
    FROM 
        RankedPosts r 
    WHERE 
        r.Rank <= 10
),
TagCounts AS (
    SELECT 
        t.TagName,
        COUNT(pt.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts pt ON pt.Tags LIKE CONCAT('%<', t.TagName, '>%')
    GROUP BY 
        t.TagName
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Body,
    tp.OwnerDisplayName,
    tp.CreationDate,
    tp.LastActivityDate,
    tp.CommentCount,
    tp.VoteCount,
    array_agg(tc.TagName) AS Tags,
    MAX(tg.PostCount) AS MaxTagUsage
FROM 
    TopPosts tp
LEFT JOIN 
    TagCounts tc ON true
LEFT JOIN 
    (SELECT DISTINCT t.TagName, COUNT(p.Id) AS PostCount 
     FROM Tags t JOIN Posts p ON p.Tags LIKE CONCAT('%<', t.TagName, '>%')
     GROUP BY t.TagName) tg ON true
GROUP BY 
    tp.PostId, tp.Title, tp.Body, tp.OwnerDisplayName, tp.CreationDate, tp.LastActivityDate, tp.CommentCount, tp.VoteCount
ORDER BY 
    tp.LastActivityDate DESC;