WITH RecursivePostHierarchy AS (
    SELECT 
        Id,
        Title,
        ParentId,
        CreationDate,
        OwnerUserId,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.OwnerUserId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.Id
),
UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(vt.VoteTypeId = 2) AS TotalUpvotes,  
        SUM(vt.VoteTypeId = 3) AS TotalDownvotes, 
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY COUNT(DISTINCT p.Id) DESC) AS Rank
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes vt ON p.Id = vt.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
ClosedPostReasons AS (
    SELECT 
        ph.PostId,
        MAX(ph.CreationDate) AS LastClosedDate,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.Comment END) AS CloseReason
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10
    GROUP BY 
        ph.PostId
)
SELECT 
    rph.Title AS QuestionTitle,
    rph.CreationDate AS QuestionDate,
    up.DisplayName AS Owner,
    us.PostCount,
    us.TotalUpvotes,
    us.TotalDownvotes,
    cpr.CloseReason,
    cpr.LastClosedDate,
    rph.Level AS QuestionLevel,
    CASE 
        WHEN up.Rank = 1 THEN 'Top User'
        ELSE 'Regular User'
    END AS UserStatus
FROM 
    RecursivePostHierarchy rph
LEFT JOIN 
    UserPostStats us ON rph.OwnerUserId = us.UserId
LEFT JOIN 
    ClosedPostReasons cpr ON rph.Id = cpr.PostId
JOIN 
    Users up ON rph.OwnerUserId = up.Id
WHERE 
    rph.Level <= 1  
    AND (us.TotalUpvotes IS NOT NULL OR us.TotalDownvotes IS NOT NULL)
ORDER BY 
    rph.CreationDate DESC
LIMIT 100;