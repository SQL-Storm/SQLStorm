WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
)
SELECT 
    u.Id AS UserId,
    u.DisplayName,
    u.Reputation,
    COUNT(DISTINCT p.Id) AS QuestionsPosted,
    COUNT(DISTINCT a.Id) AS AnswersPosted,
    SUM(COALESCE(v.Score, 0)) AS TotalVotes,
    STRING_AGG(DISTINCT t.TagName, ', ') AS TagsUsed,
    CASE 
        WHEN AVG(COALESCE(p.Score, 0)) > 10 THEN 'High' 
        WHEN AVG(COALESCE(p.Score, 0)) BETWEEN 1 AND 10 THEN 'Medium'
        ELSE 'Low'
    END AS AveragePostScore
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1  
LEFT JOIN 
    Posts a ON a.AcceptedAnswerId = p.Id  
LEFT JOIN 
    Votes v ON v.PostId = p.Id  
LEFT JOIN 
    LATERAL (
        SELECT 
            DISTINCT unnest(string_to_array(p.Tags, '><')) AS TagName
    ) t ON TRUE  
LEFT JOIN 
    RecursivePostHierarchy r ON r.PostId = p.Id  
WHERE 
    u.Reputation > 1000  
GROUP BY 
    u.Id, u.DisplayName, u.Reputation
HAVING 
    COUNT(DISTINCT p.Id) > 5  
ORDER BY 
    TotalVotes DESC, AveragePostScore ASC;