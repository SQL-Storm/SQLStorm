WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        u.DisplayName AS Author,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Author,
        CreationDate,
        Score
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
),
PostDetails AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.Author,
        tp.CreationDate,
        tp.Score,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COALESCE(SUM(pl.LinkTypeId = 3), 0) AS DuplicateLinks
    FROM 
        TopPosts tp
    LEFT JOIN 
        Comments c ON tp.PostId = c.PostId
    LEFT JOIN 
        Votes v ON tp.PostId = v.PostId
    LEFT JOIN 
        PostLinks pl ON tp.PostId = pl.PostId
    GROUP BY 
        tp.PostId, tp.Title, tp.Author, tp.CreationDate, tp.Score
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN p.OwnerUserId = u.Id THEN p.ViewCount ELSE 0 END) AS TotalViews
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
FinalResults AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.Author,
        pd.CreationDate,
        pd.Score,
        pd.CommentCount,
        pd.UpVotes,
        pd.DownVotes,
        ua.DisplayName AS UserWithMostBadges,
        ua.BadgeCount
    FROM 
        PostDetails pd
    CROSS JOIN 
        (SELECT 
            UserId, DisplayName, BadgeCount 
         FROM 
            UserActivity 
         ORDER BY 
            BadgeCount DESC 
         LIMIT 1) ua
)
SELECT 
    *,
    CASE 
        WHEN UpVotes > DownVotes THEN 'More UpVotes'
        WHEN UpVotes < DownVotes THEN 'More DownVotes'
        ELSE 'Equal Votes'
    END AS VoteComparison,
    CASE 
        WHEN CommentCount = 0 THEN 'No Comments'
        ELSE 'Has Comments'
    END AS CommentStatus
FROM 
    FinalResults
ORDER BY 
    Score DESC;