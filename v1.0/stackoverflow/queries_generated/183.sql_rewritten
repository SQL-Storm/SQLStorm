WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(DISTINCT c.Id) OVER (PARTITION BY p.Id) AS TotalComments,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
        AND p.Score > 0
),
UserBadgeCounts AS (
    SELECT 
        b.UserId,
        COUNT(*) AS TotalBadges
    FROM 
        Badges b
    WHERE 
        b.Class = 1
    GROUP BY 
        b.UserId
),
HighScoringUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(ub.TotalBadges, 0) AS GoldBadges
    FROM 
        Users u
    LEFT JOIN 
        UserBadgeCounts ub ON u.Id = ub.UserId
    WHERE 
        u.Reputation > 1000
)
SELECT 
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.TotalComments,
    u.DisplayName,
    u.GoldBadges
FROM 
    RankedPosts rp
JOIN 
    HighScoringUsers u ON rp.OwnerUserId = u.UserId
WHERE 
    rp.Rank <= 5
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY
UNION ALL
SELECT 
    'No High Scoring Users' AS Title,
    NULL AS CreationDate,
    0 AS Score,
    0 AS ViewCount,
    0 AS TotalComments,
    u.DisplayName,
    u.GoldBadges
FROM 
    HighScoringUsers u
WHERE 
    NOT EXISTS (
        SELECT 1
        FROM RankedPosts rp WHERE rp.OwnerUserId = u.UserId
    )
ORDER BY 
    DisplayName;