WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.PostTypeId,
        p.ParentId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL  
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.PostTypeId,
        p.ParentId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostVoteStats AS (
    SELECT 
        PostId,
        COUNT(CASE WHEN VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN VoteTypeId = 3 THEN 1 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
PostHistoryAggregation AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 END) AS CloseReopenCount,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (24) THEN 1 END) AS SuggestedEditCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
PostsWithTags AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        STRING_AGG(t.TagName, ', ') FILTER (WHERE t.TagName IS NOT NULL) AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        unnest(string_to_array(p.Tags, '><')) AS tag ON tag IS NOT NULL
    LEFT JOIN 
        Tags t ON t.TagName = tag
    GROUP BY 
        p.Id
)
SELECT 
    rph.PostId AS RootPostId,
    rph.Title AS RootPostTitle,
    rph.OwnerUserId,
    rph.CreationDate AS RootPostCreationDate,
    rph.Level,
    pws.PostId AS RelatedPostId,
    pws.Title AS RelatedPostTitle,
    COALESCE(pvs.UpVotes, 0) AS UpVotes,
    COALESCE(pvs.DownVotes, 0) AS DownVotes,
    COALESCE(pha.CloseReopenCount, 0) AS CloseReopenCount,
    COALESCE(pha.SuggestedEditCount, 0) AS SuggestedEditCount,
    pws.Tags AS RelatedPostTags
FROM 
    RecursivePostHierarchy rph
LEFT JOIN 
    PostsWithTags pws ON pws.PostId = rph.PostId
LEFT JOIN 
    PostVoteStats pvs ON pvs.PostId = rph.PostId
LEFT JOIN 
    PostHistoryAggregation pha ON pha.PostId = rph.PostId
ORDER BY 
    rph.Level, rph.CreationDate DESC;