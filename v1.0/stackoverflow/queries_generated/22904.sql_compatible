
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= '2023-01-01'
),
PostActivity AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        CASE 
            WHEN rp.Score > 100 THEN 'Highly Active'
            WHEN rp.UpVotes > rp.DownVotes THEN 'Positive'
            ELSE 'Needs Attention'
        END AS ActivityStatus,
        (SELECT COUNT(*) FROM PostHistory ph WHERE ph.PostId = rp.PostId AND ph.PostHistoryTypeId IN (10, 11)) AS CloseReopenCount
    FROM 
        RankedPosts rp
),
UserBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeList
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
ExtensivePostInfo AS (
    SELECT 
        pa.PostId,
        pa.Title,
        pa.CreationDate,
        pa.Score,
        pa.ViewCount,
        pa.CommentCount,
        pa.UpVotes,
        pa.DownVotes,
        pa.ActivityStatus,
        pa.CloseReopenCount,
        ub.BadgeList,
        CASE 
            WHEN pa.CloseReopenCount > 0 THEN 'Closed/Reopened'
            ELSE 'Open'
        END AS ClosureStatus
    FROM 
        PostActivity pa
    LEFT JOIN 
        UserBadges ub ON ub.UserId = pa.PostId
)
SELECT 
    epi.PostId,
    epi.Title,
    epi.CreationDate,
    epi.Score,
    epi.ViewCount,
    epi.CommentCount,
    epi.UpVotes,
    epi.DownVotes,
    epi.ActivityStatus,
    epi.ClosureStatus,
    CASE 
        WHEN epi.BadgeList IS NULL THEN 'No badges earned'
        ELSE epi.BadgeList
    END AS Badges
FROM 
    ExtensivePostInfo epi
WHERE 
    epi.ViewCount > 50
    AND epi.CreationDate < TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days'
ORDER BY 
    epi.Score DESC, epi.ViewCount DESC;
