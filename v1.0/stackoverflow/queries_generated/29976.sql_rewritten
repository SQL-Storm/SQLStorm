WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        u.DisplayName AS Owner,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,  
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes,  
        RANK() OVER (ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank 
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId 
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, u.DisplayName
), AggregatedTags AS (
    SELECT 
        p.Id,
        STRING_AGG(t.TagName, ', ') AS AllTags
    FROM 
        Posts p
    JOIN 
        Unnest(string_to_array(p.Tags, '><')) AS tag ON TRUE
    JOIN 
        Tags t ON t.TagName = tag
    GROUP BY 
        p.Id
), FinalReport AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.Owner,
        rp.CreationDate,
        rp.Score,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        at.AllTags 
    FROM 
        RankedPosts rp
    JOIN 
        AggregatedTags at ON rp.PostId = at.Id
)
SELECT 
    fr.*,
    CASE 
        WHEN fr.Score >= 100 THEN 'High Score'
        WHEN fr.Score BETWEEN 50 AND 99 THEN 'Moderate Score'
        ELSE 'Low Score'
    END AS ScoreCategory
FROM 
    FinalReport fr
WHERE 
    fr.CommentCount > 10
ORDER BY 
    fr.PostRank
LIMIT 10;