WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.AnswerCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 AND 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
),
PostTags AS (
    SELECT 
        rp.PostId,
        STRING_AGG(trim(t.TagName), ', ') AS Tags
    FROM 
        RankedPosts rp
    JOIN 
        Posts p ON rp.PostId = p.Id
    JOIN 
        Tags t ON t.Id IN (SELECT unnest(string_to_array(trim(both '{}' FROM p.Tags), ', '))::int)
    GROUP BY 
        rp.PostId
),
PostHistoryInfo AS (
    SELECT 
        p.Id AS PostId,
        MAX(CASE WHEN ph.PostHistoryTypeId = 4 THEN ph.CreationDate END) AS LastTitleEdit,
        MAX(CASE WHEN ph.PostHistoryTypeId = 5 THEN ph.CreationDate END) AS LastBodyEdit,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS ClosedDate
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON ph.PostId = p.Id
    GROUP BY 
        p.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.AnswerCount,
    rp.OwnerDisplayName,
    pt.Tags,
    phi.LastTitleEdit,
    phi.LastBodyEdit,
    phi.ClosedDate,
    COALESCE(ph.LastTitleEdit, 'Never') AS LastEditStatus,
    COALESCE(CASE 
        WHEN phi.ClosedDate IS NOT NULL THEN 'Closed' 
        ELSE 'Open' END, 'Open') AS PostStatus
FROM 
    RankedPosts rp
JOIN 
    PostTags pt ON rp.PostId = pt.PostId
JOIN 
    PostHistoryInfo phi ON rp.PostId = phi.PostId
WHERE 
    rp.Rank <= 5 
ORDER BY 
    rp.CreationDate DESC
LIMIT 50;