WITH RecursiveTagHierarchy AS (
    SELECT Id, TagName, 1 AS Depth
    FROM Tags
    WHERE IsModeratorOnly = 0

    UNION ALL

    SELECT t.Id, t.TagName, r.Depth + 1
    FROM Tags t
    INNER JOIN RecursiveTagHierarchy r ON t.ExcerptPostId = r.Id
),
PostVoteSummary AS (
    SELECT 
        p.Id AS PostId,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId IN (2, 4)) AS Upvotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId IN (3, 10)) AS Downvotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 5) AS Favorites
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY p.Id
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM Users u
    WHERE u.Reputation > 0
),
LatestPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM Posts p
    JOIN Users u ON p.OwnerUserId = u.Id
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
MaxVotes AS (
    SELECT 
        PostId,
        MAX(Upvotes - Downvotes) AS MaxScore
    FROM PostVoteSummary
    GROUP BY PostId
)

SELECT
    t.TagName,
    COUNT(DISTINCT lp.Id) AS PostCount,
    AVG(lps.ViewCount) AS AvgViewCount,
    AVG(u.Reputation) AS AvgUserReputation
FROM RecursiveTagHierarchy t
JOIN Posts p ON p.Tags LIKE '%' || t.TagName || '%'
JOIN LatestPosts lp ON lp.Id = p.Id
JOIN Users u ON lp.OwnerUserId = u.Id
JOIN PostVoteSummary lps ON lp.Id = lps.PostId
LEFT JOIN UserReputation ur ON u.Id = ur.UserId
LEFT JOIN MaxVotes mv ON lp.Id = mv.PostId
WHERE 
    (lp.Score > 0 OR mv.MaxScore > 0) AND
    lp.rn = 1
GROUP BY t.TagName
HAVING COUNT(DISTINCT lp.Id) > 5
ORDER BY AvgViewCount DESC;