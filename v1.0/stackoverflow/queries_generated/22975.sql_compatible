
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank,
        JSON_AGG(DISTINCT t.TagName) AS TagList
    FROM 
        Posts p
    LEFT JOIN 
        Tags t ON t.Id = ANY (STRING_TO_ARRAY(p.Tags, ',')::text[])::int[]
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN (v.VoteTypeId = 2) THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN (v.VoteTypeId = 3) THEN 1 ELSE 0 END) AS DownVotes,
        SUM(CASE WHEN u.Location IS NULL THEN 1 ELSE 0 END) AS LocationNullCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    GROUP BY 
        u.Id, u.Reputation
),
PostHistoryStats AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS EditCount,
        COUNT(DISTINCT ph.UserId) AS EditorsCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (4, 5, 6) 
    GROUP BY 
        ph.PostId
)
SELECT 
    up.UserId,
    up.Reputation,
    up.PostCount,
    up.UpVotes,
    up.DownVotes,
    r.PostId,
    r.Title,
    r.CreationDate,
    r.Score,
    phs.EditCount,
    phs.EditorsCount,
    r.TagList,
    CASE 
        WHEN up.LocationNullCount > 0 THEN 'Location NULL!'
        ELSE 'Location Provided'
    END AS LocationStatus,
    FIRST_VALUE(r.Score) OVER (PARTITION BY up.UserId ORDER BY r.CreationDate DESC) AS LatestPostScore
FROM 
    UserStats up
LEFT JOIN 
    RankedPosts r ON r.PostId IN (SELECT DISTINCT p.Id FROM Posts p WHERE p.OwnerUserId = up.UserId)
LEFT JOIN 
    PostHistoryStats phs ON phs.PostId = r.PostId
WHERE 
    up.Reputation > 1000
    AND r.Rank <= 3
    AND r.Score IS NOT NULL
    AND NOT EXISTS (
        SELECT 1
        FROM Posts p2
        WHERE p2.OwnerUserId = up.UserId 
          AND p2.CreationDate < r.CreationDate 
          AND p2.Score < r.Score
    )
ORDER BY 
    up.Reputation DESC,
    r.CreationDate DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
