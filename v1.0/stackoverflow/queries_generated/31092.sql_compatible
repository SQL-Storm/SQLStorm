
WITH RecursiveTagHierarchy AS (
    SELECT
        Id,
        TagName,
        Count,
        CAST(TagName AS VARCHAR) AS FullPath
    FROM Tags
    WHERE Count > 0
    UNION ALL
    SELECT
        t.Id,
        t.TagName,
        t.Count,
        CAST(CONCAT(r.FullPath, ' > ', t.TagName) AS VARCHAR)
    FROM Tags t
    INNER JOIN RecursiveTagHierarchy r ON t.WikiPostId = r.Id
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS TotalBadges,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName
),
PopularPosts AS (
    SELECT
        p.Id,
        p.Title,
        p.OwnerDisplayName,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM Posts p
    WHERE p.Score > 0
)
SELECT 
    u.DisplayName AS UserName,
    ub.TotalBadges,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    p.Title AS PopularPostTitle,
    p.Score AS PostScore,
    p.ViewCount AS PostViewCount,
    CONCAT('Tag hierarchy: ', STRING_AGG(tt.FullPath, ' | ')) AS TagHierarchy
FROM Users u
INNER JOIN UserBadges ub ON u.Id = ub.UserId
LEFT JOIN PopularPosts p ON u.Id = p.OwnerUserId AND p.Rank = 1
LEFT JOIN RecursiveTagHierarchy tt ON tt.Id = ANY(STRING_TO_ARRAY(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><')::TEXT[])
WHERE u.Reputation > 500
GROUP BY 
    u.DisplayName,
    ub.TotalBadges,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    p.Title,
    p.Score,
    p.ViewCount
ORDER BY 
    ub.TotalBadges DESC,
    PostScore DESC;
