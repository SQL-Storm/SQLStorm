WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        p.AnswerCount,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore
    FROM 
        Posts p
    WHERE
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(p.Id) > 10
),
RecentActivity AS (
    SELECT 
        u.DisplayName,
        COUNT(c.Id) AS CommentCount,
        SUM(b.Class = 1) AS GoldBadges
    FROM 
        Users u
    LEFT JOIN 
        Comments c ON u.Id = c.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
    GROUP BY 
        u.DisplayName
),
PostClosureStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        ph.CreationDate AS ClosureDate,
        ph.Comment AS CloseReason
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId 
    WHERE 
        ph.PostHistoryTypeId = 10
),
FinalStats AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.ViewCount,
        rp.AnswerCount,
        pt.CloseReason,
        rt.TagName,
        ra.DisplayName,
        ra.CommentCount,
        ra.GoldBadges
    FROM 
        RankedPosts rp
    LEFT JOIN 
        PostClosureStats pt ON rp.PostId = pt.PostId
    LEFT JOIN 
        PopularTags rt ON rt.PostCount > 5
    LEFT JOIN 
        RecentActivity ra ON ra.DisplayName IS NOT NULL
)
SELECT 
    *,
    COALESCE(GREATEST(ViewCount, AnswerCount), 0) AS EngagementScore
FROM 
    FinalStats
WHERE 
    RankScore <= 10
ORDER BY 
    EngagementScore DESC
LIMIT 50;