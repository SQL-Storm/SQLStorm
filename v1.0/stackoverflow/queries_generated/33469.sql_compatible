
WITH RecursivePostChain AS (
    SELECT Id, Title, OwnerUserId, Score, ParentId, CreationDate, 1 AS Level
    FROM Posts
    WHERE ParentId IS NULL
    
    UNION ALL
    
    SELECT p.Id, p.Title, p.OwnerUserId, p.Score, p.ParentId, p.CreationDate, rpc.Level + 1
    FROM Posts p
    INNER JOIN RecursivePostChain rpc ON p.ParentId = rpc.Id
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(CASE WHEN p.PostTypeId = 1 THEN 1 END) AS QuestionsAsked,
        COUNT(CASE WHEN p.PostTypeId = 2 THEN 1 END) AS AnswersGiven,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY MAX(p.CreationDate) DESC) AS rn
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    GROUP BY u.Id, u.DisplayName
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS CloseDate,
        ph.Comment AS CloseReason,
        p.Title
    FROM PostHistory ph
    JOIN Posts p ON ph.PostId = p.Id
    WHERE ph.PostHistoryTypeId = 10 
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes,
        COUNT(c.Id) AS CommentCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN LATERAL STRING_TO_ARRAY(p.Tags, ',') AS tag_array ON TRUE
    LEFT JOIN Tags t ON t.TagName = TRIM(BOTH '"' FROM tag_array)
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score
),
FinalResults AS (
    SELECT 
        ua.UserId,
        ua.DisplayName,
        ua.QuestionsAsked,
        ua.AnswersGiven,
        ua.TotalScore,
        ps.PostId,
        ps.Title AS PostTitle,
        ps.CreationDate AS PostCreationDate,
        ps.Score AS PostScore,
        ps.Upvotes,
        ps.Downvotes,
        ps.CommentCount,
        COALESCE(cp.CloseDate, 'No Close Date') AS CloseDate,
        COALESCE(cp.CloseReason, 'Not Closed') AS CloseReason,
        rpc.Level AS ThreadDepth
    FROM UserActivity ua
    LEFT JOIN PostStatistics ps ON ua.UserId = ps.OwnerUserId
    LEFT JOIN ClosedPosts cp ON ps.PostId = cp.PostId
    LEFT JOIN RecursivePostChain rpc ON ps.PostId = rpc.Id
    WHERE ua.QuestionsAsked > 0 
)
SELECT *
FROM FinalResults
ORDER BY TotalScore DESC, DisplayName ASC;
