WITH RecursiveUserPosts AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS PostCount,
        SUM(p.Score) AS TotalScore,
        MAX(p.CreationDate) AS LastPostDate
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    GROUP BY u.Id, u.DisplayName
),
RankedUsers AS (
    SELECT 
        UserId, 
        DisplayName, 
        PostCount,
        TotalScore,
        LastPostDate,
        RANK() OVER (ORDER BY TotalScore DESC) AS ScoreRank
    FROM RecursiveUserPosts
),
RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.Score,
        COUNT(c.Id) AS CommentCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY p.Id
),
PostStats AS (
    SELECT 
        p.PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.Score,
        p.CommentCount,
        COALESCE(b.Name, 'No Badge') AS UserBadge,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM RecentPosts p
    LEFT JOIN Badges b ON p.OwnerUserId = b.UserId
    WHERE b.Date = (
        SELECT MAX(b2.Date)
        FROM Badges b2
        WHERE b2.UserId = p.OwnerUserId
    )
)
SELECT 
    u.DisplayName AS User,
    u.Reputation,
    r.UserPostRank,
    ps.Title AS RecentPostTitle,
    ps.CreationDate AS PostDate,
    ps.Score AS PostScore,
    ps.CommentCount AS PostComments,
    r.ScoreRank AS GlobalScoreRank,
    ps.UserBadge
FROM RankedUsers r
JOIN Users u ON r.UserId = u.Id
LEFT JOIN PostStats ps ON u.Id = ps.OwnerUserId
WHERE r.ScoreRank <= 10
ORDER BY r.ScoreRank, ps.CreationDate DESC;