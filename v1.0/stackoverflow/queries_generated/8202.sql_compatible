
WITH PostScore AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COUNT(co.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments co ON co.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount
),
UserScore AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount,
        SUM(ps.UpVotes) AS TotalUpVotes,
        SUM(ps.DownVotes) AS TotalDownVotes
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        PostScore ps ON ps.PostId = p.Id
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        Reputation,
        BadgeCount,
        TotalUpVotes,
        TotalDownVotes,
        ROW_NUMBER() OVER (ORDER BY Reputation DESC, TotalUpVotes DESC) AS UserRank
    FROM 
        UserScore
)
SELECT 
    tu.UserId,
    tu.DisplayName,
    tu.Reputation,
    tu.BadgeCount,
    tu.TotalUpVotes,
    tu.TotalDownVotes,
    COUNT(tg.TagName) AS TagCount,
    STRING_AGG(DISTINCT tg.TagName, ', ') AS Tags
FROM 
    TopUsers tu
LEFT JOIN 
    Posts p ON p.OwnerUserId = tu.UserId
LEFT JOIN 
    LATERAL UNNEST(string_to_array(p.Tags, ',')) AS tg(TagName) ON p.Tags IS NOT NULL
WHERE 
    tu.UserRank <= 10
GROUP BY 
    tu.UserId, tu.DisplayName, tu.Reputation, tu.BadgeCount, tu.TotalUpVotes, tu.TotalDownVotes
ORDER BY 
    tu.UserRank;
