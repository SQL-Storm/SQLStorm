
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER(PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        ARRAY_AGG(DISTINCT t.TagName) AS TagsArray
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        LATERAL (SELECT unnest(string_to_array(p.Tags, '>')) AS TagName) t ON TRUE
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id,
        p.Title,
        p.Score,
        p.CreationDate,
        p.PostTypeId
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        MIN(ph.CreationDate) AS FirstChangeDate,
        COUNT(*) FILTER (WHERE ph.PostHistoryTypeId = 10) AS CloseCount,
        COUNT(*) FILTER (WHERE ph.PostHistoryTypeId = 12) AS DeleteCount
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.CreationDate,
    rp.Rank,
    phs.FirstChangeDate,
    phs.CloseCount,
    phs.DeleteCount,
    CASE 
        WHEN phs.CloseCount > 0 THEN 'Closed'
        WHEN phs.DeleteCount > 0 THEN 'Deleted'
        ELSE 'Active'
    END AS PostStatus,
    CASE 
        WHEN rp.CommentCount = 0 THEN 'No Comments Yet'
        ELSE 'Has Comments'
    END AS CommentStatus,
    CASE 
        WHEN rp.TagsArray IS NULL THEN 'No Tags'
        ELSE ARRAY_LENGTH(rp.TagsArray)
    END AS TagCount
FROM 
    RankedPosts rp
LEFT JOIN 
    PostHistorySummary phs ON rp.PostId = phs.PostId
WHERE 
    rp.Rank <= 5
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate ASC
LIMIT 100;
