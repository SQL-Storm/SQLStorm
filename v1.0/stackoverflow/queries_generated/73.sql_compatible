
WITH UserVoteStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(v.Id) AS TotalVotes,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        DENSE_RANK() OVER (ORDER BY COUNT(v.Id) DESC) AS VoteRank
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        AVG(COALESCE(p.Score, 0)) AS AverageScore,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT b.UserId) AS BadgeCount,
        COUNT(DISTINCT pl.RelatedPostId) AS RelatedPosts
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    LEFT JOIN 
        PostLinks pl ON p.Id = pl.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id
)
SELECT 
    u.Id AS UserId,
    u.DisplayName,
    ups.TotalVotes,
    ups.UpVotes,
    ups.DownVotes,
    ps.AverageScore,
    ps.CommentCount,
    ps.BadgeCount,
    ps.RelatedPosts,
    CASE 
        WHEN ups.VoteRank <= 10 THEN 'Top User' 
        ELSE 'Regular User' 
    END AS UserCategory,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    UserVoteStats ups
JOIN 
    Users u ON ups.UserId = u.Id
JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::text[])
JOIN 
    PostStats ps ON p.Id = ps.PostId
GROUP BY 
    u.Id, u.DisplayName, ups.TotalVotes, ups.UpVotes, ups.DownVotes, ps.AverageScore, ps.CommentCount, ps.BadgeCount, ps.RelatedPosts, ups.VoteRank
ORDER BY 
    ups.TotalVotes DESC 
LIMIT 50;
