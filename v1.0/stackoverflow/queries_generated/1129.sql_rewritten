WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate, 
        p.Score, 
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 AND 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR'
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS TotalBadges,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS EditDate,
        ph.UserDisplayName,
        ph.Comment
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (4, 5, 12) 
),
AggregatedData AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.RankScore,
        ub.TotalBadges,
        ub.HighestBadgeClass,
        COALESCE(phd.EditDate, 'No Edits') AS LastEditDate,
        COALESCE(phd.UserDisplayName, 'No Edits') AS LastEditor,
        COALESCE(phd.Comment, 'N/A') AS LastEditComment
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges ub ON rp.PostId = ub.UserId
    LEFT JOIN 
        PostHistoryDetails phd ON rp.PostId = phd.PostId
)
SELECT 
    DISTINCT 
    postId AS "Post Identifier",
    Title AS "Post Title",
    CreationDate AS "Date Created",
    Score AS "Post Score",
    ViewCount AS "Total Views",
    RankScore AS "Score Rank",
    TotalBadges AS "Number of Badges",
    CASE 
        WHEN HighestBadgeClass IS NULL THEN 'No Badge'
        WHEN HighestBadgeClass = 1 THEN 'Gold'
        WHEN HighestBadgeClass = 2 THEN 'Silver'
        WHEN HighestBadgeClass = 3 THEN 'Bronze'
        ELSE 'Unknown'
    END AS "Highest Badge",
    LastEditDate AS "Last Edit Date",
    LastEditor AS "Last Edited By",
    LastEditComment AS "Last Edit Comment"
FROM 
    AggregatedData
WHERE 
    (Score > 10 OR ViewCount > 100) AND 
    (LastEditDate IS NOT NULL OR LastEditComment IS NOT NULL)
ORDER BY 
    Score DESC, ViewCount DESC;