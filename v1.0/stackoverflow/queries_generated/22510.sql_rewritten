WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.AnswerCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year')
        AND p.ViewCount IS NOT NULL
),
PostWithComments AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.AnswerCount,
        rp.Score,
        COALESCE(c.CommentCount, 0) AS CommentCount
    FROM 
        RankedPosts rp
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount 
        FROM 
            Comments 
        GROUP BY 
            PostId
    ) c ON rp.PostId = c.PostId
    WHERE 
        rp.rn = 1
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(pt.PostId) AS TagCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::int[])
    JOIN 
        PostWithComments pwc ON p.Id = pwc.PostId
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(pt.PostId) > 5
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
)
SELECT 
    u.DisplayName,
    u.Reputation,
    pt.Title,
    pt.CreationDate,
    pt.Score,
    pt.CommentCount,
    tt.TagName
FROM 
    UserReputation u
JOIN 
    PostWithComments pt ON u.UserId = pt.OwnerUserId
LEFT JOIN 
    PopularTags tt ON pt.PostId IN (SELECT PostId FROM PostLinks WHERE RelatedPostId = pt.PostId)
WHERE 
    u.Reputation BETWEEN 1000 AND 5000
    AND pt.Score > (SELECT AVG(Score) FROM Posts)
ORDER BY 
    pt.Score DESC, u.Reputation DESC
LIMIT 50;