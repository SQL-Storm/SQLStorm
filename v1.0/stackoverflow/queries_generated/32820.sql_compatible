
WITH RecursiveTagCTE AS (
    SELECT Id, TagName, Count, 1 AS Level
    FROM Tags
    WHERE Count > 1000
    UNION ALL
    SELECT t.Id, t.TagName, t.Count, rt.Level + 1
    FROM Tags t
    JOIN RecursiveTagCTE rt ON t.Id = rt.Id
    WHERE rt.Level < 5
),
UserStats AS (
    SELECT 
        u.Id AS UserId, 
        u.DisplayName, 
        u.Reputation, 
        u.CreationDate, 
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotesTotal,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotesTotal,
        DENSE_RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY u.Id, u.DisplayName, u.Reputation, u.CreationDate
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(SUM(CASE WHEN c.Id IS NOT NULL THEN 1 ELSE 0 END), 0) AS TotalComments,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS TotalUpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS TotalDownVotes
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= DATE_SUB(CAST('2024-10-01' AS DATE), INTERVAL 1 YEAR)
    GROUP BY p.Id, p.Title, p.CreationDate
),
PostHistoryStats AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS EditCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId IN (4, 5, 6)
    GROUP BY ph.PostId
)
SELECT 
    u.UserId,
    u.DisplayName,
    u.Reputation,
    ts.TagName AS PopularTag,
    ps.Title AS RecentPost,
    ps.TotalComments,
    ps.TotalUpVotes,
    ps.TotalDownVotes,
    phs.EditCount,
    phs.LastEditDate
FROM UserStats u
INNER JOIN Posts ps ON u.UserId = ps.OwnerUserId
INNER JOIN RecursiveTagCTE ts ON ts.Id = (SELECT t.Id FROM Tags t WHERE t.Count = (SELECT MAX(Count) FROM Tags) LIMIT 1)
LEFT JOIN PostHistoryStats phs ON ps.Id = phs.PostId
WHERE u.ReputationRank <= 10
ORDER BY u.Reputation DESC, ps.CreationDate DESC
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;
