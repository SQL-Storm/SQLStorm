
WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.ViewCount,
        COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY P.PostTypeId ORDER BY P.ViewCount DESC) AS Rank
    FROM 
        Posts P
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    WHERE 
        P.ViewCount IS NOT NULL
    GROUP BY 
        P.Id, P.Title, P.CreationDate, P.ViewCount
),
PostWithDetails AS (
    SELECT 
        RP.PostId,
        RP.Title,
        RP.CreationDate,
        RP.ViewCount,
        RP.UpVotes,
        RP.DownVotes,
        COALESCE(U.DisplayName, 'Anonymous') AS OwnerName,
        (SELECT STRING_AGG(T.TagName, ', ') 
         FROM Tags T 
         WHERE T.Id IN (SELECT UNNEST(string_to_array(P.Tags, ', '))) 
        ) AS TagsList,
        CASE 
            WHEN P.ClosedDate IS NOT NULL THEN 'Closed'
            ELSE 'Open'
        END AS Status
    FROM 
        RankedPosts RP
    LEFT JOIN 
        Posts P ON RP.PostId = P.Id
    LEFT JOIN 
        Users U ON P.OwnerUserId = U.Id
    WHERE 
        RP.Rank <= 10
),
AggregateStats AS (
    SELECT 
        COALESCE(AVG(UpVotes), 0) AS AvgUpVotes,
        COALESCE(AVG(DownVotes), 0) AS AvgDownVotes,
        COUNT(CASE WHEN Status = 'Closed' THEN 1 END) AS ClosedPostCount,
        COUNT(CASE WHEN Status = 'Open' THEN 1 END) AS OpenPostCount
    FROM 
        PostWithDetails
)
SELECT 
    P.Title,
    P.ViewCount,
    P.UpVotes,
    P.DownVotes,
    P.TagsList,
    P.OwnerName,
    P.Status,
    A.AvgUpVotes,
    A.AvgDownVotes,
    A.ClosedPostCount,
    A.OpenPostCount
FROM 
    PostWithDetails P, AggregateStats A
WHERE 
    P.ViewCount > A.AvgUpVotes + 5 AND
    (P.UpVotes IS NULL OR P.UpVotes > 10 OR P.DownVotes IS NULL OR P.DownVotes < 3)
ORDER BY 
    P.ViewCount DESC;
