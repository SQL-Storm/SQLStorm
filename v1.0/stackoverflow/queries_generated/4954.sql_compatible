
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 AND p.Score > 10
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(SUM(b.Class), 0) AS TotalBadges,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.CommentCount,
    ur.UserId,
    ur.Reputation,
    ur.TotalBadges,
    CASE 
        WHEN ur.Reputation > 1000 THEN 'High Reputation'
        WHEN ur.Reputation BETWEEN 500 AND 1000 THEN 'Moderate Reputation'
        ELSE 'Low Reputation'
    END AS ReputationCategory
FROM 
    RankedPosts rp
INNER JOIN 
    UserReputation ur ON rp.PostId = (SELECT AcceptedAnswerId FROM Posts WHERE Id = rp.PostId)
WHERE 
    rp.UserPostRank = 1 AND ur.TotalBadges > 0
ORDER BY 
    rp.Score DESC, ur.Reputation DESC
LIMIT 50
UNION ALL
SELECT 
    NULL AS PostId,
    'Total Users with Badges' AS Title,
    NULL AS CreationDate,
    NULL AS Score,
    COUNT(DISTINCT UserId) AS CommentCount,
    NULL AS UserId,
    NULL AS Reputation,
    NULL AS TotalBadges,
    NULL AS ReputationCategory
FROM 
    UserReputation
WHERE 
    TotalBadges > 0;
