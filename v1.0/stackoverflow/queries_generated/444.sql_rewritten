WITH PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        COALESCE((
            SELECT COUNT(*) 
            FROM Votes v 
            WHERE v.PostId = p.Id AND v.VoteTypeId = 2
        ), 0) AS UpVoteCount,
        COALESCE((
            SELECT COUNT(*) 
            FROM Votes v 
            WHERE v.PostId = p.Id AND v.VoteTypeId = 3
        ), 0) AS DownVoteCount,
        ROW_NUMBER() OVER(PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
),
FilteredPosts AS (
    SELECT 
        pd.*,
        (pd.UpVoteCount - pd.DownVoteCount) AS NetVotes,
        COUNT(c.Id) AS CommentCount
    FROM 
        PostDetails pd
    LEFT JOIN 
        Comments c ON c.PostId = pd.PostId
    GROUP BY 
        pd.PostId, pd.Title, pd.Score, pd.ViewCount, pd.CreationDate, pd.Tags, pd.OwnerDisplayName, pd.UpVoteCount, pd.DownVoteCount
)
SELECT 
    f.*,
    CASE 
        WHEN f.Rank = 1 THEN 'Top'
        WHEN f.NetVotes > 5 THEN 'Popular'
        ELSE 'Regular'
    END AS PostCategory
FROM 
    FilteredPosts f
WHERE 
    f.NetVotes IS NOT NULL 
    AND f.CommentCount > 0
ORDER BY 
    f.NetVotes DESC, f.CreationDate DESC
LIMIT 10;