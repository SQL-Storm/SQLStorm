
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) DESC) AS VoteRank,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        UNNEST(string_to_array(p.Tags, ', ')) AS tag ON TRUE
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.PostTypeId
),

FilteredPosts AS (
    SELECT 
        rp.*,
        CASE 
            WHEN rp.VoteRank <= 5 THEN 'Top Post'
            WHEN rp.VoteRank <= 10 THEN 'Moderate Post'
            ELSE 'Low Engagement' 
        END AS EngagementLevel,
        CASE 
            WHEN rp.ViewCount IS NULL OR rp.ViewCount = 0 THEN 'No Views' 
            ELSE CAST(rp.ViewCount AS VARCHAR) || ' Views' 
        END AS ViewCountDisplay
    FROM 
        RankedPosts rp
    WHERE 
        rp.Tags IS NOT NULL
)

SELECT 
    fp.PostId,
    fp.Title,
    fp.ViewCountDisplay,
    fp.UpVotes,
    fp.DownVotes,
    fp.EngagementLevel,
    COALESCE(b.Name, 'No Badge') AS UserBadge,
    COUNT(DISTINCT c.Id) AS CommentCount,
    (SELECT COUNT(*) FROM PostHistory ph WHERE ph.PostId = fp.PostId AND ph.PostHistoryTypeId IN (10, 11)) AS CloseReopenCount
FROM 
    FilteredPosts fp
LEFT JOIN 
    Badges b ON fp.PostId = b.UserId AND b.Class = 1
LEFT JOIN 
    Comments c ON c.PostId = fp.PostId
GROUP BY 
    fp.PostId, fp.Title, fp.ViewCountDisplay, fp.UpVotes, fp.DownVotes, fp.EngagementLevel, b.Name
HAVING 
    COUNT(c.Id) > 0 OR (fp.UpVotes > 10 AND fp.DownVotes < 3)
ORDER BY 
    fp.EngagementLevel DESC, fp.ViewCount DESC;
