WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL
  
    UNION ALL
  
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        rph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.Id
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(v.BountyAmount) AS TotalBounty,
        COUNT(v.Id) AS VoteCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id
),
PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(a.AcceptedAnswerCount, 0) AS AcceptedAnswerCount
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments
        GROUP BY 
            PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT 
            ParentId,
            COUNT(*) AS AcceptedAnswerCount
        FROM 
            Posts
        WHERE 
            AcceptedAnswerId IS NOT NULL
        GROUP BY 
            ParentId
    ) a ON p.Id = a.ParentId
)
SELECT 
    rph.Title AS QuestionTitle,
    up.DisplayName AS UserDisplayName,
    up.TotalBounty,
    up.VoteCount,
    pm.Score,
    pm.ViewCount,
    pm.CommentCount,
    pm.AcceptedAnswerCount,
    rph.Level
FROM 
    RecursivePostHierarchy rph
JOIN 
    Posts p ON rph.Id = p.Id
JOIN 
    UserReputation up ON p.OwnerUserId = up.UserId
JOIN 
    PostMetrics pm ON p.Id = pm.PostId
WHERE 
    pm.ViewCount > 100 AND 
    (pm.Score > 0 OR (pm.CommentCount > 5 AND pm.AcceptedAnswerCount > 0))
ORDER BY 
    rph.Level, 
    pm.Score DESC;