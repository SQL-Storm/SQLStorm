
WITH RankedPosts AS (
    SELECT
        p.Id,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY COUNT(c.Id) DESC) AS Rank,
        COALESCE(u.DisplayName, 'Anonymous') AS OwnerDisplayName
    FROM
        Posts p
    LEFT JOIN
        Comments c ON p.Id = c.PostId
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    LEFT JOIN
        Users u ON p.OwnerUserId = u.Id
    WHERE
        p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 year'
    GROUP BY
        p.Id, p.Title, p.CreationDate, p.OwnerUserId, u.DisplayName
),
TopContributors AS (
    SELECT 
        OwnerUserId,
        SUM(CommentCount) AS TotalComments,
        SUM(UpVotes) AS TotalUpVotes,
        SUM(DownVotes) AS TotalDownVotes
    FROM
        RankedPosts
    GROUP BY
        OwnerUserId
    HAVING 
        SUM(CommentCount) > 5
),
PostsWithBadges AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CreationDate,
        rp.OwnerDisplayName,
        COALESCE(b.Name, 'No Badge') AS BadgeName
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Badges b ON rp.OwnerUserId = b.UserId AND b.Class = 1
    WHERE 
        rp.Rank <= 10
)
SELECT
    pwb.Title,
    pwb.OwnerDisplayName,
    pwb.BadgeName,
    tc.TotalComments,
    tc.TotalUpVotes,
    tc.TotalDownVotes,
    CASE 
        WHEN tc.TotalUpVotes > tc.TotalDownVotes THEN 'More Positive'
        WHEN tc.TotalUpVotes < tc.TotalDownVotes THEN 'More Negative'
        ELSE 'Neutral'
    END AS VoteSentiment
FROM
    PostsWithBadges pwb
JOIN
    TopContributors tc ON pwb.OwnerDisplayName = tc.OwnerUserId
ORDER BY
    tc.TotalComments DESC,
    pwb.Title;
