
WITH UserBadges AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        COUNT(DISTINCT P.Id) AS PostsCount
    FROM Users U
    LEFT JOIN Badges B ON U.Id = B.UserId
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    GROUP BY U.Id
), 
PostDetails AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        P.AnswerCount,
        COALESCE(PH.CloseDate, 'No Close Date') AS CloseDetails,
        ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS UserPostRank,
        (SELECT COUNT(*) FROM Votes V WHERE V.PostId = P.Id AND V.VoteTypeId = 2) AS UpvoteCount
    FROM Posts P
    LEFT JOIN PostHistory PH ON P.Id = PH.PostId AND PH.PostHistoryTypeId IN (10, 11) 
    WHERE P.CreationDate >= DATE '2024-10-01' - INTERVAL '90 days'
), 
PopularPosts AS (
    SELECT 
        PD.PostId,
        PD.Title,
        PD.CreationDate,
        PD.Score,
        PD.ViewCount,
        PD.AnswerCount,
        PD.CloseDetails,
        PD.UpvoteCount,
        UAB.UserId,
        UAB.BadgeCount,
        UAB.GoldBadges,
        UAB.SilverBadges,
        UAB.PostsCount
    FROM PostDetails PD
    JOIN UserBadges UAB ON PD.PostId IN (
        SELECT P.Id
        FROM Posts P
        WHERE P.OwnerUserId = UAB.UserId
        ORDER BY P.Score DESC
        LIMIT 5
    )
    WHERE PD.UserPostRank <= 3
), 
AggregatedData AS (
    SELECT 
        PP.UserId,
        AVG(PP.UpvoteCount) AS AvgUpvotes,
        SUM(PP.Score) AS TotalScore,
        COUNT(PP.PostId) AS PostNumbers
    FROM PopularPosts PP
    GROUP BY PP.UserId
)
SELECT 
    U.Id AS UserId,
    U.DisplayName,
    U.Reputation,
    AD.AvgUpvotes,
    AD.TotalScore,
    AD.PostNumbers,
    UAB.GoldBadges,
    UAB.SilverBadges,
    CASE 
        WHEN AD.PostNumbers > 0 THEN ROUND(AD.TotalScore / AD.PostNumbers, 2)
        ELSE 0 
    END AS AvgScorePerPost,
    CASE 
        WHEN U.LastAccessDate < DATE '2024-10-01' - INTERVAL '30 days' THEN 'Inactive'
        ELSE 'Active'
    END AS UserActivityStatus
FROM Users U
LEFT JOIN UserBadges UAB ON U.Id = UAB.UserId
LEFT JOIN AggregatedData AD ON U.Id = AD.UserId
WHERE U.Reputation >= 100 
ORDER BY AvgScorePerPost DESC NULLS LAST, UserActivityStatus;
