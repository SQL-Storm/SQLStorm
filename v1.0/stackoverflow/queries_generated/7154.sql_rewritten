WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.OwnerUserId, 
        p.CreationDate, 
        p.Score, 
        p.ViewCount, 
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
TopUsers AS (
    SELECT 
        u.Id AS UserId, 
        u.DisplayName, 
        COUNT(*) AS PostCount, 
        SUM(u.UpVotes) AS TotalUpVotes
    FROM 
        Users u
    JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
    HAVING 
        COUNT(*) > 10 
),
UserBadges AS (
    SELECT 
        u.Id AS UserId, 
        b.Name AS BadgeName, 
        b.Class
    FROM 
        Users u
    JOIN 
        Badges b ON u.Id = b.UserId
),
PostStatistics AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        COALESCE(ub.BadgeCount, 0) AS BadgeCount,
        COALESCE(ub.TotalUpVotes, 0) AS UserUpVotes
    FROM 
        RankedPosts rp
    LEFT JOIN (
        SELECT 
            u.Id AS UserId, 
            COUNT(b.Id) AS BadgeCount,
            SUM(u.UpVotes) AS TotalUpVotes
        FROM 
            Users u
        LEFT JOIN 
            UserBadges ub ON u.Id = ub.UserId
        GROUP BY 
            u.Id
    ) ub ON rp.OwnerUserId = ub.UserId
)
SELECT 
    ps.PostId, 
    ps.Title, 
    ps.Score, 
    ps.ViewCount, 
    tu.DisplayName AS OwnerDisplayName, 
    ps.BadgeCount,
    ps.UserUpVotes
FROM 
    PostStatistics ps
JOIN 
    TopUsers tu ON ps.OwnerUserId = tu.UserId
WHERE 
    ps.Rank <= 5
ORDER BY 
    ps.ViewCount DESC, 
    ps.Score DESC;