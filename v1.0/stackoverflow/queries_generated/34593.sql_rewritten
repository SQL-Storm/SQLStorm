WITH RecursivePostCTE AS (
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.Score,
        p.AcceptedAnswerId,
        1 AS PostLevel
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p2.Id,
        p2.Title,
        p2.OwnerUserId,
        p2.CreationDate,
        p2.Score,
        p2.AcceptedAnswerId,
        pp.PostLevel + 1 
    FROM 
        Posts p2
    INNER JOIN 
        RecursivePostCTE pp ON p2.ParentId = pp.Id
)
SELECT 
    u.DisplayName AS UserName,
    COUNT(DISTINCT p.Id) AS TotalQuestions,
    SUM(CASE WHEN p.Score > 10 THEN 1 ELSE 0 END) AS HighScoringQuestions,
    AVG(COALESCE(p.Score, 0)) AS AverageScore,
    COUNT(DISTINCT b.Id) AS TotalBadges,
    STRING_AGG(DISTINCT COALESCE(b.Name, 'No Badge'), ', ') AS BadgesList,
    MAX(pp.CreationDate) AS MostRecentPostDate,
    MIN(pp.CreationDate) AS EarliestPostDate
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    Badges b ON u.Id = b.UserId
LEFT JOIN 
    RecursivePostCTE pp ON p.Id = pp.Id
WHERE 
    u.Reputation > 1000
GROUP BY 
    u.DisplayName
HAVING 
    COUNT(DISTINCT p.Id) > 5
ORDER BY 
    AverageScore DESC;