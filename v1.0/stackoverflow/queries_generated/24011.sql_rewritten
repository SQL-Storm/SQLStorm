WITH UserReputation AS (
    SELECT 
        Id,
        Reputation,
        RANK() OVER (ORDER BY Reputation DESC) AS ReputationRank
    FROM 
        Users
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    WHERE 
        u.Reputation > 500
    GROUP BY 
        u.Id
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        AVG(v.VoteTypeId) AS AvgVoteType,  
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagsList
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostLinks pl ON p.Id = pl.PostId
    LEFT JOIN 
        Tags t ON pl.RelatedPostId = t.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        COALESCE(p.Score, 0) < 0 
        AND (p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days' OR p.ViewCount IS NULL)
    GROUP BY 
        p.Id
),
RankedPosts AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CommentCount,
        ps.AvgVoteType,
        ps.TagsList,
        DENSE_RANK() OVER (ORDER BY ps.CommentCount DESC) AS CommentRank
    FROM 
        PostStatistics ps
)
SELECT 
    u.UserId,
    u.DisplayName,
    u.Reputation,
    tp.PostCount,
    tp.QuestionCount,
    tp.AnswerCount,
    rp.Title,
    rp.CommentCount,
    rp.TagsList,
    CASE 
        WHEN rp.CommentRank < 5 THEN 'Top Posts'
        ELSE 'Other Posts' 
    END AS PostCategory,
    COALESCE(NULLIF(u.Location, ''), 'Not Specified') AS UserLocation
FROM 
    TopUsers tp
JOIN 
    RankedPosts rp ON tp.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId)
WHERE 
    rp.CommentCount > 2 
    OR tp.ReputationRank < 10
ORDER BY 
    tp.Reputation DESC, 
    rp.CommentCount DESC
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;