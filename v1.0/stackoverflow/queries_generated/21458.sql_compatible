
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Ranking,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id, p.Title, p.Score, p.ViewCount, p.CreationDate
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Score,
        ViewCount,
        CreationDate,
        CommentCount
    FROM 
        RankedPosts
    WHERE 
        Ranking <= 3
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        pht.Name AS HistoryType,
        MAX(ph.CreationDate) AS LastUpdate,
        COUNT(*) AS HistoryCount,
        STRING_AGG(CASE WHEN ph.Comment IS NOT NULL THEN ph.Comment ELSE '[No comment]' END, '; ') AS Comments
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId, pht.Name
),
VotesSummary AS (
    SELECT 
        v.PostId,
        SUM(CASE WHEN vt.Name = 'UpMod' THEN 1 ELSE 0 END) AS TotalUpVotes,
        SUM(CASE WHEN vt.Name = 'DownMod' THEN 1 ELSE 0 END) AS TotalDownVotes
    FROM 
        Votes v
    JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id
    GROUP BY 
        v.PostId
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Score,
    tp.ViewCount,
    tp.CreationDate,
    tp.CommentCount,
    COALESCE(phd.LastUpdate, 'No history') AS LastUpdate,
    COALESCE(phd.HistoryCount, 0) AS TotalHistoryEntries,
    COALESCE(vs.TotalUpVotes, 0) AS TotalUpVotes,
    COALESCE(vs.TotalDownVotes, 0) AS TotalDownVotes,
    CASE 
        WHEN tp.Score >= 10 THEN 'High Score'
        WHEN tp.Score BETWEEN 5 AND 9 THEN 'Medium Score'
        ELSE 'Low Score'
    END AS ScoreCategory,
    STRING_AGG(DISTINCT t.TagName, ', ') AS AssociatedTags
FROM 
    TopPosts tp
LEFT JOIN 
    PostHistoryDetails phd ON tp.PostId = phd.PostId
LEFT JOIN 
    VotesSummary vs ON tp.PostId = vs.PostId
LEFT JOIN 
    LATERAL (SELECT UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags)-2), '><'))::text) AS TagName 
              FROM Posts p WHERE p.Id = tp.PostId) AS t ON TRUE
GROUP BY 
    tp.PostId, tp.Title, tp.Score, tp.ViewCount, tp.CreationDate, 
    tp.CommentCount, phd.LastUpdate, phd.HistoryCount, 
    vs.TotalUpVotes, vs.TotalDownVotes
HAVING 
    (COALESCE(vs.TotalUpVotes, 0) - COALESCE(vs.TotalDownVotes, 0)) > 5
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC, tp.CreationDate ASC;
