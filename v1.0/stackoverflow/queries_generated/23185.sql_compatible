
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC, p.CreationDate DESC) AS PostRank,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        Posts p
    WHERE 
        p.Score > 0 AND 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
), 
UserData AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate AS UserCreationDate,
        (SELECT COUNT(*) FROM Badges b WHERE b.UserId = u.Id) AS BadgeCount,
        (SELECT SUM(p.Score) FROM Posts p WHERE p.OwnerUserId = u.Id) AS TotalPostScore
    FROM 
        Users u
    WHERE 
        u.Reputation > 1000
), 
PostActivity AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CommentCount,
        CASE 
            WHEN rp.Score >= 100 THEN 'High Score'
            WHEN rp.Score BETWEEN 50 AND 99 THEN 'Medium Score'
            ELSE 'Low Score'
        END AS ScoreCategory,
        ud.DisplayName AS PostOwner,
        ud.Reputation AS OwnerReputation,
        ud.BadgeCount
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserData ud ON rp.OwnerUserId = ud.UserId
    WHERE 
        rp.PostRank <= 5
)
SELECT 
    pa.PostId,
    pa.Title,
    pa.CommentCount,
    pa.ScoreCategory,
    pa.PostOwner,
    pa.OwnerReputation,
    pa.BadgeCount,
    COALESCE(pa.CommentCount, 0) AS EffectiveCommentCount,
    CASE 
        WHEN pa.BadgeCount > 5 THEN 'Veteran User'
        ELSE 'New or Lesser Known User'
    END AS UserStatus
FROM 
    PostActivity pa
LEFT JOIN 
    PostHistory ph ON pa.PostId = ph.PostId
WHERE 
    ph.CreationDate BETWEEN DATEADD(day, -30, '2024-10-01 12:34:56') AND '2024-10-01 12:34:56'
ORDER BY 
    pa.ScoreCategory DESC, 
    pa.CommentCount DESC
LIMIT 10;
