WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.Body,
        COALESCE(POSTS.OwnerDisplayName, 'Community User') AS OwnerDisplayName,
        COUNT(DISTINCT c.Id) AS CommentCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.ViewCount DESC) AS RN
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        UNNEST(string_to_array(p.Tags, '>')) AS t(TagName) ON true
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.Score, p.Body, p.OwnerDisplayName
    HAVING 
        COUNT(DISTINCT c.Id) > 5 
),
PostMetrics AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.OwnerDisplayName,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.PostId AND v.VoteTypeId = 2) AS Upvotes,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.PostId AND v.VoteTypeId = 3) AS Downvotes
    FROM 
        RankedPosts rp
)
SELECT 
    pm.PostId,
    pm.Title,
    pm.ViewCount,
    pm.Score,
    pm.OwnerDisplayName,
    pm.Upvotes,
    pm.Downvotes,
    (pm.Upvotes - pm.Downvotes) AS NetScore,
    rp.Tags
FROM 
    PostMetrics pm
JOIN 
    RankedPosts rp ON pm.PostId = rp.PostId
WHERE 
    pm.ViewCount > 100 
ORDER BY 
    NetScore DESC, pm.ViewCount DESC
LIMIT 10;