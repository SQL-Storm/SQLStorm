
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= '2024-10-01 12:34:56' - INTERVAL '1 year' 
        AND (p.PostTypeId IN (1, 2))
),
AggregatePostInfo AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.RankScore,
        rp.CommentCount,
        rp.Upvotes,
        rp.Downvotes,
        CASE 
            WHEN rp.ViewCount > 1000 THEN 'Highly Viewed'
            WHEN rp.ViewCount BETWEEN 500 AND 1000 THEN 'Moderately Viewed'
            ELSE 'Low View Count' 
        END AS ViewCategory
    FROM 
        RankedPosts rp
    WHERE 
        rp.RankScore <= 5
),
PostHistoryInfo AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name ORDER BY ph.CreationDate) AS HistoryTypes,
        MAX(ph.CreationDate) AS LastActivityDate
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
),
FinalReport AS (
    SELECT 
        api.PostId,
        api.Title,
        api.ViewCount,
        api.Score,
        api.RankScore,
        api.CommentCount,
        api.Upvotes,
        api.Downvotes,
        api.ViewCategory,
        phi.HistoryTypes,
        phi.LastActivityDate
    FROM 
        AggregatePostInfo api
    LEFT JOIN 
        PostHistoryInfo phi ON api.PostId = phi.PostId
)
SELECT 
    fr.PostId,
    fr.Title,
    fr.ViewCount,
    fr.Score,
    fr.RankScore,
    fr.CommentCount,
    fr.Upvotes,
    fr.Downvotes,
    fr.ViewCategory,
    COALESCE(fr.HistoryTypes, 'No History') AS HistoryTypes,
    COALESCE(fr.LastActivityDate, 'No Activity') AS LastActivityDate,
    CASE 
        WHEN fr.Upvotes > fr.Downvotes THEN 'Positive Engagement'
        WHEN fr.Upvotes < fr.Downvotes THEN 'Negative Engagement'
        ELSE 'Neutral Engagement' 
    END AS EngagementLevel
FROM 
    FinalReport fr
WHERE 
    fr.CommentCount > 5
ORDER BY 
    fr.Score DESC, fr.ViewCount DESC
LIMIT 10;
