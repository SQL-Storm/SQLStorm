
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.UserId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATE('2024-10-01') - INTERVAL '30 days'
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreationDate, p.UserId, p.PostTypeId
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.Rank,
        rp.CommentCount,
        rp.Upvotes,
        rp.Downvotes,
        CASE 
            WHEN COALESCE(rp.Upvotes, 0) - COALESCE(rp.Downvotes, 0) > 0 THEN 'Positive'
            WHEN COALESCE(rp.Upvotes, 0) - COALESCE(rp.Downvotes, 0) < 0 THEN 'Negative'
            ELSE 'Neutral'
        END AS VoteSentiment
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5
)
SELECT 
    tp.Title,
    tp.Score,
    tp.CommentCount,
    tp.VoteSentiment,
    COUNT(DISTINCT b.Id) AS UserBadges
FROM 
    TopPosts tp
LEFT JOIN 
    Badges b ON tp.UserId = b.UserId
WHERE 
    b.Class = 1 OR b.Class = 2 
GROUP BY 
    tp.Title, tp.Score, tp.CommentCount, tp.VoteSentiment
ORDER BY 
    tp.Score DESC, tp.CommentCount DESC
LIMIT 10
OFFSET 0;
