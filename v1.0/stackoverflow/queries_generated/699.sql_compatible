
WITH RankedPosts AS (
    SELECT p.Id, p.Title, p.ViewCount, p.CreationDate, p.Score,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS rn
    FROM Posts p
    WHERE p.PostTypeId = 1 AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
UserReputation AS (
    SELECT u.Id AS UserId, u.Reputation, COUNT(b.Id) AS BadgeCount
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.Reputation
),
PostVoteCounts AS (
    SELECT v.PostId, COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
           COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes
    FROM Votes v
    GROUP BY v.PostId
)
SELECT rp.Title, rp.ViewCount, ur.Reputation, ur.BadgeCount, 
       COALESCE(pvc.UpVotes, 0) AS UpVotes, 
       COALESCE(pvc.DownVotes, 0) AS DownVotes,
       CASE 
           WHEN rp.Score > 100 THEN 'High Score'
           WHEN rp.Score BETWEEN 50 AND 100 THEN 'Moderate Score'
           ELSE 'Low Score' 
       END AS ScoreCategory
FROM RankedPosts rp
JOIN UserReputation ur ON rp.OwnerUserId = ur.UserId
LEFT JOIN PostVoteCounts pvc ON rp.Id = pvc.PostId
WHERE rp.rn = 1
  AND ur.Reputation IS NOT NULL
  AND ur.BadgeCount > 0
ORDER BY rp.ViewCount DESC
LIMIT 10;
