
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY pt.Name ORDER BY p.Score DESC) AS rn,
        COUNT(*) OVER (PARTITION BY pt.Name) AS TotalPosts,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM Posts p
    JOIN PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN LATERAL (
        SELECT 
            SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2) AS TagList
    ) AS tag_extract ON TRUE
    LEFT JOIN Tags t ON t.Id IN (SELECT UNNEST(string_to_array(tag_extract.TagList, '>'))::int)
    WHERE p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, pt.Name
),
AvgVotes AS (
    SELECT 
        PostId,
        AVG(CASE WHEN VoteTypeId = 2 THEN 1 ELSE -1 END) AS AvgVote
    FROM Votes
    GROUP BY PostId
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS CloseCount
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId = 10 
    GROUP BY ph.PostId
)
SELECT 
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.Tags,
    COALESCE(av.AvgVote, 0) AS AvgVotes,
    COALESCE(cp.CloseCount, 0) AS CloseCount,
    CASE 
        WHEN rp.rn = 1 THEN 'Top Post'
        WHEN rp.TotalPosts < 5 THEN 'Low Activity'
        ELSE 'Regular Post' 
    END AS PostCategory
FROM RankedPosts rp
LEFT JOIN AvgVotes av ON rp.Id = av.PostId
LEFT JOIN ClosedPosts cp ON rp.Id = cp.PostId
WHERE (rp.Score > 10 OR rp.ViewCount > 100) 
      AND (cp.CloseCount IS NULL OR cp.CloseCount < 3)
ORDER BY rp.Score DESC, rp.ViewCount DESC;
