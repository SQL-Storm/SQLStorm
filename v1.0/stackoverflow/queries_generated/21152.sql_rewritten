WITH UserReputation AS (
    SELECT 
        U.Id AS UserId,
        U.Reputation,
        COUNT(DISTINCT P.Id) AS PostCount,
        SUM(COALESCE(V.BountyAmount, 0)) AS TotalBounty,
        RANK() OVER (ORDER BY U.Reputation DESC) AS ReputationRank
    FROM Users U
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN Votes V ON P.Id = V.PostId AND V.VoteTypeId IN (8, 9)  
    WHERE U.Reputation > 0
    GROUP BY U.Id, U.Reputation
),
PostComments AS (
    SELECT 
        C.PostId,
        COUNT(C.Id) AS CommentCount,
        STRING_AGG(C.UserDisplayName, ', ' ORDER BY C.CreationDate DESC) AS CommentAuthors
    FROM Comments C
    GROUP BY C.PostId
),
PostDetails AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        COALESCE(PC.CommentCount, 0) AS TotalComments,
        U.DisplayName AS PostOwner,
        U.Reputation AS OwnerReputation,
        POST_HIST.Comment AS LastEditComment
    FROM Posts P
    JOIN Users U ON P.OwnerUserId = U.Id
    LEFT JOIN PostComments PC ON P.Id = PC.PostId
    LEFT JOIN LATERAL (
        SELECT Comment 
        FROM PostHistory PH 
        WHERE PH.PostId = P.Id AND PH.PostHistoryTypeId IN (4, 5)  
        ORDER BY PH.CreationDate DESC 
        LIMIT 1
    ) POST_HIST ON TRUE
)
SELECT 
    PD.PostId,
    PD.Title,
    PD.PostOwner,
    PD.OwnerReputation,
    UR.ReputationRank,
    PD.TotalComments,
    UR.TotalBounty,
    CASE 
        WHEN PD.OwnerReputation IS NULL THEN 'Unknown User'
        WHEN PD.OwnerReputation > 1000 THEN 'Expert'
        WHEN PD.OwnerReputation BETWEEN 501 AND 1000 THEN 'Experienced'
        WHEN PD.OwnerReputation BETWEEN 100 AND 500 THEN 'Novice'
        ELSE 'Newbie'
    END AS ReputationCategory
FROM PostDetails PD
JOIN UserReputation UR ON PD.PostOwner = UR.UserId
WHERE PD.TotalComments > 0
AND PD.OwnerReputation IS NOT NULL
ORDER BY UR.ReputationRank DESC, PD.Title;