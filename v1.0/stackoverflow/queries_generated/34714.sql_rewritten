WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        1 as Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 2 

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    JOIN 
        RecursivePostHierarchy r ON p.Id = r.ParentId
),
TagStatistics AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews,
        AVG(COALESCE(p.Score, 0)) AS AverageScore
    FROM 
        Tags t 
    LEFT JOIN 
        Posts p ON p.Tags LIKE CONCAT('%', t.TagName, '%')
    GROUP BY 
        t.TagName
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS Badges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    ph.Title AS AnswerTitle,
    ph.Level AS AnswerLevel,
    ts.TagName,
    ts.PostCount,
    ts.TotalViews,
    ts.AverageScore,
    ub.DisplayName AS UserName,
    ub.BadgeCount,
    ub.Badges,
    COALESCE(COUNT(c.Id), 0) AS CommentCount
FROM 
    RecursivePostHierarchy ph
JOIN 
    Posts p ON ph.Id = p.Id
LEFT JOIN 
    Comments c ON c.PostId = p.Id
LEFT JOIN 
    TagStatistics ts ON p.Tags LIKE CONCAT('%', ts.TagName, '%')
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
WHERE 
    ph.Level <= 5 
GROUP BY 
    ph.Title, 
    ph.Level, 
    ts.TagName, 
    ts.PostCount, 
    ts.TotalViews, 
    ts.AverageScore, 
    ub.DisplayName, 
    ub.BadgeCount, 
    ub.Badges
ORDER BY 
    ts.TotalViews DESC, 
    CommentCount DESC;