
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY COUNT(c.Id) DESC, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.OwnerUserId, p.Title
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(rp.PostId) AS TotalPosts,
        SUM(rp.CommentCount) AS TotalComments,
        SUM(rp.UpVoteCount) AS TotalUpVotes,
        SUM(rp.DownVoteCount) AS TotalDownVotes
    FROM 
        Users u
    LEFT JOIN 
        RankedPosts rp ON u.Id = rp.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
)
SELECT 
    ur.UserId,
    ur.DisplayName,
    ur.Reputation,
    ur.TotalPosts,
    ur.TotalComments,
    ur.TotalUpVotes,
    ur.TotalDownVotes,
    CASE 
        WHEN ur.Reputation > 10000 THEN 'Legendary'
        WHEN ur.Reputation > 5000 THEN 'Experienced'
        WHEN ur.Reputation > 1000 THEN 'Novice'
        ELSE 'Beginner'
    END AS UserLevel
FROM 
    UserReputation ur
WHERE 
    ur.TotalPosts > 0
ORDER BY 
    ur.TotalUpVotes DESC, ur.Reputation DESC
FETCH FIRST 20 ROWS ONLY;
