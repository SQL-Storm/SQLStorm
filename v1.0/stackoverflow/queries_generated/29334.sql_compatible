
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY tag.tag_name ORDER BY p.ViewCount DESC) AS Rank,
        STRING_AGG(DISTINCT tag.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        (SELECT 
            post.Id, 
            post.Title, 
            post.Body, 
            post.OwnerUserId
         FROM 
            Posts post 
         WHERE 
            post.PostTypeId = 2) a ON p.Id = a.ParentId
    LEFT JOIN 
        (SELECT 
            unnest(string_to_array(substring(Tags, 2, length(Tags) - 2), '><')) AS tag_name, 
            Id 
         FROM 
            Posts) tag ON p.Id = tag.Id
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, u.DisplayName
),
PopularTags AS (
    SELECT 
        t.tag_name AS TagName,
        COUNT(tp.Id) AS PostCount
    FROM 
        (SELECT 
            unnest(string_to_array(substring(Tags, 2, length(Tags) - 2), '><')) AS tag_name, 
            Id
         FROM 
            Posts) t 
    JOIN 
        Posts tp ON t.Id = tp.Id
    WHERE 
        tp.PostTypeId = 1  
    GROUP BY 
        t.tag_name
    ORDER BY 
        PostCount DESC
    LIMIT 10  
)
SELECT 
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.OwnerDisplayName,
    rp.CommentCount,
    rp.AnswerCount,
    rp.Tags,
    pt.PostCount AS PopularTagCount
FROM 
    RankedPosts rp
JOIN 
    PopularTags pt ON rp.Tags LIKE CONCAT('%', pt.TagName, '%')
WHERE 
    rp.Rank <= 5  
ORDER BY 
    pt.PostCount DESC, 
    rp.ViewCount DESC;
