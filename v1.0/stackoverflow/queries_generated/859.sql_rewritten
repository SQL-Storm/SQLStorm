WITH PostWithTopComment AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        c.Text AS TopComment,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY c.Score DESC) AS CommentRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
HighlyRatedPosts AS (
    SELECT
        p.Id,
        p.Title,
        p.AcceptedAnswerId,
        COALESCE(a.Score, 0) AS AnswerScore,
        COUNT(v.Id) AS VoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.AcceptedAnswerId = a.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, a.Score
    HAVING 
        COUNT(v.Id) > 10 AND COALESCE(a.Score, 0) > 50
),
ClosedQuestions AS (
    SELECT 
        ph.PostId,
        MAX(ph.CreationDate) AS LastClosedDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10 
    GROUP BY 
        ph.PostId
)
SELECT 
    p.Title,
    p.Score,
    ptv.VoteCount,
    ct.TopComment,
    ck.LastClosedDate,
    CASE 
        WHEN ck.LastClosedDate IS NOT NULL THEN 'Closed'
        ELSE 'Open'
    END AS PostStatus
FROM 
    HighlyRatedPosts ptv
JOIN 
    PostWithTopComment ct ON ptv.Id = ct.PostId AND ct.CommentRank = 1
LEFT JOIN 
    ClosedQuestions ck ON ptv.Id = ck.PostId
WHERE 
    ct.TopComment IS NOT NULL
ORDER BY 
    ptv.VoteCount DESC, ptv.AnswerScore DESC
LIMIT 10;