
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        COUNT(c.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotesCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotesCount,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) - SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
    GROUP BY 
        p.Id, p.Title, p.PostTypeId, p.OwnerUserId, p.AcceptedAnswerId
),
RecentBadges AS (
    SELECT 
        u.Id AS UserId,
        B.Name AS BadgeName,
        COUNT(*) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges B ON u.Id = B.UserId
    WHERE 
        B.Date >= DATEADD(year, -1, '2024-10-01')
    GROUP BY 
        u.Id, B.Name
),
PostHistoryInfo AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes,
        COUNT(*) AS HistoryCount
    FROM 
        PostHistory ph
    LEFT JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    WHERE 
        ph.CreationDate >= DATEADD(year, -1, '2024-10-01')
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.PostTypeId,
    rp.Rank,
    rp.CommentCount,
    rp.UpVotesCount,
    rp.DownVotesCount,
    COALESCE(rb.BadgeName, 'No Badges') AS BadgeName,
    COALESCE(phi.HistoryTypes, 'No History') AS PostHistoryTypes,
    phi.HistoryCount
FROM 
    RankedPosts rp
LEFT JOIN 
    RecentBadges rb ON rp.OwnerUserId = rb.UserId
LEFT JOIN 
    PostHistoryInfo phi ON rp.PostId = phi.PostId
WHERE 
    rp.Rank <= 5 
ORDER BY 
    rp.OwnerUserId, rp.Rank;
