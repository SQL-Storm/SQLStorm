WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS UserRank,
        COUNT(c.Id) AS CommentCount,
        AVG(COALESCE(v.BountyAmount, 0)) AS AverageBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8 
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverBadges,
        COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    up.DisplayName,
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.CommentCount,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    CASE 
        WHEN rp.UserRank = 1 THEN 'Top Post'
        ELSE 'Regular Post'
    END AS PostStatus,
    COALESCE(rp.AverageBounty, 0) AS AvgBounty
FROM 
    RankedPosts rp
JOIN 
    Users up ON rp.PostOwnerId = up.Id
LEFT JOIN 
    UserBadges ub ON ub.UserId = up.Id
WHERE 
    (ub.GoldBadges + ub.SilverBadges + ub.BronzeBadges) > 0
    AND EXISTS (
        SELECT 1 
        FROM Votes v 
        WHERE v.PostId = rp.PostId 
        AND v.VoteTypeId IN (2, 3) 
        GROUP BY v.PostId 
        HAVING SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) > SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END)
    )
ORDER BY 
    rp.ViewCount DESC,
    rp.Score DESC;