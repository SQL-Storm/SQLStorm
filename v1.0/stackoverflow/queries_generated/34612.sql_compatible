
WITH RECURSIVE UserReputation AS (
    SELECT Id, Reputation, CreationDate, DisplayName, 
           CAST(NULL AS VARCHAR) AS ParentDisplayName, 
           1 AS Level
    FROM Users
    WHERE Reputation > 1000
    UNION ALL
    SELECT u.Id, u.Reputation, u.CreationDate, u.DisplayName,
           ur.DisplayName AS ParentDisplayName,
           ur.Level + 1
    FROM Users u
    JOIN UserReputation ur ON u.Reputation < ur.Reputation
    WHERE ur.Level < 5 
),
PostsWithComments AS (
    SELECT p.Id AS PostId, p.Title, p.Score, p.CreationDate, 
           COALESCE(c.CommentsCount, 0) AS CommentsCount,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank
    FROM Posts p
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentsCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
    WHERE p.CreationDate >= CURRENT_DATE - INTERVAL '60 DAY'
),
TopPosts AS (
    SELECT PostId, Title, Score, CreationDate, CommentsCount, OwnerUserId
    FROM PostsWithComments
    WHERE Rank <= 3
),
UserBadges AS (
    SELECT u.Id AS UserId, 
           STRING_AGG(b.Name, ', ') AS BadgeNames,
           COUNT(b.Id) AS BadgeCount
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
)
SELECT u.Id AS UserId, 
       u.DisplayName, 
       u.Reputation, 
       u.CreationDate,
       ur.ParentDisplayName,
       tp.Title AS TopPostTitle, 
       tp.Score,
       ub.BadgeNames, 
       ub.BadgeCount
FROM Users u
LEFT JOIN UserReputation ur ON u.Id = ur.Id
LEFT JOIN TopPosts tp ON u.Id = tp.OwnerUserId
LEFT JOIN UserBadges ub ON u.Id = ub.UserId
WHERE u.Reputation IS NOT NULL AND
      (ub.BadgeCount > 0 OR tp.Score > 10)
ORDER BY u.Reputation DESC, u.DisplayName ASC;
