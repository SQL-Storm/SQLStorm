
WITH TagStatistics AS (
    SELECT
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        STRING_AGG(DISTINCT COALESCE(p.Title, 'No Title')) AS RelatedPostTitles
    FROM
        Tags t
    JOIN
        Posts p ON t.Id = ANY(string_to_array(p.Tags, '><'))
    WHERE
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
    GROUP BY
        t.TagName
    HAVING
        COUNT(DISTINCT p.Id) > 5
),
UserBadges AS (
    SELECT
        u.Id AS UserId,
        COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM
        Users u
    LEFT JOIN
        Badges b ON u.Id = b.UserId 
    GROUP BY
        u.Id
),
PostMetrics AS (
    SELECT
        p.Id AS PostId,
        CASE 
            WHEN p.OwnerUserId IS NOT NULL THEN u.Reputation
            ELSE 0
        END AS AuthorReputation,
        COUNT(DISTINCT c.Id) AS CommentCount,
        MAX(h.CreationDate) AS LastEditedDate,
        STRING_AGG(h.UserDisplayName || ': ' || h.Comment, '; ') AS EditHistory
    FROM
        Posts p
    LEFT JOIN
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN
        Comments c ON p.Id = c.PostId
    LEFT JOIN
        PostHistory h ON p.Id = h.PostId
    WHERE
        p.PostTypeId = 1
    GROUP BY
        p.Id, p.OwnerUserId
)
SELECT
    ts.TagName,
    ts.PostCount,
    ts.TotalViews,
    ts.TotalScore,
    ts.RelatedPostTitles,
    ub.UserId,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    pm.PostId,
    pm.AuthorReputation,
    pm.CommentCount,
    pm.LastEditedDate,
    pm.EditHistory
FROM
    TagStatistics ts
JOIN
    UserBadges ub ON ub.UserId IN (
        SELECT
            p.OwnerUserId
        FROM
            Posts p
        JOIN
            Tags t ON t.Id = ANY(string_to_array(p.Tags, '><'))
    )
JOIN
    PostMetrics pm ON pm.PostId IN (
        SELECT
            p.Id
        FROM
            Posts p
        JOIN
            Tags t ON t.Id = ANY(string_to_array(p.Tags, '><'))
    )
ORDER BY
    ts.TotalScore DESC, ub.GoldBadges DESC, pm.CommentCount DESC;
