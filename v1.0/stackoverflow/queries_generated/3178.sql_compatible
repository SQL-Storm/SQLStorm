
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.TagCount,
        p.Score,
        COALESCE((SELECT COUNT(DISTINCT c.Id) 
                  FROM Comments c 
                  WHERE c.PostId = p.Id), 0) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        CommentCount
    FROM 
        RankedPosts
    WHERE 
        Rank <= 10
),
TagPostCounts AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT pt.PostId) AS PostCount
    FROM 
        Tags t
    LEFT JOIN 
        Posts pt ON pt.Tags LIKE CONCAT('%', t.TagName, '%')
    GROUP BY 
        t.TagName
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        MAX(ph.CreationDate) AS LastEditDate,
        STRING_AGG(DISTINCT CONCAT(ph.UserDisplayName, ' (', ph.PostHistoryTypeId, ')'), '; ') AS EditDetails
    FROM 
        PostHistory ph
    WHERE 
        ph.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 months'
    GROUP BY 
        ph.PostId
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.CreationDate,
    tp.Score,
    tp.CommentCount,
    COALESCE(tpc.PostCount, 0) AS RelatedTagCount,
    pF.FavoriteCount,
    ph.LastEditDate,
    ph.EditDetails
FROM 
    TopPosts tp
LEFT JOIN 
    TagPostCounts tpc ON tp.PostId IN (SELECT DISTINCT pt.Id FROM Posts pt WHERE pt.Tags LIKE CONCAT('%', tpc.TagName, '%'))
LEFT JOIN 
    (SELECT PostId, COUNT(*) AS FavoriteCount FROM Votes v WHERE v.VoteTypeId = 5 GROUP BY PostId) pF ON tp.PostId = pF.PostId
LEFT JOIN 
    PostHistoryDetails ph ON tp.PostId = ph.PostId
WHERE 
    tp.Score > (SELECT AVG(Score) FROM Posts WHERE CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year')
ORDER BY 
    tp.Score DESC, tp.CommentCount DESC;
