
WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        p.CreationDate,
        1 AS Depth
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.OwnerUserId,
        p.AcceptedAnswerId,
        p.CreationDate,
        r.Depth + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostCTE r ON p.ParentId = r.PostId
),
BadgesSummary AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Date) AS LastBadgeDate
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostsWithVoteCounts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        COUNT(p.Id) AS PostCount,
        COALESCE(SUM(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END), 0) AS AcceptedAnswers,
        COALESCE(SUM(CASE WHEN p.ViewCount > 1000 THEN 1 ELSE 0 END), 0) AS PopularPosts,
        MAX(p.LastActivityDate) AS LastPostActivity
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id
)
SELECT 
    u.DisplayName,
    u.Reputation,
    pst.PostCount,
    pst.AcceptedAnswers,
    pst.PopularPosts,
    b.BadgeCount,
    b.LastBadgeDate,
    COALESCE(r.Depth, 0) AS PostDepth,
    p.Title AS DeepPostTitle,
    p.CreationDate AS DeepPostCreationDate,
    pv.UpVotes,
    pv.DownVotes
FROM 
    Users u
LEFT JOIN 
    UserActivity pst ON u.Id = pst.UserId
LEFT JOIN 
    BadgesSummary b ON u.Id = b.UserId
LEFT JOIN 
    PostsWithVoteCounts pv ON pv.PostId = (
        SELECT p.Id 
        FROM Posts p 
        WHERE p.OwnerUserId = u.Id 
        ORDER BY p.CreationDate DESC 
        LIMIT 1
    ) 
LEFT JOIN 
    RecursivePostCTE r ON r.OwnerUserId = u.Id
LEFT JOIN 
    Posts p ON pv.PostId = p.Id
WHERE 
    u.Reputation > 1000
ORDER BY 
    pst.PostCount DESC, 
    b.BadgeCount DESC, 
    r.Depth DESC;
