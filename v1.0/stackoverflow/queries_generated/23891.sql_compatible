
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        u.DisplayName AS Author,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        COALESCE(NULLIF(p.AcceptedAnswerId, -1), 0) AS AcceptedAnswerExists
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= (CAST('2024-10-01' AS DATE) - INTERVAL '1 year') 
        AND u.Reputation IS NOT NULL
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, u.DisplayName, p.AcceptedAnswerId
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS ClosureCount,
        STRING_AGG(DISTINCT CASE WHEN ct.Name IS NOT NULL THEN ct.Name ELSE 'Unknown' END, ', ') AS CloseReasons
    FROM 
        PostHistory ph 
    LEFT JOIN 
        CloseReasonTypes ct ON CAST(ph.Comment AS INTEGER) = ct.Id 
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)  
    GROUP BY 
        ph.PostId
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(p.Tags, '><')) AS t(TagName) 
    GROUP BY 
        p.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.Author,
    rp.CommentCount,
    rp.PostRank,
    COALESCE(cp.ClosureCount, 0) AS ClosureCount,
    COALESCE(cp.CloseReasons, 'N/A') AS CloseReasons,
    pt.Tags,
    CASE 
        WHEN rp.AcceptedAnswerExists IS NOT NULL THEN 'Accepted Answer Exists' 
        ELSE 'No Accepted Answer' 
    END AS AnswerStatus
FROM 
    RankedPosts rp
LEFT JOIN 
    ClosedPosts cp ON rp.PostId = cp.PostId
LEFT JOIN 
    PostTags pt ON rp.PostId = pt.PostId
WHERE 
    (rp.CommentCount > 5 OR rp.Score >= 10) 
    AND (rp.PostRank <= 3 OR cp.ClosureCount > 1)
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate DESC
LIMIT 100;
