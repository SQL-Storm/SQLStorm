
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.ParentId,
        p.Score,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.ParentId,
        p.Score,
        rph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),
UserVoteSummary AS (
    SELECT 
        v.UserId,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS TotalUpvotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS TotalDownvotes
    FROM 
        Votes v
    GROUP BY 
        v.UserId
),
UserBadgeCount AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostAnalytics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        AVG(COALESCE(v.TotalUpvotes, 0) - COALESCE(v.TotalDownvotes, 0)) AS AverageVoteBalance,
        MAX(bc.BadgeCount) AS UserBadgeCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        UserVoteSummary v ON p.OwnerUserId = v.UserId
    LEFT JOIN 
        UserBadgeCount bc ON p.OwnerUserId = bc.UserId
    GROUP BY 
        p.Id, p.Title
)

SELECT 
    pha.PostId,
    pha.Title,
    ph.Score AS PostScore,
    pa.CommentCount,
    pa.TotalScore,
    pa.AverageVoteBalance,
    pa.UserBadgeCount,
    pht.Name AS PostHistoryType,
    COUNT(ph.Id) AS HistoryCount
FROM 
    Posts p
INNER JOIN 
    PostAnalytics pa ON p.Id = pa.PostId
LEFT JOIN 
    PostHistory ph ON p.Id = ph.PostId
LEFT JOIN 
    PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
LEFT JOIN 
    RecursivePostHierarchy pha ON p.Id = pha.PostId
WHERE 
    pa.TotalScore > 0 
    AND (pa.AverageVoteBalance IS NULL OR pa.AverageVoteBalance > 0)
GROUP BY 
    pha.PostId,
    pha.Title,
    ph.Score,
    pa.CommentCount,
    pa.TotalScore,
    pa.AverageVoteBalance,
    pa.UserBadgeCount,
    pht.Name
HAVING 
    COUNT(ph.Id) > 5
ORDER BY 
    pa.TotalScore DESC, 
    pa.AverageVoteBalance DESC;
