WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Body,
        p.ViewCount,
        p.Score,
        ARRAY_AGG(t.TagName) AS Tags,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Body, p.ViewCount, p.Score
),
PopularTags AS (
    SELECT 
        tag.TagName,
        COUNT(*) AS TagCount
    FROM 
        Posts p
    CROSS JOIN 
        LATERAL string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><') AS tag
    GROUP BY 
        tag.TagName
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.UpVotes,
    rp.DownVotes,
    rp.Tags,
    ut.UserId,
    ub.BadgeCount,
    pt.TagName AS PopularTag
FROM 
    RankedPosts rp
JOIN 
    Users ut ON ut.Id = rp.OwnerUserId
LEFT JOIN 
    UserBadges ub ON ub.UserId = ut.Id
LEFT JOIN 
    (SELECT TOP 5 TagName FROM PopularTags ORDER BY TagCount DESC) pt ON pt.TagName = ANY(rp.Tags)
WHERE 
    rp.Rank = 1 
ORDER BY 
    rp.ViewCount DESC
LIMIT 10;