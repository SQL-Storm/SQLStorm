WITH RecursivePostHierarchy AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ParentId,
        0 AS Level
    FROM 
        Posts P
    WHERE 
        P.ParentId IS NULL   

    UNION ALL

    SELECT 
        P.Id,
        P.Title,
        P.ParentId,
        RP.Level + 1
    FROM 
        Posts P
    INNER JOIN 
        RecursivePostHierarchy RP ON P.ParentId = RP.PostId
),
PostScoreSummary AS (
    SELECT 
        P.OwnerUserId,
        SUM(P.Score) AS TotalScore,
        COUNT(P.Id) AS PostCount,
        AVG(P.Score) AS AverageScore
    FROM 
        Posts P
    GROUP BY 
        P.OwnerUserId
),
UserBadgeSummary AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
),
PostMetrics AS (
    SELECT 
        P.Id,
        P.Title,
        P.OwnerUserId,
        COALESCE(PS.TotalScore, 0) AS UserTotalScore,
        COALESCE(PS.PostCount, 0) AS UserPostCount,
        COALESCE(UB.BadgeCount, 0) AS UserBadgeCount,
        COALESCE(UB.GoldBadges, 0) AS UserGoldBadges,
        COALESCE(UB.SilverBadges, 0) AS UserSilverBadges,
        COALESCE(UB.BronzeBadges, 0) AS UserBronzeBadges,
        COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpvoteCount,
        COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownvoteCount,
        COUNT(DISTINCT C.Id) AS CommentCount,
        COUNT(DISTINCT PH.Id) AS HistoryCount
    FROM 
        Posts P
    LEFT JOIN 
        PostScoreSummary PS ON P.OwnerUserId = PS.OwnerUserId
    LEFT JOIN 
        UserBadgeSummary UB ON P.OwnerUserId = UB.UserId
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    LEFT JOIN 
        Comments C ON P.Id = C.PostId
    LEFT JOIN 
        PostHistory PH ON P.Id = PH.PostId
    GROUP BY 
        P.Id, P.Title, P.OwnerUserId, PS.TotalScore, PS.PostCount, UB.BadgeCount, 
        UB.GoldBadges, UB.SilverBadges, UB.BronzeBadges
)
SELECT 
    PS.PostId,
    PS.Title,
    PS.UserTotalScore,
    PS.UserPostCount,
    PS.UserBadgeCount,
    PS.UserGoldBadges,
    PS.UserSilverBadges,
    PS.UserBronzeBadges,
    PS.UpvoteCount,
    PS.DownvoteCount,
    PS.CommentCount,
    PS.HistoryCount,
    H.Level AS PostLevel
FROM 
    PostMetrics PS
LEFT JOIN 
    RecursivePostHierarchy H ON PS.PostId = H.PostId
ORDER BY 
    PS.UserTotalScore DESC, 
    PS.UserPostCount DESC, 
    PS.CommentCount DESC;