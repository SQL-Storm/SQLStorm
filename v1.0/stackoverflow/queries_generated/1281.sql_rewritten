WITH UserReputation AS (
    SELECT
        Id AS UserId,
        DisplayName,
        Reputation,
        LastAccessDate,
        Rank() OVER (ORDER BY Reputation DESC) AS ReputationRank
    FROM
        Users
),
PopularPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(va.VoteTypeId = 2) AS UpVotes,
        SUM(va.VoteTypeId = 3) AS DownVotes,
        (SUM(va.VoteTypeId = 2) - SUM(va.VoteTypeId = 3)) AS Score
    FROM
        Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes va ON p.Id = va.PostId
    WHERE
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY
        p.Id
),
PostHistories AS (
    SELECT
        ph.PostId,
        STRING_AGG(DISTINCT pt.Name || ' (' || ph.CreationDate::DATE || ')', ', ') AS History,
        MAX(ph.CreationDate) AS LastChangeDate
    FROM
        PostHistory ph
    JOIN PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    GROUP BY
        ph.PostId
)
SELECT
    u.DisplayName,
    ur.Reputation,
    ur.ReputationRank,
    pp.PostId,
    pp.Title,
    pp.CommentCount,
    pp.UpVotes,
    pp.DownVotes,
    pp.Score,
    ph.History,
    ph.LastChangeDate
FROM
    UserReputation ur
JOIN Users u ON ur.UserId = u.Id
JOIN Posts p ON p.OwnerUserId = u.Id
JOIN PopularPosts pp ON p.Id = pp.PostId
LEFT JOIN PostHistories ph ON p.Id = ph.PostId
WHERE
    ur.Reputation > 1000
ORDER BY
    pp.Score DESC NULLS LAST,
    ur.ReputationRank
LIMIT 50;