
WITH UserReputation AS (
    SELECT 
        U.Id AS UserId, 
        U.DisplayName, 
        U.Reputation, 
        U.CreationDate,
        COUNT(DISTINCT P.Id) AS PostCount,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes
    FROM Users U
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    LEFT JOIN Votes V ON P.Id = V.PostId
    GROUP BY U.Id, U.DisplayName, U.Reputation, U.CreationDate
),
PostSummary AS (
    SELECT 
        P.Id AS PostId, 
        P.Title, 
        P.CreationDate, 
        U.DisplayName AS OwnerName, 
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount,
        COALESCE(MAX(Ph.CreationDate), DATE '1970-01-01') AS LastEditDate,
        DENSE_RANK() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS PostRank
    FROM Posts P
    LEFT JOIN Users U ON P.OwnerUserId = U.Id
    LEFT JOIN Comments C ON P.Id = C.PostId
    LEFT JOIN PostHistory Ph ON P.Id = Ph.PostId AND Ph.PostHistoryTypeId IN (4, 5, 6)
    GROUP BY P.Id, P.Title, P.CreationDate, U.DisplayName
)
SELECT 
    UR.UserId, 
    UR.DisplayName, 
    UR.Reputation, 
    PS.PostId, 
    PS.Title,
    PS.CreationDate AS PostCreationDate,
    PS.CommentCount,
    CASE 
        WHEN PS.PostRank = 1 THEN 'Latest Post'
        WHEN PS.PostRank <= 3 THEN 'Top 3 Posts'
        ELSE 'Older Post'
    END AS PostCategory,
    (UR.Upvotes - UR.Downvotes) AS NetVotes
FROM UserReputation UR
JOIN PostSummary PS ON UR.UserId = PS.OwnerName
WHERE UR.Reputation > 1000
ORDER BY UR.Reputation DESC, PS.PostCreationDate DESC
LIMIT 10;
