
WITH RecursivePostHierarchy AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        1 AS Level,
        p.CreationDate,
        p.OwnerUserId,
        p.ParentId,
        CAST(p.Title AS VARCHAR(300)) AS FullPath
    FROM
        Posts p
    WHERE
        p.ParentId IS NULL
    UNION ALL
    SELECT
        p.Id,
        p.Title,
        p.ViewCount,
        p.Score,
        r.Level + 1,
        p.CreationDate,
        p.OwnerUserId,
        p.ParentId,
        CAST(r.FullPath || ' > ' || p.Title AS VARCHAR(300)) AS FullPath
    FROM
        Posts p
    INNER JOIN
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostVoteStats AS (
    SELECT
        p.Id AS PostId,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes,
        COUNT(v.Id) AS TotalVotes
    FROM
        Posts p
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    GROUP BY
        p.Id
),
TopUsers AS (
    SELECT
        u.Id,
        u.DisplayName,
        SUM(p.ViewCount) AS TotalViews,
        SUM(COALESCE(b.Class, 0)) AS TotalBadges,
        ROW_NUMBER() OVER (ORDER BY SUM(p.ViewCount) DESC) AS UserRank
    FROM
        Users u
    LEFT JOIN
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN
        Badges b ON u.Id = b.UserId
    GROUP BY
        u.Id, u.DisplayName
),
RecentClosePosts AS (
    SELECT
        ph.PostId,
        p.Title,
        ph.CreationDate AS CloseDate,
        ph.Comment AS CloseReason
    FROM
        PostHistory ph
    INNER JOIN
        Posts p ON ph.PostId = p.Id
    WHERE
        ph.PostHistoryTypeId = 10
)
SELECT
    r.PostId,
    r.Title,
    r.ViewCount,
    r.Score,
    vs.UpVotes,
    vs.DownVotes,
    vs.TotalVotes,
    u.DisplayName AS Owner,
    tu.TotalViews,
    tu.TotalBadges,
    MAX(cp.CloseDate) AS LastClosedDate,
    STRING_AGG(DISTINCT cp.CloseReason, '; ') AS CloseReasons,
    r.FullPath
FROM
    RecursivePostHierarchy r
LEFT JOIN
    PostVoteStats vs ON r.PostId = vs.PostId
INNER JOIN
    Users u ON r.OwnerUserId = u.Id
LEFT JOIN
    TopUsers tu ON u.Id = tu.Id
LEFT JOIN
    RecentClosePosts cp ON r.PostId = cp.PostId
GROUP BY
    r.PostId, r.Title, r.ViewCount, r.Score, vs.UpVotes, vs.DownVotes, vs.TotalVotes, u.DisplayName, tu.TotalViews, tu.TotalBadges, r.FullPath
ORDER BY
    r.Score DESC, r.ViewCount DESC;
