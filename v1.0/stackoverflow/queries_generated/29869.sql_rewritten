WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        u.DisplayName AS Owner,
        p.CreationDate,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY p.Score DESC) AS rn,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS Upvotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS Downvotes
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, u.DisplayName, p.Title, p.Body, p.CreationDate, p.Tags
),

FilteredTags AS (
    SELECT 
        DISTINCT unnest(string_to_array(substring(Tags, 2, length(Tags)-2), '><')) AS Tag
    FROM 
        Posts
    WHERE 
        PostTypeId = 1
),

TagStats AS (
    SELECT 
        Tag,
        COUNT(*) AS TagCount
    FROM 
        FilteredTags
    GROUP BY 
        Tag
),

ActivePosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Owner,
        rp.CreationDate,
        rp.Tags,
        rp.Upvotes,
        rp.Downvotes,
        tt.TagCount
    FROM 
        RankedPosts rp
    JOIN 
        TagStats tt ON tt.Tag IN (SELECT unnest(string_to_array(rp.Tags, '><')))
    WHERE 
        rp.rn = 1  
)

SELECT 
    ap.PostId,
    ap.Title,
    ap.Owner,
    ap.CreationDate,
    ap.Upvotes,
    ap.Downvotes,
    ap.TagCount, 
    (ap.Upvotes - ap.Downvotes) AS NetScore
FROM 
    ActivePosts ap
ORDER BY 
    NetScore DESC, 
    ap.CreationDate DESC
LIMIT 10;