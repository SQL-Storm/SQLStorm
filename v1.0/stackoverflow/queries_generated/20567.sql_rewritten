WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        u.DisplayName AS Author,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year' AND 
        p.Score >= 0
),
ClosedPostHistories AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        ph.CreationDate AS ClosedDate,
        pr.Name AS CloseReason
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pr ON ph.PostHistoryTypeId = pr.Id
    WHERE 
        pr.Name = 'Post Closed'
),
PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
PostBadgeCounts AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.Author,
        pc.CommentCount,
        COALESCE(cb.BadgeCount, 0) AS AuthorBadgeCount,
        ch.ClosedDate,
        ch.CloseReason
    FROM 
        RankedPosts rp
    LEFT JOIN 
        PostComments pc ON rp.PostId = pc.PostId
    LEFT JOIN 
        ClosedPostHistories ch ON rp.PostId = ch.PostId
    LEFT JOIN 
        PostBadgeCounts cb ON rp.Author = cb.UserId 
    WHERE 
        rp.Rank <= 5
    ORDER BY 
        rp.Score DESC
)
SELECT 
    tp.Title,
    tp.Score,
    tp.Author,
    tp.CommentCount,
    tp.AuthorBadgeCount,
    tp.ClosedDate,
    COALESCE(tp.CloseReason, 'Active') AS CloseReasonStatus,
    CASE 
        WHEN tp.CloseReason IS NOT NULL THEN 'This post was closed.'
        ELSE 'This post is still open.'
    END AS PostStatus,
    ARRAY(SELECT STRING_AGG(Tags, ', ') 
          FROM unnest(string_to_array(substring((SELECT Tags FROM Posts WHERE Id = tp.PostId), 2, length((SELECT Tags FROM Posts WHERE Id = tp.PostId))-2), '><')) AS Tags)
    AS PostTags
FROM 
    TopPosts tp
ORDER BY 
    tp.Score DESC, tp.CommentCount DESC;