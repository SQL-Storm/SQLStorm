WITH RecursivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        p.PostTypeId,
        p.AcceptedAnswerId,
        p.AnswerCount,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId IN (1, 2)  
), 
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT b.Id) AS TotalBadges,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBountySpent,
        SUM(p.ViewCount) AS TotalViews,
        AVG(p.AnswerCount) AS AvgAnswersPerPost
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
ActivePostHistory AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.UserId,
        ph.Comment,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS HistoryRank
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11, 12) 
)
SELECT 
    ua.UserId,
    ua.DisplayName,
    ua.TotalPosts,
    ua.TotalBadges,
    ua.TotalBountySpent,
    ua.TotalViews,
    ua.AvgAnswersPerPost,
    rp.PostId,
    rp.Title,
    rp.CreationDate AS PostCreationDate,
    rp.PostTypeId,
    rp.AnswerCount,
    ph.PostHistoryTypeId,
    ph.CreationDate AS HistoryCreationDate,
    ph.Comment AS HistoryComment
FROM 
    UserActivity ua
JOIN 
    RecursivePosts rp ON ua.UserId = rp.OwnerUserId
LEFT JOIN 
    ActivePostHistory ph ON rp.PostId = ph.PostId AND ph.HistoryRank = 1  
WHERE 
    ua.TotalPosts > 5
ORDER BY 
    ua.TotalViews DESC, 
    rp.PostCreationDate DESC;