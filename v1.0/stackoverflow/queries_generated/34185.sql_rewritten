WITH RECURSIVE UserBadgeCounts AS (
    SELECT UserId, COUNT(Id) AS BadgeCount
    FROM Badges
    WHERE Date > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY UserId
),
RecentPosts AS (
    SELECT p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM Posts p
    WHERE p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
),
TopKActiveUsers AS (
    SELECT u.Id, u.DisplayName, u.Reputation, 
           COALESCE(ub.BadgeCount, 0) AS BadgeCount,
           COUNT(rp.Id) AS RecentPostCount
    FROM Users u
    LEFT JOIN UserBadgeCounts ub ON u.Id = ub.UserId
    LEFT JOIN RecentPosts rp ON u.Id = rp.OwnerUserId
    GROUP BY u.Id, u.DisplayName, u.Reputation, ub.BadgeCount
    HAVING COUNT(rp.Id) > 1
    ORDER BY Reputation DESC
    LIMIT 10
)
SELECT u.Id AS UserId, u.DisplayName, u.Reputation, u.BadgeCount, 
       SUM(COALESCE(v.VoteValue, 0)) AS TotalVotes,
       ARRAY_AGG(DISTINCT t.TagName) AS TagsUsed,
       COUNT(c.Id) AS CommentCount
FROM TopKActiveUsers u
LEFT JOIN (
    SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1
                             WHEN VoteTypeId = 3 THEN -1
                             ELSE 0 END) AS VoteValue
    FROM Votes
    GROUP BY PostId
) v ON v.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = u.Id)
LEFT JOIN Comments c ON c.UserId = u.Id
LEFT JOIN Posts p ON p.OwnerUserId = u.Id
LEFT JOIN LATERAL (
    SELECT UNNEST(STRING_TO_ARRAY(p.Tags, ',')) AS TagName
) t ON TRUE
GROUP BY u.Id, u.DisplayName, u.Reputation, u.BadgeCount
HAVING COUNT(c.Id) > 5
ORDER BY TotalVotes DESC, u.Reputation DESC;