WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank,
        COALESCE(c.UserDisplayName, 'Community User') AS OwnerDisplayName
    FROM 
        Posts p
    LEFT JOIN 
        Users c ON p.OwnerUserId = c.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.CreationDate,
        rp.OwnerDisplayName
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5
),
PostCommentStats AS (
    SELECT 
        PostId,
        COUNT(*) AS CommentCount,
        SUM(Score) AS TotalCommentScore
    FROM 
        Comments
    GROUP BY 
        PostId
),
PostHistoryInfo AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryActions
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.ViewCount,
    tp.Score,
    tp.CreationDate,
    tp.OwnerDisplayName,
    COALESCE(pcs.CommentCount, 0) AS CommentCount,
    COALESCE(pcs.TotalCommentScore, 0) AS TotalCommentScore,
    COALESCE(phi.HistoryActions, 'No History') AS HistoryActions
FROM 
    TopPosts tp
LEFT JOIN 
    PostCommentStats pcs ON tp.PostId = pcs.PostId
LEFT JOIN 
    PostHistoryInfo phi ON tp.PostId = phi.PostId
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC;