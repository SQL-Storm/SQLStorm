
WITH RecursivePosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.AnswerCount,
        COALESCE(p.AcceptedAnswerId, -1) AS AcceptedAnswerId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.AnswerCount,
        COALESCE(p.AcceptedAnswerId, -1) AS AcceptedAnswerId,
        rp.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePosts rp ON p.ParentId = rp.Id
),

PostVoteSummary AS (
    SELECT 
        PostId,
        COUNT(CASE WHEN VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN VoteTypeId = 3 THEN 1 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),

PostHistorySummary AS (
    SELECT 
        PostId,
        MAX(CASE WHEN PostHistoryTypeId = 10 THEN CreationDate END) AS LastClosedDate,
        MAX(CASE WHEN PostHistoryTypeId = 11 THEN CreationDate END) AS LastReopenedDate,
        COUNT(CASE WHEN PostHistoryTypeId IN (6, 4) THEN 1 END) AS EditCount
    FROM 
        PostHistory
    GROUP BY 
        PostId
)

SELECT 
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    COALESCE(pv.UpVotes, 0) AS UpVotes,
    COALESCE(pv.DownVotes, 0) AS DownVotes,
    phs.LastClosedDate,
    phs.LastReopenedDate,
    COALESCE(phs.EditCount, 0) AS EditCount,
    ROW_NUMBER() OVER (PARTITION BY rp.Level ORDER BY rp.ViewCount DESC) AS Rank
FROM 
    RecursivePosts rp
LEFT JOIN 
    PostVoteSummary pv ON rp.Id = pv.PostId
LEFT JOIN 
    PostHistorySummary phs ON rp.Id = phs.PostId
WHERE 
    rp.ViewCount > (SELECT AVG(ViewCount) FROM Posts) 
    AND (phs.LastClosedDate IS NULL OR phs.LastClosedDate < CURRENT_DATE - INTERVAL '30 DAY') 
ORDER BY 
    rp.Level, 
    rp.ViewCount DESC;
