WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        COUNT(a.Id) AS AnswerCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY COUNT(a.Id) DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '>')) AS t(TagName) ON TRUE
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, p.OwnerUserId, u.DisplayName
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(DISTINCT p.Id) AS TotalPosts
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
UserRanking AS (
    SELECT 
        UserId,
        DisplayName,
        UpVotes - DownVotes AS VoteScore,
        RANK() OVER (ORDER BY UpVotes - DownVotes DESC) AS UserRank
    FROM 
        TopUsers
)
SELECT 
    r.PostId,
    r.Title,
    r.OwnerDisplayName,
    r.AnswerCount,
    r.Tags,
    r.CreationDate,
    u.DisplayName AS TopUserDisplayName,
    u.UserRank,
    r.Rank AS UserPostRank
FROM 
    RankedPosts r
JOIN 
    UserRanking u ON r.OwnerUserId = u.UserId
WHERE 
    r.Rank <= 5 
ORDER BY 
    u.UserRank, r.AnswerCount DESC;