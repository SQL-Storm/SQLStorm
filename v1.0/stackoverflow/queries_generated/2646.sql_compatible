
WITH UserRankings AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS UserRank,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN vt.Id = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN vt.Id = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes vt ON p.Id = vt.PostId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
TopPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        c.UserDisplayName,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= DATEADD(DAY, -30, '2024-10-01')
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.Score, c.UserDisplayName
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS ClosedDate,
        ph.UserId,
        JSON_AGG(DISTINCT ctr.Name) AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes ctr ON ph.Comment::INTEGER = ctr.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        ph.PostId, ph.CreationDate, ph.UserId
)
SELECT 
    ur.UserId,
    ur.DisplayName,
    ur.Reputation,
    ur.UserRank,
    ur.PostCount,
    ur.UpVotes,
    ur.DownVotes,
    tp.PostId,
    tp.Title,
    tp.ViewCount,
    tp.Score,
    tp.CommentCount,
    cp.ClosedDate,
    cp.CloseReasons
FROM 
    UserRankings ur
LEFT JOIN 
    TopPosts tp ON ur.UserId = tp.OwnerUserId AND tp.PostRank <= 5
LEFT JOIN 
    ClosedPosts cp ON tp.PostId = cp.PostId
WHERE 
    (ur.UpVotes - ur.DownVotes) > 10
ORDER BY 
    ur.Reputation DESC, tp.Score DESC;
