
WITH PostActivity AS (
    SELECT 
        p.Id AS PostId,
        p.Title AS PostTitle,
        p.CreationDate AS PostCreationDate,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RN
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(MONTH, -1, '2024-10-01')
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.OwnerUserId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PopularPosts AS (
    SELECT 
        pa.PostId,
        pa.PostTitle,
        pa.ViewCount,
        pa.CommentCount,
        pa.Upvotes,
        pa.Downvotes,
        u.DisplayName,
        ub.BadgeCount
    FROM 
        PostActivity pa
    JOIN 
        Users u ON pa.OwnerUserId = u.Id
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
    WHERE 
        pa.RN = 1
    ORDER BY 
        pa.ViewCount DESC
    LIMIT 10
)

SELECT 
    pp.PostId,
    pp.PostTitle,
    pp.ViewCount,
    pp.CommentCount,
    pp.Upvotes,
    pp.Downvotes,
    COALESCE(pp.BadgeCount, 0) AS UserBadgeCount,
    CASE 
        WHEN pp.Upvotes > pp.Downvotes THEN 'Positive'
        WHEN pp.Upvotes < pp.Downvotes THEN 'Negative'
        ELSE 'Neutral'
    END AS VoteSentiment
FROM 
    PopularPosts pp
WHERE 
    pp.ViewCount IS NOT NULL
ORDER BY 
    pp.ViewCount DESC;
