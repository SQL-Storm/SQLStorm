
WITH RecursivePostHierarchy AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.PostTypeId,
        1 AS Level,
        p.CreationDate
    FROM Posts p
    WHERE p.PostTypeId = 1 

    UNION ALL

    SELECT
        a.Id AS PostId,
        a.Title,
        a.OwnerUserId,
        a.PostTypeId,
        r.Level + 1,
        a.CreationDate
    FROM Posts a
    INNER JOIN Posts q ON a.ParentId = q.Id
    INNER JOIN RecursivePostHierarchy r ON q.Id = r.PostId
),

UserBadgeStats AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName
),

PostStats AS (
    SELECT
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ViewCount,
        p.CreationDate,
        COALESCE(v.UpVotes, 0) AS UpVotes,
        COALESCE(v.DownVotes, 0) AS DownVotes,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(v.Score, 0) AS Score
    FROM Posts p
    LEFT JOIN (
        SELECT
            PostId,
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) - SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS Score
        FROM Votes
        GROUP BY PostId
    ) v ON p.Id = v.PostId
    LEFT JOIN (
        SELECT
            PostId,
            COUNT(Id) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
),

AggregatedPostData AS (
    SELECT
        ph.PostId,
        ph.Title,
        ph.Level,
        ph.CreationDate,
        ps.ViewCount,
        ps.UpVotes,
        ps.DownVotes,
        ps.CommentCount,
        us.BadgeCount,
        us.GoldBadges,
        us.SilverBadges,
        us.BronzeBadges
    FROM RecursivePostHierarchy ph
    LEFT JOIN PostStats ps ON ph.PostId = ps.Id
    LEFT JOIN UserBadgeStats us ON ps.OwnerUserId = us.UserId
)

SELECT
    ROW_NUMBER() OVER (PARTITION BY apd.Level ORDER BY apd.ViewCount DESC) AS PostRank,
    apd.PostId,
    apd.Title,
    apd.CreationDate,
    apd.ViewCount,
    apd.UpVotes,
    apd.DownVotes,
    apd.CommentCount,
    apd.BadgeCount,
    (apd.GoldBadges + apd.SilverBadges + apd.BronzeBadges) AS TotalBadges
FROM AggregatedPostData apd
WHERE apd.CommentCount > 0
ORDER BY apd.Level, apd.ViewCount DESC;
