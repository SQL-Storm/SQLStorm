
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS PostRank,
        p.OwnerUserId
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),

PostVoteCounts AS (
    SELECT 
        v.PostId,
        COUNT(CASE WHEN vt.Name = 'UpMod' THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN vt.Name = 'DownMod' THEN 1 END) AS DownVotes,
        COUNT(CASE WHEN vt.Name = 'Close' THEN 1 END) AS CloseVotes,
        COUNT(CASE WHEN vt.Name = 'Reopen' THEN 1 END) AS ReopenVotes
    FROM 
        Votes v
    JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id
    GROUP BY 
        v.PostId
),

UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges,
        SUM(CASE WHEN b.TagBased = 1 THEN 1 ELSE 0 END) AS TagBasedCount
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)

SELECT 
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.DisplayName,
    COALESCE(pvc.UpVotes, 0) AS UpVotes,
    COALESCE(pvc.DownVotes, 0) AS DownVotes,
    COALESCE(pvc.CloseVotes, 0) AS CloseVotes,
    COALESCE(pvc.ReopenVotes, 0) AS ReopenVotes,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    ub.TagBasedCount,
    CASE 
        WHEN (rp.Score > 100 AND ub.GoldBadges > 0) THEN 'High Performer'
        ELSE 'Regular Contributor'
    END AS ContributorType
FROM 
    RankedPosts rp
LEFT JOIN 
    PostVoteCounts pvc ON rp.PostId = pvc.PostId
LEFT JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
WHERE 
    (rp.Title ILIKE '%SQL%' OR rp.Title ILIKE '%database%')
    AND rp.PostRank <= 10
    AND NOT EXISTS (
        SELECT 1 
        FROM PostHistory ph
        WHERE ph.PostId = rp.PostId 
        AND ph.PostHistoryTypeId IN (10, 12)  
    )
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC;
