
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        COALESCE(v.UpVoteCount, 0) AS UpVoteCount,
        COALESCE(v.DownVoteCount, 0) AS DownVoteCount,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RN
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount
        FROM 
            Votes 
        GROUP BY 
            PostId
    ) v ON p.Id = v.PostId
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM 
            Comments 
        GROUP BY 
            PostId
    ) c ON p.Id = c.PostId
    WHERE 
        p.LastActivityDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 month'
),

PostHistoryAnalysis AS (
    SELECT 
        ph.PostId,
        pt.Name AS PostHistoryType,
        COUNT(*) AS HistoryCount,
        STRING_AGG(ph.Comment, '; ') AS Comments
    FROM 
        PostHistory ph
    INNER JOIN 
        PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    GROUP BY 
        ph.PostId, pt.Name
),

TagUsageStats AS (
    SELECT 
        t.TagName, 
        COUNT(pt.Id) AS PostCount,
        STRING_AGG(DISTINCT p.Title, ', ') AS PostTitles,
        SUM(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AcceptedCount
    FROM 
        Tags t
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')::integer[])
    LEFT JOIN 
        Posts pt ON pt.Title ILIKE '%' || t.TagName || '%'
    GROUP BY 
        t.TagName
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.CreationDate,
    rp.UpVoteCount,
    rp.DownVoteCount,
    rp.CommentCount,
    ph.HistoryCount,
    ph.PostHistoryType,
    ph.Comments,
    tu.PostCount AS TotalPostsWithTag,
    tu.PostTitles AS RelatedPosts,
    tu.AcceptedCount AS TotalAcceptedPosts
FROM 
    RankedPosts rp
LEFT JOIN 
    PostHistoryAnalysis ph ON rp.PostId = ph.PostId
LEFT JOIN 
    TagUsageStats tu ON rp.PostId = ANY((SELECT DISTINCT UNNEST(string_to_array(SUBSTRING(rp.Tags, 2, LENGTH(rp.Tags) - 2), '><'))::integer[]))
    )
WHERE 
    rp.RN <= 10
    AND rp.UpVoteCount > (SELECT AVG(UpVoteCount) FROM RankedPosts) 
    AND rp.DownVoteCount IS NULL
ORDER BY 
    rp.CreationDate DESC
LIMIT 100;
