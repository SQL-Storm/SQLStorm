WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS rn,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
PopularPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.CommentCount,
        rp.UpVotes - rp.DownVotes AS NetVotes
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn = 1 AND (rp.ViewCount > 50 OR rp.CommentCount > 5)
),
ClosedPosts AS (
    SELECT 
        p.Id AS ClosedPostId,
        ph.CreationDate AS CloseDate,
        pt.Name AS CloseReason
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    JOIN 
        Posts p ON ph.PostId = p.Id
    JOIN 
        CloseReasonTypes pt ON (ph.Comment::jsonb ->> 'CloseReasonId')::int = pt.Id
    WHERE 
        ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months' AND 
        pht.Name = 'Post Closed'
)
SELECT 
    pp.Title, 
    pp.ViewCount, 
    pp.CommentCount, 
    pp.NetVotes, 
    (SELECT COUNT(*) FROM Badges b WHERE b.UserId = p.OwnerUserId) AS BadgeCount,
    (SELECT STRING_AGG(t.TagName, ', ') 
     FROM Tags t 
     WHERE t.Id IN (SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[]))) 
     GROUP BY t.Count ORDER BY t.Count DESC LIMIT 5) AS TopTags,
    cp.CloseDate,
    cp.CloseReason
FROM 
    PopularPosts pp
LEFT JOIN 
    ClosedPosts cp ON pp.PostId = cp.ClosedPostId
ORDER BY 
    pp.NetVotes DESC NULLS LAST
LIMIT 100;