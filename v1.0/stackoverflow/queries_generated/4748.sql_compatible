
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.Tags
),
UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        u.CreationDate < TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        u.Id, u.DisplayName
),
UserPosts AS (
    SELECT 
        p.OwnerUserId,
        COUNT(p.Id) AS TotalPosts,
        SUM(p.Score) AS TotalScore
    FROM 
        Posts p
    WHERE 
        p.Score > 0
    GROUP BY 
        p.OwnerUserId
)
SELECT 
    ue.UserId,
    ue.DisplayName,
    ue.Upvotes,
    ue.Downvotes,
    ue.BadgeCount,
    COALESCE(up.TotalPosts, 0) AS TotalPosts,
    COALESCE(up.TotalScore, 0) AS TotalScore,
    COUNT(DISTINCT rp.PostId) AS ActivePosts,
    SUM(rp.ViewCount) AS TotalViews,
    SUM(CASE WHEN rp.Rank <= 3 THEN 1 ELSE 0 END) AS TopPostsCount
FROM 
    UserEngagement ue
LEFT JOIN 
    UserPosts up ON ue.UserId = up.OwnerUserId
LEFT JOIN 
    RankedPosts rp ON rp.PostId = up.TotalPosts
GROUP BY 
    ue.UserId, ue.DisplayName, up.TotalPosts, up.TotalScore
HAVING 
    COUNT(DISTINCT rp.PostId) > 0
ORDER BY 
    TotalScore DESC, Upvotes DESC;
