WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate ASC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        p.Id
), 
VoteStats AS (
    SELECT 
        p.Id AS PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
), 
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        MAX(b.Class) AS HighestBadgeClass 
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        COUNT(*) AS RevisionCount,
        MAX(ph.CreationDate) AS LastEdited
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId, ph.PostHistoryTypeId
)
SELECT 
    up.UserId, 
    u.DisplayName,
    up.BadgeCount,
    up.HighestBadgeClass,
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    COALESCE(vs.UpVotes, 0) AS TotalUpVotes,
    COALESCE(vs.DownVotes, 0) AS TotalDownVotes,
    COALESCE(ph.RevisionCount, 0) AS TotalRevisions,
    CASE 
        WHEN rp.CommentCount > 0 THEN 'Has Comments'
        ELSE 'No Comments'
    END AS CommentStatus,
    CONCAT('Created ', DATE_PART('day', cast('2024-10-01 12:34:56' as timestamp) - rp.CreationDate), ' days ago') AS TimeSinceCreation
FROM 
    UserBadges up
INNER JOIN 
    Users u ON up.UserId = u.Id
INNER JOIN 
    RankedPosts rp ON u.Id = rp.OwnerUserId
LEFT JOIN 
    VoteStats vs ON rp.PostId = vs.PostId
LEFT JOIN 
    PostHistoryDetails ph ON rp.PostId = ph.PostId
WHERE 
    up.BadgeCount > 0 
    AND rp.PostRank <= 5
    AND CASE 
        WHEN EXISTS (SELECT 1 FROM Votes WHERE PostId = rp.PostId AND VoteTypeId = 2) THEN 
            EXISTS (SELECT 1 FROM Votes WHERE PostId = rp.PostId AND VoteTypeId = 3) 
        ELSE 
            FALSE 
    END 
ORDER BY 
    up.BadgeCount DESC, rp.Score DESC
LIMIT 10;