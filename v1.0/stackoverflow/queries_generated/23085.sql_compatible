
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COALESCE(NULLIF(u.DisplayName, ''), 'Anonymous') AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        p.OwnerUserId
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
      AND 
        p.PostTypeId IN (1, 2)  
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(*) FILTER (WHERE b.Class = 1) AS GoldBadges, 
        COUNT(*) FILTER (WHERE b.Class = 2) AS SilverBadges,
        COUNT(*) FILTER (WHERE b.Class = 3) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
RecentComments AS (
    SELECT 
        c.Id AS CommentId,
        c.PostId,
        c.CreationDate,
        c.Text,
        ROW_NUMBER() OVER (PARTITION BY c.PostId ORDER BY c.CreationDate DESC) AS CommentRank
    FROM 
        Comments c
    WHERE 
        c.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 months'
),
PostMetrics AS (
    SELECT 
        rp.PostId,
        rp.OwnerUserId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        COALESCE(b.GoldBadges, 0) AS GoldBadges,
        COALESCE(b.SilverBadges, 0) AS SilverBadges,
        COALESCE(b.BronzeBadges, 0) AS BronzeBadges,
        COALESCE(c.CommentCount, 0) AS RecentCommentCount,
        MAX(c.CreationDate) FILTER (WHERE c.CommentRank = 1) AS MostRecentCommentDate
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges b ON rp.OwnerUserId = b.UserId
    LEFT JOIN 
        (SELECT 
             PostId, 
             COUNT(*) AS CommentCount, 
             MAX(CreationDate) AS MostRecentDate
         FROM 
             RecentComments
         GROUP BY 
             PostId) c ON rp.PostId = c.PostId
    GROUP BY 
        rp.PostId, rp.OwnerUserId, rp.Title, rp.Score, rp.ViewCount, b.GoldBadges, b.SilverBadges, b.BronzeBadges, c.CommentCount
)
SELECT 
    pm.PostId,
    pm.Title,
    pm.Score,
    pm.ViewCount,
    pm.GoldBadges,
    pm.SilverBadges,
    pm.BronzeBadges,
    pm.RecentCommentCount,
    pm.MostRecentCommentDate,
    CASE 
        WHEN pm.GoldBadges > 0 THEN 'Gold member'
        WHEN pm.SilverBadges > 0 THEN 'Silver member'
        ELSE 'No badges'
    END AS MembershipStatus
FROM 
    PostMetrics pm
WHERE 
    pm.Score > 10
ORDER BY 
    pm.ViewCount DESC,
    pm.Score ASC
LIMIT 50 OFFSET 0;
