
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        p.Tags,
        u.Reputation
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 AND 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' 
),
TopPosts AS (
    SELECT 
        PostId, 
        Title, 
        CreationDate, 
        Score, 
        ViewCount, 
        Tags, 
        Reputation
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
),
PostComments AS (
    SELECT 
        pc.PostId,
        COUNT(pc.Id) AS CommentCount,
        JSON_AGG(CONCAT(pc.UserDisplayName, ': ', pc.Text)) AS Comments
    FROM 
        Comments pc
    GROUP BY 
        pc.PostId
),
PostBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
FinalPostData AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.CreationDate,
        tp.Score,
        tp.ViewCount,
        tp.Tags,
        tp.Reputation,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        COALESCE(pc.Comments, '[]') AS Comments,
        COALESCE(pb.BadgeCount, 0) AS BadgeCount
    FROM 
        TopPosts tp
    LEFT JOIN 
        PostComments pc ON tp.PostId = pc.PostId
    LEFT JOIN 
        PostBadges pb ON tp.PostId = pb.UserId
)
SELECT 
    fpd.PostId,
    fpd.Title,
    fpd.CreationDate,
    fpd.Score,
    fpd.ViewCount,
    fpd.Tags,
    fpd.Reputation,
    fpd.CommentCount,
    fpd.Comments,
    fpd.BadgeCount,
    CASE 
        WHEN fpd.Reputation >= 1000 THEN 'High Reputation'
        WHEN fpd.Reputation >= 500 THEN 'Medium Reputation'
        ELSE 'Low Reputation'
    END AS ReputationCategory
FROM 
    FinalPostData fpd
ORDER BY 
    fpd.Score DESC
LIMIT 50;
