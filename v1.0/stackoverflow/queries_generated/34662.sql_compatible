
WITH RecursiveUserScore AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS Rank,
        (SELECT COUNT(*) FROM Posts p WHERE p.OwnerUserId = u.Id) AS PostCount
    FROM 
        Users u
),
PostsWithTags AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        STRING_AGG(t.TagName, ', ') AS Tags,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COALESCE(p.ClosedDate, 'Open') AS PostStatus
    FROM 
        Posts p
    LEFT JOIN 
        LATERAL STRING_TO_ARRAY(p.Tags, ',') AS tag_names ON true
    LEFT JOIN 
        Tags t ON t.TagName = TRIM(BOTH '<>' FROM tag_names)
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.ClosedDate
),
PostHistoryAggregated AS (
    SELECT 
        PostId,
        COUNT(*) AS EditCount,
        MAX(CreationDate) AS LastEditedDate
    FROM 
        PostHistory
    GROUP BY 
        PostId
)
SELECT 
    u.DisplayName,
    u.Reputation,
    r.Rank,
    ph.LastEditedDate,
    ph.EditCount,
    pwt.PostId,
    pwt.Title,
    pwt.Tags,
    pwt.CreationDate,
    pwt.ViewCount,
    pwt.Score,
    pwt.PostStatus
FROM 
    RecursiveUserScore r
JOIN 
    Users u ON u.Id = r.UserId
LEFT JOIN 
    PostHistoryAggregated ph ON ph.PostId IN (SELECT PostId FROM Posts WHERE OwnerUserId = u.Id)
LEFT JOIN 
    PostsWithTags pwt ON pwt.PostId IN (SELECT PostId FROM Posts WHERE OwnerUserId = u.Id)
WHERE 
    r.Reputation > 1000
ORDER BY 
    r.Rank;
