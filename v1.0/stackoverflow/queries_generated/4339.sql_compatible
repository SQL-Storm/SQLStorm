
WITH UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS Rank
    FROM Users u
), 
PostSummary AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    WHERE p.CreationDate >= CAST(DATEADD('YEAR', -1, '2024-10-01') AS DATE)
    GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId, u.DisplayName
), 
PostDetails AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CreationDate,
        ps.Score,
        ps.ViewCount,
        ps.CommentCount,
        COALESCE(ps.UpVotes - ps.DownVotes, 0) AS NetVotes,
        ur.DisplayName AS OwnerName,
        ur.Reputation AS OwnerReputation,
        ur.Rank
    FROM PostSummary ps
    JOIN UserReputation ur ON ps.OwnerUserId = ur.UserId
)
SELECT 
    pd.*,
    CASE 
        WHEN pd.NetVotes > 10 THEN 'Highly Engaged'
        WHEN pd.NetVotes BETWEEN 1 AND 10 THEN 'Moderately Engaged'
        ELSE 'Low Engagement'
    END AS EngagementLevel
FROM PostDetails pd
LEFT JOIN Badges b ON pd.OwnerUserId = b.UserId AND b.Class = 1
WHERE pd.Rank <= 50
ORDER BY pd.Score DESC, pd.CreationDate DESC
LIMIT 100;
