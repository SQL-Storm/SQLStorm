WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        DENSE_RANK() OVER (ORDER BY p.CreationDate DESC) AS LatestRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
PostHistoryWithDetails AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS HistoryDate,
        GROUP_CONCAT(DISTINCT pht.Name) AS HistoryTypes,
        ph.Comment AS CloseReason,
        JSON_AGG(u.DisplayName) FILTER (WHERE ph.PostHistoryTypeId = 10) AS ClosedBy
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    LEFT JOIN 
        Users u ON ph.UserId = u.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11, 12) 
    GROUP BY 
        ph.PostId, ph.CreationDate, ph.Comment
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    phwd.HistoryDate,
    phwd.HistoryTypes,
    phwd.CloseReason,
    phwd.ClosedBy,
    CASE
        WHEN rp.UserRank = 1 THEN 'Top Post'
        WHEN rp.LatestRank <= 5 THEN 'Recent Hot'
        ELSE 'Normal Post'
    END AS PostCategory,
    COALESCE(NULLIF(rp.ViewCount, 0), 1) / NULLIF(rp.CommentCount, 0) AS ViewCommentRatio
FROM 
    RankedPosts rp
LEFT JOIN 
    PostHistoryWithDetails phwd ON rp.PostId = phwd.PostId
WHERE 
    (rp.ViewCount > 50 OR phwd.CloseReason IS NOT NULL)
ORDER BY 
    rp.Score DESC,
    ViewCommentRatio DESC
LIMIT 100;