
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Views,
        p.Score,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagsList,
        COALESCE(a.AcceptedAnswerId, -1) AS AcceptedAnswerId,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM
        Posts p
    LEFT JOIN
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN
        Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::integer[])
    LEFT JOIN
        Answers a ON a.ParentId = p.Id
    LEFT JOIN
        Comments c ON c.PostId = p.Id
    LEFT JOIN
        Votes v ON v.PostId = p.Id
    WHERE
        p.PostTypeId = 1 
    GROUP BY
        p.Id, p.Title, p.Body, p.CreationDate, p.Views, p.Score, p.OwnerUserId, u.DisplayName, a.AcceptedAnswerId
),
TopRankedPosts AS (
    SELECT
        PostId,
        Title,
        Body,
        CreationDate,
        Views,
        Score,
        OwnerDisplayName,
        TagsList,
        AcceptedAnswerId,
        CommentCount,
        VoteCount
    FROM
        RankedPosts
    WHERE
        PostRank <= 5 
)
SELECT
    trp.OwnerDisplayName,
    COUNT(trp.PostId) AS TotalPosts,
    SUM(trp.Views) AS TotalViews,
    SUM(trp.Score) AS TotalScore,
    AVG(trp.CommentCount) AS AvgCommentsPerPost,
    AVG(trp.VoteCount) AS AvgVotesPerPost,
    STRING_AGG(DISTINCT trp.TagsList, '; ') AS AllTagsUsed
FROM
    TopRankedPosts trp
GROUP BY
    trp.OwnerDisplayName
ORDER BY
    TotalPosts DESC, TotalViews DESC;
