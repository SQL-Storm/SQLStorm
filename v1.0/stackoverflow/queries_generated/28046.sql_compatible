
WITH UserReputation AS (
    SELECT 
        u.Id AS UserId, 
        u.DisplayName, 
        u.Reputation, 
        COUNT(DISTINCT p.Id) AS PostCount,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        SUM(CASE WHEN b.Id IS NOT NULL THEN 1 ELSE 0 END) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId 
    LEFT JOIN 
        Comments c ON u.Id = c.UserId 
    LEFT JOIN 
        Votes v ON u.Id = v.UserId 
    LEFT JOIN 
        Badges b ON u.Id = b.UserId 
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
),
TopPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.Body, 
        p.Score, 
        u.DisplayName AS Owner, 
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id 
    LEFT JOIN 
        Tags t ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::text[])
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.Score, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        Reputation,
        PostCount,
        CommentCount,
        UpVoteCount,
        DownVoteCount,
        BadgeCount,
        ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS ReputationRank
    FROM 
        UserReputation
),
PopularPostDetails AS (
    SELECT 
        tp.PostId,
        tp.Title,
        tp.Body,
        tp.Score,
        tp.Owner,
        tp.Tags,
        u.Reputation AS OwnerReputation,
        u.CommentCount AS OwnerComments,
        u.BadgeCount AS OwnerBadges,
        RANK() OVER (ORDER BY tp.Score DESC) AS ScoreRank
    FROM 
        TopPosts tp
    JOIN 
        Users u ON tp.Owner = u.DisplayName
)
SELECT 
    tpu.DisplayName AS TopUser,
    tpu.Reputation AS UserReputation,
    p.Title AS PopularPostTitle,
    p.Body AS PopularPostBody,
    p.Tags AS PopularPostTags,
    p.OwnerReputation AS OwnerReputation,
    p.OwnerComments AS OwnerComments,
    p.OwnerBadges AS OwnerBadges
FROM 
    TopUsers tpu
JOIN 
    PopularPostDetails p ON tpu.DisplayName = p.Owner
WHERE 
    tpu.ReputationRank <= 10 AND p.ScoreRank <= 5
ORDER BY 
    tpu.Reputation DESC, p.Score DESC;
