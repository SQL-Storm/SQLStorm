
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Body,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS TagRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1  
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        rp.Body,
        rp.OwnerDisplayName,
        CASE 
            WHEN rp.TagRank <= 3 THEN 'Top Post'
            ELSE 'Other Post' 
        END AS PostCategory,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagsList
    FROM 
        RankedPosts rp
    LEFT JOIN 
        LATERAL string_to_array(rp.Tags, '<>') AS tag ON true
    LEFT JOIN 
        Tags t ON t.Id = CAST(tag AS INTEGER)
    GROUP BY 
        rp.PostId, rp.Title, rp.CreationDate, rp.ViewCount, rp.Body, rp.OwnerDisplayName, rp.TagRank
),
UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        COUNT(DISTINCT v.Id) AS TotalVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON c.UserId = u.Id
    LEFT JOIN 
        Votes v ON v.UserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    pd.PostId,
    pd.Title,
    pd.CreationDate,
    pd.ViewCount,
    pd.OwnerDisplayName,
    pd.PostCategory,
    pd.TagsList,
    ua.TotalPosts,
    ua.TotalComments,
    ua.TotalVotes
FROM 
    PostDetails pd
JOIN 
    UserActivity ua ON pd.OwnerDisplayName = ua.DisplayName
ORDER BY 
    pd.ViewCount DESC, ua.TotalPosts DESC, pd.CreationDate DESC;
