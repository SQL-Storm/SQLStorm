
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COALESCE(aph.AcceptedAnswerPostId, 0) AS AcceptedAnswer,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            p.Id AS AcceptedAnswerPostId,
            p.AcceptedAnswerId
        FROM 
            Posts p
        WHERE 
            p.PostTypeId = 1 
    ) aph ON p.Id = aph.AcceptedAnswerId
    WHERE 
        p.PostTypeId IN (1, 2) 
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId, 
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositiveScoredPosts,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativeScoredPosts,
        AVG(p.ViewCount) AS AvgViewsPerPost
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
FinalOutput AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        us.TotalPosts,
        us.PositiveScoredPosts,
        us.NegativeScoredPosts,
        ub.GoldBadges,
        ub.SilverBadges,
        ub.BronzeBadges,
        RANK() OVER (ORDER BY us.TotalPosts DESC, us.AvgViewsPerPost DESC) AS UserRank,
        ARRAY_AGG(DISTINCT rp.Title) AS UserPosts,
        STRING_AGG(DISTINCT CASE WHEN rp.AcceptedAnswer > 0 THEN rp.Title ELSE NULL END, ', ') AS AcceptedAnswers
    FROM 
        Users u
    LEFT JOIN 
        UserStatistics us ON u.Id = us.UserId
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
    LEFT JOIN 
        RankedPosts rp ON u.Id = rp.OwnerUserId
    WHERE 
        u.Reputation > 1000 
    GROUP BY 
        u.Id, u.DisplayName, us.TotalPosts, us.PositiveScoredPosts, us.NegativeScoredPosts, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges
)
SELECT 
    UserId, 
    DisplayName, 
    TotalPosts, 
    PositiveScoredPosts, 
    NegativeScoredPosts, 
    GoldBadges, 
    SilverBadges, 
    BronzeBadges,
    UserRank,
    UserPosts,
    CASE 
        WHEN AcceptedAnswers IS NULL THEN 'No Accepted Answers' 
        ELSE AcceptedAnswers 
    END AS AcceptedAnswers
FROM 
    FinalOutput
ORDER BY 
    UserRank
LIMIT 50;
