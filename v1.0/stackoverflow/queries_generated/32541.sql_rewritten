WITH RecursivePostHierarchy AS (
    SELECT 
        P.Id, 
        P.CreationDate,
        P.Title,
        P.Score,
        P.ViewCount,
        P.OwnerUserId,
        P.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1  

    UNION ALL

    SELECT 
        P.Id,
        P.CreationDate,
        P.Title,
        P.Score,
        P.ViewCount,
        P.OwnerUserId,
        P.AcceptedAnswerId,
        Level + 1
    FROM 
        Posts P
    JOIN 
        Posts A ON P.ParentId = A.Id
    WHERE 
        A.PostTypeId = 1  
)

SELECT 
    U.DisplayName AS UserName,
    U.Reputation,
    COUNT(DISTINCT PH.Id) AS TotalPosts,
    SUM(CASE WHEN PH.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions,
    SUM(CASE WHEN PH.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers,
    AVG(PH.Score) AS AverageScore,
    SUM(V.BountyAmount) AS TotalBountyEarned,
    STRING_AGG(DISTINCT T.TagName, ', ') AS TagsUsed,
    COUNT(DISTINCT B.Id) AS TotalBadges,
    COUNT(CASE WHEN PH.ClosedDate IS NOT NULL THEN 1 END) AS TotalClosedPosts
FROM 
    Users U
LEFT JOIN 
    Posts PH ON PH.OwnerUserId = U.Id
LEFT JOIN 
    Votes V ON V.PostId = PH.Id 
LEFT JOIN 
    PostLinks L ON L.PostId = PH.Id 
LEFT JOIN 
    Tags T ON T.Id = (SELECT MIN(Id) FROM Tags WHERE Id IN (SELECT UNNEST(string_to_array(PH.Tags, '<>'))))  
LEFT JOIN 
    Badges B ON B.UserId = U.Id
GROUP BY 
    U.Id, U.DisplayName, U.Reputation
HAVING 
    SUM(CASE WHEN PH.PostTypeId = 1 THEN 1 ELSE 0 END) > 10  
ORDER BY 
    TotalPosts DESC,
    AverageScore DESC;