
WITH RecursivePostHierarchy AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ParentId,
        1 AS Level
    FROM 
        Posts P
    WHERE 
        P.ParentId IS NULL  

    UNION ALL

    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ParentId,
        RPH.Level + 1
    FROM 
        Posts P
    INNER JOIN 
        RecursivePostHierarchy RPH ON P.ParentId = RPH.PostId
),
PostVoteStats AS (
    SELECT 
        P.Id AS PostId,
        SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(*) AS TotalVotes,
        COUNT(DISTINCT V.UserId) AS UniqueVoterCount
    FROM 
        Posts P
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    GROUP BY 
        P.Id
),
RecentEdits AS (
    SELECT 
        PH.PostId,
        PH.UserId,
        PH.CreationDate,
        PH.Comment,
        ROW_NUMBER() OVER (PARTITION BY PH.PostId ORDER BY PH.CreationDate DESC) AS EditRank
    FROM 
        PostHistory PH
    WHERE 
        PH.PostHistoryTypeId IN (4, 5, 6) 
)
SELECT 
    P.Id AS PostId,
    P.Title,
    P.CreationDate,
    COALESCE(RPH.Level, 0) AS PostHierarchyLevel,
    COALESCE(PVS.UpVotes, 0) AS TotalUpVotes,
    COALESCE(PVS.DownVotes, 0) AS TotalDownVotes,
    COALESCE(PVS.TotalVotes, 0) AS TotalVotes,
    COALESCE(PVS.UniqueVoterCount, 0) AS UniqueVoterCount,
    RE.UserDisplayName AS LastEditor,
    RE.CreationDate AS LastEditDate,
    RE.Comment AS LastEditComment
FROM 
    Posts P
LEFT JOIN 
    RecursivePostHierarchy RPH ON P.Id = RPH.PostId
LEFT JOIN 
    PostVoteStats PVS ON P.Id = PVS.PostId
LEFT JOIN 
    RecentEdits RE ON P.Id = RE.PostId AND RE.EditRank = 1
WHERE 
    P.ViewCount > 100
ORDER BY 
    TotalVotes DESC, P.CreationDate DESC
FETCH FIRST 100 ROWS ONLY;
