
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
    WHERE 
        p.PostTypeId = 2  
),
UserReputationHistory AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        rpo.PostId,
        rpo.Level,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY rpo.Level DESC) AS Rank
    FROM 
        Users u
    LEFT JOIN 
        RecursivePostHierarchy rpo ON u.Id = rpo.OwnerUserId
),
TopReputedUsers AS (
    SELECT 
        UserId, 
        DisplayName, 
        MAX(Reputation) AS MaxReputation
    FROM 
        UserReputationHistory
    WHERE 
        Level = 1  
    AND 
        Rank = 1
    GROUP BY 
        UserId, DisplayName
),
MostActivePosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title
    HAVING 
        COUNT(c.Id) > 10 OR COUNT(v.Id) > 20  
),
ClosedPostHistory AS (
    SELECT 
        p.Id AS PostId,
        MAX(ph.CreationDate) AS LastClosedDate
    FROM 
        Posts p
    INNER JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.PostHistoryTypeId = 10  
    GROUP BY 
        p.Id
),
FinalResults AS (
    SELECT 
        u.DisplayName,
        u.MaxReputation,
        mp.PostId,
        mp.Title,
        mp.CommentCount,
        mp.VoteCount,
        cph.LastClosedDate
    FROM 
        TopReputedUsers u
    CROSS JOIN 
        MostActivePosts mp
    LEFT JOIN 
        ClosedPostHistory cph ON mp.PostId = cph.PostId
)
SELECT 
    fr.DisplayName,
    fr.MaxReputation,
    fr.PostId,
    fr.Title,
    fr.CommentCount,
    fr.VoteCount,
    fr.LastClosedDate,
    CASE 
        WHEN fr.LastClosedDate IS NOT NULL THEN 'Closed'
        ELSE 'Open'
    END AS PostStatus,
    CONCAT('User: ', fr.DisplayName, ', Reputation: ', fr.MaxReputation) AS UserDetails
FROM 
    FinalResults fr
ORDER BY 
    fr.MaxReputation DESC, 
    fr.VoteCount DESC
LIMIT 100;
