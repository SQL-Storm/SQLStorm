
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS UpVotes,
        RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RecentPostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2
    WHERE 
        p.CreationDate > DATEADD(YEAR, -1, '2024-10-01') 
        AND p.PostTypeId IN (1, 2) 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.CommentCount,
        rp.UpVotes,
        CASE 
            WHEN rp.PostRank = 1 THEN 'Top Post'
            ELSE 'Regular Post'
        END AS PostCategory,
        CASE 
            WHEN rp.RecentPostRank <= 5 THEN 'Recently Active'
            ELSE 'Inactive'
        END AS ActivityStatus
    FROM 
        RankedPosts rp
    WHERE 
        rp.PostRank <= 3 
),
UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(tp.PostId) AS PostCount,
        SUM(tp.UpVotes) AS TotalUpVotes,
        SUM(tp.CommentCount) AS TotalComments,
        STRING_AGG(tp.Title, '; ') AS TopPostTitles
    FROM 
        Users u
    LEFT JOIN 
        TopPosts tp ON u.Id = tp.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
QualifiedUsers AS (
    SELECT 
        ups.UserId,
        ups.DisplayName,
        ups.PostCount,
        ups.TotalUpVotes,
        ups.TotalComments,
        ups.TopPostTitles
    FROM 
        UserPostStats ups
    WHERE 
        ups.PostCount > 0 
        AND ups.TotalComments > 5 
        AND ups.TotalUpVotes >= 10
    ORDER BY 
        ups.TotalUpVotes DESC
)
SELECT 
    qu.DisplayName,
    qu.PostCount,
    qu.TotalUpVotes,
    qu.TotalComments,
    COALESCE(qu.TopPostTitles, 'No Posts') AS TopPostTitles
FROM 
    QualifiedUsers qu
WHERE 
    qu.UserId IS NOT NULL
ORDER BY 
    qu.TotalUpVotes DESC
LIMIT 10;
