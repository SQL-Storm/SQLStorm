WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        COALESCE(NULLIF(p.AcceptedAnswerId, -1), 0) AS AcceptedAnswerId,
        p.CreationDate,
        p.Body,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS LatestPostRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        JSON_AGG(DISTINCT t.TagName) AS AssociatedTags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        LATERAL string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><') AS tag(tagName) ON TRUE
    LEFT JOIN 
        Tags t ON tag.tagName = t.TagName
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
PostHistoryAnalysis AS (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS HistoryCount,
        MAX(ph.CreationDate) AS LastChangeDate,
        STRING_AGG(DISTINCT CASE WHEN pht.Name IS NOT NULL THEN pht.Name ELSE 'Unknown' END, ', ') AS ChangeTypes
    FROM 
        PostHistory ph
    LEFT JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
),
FinalResults AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.Score,
        ps.AcceptedAnswerId,
        ps.CommentCount,
        ps.UpVoteCount,
        ps.DownVoteCount,
        COALESCE(pHA.HistoryCount, 0) AS HistoryCount,
        COALESCE(pHA.LastChangeDate, 'No Changes') AS LastChangeDate,
        COALESCE(pHA.ChangeTypes, 'No Changes') AS ChangeTypes,
        CASE 
            WHEN ps.CommentCount > 50 THEN 'Highly Discussed'
            WHEN ps.CommentCount BETWEEN 21 AND 50 THEN 'Moderately Discussed'
            ELSE 'Less Discussed'
        END AS DiscussionLevel,
        CASE 
            WHEN ps.OwnerUserId IS NULL THEN 'Community Post' 
            ELSE (SELECT DisplayName FROM Users WHERE Id = ps.OwnerUserId) 
        END AS OwnerName,
        CASE 
            WHEN ps.Score IS NULL THEN 'No Score' 
            ELSE 'Score Available'
        END AS ScoreInformation,
        COALESCE(ps.AssociatedTags, '{}'::json) AS TagsJson
    FROM 
        PostStats ps
    LEFT JOIN 
        PostHistoryAnalysis pHA ON ps.PostId = pHA.PostId
)
SELECT 
    *,
    CASE 
        WHEN LastChangeDate = 'No Changes' THEN 'No changes made to this post.'
        WHEN LastChangeDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days' THEN 'Recently Updated'
        ELSE 'Stale Post'
    END AS ChangeStatus
FROM 
    FinalResults
WHERE 
    DiscussionLevel = 'Highly Discussed'
    AND ScoreInformation = 'Score Available'
ORDER BY 
    ps.Score DESC;