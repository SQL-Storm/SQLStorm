WITH TagStatistics AS (
    SELECT 
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.ViewCount > 100 THEN 1 ELSE 0 END) AS HighViewCountPosts,
        AVG(u.Reputation) AS AvgUserReputation
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    GROUP BY 
        t.TagName
),
ClosedPostHistory AS (
    SELECT 
        ph.PostId,
        MAX(ph.CreationDate) AS LastCloseDate,
        STRING_AGG(DISTINCT CONCAT('User: ', ph.UserDisplayName, ' | Reason ID: ', ph.Comment), ' || ') AS CloseHistory
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (10, 11)  
    GROUP BY 
        ph.PostId
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.AnswerCount,
        p.TagCount,
        COALESCE(ch.LastCloseDate, 'Never Closed') AS LastCloseDate,
        COALESCE(ch.CloseHistory, 'No Close History') AS CloseHistory,
        ts.PostCount AS RelatedTagCount,
        ts.HighViewCountPosts,
        ts.AvgUserReputation
    FROM 
        Posts p
    LEFT JOIN 
        ClosedPostHistory ch ON p.Id = ch.PostId
    LEFT JOIN 
        TagStatistics ts ON ts.TagName = ANY (STRING_TO_ARRAY(p.Tags, '>><<'))
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
        AND p.ViewCount > 10
)
SELECT 
    pd.PostId,
    Title,
    ViewCount,
    AnswerCount,
    LastCloseDate,
    CloseHistory,
    RelatedTagCount,
    HighViewCountPosts,
    AvgUserReputation
FROM 
    PostDetails pd
ORDER BY 
    ViewCount DESC, AnswerCount DESC
LIMIT 50;