WITH RelevantPosts AS (
    SELECT p.Id, p.Title, p.CreationDate, p.OwnerUserId, p.Score, p.ViewCount, p.Tags,
           COUNT(c.Id) AS CommentCount,
           COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
           COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
           COALESCE(MAX(b.Class), 0) AS HighestBadge
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Badges b ON p.OwnerUserId = b.UserId AND b.Date = (
        SELECT MAX(Date)
        FROM Badges
        WHERE UserId = p.OwnerUserId
    )
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id
),
RankedPosts AS (
    SELECT *,
           RANK() OVER (ORDER BY Score DESC, CommentCount DESC, ViewCount DESC) AS Rank
    FROM RelevantPosts
)
SELECT rp.Id, rp.Title, rp.CreationDate, u.DisplayName AS OwnerDisplayName, 
       rp.Score, rp.CommentCount, rp.ViewCount, rp.UpVotes, rp.DownVotes,
       rp.HighestBadge, ARRAY_AGG(DISTINCT t.TagName) AS Tags
FROM RankedPosts rp
JOIN Users u ON rp.OwnerUserId = u.Id
LEFT JOIN LATERAL (
    SELECT unnest(string_to_array(rp.Tags, '>')) AS TagName
) t ON TRUE
WHERE rp.Rank <= 50
GROUP BY rp.Id, u.DisplayName
ORDER BY rp.Rank
LIMIT 100;