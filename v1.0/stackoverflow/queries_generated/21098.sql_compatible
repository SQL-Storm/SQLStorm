
WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.ViewCount,
        P.Score,
        ROW_NUMBER() OVER (PARTITION BY P.PostTypeId ORDER BY P.ViewCount DESC, P.Score DESC) AS Rank,
        COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) OVER (PARTITION BY P.Id) AS Upvotes,
        COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) OVER (PARTITION BY P.Id) AS Downvotes,
        (SELECT COUNT(*) FROM Comments C WHERE C.PostId = P.Id) AS CommentCount
    FROM 
        Posts P
    LEFT JOIN 
        Votes V ON P.Id = V.PostId
    WHERE 
        P.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
FilteredPosts AS (
    SELECT 
        RP.PostId,
        RP.Title,
        RP.CreationDate,
        RP.ViewCount,
        RP.Score,
        RP.Upvotes,
        RP.Downvotes,
        RP.CommentCount,
        CASE 
            WHEN RP.Upvotes > RP.Downvotes THEN 'Popular'
            WHEN RP.Upvotes < RP.Downvotes THEN 'Controversial'
            ELSE 'Neutral'
        END AS PostSentiment
    FROM 
        RankedPosts RP
    WHERE 
        RP.Rank <= 10
        AND (RP.CommentCount > 0 OR RP.Score > 5)
),
PostHistoryDetails AS (
    SELECT 
        PH.PostId,
        MAX(CASE WHEN PHT.Name = 'Post Closed' THEN PH.CreationDate END) AS LastClosedDate,
        MAX(CASE WHEN PHT.Name = 'Post Reopened' THEN PH.CreationDate END) AS LastReopenedDate
    FROM 
        PostHistory PH
    INNER JOIN 
        PostHistoryTypes PHT ON PH.PostHistoryTypeId = PHT.Id
    GROUP BY 
        PH.PostId
)

SELECT 
    FP.PostId,
    FP.Title,
    FP.CreationDate,
    FP.ViewCount,
    FP.Score,
    FP.Upvotes,
    FP.Downvotes,
    FP.CommentCount,
    FP.PostSentiment,
    COALESCE(PHD.LastClosedDate, 'No closures') AS LastClosedDate,
    COALESCE(PHD.LastReopenedDate, 'No reopens') AS LastReopenedDate
FROM 
    FilteredPosts FP
LEFT JOIN 
    PostHistoryDetails PHD ON FP.PostId = PHD.PostId
ORDER BY 
    FP.ViewCount DESC, FP.Score DESC
LIMIT 50;
