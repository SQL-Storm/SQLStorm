
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS Rank,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Tags t ON t.Id IN (SELECT UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><'))::int)
    WHERE 
        p.CreationDate >= CAST('2024-10-01' AS DATE) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.OwnerUserId
),

UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(p.Id) AS TotalPosts,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        SUM(COALESCE(b.Class, 0)) AS TotalBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id, u.DisplayName
),

RecentPostHistory AS (
    SELECT 
        ph.PostId,
        ph.UserDisplayName,
        ph.CreationDate,
        ph.Comment,
        ph.Text,
        p.PostTypeId,
        pt.Name AS PostTypeName,
        DENSE_RANK() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS HistoryRank
    FROM 
        PostHistory ph
    INNER JOIN 
        Posts p ON p.Id = ph.PostId
    INNER JOIN 
        PostHistoryTypes pt ON pt.Id = ph.PostHistoryTypeId
    WHERE 
        ph.CreationDate >= CAST('2024-10-01' AS DATE) - INTERVAL '6 months'
)

SELECT 
    u.UserId, 
    u.DisplayName,
    u.TotalPosts,
    u.QuestionCount,
    u.AnswerCount,
    u.TotalBadges,
    r.PostId,
    r.Title,
    r.CreationDate,
    r.ViewCount,
    r.Score,
    r.Tags,
    ph.UserDisplayName AS LastEditor,
    ph.CreationDate AS LastEditDate,
    ph.Comment AS EditComment,
    ph.Text AS NewValue,
    r.Rank,
    CASE 
        WHEN r.Rank <= 5 THEN 'Highly Engaged'
        WHEN r.Rank BETWEEN 6 AND 10 THEN 'Moderately Engaged'
        ELSE 'Less Engaged'
    END AS EngagementLevel
FROM 
    UserPostStats u
LEFT JOIN 
    RankedPosts r ON r.OwnerUserId = u.UserId
LEFT JOIN 
    RecentPostHistory ph ON ph.PostId = r.PostId
WHERE 
    (u.TotalPosts > 5 OR ph.HistoryRank IS NOT NULL)
    AND (u.TotalBadges IS NULL OR u.TotalBadges > 0)
ORDER BY 
    u.TotalPosts DESC, 
    r.CreationDate DESC;
