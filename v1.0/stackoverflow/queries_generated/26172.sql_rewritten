WITH UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.Views,
        u.UpVotes,
        u.DownVotes,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(b.Class = 1) AS GoldBadges,
        SUM(b.Class = 2) AS SilverBadges,
        SUM(b.Class = 3) AS BronzeBadges
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Badges b ON u.Id = b.UserId
    WHERE u.Reputation > 1000
    GROUP BY u.Id, u.DisplayName, u.Reputation, u.CreationDate, u.Views, u.UpVotes, u.DownVotes
),

PostTagStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        p.FavoriteCount,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM Posts p
    LEFT JOIN Tags t ON t.Id IN (SELECT unnest(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')))
    WHERE p.CreationDate BETWEEN cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' AND cast('2024-10-01 12:34:56' as timestamp)
    GROUP BY p.Id, p.Title, p.ViewCount, p.AnswerCount, p.CommentCount, p.FavoriteCount
),

Benchmarking AS (
    SELECT 
        us.DisplayName,
        us.Reputation,
        us.PostCount,
        us.QuestionCount,
        us.AnswerCount,
        pts.PostId,
        pts.Title,
        pts.ViewCount,
        pts.Tags,
        pts.AnswerCount AS PostAnswerCount,
        us.GoldBadges,
        us.SilverBadges,
        us.BronzeBadges
    FROM UserStatistics us
    JOIN PostTagStatistics pts ON us.UserId = pts.PostId
    ORDER BY us.Reputation DESC, pts.ViewCount DESC
)

SELECT 
    *,
    ROW_NUMBER() OVER (PARTITION BY UserId ORDER BY ViewCount DESC) AS Rank
FROM Benchmarking
WHERE Rank <= 5
ORDER BY Reputation DESC, PostAnswerCount DESC;