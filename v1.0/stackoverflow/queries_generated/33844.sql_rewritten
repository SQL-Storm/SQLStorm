WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        p.ParentId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        a.Id,
        a.Title,
        a.CreationDate,
        a.OwnerUserId,
        a.ParentId,
        rp.Level + 1
    FROM 
        Posts a
    INNER JOIN 
        RecursivePostHierarchy rp ON a.ParentId = rp.PostId
),

VoteSummary AS (
    SELECT 
        p.Id AS PostId,
        COUNT(v.Id) AS TotalVotes,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId IN (1, 2)  
    GROUP BY 
        p.Id
),

PostWithTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(TRIM(SUBSTRING(t.TagName, 1, 35)), ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        LATERAL string_to_array(p.Tags, ',') t ON true
    GROUP BY 
        p.Id
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    u.DisplayName AS OwnerDisplayName,
    COALESCE(vs.TotalVotes, 0) AS TotalVotes,
    COALESCE(vs.UpVotes, 0) AS UpVotes,
    COALESCE(vs.DownVotes, 0) AS DownVotes,
    COALESCE(pt.Tags, '<No Tags>') AS Tags,
    rp.Level,
    COUNT(c.Id) AS CommentCount
FROM 
    RecursivePostHierarchy rp
JOIN 
    Users u ON rp.OwnerUserId = u.Id
LEFT JOIN 
    VoteSummary vs ON rp.PostId = vs.PostId
LEFT JOIN 
    PostWithTags pt ON rp.PostId = pt.PostId
LEFT JOIN 
    Comments c ON rp.PostId = c.PostId
GROUP BY 
    rp.PostId, rp.Title, rp.CreationDate, u.DisplayName, vs.TotalVotes, vs.UpVotes, vs.DownVotes, pt.Tags, rp.Level
ORDER BY 
    rp.Level, rp.CreationDate DESC;