
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS RankByViews,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId 
    WHERE 
        p.CreationDate >= DATEADD(year, -1, CAST('2024-10-01' AS date))
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        ARRAY_AGG(b.Name) FILTER (WHERE b.Class = 1) AS GoldBadges,
        ARRAY_AGG(b.Name) FILTER (WHERE b.Class = 2) AS SilverBadges,
        ARRAY_AGG(b.Name) FILTER (WHERE b.Class = 3) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
HighlightedPosts AS (
    SELECT 
        rp.Id AS PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.OwnerUserId,
        ub.GoldBadges,
        ub.SilverBadges,
        ub.BronzeBadges,
        CASE 
            WHEN rp.RankByViews = 1 THEN 'Most Viewed Post'
            WHEN rp.UpVotes > rp.DownVotes THEN 'Popular Post'
            ELSE 'Regular Post'
        END AS PostType
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges ub ON rp.OwnerUserId = ub.UserId
)
SELECT 
    hp.PostId,
    hp.Title,
    hp.CreationDate,
    hp.Score,
    hp.ViewCount,
    hp.OwnerUserId,
    hp.GoldBadges,
    hp.SilverBadges,
    hp.BronzeBadges,
    hp.PostType,
    COALESCE((
        SELECT 
            STRING_AGG(c.Text, '; ' ORDER BY c.CreationDate DESC)
        FROM 
            Comments c
        WHERE 
            c.PostId = hp.PostId
    ), 'No comments yet') AS LatestComments
FROM 
    HighlightedPosts hp
WHERE 
    EXISTS (
        SELECT 1 
        FROM Posts p 
        WHERE p.OwnerUserId = hp.OwnerUserId AND p.ViewCount > 100
    )
ORDER BY 
    hp.Score DESC, hp.ViewCount DESC
LIMIT 100;
