
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(v.UpVoteCount, 0) AS UpVoteCount,
        COALESCE(v.DownVoteCount, 0) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN (
        SELECT 
            PostId, 
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount
        FROM Votes
        GROUP BY PostId
    ) v ON p.Id = v.PostId
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(u.UpVotes) AS TotalUpVotes,
        SUM(u.DownVotes) AS TotalDownVotes
    FROM 
        Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.DisplayName
),
PostComments AS (
    SELECT 
        PostId, 
        COUNT(*) AS CommentCount
    FROM Comments
    GROUP BY PostId
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.UpVoteCount,
        rp.DownVoteCount,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        CASE 
            WHEN rp.UpVoteCount - rp.DownVoteCount > 0 THEN 'Positive'
            WHEN rp.UpVoteCount - rp.DownVoteCount < 0 THEN 'Negative'
            ELSE 'Neutral'
        END AS VoteSentiment
    FROM 
        RankedPosts rp
    LEFT JOIN PostComments pc ON rp.PostId = pc.PostId
)
SELECT 
    pd.Title,
    pd.CreationDate,
    pd.UpVoteCount,
    pd.DownVoteCount,
    pd.CommentCount,
    pd.VoteSentiment,
    us.DisplayName,
    us.BadgeCount,
    us.TotalUpVotes,
    us.TotalDownVotes
FROM 
    PostDetails pd
JOIN 
    Users u ON pd.UpVoteCount > 10 AND u.Id = (SELECT MIN(UserId) FROM Votes WHERE PostId = pd.PostId)
JOIN 
    UserStats us ON us.UserId = u.Id
WHERE 
    pd.Rank <= 5
ORDER BY 
    pd.UpVoteCount DESC, 
    pd.CommentCount DESC;
