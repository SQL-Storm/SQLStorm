
WITH RecursivePostHistory AS (
    SELECT 
        p.Id AS PostId,
        ph.Id AS PostHistoryId,
        ph.CreationDate,
        ph.PostHistoryTypeId,
        ph.UserId,
        ph.UserDisplayName,
        1 AS Level
    FROM Posts p
    JOIN PostHistory ph ON p.Id = ph.PostId
    WHERE ph.PostHistoryTypeId IN (10, 11) 

    UNION ALL

    SELECT 
        p.Id,
        ph.Id,
        ph.CreationDate,
        ph.PostHistoryTypeId,
        ph.UserId,
        ph.UserDisplayName,
        Level + 1
    FROM Posts p
    JOIN PostHistory ph ON p.Id = ph.PostId
    JOIN RecursivePostHistory rph ON p.Id = rph.PostId
    WHERE ph.CreationDate < rph.CreationDate
)

SELECT 
    p.Title,
    u.DisplayName AS OwnerDisplayName,
    COUNT(DISTINCT c.Id) AS CommentCount,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes,
    (SELECT COUNT(*) 
     FROM Votes v2 
     WHERE v2.PostId = p.Id 
     AND v2.VoteTypeId IN (6, 7)) AS CloseOpenVoteCount,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
    RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) DESC) AS OwnerRank
FROM Posts p
JOIN Users u ON p.OwnerUserId = u.Id
LEFT JOIN Comments c ON p.Id = c.PostId
LEFT JOIN Votes v ON p.Id = v.PostId
LEFT JOIN LATERAL (
    SELECT STRING_AGG(DISTINCT ph.UserDisplayName, '; ') AS PostHistoryUsers
    FROM RecursivePostHistory rph
    JOIN Users ph ON rph.UserId = ph.Id
    WHERE rph.PostId = p.Id
) ph_user ON TRUE
LEFT JOIN Tags t ON t.Id IN (SELECT UNNEST(string_to_array(p.Tags, ','))::int)

WHERE p.CreationDate > (CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '30 days')
GROUP BY p.Id, p.Title, u.DisplayName
HAVING COUNT(c.Id) > 5 OR SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) > 20
ORDER BY p.Score DESC, p.LastActivityDate DESC
LIMIT 50;
