WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, u.DisplayName
),
TopQuestions AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.CreationDate,
        rp.OwnerDisplayName,
        (rp.UpVotes - rp.DownVotes) AS Score,
        rp.CommentCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.rn = 1 
)
SELECT 
    tq.PostId,
    tq.Title,
    LEFT(tq.Body, 200) AS ShortBody, 
    tq.CreationDate,
    tq.OwnerDisplayName,
    tq.Score,
    tq.CommentCount,
    (SELECT STRING_AGG(t.TagName, ', ') 
     FROM Tags t
     JOIN Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[]) 
     WHERE p.Id = tq.PostId
    ) AS Tags
FROM 
    TopQuestions tq
ORDER BY 
    tq.Score DESC, 
    tq.CreationDate DESC
LIMIT 10;