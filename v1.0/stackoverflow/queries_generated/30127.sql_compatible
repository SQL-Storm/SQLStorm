
WITH RECURSIVE UserBadgeCounts AS (
    SELECT 
        UserId,
        COUNT(*) AS BadgeCount
    FROM 
        Badges
    GROUP BY 
        UserId
),
PostVoteCounts AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
PostScores AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(pvc.UpVotes, 0) - COALESCE(pvc.DownVotes, 0) AS NetScore,
        COALESCE(pv.AnswerCount, 0) AS AnswerCount,
        COALESCE(uh.BadgeCount, 0) AS UserBadgeCount
    FROM 
        Posts p
    LEFT JOIN 
        PostVoteCounts pvc ON p.Id = pvc.PostId
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        UserBadgeCounts uh ON u.Id = uh.UserId
    LEFT JOIN (
        SELECT 
            ParentId, 
            COUNT(*) AS AnswerCount
        FROM 
            Posts
        WHERE 
            PostTypeId = 2
        GROUP BY 
            ParentId
    ) AS pv ON pv.ParentId = p.Id
    WHERE 
        p.CreationDate >= (CAST('2024-10-01 12:34:56' AS timestamp) - INTERVAL '1 year')
),
RecentActivity AS (
    SELECT 
        PostId,
        MAX(CreationDate) AS LastActivityDate
    FROM 
        Comments
    GROUP BY 
        PostId
),
FinalPostData AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CreationDate,
        ps.NetScore,
        ps.AnswerCount,
        ra.LastActivityDate,
        CASE 
            WHEN ra.LastActivityDate IS NULL THEN 'No Comments'
            ELSE 'Has Comments'
        END AS CommentStatus
    FROM 
        PostScores ps
    LEFT JOIN 
        RecentActivity ra ON ps.PostId = ra.PostId
)
SELECT 
    Title,
    CreationDate,
    NetScore,
    AnswerCount,
    LastActivityDate,
    CommentStatus,
    (CASE 
        WHEN UserBadgeCount > 5 THEN 'Expert'
        WHEN UserBadgeCount > 0 THEN 'Novice'
        ELSE 'New User'
     END) AS UserLevel
FROM 
    FinalPostData
ORDER BY 
    NetScore DESC, 
    CreationDate DESC
LIMIT 50;
