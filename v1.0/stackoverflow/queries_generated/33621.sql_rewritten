WITH RECURSIVE RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
),
UserScores AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS Upvotes,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS Downvotes
    FROM 
        Users u
        LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS HistoryDate,
        ph.Comment,
        p.Title,
        p.Score
    FROM 
        PostHistory ph
        INNER JOIN Posts p ON ph.PostId = p.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
),
MostActiveUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS ActivePostCount
    FROM 
        Users u
        JOIN Posts p ON u.Id = p.OwnerUserId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    u.DisplayName,
    u.TotalBounty,
    u.Upvotes,
    u.Downvotes,
    COUNT(DISTINCT pp.PostId) AS QuestionCount,
    COUNT(DISTINCT ph.PostId) AS HistoryEventCount,
    COALESCE(SUM(CASE WHEN pp.Rank <= 5 THEN 1 ELSE 0 END), 0) AS TopAnsweredQuestions,
    AVG(pp.Score) AS AvgScore,
    au.ActivePostCount
FROM 
    UserScores u
    LEFT JOIN RankedPosts pp ON u.UserId = pp.OwnerUserId
    LEFT JOIN PostHistoryDetails ph ON pp.PostId = ph.PostId
    LEFT JOIN MostActiveUsers au ON u.UserId = au.Id
GROUP BY 
    u.DisplayName, u.TotalBounty, u.Upvotes, u.Downvotes, au.ActivePostCount
ORDER BY 
    u.Upvotes DESC, u.Downvotes ASC;