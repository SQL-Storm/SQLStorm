
WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName AS UserDisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativePosts,
        SUM(p.ViewCount) AS TotalViews,
        SUM(b.Class) AS TotalBadgeClass,
        ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY COUNT(DISTINCT p.Id) DESC) AS PostRank 
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Badges b ON u.Id = b.UserId
    WHERE u.Reputation > 1000 OR u.Views IS NULL
    GROUP BY u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(rw.FirstEditDate, p.CreationDate) AS FirstEditDate,
        COALESCE(cl.TotalCloseCount, 0) AS TotalCloseCount,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        DENSE_RANK() OVER (ORDER BY COUNT(DISTINCT c.Id) DESC) AS CommentRank
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN (
        SELECT 
            p.Id,
            MIN(ph.CreationDate) AS FirstEditDate
        FROM Posts p
        JOIN PostHistory ph ON p.Id = ph.PostId
        WHERE ph.PostHistoryTypeId IN (4, 5) 
        GROUP BY p.Id
    ) rw ON p.Id = rw.Id
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS TotalCloseCount 
        FROM PostHistory 
        WHERE PostHistoryTypeId = 10 
        GROUP BY PostId
    ) cl ON p.Id = cl.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.CreationDate, rw.FirstEditDate
),
FinalOutput AS (
    SELECT 
        ua.UserId,
        ua.UserDisplayName,
        ps.PostId,
        ps.Title,
        ps.CreationDate,
        ps.FirstEditDate,
        ps.TotalCloseCount,
        ps.CommentCount,
        ps.UpVotes,
        ps.DownVotes,
        CASE 
            WHEN ps.TotalCloseCount > 0 THEN 'Closed'
            WHEN ps.CommentCount > 10 THEN 'Popular'
            ELSE 'Regular'
        END AS PostType,
        (ps.UpVotes - ps.DownVotes) AS NetScore
    FROM UserActivity ua
    JOIN PostStatistics ps ON ua.UserId = ps.OwnerUserId
)
SELECT 
    UserId,
    UserDisplayName,
    COUNT(PostId) AS TotalPosts,
    AVG(NetScore) AS AverageNetScore,
    SUM(CASE WHEN PostType = 'Closed' THEN 1 ELSE 0 END) AS ClosedPostCount,
    STRING_AGG(DISTINCT Title, '; ') AS Titles,
    MIN(CreationDate) AS EarliestPost,
    MAX(CreationDate) AS MostRecentPost
FROM FinalOutput
GROUP BY UserId, UserDisplayName
HAVING COUNT(PostId) > 5
ORDER BY AverageNetScore DESC, TotalPosts DESC
LIMIT 50;
