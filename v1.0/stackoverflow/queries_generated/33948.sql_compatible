
WITH RECURSIVE PostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        p.CreationDate,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL
    
    UNION ALL
    
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        ph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        PostHierarchy ph ON p.ParentId = ph.PostId
),
PostVotes AS (
    SELECT 
        v.PostId,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(*) AS TotalVotes
    FROM 
        Votes v
    GROUP BY 
        v.PostId
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges,
        COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges,
        COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)

SELECT 
    ph.PostId,
    ph.Title,
    ph.Level,
    COALESCE(pv.UpVotes, 0) AS UpVotes,
    COALESCE(pv.DownVotes, 0) AS DownVotes,
    COALESCE(pv.TotalVotes, 0) AS TotalVotes,
    u.DisplayName AS OwnerDisplayName,
    u.Reputation,
    ub.GoldBadges,
    ub.SilverBadges,
    ub.BronzeBadges,
    CASE 
        WHEN ph.Level > 0 THEN 'Answer'
        WHEN ph.Level = 0 THEN 'Question'
        ELSE 'Unknown'
    END AS PostType
FROM 
    PostHierarchy ph
LEFT JOIN 
    PostVotes pv ON ph.PostId = pv.PostId
LEFT JOIN 
    Users u ON u.Id IN (SELECT OwnerUserId FROM Posts WHERE Id = ph.PostId)
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
WHERE 
    ph.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 year'
ORDER BY 
    ph.Level, UpVotes DESC;
