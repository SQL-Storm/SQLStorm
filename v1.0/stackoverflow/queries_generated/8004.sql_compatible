
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        u.DisplayName AS OwnerDisplayName,
        RANK() OVER (PARTITION BY pt.Name ORDER BY p.Score DESC, p.CreationDate DESC) AS ScoreRank
    FROM 
        Posts p
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
        AND p.Score > 0
), PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM 
        Tags t 
    JOIN 
        Posts p ON t.Id = ANY(string_to_array(p.Tags, ',')::text[])
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(p.Id) > 10
), CombinedData AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.AnswerCount,
        rp.OwnerDisplayName,
        pt.Name AS PostType,
        (SELECT ARRAY_AGG(tag.TagName) FROM Tags tag JOIN Posts post ON tag.Id = ANY(string_to_array(post.Tags, ',')::text[]) WHERE post.Id = rp.PostId) AS Tags
    FROM 
        RankedPosts rp
    JOIN 
        PopularTags pt ON pt.PostCount > 10
)
SELECT 
    cd.*,
    COALESCE(badge.Count, 0) AS BadgeCount
FROM 
    CombinedData cd
LEFT JOIN (
    SELECT 
        UserId,
        COUNT(*) AS Count
    FROM 
        Badges
    WHERE 
        Class = 1 
    GROUP BY 
        UserId
) badge ON badge.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = cd.PostId)
ORDER BY 
    cd.Score DESC, cd.CreationDate DESC
LIMIT 100;
