WITH ReformattedTags AS (
    SELECT 
        p.Id AS PostId,
        UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')) AS Tag
    FROM Posts p
),
PostActivity AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT CASE WHEN v.VoteTypeId = 2 THEN v.Id END) AS UpVotes,
        COUNT(DISTINCT CASE WHEN v.VoteTypeId = 3 THEN v.Id END) AS DownVotes,
        COUNT(DISTINCT bh.Id) AS EditCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN PostHistory bh ON p.Id = bh.PostId AND bh.PostHistoryTypeId IN (4, 5, 6)
    WHERE p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days' 
    GROUP BY p.Id
),
ActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(b.Class) AS TotalBadges,
        COUNT(DISTINCT p.Id) AS TotalPosts
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    WHERE u.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY u.Id
),
RecentPostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        pa.CommentCount,
        pa.UpVotes,
        pa.DownVotes,
        STRING_AGG(r.Tag, ', ') AS Tags
    FROM Posts p
    INNER JOIN PostActivity pa ON p.Id = pa.PostId
    LEFT JOIN ReformattedTags r ON p.Id = r.PostId
    WHERE p.PostTypeId = 1  
    GROUP BY p.Id, pa.CommentCount, pa.UpVotes, pa.DownVotes
    ORDER BY p.CreationDate DESC 
    LIMIT 10
)
SELECT 
    p.Title,
    p.CreationDate,
    u.DisplayName AS Author,
    p.CommentCount,
    p.UpVotes,
    p.DownVotes,
    p.Tags,
    u.TotalBadges AS AuthorBadges,
    u.TotalPosts AS AuthorPosts
FROM RecentPostStats p
JOIN ActiveUsers u ON p.OwnerUserId = u.UserId
ORDER BY p.UpVotes DESC, p.CommentCount DESC;