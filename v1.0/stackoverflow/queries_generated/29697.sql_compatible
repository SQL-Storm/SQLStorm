
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.CreationDate,
        p.ViewCount,
        u.DisplayName AS Author,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.ViewCount DESC) AS TagRank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COALESCE(SUM(b.Class), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId 
    WHERE 
        p.PostTypeId = 1 AND  
        p.CreationDate >= DATEADD(year, -1, '2024-10-01') 
    GROUP BY 
        p.Id, u.DisplayName, p.Title, p.Body, p.Tags, p.CreationDate, p.ViewCount
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Body,
        Tags,
        CreationDate,
        ViewCount,
        Author,
        CommentCount,
        UpVotes,
        DownVotes,
        GoldBadges,
        SilverBadges,
        BronzeBadges
    FROM 
        RankedPosts
    WHERE 
        TagRank <= 5  
)
SELECT 
    tp.*,
    ARRAY_AGG(DISTINCT t.TagName) AS RelatedTags
FROM 
    TopPosts tp
LEFT JOIN 
    Tags t ON t.TagName = ANY(STRING_SPLIT(tp.Tags, ','))
GROUP BY 
    tp.PostId, tp.Title, tp.Body, tp.Tags, tp.CreationDate, tp.ViewCount, tp.Author, 
    tp.CommentCount, tp.UpVotes, tp.DownVotes, tp.GoldBadges, tp.SilverBadges, tp.BronzeBadges
ORDER BY 
    tp.ViewCount DESC, 
    tp.CreationDate DESC;
