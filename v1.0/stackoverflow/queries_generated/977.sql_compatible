
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS UpVotesCount,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentsCount,
        COUNT(b.Id) OVER (PARTITION BY u.Id) AS BadgesCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE
        p.CreationDate >= DATEADD(year, -1, CURRENT_TIMESTAMP)
        AND p.PostTypeId IN (1, 2) 
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerDisplayName,
        rp.Score,
        rp.ViewCount,
        rp.UpVotesCount,
        rp.CommentsCount,
        rp.BadgesCount,
        CASE 
            WHEN rp.Score > 10 THEN 'High-Scoring'
            WHEN rp.Score BETWEEN 1 AND 10 THEN 'Moderate'
            ELSE 'Low'
        END AS ScoreCategory
    FROM 
        RankedPosts rp
),
PostStatistics AS (
    SELECT 
        pd.ScoreCategory,
        COUNT(pd.PostId) AS PostCount,
        AVG(pd.ViewCount) AS AverageViews,
        SUM(pd.UpVotesCount) AS TotalUpVotes,
        SUM(pd.CommentsCount) AS TotalComments,
        SUM(pd.BadgesCount) AS TotalBadges
    FROM 
        PostDetails pd
    GROUP BY 
        pd.ScoreCategory
)
SELECT 
    ps.ScoreCategory,
    ps.PostCount,
    ps.AverageViews,
    ps.TotalUpVotes,
    ps.TotalComments,
    ps.TotalBadges
FROM 
    PostStatistics ps
ORDER BY 
    ps.PostCount DESC;
