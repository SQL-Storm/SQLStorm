
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.ParentId, 
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
    UNION ALL
    SELECT 
        p.Id, 
        p.Title, 
        p.ParentId, 
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
PostMetrics AS (
    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        MAX(ph.CreationDate) AS LastEditDate,
        CASE 
            WHEN p.ClosedDate IS NOT NULL THEN 'Closed'
            ELSE 'Open'
        END AS Status
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id, p.Title, p.OwnerUserId
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
ActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(ub.BadgeCount, 0) AS BadgeCount,
        COALESCE(ub.BadgeNames, 'None') AS BadgeNames,
        SUM(p.ViewCount) AS TotalViews,
        MAX(p.LastActivityDate) AS RecentActivity
    FROM 
        Users u
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
FinalMetrics AS (
    SELECT 
        a.UserId,
        a.DisplayName,
        COUNT(pm.Id) AS PostCount,
        SUM(a.TotalViews) AS TotalViews,
        MAX(a.RecentActivity) AS LastActive,
        MAX(pm.CommentCount) AS MaxCommentsOnPost,
        MAX(pm.VoteCount) AS MaxVotesOnPost,
        MAX(a.BadgeCount) AS BadgeCount,
        STRING_AGG(DISTINCT a.BadgeNames, '; ') AS Badges
    FROM 
        ActiveUsers a
    LEFT JOIN 
        PostMetrics pm ON a.UserId = pm.OwnerUserId
    GROUP BY 
        a.UserId, a.DisplayName
)
SELECT 
    f.UserId,
    f.DisplayName,
    f.PostCount,
    f.TotalViews,
    f.LastActive,
    f.MaxCommentsOnPost,
    f.MaxVotesOnPost,
    f.BadgeCount,
    f.Badges
FROM 
    FinalMetrics f
ORDER BY 
    f.TotalViews DESC, 
    f.PostCount DESC
LIMIT 10;
