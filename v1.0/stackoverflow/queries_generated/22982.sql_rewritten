WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS ViewRank,
        RANK() OVER (ORDER BY p.Score DESC) AS ScoreRank
    FROM
        Posts p
    WHERE
        p.CreationDate >= (cast('2024-10-01' as date) - INTERVAL '1 year')
        AND p.ViewCount IS NOT NULL
),
FilteredPosts AS (
    SELECT
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.CreationDate,
        rp.Score,
        CASE
            WHEN rp.ViewRank <= 5 THEN 'Top 5 View Count'
            WHEN rp.ScoreRank <= 10 THEN 'Top 10 Score'
            ELSE 'Other'
        END AS PostCategory
    FROM
        RankedPosts rp
)
SELECT
    fp.Title,
    fp.ViewCount,
    fp.Score,
    COUNT(c.Id) AS CommentCount,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
    CASE
        WHEN MAX(pht.CreationDate) IS NOT NULL THEN 'Edited'
        ELSE 'Not Edited'
    END AS EditStatus,
    STRING_AGG(DISTINCT t.TagName, ', ') AS TagsList
FROM
    FilteredPosts fp
LEFT JOIN
    Comments c ON c.PostId = fp.PostId
LEFT JOIN
    Votes v ON v.PostId = fp.PostId
LEFT JOIN
    PostHistory pht ON pht.PostId = fp.PostId AND pht.PostHistoryTypeId IN (4, 5, 6)
LEFT JOIN
    PostsTags pt ON pt.PostId = fp.PostId  
LEFT JOIN
    Tags t ON t.Id = pt.TagId  
GROUP BY
    fp.Title, fp.ViewCount, fp.Score
HAVING
    COUNT(c.Id) > 0 OR SUM(v.VoteTypeId) IS NULL  
ORDER BY
    fp.Score DESC NULLS LAST,
    fp.ViewCount DESC NULLS LAST;