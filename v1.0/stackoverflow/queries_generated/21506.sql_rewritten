WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.Tags,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RankByDate,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVoteCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= (cast('2024-10-01' as date) - INTERVAL '30 days')
    GROUP BY 
        p.Id
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS EditCount,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
),
UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(p.ViewCount) AS TotalViews,
        SUM(b.Class = 1)::INT AS GoldBadges,
        SUM(b.Class = 2)::INT AS SilverBadges,
        SUM(b.Class = 3)::INT AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    up.UserId,
    up.DisplayName,
    COALESCE(rp.PostId, 0) AS LatestPostId,
    COALESCE(rp.Title, 'No Posts') AS LatestPostTitle,
    COALESCE(rp.CreationDate, 'N/A') AS LatestPostCreationDate,
    COALESCE(rp.ViewCount, 0) AS LatestPostViews,
    COALESCE(rp.Score, 0) AS LatestPostScore,
    poh.EditCount,
    poh.HistoryTypes,
    poh.LastEditDate,
    up.TotalPosts,
    up.TotalViews,
    up.GoldBadges,
    up.SilverBadges,
    up.BronzeBadges
FROM 
    UserEngagement up
LEFT JOIN 
    RankedPosts rp ON up.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = rp.PostId LIMIT 1)
LEFT JOIN 
    PostHistorySummary poh ON rp.PostId = poh.PostId
WHERE 
    up.TotalPosts > 0
ORDER BY 
    up.TotalViews DESC, 
    up.TotalPosts DESC
LIMIT 50;