
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.PostTypeId,
        p.CreationDate,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        DENSE_RANK() OVER (PARTITION BY p.PostTypeId ORDER BY COUNT(c.Id) DESC) AS RankByComments,
        RANK() OVER (ORDER BY p.CreationDate ASC) AS CreationRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        (p.PostTypeId IN (1, 2) AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year') 
        OR (p.PostTypeId = 3 AND p.Title IS NOT NULL)
    GROUP BY 
        p.Id, p.Title, p.PostTypeId, p.CreationDate
),
PostHistoryData AS (
    SELECT 
        ph.PostId,
        COUNT(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 END) AS CloseCount,
        MAX(CASE WHEN ph.PostHistoryTypeId = 52 THEN ph.CreationDate END) AS LastHotDate
    FROM 
        PostHistory ph
    GROUP BY 
        ph.PostId
),
FinalPostAggregation AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.PostTypeId,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        COALESCE(ph.CloseCount, 0) AS CloseCount,
        CASE 
            WHEN ph.LastHotDate IS NOT NULL THEN 'Hot' 
            ELSE 'Normal' 
        END AS HotStatus,
        CASE 
            WHEN rp.RankByComments <= 5 THEN 'Top 5' 
            WHEN rp.UpVotes > 10 THEN 'Popular' 
            ELSE 'Regular' 
        END AS PostCategory
    FROM 
        RankedPosts rp
    LEFT JOIN 
        PostHistoryData ph ON rp.PostId = ph.PostId
)
SELECT 
    fa.PostId,
    fa.Title,
    fa.PostTypeId,
    fa.CommentCount,
    fa.UpVotes - fa.DownVotes AS NetVotes,
    fa.CloseCount,
    fa.HotStatus,
    fa.PostCategory
FROM 
    FinalPostAggregation fa
WHERE 
    fa.CloseCount = 0 
    AND fa.PostTypeId IN (1, 2)
    AND (fa.UpVotes - fa.DownVotes > 0 OR fa.CommentCount > 5)
ORDER BY 
    fa.NetVotes DESC, fa.CommentCount DESC, fa.PostId
LIMIT 100;
