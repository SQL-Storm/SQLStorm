
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= '2024-10-01 12:34:56'::timestamp - INTERVAL '1 year'
        AND p.Score >= 10
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
ClosedPostCounts AS (
    SELECT 
        ph.UserId,
        COUNT(DISTINCT ph.PostId) AS ClosedPostsCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10
        AND ph.CreationDate >= '2024-10-01 12:34:56'::timestamp - INTERVAL '6 months'
    GROUP BY 
        ph.UserId
)
SELECT 
    u.DisplayName,
    p.Title,
    p.CreationDate,
    p.Score,
    COALESCE(b.BadgeCount, 0) AS BadgeCount,
    COALESCE(b.BadgeNames, 'None') AS BadgeNames,
    COALESCE(c.ClosedPostsCount, 0) AS ClosedPostsCount,
    CASE 
        WHEN p.Score IS NULL THEN 'No score available'
        WHEN p.Score < 0 THEN 'Negative score'
        ELSE 'Valid score'
    END AS ScoreStatus,
    CASE 
        WHEN LENGTH(p.Title) > 100 THEN 'Title too long'
        ELSE 'Title length acceptable'
    END AS TitleStatus,
    CASE 
        WHEN EXISTS (SELECT 1 FROM Votes v WHERE v.PostId = p.PostId AND v.VoteTypeId = 3) THEN 'Has downvotes'
        ELSE 'No downvotes'
    END AS DownvoteStatus
FROM 
    RankedPosts p
JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    UserBadges b ON u.Id = b.UserId
LEFT JOIN 
    ClosedPostCounts c ON u.Id = c.UserId
WHERE 
    p.rn = 1
GROUP BY 
    u.DisplayName, p.Title, p.CreationDate, p.Score, b.BadgeCount, b.BadgeNames, c.ClosedPostsCount
ORDER BY 
    p.Score DESC, BadgeCount DESC
LIMIT 50;
