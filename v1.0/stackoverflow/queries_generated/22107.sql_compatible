
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS Rank,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) OVER (PARTITION BY p.Id) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(day, -30, CURRENT_TIMESTAMP)
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.Reputation, u.DisplayName
),
FilteredUsers AS (
    SELECT 
        ur.UserId,
        ur.DisplayName,
        ur.Reputation,
        CASE 
            WHEN ur.Reputation > 1000 THEN 'High'
            WHEN ur.Reputation BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low' 
        END AS ReputationLevel,
        ur.BadgeCount
    FROM 
        UserReputation ur
    WHERE 
        ur.Reputation IS NOT NULL
        AND (ur.BadgeCount IS NULL OR ur.BadgeCount > 2)
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score AS PostScore,
        rp.ViewCount,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        fu.DisplayName AS OwnerDisplayName,
        fu.ReputationLevel
    FROM 
        RankedPosts rp
    JOIN 
        FilteredUsers fu ON rp.Rank = 1 
)
SELECT 
    pd.*,
    CASE 
        WHEN pd.UpVotes + pd.DownVotes = 0 THEN 'No votes'
        ELSE CONCAT(CAST(pd.UpVotes AS VARCHAR), '/', CAST(pd.DownVotes AS VARCHAR)) 
    END AS VoteRatio,
    COALESCE(pd.CommentCount, 0) AS SafeCommentCount,
    CASE 
        WHEN pd.PostScore - COALESCE(pd.CommentCount, 0) < 0 
        THEN ABS(pd.PostScore - COALESCE(pd.CommentCount, 0)) 
        ELSE pd.PostScore - COALESCE(pd.CommentCount, 0) 
    END AS AdjustedScore
FROM 
    PostDetails pd
WHERE 
    pd.ViewCount IS NOT NULL
ORDER BY 
    pd.CreationDate DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
