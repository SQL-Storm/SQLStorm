WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, GETDATE()) 
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreationDate, u.DisplayName
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.OwnerDisplayName,
        rp.Rank,
        rp.CommentCount,
        rp.UpVotes,
        rp.DownVotes,
        CASE 
            WHEN rp.Score > 100 THEN 'High Score'
            WHEN rp.Score BETWEEN 51 AND 100 THEN 'Medium Score'
            ELSE 'Low Score'
        END AS ScoreCategory
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5 
),
TopPosts AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.OwnerDisplayName,
        fp.ScoreCategory,
        fp.CommentCount,
        fp.UpVotes,
        fp.DownVotes
    FROM 
        FilteredPosts fp
    UNION ALL
    SELECT 
        fp.PostId,
        fp.Title,
        fp.OwnerDisplayName,
        fp.ScoreCategory,
        fp.CommentCount,
        fp.UpVotes,
        fp.DownVotes
    FROM 
        FilteredPosts fp
    WHERE 
        fp.CommentCount > 10
)
SELECT 
    tp.Title,
    tp.OwnerDisplayName,
    tp.ScoreCategory,
    tp.CommentCount,
    tp.UpVotes,
    tp.DownVotes,
    ISNULL((SELECT COUNT(DISTINCT pl.RelatedPostId) 
             FROM PostLinks pl 
             WHERE pl.PostId = tp.PostId), 0) AS RelatedPostCount
FROM 
    TopPosts tp
ORDER BY 
    tp.UpVotes DESC, tp.CommentCount DESC;