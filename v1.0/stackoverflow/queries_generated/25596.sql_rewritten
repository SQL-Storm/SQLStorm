WITH TagStats AS (
    SELECT
        t.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        AVG(COALESCE(p.ViewCount, 0)) AS AvgViews
    FROM
        Tags t
    LEFT JOIN
        Posts p ON t.Id = ANY(string_to_array(p.Tags, '><')::int[])
    WHERE
        t.Count > 0
    GROUP BY
        t.TagName
),
UserStats AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers,
        SUM(ba.Class) AS TotalBadges
    FROM
        Users u
    LEFT JOIN
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN
        Badges ba ON u.Id = ba.UserId
    GROUP BY
        u.Id, u.DisplayName
),
PostHistoryStats AS (
    SELECT
        ph.PostId,
        COUNT(*) AS EditCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM
        PostHistory ph
    WHERE
        ph.PostHistoryTypeId IN (4, 5, 6, 24)  
    GROUP BY
        ph.PostId
)
SELECT
    ts.TagName,
    ts.PostCount,
    ts.QuestionCount,
    ts.AnswerCount,
    ts.AvgViews,
    us.UserId,
    us.DisplayName,
    us.PostCount AS UserPostCount,
    us.Questions,
    us.Answers,
    us.TotalBadges,
    phs.EditCount,
    phs.LastEditDate
FROM
    TagStats ts
JOIN
    UserStats us ON us.PostCount > 0
LEFT JOIN
    PostHistoryStats phs ON phs.PostId IN (
        SELECT Id FROM Posts WHERE Tags LIKE '%' || ts.TagName || '%'
    )
ORDER BY
    ts.PostCount DESC, us.TotalBadges DESC
LIMIT 10;