
WITH UserReputation AS (
    SELECT 
        Id AS UserId, 
        Reputation, 
        CreationDate,
        CASE 
            WHEN Reputation IS NULL THEN 0 
            ELSE Reputation 
        END AS EffectiveReputation
    FROM Users
),
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.OwnerUserId,
        COALESCE(ph.Comment, 'No historical comments') AS HistoryComment,
        COUNT(c.Id) AS CommentCount,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpvoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId IN (4, 5)
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate > DATEADD(year, -1, CAST('2024-10-01 12:34:56' AS timestamp))
    GROUP BY p.Id, p.Title, p.CreationDate, p.OwnerUserId, ph.Comment
),
TopPosts AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.CreationDate,
        pd.CommentCount,
        pd.UpvoteCount,
        ur.EffectiveReputation,
        DENSE_RANK() OVER (PARTITION BY ur.EffectiveReputation ORDER BY pd.UpvoteCount DESC) AS ReputationRank
    FROM PostDetails pd
    INNER JOIN UserReputation ur ON pd.OwnerUserId = ur.UserId
    WHERE pd.CommentCount > 5
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.CommentCount,
    tp.UpvoteCount,
    tp.EffectiveReputation,
    CASE 
        WHEN tp.ReputationRank = 1 THEN 'Top Post' 
        ELSE 'Regular Post' 
    END AS PostCategory,
    (SELECT STRING_AGG(DISTINCT 'Comment by user: ' || COALESCE(c.UserDisplayName, 'Anonymous'), '; ') 
     FROM Comments c 
     WHERE c.PostId = tp.PostId) AS UserComments
FROM TopPosts tp
WHERE tp.ReputationRank <= 3
ORDER BY tp.EffectiveReputation DESC, tp.UpvoteCount DESC;
