
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS Upvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS Downvotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RN
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.ViewCount > 100
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score
),
HighScorePosts AS (
    SELECT 
        rp.*,
        (Upvotes - Downvotes) AS VoteBalance,
        CASE 
            WHEN COUNT(c.Id) > 5 THEN 'Popular'
            ELSE 'Less Active'
        END AS ActivityLevel
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Comments c ON rp.PostId = c.PostId
    WHERE 
        rp.Score > 50
    GROUP BY 
        rp.PostId, rp.Title, rp.CreationDate, rp.Score, Upvotes, Downvotes
),
PostHistorySummary AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(DISTINCT pt.Name, ', ') AS PostHistoryTypes,
        MAX(ph.CreationDate) AS LastEdited
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    LEFT JOIN 
        PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    GROUP BY 
        p.Id
)

SELECT 
    hsp.PostId,
    hsp.Title,
    hsp.CreationDate,
    hsp.Score,
    hsp.VoteBalance,
    hsp.ActivityLevel,
    phs.PostHistoryTypes,
    phs.LastEdited
FROM 
    HighScorePosts hsp
JOIN 
    PostHistorySummary phs ON hsp.PostId = phs.PostId
WHERE 
    hsp.RN = 1
ORDER BY 
    hsp.VoteBalance DESC,
    hsp.Title;
