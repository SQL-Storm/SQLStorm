WITH RecursivePostChain AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.LastActivityDate,
        p.PostTypeId,
        p.AcceptedAnswerId,
        1 AS Level
    FROM
        Posts p
    WHERE
        p.PostTypeId = 1  

    UNION ALL

    SELECT
        a.Id AS PostId,
        a.Title,
        a.OwnerUserId,
        a.LastActivityDate,
        a.PostTypeId,
        a.AcceptedAnswerId,
        Level + 1
    FROM
        Posts a
    INNER JOIN RecursivePostChain q ON a.ParentId = q.PostId
    WHERE
        a.PostTypeId = 2  
)

, UserActivity AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS QuestionCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        SUM(v.BountyAmount) AS TotalBounties,
        ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT p.Id) DESC) AS Rank
    FROM
        Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1  
    LEFT JOIN Posts a ON u.Id = a.OwnerUserId AND a.PostTypeId = 2  
    LEFT JOIN Votes v ON v.UserId = u.Id
    GROUP BY
        u.Id, u.DisplayName
)

SELECT
    up.DisplayName,
    up.QuestionCount,
    up.AnswerCount,
    up.TotalBounties,
    COALESCE(SUM(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END), 0) AS ClosedPosts,
    COALESCE(SUM(CASE WHEN ph.PostHistoryTypeId = 11 THEN 1 END), 0) AS ReopenedPosts,
    CASE 
        WHEN up.QuestionCount > 0 THEN 
            ROUND((up.AnswerCount / NULLIF(up.QuestionCount, 0)) * 100, 2)
        ELSE 
            0 
    END AS AnswerRate,
    STRING_AGG(DISTINCT t.TagName, ', ') AS PopularTags
FROM
    UserActivity up
LEFT JOIN Posts p ON up.UserId = p.OwnerUserId
LEFT JOIN PostHistory ph ON p.Id = ph.PostId
LEFT JOIN LATERAL (
    SELECT
        DISTINCT unnest(string_to_array(p.Tags, '><')) AS TagName
) t ON true
WHERE
    up.Rank <= 10  
GROUP BY
    up.DisplayName, up.QuestionCount, up.AnswerCount, up.TotalBounties
ORDER BY
    up.QuestionCount DESC;