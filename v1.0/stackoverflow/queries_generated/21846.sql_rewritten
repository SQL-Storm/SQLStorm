WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        CASE 
            WHEN p.Score IS NULL THEN 'No Score'
            WHEN p.Score > 100 THEN 'High Score'
            ELSE 'Moderate Score'
        END AS ScoreCategory
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(v.BountyAmount) AS TotalBounties,
        AVG(p.Score) AS AvgPostScore
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount,
        MAX(c.CreationDate) AS LastCommentDate
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        GROUP_CONCAT(DISTINCT cr.Name) AS CloseReasons,
        COUNT(DISTINCT ph.UserId) AS TotalCloseUsers
    FROM 
        PostHistory ph
    INNER JOIN 
        CloseReasonTypes cr ON ph.Comment::int = cr.Id
    WHERE 
        ph.PostHistoryTypeId = 10
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    rp.ScoreCategory,
    us.BadgeCount,
    us.TotalBounties,
    us.AvgPostScore,
    pc.CommentCount,
    pc.LastCommentDate,
    cp.CloseReasons,
    cp.TotalCloseUsers
FROM 
    RankedPosts rp
LEFT JOIN 
    UserStats us ON us.UserId = rp.Id
LEFT JOIN 
    PostComments pc ON pc.PostId = rp.PostId
LEFT JOIN 
    ClosedPosts cp ON cp.PostId = rp.PostId
WHERE 
    rp.Rank <= 5
    AND (rp.ScoreCategory = 'High Score' OR us.TotalBounties > 50)
ORDER BY 
    rp.Score DESC, us.BadgeCount DESC
OPTION (RECOMPILE);