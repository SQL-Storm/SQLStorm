WITH PostAggregates AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBounty,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        MAX(p.CreationDate) AS LatestPostDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8 
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
        AND p.ViewCount > 100
    GROUP BY 
        p.Id
),
RankedPosts AS (
    SELECT 
        pa.PostId,
        pa.Title,
        pa.CommentCount,
        pa.TotalBounty,
        pa.BadgeCount,
        pa.LatestPostDate,
        RANK() OVER (ORDER BY pa.CommentCount DESC, pa.TotalBounty DESC) AS PostRank
    FROM 
        PostAggregates pa
)
SELECT 
    rp.Title,
    rp.CommentCount,
    rp.TotalBounty,
    rp.BadgeCount,
    CASE 
        WHEN rp.BadgeCount IS NULL THEN 'No Badges'
        ELSE 'Has Badges'
    END AS BadgeStatus,
    ARRAY_AGG(DISTINCT CONCAT(t.TagName, ' (', t.Count, ')')) AS Tags
FROM 
    RankedPosts rp
LEFT JOIN 
    UNNEST(STRING_TO_ARRAY((SELECT STRING_AGG(Tags, ', ') FROM Posts WHERE Id = rp.PostId), ', ')) AS tag_name ON true
LEFT JOIN 
    Tags t ON t.TagName = tag_name
WHERE 
    rp.PostRank <= 10
GROUP BY 
    rp.Title, rp.CommentCount, rp.TotalBounty, rp.BadgeCount
ORDER BY 
    rp.PostRank;