WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS Rank,
        ARRAY_AGG(DISTINCT t.TagName) AS TagsArray
    FROM Posts p
    LEFT JOIN Tags t ON t.ExcerptPostId = p.Id
    GROUP BY p.Id
), 

UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        CASE 
            WHEN u.Reputation IS NULL THEN 'Unknown'
            WHEN u.Reputation > 1000 THEN 'High'
            WHEN u.Reputation BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS ReputationCategory
    FROM Users u
), 

ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        ph.Comment,
        MAX(ph.CreationDate) AS LastClosedDate
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY ph.PostId, ph.UserId, ph.Comment
),

ViewCounts AS (
    SELECT 
        p.Id AS PostId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM Posts p
    LEFT JOIN Comments c ON c.PostId = p.Id
    LEFT JOIN Votes v ON v.PostId = p.Id
    GROUP BY p.Id
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.TagsArray,
    ur.Reputation,
    ur.ReputationCategory,
    COALESCE(cp.LastClosedDate, 'Never') AS LastClosedDate,
    vc.CommentCount,
    vc.Upvotes,
    vc.Downvotes
FROM RankedPosts rp
JOIN UserReputation ur ON ur.UserId = rp.PostId  
LEFT JOIN ClosedPosts cp ON cp.PostId = rp.PostId 
LEFT JOIN ViewCounts vc ON vc.PostId = rp.PostId
WHERE rp.Rank <= 5
  AND (rp.Score > 0 OR rp.ViewCount > 100)
  AND ur.ReputationCategory IN ('Medium', 'High') 
ORDER BY rp.ViewCount DESC, rp.CreationDate DESC;