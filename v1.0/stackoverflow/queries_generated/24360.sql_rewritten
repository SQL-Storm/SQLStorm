WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.PostTypeId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankByScore,
        COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS TotalPosts
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
), 

PopularTags AS (
    SELECT 
        UNNEST(string_to_array(p.Tags, '><')) AS Tag
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 AND p.Score > (
            SELECT AVG(Score) 
            FROM Posts 
            WHERE PostTypeId = 1
        )
),

UserStats AS (
    SELECT 
        u.Id AS UserId,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT p.Id) FILTER (WHERE p.AcceptedAnswerId IS NOT NULL) AS AcceptedAnswers,
        SUM(COALESCE(b.Class, 0)) AS TotalBadgeClass, 
        SUM(V.DoteCount) AS TotalVotes,
        COUNT(DISTINCT CASE WHEN b.TagBased = 1 THEN b.Id END) AS TagBadges
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId AND p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN (
        SELECT 
            PostId, COUNT(*) AS DoteCount
        FROM 
            Votes
        WHERE 
            VoteTypeId IN (2, 3)  
        GROUP BY 
            PostId
    ) V ON p.Id = V.PostId
    GROUP BY 
        u.Id
)

SELECT 
    u.Id AS UserId,
    u.DisplayName,
    us.TotalPosts,
    us.AcceptedAnswers,
    us.TotalBadgeClass,
    us.TagBadges,
    ARRAY_AGG(DISTINCT pt.Tag) AS PopularTags,
    rp.PostId AS TopPostId,
    rp.Title AS TopPostTitle,
    rp.Score AS TopPostScore,
    rp.ViewCount AS TopPostViews
FROM 
    Users u
LEFT JOIN 
    UserStats us ON u.Id = us.UserId
LEFT JOIN 
    RankedPosts rp ON u.Id = rp.OwnerUserId AND rp.RankByScore = 1
LEFT JOIN 
    (SELECT DISTINCT Tag FROM PopularTags) pt ON TRUE
WHERE 
    us.TotalPosts IS NOT NULL
GROUP BY 
    u.Id, us.TotalPosts, us.AcceptedAnswers, us.TotalBadgeClass, us.TagBadges, rp.PostId, rp.Title, rp.Score, rp.ViewCount
ORDER BY 
    us.TotalPosts DESC, us.AcceptedAnswers DESC, u.Reputation DESC
LIMIT 10;