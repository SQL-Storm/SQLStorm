
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9) 
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, '2024-10-01') 
        AND p.ViewCount IS NOT NULL
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.CreationDate, p.Score, p.PostTypeId
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.CommentCount,
        rp.TotalBounty,
        COALESCE(NULLIF(rp.ViewCount - rp.CommentCount, 0), NULL) AS EffectiveViewCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5 
),
PostDetails AS (
    SELECT 
        fp.PostId,
        fp.Title,
        fp.ViewCount,
        fp.Score,
        fp.CommentCount,
        fp.TotalBounty,
        STRING_AGG(t.TagName, ', ') AS TagsList
    FROM 
        FilteredPosts fp
    LEFT JOIN 
        LATERAL (
            SELECT 
                STRING_AGG(t.TagName, ', ') AS TagName
            FROM 
                UNNEST(STRING_TO_ARRAY(fp.Tags, ',')) AS tag
            JOIN 
                Tags t ON t.TagName = TRIM(tag)
        ) AS t ON TRUE
    GROUP BY 
        fp.PostId, fp.Title, fp.ViewCount, fp.Score, fp.CommentCount, fp.TotalBounty
)
SELECT 
    pd.Title,
    pd.ViewCount,
    pd.Score,
    pd.CommentCount,
    pd.TotalBounty,
    pd.TagsList,
    CASE 
        WHEN pd.EffectiveViewCount IS NULL THEN 'No Effective Views'
        ELSE 'Effective Views Count: ' || CAST(pd.EffectiveViewCount AS VARCHAR)
    END AS EffectiveViews,
    CASE 
        WHEN pd.Score > 100 THEN 'Highly Rated'
        WHEN pd.Score BETWEEN 50 AND 100 THEN 'Moderately Rated'
        ELSE 'Low Rated'
    END AS RatingStatus
FROM 
    PostDetails pd
ORDER BY 
    pd.Score DESC, pd.ViewCount DESC
LIMIT 10;
