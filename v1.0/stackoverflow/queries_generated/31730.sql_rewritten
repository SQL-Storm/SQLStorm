WITH RecursivePost AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.AcceptedAnswerId,
        p.OwnerUserId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        a.Id,
        a.Title,
        a.CreationDate,
        a.AcceptedAnswerId,
        a.OwnerUserId,
        Level + 1
    FROM 
        Posts a
    JOIN 
        RecursivePost rp ON a.ParentId = rp.Id
),
PostStats AS (
    SELECT 
        p.Id,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        COUNT(DISTINCT v.UserId) AS VoteCount,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        MAX(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS HasUpvote,
        MAX(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS HasDownvote,
        MAX(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS HasGoldBadge
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    GROUP BY 
        p.Id
),
PostSummary AS (
    SELECT
        r.Id,
        r.Title,
        ps.CommentCount,
        ps.VoteCount,
        ps.BadgeCount,
        ps.HasUpvote,
        ps.HasDownvote,
        ps.HasGoldBadge,
        COALESCE((
            SELECT COUNT(*)
            FROM Posts p2
            WHERE p2.ParentId = r.Id
        ), 0) AS AnswerCount,
        CASE 
            WHEN r.AcceptedAnswerId IS NOT NULL THEN 
                (SELECT Title FROM Posts WHERE Id = r.AcceptedAnswerId)
            ELSE 
                'No Accepted Answer'
        END AS AcceptedAnswerTitle
    FROM 
        RecursivePost r
    LEFT JOIN 
        PostStats ps ON r.Id = ps.Id
)
SELECT 
    ps.Id,
    ps.Title,
    ps.CommentCount,
    ps.VoteCount,
    ps.BadgeCount,
    ps.HasUpvote,
    ps.HasDownvote,
    ps.HasGoldBadge,
    ps.AnswerCount,
    ps.AcceptedAnswerTitle,
    CASE 
        WHEN ps.HasGoldBadge = 1 THEN 'Gold Badge Holder'
        ELSE 'Non-Gold Badge Holder'
    END AS BadgeStatus
FROM 
    PostSummary ps
ORDER BY 
    ps.VoteCount DESC, ps.CommentCount DESC
OFFSET 0 ROWS FETCH NEXT 20 ROWS ONLY;