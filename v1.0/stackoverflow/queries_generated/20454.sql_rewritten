WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate, 
        p.LastActivityDate, 
        p.Score,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    WHERE 
        p.CreationDate > cast('2024-10-01' as date) - INTERVAL '1 year' 
        AND p.Score IS NOT NULL 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.LastActivityDate, p.Score
), 
UserEngagement AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(v.VoteTypeId = 2) AS UpVotesReceived,
        SUM(v.VoteTypeId = 3) AS DownVotesReceived,
        COALESCE(SUM(b.Class = 1), 0) AS GoldBadges,
        COALESCE(SUM(b.Class = 2), 0) AS SilverBadges
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON v.UserId = u.Id
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    WHERE 
        u.Reputation > 1000
    GROUP BY 
        u.Id, u.DisplayName
), 
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name, ', ') AS PostHistoryTypes,
        COUNT(*) FILTER (WHERE ph.PostHistoryTypeId IN (10, 11, 12, 13)) AS ClosureCount
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.LastActivityDate,
    rp.Score,
    rp.CommentCount,
    ue.DisplayName AS OwnerDisplayName,
    ue.UpVotesReceived,
    ue.DownVotesReceived,
    PHS.PostHistoryTypes,
    PHS.ClosureCount
FROM 
    RankedPosts rp
JOIN 
    Users ue ON ue.Id = rp.OwnerUserId
LEFT JOIN 
    PostHistorySummary PHS ON PHS.PostId = rp.PostId
WHERE 
    rp.PostRank = 1 AND 
    (rp.Score > (SELECT AVG(Score) FROM Posts) OR PHS.ClosureCount > 1) 
ORDER BY 
    ue.UpVotesReceived DESC, 
    rp.Score DESC
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;