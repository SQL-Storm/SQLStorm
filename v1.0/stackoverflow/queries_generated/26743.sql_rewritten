WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.PostTypeId,
        u.DisplayName AS AuthorName,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY COUNT(c.Id) DESC, p.Score DESC) AS RN
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= '2023-01-01' 
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, p.PostTypeId, u.DisplayName
),
TopPosts AS (
    SELECT 
        PostId,
        Title,
        Body,
        Tags,
        AuthorName,
        CommentCount,
        UpVotes,
        DownVotes
    FROM 
        RankedPosts
    WHERE 
        RN <= 10 
)
SELECT 
    tp.Title,
    tp.Body,
    tp.AuthorName,
    tp.CommentCount,
    tp.UpVotes,
    tp.DownVotes,
    STRING_AGG(t.TagName, ', ') AS TagsList,
    MAX(pht.CreationDate) AS LatestHistoryDate
FROM 
    TopPosts tp
LEFT JOIN 
    STRING_TO_ARRAY(tp.Tags, ',') AS tag_arr ON TRUE
LEFT JOIN 
    Tags t ON t.TagName IN (SELECT UNNEST(tag_arr))
LEFT JOIN 
    PostHistory pht ON tp.PostId = pht.PostId
GROUP BY 
    tp.PostId, tp.Title, tp.Body, tp.AuthorName, tp.CommentCount, tp.UpVotes, tp.DownVotes
ORDER BY 
    tp.CommentCount DESC, tp.UpVotes DESC;