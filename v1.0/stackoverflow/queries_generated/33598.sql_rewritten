WITH RECURSIVE UserHierarchy AS (
    SELECT
        Id,
        DisplayName,
        Reputation,
        CreationDate,
        LastAccessDate,
        0 AS Level
    FROM Users
    WHERE Reputation > 1000
    
    UNION ALL
    
    SELECT
        u.Id,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        u.LastAccessDate,
        uh.Level + 1
    FROM Users u
    JOIN UserHierarchy uh ON u.Reputation < uh.Reputation
    WHERE uh.Level < 5  
),
TopTags AS (
    SELECT
        TagName,
        COUNT(*) AS PostCount
    FROM Tags t
    JOIN Posts p ON t.Id = p.Id
    GROUP BY TagName
    ORDER BY PostCount DESC
    LIMIT 10
),
PostMetrics AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.Score,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes,
        (SELECT COUNT(*) FROM Votes v2 WHERE v2.PostId = p.Id AND v2.VoteTypeId = 6) AS CloseVotes,
        (SELECT COUNT(*) FROM Comments WHERE PostId = p.Id) AS TotalComments
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate > cast('2024-10-01' as date) - INTERVAL '1 year'  
    GROUP BY p.Id
    HAVING COUNT(c.Id) > 0
),
ActiveUsers AS (
    SELECT DISTINCT u.Id, u.DisplayName, u.Reputation, uh.Level
    FROM Users u
    JOIN UserHierarchy uh ON u.Id = uh.Id
    WHERE u.LastAccessDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
)
SELECT 
    uh.DisplayName AS ActiveUser,
    pm.Title AS PostTitle,
    pm.Score AS PostScore,
    pm.CommentCount,
    tt.TagName AS TrendingTag,
    pm.UpVotes,
    pm.DownVotes,
    CASE
        WHEN pm.CloseVotes > 0 THEN 'Closed'
        ELSE 'Open'
    END AS PostStatus
FROM PostMetrics pm
JOIN ActiveUsers uh ON pm.OwnerUserId = uh.Id
JOIN TopTags tt ON tt.TagName = ANY(string_to_array(pm.Title, ' '))
ORDER BY uh.Reputation DESC, pm.Score DESC;