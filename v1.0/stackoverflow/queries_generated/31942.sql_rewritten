WITH RECURSIVE UserReputation AS (
    SELECT 
        Id,
        Reputation,
        0 AS Level,
        Cast(DisplayName AS VARCHAR(40)) AS UserName
    FROM 
        Users
    WHERE 
        Reputation > 0
    
    UNION ALL
    
    SELECT 
        u.Id,
        u.Reputation,
        ur.Level + 1,
        u.DisplayName
    FROM 
        Users u
    JOIN 
        UserReputation ur ON u.Reputation > ur.Reputation
    WHERE 
        ur.Level < 5
), PostDetail AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerName,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVotes,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVotes,
        COUNT(c.Id) AS CommentCount,
        MAX(b.Class) AS MaxBadgeLevel
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    WHERE 
        p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year')
    GROUP BY 
        p.Id, u.DisplayName
), PopularPost AS (
    SELECT 
        pd.*,
        ROW_NUMBER() OVER (PARTITION BY pd.OwnerName ORDER BY pd.Score DESC) AS Rank
    FROM 
        PostDetail pd
    WHERE 
        pd.UpVotes > pd.DownVotes
)
SELECT 
    upp.OwnerName,
    upp.Title,
    upp.Score,
    upp.ViewCount,
    upp.CommentCount,
    ur.Level AS ReputationLevel
FROM 
    PopularPost upp
JOIN 
    UserReputation ur ON upp.OwnerName = ur.UserName
WHERE 
    upp.Rank <= 5
ORDER BY 
    upp.OwnerName, upp.Score DESC;