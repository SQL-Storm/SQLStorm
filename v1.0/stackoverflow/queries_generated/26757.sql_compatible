
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.CreationDate,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS RankWithinTag
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Tags, p.CreationDate, p.Score
),
FilteredPosts AS (
    SELECT 
        rp.*,
        CONCAT('This post has ', rp.AnswerCount, ' answers and ', rp.CommentCount, ' comments. ') AS EngagementSummary,
        CASE 
            WHEN rp.UpVoteCount - rp.DownVoteCount > 0 THEN 'Popular'
            WHEN rp.UpVoteCount - rp.DownVoteCount = 0 THEN 'Neutral'
            ELSE 'Unpopular'
        END AS PopularityStatus
    FROM 
        RankedPosts rp
    WHERE 
        RankWithinTag <= 5 AND
        rp.CreationDate > (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')  
),
PostDetails AS (
    SELECT 
        fp.*,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation
    FROM 
        FilteredPosts fp
    JOIN 
        Users u ON fp.OwnerUserId = u.Id
)
SELECT 
    pd.PostId,
    pd.Title,
    pd.Tags,
    pd.CreationDate,
    pd.EngagementSummary,
    pd.PopularityStatus,
    pd.OwnerDisplayName,
    pd.OwnerReputation
FROM 
    PostDetails pd
ORDER BY 
    pd.PopularityStatus DESC, 
    pd.AnswerCount DESC;
