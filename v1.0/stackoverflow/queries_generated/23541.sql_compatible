
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS VoteCount,
        (SELECT COUNT(DISTINCT c.Id) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId IN (1, 2) 
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        CASE 
            WHEN u.Reputation > 1000 THEN 'High Reputation'
            WHEN u.Reputation BETWEEN 100 AND 1000 THEN 'Medium Reputation'
            ELSE 'Low Reputation' 
        END AS ReputationCategory
    FROM 
        Users u
),
PostHistoryGrouped AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT pht.Name, ', ') AS HistoryTypes,
        COUNT(*) AS EditCount
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    WHERE 
        ph.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' 
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.Title,
    rp.Body,
    ur.DisplayName,
    ur.Reputation,
    ur.ReputationCategory,
    rh.HistoryTypes,
    rh.EditCount,
    rp.VoteCount,
    rp.CommentCount,
    COALESCE(CASE WHEN rp.PostRank = 1 THEN 'Latest Post' END, 'Older Post') AS PostStatus,
    COALESCE(NULLIF(rp.Body, ''), 'No content available') AS PostContent,
    CASE 
        WHEN p.IsModeratorOnly = 1 THEN 'Moderator Only Tag' 
        ELSE 'Regular Tag' 
    END AS TagStatus
FROM 
    RankedPosts rp
JOIN 
    UserReputation ur ON rp.OwnerUserId = ur.UserId
LEFT JOIN 
    PostHistoryGrouped rh ON rp.PostId = rh.PostId
WHERE 
    ur.Reputation > 500 
ORDER BY 
    ur.Reputation DESC,
    rp.VoteCount DESC
FETCH FIRST 50 ROWS ONLY;
