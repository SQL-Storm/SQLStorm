
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        ROW_NUMBER() OVER (PARTITION BY t.TagName ORDER BY p.CreationDate DESC) AS Rank,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    CROSS JOIN 
        (SELECT DISTINCT
            UNNEST(string_to_array(SUBSTRING(Tags FROM 2 FOR LENGTH(Tags) - 2), '><')) AS TagName
        FROM 
            Posts
        WHERE 
            PostTypeId = 1) t
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.CreationDate, u.DisplayName, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount
),
PopularPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.OwnerDisplayName,
        rp.Score,
        rp.ViewCount,
        rp.AnswerCount,
        rp.CommentCount,
        rp.Rank,
        rp.Tags,
        RANK() OVER (ORDER BY rp.Score DESC, rp.ViewCount DESC) AS PopularityRank
    FROM 
        RankedPosts rp
    WHERE 
        rp.Rank <= 5 
),
FinalOutput AS (
    SELECT 
        pp.PostId,
        pp.Title,
        pp.OwnerDisplayName,
        pp.Score,
        pp.ViewCount,
        pp.AnswerCount,
        pp.CommentCount,
        pp.PopularityRank,
        pp.Tags,
        COUNT(c.Id) AS CommentTotal
    FROM 
        PopularPosts pp
    LEFT JOIN 
        Comments c ON pp.PostId = c.PostId
    GROUP BY 
        pp.PostId, pp.Title, pp.OwnerDisplayName, pp.Score, pp.ViewCount, pp.AnswerCount, pp.CommentCount, pp.PopularityRank, pp.Tags
)
SELECT 
    fo.PostId,
    fo.Title,
    fo.OwnerDisplayName,
    fo.Score,
    fo.ViewCount,
    fo.AnswerCount,
    fo.CommentCount,
    fo.PopularityRank,
    fo.Tags,
    fo.CommentTotal
FROM 
    FinalOutput fo
ORDER BY 
    fo.PopularityRank, fo.Score DESC;
