WITH RecursivePostHierarchy AS (
    
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.OwnerUserId,
        1 AS Level
    FROM Posts p
    WHERE p.PostTypeId = 1 
    
    UNION ALL
    
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.OwnerUserId,
        Level + 1
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON r.PostId = p.ParentId
    WHERE p.PostTypeId = 2 
),
UserBadges AS (
    
    SELECT 
        u.Id AS UserId,
        COUNT(b.Id) AS BadgeCount,
        u.Reputation,
        DENSE_RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank
    FROM Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id, u.Reputation
),
PostStatistics AS (
    
    SELECT 
        p.Id AS PostId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId IN (2, 3)) AS VoteCount,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN LATERAL unnest(string_to_array(p.Tags, '>')) AS t(TagName) ON TRUE
    WHERE p.PostTypeId IN (1, 2) 
    GROUP BY p.Id
)

SELECT 
    u.DisplayName,
    u.Reputation,
    u.BadgeCount,
    COALESCE(ph.Level, 0) AS PostLevel,
    ps.CommentCount,
    ps.VoteCount,
    ps.Tags
FROM Users u
LEFT JOIN UserBadges ub ON u.Id = ub.UserId
LEFT JOIN RecursivePostHierarchy ph ON u.Id = ph.OwnerUserId
LEFT JOIN PostStatistics ps ON ps.PostId IN (SELECT PostId FROM RecursivePostHierarchy WHERE OwnerUserId = u.Id)
WHERE u.Reputation >= 1000 
ORDER BY u.Reputation DESC, PostLevel DESC;