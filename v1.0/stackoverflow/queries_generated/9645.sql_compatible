
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostID,
        p.Title,
        p.OwnerUserId,
        p.CreationDate,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY COUNT(DISTINCT c.Id) DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.OwnerUserId, p.CreationDate, p.PostTypeId
),
TopPosts AS (
    SELECT 
        rp.PostID,
        rp.Title,
        u.DisplayName AS OwnerDisplayName,
        rp.CreationDate,
        rp.CommentCount,
        rp.VoteCount,
        rp.UpVoteCount,
        rp.DownVoteCount
    FROM 
        RankedPosts rp
    JOIN 
        Users u ON rp.OwnerUserId = u.Id
    WHERE 
        rp.Rank <= 10
)
SELECT 
    t.PostID,
    t.Title,
    t.OwnerDisplayName,
    t.CreationDate,
    t.CommentCount,
    t.VoteCount,
    t.UpVoteCount,
    t.DownVoteCount,
    pt.Name AS PostTypeName,
    COALESCE(b.BadgeCount, 0) AS OwnerBadgeCount
FROM 
    TopPosts t
LEFT JOIN 
    PostTypes pt ON pt.Id = (SELECT p.PostTypeId FROM Posts p WHERE p.Id = t.PostID)
LEFT JOIN (
    SELECT 
        UserId, 
        COUNT(*) AS BadgeCount 
    FROM 
        Badges 
    GROUP BY 
        UserId
) b ON b.UserId = t.OwnerUserId
ORDER BY 
    t.VoteCount DESC, t.CommentCount DESC;
