WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS rn,
        COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS TotalPosts
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS TotalUpvotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS TotalDownvotes
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id, u.Reputation
),
TopUsers AS (
    SELECT 
        ur.UserId,
        ur.Reputation,
        ur.TotalUpvotes,
        ur.TotalDownvotes,
        RANK() OVER (ORDER BY ur.Reputation DESC) AS UserRank
    FROM 
        UserReputation ur
    WHERE 
        ur.Reputation > 1000
)
SELECT 
    tp.UserId,
    u.DisplayName,
    u.Location,
    tp.TotalUpvotes,
    tp.TotalDownvotes,
    COUNT(rp.PostId) AS PostsCreated,
    AVG(rp.Score) AS AveragePostScore
FROM 
    TopUsers tp
JOIN 
    Users u ON tp.UserId = u.Id
LEFT JOIN 
    RankedPosts rp ON u.Id = rp.OwnerUserId
GROUP BY 
    tp.UserId, u.DisplayName, u.Location, tp.TotalUpvotes, tp.TotalDownvotes
HAVING 
    COUNT(rp.PostId) > 5
ORDER BY 
    AveragePostScore DESC, tp.UserRank
LIMIT 10;