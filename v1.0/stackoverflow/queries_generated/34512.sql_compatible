
WITH RecursivePostCTE AS (
    SELECT 
        Id AS PostId,
        Title,
        ParentId,
        CreationDate,
        Score,
        1 AS Level
    FROM Posts
    WHERE ParentId IS NULL  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        p.Score,
        r.Level + 1 AS Level
    FROM Posts p
    INNER JOIN RecursivePostCTE r ON p.ParentId = r.PostId  
),

PostScoreSummary AS (
    SELECT 
        PostId,
        COUNT(*) AS NumberOfVotes,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Votes
    GROUP BY PostId
),

UserBadgeSummary AS (
    SELECT 
        UserId,
        COUNT(*) AS TotalBadges,
        SUM(CASE WHEN Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM Badges
    GROUP BY UserId
)

SELECT 
    p.Title,
    p.CreationDate,
    r.Level,
    COALESCE(ps.NumberOfVotes, 0) AS NumberOfVotes,
    COALESCE(ps.UpVotes, 0) AS UpVotes,
    COALESCE(ps.DownVotes, 0) AS DownVotes,
    u.DisplayName AS OwnerName,
    COALESCE(ub.TotalBadges, 0) AS TotalBadges,
    COALESCE(ub.GoldBadges, 0) AS GoldBadges,
    COALESCE(ub.SilverBadges, 0) AS SilverBadges,
    COALESCE(ub.BronzeBadges, 0) AS BronzeBadges
FROM RecursivePostCTE r
JOIN Posts p ON r.PostId = p.Id
LEFT JOIN PostScoreSummary ps ON p.Id = ps.PostId
JOIN Users u ON p.OwnerUserId = u.Id
LEFT JOIN UserBadgeSummary ub ON u.Id = ub.UserId
WHERE p.CreationDate >= DATEADD(DAY, -30, '2024-10-01')  
  AND COALESCE(ps.UpVotes, 0) - COALESCE(ps.DownVotes, 0) > 10  
ORDER BY r.Level, COALESCE(ps.NumberOfVotes, 0) DESC;
