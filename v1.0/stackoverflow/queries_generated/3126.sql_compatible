
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.Score > 0 
        AND p.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.ViewCount, p.Score, p.OwnerUserId, p.CreationDate
),
RecentBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    WHERE 
        b.Date > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        b.UserId
)
SELECT 
    u.DisplayName,
    rp.PostId,
    rp.Title,
    rp.ViewCount,
    rp.Score,
    rp.CommentCount,
    COALESCE(rb.BadgeNames, 'No Badges') AS RecentBadges,
    CASE 
        WHEN rp.DownVotes = 0 THEN 'No Downvotes'
        ELSE 'Has Downvotes'
    END AS DownvoteStatus,
    CASE 
        WHEN rp.PostRank = 1 THEN 'Latest Post'
        ELSE 'Older Post'
    END AS RecentPostStatus
FROM 
    RankedPosts rp
JOIN 
    Users u ON u.Id = rp.OwnerUserId
WHERE 
    rp.PostRank = 1
    AND rp.CommentCount > 5
ORDER BY 
    rp.ViewCount DESC
LIMIT 10;
