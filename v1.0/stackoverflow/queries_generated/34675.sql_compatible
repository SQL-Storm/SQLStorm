
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate,
        p.Score,
        p.ViewCount, 
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS UserRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        MAX(ph.CreationDate) OVER (PARTITION BY p.Id) AS LastEditDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId AND ph.PostHistoryTypeId IN (4, 6)  
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS TotalBadges,
        MAX(b.Class) AS HighestBadgeClass
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COALESCE(ub.TotalBadges, 0) AS TotalBadges,
        CASE 
            WHEN COALESCE(ub.TotalBadges, 0) = 0 THEN 'No Badges' 
            ELSE 'Has Badges' 
        END AS BadgeStatus
    FROM 
        Users u
    LEFT JOIN 
        UserBadges ub ON u.Id = ub.UserId
    WHERE 
        u.Reputation > 5000 
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.CommentCount,
    rp.LastEditDate,
    tu.DisplayName AS OwnerDisplayName,
    tu.Reputation AS OwnerReputation,
    tu.TotalBadges,
    tu.BadgeStatus,
    CASE 
        WHEN rp.UserRank = 1 THEN 'Best Post'
        WHEN rp.UserRank <= 3 THEN 'Top Posts'
        ELSE 'Regular Post' 
    END AS PostQuality
FROM 
    RankedPosts rp
JOIN 
    TopUsers tu ON rp.OwnerUserId = tu.UserId
WHERE 
    rp.CommentCount > 5  
ORDER BY 
    rp.Score DESC, 
    rp.CreationDate DESC;
