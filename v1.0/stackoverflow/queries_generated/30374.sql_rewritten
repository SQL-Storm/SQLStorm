WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        p.CreationDate,
        0 AS Depth
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        p.CreationDate,
        r.Depth + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounty,
        SUM(u.UpVotes - u.DownVotes) AS Score,
        RANK() OVER (ORDER BY COUNT(DISTINCT p.Id) DESC) AS Rank
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8  
    GROUP BY 
        u.Id, u.DisplayName
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        COUNT(ph.Id) AS CloseCount,
        MAX(ph.CreationDate) AS LastClosedDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10 
    GROUP BY 
        ph.PostId, ph.UserId
)
SELECT 
    u.DisplayName,
    us.PostCount,
    us.TotalBounty,
    us.Score,
    cp.CloseCount,
    cp.LastClosedDate,
    COALESCE(rh.Depth, 0) AS PostDepth,
    STRING_AGG(DISTINCT t.TagName, ', ') AS AssociatedTags
FROM 
    UserStats us
LEFT JOIN 
    ClosedPosts cp ON us.UserId = cp.UserId
LEFT JOIN 
    RecursivePostHierarchy rh ON cp.PostId = rh.PostId
LEFT JOIN 
    Posts p ON p.OwnerUserId = us.UserId
LEFT JOIN 
    Tags t ON POSITION(CAST(t.TagName AS TEXT) IN p.Tags) > 0
WHERE 
    us.Rank <= 10  
    AND us.TotalBounty > 0
GROUP BY 
    u.DisplayName, us.PostCount, us.TotalBounty, us.Score, cp.CloseCount, cp.LastClosedDate, rh.Depth
ORDER BY 
    us.PostCount DESC;