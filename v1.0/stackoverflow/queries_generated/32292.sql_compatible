
WITH RECURSIVE UserReputationCTE AS (
    SELECT u.Id AS UserId, u.Reputation, 1 AS Level
    FROM Users u
    WHERE u.Reputation > 0

    UNION ALL

    SELECT u.Id, u.Reputation * 2, Level + 1
    FROM Users u
    JOIN UserReputationCTE ur ON ur.UserId = u.Id
    WHERE ur.Level < 5
),
RecentPosts AS (
    SELECT p.Id AS PostId, p.Title, p.CreationDate, u.DisplayName AS AuthorName,
           p.Score, p.ViewCount, p.Tags, p.OwnerUserId,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM Posts p
    JOIN Users u ON p.OwnerUserId = u.Id
    WHERE p.CreationDate > CURRENT_TIMESTAMP - INTERVAL '1 year'
),
PostStats AS (
    SELECT rp.PostId, rp.Title, rp.CreationDate, rp.AuthorName, rp.Score, rp.ViewCount,
           COUNT(c.Id) AS CommentCount,
           SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
           SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
           AVG(u.Reputation) AS AverageReputation
    FROM RecentPosts rp
    LEFT JOIN Comments c ON rp.PostId = c.PostId
    LEFT JOIN Votes v ON rp.PostId = v.PostId
    LEFT JOIN Users u ON u.Id = rp.OwnerUserId
    WHERE rp.rn = 1
    GROUP BY rp.PostId, rp.Title, rp.CreationDate, rp.AuthorName, rp.Score, rp.ViewCount
),
TopPosts AS (
    SELECT ps.PostId, ps.Title, ps.CreationDate, ps.AuthorName, ps.Score, ps.ViewCount,
           ps.CommentCount, ps.UpVoteCount, ps.DownVoteCount, ur.Reputation AS UserReputation
    FROM PostStats ps
    JOIN UserReputationCTE ur ON ur.UserId = ps.OwnerUserId
    ORDER BY ps.Score DESC, ps.ViewCount DESC
    LIMIT 10
)
SELECT tp.Title, tp.CreationDate, tp.AuthorName, tp.Score, tp.ViewCount,
       tp.CommentCount, tp.UpVoteCount, tp.DownVoteCount, tp.UserReputation
FROM TopPosts tp
LEFT JOIN PostHistory ph ON tp.PostId = ph.PostId
WHERE ph.CreationDate > CURRENT_TIMESTAMP - INTERVAL '6 months'
ORDER BY tp.UserReputation DESC, tp.Score DESC;
