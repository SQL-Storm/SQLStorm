WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank,
        COALESCE((
            SELECT COUNT(*)
            FROM Votes v
            WHERE v.PostId = p.Id 
            AND v.VoteTypeId = 2
        ), 0) AS UpVotes,
        COALESCE((
            SELECT COUNT(*)
            FROM Votes v
            WHERE v.PostId = p.Id 
            AND v.VoteTypeId = 3
        ), 0) AS DownVotes
    FROM 
        Posts p
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
PostDetails AS (
    SELECT 
        r.PostId,
        r.Title,
        r.CreationDate,
        r.ViewCount,
        r.Score,
        r.UpVotes,
        r.DownVotes,
        CASE 
            WHEN r.Score > 0 THEN 'Positive'
            WHEN r.Score < 0 THEN 'Negative'
            ELSE 'Neutral'
        END AS Sentiment,
        CONCAT('Post ID: ', r.PostId, ' | Title: ', r.Title) AS DisplayInfo
    FROM 
        RankedPosts r
    WHERE 
        r.Rank <= 5
),
ClosedPosts AS (
    SELECT 
        p.Id,
        ph.CreationDate AS ClosedDate,
        ph.UserDisplayName,
        ph.Comment AS CloseReason
    FROM 
        Posts p
    JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        ph.PostHistoryTypeId = 10 AND ph.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
)
SELECT 
    pd.DisplayInfo,
    pd.CreationDate,
    pd.ViewCount,
    pd.Score,
    pd.UpVotes,
    pd.DownVotes,
    pd.Sentiment,
    COALESCE(cp.ClosedDate, 'Not Closed') AS ClosedDate,
    COALESCE(cp.UserDisplayName, 'N/A') AS ClosedBy,
    COALESCE(cp.CloseReason, 'N/A') AS ReasonForClosure
FROM 
    PostDetails pd
LEFT JOIN 
    ClosedPosts cp ON pd.PostId = cp.Id
WHERE 
    (pd.Score IS NOT NULL OR pd.ViewCount IS NOT NULL) 
    AND (pd.UpVotes - pd.DownVotes) > 10  
ORDER BY 
    pd.CreationDate DESC, pd.Score DESC;