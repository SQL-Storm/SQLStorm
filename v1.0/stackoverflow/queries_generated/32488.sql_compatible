
WITH RecursiveCTE AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.OwnerUserId,
        P.ViewCount,
        RANK() OVER (PARTITION BY P.OwnerUserId ORDER BY P.ViewCount DESC) AS ViewRank
    FROM
        Posts P
    WHERE 
        P.PostTypeId = 1 
),
UserScores AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COALESCE(SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges,
        COALESCE(SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges,
        COALESCE(SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Votes V ON U.Id = V.UserId
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id, U.DisplayName
),
PostMetrics AS (
    SELECT 
        R.PostId,
        R.Title,
        R.CreationDate,
        R.OwnerUserId,
        R.ViewCount,
        (SELECT COUNT(*) FROM Comments C WHERE C.PostId = R.PostId) AS CommentCount,
        (SELECT COUNT(*) FROM Votes V WHERE V.PostId = R.PostId AND V.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*) FROM Votes V WHERE V.PostId = R.PostId AND V.VoteTypeId = 3) AS DownVoteCount
    FROM 
        RecursiveCTE R
)
SELECT 
    US.DisplayName,
    SUM(PM.CommentCount) AS TotalComments,
    SUM(PM.UpVoteCount) AS TotalUpVotes,
    SUM(PM.DownVoteCount) AS TotalDownVotes,
    SUM(US.UpVotes) AS UserTotalUpVotes,
    SUM(US.DownVotes) AS UserTotalDownVotes,
    MAX(PM.ViewCount) AS MaxViewCount,
    COUNT(DISTINCT PM.PostId) AS TotalPosts,
    STRING_AGG(DISTINCT TH.Name, ', ') AS TagNames
FROM 
    UserScores US
JOIN 
    Posts P ON US.UserId = P.OwnerUserId
JOIN 
    PostMetrics PM ON P.Id = PM.PostId
LEFT JOIN 
    LATERAL (SELECT STRING_AGG(T.TagName, ', ') AS Name
              FROM Tags T
              WHERE T.Id = ANY (SELECT unnest(string_to_array(P.Tags, ',')))) AS TH ON true
WHERE 
    US.UpVotes > 10
GROUP BY 
    US.DisplayName
ORDER BY 
    TotalComments DESC, TotalUpVotes DESC
LIMIT 100;
