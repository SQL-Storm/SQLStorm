WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        SUM(v.BountyAmount) AS TotalBounty,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Comments c ON u.Id = c.UserId
    LEFT JOIN Votes v ON u.Id = v.UserId
    WHERE u.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY u.Id, u.DisplayName
),

PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        COALESCE(ah.UserId, 0) AS AcceptedAnswerUserId,
        p.AnswerCount,
        p.CommentCount,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RecentPostRank
    FROM Posts p
    LEFT JOIN Posts ah ON p.AcceptedAnswerId = ah.Id
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
)

SELECT 
    ua.UserId,
    ua.DisplayName,
    ua.TotalPosts,
    ua.TotalComments,
    ua.TotalBounty,
    ua.TotalUpvotes,
    ua.TotalDownvotes,
    COUNT(pd.PostId) FILTER (WHERE pd.RecentPostRank <= 5) AS RecentPostsCount,
    AVG(pd.Score) AS AveragePostScore,
    STRING_AGG(DISTINCT pd.Title, ', ') AS RecentPostTitles
FROM UserActivity ua
LEFT JOIN PostDetails pd ON ua.UserId = pd.AcceptedAnswerUserId
GROUP BY ua.UserId, ua.DisplayName
ORDER BY ua.TotalPosts DESC, ua.TotalUpvotes DESC
LIMIT 10
OFFSET 0;