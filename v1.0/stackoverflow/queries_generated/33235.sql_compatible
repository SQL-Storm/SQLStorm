
WITH RecursivePostHierarchy AS (
    SELECT 
        pp.Id AS PostId,
        pp.ParentId,
        1 AS Level,
        pp.Title,
        pp.CreationDate AS PostCreationDate,
        COALESCE(NULLIF(pp.OwnerDisplayName, ''), 'Community User') AS Author
    FROM 
        Posts pp
    WHERE 
        pp.PostTypeId = 1  

    UNION ALL

    SELECT 
        pa.Id,
        pa.ParentId,
        r.Level + 1 AS Level,
        pa.Title,
        pa.CreationDate AS PostCreationDate,
        COALESCE(NULLIF(pa.OwnerDisplayName, ''), 'Community User') AS Author
    FROM 
        Posts pa
    INNER JOIN 
        RecursivePostHierarchy r ON r.PostId = pa.ParentId
)
SELECT 
    p.Id AS QuestionId,
    p.Title AS QuestionTitle,
    p.CreationDate AS QuestionDate,
    COUNT(DISTINCT a.Id) AS AnswerCount,
    SUM(COALESCE(v.Score, 0)) AS TotalVotes,
    STRING_AGG(DISTINCT t.TagName, ', ') AS RelatedTags,
    COALESCE(pv.ViewCount, 0) AS ViewCount,
    COALESCE(pv.CommentCount, 0) AS CommentCount,
    u.DisplayName AS Author,
    r.Level
FROM 
    Posts p
LEFT JOIN 
    Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2  
LEFT JOIN 
    Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
LEFT JOIN 
    Tags t ON t.ExcerptPostId = p.Id
LEFT JOIN 
    (SELECT PostId, COUNT(*) AS ViewCount, SUM(CommentCount) AS CommentCount 
     FROM Posts 
     GROUP BY PostId) pv ON pv.PostId = p.Id
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    RecursivePostHierarchy r ON r.PostId = p.Id
WHERE 
    p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 YEAR'  
GROUP BY 
    p.Id, p.Title, p.CreationDate, u.DisplayName, pv.ViewCount, pv.CommentCount, r.Level
ORDER BY 
    TotalVotes DESC, QuestionDate DESC;
