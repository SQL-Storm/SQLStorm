WITH ProcessedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        COALESCE(MAX(v.CreationDate), '1970-01-01') AS LastVoteTime,
        COALESCE(MAX(b.Date), '1970-01-01') AS LastBadgeTime,
        MAX(ph.CreationDate) AS LastEditTime,
        COUNT(DISTINCT ph.Id) AS EditCount,
        STRING_AGG(DISTINCT SUBSTRING(TO_CHAR(t.TagName), 2, LENGTH(t.TagName)-2), ', ') AS ProcessedTags
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Tags t ON POSITION(t.TagName IN p.Tags) > 0
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month' 
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, u.DisplayName
),
TagStatistics AS (
    SELECT 
        p.ProcessedTags,
        COUNT(p.PostId) AS PostCount,
        AVG(u.Reputation) AS AvgOwnerReputation,
        COUNT(DISTINCT p.OwnerUserId) AS UniqueOwners
    FROM 
        ProcessedPosts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    GROUP BY 
        p.ProcessedTags
)
SELECT 
    ts.ProcessedTags, 
    ts.PostCount, 
    ts.UniqueOwners, 
    ts.AvgOwnerReputation,
    CASE 
        WHEN ts.PostCount > 0 THEN ROUND(ts.AvgOwnerReputation / ts.PostCount, 2)
        ELSE 0
    END AS ReputationPerPost
FROM 
    TagStatistics ts
ORDER BY 
    ts.PostCount DESC
LIMIT 10;