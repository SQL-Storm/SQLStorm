WITH UserReputation AS (
    SELECT Id, Reputation,
           ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS ReputationRank,
           COUNT(*) OVER () AS TotalUsers
    FROM Users
),
RecentPosts AS (
    SELECT p.Id, p.OwnerUserId, p.CreationDate, p.Score, p.ViewCount,
           p.Title, COUNT(c.Id) AS CommentCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY p.Id
),
PopularTags AS (
    SELECT unnest(string_to_array(Tags, ',')) AS TagName
    FROM Posts
    WHERE Tags IS NOT NULL
),
AccumulatedVotes AS (
    SELECT PostId, 
           SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
           SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Votes
    GROUP BY PostId
),
PostDetails AS (
    SELECT rp.*, 
           COALESCE(av.UpVotes, 0) AS UpVotes,
           COALESCE(av.DownVotes, 0) AS DownVotes,
           (SELECT COUNT(*) FROM PostHistory ph 
            WHERE ph.PostId = rp.Id AND ph.PostHistoryTypeId = 10) AS CloseCount,
           (SELECT COUNT(*) FROM PostHistory ph 
            WHERE ph.PostId = rp.Id AND ph.PostHistoryTypeId = 12) AS DeleteCount
    FROM RecentPosts rp
    LEFT JOIN AccumulatedVotes av ON rp.Id = av.PostId
)
SELECT ur.Id AS UserId, ur.Reputation, ur.ReputationRank, ur.TotalUsers,
       pd.Title, pd.CreationDate, pd.Score, pd.ViewCount, pd.CommentCount,
       pd.UpVotes, pd.DownVotes,
       ARRAY_AGG(DISTINCT pt.TagName) AS PopularTags
FROM UserReputation ur
JOIN PostDetails pd ON ur.Id = pd.OwnerUserId
LEFT JOIN PopularTags pt ON pd.Tags ILIKE '%' || pt.TagName || '%'
WHERE ur.Reputation > 1000 
GROUP BY ur.Id, ur.Reputation, ur.ReputationRank, ur.TotalUsers, 
         pd.Title, pd.CreationDate, pd.Score, pd.ViewCount, pd.CommentCount,
         pd.UpVotes, pd.DownVotes
ORDER BY ur.Reputation DESC, pd.CreationDate DESC;