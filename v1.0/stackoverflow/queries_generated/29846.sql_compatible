
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.ViewCount,
        p.AnswerCount,
        u.DisplayName AS OwnerName,
        ROW_NUMBER() OVER (ORDER BY p.ViewCount DESC) AS ViewRank,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.ViewCount, p.AnswerCount, u.DisplayName
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.AnswerCount,
        rp.OwnerName,
        rp.CommentCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.ViewRank <= 10
),
PostTags AS (
    SELECT 
        tp.PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts tp
    JOIN 
        LATERAL (
            SELECT 
                unnest(string_to_array(tp.Tags, '><')) AS TagName
        ) t ON true
    GROUP BY 
        tp.PostId
)
SELECT 
    tp.Title,
    tp.ViewCount,
    tp.AnswerCount,
    tp.OwnerName,
    pt.Tags,
    COALESCE(ph.ClosureCount, 0) AS ClosureCount,
    COALESCE(badge_info.BadgeCount, 0) AS BadgeCount
FROM 
    TopPosts tp
LEFT JOIN 
    PostTags pt ON tp.PostId = pt.PostId
LEFT JOIN (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS ClosureCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10 
    GROUP BY 
        ph.PostId
) ph ON tp.PostId = ph.PostId
LEFT JOIN (
    SELECT 
        b.UserId,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Badges b
    JOIN 
        Users u ON b.UserId = u.Id
    WHERE 
        b.Class = 1 
    GROUP BY 
        b.UserId
) badge_info ON badge_info.UserId = u.Id; 
