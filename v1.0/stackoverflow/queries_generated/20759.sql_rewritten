WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.Reputation,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
        AND p.Score IS NOT NULL
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.Reputation,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVotes,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVotes,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COALESCE(
            (SELECT COUNT(*) 
             FROM Posts AS answers 
             WHERE answers.ParentId = rp.PostId 
             AND answers.PostTypeId = 2), 0
        ) AS AnswerCount
    FROM 
        RankedPosts rp
    LEFT JOIN 
        Votes v ON v.PostId = rp.PostId
    LEFT JOIN 
        Comments c ON c.PostId = rp.PostId
    WHERE 
        rp.rn <= 3  
    GROUP BY 
        rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, rp.Reputation
),
QueriedTags AS (
    SELECT 
        t.TagName,
        COUNT(dp.PostId) AS PostCount
    FROM 
        Tags t
    JOIN 
        Posts dp ON dp.Tags ILIKE '%' || t.TagName || '%'
    WHERE 
        dp.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
    GROUP BY 
        t.TagName
    HAVING 
        COUNT(dp.PostId) > 2  
),
FinalResults AS (
    SELECT 
        pd.PostId,
        pd.Title,
        pd.CreationDate,
        pd.Score,
        pd.ViewCount,
        pd.Reputation,
        pd.UpVotes,
        pd.DownVotes,
        pd.CommentCount,
        pd.AnswerCount,
        ARRAY_AGG(DISTINCT qt.TagName) AS RelatedTags
    FROM 
        PostDetails pd
    LEFT JOIN 
        QueriedTags qt ON pd.Title ILIKE '%' || qt.TagName || '%'
    GROUP BY 
        pd.PostId, pd.Title, pd.CreationDate, pd.Score, pd.ViewCount, pd.Reputation, pd.UpVotes, pd.DownVotes, pd.CommentCount, pd.AnswerCount
)
SELECT 
    fr.PostId,
    fr.Title,
    fr.CreationDate,
    fr.Score,
    fr.ViewCount,
    fr.Reputation,
    fr.UpVotes,
    fr.DownVotes,
    fr.CommentCount,
    fr.AnswerCount,
    COALESCE(STRING_AGG(rt.TagName, ', ') FILTER (WHERE rt.TagName IS NOT NULL), 'No Tags') AS Tags
FROM 
    FinalResults fr
LEFT JOIN 
    LATERAL (
        SELECT unnest(fr.RelatedTags) AS TagName
    ) AS rt ON TRUE
GROUP BY 
    fr.PostId, fr.Title, fr.CreationDate, fr.Score, fr.ViewCount, fr.Reputation, fr.UpVotes, fr.DownVotes, fr.CommentCount, fr.AnswerCount
ORDER BY 
    fr.Score DESC, fr.ViewCount DESC
LIMIT 10;