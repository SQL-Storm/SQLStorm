WITH PostData AS (
    SELECT 
        p.Id AS PostID,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= '2023-01-01'
),
VoteData AS (
    SELECT 
        PostId,
        COUNT(CASE WHEN VoteTypeId = 2 THEN 1 END) AS Upvotes,  
        COUNT(CASE WHEN VoteTypeId = 3 THEN 1 END) AS Downvotes   
    FROM 
        Votes
    GROUP BY 
        PostId
),
CommentData AS (
    SELECT 
        PostId,
        COUNT(*) AS TotalComments
    FROM 
        Comments
    GROUP BY 
        PostId
),
BadgeData AS (
    SELECT 
        UserId,
        COUNT(*) AS TotalBadges
    FROM 
        Badges
    GROUP BY 
        UserId
)
SELECT 
    pd.PostID,
    pd.Title,
    pd.CreationDate,
    pd.Score,
    pd.ViewCount,
    pd.AnswerCount,
    pd.CommentCount,
    COALESCE(vd.Upvotes, 0) AS Upvotes,
    COALESCE(vd.Downvotes, 0) AS Downvotes,
    COALESCE(cd.TotalComments, 0) AS TotalComments,
    pd.OwnerDisplayName,
    pd.OwnerReputation,
    COALESCE(bd.TotalBadges, 0) AS OwnerTotalBadges
FROM 
    PostData pd
LEFT JOIN 
    VoteData vd ON pd.PostID = vd.PostId
LEFT JOIN 
    CommentData cd ON pd.PostID = cd.PostId
LEFT JOIN 
    BadgeData bd ON pd.OwnerDisplayName = bd.UserId
ORDER BY 
    pd.ViewCount DESC
LIMIT 100;