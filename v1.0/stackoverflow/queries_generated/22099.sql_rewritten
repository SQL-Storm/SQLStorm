WITH UserRankings AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS Rank,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE u.Reputation IS NOT NULL
    GROUP BY u.Id, u.DisplayName, u.Reputation
), 
PostDetails AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(p.ViewCount, 0) AS ViewCount,
        p.Score,
        CASE 
            WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Accepted'
            ELSE 'Unaccepted' 
        END AS Answer_Status,
        t.TagName
    FROM Posts p
    LEFT JOIN Tags t ON t.Id = ANY (string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::int[])
    WHERE p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
), 
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        COUNT(DISTINCT ph.Id) AS EditCount,
        STRING_AGG(DISTINCT ph.Comment, ', ') AS EditComments
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId IN (4, 5, 24) 
    GROUP BY ph.PostId
)
SELECT 
    u.DisplayName,
    ur.Rank,
    COALESCE(pd.PostCount, 0) AS TotalPosts,
    COALESCE(pd.TotalUpVotes, 0) AS TotalUpVotes,
    pd.Title,
    pd.CreationDate,
    pd.ViewCount,
    pd.Score,
    pd.Answer_Status,
    COALESCE(phd.EditCount, 0) AS TotalEdits,
    COALESCE(phd.EditComments, 'No edits made') AS RecentEditComments,
    CASE 
        WHEN pd.ViewCount > 1000 THEN 'Popular'
        ELSE 'Less Popular' 
    END AS Popularity
FROM UserRankings ur
JOIN Users u ON u.Id = ur.UserId
LEFT JOIN PostDetails pd ON pd.PostId IN (SELECT p.Id FROM Posts p WHERE p.OwnerUserId = u.Id)
LEFT JOIN PostHistoryDetails phd ON phd.PostId = pd.PostId
ORDER BY ur.Rank, pd.Title
LIMIT 100;