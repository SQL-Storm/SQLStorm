WITH RecursivePostCTE AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        1 AS Level,
        p.AcceptedAnswerId
    FROM
        Posts p
    WHERE
        p.ParentId IS NULL

    UNION ALL

    SELECT
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.ViewCount,
        p.CreationDate,
        p.OwnerUserId,
        Level + 1 AS Level,
        p.AcceptedAnswerId
    FROM
        Posts p
    INNER JOIN RecursivePostCTE r ON r.PostId = p.ParentId
)
SELECT
    u.DisplayName AS UserName,
    COUNT(DISTINCT post.PostId) AS TotalPosts,
    SUM(post.ViewCount) AS TotalViews,
    SUM(CASE WHEN post.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS TotalAcceptedAnswers,
    AVG(post.ViewCount) AS AverageViews,
    STRING_AGG(DISTINCT tag.TagName, ', ') AS Tags,
    MAX(b.Date) AS LastBadgeDate,
    b.Class AS BadgeClass
FROM
    Users u
LEFT JOIN
    Posts post ON u.Id = post.OwnerUserId
LEFT JOIN
    Tags tag ON post.Tags LIKE CONCAT('%', tag.TagName, '%')
LEFT JOIN
    Badges b ON u.Id = b.UserId
WHERE
    u.Reputation > 100 AND
    post.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR'
GROUP BY
    u.DisplayName, b.Class
HAVING
    COUNT(DISTINCT post.PostId) > 5
ORDER BY
    TotalViews DESC
LIMIT 10;