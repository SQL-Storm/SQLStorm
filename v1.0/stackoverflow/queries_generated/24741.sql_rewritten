WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank,
        COUNT(*) OVER (PARTITION BY p.PostTypeId) AS TotalPostsPerType
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
ActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostsCreated,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounties,
        SUM(v.VoteTypeId = 2) AS TotalUpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS TotalDownVotes
    FROM 
        Users u
    JOIN 
        Posts p ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    WHERE 
        u.CreationDate >= cast('2024-10-01' as date) - INTERVAL '6 months'
    GROUP BY 
        u.Id, u.DisplayName
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS EditCount,
        MAX(ph.CreationDate) AS LastEditedDate,
        STRING_AGG(DISTINCT pht.Name, ', ') FILTER (WHERE pht.Name IS NOT NULL) AS HistoryTypes
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    GROUP BY 
        ph.PostId
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.ScoreRank,
    rp.TotalPostsPerType,
    au.UserId,
    au.DisplayName,
    au.PostsCreated,
    au.TotalBounties,
    au.TotalUpVotes,
    au.TotalDownVotes,
    phs.EditCount,
    phs.LastEditedDate,
    phs.HistoryTypes
FROM 
    RankedPosts rp
LEFT JOIN 
    ActiveUsers au ON rp.PostId IN (SELECT DISTINCT p.Id FROM Posts p WHERE p.OwnerUserId = au.UserId)
LEFT JOIN 
    PostHistorySummary phs ON rp.PostId = phs.PostId
WHERE 
    rp.ScoreRank <= 10
ORDER BY 
    rp.PostId DESC NULLS LAST;