
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.Score,
        p.CreationDate,
        p.OwnerUserId,
        u.DisplayName AS OwnerDisplayName,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY UNNEST(string_to_array(p.Tags, '<>')) ORDER BY p.Score DESC) AS TagRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' 
),

TagPerformance AS (
    SELECT 
        UNNEST(string_to_array(p.Tags, '<>')) AS Tag,
        COUNT(*) AS PostCount,
        AVG(p.Score) AS AverageScore,
        SUM(CASE WHEN p.ViewCount IS NOT NULL THEN p.ViewCount ELSE 0 END) AS TotalViews,
        SUM(CASE WHEN p.OwnerUserId IS NOT NULL THEN 1 ELSE 0 END) AS ActiveUserCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1
    GROUP BY 
        UNNEST(string_to_array(p.Tags, '<>'))
),

CommonCloseReasons AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS CloseCount,
        MAX(ph.CreationDate) AS LastCloseDate,
        ARRAY_AGG(DISTINCT crt.Name) AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes crt ON ph.Comment::int = crt.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        ph.PostId
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.Body,
    rp.ViewCount,
    rp.OwnerDisplayName,
    rp.CreationDate,
    tp.Tag AS MostPopularTag,
    tp.PostCount AS TagPostCount,
    tp.AverageScore AS TagAverageScore,
    cp.CloseCount AS RecentCloseCount,
    cp.LastCloseDate,
    cp.CloseReasons
FROM 
    RankedPosts rp
JOIN 
    TagPerformance tp ON tp.Tag = ANY(string_to_array(rp.Tags, '<>'))
LEFT JOIN 
    CommonCloseReasons cp ON rp.PostId = cp.PostId
WHERE 
    rp.TagRank <= 3 
ORDER BY 
    rp.Score DESC, rp.ViewCount DESC;
