
WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT ph.Id) AS HistoryCount
    FROM Posts p
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.OwnerUserId
), UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS UserRank
    FROM Users u
), HighPerformingPosts AS (
    SELECT
        ps.PostId,
        ps.Title,
        ps.UpVotes,
        ps.DownVotes,
        ps.CommentCount,
        ps.HistoryCount,
        ur.Reputation,
        ur.UserRank
    FROM PostStats ps
    JOIN Users u ON ps.OwnerUserId = u.Id
    JOIN UserReputation ur ON u.Id = ur.UserId
    WHERE ps.UpVotes - ps.DownVotes > 5
)

SELECT 
    hpp.PostId,
    hpp.Title,
    hpp.UpVotes,
    hpp.DownVotes,
    hpp.CommentCount,
    hpp.HistoryCount,
    hpp.Reputation,
    hpp.UserRank,
    CASE 
        WHEN hpp.UserRank <= 10 THEN 'Top User'
        WHEN hpp.UserRank <= 50 THEN 'Mid-tier User'
        ELSE 'New User'
    END AS UserTier
FROM HighPerformingPosts hpp
LEFT JOIN Badges b ON hpp.OwnerUserId = b.UserId AND b.Class = 1
WHERE b.Id IS NULL OR (b.Date < TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year')
ORDER BY hpp.UpVotes DESC, hpp.CommentCount DESC
LIMIT 100;
