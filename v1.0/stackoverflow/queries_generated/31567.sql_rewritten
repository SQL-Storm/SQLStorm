WITH RecursivePostCTE AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.OwnerUserId,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.OwnerUserId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        Posts a ON p.ParentId = a.Id
    WHERE 
        a.PostTypeId = 1 
),
PostVoteTotals AS (
    SELECT 
        p.Id AS PostId,
        SUM(CASE 
            WHEN v.VoteTypeId = 2 THEN 1
            WHEN v.VoteTypeId = 3 THEN -1
            ELSE 0 
        END) AS VoteScore
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
),
RecentPostEditors AS (
    SELECT 
        ph.PostId,
        ph.UserId,
        ph.UserDisplayName,
        DENSE_RANK() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS EditRank
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (4, 5, 6) 
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(*) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.Score,
    COALESCE(pvt.VoteScore, 0) AS TotalVoteScore,
    ub.BadgeCount,
    COUNT(DISTINCT rpe.UserId) AS RecentEditorCount,
    MAX(rpe.UserDisplayName) AS LastEditorName,
    ARRAY_AGG(DISTINCT t.TagName) AS Tags,
    CASE 
        WHEN p.ClosedDate IS NOT NULL THEN 'Closed'
        WHEN p.AcceptedAnswerId IS NOT NULL THEN 'Answered'
        ELSE 'Open'
    END AS Status
FROM 
    RecursivePostCTE rp
LEFT JOIN 
    PostVoteTotals pvt ON rp.PostId = pvt.PostId
LEFT JOIN 
    Posts p ON rp.PostId = p.Id
LEFT JOIN 
    RecentPostEditors rpe ON rp.PostId = rpe.PostId AND rpe.EditRank = 1
LEFT JOIN 
    Posts p2 ON p2.Id = p.AcceptedAnswerId
LEFT JOIN 
    Tags t ON t.ExcerptPostId = p.Id 
LEFT JOIN 
    UserBadges ub ON rp.OwnerUserId = ub.UserId
GROUP BY 
    rp.PostId, rp.Title, rp.Score, pvt.VoteScore, ub.BadgeCount, p.ClosedDate, p.AcceptedAnswerId
ORDER BY 
    TotalVoteScore DESC, rp.Score DESC
LIMIT 50;