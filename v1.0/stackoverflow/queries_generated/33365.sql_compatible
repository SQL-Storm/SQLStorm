
WITH RecursivePosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.LastActivityDate,
        p.OwnerUserId,
        1 AS Level
    FROM
        Posts p
    WHERE
        p.PostTypeId = 1 

    UNION ALL

    SELECT
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.LastActivityDate,
        p.OwnerUserId,
        rp.Level + 1
    FROM
        Posts p
    JOIN
        RecursivePosts rp ON p.ParentId = rp.PostId
    WHERE
        p.PostTypeId = 2 
),
UserVotes AS (
    SELECT
        v.UserId,
        COUNT(v.Id) AS TotalVotes,
        SUM(CASE WHEN v.VoteTypeId IN (2, 8) THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM
        Votes v
    GROUP BY
        v.UserId
),
PostScore AS (
    SELECT
        p.Id AS PostId,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount 
    FROM
        Posts p
    LEFT JOIN
        Comments c ON p.Id = c.PostId
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    GROUP BY
        p.Id, p.Score
),
TopUsersWithBadges AS (
    SELECT
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        COUNT(b.Id) AS BadgeCount
    FROM
        Users u
    LEFT JOIN
        Badges b ON u.Id = b.UserId
    GROUP BY
        u.Id, u.DisplayName, u.Reputation
    ORDER BY
        u.Reputation DESC
),
PostSummary AS (
    SELECT
        rp.PostId,
        rp.Title,
        rp.Score,
        p.Score AS GlobalScore,
        ps.CommentCount,
        COALESCE(uv.TotalVotes, 0) AS TotalVotes,
        COALESCE(uv.UpVotes, 0) AS UpVotes,
        COALESCE(uv.DownVotes, 0) AS DownVotes,
        tu.DisplayName AS TopUserName,
        tu.BadgeCount
    FROM
        RecursivePosts rp
    JOIN
        PostScore ps ON rp.PostId = ps.PostId
    LEFT JOIN
        UserVotes uv ON rp.OwnerUserId = uv.UserId
    LEFT JOIN
        TopUsersWithBadges tu ON rp.OwnerUserId = tu.UserId
)
SELECT
    ps.PostId,
    ps.Title,
    ps.Score,
    ps.GlobalScore,
    ps.CommentCount,
    ps.TotalVotes,
    ps.UpVotes,
    ps.DownVotes,
    ps.TopUserName,
    ps.BadgeCount,
    CASE
        WHEN ps.Score > 10 THEN 'High Score'
        WHEN ps.Score BETWEEN 5 AND 10 THEN 'Medium Score'
        ELSE 'Low Score'
    END AS ScoreCategory,
    (SELECT COUNT(*) 
     FROM Posts 
     WHERE ViewCount > 1000) AS HighViewCountPosts,
    (SELECT STRING_AGG(t.TagName, ', ') 
     FROM Tags t 
     JOIN Posts p ON t.ExcerptPostId = p.Id 
     WHERE p.Id = ps.PostId) AS RelatedTags
FROM
    PostSummary ps
ORDER BY
    ps.GlobalScore DESC, ps.Score DESC
LIMIT 10;
