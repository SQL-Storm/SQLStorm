WITH RecursiveTagHierarchy AS (
    SELECT 
        Id, 
        TagName, 
        Count, 
        0 AS Level
    FROM 
        Tags 
    WHERE 
        IsModeratorOnly = 0  

    UNION ALL

    SELECT 
        t.Id, 
        t.TagName, 
        t.Count, 
        r.Level + 1
    FROM 
        Tags t
    INNER JOIN 
        RecursiveTagHierarchy r ON t.WikiPostId = r.Id
),
PostMetrics AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.CreationDate, 
        p.ViewCount, 
        p.AnswerCount,
        COALESCE(v.UpVotes, 0) AS UpVotes,
        COALESCE(v.DownVotes, 0) AS DownVotes,
        ROW_NUMBER() OVER(PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserPostRank,
        SUM(CASE WHEN c.PostId IS NOT NULL THEN 1 ELSE 0 END) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT 
            PostId, 
            SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
        FROM 
            Votes
        GROUP BY 
            PostId
    ) v ON p.Id = v.PostId
    GROUP BY 
        p.Id, v.UpVotes, v.DownVotes 
),
ClosedPosts AS (
    SELECT 
        ph.PostId, 
        COUNT(*) AS CloseCount
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10  
    GROUP BY 
        ph.PostId
),
TagStatistics AS (
    SELECT 
        t.TagName, 
        COUNT(DISTINCT p.Id) AS PostCount, 
        SUM(p.ViewCount) AS TotalViews
    FROM 
        Tags t
    JOIN 
        Posts p ON p.Tags LIKE '%' || t.TagName || '%'  
    GROUP BY 
        t.TagName
)
SELECT 
    t.TagName, 
    ts.PostCount, 
    COALESCE(ts.TotalViews, 0) AS TotalViews,
    COUNT(DISTINCT pm.PostId) AS TotalPosts,
    AVG(pm.ViewCount) AS AverageViews,
    AVG(pm.CommentCount) AS AverageComments,
    COUNT(DISTINCT cp.PostId) AS TotalClosedPosts,
    SUM(pm.UpVotes) AS TotalUpVotes,
    SUM(pm.DownVotes) AS TotalDownVotes
FROM 
    TagStatistics ts
LEFT JOIN 
    PostMetrics pm ON TRUE  
LEFT JOIN 
    ClosedPosts cp ON pm.PostId = cp.PostId
GROUP BY 
    t.TagName, ts.PostCount, ts.TotalViews
ORDER BY 
    TotalPosts DESC
LIMIT 10;