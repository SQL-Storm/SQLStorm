WITH TagCount AS (
    SELECT 
        p.Id AS PostId,
        COUNT(DISTINCT t.TagName) AS UniqueTagCount,
        STRING_AGG(t.TagName, ', ') AS AllTags
    FROM 
        Posts p
    JOIN 
        UNNEST(string_to_array(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS t(TagName) 
    GROUP BY 
        p.Id
),
PostStatistics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerDisplayName,
        p.CreationDate,
        COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVoteCount,
        COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVoteCount,
        COALESCE(SUM(CASE WHEN c.PostId IS NOT NULL THEN 1 ELSE 0 END), 0) AS CommentCount,
        tc.UniqueTagCount,
        tc.AllTags
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        TagCount tc ON p.Id = tc.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.OwnerDisplayName, p.CreationDate, tc.UniqueTagCount, tc.AllTags
),
RankedPosts AS (
    SELECT 
        ps.*,
        RANK() OVER (ORDER BY ps.UpVoteCount DESC, ps.CommentCount DESC) AS PostRank
    FROM 
        PostStatistics ps
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.CreationDate,
    rp.UpVoteCount,
    rp.DownVoteCount,
    rp.CommentCount,
    rp.UniqueTagCount,
    rp.AllTags,
    rp.PostRank,
    CASE 
        WHEN rp.PostRank <= 10 THEN 'Top Post'
        ELSE 'Regular Post'
    END AS PostCategory,
    (SELECT 
        COUNT(*) 
    FROM 
        Posts p2 
    WHERE 
        p2.CreationDate < rp.CreationDate) AS PostsBefore
FROM 
    RankedPosts rp
WHERE 
    rp.PostRank BETWEEN 1 AND 50
ORDER BY 
    rp.PostRank;