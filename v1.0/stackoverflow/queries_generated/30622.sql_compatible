
WITH RecursiveCTE AS (
    
    SELECT 
        p.Id AS QuestionId,
        p.Title,
        p.Score AS QuestionScore,
        p.CreationDate AS QuestionDate,
        a.Id AS AnswerId,
        a.Score AS AnswerScore,
        1 AS Level
    FROM 
        Posts p
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId
    WHERE 
        p.PostTypeId = 1
    
    UNION ALL
    
    SELECT 
        c.QuestionId,
        c.Title,
        c.QuestionScore,
        c.QuestionDate,
        a.Id AS AnswerId,
        a.Score AS AnswerScore,
        c.Level + 1
    FROM 
        RecursiveCTE c
    JOIN 
        Posts a ON c.AnswerId = a.ParentId
    WHERE 
        a.PostTypeId = 2
),
PostAggregate AS (
    
    SELECT 
        p.Id,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(v.Id) AS TotalVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
),
PostHistoryFiltered AS (
    
    SELECT 
        ph.PostId,
        ph.CreationDate,
        ph.Comment,
        COUNT(*) OVER (PARTITION BY ph.PostId) AS HistoryCount
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes crt ON CAST(ph.Comment AS INTEGER) = crt.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
)

SELECT 
    q.QuestionId,
    q.Title AS QuestionTitle,
    q.QuestionScore,
    q.QuestionDate,
    a.AnswerId,
    a.AnswerScore,
    pa.UpVotes,
    pa.DownVotes,
    pa.TotalVotes,
    MultipleHistory.HistoryCount AS ClosedHistoryCount,
    CASE 
        WHEN q.QuestionScore IS NULL THEN 'No Score'
        ELSE CAST((q.QuestionScore - COALESCE(a.AnswerScore, 0)) AS VARCHAR)
    END AS ScoreDifference
FROM 
    RecursiveCTE q
LEFT JOIN 
    PostAggregate pa ON q.QuestionId = pa.Id
LEFT JOIN 
    PostHistoryFiltered MultipleHistory ON q.QuestionId = MultipleHistory.PostId
WHERE 
    q.Level = 1
ORDER BY 
    q.QuestionDate DESC, 
    q.QuestionScore DESC;
