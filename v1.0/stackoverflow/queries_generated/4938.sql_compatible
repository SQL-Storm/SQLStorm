
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS rn,
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) OVER (PARTITION BY p.Id) AS up_votes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) OVER (PARTITION BY p.Id) AS down_votes,
        COALESCE(t.Count, 0) AS tag_count
    FROM 
        Posts p
        LEFT JOIN Votes v ON p.Id = v.PostId
        LEFT JOIN Tags t ON p.Id = t.ExcerptPostId
    WHERE 
        p.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 month'
),
UserBadgeCounts AS (
    SELECT 
        b.UserId,
        COUNT(*) AS badge_count
    FROM 
        Badges b
    WHERE 
        b.Class = 1 OR b.Class = 2
    GROUP BY 
        b.UserId
),
TopUsers AS (
    SELECT 
        u.Id,
        u.DisplayName,
        COALESCE(ub.badge_count, 0) AS badge_count,
        COALESCE(SUM(rp.ViewCount), 0) AS total_views,
        COALESCE(SUM(rp.up_votes) - SUM(rp.down_votes), 0) AS net_votes
    FROM 
        Users u
        LEFT JOIN UserBadgeCounts ub ON u.Id = ub.UserId
        LEFT JOIN RankedPosts rp ON u.Id = rp.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName, ub.badge_count
)
SELECT 
    tu.DisplayName,
    tu.badge_count,
    tu.total_views,
    tu.net_votes
FROM 
    TopUsers tu
WHERE 
    tu.badge_count > 0
ORDER BY 
    tu.net_votes DESC, tu.total_views DESC
LIMIT 10
UNION ALL
SELECT 
    'Total Posts' AS DisplayName,
    NULL AS badge_count,
    SUM(rp.ViewCount) AS total_views,
    SUM(rp.up_votes - rp.down_votes) AS net_votes
FROM 
    RankedPosts rp
WHERE 
    rp.rn = 1;
