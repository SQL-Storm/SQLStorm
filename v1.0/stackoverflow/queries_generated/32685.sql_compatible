
WITH RecursivePosts AS (
    
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.OwnerUserId = 1  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        rp.Level + 1
    FROM 
        Posts p
    INNER JOIN RecursivePosts rp ON p.ParentId = rp.Id
),
PostStats AS (
    
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        (SELECT MAX(a.Score) FROM Posts a WHERE a.ParentId = p.Id) AS MaxAnswerScore
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
),
AggregatedData AS (
    
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        AVG(
            CASE 
                WHEN ps.Score IS NULL THEN 0
                ELSE ps.Score
            END
        ) AS AvgPostScore,
        COUNT(DISTINCT ps.Id) AS QuestionCount
    FROM 
        Users u
    LEFT JOIN Badges b ON u.Id = b.UserId
    LEFT JOIN PostStats ps ON u.Id = ps.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    ad.UserId,
    ad.DisplayName,
    ad.BadgeCount,
    ad.AvgPostScore,
    ad.QuestionCount,
    rp.Id AS RecursivePostId,
    rp.Title AS RecursivePostTitle,
    rp.CreationDate AS RecursivePostDate,
    rp.Score AS RecursivePostScore,
    COUNT(DISTINCT c.Id) AS TotalComments
FROM 
    AggregatedData ad
LEFT JOIN RecursivePosts rp ON ad.UserId = rp.OwnerUserId
LEFT JOIN Comments c ON rp.Id = c.PostId
GROUP BY 
    ad.UserId, ad.DisplayName, ad.BadgeCount, ad.AvgPostScore, ad.QuestionCount, rp.Id, 
    rp.Title, rp.CreationDate, rp.Score
ORDER BY 
    ad.QuestionCount DESC, ad.AvgPostScore DESC;
