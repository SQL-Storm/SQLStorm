
WITH UserVoteStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(CASE WHEN v.VoteTypeId IN (2, 4) THEN 1 END) AS TotalUpVotes,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS TotalDownVotes,
        COUNT(CASE WHEN v.VoteTypeId = 6 THEN 1 END) AS TotalCloseVotes,
        SUM(v.BountyAmount) AS TotalBountySpent
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY u.Id, u.DisplayName
),
PopularTags AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount
    FROM Tags t
    JOIN Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::text[])
    GROUP BY t.TagName
    ORDER BY PostCount DESC
    LIMIT 10
),
ActiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews
    FROM Users u
    JOIN Posts p ON u.Id = p.OwnerUserId
    WHERE u.CreationDate < DATE '2024-10-01' - INTERVAL '1 year'
    GROUP BY u.Id, u.DisplayName
    HAVING COUNT(DISTINCT p.Id) > 5
)
SELECT 
    u.DisplayName AS UserDisplayName,
    u.Reputation AS UserReputation,
    uvs.TotalUpVotes,
    uvs.TotalDownVotes,
    uvs.TotalCloseVotes,
    uvs.TotalBountySpent,
    au.TotalPosts,
    au.TotalViews,
    pt.TagName AS PopularTag,
    pts.PostCount AS PopularTagPostCount
FROM Users u
JOIN UserVoteStats uvs ON u.Id = uvs.UserId
JOIN ActiveUsers au ON u.Id = au.UserId
JOIN PopularTags pt ON TRUE
LEFT JOIN PopularTags pts ON pt.TagName = pts.TagName
ORDER BY u.Reputation DESC, uvs.TotalUpVotes DESC;
