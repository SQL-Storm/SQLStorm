WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(CASE WHEN c.PostId IS NOT NULL THEN 1 END) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2  
    LEFT JOIN 
        unnest(string_to_array(p.Tags, ',')) AS tag_list(tag) ON true
    LEFT JOIN 
        Tags t ON tag_list.tag = t.TagName
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, u.DisplayName
),
PostHistoryDetails AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS HistoryDate,
        ph.Comment,
        pht.Name AS HistoryType,
        STRING_AGG(DISTINCT u.DisplayName, ', ') AS Editors
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id
    LEFT JOIN 
        Users u ON ph.UserId = u.Id
    WHERE 
        ph.PostHistoryTypeId IN (4, 5, 6, 10, 11)  
    GROUP BY 
        ph.PostId, ph.CreationDate, ph.Comment, pht.Name
),
FinalResults AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.OwnerDisplayName,
        rp.ViewCount,
        rp.CommentCount,
        rp.VoteCount,
        rp.Tags,
        COALESCE(pd.HistoryDate, 'No History') AS LastEditDate,
        COALESCE(pd.HistoryType, 'No History') AS LastEditType,
        COALESCE(pd.Editors, 'No Editors') AS LastEditors
    FROM 
        RankedPosts rp
    LEFT JOIN 
        PostHistoryDetails pd ON rp.PostId = pd.PostId
    ORDER BY 
        rp.ViewCount DESC, 
        rp.CommentCount DESC
)
SELECT 
    *
FROM 
    FinalResults
WHERE 
    Tags ILIKE '%SQL%'  
LIMIT 20;