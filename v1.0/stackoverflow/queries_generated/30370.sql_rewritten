WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ParentId,
        1 AS Level,
        p.OwnerUserId,
        p.CreationDate
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        Level + 1,
        p.OwnerUserId,
        p.CreationDate
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
)
SELECT 
    u.DisplayName AS Author,
    rph.PostId,
    rph.Title,
    rph.Level,
    COUNT(DISTINCT c.Id) AS TotalComments,
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
    SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes,
    AVG(v.BountyAmount) AS AverageBounty,
    MAX(rph.CreationDate) AS MostRecentDate,
    CASE WHEN rph.Level > 1 THEN 'Yes' ELSE 'No' END AS IsChildPost
FROM 
    RecursivePostHierarchy rph
LEFT JOIN 
    Users u ON rph.OwnerUserId = u.Id
LEFT JOIN 
    Comments c ON rph.PostId = c.PostId
LEFT JOIN 
    Votes v ON rph.PostId = v.PostId
GROUP BY 
    u.DisplayName, rph.PostId, rph.Title, rph.Level
HAVING 
    COUNT(DISTINCT c.Id) > 5  
ORDER BY 
    TotalUpvotes DESC, MostRecentDate DESC
LIMIT 50;