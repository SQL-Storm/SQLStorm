WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.LastActivityDate,
        u.DisplayName AS OwnerDisplayName,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.LastActivityDate DESC) AS ActivityRank,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentsCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVotesCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVotesCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
),
ActivitySummary AS (
    SELECT 
      PostId,
      Title,
      OwnerDisplayName,
      CreationDate,
      LastActivityDate,
      ViewCount,
      Score,
      CommentsCount,
      UpVotesCount,
      DownVotesCount,
      ActivityRank
    FROM 
      RankedPosts
    WHERE 
      ActivityRank <= 5 
),
CombinedData AS (
    SELECT 
        asum.PostId,
        asum.Title,
        asum.OwnerDisplayName,
        asum.CreationDate,
        asum.LastActivityDate,
        asum.ViewCount,
        asum.Score,
        asum.CommentsCount,
        asum.UpVotesCount,
        asum.DownVotesCount,
        ARRAY(SELECT STRING_AGG(T.TagName, ', ') FROM Tags T WHERE T.Id = ANY(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')::int[])) AS PostTags
    FROM 
        ActivitySummary asum
    JOIN 
        Posts p ON asum.PostId = p.Id
    ORDER BY 
        Score DESC, ViewCount DESC
)
SELECT 
    PostId,
    Title,
    OwnerDisplayName,
    CreationDate,
    LastActivityDate,
    ViewCount,
    Score,
    CommentsCount,
    UpVotesCount,
    DownVotesCount,
    PostTags
FROM 
    CombinedData
LIMIT 10;