WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(a.Id) AS AnswerCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Posts a ON a.ParentId = p.Id AND a.PostTypeId = 2
    LEFT JOIN 
        STRING_TO_ARRAY(p.Tags, ',') AS t(tag) ON TRUE 
    LEFT JOIN 
        Tags t ON t.TagName = TRIM(BOTH '<>' FROM t.tag) 
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, u.DisplayName
),
TopPosts AS (
    SELECT 
        *,
        RANK() OVER (ORDER BY AnswerCount DESC, ViewCount DESC) AS Rank
    FROM 
        RankedPosts
),
RecentPosts AS (
    SELECT 
        PostId, 
        Title, 
        OwnerDisplayName, 
        CreationDate, 
        Tags
    FROM 
        TopPosts
    WHERE 
        Rank <= 10
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.OwnerDisplayName,
    rp.CreationDate,
    rp.Tags,
    TO_CHAR(rp.CreationDate, 'DD-MM-YYYY') AS FormattedCreationDate,
    CASE 
        WHEN EXTRACT(EPOCH FROM cast('2024-10-01 12:34:56' as timestamp) - rp.CreationDate) < 86400 THEN 'New'
        WHEN EXTRACT(EPOCH FROM cast('2024-10-01 12:34:56' as timestamp) - rp.CreationDate) < 604800 THEN 'Recent'
        ELSE 'Old'
    END AS Age
FROM 
    RecentPosts rp
ORDER BY 
    rp.CreationDate DESC;