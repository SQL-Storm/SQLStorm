
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RecentRank,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        LATERAL (SELECT unnest(string_to_array(p.Tags, '>')) AS TagName) t ON TRUE
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreationDate, p.ViewCount
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS CloseDate,
        ph.Comment AS CloseReason,
        STRING_AGG(DISTINCT pt.Name, ', ') AS HistoryTypes
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11) 
    GROUP BY 
        ph.PostId, ph.CreationDate
),
FlaggedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        CASE 
            WHEN EXISTS (SELECT 1 FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) THEN 'Has Upvotes'
            ELSE 'No Upvotes'
        END AS VoteStatus,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Posts p
    LEFT JOIN 
        Badges b ON b.UserId = p.OwnerUserId
    WHERE 
        p.PostTypeId = 1 AND (p.Score > 0 OR p.ViewCount > 100)
    GROUP BY 
        p.Id, p.Title, p.Score, p.CreationDate, p.ViewCount
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.CreationDate,
    fp.VoteStatus,
    rp.Tags,
    COALESCE(cp.CloseDate, 'Not Closed') AS CloseInfo,
    COALESCE(cp.HistoryTypes, 'No Changes') AS ChangeDetails,
    rp.CommentCount,
    CASE 
        WHEN fp.BadgeCount > 0 THEN 'Awarded'
        ELSE 'Not Awarded'
    END AS BadgeStatus
FROM 
    FlaggedPosts fp
LEFT JOIN 
    RankedPosts rp ON fp.PostId = rp.PostId
LEFT JOIN 
    ClosedPosts cp ON fp.PostId = cp.PostId
WHERE 
    fp.CreationDate = (
        SELECT MAX(CreationDate) 
        FROM Posts 
        WHERE OwnerUserId = fp.OwnerUserId
    )
ORDER BY 
    rp.RecentRank,
    fp.Score DESC NULLS LAST
LIMIT 50;
