
WITH UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.CreationDate,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS TotalUpVotes,
        COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS TotalDownVotes,
        RANK() OVER (ORDER BY u.Reputation DESC) AS UserRank
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    GROUP BY u.Id, u.DisplayName, u.Reputation, u.CreationDate
),
PostEngagement AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        COALESCE(c.CommentCount, 0) AS TotalComments,
        COALESCE(ah.AcceptedAnswerId, 0) AS IsAccepted,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.LastActivityDate DESC) AS RecentPostRank
    FROM Posts p
    LEFT JOIN (
        SELECT 
            PostId,
            COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT DISTINCT 
            ParentId AS AcceptedAnswerId
        FROM Posts
        WHERE PostTypeId = 2 AND AcceptedAnswerId IS NOT NULL
    ) ah ON p.Id = ah.AcceptedAnswerId
    WHERE p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 year'
),
FilteredPosts AS (
    SELECT 
        pe.PostId,
        pe.Title,
        pe.Score,
        pe.ViewCount,
        pe.TotalComments,
        pe.IsAccepted,
        u.DisplayName,
        us.Reputation,
        us.UserRank
    FROM PostEngagement pe
    JOIN Users u ON pe.RecentPostRank = 1 AND pe.OwnerUserId = u.Id
    JOIN UserStatistics us ON u.Id = us.UserId
    WHERE pe.Score > 10 AND (pe.TotalComments > 5 OR pe.IsAccepted > 0)
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.ViewCount,
    fp.TotalComments,
    fp.DisplayName AS OwnerName,
    fp.Reputation AS OwnerReputation,
    CASE WHEN fp.IsAccepted > 0 THEN 'Yes' ELSE 'No' END AS IsAcceptedAnswer,
    STRING_AGG(t.TagName, ', ') AS AssociatedTags
FROM FilteredPosts fp
LEFT JOIN (
    SELECT 
        p.Id AS PostId,
        TRIM(BOTH '<>' FROM UNNEST(string_to_array(p.Tags, ','))) AS TagName
    FROM Posts p
) t ON fp.PostId = t.PostId
GROUP BY 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.ViewCount,
    fp.TotalComments,
    fp.DisplayName,
    fp.Reputation,
    fp.IsAccepted
ORDER BY 
    fp.Score DESC, 
    fp.ViewCount DESC;
