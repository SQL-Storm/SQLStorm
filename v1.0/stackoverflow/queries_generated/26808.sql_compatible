
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        u.DisplayName AS OwnerDisplayName,
        p.Score,
        p.CreationDate,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY u.Location ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    INNER JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 
        AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' 
),
TagDetails AS (
    SELECT 
        TRIM(UNNEST(STRING_TO_ARRAY(p.Tags, '>')) || TAGNAME) AS TagName, 
        p.Id AS PostId
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1
        AND p.Tags IS NOT NULL
),
VotesSummary AS (
    SELECT 
        PostId,
        COUNT(CASE WHEN vt.Name = 'UpMod' THEN 1 END) AS UpVotes,
        COUNT(CASE WHEN vt.Name = 'DownMod' THEN 1 END) AS DownVotes
    FROM 
        Votes v
    INNER JOIN 
        VoteTypes vt ON v.VoteTypeId = vt.Id
    GROUP BY 
        PostId
),
TopPosts AS (
    SELECT 
        rp.PostId, 
        rp.Title,
        rp.OwnerDisplayName,
        rp.Score,
        rp.CreationDate,
        td.TagName,
        vs.UpVotes,
        vs.DownVotes
    FROM 
        RankedPosts rp
    LEFT JOIN 
        TagDetails td ON rp.PostId = td.PostId
    LEFT JOIN 
        VotesSummary vs ON rp.PostId = vs.PostId
    WHERE 
        rp.PostRank <= 3 
)

SELECT 
    tp.PostId,
    tp.Title,
    tp.OwnerDisplayName,
    tp.Score,
    tp.CreationDate,
    STRING_AGG(tp.TagName, ', ') AS Tags,
    COALESCE(tp.UpVotes, 0) AS UpVotes,
    COALESCE(tp.DownVotes, 0) AS DownVotes
FROM 
    TopPosts tp
GROUP BY 
    tp.PostId, tp.Title, tp.OwnerDisplayName, tp.Score, tp.CreationDate
ORDER BY 
    tp.Score DESC;
