
WITH TagCounts AS (
    SELECT 
        tags.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(COALESCE(v.UpVotes, 0)) AS TotalUpVotes,
        SUM(COALESCE(v.DownVotes, 0)) AS TotalDownVotes,
        SUM(COALESCE(c.CommentCount, 0)) AS TotalComments
    FROM 
        Tags tags
    JOIN 
        Posts p ON tags.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::text[])
    LEFT JOIN 
        (SELECT PostId, SUM(Score) AS UpVotes, SUM(CASE WHEN Score < 0 THEN -Score ELSE 0 END) AS DownVotes
         FROM Votes 
         GROUP BY PostId) v ON p.Id = v.PostId
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS CommentCount 
         FROM Comments 
         GROUP BY PostId) c ON p.Id = c.PostId
    GROUP BY 
        tags.TagName
)
SELECT 
    tc.TagName,
    tc.PostCount,
    tc.TotalUpVotes,
    tc.TotalDownVotes,
    tc.TotalComments,
    ROUND((tc.TotalUpVotes - tc.TotalDownVotes) / NULLIF(tc.PostCount, 0)::numeric, 2) AS AvgScore,
    RANK() OVER (ORDER BY tc.PostCount DESC) AS RankByPostCount
FROM 
    TagCounts tc
WHERE 
    tc.PostCount > 0
ORDER BY 
    AvgScore DESC, 
    tc.PostCount DESC
LIMIT 10;
