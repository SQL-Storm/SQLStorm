
WITH UserRankings AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        RANK() OVER (ORDER BY u.Reputation DESC) AS UserRank
    FROM Users u
),
PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COALESCE(p.AcceptedAnswerId, -1) AS AcceptedAnswerId,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.PostTypeId = 1
    GROUP BY p.Id, p.Title, p.AcceptedAnswerId
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        ph.CreationDate AS CloseDate,
        r.Name AS CloseReason
    FROM PostHistory ph
    INNER JOIN CloseReasonTypes r ON CAST(ph.Comment AS INT) = r.Id
    WHERE ph.PostHistoryTypeId = 10
),
PostSummary AS (
    SELECT 
        pm.PostId,
        pm.Title,
        pm.CommentCount,
        pm.UpVotes,
        pm.DownVotes,
        COALESCE(cp.CloseDate, 'N/A') AS CloseDate,
        COALESCE(cp.CloseReason, 'Open') AS CloseReason,
        CASE 
            WHEN pm.UpVotes > pm.DownVotes THEN 'Positive'
            WHEN pm.UpVotes < pm.DownVotes THEN 'Negative'
            ELSE 'Neutral'
        END AS VoteSentiment
    FROM PostMetrics pm
    LEFT JOIN ClosedPosts cp ON pm.PostId = cp.PostId
)
SELECT 
    ur.UserId,
    ur.DisplayName,
    ur.UserRank,
    ps.Title,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes,
    ps.CloseDate,
    ps.CloseReason,
    ps.VoteSentiment
FROM UserRankings ur
INNER JOIN Posts p ON ur.UserId = p.OwnerUserId
INNER JOIN PostSummary ps ON p.Id = ps.PostId
WHERE ur.UserRank <= 10
ORDER BY ur.UserRank, ps.UpVotes DESC;
