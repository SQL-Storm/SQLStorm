
WITH RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        Users.DisplayName AS OwnerDisplayName,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Users ON p.OwnerUserId = Users.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, Users.DisplayName
),
FilteredPosts AS (
    SELECT 
        rp.*,
        CASE 
            WHEN rp.Score >= 10 THEN 'High'
            WHEN rp.Score BETWEEN 5 AND 9 THEN 'Medium'
            ELSE 'Low'
        END AS ScoreCategory
    FROM 
        RecentPosts rp
    WHERE 
        rp.CommentCount > 0
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.CreationDate,
    fp.OwnerDisplayName,
    fp.CommentCount,
    fp.UpVotes,
    fp.DownVotes,
    fp.ScoreCategory,
    COALESCE(b.Name, 'No Badge') AS BadgeName
FROM 
    FilteredPosts fp
LEFT JOIN 
    Badges b ON b.UserId = fp.OwnerDisplayName AND b.Class = 1 
WHERE 
    fp.PostRank <= 3
ORDER BY 
    fp.CreationDate DESC
LIMIT 100;
