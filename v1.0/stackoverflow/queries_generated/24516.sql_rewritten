WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(DISTINCT c.Id) OVER (PARTITION BY p.OwnerUserId) AS CommentCountPerUser
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year' 
        AND p.PostTypeId = 1 
),
CloseReasonVotes AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS CloseVoteCount,
        STRING_AGG(cr.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes cr ON ph.Comment::int = cr.Id 
    WHERE 
        ph.PostHistoryTypeId = 10 
    GROUP BY 
        ph.PostId
),
CombinedResults AS (
    SELECT 
        r.PostId,
        r.Title,
        r.CreationDate,
        r.ViewCount,
        r.Score,
        r.rn,
        r.CommentCountPerUser,
        COALESCE(c.CloseVoteCount, 0) AS CloseVoteCount,
        COALESCE(c.CloseReasons, 'No close reasons') AS CloseReasons
    FROM 
        RankedPosts r
    LEFT JOIN 
        CloseReasonVotes c ON r.PostId = c.PostId
)
SELECT 
    cr.PostId,
    cr.Title,
    cr.CreationDate,
    cr.ViewCount,
    cr.Score,
    cr.CommentCountPerUser,
    cr.CloseVoteCount,
    cr.CloseReasons,
    CASE 
        WHEN cr.CloseVoteCount > 0 THEN 'Closed'
        WHEN cr.CommentCountPerUser > 5 THEN 'Hot Topic'
        WHEN cr.Score >= 10 THEN 'Highly Upvoted'
        ELSE 'Normal'
    END AS PostStatus,
    CASE 
        WHEN cr.Score IS NULL THEN 'Score is NULL'
        WHEN cr.ViewCount IS NULL THEN 'ViewCount is NULL'
        ELSE 'All metrics present'
    END AS MetricStatus
FROM 
    CombinedResults cr
WHERE 
    cr.rn = 1 
ORDER BY 
    cr.Score DESC NULLS LAST
LIMIT 10;