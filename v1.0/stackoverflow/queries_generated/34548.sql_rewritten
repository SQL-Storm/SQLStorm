WITH RecursivePosts AS (
    SELECT 
        Id,
        Title,
        ParentId,
        CreationDate,
        1 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        p.CreationDate,
        rp.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePosts rp ON p.ParentId = rp.Id
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts,
        AVG(u.Reputation) AS AvgReputation
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
PostAggregates AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) AS TotalBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8  
    WHERE 
        p.CreationDate > cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id
)
SELECT 
    ups.UserId,
    ups.DisplayName,
    ups.TotalPosts,
    ups.PositivePosts,
    pga.Title,
    pga.CreationDate,
    pga.CommentCount,
    pga.TotalBounty,
    rp.Level AS PostLevel
FROM 
    UserStats ups
JOIN 
    PostAggregates pga ON ups.UserId = pga.OwnerUserId
LEFT JOIN 
    RecursivePosts rp ON rp.Id = pga.Id
WHERE 
    ups.AvgReputation > (
        SELECT AVG(Reputation) FROM Users WHERE Reputation IS NOT NULL
    ) 
    AND pga.TotalBounty > 0
ORDER BY 
    ups.TotalPosts DESC, ups.PositivePosts DESC
LIMIT 50;