
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Body,
        ARRAY_AGG(DISTINCT t.TagName) AS Tags,
        p.ViewCount,
        p.Score,
        U.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank
    FROM 
        Posts p
    JOIN 
        Users U ON p.OwnerUserId = U.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        LATERAL unnest(string_to_array(substring(Tags, 2, length(Tags)-2), '><')) AS t(TagName) ON true
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Body, p.ViewCount, p.Score, U.DisplayName
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Body,
        rp.Tags,
        rp.ViewCount,
        rp.Score,
        rp.OwnerDisplayName,
        rp.CommentCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.PostRank <= 3 
),
UserBadges AS (
    SELECT 
        U.Id AS UserId,
        ARRAY_AGG(B.Name) AS Badges
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.CreationDate,
    tp.Body,
    tp.Tags,
    tp.ViewCount,
    tp.Score,
    tp.OwnerDisplayName,
    ub.Badges,
    tp.CommentCount
FROM 
    TopPosts tp
LEFT JOIN 
    UserBadges ub ON tp.OwnerDisplayName = ub.UserId
ORDER BY 
    tp.Score DESC, 
    tp.CreationDate DESC;
