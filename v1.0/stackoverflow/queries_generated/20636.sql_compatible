
WITH UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS Ranking,
        CASE 
            WHEN u.Reputation IS NULL THEN 'Unknown' 
            WHEN u.Reputation > 1000 THEN 'High Rep' 
            ELSE 'Low Rep' 
        END AS ReputationCategory
    FROM Users u
), 
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Score,
        COALESCE(p.ViewCount, 0) AS ViewCount,
        COUNT(c.Id) AS CommentCount,
        SUM(v.BountyAmount) OVER (PARTITION BY p.Id) AS TotalBounty
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (8, 9) 
    GROUP BY p.Id, p.Score, p.ViewCount
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT cr.Name, ', ') AS CloseReasons
    FROM PostHistory ph
    JOIN CloseReasonTypes cr ON CAST(ph.Comment AS INT) = cr.Id
    WHERE ph.PostHistoryTypeId = 10 
    GROUP BY ph.PostId
),
FinalResults AS (
    SELECT 
        u.DisplayName,
        ur.Reputation,
        ps.PostId,
        ps.Score,
        ps.ViewCount,
        ps.CommentCount,
        cp.CloseReasons,
        ur.ReputationCategory,
        COALESCE(ps.TotalBounty, 0) AS EffectiveBounty
    FROM UserReputation ur
    JOIN Posts ps ON ps.OwnerUserId = ur.UserId
    LEFT JOIN ClosedPosts cp ON ps.Id = cp.PostId
    WHERE ur.Ranking <= 50 
)

SELECT 
    UserId,
    DisplayName,
    Reputation,
    ReputationCategory,
    SUM(ViewCount) AS TotalViews,
    SUM(CommentCount) AS TotalComments,
    COUNT(PostId) AS TotalPosts,
    MAX(Score) AS HighestPostScore,
    STRING_AGG(DISTINCT CloseReasons, '; ') AS ClosedReasonList
FROM FinalResults
GROUP BY UserId, DisplayName, Reputation, ReputationCategory
HAVING COUNT(PostId) > 0
ORDER BY TotalViews DESC, TotalPosts DESC
LIMIT 10;
