
WITH tag_counts AS (
    SELECT 
        unnest(string_to_array(substring(Tags, 2, length(Tags) - 2), '><')) AS Tag,
        COUNT(*) AS PostCount
    FROM 
        Posts
    WHERE 
        PostTypeId = 1
    GROUP BY 
        Tag
),
user_activity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(CASE WHEN p.PostTypeId = 2 THEN 1 END) AS TotalAnswers,
        COUNT(CASE WHEN p.PostTypeId = 1 THEN 1 END) AS TotalQuestions,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
top_users AS (
    SELECT 
        ua.UserId,
        ua.DisplayName,
        (ua.TotalAnswers + ua.TotalQuestions) AS ActivityScore,
        ua.TotalViews,
        ua.UpVotes,
        ua.DownVotes
    FROM 
        user_activity ua
    ORDER BY 
        ActivityScore DESC
    LIMIT 10
)
SELECT 
    tt.Tag,
    tt.PostCount,
    tu.DisplayName,
    tu.TotalViews,
    tu.UpVotes,
    tu.DownVotes
FROM 
    tag_counts tt
JOIN 
    top_users tu ON tu.UserId IN (
        SELECT 
            u.Id 
        FROM 
            Posts p
        JOIN 
            Users u ON p.OwnerUserId = u.Id
        WHERE 
            unnest(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')) = tt.Tag
    )
ORDER BY 
    tt.PostCount DESC, tu.TotalViews DESC;
