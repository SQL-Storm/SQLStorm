WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS TagRank
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1  
        AND p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
),
TopRankedPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Tags,
        rp.Score,
        rp.ViewCount
    FROM 
        RankedPosts rp
    WHERE 
        rp.TagRank = 1
),
PostDetails AS (
    SELECT 
        trp.PostId,
        trp.Title,
        trp.Tags,
        trp.Score,
        trp.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation AS OwnerReputation,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount
    FROM 
        TopRankedPosts trp
    JOIN 
        Posts p ON trp.PostId = p.Id
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        trp.PostId, trp.Title, trp.Tags, trp.Score, trp.ViewCount, u.DisplayName, u.Reputation
)
SELECT 
    pd.Title,
    pd.Tags,
    pd.Score,
    pd.ViewCount,
    pd.CommentCount,
    pd.VoteCount,
    pd.OwnerDisplayName,
    pd.OwnerReputation,
    TO_CHAR(pd.CreationDate, 'YYYY-MM-DD HH24:MI:SS') AS FormattedCreationDate
FROM 
    PostDetails pd
ORDER BY 
    pd.Score DESC, pd.ViewCount DESC
LIMIT 10;