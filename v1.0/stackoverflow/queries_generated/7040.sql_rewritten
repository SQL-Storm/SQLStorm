WITH UserBadgeCounts AS (
    SELECT UserId, COUNT(*) AS BadgeCount
    FROM Badges
    GROUP BY UserId
),
PostStats AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(a.AnswerCount, 0) AS AnswerCount,
        pt.Name AS PostTypeName,
        u.BadgeCount
    FROM Posts p
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
    LEFT JOIN (
        SELECT ParentId, COUNT(*) AS AnswerCount
        FROM Posts
        WHERE PostTypeId = 2
        GROUP BY ParentId
    ) a ON p.Id = a.ParentId
    JOIN PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN UserBadgeCounts u ON p.OwnerUserId = u.UserId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
TopPosts AS (
    SELECT *
    FROM PostStats
    WHERE Score > 10
    ORDER BY Score DESC, ViewCount DESC
    LIMIT 10
)
SELECT
    tp.PostId,
    tp.Title,
    tp.CreationDate,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    tp.AnswerCount,
    tp.PostTypeName,
    tp.BadgeCount,
    CASE
        WHEN tp.BadgeCount > 5 THEN 'Highly Recognized'
        WHEN tp.BadgeCount BETWEEN 1 AND 5 THEN 'Moderately Recognized'
        ELSE 'No Badges'
    END AS RecognitionLevel
FROM TopPosts tp
JOIN Users u ON tp.OwnerUserId = u.Id
ORDER BY tp.Score DESC, tp.ViewCount DESC;