
WITH UserReputation AS (
    SELECT Id, Reputation, UpVotes, DownVotes, Views,
           (UpVotes - DownVotes) AS NetVotes,
           ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS ReputationRank
    FROM Users
),
TopPosts AS (
    SELECT p.Id AS PostId, p.Title, p.CreationDate, p.ViewCount, p.Score, p.Tags, 
           COALESCE(a.AnswerCount, 0) AS AnswerCount,
           COALESCE(c.CommentCount, 0) AS CommentCount
    FROM Posts p
    LEFT JOIN (
        SELECT ParentId, COUNT(*) AS AnswerCount
        FROM Posts
        WHERE PostTypeId = 2  
        GROUP BY ParentId
    ) a ON p.Id = a.ParentId
    LEFT JOIN (
        SELECT PostId, COUNT(*) AS CommentCount
        FROM Comments
        GROUP BY PostId
    ) c ON p.Id = c.PostId
    WHERE p.PostTypeId = 1  
      AND p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year')
),
TopUsers AS (
    SELECT u.Id AS UserId, u.DisplayName, u.Reputation, ur.ReputationRank
    FROM Users u
    JOIN UserReputation ur ON u.Id = ur.Id
    WHERE ur.ReputationRank <= 10
),
HighScoringPosts AS (
    SELECT tp.PostId, tp.Title, tp.CreationDate, tp.ViewCount, tp.Score,
           tp.AnswerCount, tp.CommentCount, 
           (SELECT COUNT(*) FROM Votes v WHERE v.PostId = tp.PostId) AS VoteCount
    FROM TopPosts tp
    JOIN TopUsers tu ON tp.Score >= 10  
    ORDER BY tp.Score DESC
    LIMIT 50
)
SELECT tu.UserId, tu.DisplayName, t.Title, t.Score, t.VoteCount, t.ViewCount
FROM HighScoringPosts t
JOIN TopUsers tu ON t.PostId IN (SELECT Id FROM Categories WHERE Name = 'Top User Contributions')
ORDER BY t.Score DESC, t.ViewCount DESC;
