WITH RecentPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2), 0) AS UpVotes,
        COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3), 0) AS DownVotes,
        COUNT(DISTINCT c.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days'
    GROUP BY 
        p.Id
),
PostDetails AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        rp.UpVotes,
        rp.DownVotes,
        rp.CommentCount,
        RANK() OVER (ORDER BY rp.Score DESC, rp.UpVotes DESC) AS PostRank
    FROM 
        RecentPosts rp
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        SUM(u.Reputation) AS TotalReputation,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
)
SELECT 
    pd.Title,
    pd.CreationDate,
    pd.Score,
    pd.UpVotes,
    pd.DownVotes,
    pd.CommentCount,
    ud.TotalReputation,
    ud.BadgeCount,
    (CASE 
        WHEN pd.DownVotes > pd.UpVotes THEN 'Negative' 
        WHEN pd.UpVotes > pd.DownVotes THEN 'Positive'
        ELSE 'Neutral' 
     END) AS VoteSentiment,
    (SELECT string_agg(tag.TagName, ', ') 
     FROM Tags tag 
     WHERE tag.Id IN (
         SELECT unnest(string_to_array(p.Tags, '><'))::int
     )) AS AssociatedTags
FROM 
    PostDetails pd
LEFT JOIN 
    Users u ON pd.PostId = u.Id
LEFT JOIN 
    UserReputation ud ON u.Id = ud.UserId
WHERE 
    pd.PostRank <= 10
ORDER BY 
    pd.Score DESC, pd.CommentCount DESC;