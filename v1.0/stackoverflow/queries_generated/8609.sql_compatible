
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        u.DisplayName AS OwnerDisplayName,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year' 
    GROUP BY 
        p.Id, u.DisplayName, p.Title, p.CreationDate, p.PostTypeId, p.Score
),
TopPosts AS (
    SELECT 
        PostId, Title, OwnerDisplayName, CreationDate, CommentCount, UpVotes, DownVotes
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
)
SELECT 
    tp.Title,
    tp.OwnerDisplayName,
    tp.CreationDate,
    tp.CommentCount,
    tp.UpVotes,
    tp.DownVotes,
    t.TagName,
    pt.Name AS PostType
FROM 
    TopPosts tp
JOIN 
    Posts p ON tp.PostId = p.Id
LEFT JOIN 
    LATERAL (SELECT 
                  STRING_AGG(t.TagName, ', ') AS TagName 
              FROM 
                  Tags t 
              WHERE 
                  t.Id IN (SELECT UNNEST(string_to_array(p.Tags, '> <'))::int[]) 
              )) t ON true
JOIN 
    PostTypes pt ON p.PostTypeId = pt.Id
ORDER BY 
    tp.UpVotes DESC, tp.CreationDate DESC;
