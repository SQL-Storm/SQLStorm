WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),

TopPosts AS (
    SELECT 
        PostId,
        Title,
        CreationDate,
        Score,
        ViewCount,
        CommentCount,
        Upvotes,
        Downvotes,
        CASE 
            WHEN Score > 100 THEN 'High Score'
            WHEN Score > 50 THEN 'Medium Score'
            ELSE 'Low Score' 
        END AS ScoreCategory
    FROM 
        RankedPosts
    WHERE 
        rn = 1  
),

InactiveUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        DENSE_RANK() OVER (ORDER BY u.Reputation DESC) AS Rank
    FROM 
        Users u
    WHERE 
        u.LastAccessDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
)

SELECT 
    u.UserId,
    u.DisplayName,
    u.Reputation,
    tp.Title,
    tp.CreationDate,
    tp.Score,
    tp.ViewCount,
    tp.CommentCount,
    tp.Upvotes,
    tp.Downvotes,
    tp.ScoreCategory
FROM 
    InactiveUsers u
LEFT JOIN 
    TopPosts tp ON u.UserId = tp.OwnerUserId
WHERE 
    tp.Score IS NOT NULL 
ORDER BY 
    u.Reputation DESC, 
    tp.Score DESC;