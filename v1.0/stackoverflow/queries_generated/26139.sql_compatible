
WITH PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        p.CreationDate,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT a.Id) AS AnswerCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, p.Title, p.Body, p.Tags, p.CreationDate
),
BestPost AS (
    SELECT 
        ps.PostId, 
        ps.Title, 
        ps.CreationDate, 
        ps.CommentCount,
        ps.AnswerCount,
        ps.UpVotes,
        ps.DownVotes,
        ROW_NUMBER() OVER (ORDER BY ps.UpVotes - ps.DownVotes DESC, ps.AnswerCount DESC, ps.CommentCount DESC) AS Rank
    FROM 
        PostStats ps
)
SELECT 
    bp.PostId,
    bp.Title,
    bp.CreationDate,
    bp.CommentCount,
    bp.AnswerCount,
    bp.UpVotes,
    bp.DownVotes,
    CASE 
        WHEN bp.AnswerCount > 0 THEN 'Active'
        WHEN bp.CommentCount > 0 THEN 'Under Discussion'
        ELSE 'Less Active' 
    END AS ActivityStatus,
    STRING_AGG(t.TagName, ', ') AS RelatedTags
FROM 
    BestPost bp
LEFT JOIN 
    Posts p ON bp.PostId = p.Id
LEFT JOIN 
    Tags t ON t.Id = ANY(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><')::int[])
WHERE 
    bp.Rank <= 10
GROUP BY 
    bp.PostId, bp.Title, bp.CreationDate, bp.CommentCount, bp.AnswerCount, bp.UpVotes, bp.DownVotes
ORDER BY 
    bp.UpVotes - bp.DownVotes DESC, bp.AnswerCount DESC;
