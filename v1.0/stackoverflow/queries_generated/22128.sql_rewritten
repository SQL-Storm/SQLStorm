WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId, 
        p.Title, 
        p.PostTypeId, 
        p.CreationDate, 
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS Rank,
        COALESCE(p16.Class, 0) AS BadgeClass,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    LEFT JOIN 
        Badges b ON b.UserId = p.OwnerUserId
    LEFT JOIN 
        PostHistory ph ON ph.PostId = p.Id AND ph.PostHistoryTypeId IN (1, 4, 6)
    LEFT JOIN 
        PostHistoryTypes p16 ON ph.PostHistoryTypeId = p16.Id
    WHERE 
        p.CreationDate >= DATEADD(year, -1, GETDATE()) 
        AND p.ViewCount IS NOT NULL
    GROUP BY 
        p.Id, p.Title, p.PostTypeId, p.CreationDate, p.ViewCount, p16.Class
), 

TopPosts AS (
    SELECT 
        PostId, 
        Title, 
        PostTypeId, 
        CreationDate, 
        ViewCount, 
        Rank, 
        BadgeClass, 
        CommentCount,
        UpVotes,
        DownVotes,
        CASE 
            WHEN Rank <= 10 THEN 'Top Post'
            ELSE 'Regular Post'
        END AS PostCategory
    FROM 
        RankedPosts
), 

CalculatedStats AS (
    SELECT 
        PostId, 
        Title, 
        PostTypeId, 
        CreationDate, 
        ViewCount,
        Rank,
        BadgeClass,
        CommentCount,
        UpVotes,
        DownVotes,
        PostCategory,
        DENSE_RANK() OVER (ORDER BY UpVotes DESC) AS UpVoteRank
    FROM 
        TopPosts
)

SELECT 
    ps.PostId,
    ps.Title,
    ps.PostTypeId,
    ps.CreationDate,
    ps.ViewCount,
    ps.PostCategory,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes,
    CASE 
        WHEN ps.BadgeClass = 1 THEN 'Gold'
        WHEN ps.BadgeClass = 2 THEN 'Silver'
        WHEN ps.BadgeClass = 3 THEN 'Bronze'
        ELSE 'None'
    END AS Badge,
    CASE 
        WHEN ps.UpVotes > ps.DownVotes THEN 'Positive' 
        WHEN ps.UpVotes < ps.DownVotes THEN 'Negative' 
        ELSE 'Neutral' 
    END AS VoteSentiment,
    CASE 
        WHEN ps.UpVoteRank <= 5 THEN 'Highly Upvoted'
        ELSE 'Moderately Upvoted'
    END AS UpVoteCategory
FROM 
    CalculatedStats ps
WHERE 
    ps.CommentCount > 5
    AND (ps.BadgeClass > 0 OR ps.PostCategory = 'Top Post')
ORDER BY 
    ps.ViewCount DESC, ps.CreationDate ASC;