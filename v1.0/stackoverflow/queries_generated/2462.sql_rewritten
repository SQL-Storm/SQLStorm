WITH UserBadges AS (
    SELECT UserId, COUNT(*) AS BadgeCount
    FROM Badges
    WHERE Date >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY UserId
),
PopularTags AS (
    SELECT UNNEST(string_to_array(Tags, '>')) AS TagName, COUNT(*) AS UsageCount
    FROM Posts
    WHERE CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months'
    GROUP BY TagName
    ORDER BY UsageCount DESC
    LIMIT 10
),
RecentPosts AS (
    SELECT p.Id, p.Title, p.Score, p.OwnerUserId, p.CreationDate, u.DisplayName,
           COALESCE(SUM(v.VoteTypeId = 2), 0) AS UpVotes,
           COALESCE(SUM(v.VoteTypeId = 3), 0) AS DownVotes
    FROM Posts p
    LEFT JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN Votes v ON p.Id = v.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month'
    GROUP BY p.Id, u.DisplayName
),
PostHistoryWithType AS (
    SELECT ph.PostId, p.Title, p.Body, p.CreationDate AS PostDate,
           p.AcceptedAnswerId, p.ParentId, p.ViewCount,
           p.CommentCount, p.FavoriteCount,
           p.LastActivityDate, p.LastEditDate, p.LastEditorDisplayName,
           MIN(ph.CreationDate) AS FirstEditDate,
           COUNT(*) FILTER (WHERE ph.PostHistoryTypeId IN (4, 5, 6)) AS EditCount,
           STRING_AGG(DISTINCT CONCAT(ph.UserDisplayName, ': ', ph.Comment) ORDER BY ph.CreationDate) AS EditComments
    FROM PostHistory ph
    JOIN Posts p ON ph.PostId = p.Id
    WHERE ph.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id, p.Title, p.Body, p.AcceptedAnswerId,
             p.ParentId, p.ViewCount, p.CommentCount,
             p.FavoriteCount, p.LastActivityDate, 
             p.LastEditDate, p.LastEditorDisplayName
)
SELECT ub.UserId, u.DisplayName, ub.BadgeCount, rp.Id AS PostId,
       rp.Title, rp.Score, rp.UpVotes, rp.DownVotes,
       phwt.FirstEditDate, phwt.EditCount, phwt.EditComments,
       pt.TagName
FROM UserBadges ub
JOIN Users u ON ub.UserId = u.Id
JOIN RecentPosts rp ON u.Id = rp.OwnerUserId
LEFT JOIN PostHistoryWithType phwt ON rp.Id = phwt.PostId
LEFT JOIN PopularTags pt ON pt.TagName = ANY(string_to_array(rp.Title, ' '))
WHERE ub.BadgeCount > 5
ORDER BY ub.BadgeCount DESC, rp.Score DESC;