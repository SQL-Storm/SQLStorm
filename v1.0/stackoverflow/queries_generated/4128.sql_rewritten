WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS UserRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '90 days'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        ROW_NUMBER() OVER (ORDER BY u.Reputation DESC) AS Rank
    FROM 
        Users u
    WHERE 
        u.Reputation > 1000
),
UserPostStats AS (
    SELECT 
        t.UserId,
        t.DisplayName,
        SUM(r.ViewCount) AS TotalViews,
        SUM(r.Score) AS TotalScore,
        COUNT(r.PostId) AS PostCount,
        AVG(r.CommentCount) AS AvgComments
    FROM 
        TopUsers t
    JOIN 
        RankedPosts r ON t.UserId = r.UserId
    GROUP BY 
        t.UserId, t.DisplayName
    HAVING 
        SUM(r.Score) > 50
)
SELECT 
    ups.DisplayName,
    ups.TotalViews,
    ups.TotalScore,
    ups.PostCount,
    ups.AvgComments,
    CASE 
        WHEN ups.TotalViews IS NULL THEN 'No Views'
        WHEN ups.TotalViews > 1000 THEN 'Highly Viewed'
        ELSE 'Moderate Views'
    END AS ViewCategory
FROM 
    UserPostStats ups
ORDER BY 
    ups.TotalScore DESC
LIMIT 10;