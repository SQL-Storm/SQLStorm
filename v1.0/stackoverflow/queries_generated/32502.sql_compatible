
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id, 
        p.ParentId, 
        p.Title, 
        p.Score, 
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL  

    UNION ALL 

    SELECT 
        p.Id, 
        p.ParentId, 
        p.Title, 
        p.Score, 
        r.Level + 1 
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.Id  
),
PostVoteSummary AS (
    SELECT 
        p.Id AS PostId, 
        COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVoteCount,
        COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVoteCount,
        COUNT(v.Id) AS TotalVotes
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId  
    GROUP BY 
        p.Id
),
UserBadges AS (
    SELECT 
        b.UserId, 
        COUNT(b.Id) AS BadgeCount, 
        MAX(b.Date) AS LastBadgeDate
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
PopularTags AS (
    SELECT 
        TRIM(UNNEST(string_to_array(p.Tags, ','))) AS TagName,
        COUNT(*) AS PostCount
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        TRIM(UNNEST(string_to_array(p.Tags, ',')))
    HAVING 
        COUNT(*) > 5  
)
SELECT 
    p.Id AS PostId,
    p.Title,
    ph.Level,
    ps.UpVoteCount,
    ps.DownVoteCount,
    ps.TotalVotes,
    u.DisplayName AS OwnerDisplayName,
    ub.BadgeCount,
    pt.TagName,
    pt.PostCount AS TagPostCount
FROM 
    RecursivePostHierarchy ph
INNER JOIN 
    Posts p ON ph.Id = p.Id
INNER JOIN 
    PostVoteSummary ps ON p.Id = ps.PostId
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
LEFT JOIN 
    PopularTags pt ON pt.TagName = ANY(string_to_array(p.Tags, ','))  
WHERE 
    p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days'  
AND 
    (ps.UpVoteCount - ps.DownVoteCount) > 0  
ORDER BY 
    ph.Level ASC, 
    ps.TotalVotes DESC;
