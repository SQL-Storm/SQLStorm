WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 2) OVER (PARTITION BY p.Id) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE v.VoteTypeId = 3) OVER (PARTITION BY p.Id) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.Tags,
    rp.RankScore,
    rp.CommentCount,
    rp.UpVotes,
    rp.DownVotes,
    CASE 
        WHEN rp.UpVotes IS NULL OR rp.DownVotes IS NULL THEN 'Data Missing'
        WHEN rp.UpVotes + rp.DownVotes = 0 THEN 'No Votes Yet'
        ELSE 
            CASE 
                WHEN (rp.UpVotes::decimal / (rp.UpVotes + rp.DownVotes)) > 0.5 THEN 'Mostly Positive'
                ELSE 'Mostly Negative'
            END
    END AS VoteSentiment,
    (SELECT STRING_AGG(DISTINCT t.TagName, ', ') 
     FROM Tags t 
     WHERE t.Id IN (SELECT UNNEST(string_to_array(rp.Tags, '>'))::int)) AS RelatedTags 
FROM 
    RankedPosts rp
WHERE 
    rp.RankScore <= 10 
ORDER BY 
    rp.Score DESC;