WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
        AND p.Score > 0
),
AnswerStats AS (
    SELECT 
        p.Id AS PostId,
        COUNT(c.Id) AS CommentCount,
        AVG(v.BountyAmount) AS AverageBounty
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8  
    WHERE 
        p.PostTypeId = 2  
    GROUP BY 
        p.Id
),
TopPosts AS (
    SELECT 
        rp.PostId, 
        rp.Title, 
        rp.CreationDate, 
        rp.ViewCount, 
        rp.Score, 
        rp.OwnerDisplayName, 
        as.CommentCount, 
        as.AverageBounty
    FROM 
        RankedPosts rp
    LEFT JOIN 
        AnswerStats as ON rp.PostId = as.PostId
    WHERE 
        rp.Rank <= 10
)
SELECT 
    tp.Title, 
    tp.OwnerDisplayName, 
    tp.CreationDate, 
    COALESCE(tp.ViewCount, 0) AS ViewCount,
    COALESCE(tp.Score, 0) AS Score,
    COALESCE(tp.CommentCount, 0) AS CommentCount,
    COALESCE(tp.AverageBounty, 0) AS AverageBounty,
    CASE 
        WHEN tp.AverageBounty > 0 THEN 'Has Bounty'
        ELSE 'No Bounty'
    END AS BountyStatus
FROM 
    TopPosts tp
ORDER BY 
    tp.Score DESC, 
    tp.ViewCount DESC;