
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Score,
        p.CreationDate,
        p.LastActivityDate,
        p.ViewCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
    LEFT JOIN 
        (SELECT UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) ) AS TagName FROM Posts p) AS tag_arr ON TRUE
    LEFT JOIN 
        Tags t ON tag_arr.TagName = t.TagName 
    GROUP BY 
        p.Id, p.Title, p.Body, p.Score, p.CreationDate, p.LastActivityDate, p.ViewCount
),
TopActivePosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.CommentCount,
        rp.VoteCount,
        rp.Rank,
        DENSE_RANK() OVER (ORDER BY rp.CommentCount DESC, rp.VoteCount DESC) AS ActivityRank
    FROM 
        RankedPosts rp 
    WHERE 
        rp.LastActivityDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 month'
)
SELECT 
    rap.PostId,
    rap.Title,
    rap.ViewCount,
    rap.CommentCount,
    rap.VoteCount,
    rap.Rank,
    rap.ActivityRank,
    U.DisplayName AS OwnerDisplayName,
    U.Reputation AS OwnerReputation,
    U.Location AS OwnerLocation
FROM 
    TopActivePosts rap
JOIN 
    Users U ON U.Id = (SELECT OwnerUserId FROM Posts WHERE Id = rap.PostId)
WHERE 
    rap.Rank <= 10
ORDER BY 
    rap.ActivityRank, rap.CommentCount DESC;
