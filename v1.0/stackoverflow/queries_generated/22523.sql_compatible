
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerName,
        RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS ViewRank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= DATEADD(DAY, -30, '2024-10-01')
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(*) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Badges b
    GROUP BY 
        b.UserId
),
PostComments AS (
    SELECT 
        c.PostId,
        COUNT(c.Id) AS CommentCount
    FROM 
        Comments c
    GROUP BY 
        c.PostId
),
FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        rp.OwnerName,
        COALESCE(uc.BadgeCount, 0) AS UserBadgeCount,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        (CASE WHEN rp.ScoreRank = 1 THEN 'Top' ELSE 'Other' END) AS PostRank
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserBadges uc ON rp.OwnerName = uc.UserId
    LEFT JOIN 
        PostComments pc ON rp.PostId = pc.PostId
)

SELECT 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.ViewCount,
    fp.OwnerName,
    fp.UserBadgeCount,
    fp.CommentCount,
    fp.PostRank,
    CASE 
        WHEN fp.UserBadgeCount > 3 THEN 'Expert' 
        WHEN fp.UserBadgeCount BETWEEN 1 AND 3 THEN 'Intermediate' 
        ELSE 'Beginner' 
    END AS UserLevel,
    (SELECT 
         COUNT(DISTINCT pl.RelatedPostId)
     FROM 
         PostLinks pl 
     WHERE 
         pl.PostId = fp.PostId) AS RelatedPostCount,
    (SELECT 
         STRING_AGG(DISTINCT pt.Name, ', ')
     FROM 
         PostHistory ph 
     JOIN 
         PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id 
     WHERE 
         ph.PostId = fp.PostId
         AND ph.CreationDate >= DATEADD(DAY, -90, '2024-10-01')) AS RecentEditTypes
FROM 
    FilteredPosts fp
WHERE 
    fp.CommentCount > 0
    AND (fp.Score > 10 OR fp.ViewCount > 100)
ORDER BY 
    fp.Score DESC, 
    fp.ViewCount DESC;
