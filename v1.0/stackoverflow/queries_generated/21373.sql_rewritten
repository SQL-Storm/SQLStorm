WITH RecursiveTagHierarchy AS (
    SELECT Id, TagName, Count, ExcerptPostId, WikiPostId, IsModeratorOnly, IsRequired,
           ROW_NUMBER() OVER (ORDER BY Count DESC) AS Rank
    FROM Tags
    WHERE IsRequired = 1
),
UserReputation AS (
    SELECT Id, Reputation,
           CASE 
               WHEN Reputation > 1000 THEN 'High'
               WHEN Reputation >= 100 THEN 'Medium'
               ELSE 'Low'
           END AS ReputationLevel
    FROM Users
),
PostStatistics AS (
    SELECT p.Id AS PostId,
           p.Title,
           p.CreationDate,
           p.Score,
           COALESCE(p.ViewCount, 0) AS ViewCount,
           COUNT(DISTINCT c.Id) AS CommentCount,
           COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 2) AS UpVotes,
           COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 3) AS DownVotes,
           COALESCE(MAX(b.Class), 0) AS MaxBadgeClass,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY COUNT(c.Id) DESC) AS UserPostRank
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Badges b ON p.OwnerUserId = b.UserId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY p.Id
)
SELECT 
    p.PostId,
    p.Title,
    p.CreationDate,
    p.ViewCount,
    p.CommentCount,
    p.UpVotes - p.DownVotes AS NetVotes,
    u.Reputation,
    u.ReputationLevel,
    th.TagName AS TopTag,
    CASE 
        WHEN p.MaxBadgeClass = 1 THEN 'Gold Badge Holder'
        WHEN p.MaxBadgeClass = 2 THEN 'Silver Badge Holder'
        ELSE 'No Significant Badge'
    END AS BadgeStatus
FROM PostStatistics p
JOIN Users u ON p.PostId = ANY(SELECT p2.Id FROM Posts p2 WHERE p2.OwnerUserId = u.Id)
LEFT JOIN RecursiveTagHierarchy th ON p.PostId = th.Id
WHERE p.CommentCount > 0
AND u.ReputationLevel = 'High'
ORDER BY p.ViewCount DESC, p.CreationDate ASC
LIMIT 10
OFFSET 1;