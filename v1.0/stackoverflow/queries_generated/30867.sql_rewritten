WITH RECURSIVE UserReputation AS (
    SELECT 
        Id AS UserId, 
        DisplayName, 
        Reputation,
        1 AS Level
    FROM Users
    WHERE Reputation > 1000
    
    UNION ALL
    
    SELECT 
        u.Id AS UserId, 
        u.DisplayName, 
        u.Reputation, 
        ur.Level + 1
    FROM Users u
    INNER JOIN UserReputation ur ON u.Reputation > ur.Reputation
    WHERE ur.Level < 5 
),
PostAggregates AS (
    SELECT 
        p.Id AS PostId,
        COUNT(DISTINCT c.Id) AS CommentCount,
        COUNT(DISTINCT v.Id) AS VoteCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS LastClosedDate
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    GROUP BY p.Id
),
TopPosts AS (
    SELECT 
        pa.PostId,
        pa.CommentCount,
        pa.VoteCount,
        pa.UpVoteCount,
        pa.DownVoteCount,
        p.Title,
        p.CreationDate,
        ROW_NUMBER() OVER (ORDER BY pa.VoteCount DESC, pa.CommentCount DESC) AS Rank
    FROM PostAggregates pa
    JOIN Posts p ON pa.PostId = p.Id
    WHERE p.PostTypeId = 1 AND pa.VoteCount > 0
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(*) AS TotalBadges,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM Badges b
    GROUP BY b.UserId
)
SELECT 
    u.DisplayName AS User,
    ur.Reputation AS Reputation,
    tb.Title AS TopPostTitle,
    tb.CommentCount,
    tb.VoteCount,
    tb.UpVoteCount,
    tb.DownVoteCount,
    ub.TotalBadges,
    ub.BadgeNames,
    COALESCE(tb.LastClosedDate::DATE, 'Never Closed') AS LastClosedPostDate,
    CASE 
        WHEN tb.VoteCount > 100 THEN 'Highly Voted'
        WHEN tb.VoteCount > 50 THEN 'Moderately Voted'
        ELSE 'Less Engaged'
    END AS EngagementLevel
FROM Users u
JOIN UserReputation ur ON u.Id = ur.UserId
LEFT JOIN TopPosts tb ON u.Id = tb.PostId
LEFT JOIN UserBadges ub ON u.Id = ub.UserId
WHERE ur.Level <= 5
ORDER BY ur.Reputation DESC, tb.VoteCount DESC
LIMIT 10;