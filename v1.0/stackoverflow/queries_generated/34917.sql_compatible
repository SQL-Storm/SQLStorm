
WITH RecursivePostHierarchy AS (
    SELECT 
        Id AS PostId, 
        Title, 
        ParentId,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),
PostCounts AS (
    SELECT
        p.Id,
        p.Title,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.Title
),
HotPosts AS (
    SELECT 
        ph.PostId,
        ph.Title,
        COALESCE(pc.CommentCount, 0) AS CommentCount,
        COALESCE(pc.UpVotes, 0) - COALESCE(pc.DownVotes, 0) AS NetVotes,
        ROW_NUMBER() OVER (ORDER BY COALESCE(pc.CommentCount, 0) DESC, NetVotes DESC) AS HotRank
    FROM 
        RecursivePostHierarchy ph
    LEFT JOIN 
        PostCounts pc ON ph.PostId = pc.Id
    WHERE 
        ph.Level = 0  
)
SELECT 
    p.Id AS PostId,
    p.Title,
    p.CreationDate,
    p.LastActivityDate,
    COALESCE(vt.Name, 'No Vote Type') AS VoteType,
    SUM(CASE WHEN v.UserId IS NOT NULL THEN 1 ELSE 0 END) AS TotalVotes,
    AVG(COALESCE(NULLIF(u.Reputation, 0), NULL)) AS AvgUserReputation,
    h.HotRank
FROM 
    Posts p
LEFT JOIN 
    Votes v ON p.Id = v.PostId
LEFT JOIN 
    VoteTypes vt ON v.VoteTypeId = vt.Id
LEFT JOIN 
    Users u ON v.UserId = u.Id
LEFT JOIN 
    HotPosts h ON p.Id = h.PostId
WHERE 
    p.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
GROUP BY 
    p.Id, p.Title, p.CreationDate, p.LastActivityDate, h.HotRank, vt.Name
HAVING 
    SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) > 10 
ORDER BY 
    h.HotRank ASC, TotalVotes DESC;
