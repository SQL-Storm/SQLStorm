
WITH RecursivePostHistory AS (
    SELECT ph.Id,
           ph.PostId,
           ph.UserId,
           ph.CreationDate,
           ph.Comment,
           ph.PostHistoryTypeId,
           1 AS Level
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId IN (1, 2, 4) 
    
    UNION ALL

    SELECT ph.Id,
           ph.PostId,
           ph.UserId,
           ph.CreationDate,
           ph.Comment,
           ph.PostHistoryTypeId,
           r.Level + 1
    FROM PostHistory ph
    JOIN RecursivePostHistory r ON ph.PostId = r.PostId
    WHERE ph.CreationDate < r.CreationDate 
)
, UserActivity AS (
    SELECT u.Id AS UserId,
           u.DisplayName,
           COUNT(p.Id) AS PostCount,
           SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
           SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
           SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounties,
           MAX(ph.CreationDate) AS LastActivity
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN RecursivePostHistory rph ON p.Id = rph.PostId
    WHERE u.Reputation > 1000
    GROUP BY u.Id, u.DisplayName
),
PostStatistics AS (
    SELECT p.Id AS PostId,
           p.Title,
           p.ViewCount,
           COALESCE(v.UpVotes, 0) AS TotalUpVotes,
           COALESCE(v.DownVotes, 0) AS TotalDownVotes,
           COALESCE(c.CommentCount, 0) AS TotalComments,
           ROW_NUMBER() OVER (ORDER BY p.ViewCount DESC) AS PopularityRank
    FROM Posts p
    LEFT JOIN (SELECT PostId, COUNT(*) AS UpVotes
               FROM Votes
               WHERE VoteTypeId = 2
               GROUP BY PostId) v ON p.Id = v.PostId
    LEFT JOIN (SELECT PostId, COUNT(*) AS CommentCount
               FROM Comments
               GROUP BY PostId) c ON p.Id = c.PostId
),
FinalOutput AS (
    SELECT u.UserId,
           u.DisplayName,
           u.PostCount,
           u.QuestionCount,
           u.AnswerCount,
           u.TotalBounties,
           u.LastActivity,
           ps.Title AS PopularPostTitle,
           ps.ViewCount AS PopularPostViews,
           ps.TotalUpVotes,
           ps.TotalDownVotes,
           ps.TotalComments,
           ps.PopularityRank
    FROM UserActivity u
    LEFT JOIN PostStatistics ps ON ps.PopularityRank = 1 
)
SELECT *,
       CASE 
           WHEN LastActivity < CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '30 days' THEN 'Inactive'
           ELSE 'Active'
       END AS UserStatus
FROM FinalOutput
ORDER BY PostCount DESC, TotalBounties DESC;
