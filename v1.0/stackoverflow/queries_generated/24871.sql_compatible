
WITH TagStatistics AS (
    SELECT 
        Tags.TagName,
        COUNT(DISTINCT Posts.Id) AS PostCount,
        SUM(Posts.ViewCount) AS TotalViews,
        AVG(Users.Reputation) AS AvgReputation,
        STRING_AGG(DISTINCT Users.DisplayName, ', ') AS UserContributors
    FROM 
        Tags
    JOIN 
        Posts ON Tags.Id = ANY(string_to_array(Tags.Tags, ',')::integer[])
    LEFT JOIN 
        Users ON Posts.OwnerUserId = Users.Id
    WHERE 
        Tags.IsModeratorOnly IS NOT TRUE
    GROUP BY 
        Tags.TagName
),
VoteSummary AS (
    SELECT 
        PostId,
        SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(*) AS TotalVotes
    FROM 
        Votes
    GROUP BY 
        PostId
),
PostHistoryStats AS (
    SELECT 
        PostId,
        MAX(CASE WHEN PostHistoryTypeId = 10 THEN CreationDate END) AS ClosuredDate,
        MAX(CASE WHEN PostHistoryTypeId = 11 THEN CreationDate END) AS ReopenedDate,
        COUNT(*) FILTER (WHERE PostHistoryTypeId IN (10, 11)) AS ClosureCount
    FROM 
        PostHistory
    GROUP BY 
        PostId
)
SELECT 
    ts.TagName,
    ts.PostCount,
    ts.TotalViews,
    ts.AvgReputation,
    ts.UserContributors,
    COALESCE(vs.UpVotes, 0) AS UpVotes,
    COALESCE(vs.DownVotes, 0) AS DownVotes,
    COALESCE(vs.TotalVotes, 0) AS TotalVotes,
    phs.ClosuredDate,
    phs.ReopenedDate,
    phs.ClosureCount
FROM 
    TagStatistics ts
LEFT JOIN 
    VoteSummary vs ON ts.PostCount > 0 
LEFT JOIN 
    PostHistoryStats phs ON ts.PostCount = (SELECT COUNT(*) FROM Posts)  
WHERE 
    ts.AvgReputation IS NOT NULL
AND 
    (phs.ClosureCount > 0 OR phs.ClosureCount IS NULL)  
ORDER BY 
    ts.TotalViews DESC, ts.PostCount ASC
LIMIT 100;
