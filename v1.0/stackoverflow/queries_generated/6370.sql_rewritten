WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        u.DisplayName AS OwnerDisplayName,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        ROW_NUMBER() OVER(PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName
), FilteredPosts AS (
    SELECT 
        rp.*,
        pt.Name AS PostTypeName,
        CASE 
            WHEN rp.Score <= 0 THEN 'Low Score'
            WHEN rp.Score BETWEEN 1 AND 10 THEN 'Medium Score'
            ELSE 'High Score'
        END AS ScoreCategory
    FROM 
        RankedPosts rp
    JOIN 
        PostTypes pt ON rp.Rank <= 10 AND pt.Id = (SELECT DISTINCT PostTypeId FROM Posts ORDER BY Score DESC LIMIT 1)
)
SELECT 
    fp.PostId,
    fp.Title,
    fp.CreationDate,
    fp.Score,
    fp.ViewCount,
    fp.OwnerDisplayName,
    fp.CommentCount,
    fp.UpVotes,
    fp.DownVotes,
    fp.PostTypeName,
    fp.ScoreCategory
FROM 
    FilteredPosts fp
WHERE 
    fp.Rank <= 10
ORDER BY 
    fp.Score DESC, 
    fp.ViewCount DESC;