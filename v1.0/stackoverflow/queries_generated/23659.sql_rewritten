WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(c.Id) FILTER (WHERE c.Score > 0) AS PositiveCommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount
), ClosedPosts AS (
    SELECT 
        ph.PostId,
        STRING_AGG(DISTINCT crt.Name) AS CloseReasons, 
        COUNT(*) AS ClosureCount
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes crt ON ph.Comment::int = crt.Id
    WHERE 
        ph.PostHistoryTypeId = 10
    GROUP BY 
        ph.PostId
), MergedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COALESCE(cp.ClosureCount, 0) AS ClosureCount,
        COALESCE(cp.CloseReasons, 'No Closure') AS CloseReasons,
        p.ViewCount,
        rp.RankScore
    FROM 
        Posts p
    LEFT JOIN 
        ClosedPosts cp ON cp.PostId = p.Id
    LEFT JOIN 
        RankedPosts rp ON rp.PostId = p.Id
    WHERE 
        p.PostTypeId = 1 AND 
        p.Score > 0 AND 
        (rp.RankScore IS NULL OR rp.RankScore <= 10) 
), FinalResults AS (
    SELECT 
        mp.PostId,
        mp.Title,
        mp.ViewCount,
        mp.ClosureCount,
        mp.CloseReasons,
        CASE 
            WHEN mp.ClosureCount > 0 THEN 'Closed'
            ELSE 'Active'
        END AS Status,
        CASE 
            WHEN mp.ViewCount > 1000 THEN 'Popular'
            ELSE 'Normal'
        END AS Popularity
    FROM 
        MergedPosts mp
    WHERE 
        mp.ClosureCount < (SELECT COUNT(*) FROM PostHistory WHERE PostHistoryTypeId = 10) / 2 
)
SELECT 
    f.PostId,
    f.Title,
    f.ViewCount,
    f.ClosureCount,
    f.CloseReasons,
    f.Status,
    f.Popularity
FROM 
    FinalResults f
WHERE 
    f.ClosureCount IS NOT NULL OR f.ViewCount IS NOT NULL
ORDER BY 
    f.ViewCount DESC, f.ClosureCount ASC
LIMIT 50;