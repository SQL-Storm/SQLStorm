WITH RecursivePostHierarchy AS (
    SELECT Id, ParentId, Title, CreationDate, 
           ROW_NUMBER() OVER (PARTITION BY ParentId ORDER BY CreationDate DESC) AS PostOrder
    FROM Posts
    WHERE ParentId IS NULL
    UNION ALL
    SELECT p.Id, p.ParentId, p.Title, p.CreationDate,
           ROW_NUMBER() OVER (PARTITION BY p.ParentId ORDER BY p.CreationDate DESC) AS PostOrder
    FROM Posts p
    INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.Id
),
RankedUsers AS (
    SELECT Id, DisplayName, SUM(UpVotes) AS TotalUpVotes, 
           RANK() OVER (ORDER BY SUM(UpVotes) DESC) AS UserRank
    FROM Users
    GROUP BY Id, DisplayName
),
RecentActivity AS (
    SELECT PostId, COUNT(*) AS CommentCount, 
           MAX(CreationDate) AS LastCommentDate
    FROM Comments
    GROUP BY PostId
),
FilteredPosts AS (
    SELECT p.*, ph.PostOrder, ra.CommentCount, ra.LastCommentDate
    FROM Posts p
    LEFT JOIN RecursivePostHierarchy ph ON p.Id = ph.Id
    LEFT JOIN RecentActivity ra ON p.Id = ra.PostId
    WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month' 
      AND (p.Score IS NULL OR p.Score > 10)
),
TopPostDetails AS (
    SELECT fp.*, u.DisplayName AS OwnerDisplayName, 
           u.Reputation AS OwnerReputation,
           ROW_NUMBER() OVER (PARTITION BY fp.OwnerUserId ORDER BY fp.CreationDate DESC) AS UserPostRank
    FROM FilteredPosts fp
    LEFT JOIN Users u ON fp.OwnerUserId = u.Id
)
SELECT tpd.*, 
       CASE 
           WHEN tpd.Score IS NOT NULL THEN 
               CONCAT('Score: ', tpd.Score, ' - Viewed: ', tpd.ViewCount) 
           ELSE 
               'No Score Recorded'
       END AS PostMetrics,
       COALESCE(b.Name, 'No Badge') AS UserBadge
FROM TopPostDetails tpd
LEFT JOIN Badges b ON tpd.OwnerUserId = b.UserId AND b.Class = 1
WHERE tpd.CommentCount > 5
  AND tpd.UserPostRank <= 3
ORDER BY tpd.CreationDate DESC;