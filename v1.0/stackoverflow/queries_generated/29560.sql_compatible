
WITH TagCounts AS (
    SELECT 
        Tags.TagName,
        COUNT(Posts.Id) AS PostCount,
        STRING_AGG(DISTINCT Posts.Title, ', ') AS ExampleTitles
    FROM Tags
    LEFT JOIN Posts ON Tags.Id = UNNEST(string_to_array(SUBSTRING(Tags.TagName FROM 2 FOR LENGTH(Tags.TagName) - 2), '><'))::integer[]
    GROUP BY Tags.TagName
), 
UserReputation AS (
    SELECT 
        U.Id AS UserId,
        U.DisplayName,
        SUM(U.Reputation) AS TotalReputation,
        COUNT(DISTINCT P.Id) AS TotalPosts,
        SUM(COALESCE(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END, 0)) AS TotalQuestions,
        SUM(COALESCE(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END, 0)) AS TotalAnswers
    FROM Users U
    LEFT JOIN Posts P ON U.Id = P.OwnerUserId
    GROUP BY U.Id, U.DisplayName
),
PostMetrics AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.ViewCount,
        ARRAY_AGG(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        ARRAY_AGG(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount,
        MAX(P.CreationDate) AS LastActivityDate
    FROM Posts P
    LEFT JOIN Votes V ON P.Id = V.PostId
    LEFT JOIN Comments C ON P.Id = C.PostId
    GROUP BY P.Id, P.Title, P.ViewCount
)
SELECT 
    TC.TagName,
    TC.PostCount,
    TC.ExampleTitles,
    UR.DisplayName AS TopUser,
    UR.TotalReputation,
    PM.Title AS TopPostTitle,
    PM.ViewCount,
    PM.LastActivityDate
FROM TagCounts TC
JOIN (
    SELECT 
        U.Id,
        U.DisplayName,
        U.TotalReputation,
        ROW_NUMBER() OVER (PARTITION BY U.TotalReputation ORDER BY U.TotalPosts DESC) AS rn
    FROM UserReputation U
) UR ON UR.rn = 1
JOIN (
    SELECT 
        PostId,
        Title,
        ViewCount,
        RANK() OVER (ORDER BY ViewCount DESC) AS PRank
    FROM PostMetrics
) PM ON PM.PRank = 1
ORDER BY TC.PostCount DESC
LIMIT 10;
