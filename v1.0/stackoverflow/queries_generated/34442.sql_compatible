
WITH RecursiveUserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.Views,
        1 AS Level
    FROM Users u
    WHERE u.Reputation > 1000
    
    UNION ALL
    
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        u.Views,
        r.Level + 1
    FROM Users u
    INNER JOIN RecursiveUserStats r ON u.Id = r.UserId
    WHERE u.Reputation > (SELECT AVG(Reputation) FROM Users) AND r.Level < 5
),
UserBadges AS (
    SELECT 
        b.UserId,
        COUNT(*) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS Badges
    FROM Badges b
    GROUP BY b.UserId
),
PostStats AS (
    SELECT 
        p.OwnerUserId,
        COUNT(p.Id) AS PostCount,
        SUM(p.Score) AS TotalScore,
        AVG(p.ViewCount) AS AvgViewCount
    FROM Posts p
    GROUP BY p.OwnerUserId
),
CombinedStats AS (
    SELECT 
        u.DisplayName,
        COALESCE(us.Reputation, 0) AS Reputation,
        COALESCE(ps.PostCount, 0) AS PostCount,
        COALESCE(ps.TotalScore, 0) AS TotalScore,
        COALESCE(bs.BadgeCount, 0) AS BadgeCount,
        COALESCE(bs.Badges, 'None') AS Badges,
        RANK() OVER (ORDER BY COALESCE(us.Reputation, 0) DESC) AS Rank
    FROM Users u
    LEFT JOIN UserBadges bs ON u.Id = bs.UserId
    LEFT JOIN PostStats ps ON u.Id = ps.OwnerUserId
    LEFT JOIN RecursiveUserStats us ON u.Id = us.UserId
    WHERE u.Reputation IS NOT NULL
)
SELECT 
    cs.DisplayName,
    cs.Reputation,
    cs.PostCount,
    cs.TotalScore,
    cs.BadgeCount,
    cs.Badges,
    cs.Rank,
    CASE 
        WHEN cs.Reputation > 5000 THEN 'Expert'
        WHEN cs.Reputation > 1000 THEN 'Intermediate'
        ELSE 'Novice'
    END AS UserLevel
FROM CombinedStats cs
WHERE cs.Rank <= 50
ORDER BY cs.Rank;
