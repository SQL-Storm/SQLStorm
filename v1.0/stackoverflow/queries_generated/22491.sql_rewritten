WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS rn
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
        AND p.Score > 0
        AND p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year')
),
RecentVotes AS (
    SELECT 
        v.PostId,
        COUNT(v.Id) AS VoteCount
    FROM 
        Votes v
    WHERE 
        v.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days') 
    GROUP BY 
        v.PostId
),
PostTags AS (
    SELECT 
        p.Id AS PostId,
        STRING_AGG(t.TagName, ', ') AS Tags
    FROM 
        Posts p
    JOIN 
        UNNEST(SPLIT(p.Tags, '><')) AS tag ON TRUE 
    JOIN 
        Tags t ON t.TagName = tag
    GROUP BY 
        p.Id
)
SELECT 
    UpvotedPosts.PostId,
    UpvotedPosts.Title,
    UpvotedPosts.Score,
    UpvotedPosts.ViewCount,
    UpvotedPosts.CreationDate,
    COALESCE(v.VoteCount, 0) AS RecentVoteCount,
    COALESCE(t.Tags, 'No Tags') AS Tags,
    CASE 
        WHEN UpvotedPosts.Score > (SELECT AVG(Score) FROM Posts WHERE PostTypeId = 1) THEN 'Above Average Score'
        ELSE 'Below Average Score'
    END AS ScoreCategory,
    CASE 
        WHEN UpvotedPosts.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 month') THEN 'Recent'
        ELSE 'Older'
    END AS PostAgeCategory
FROM 
    RankedPosts UpvotedPosts
LEFT JOIN 
    RecentVotes v ON UpvotedPosts.PostId = v.PostId
LEFT JOIN 
    PostTags t ON UpvotedPosts.PostId = t.PostId
WHERE 
    UpvotedPosts.rn <= 3
ORDER BY 
    UpvotedPosts.Score DESC, UpvotedPosts.ViewCount DESC, UpvotedPosts.CreationDate DESC
OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;