
WITH RECURSIVE RecursiveCTE AS (
    SELECT 
        P.Id AS PostId,
        P.OwnerUserId,
        P.Title,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        0 AS Level
    FROM 
        Posts P
    WHERE 
        P.PostTypeId = 1  
    
    UNION ALL
    
    SELECT 
        P.Id,
        P.OwnerUserId,
        P.Title,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        Level + 1
    FROM 
        Posts P
    INNER JOIN 
        RecursiveCTE CTE ON P.ParentId = CTE.PostId
)

SELECT 
    U.DisplayName AS User,
    U.Reputation,
    COUNT(DISTINCT P.Id) AS TotalQuestions,
    COUNT(DISTINCT A.Id) AS TotalAnswers,
    COUNT(DISTINCT V.Id) AS TotalVotes,
    STRING_AGG(DISTINCT T.TagName, ', ') AS TagsUsed,
    AVG(P.Score) AS AvgQuestionScore,
    MAX(P.LastActivityDate) AS LastActive,
    ARRAY_AGG(DISTINCT CASE WHEN B.Class = 1 THEN B.Name END) AS GoldBadges,
    ARRAY_AGG(DISTINCT CASE WHEN B.Class = 2 THEN B.Name END) AS SilverBadges,
    ARRAY_AGG(DISTINCT CASE WHEN B.Class = 3 THEN B.Name END) AS BronzeBadges
FROM 
    Users U
LEFT JOIN 
    Posts P ON U.Id = P.OwnerUserId AND P.PostTypeId = 1 
LEFT JOIN 
    Posts A ON P.Id = A.ParentId 
LEFT JOIN 
    Votes V ON V.PostId = P.Id 
LEFT JOIN 
    Tags T ON T.Id = ANY(STRING_TO_ARRAY(P.Tags, ', ')) 
LEFT JOIN 
    Badges B ON B.UserId = U.Id
GROUP BY 
    U.Id, U.DisplayName, U.Reputation
HAVING 
    COUNT(DISTINCT P.Id) > 0 
ORDER BY 
    AvgQuestionScore DESC, TotalVotes DESC
LIMIT 10;
