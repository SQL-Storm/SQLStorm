
WITH RecursivePostHierarchy AS (
    
    SELECT 
        Id,
        Title,
        ParentId,
        0 AS Level
    FROM 
        Posts
    WHERE 
        ParentId IS NULL  
    UNION ALL
    SELECT 
        p.Id,
        p.Title,
        p.ParentId,
        Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.Id
),
PostStats AS (
    
    SELECT 
        p.Id,
        COUNT(c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id, p.CreationDate, p.OwnerUserId
)
SELECT 
    u.DisplayName,
    u.Reputation,
    rp.Title AS RootPostTitle,
    ps.CommentCount,
    ps.UpVotes,
    ps.DownVotes,
    ps.CreationDate,
    COALESCE(ps.UpVotes, 0) AS TotalUpVotes,
    COALESCE(ps.DownVotes, 0) AS TotalDownVotes,
    CASE 
        WHEN ps.CommentCount = 0 THEN 'No comments yet' 
        ELSE 'Comments available'
    END AS CommentStatus
FROM 
    Users u
JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    PostStats ps ON p.Id = ps.Id
LEFT JOIN 
    RecursivePostHierarchy rp ON p.Id = rp.Id
WHERE 
    u.Reputation > 1000  
    AND ps.PostRank = 1  
ORDER BY 
    u.Reputation DESC, 
    ps.UpVotes DESC
FETCH FIRST 50 ROWS ONLY;
