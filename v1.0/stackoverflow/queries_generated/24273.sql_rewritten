WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
        COUNT(*) OVER (PARTITION BY p.OwnerUserId) AS TotalPosts,
        STRING_AGG(t.TagName, ', ') FILTER (WHERE t.TagName IS NOT NULL) AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Tags t ON t.ExcerptPostId = p.Id
    WHERE 
        p.CreationDate > cast('2024-10-01' as date) - INTERVAL '1 year'
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId
),
UserPostStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        u.Reputation,
        SUM(bp.ViewCount) AS TotalViews,
        SUM(bp.Score) AS TotalScore,
        MAX(bp.RankScore) AS HighestRank
    FROM 
        Users u
    LEFT JOIN 
        RankedPosts bp ON u.Id = bp.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName, u.Reputation
)
SELECT 
    ups.UserId,
    ups.DisplayName,
    ups.Reputation,
    ups.TotalViews,
    ups.TotalScore,
    ups.HighestRank,
    CASE 
        WHEN ups.HighestRank IS NULL THEN 'No posts yet'
        WHEN ups.Reputation > 1000 THEN 'Pro user'
        ELSE 'Novice user'
    END AS UserType,
    CASE 
        WHEN ups.TotalScore IS NULL THEN '0'
        WHEN ups.TotalScore BETWEEN 0 AND 100 THEN 'Low scorer'
        WHEN ups.TotalScore BETWEEN 101 AND 1000 THEN 'Moderate scorer'
        ELSE 'High scorer'
    END AS ScoreCategory
FROM 
    UserPostStats ups
WHERE 
    (ups.Reputation > 500 AND ups.TotalViews IS NOT NULL)
    OR (ups.TotalViews > 1000 AND ups.HighestRank IS NOT NULL)
ORDER BY 
    ups.Reputation DESC, ups.TotalViews DESC
LIMIT 10
OFFSET 5;