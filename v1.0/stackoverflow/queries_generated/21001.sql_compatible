
WITH UserReputation AS (
    SELECT 
        U.Id AS UserId,
        U.Reputation,
        ROW_NUMBER() OVER (ORDER BY U.Reputation DESC) AS ReputationRank
    FROM Users U
),
PostStatistics AS (
    SELECT 
        P.OwnerUserId,
        COUNT(CASE WHEN P.PostTypeId = 1 THEN 1 END) AS QuestionCount,
        COUNT(CASE WHEN P.PostTypeId = 2 THEN 1 END) AS AnswerCount,
        COUNT(CASE WHEN P.PostTypeId = 3 THEN 1 END) AS WikiCount,
        SUM(P.ViewCount) AS TotalViews,
        AVG(P.Score) AS AvgScore,
        STRING_AGG(DISTINCT T.TagName, ', ') AS Tags
    FROM Posts P
    LEFT JOIN LATERAL (
        SELECT UNNEST(string_to_array(P.Tags, '><')) AS TagName
    ) T ON TRUE
    GROUP BY P.OwnerUserId
),
TopUsers AS (
    SELECT 
        UR.UserId,
        UR.Reputation,
        PS.QuestionCount,
        PS.AnswerCount,
        PS.WikiCount,
        PS.TotalViews,
        PS.AvgScore,
        ROW_NUMBER() OVER (ORDER BY UR.Reputation DESC) AS UserRank
    FROM UserReputation UR
    LEFT JOIN PostStatistics PS ON UR.UserId = PS.OwnerUserId
)
SELECT 
    U.DisplayName,
    COALESCE(UG.Reputation, 0) AS Reputation,
    T.QuestionCount,
    T.AnswerCount,
    T.WikiCount,
    T.TotalViews,
    T.AvgScore,
    PHT.CreationDate AS LastActivityDate,
    CASE 
        WHEN T.AnswerCount = 0 THEN 'No Answers'
        WHEN T.AvgScore IS NULL THEN 'No Score'
        ELSE 'Score Available'
    END AS ScoreStatus,
    CASE 
        WHEN T.AnswerCount > 10 THEN 'Expert'
        WHEN T.AnswerCount BETWEEN 5 AND 10 THEN 'Veteran'
        ELSE 'Novice'
    END AS UserLevel
FROM Users U
LEFT JOIN TopUsers T ON U.Id = T.UserId
LEFT JOIN PostVotes PV ON PV.UserId = U.Id
LEFT JOIN PostHistory PHT ON PV.PostId = PHT.PostId AND PHT.CreationDate = 
    (
        SELECT MAX(PH.CreationDate)
        FROM PostHistory PH
        WHERE PH.UserId = U.Id
    )
ORDER BY T.UserRank
LIMIT 10;
