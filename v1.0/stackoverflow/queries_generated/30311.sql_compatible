
WITH RecursiveRecentPosts AS (
    SELECT p.Id, p.Title, p.CreationDate, p.Score,
           ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn
    FROM Posts p
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
), UserBadgeCounts AS (
    SELECT u.Id AS UserId, 
           COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldCount,
           COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverCount,
           COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeCount,
           COUNT(b.Id) AS TotalBadges
    FROM Users u 
    LEFT JOIN Badges b ON u.Id = b.UserId
    GROUP BY u.Id
), TopUsers AS (
    SELECT u.Id, u.DisplayName, u.Reputation, u.CreationDate,
           COALESCE(ub.GoldCount, 0) AS GoldCount,
           COALESCE(ub.SilverCount, 0) AS SilverCount,
           COALESCE(ub.BronzeCount, 0) AS BronzeCount,
           COALESCE(ub.TotalBadges, 0) AS TotalBadges
    FROM Users u
    LEFT JOIN UserBadgeCounts ub ON u.Id = ub.UserId
    WHERE u.Reputation > 1000 
), PostComments AS (
    SELECT c.PostId, COUNT(c.Id) AS CommentCount
    FROM Comments c
    GROUP BY c.PostId
), EnhancedPostStats AS (
    SELECT p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount,
           COALESCE(pc.CommentCount, 0) AS TotalComments,
           u.DisplayName AS PostOwner,
           u.Reputation AS OwnerReputation,
           p.OwnerUserId
    FROM Posts p
    INNER JOIN Users u ON p.OwnerUserId = u.Id
    LEFT JOIN PostComments pc ON p.Id = pc.PostId
    WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
)

SELECT ur.UserId, ur.DisplayName, ur.Reputation, 
       COALESCE(ur.GoldCount, 0) AS GoldBadges,
       COALESCE(ur.SilverCount, 0) AS SilverBadges,
       COALESCE(ur.BronzeCount, 0) AS BronzeBadges,
       ep.Id AS PostId, ep.Title, ep.CreationDate, ep.Score,
       ep.ViewCount, ep.TotalComments
FROM TopUsers ur
LEFT JOIN EnhancedPostStats ep ON ur.Id = ep.OwnerUserId
WHERE EXISTS (
    SELECT 1 
    FROM RecursiveRecentPosts r
    WHERE r.Id = ep.Id AND r.rn = 1
)
ORDER BY ur.Reputation DESC, ep.Score DESC
LIMIT 10;
