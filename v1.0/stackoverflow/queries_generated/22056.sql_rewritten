WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.ParentId ORDER BY p.CreationDate DESC) AS Rank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' 
        AND p.PostTypeId IN (1, 2) 
        AND p.Score > 0
),
MaxViewPost AS (
    SELECT 
        rp.*,
        MAX(rp.ViewCount) OVER () AS MaxViews
    FROM 
        RankedPosts rp
),
FilteredPosts AS (
    SELECT 
        PostId,
        Title,
        ViewCount,
        Score,
        CreationDate,
        CASE 
            WHEN ViewCount = MaxViews THEN 'Most Viewed'
            ELSE 'Other'
        END AS ViewCategory
    FROM 
        MaxViewPost
    WHERE 
        Rank = 1
)

SELECT 
    fp.Title,
    fp.ViewCount,
    fp.Score,
    COALESCE(b.Name, 'No Badge') AS Badge,
    COALESCE(COUNT(DISTINCT v.Id) FILTER (WHERE v.VoteTypeId = 2), 0) AS UpVoteCount,
    COUNT(DISTINCT c.Id) AS TotalComments,
    MAX(sur.Tag) AS PrimaryTag
FROM 
    FilteredPosts fp
LEFT JOIN 
    Badges b ON b.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = fp.PostId)
LEFT JOIN 
    Votes v ON v.PostId = fp.PostId
LEFT JOIN 
    (SELECT 
        unnest(string_to_array(Tags, '>')) AS Tag, 
        p.Id AS PostId 
    FROM 
        Posts p) sur ON sur.PostId = fp.PostId
LEFT JOIN 
    PostHistory ph ON ph.PostId = fp.PostId AND ph.PostHistoryTypeId = 10
LEFT JOIN 
    PostLinks pl ON pl.PostId = fp.PostId
WHERE 
    fp.ViewCategory = 'Most Viewed'
GROUP BY 
    fp.Title, fp.ViewCount, fp.Score, b.Name
HAVING 
    COUNT(DISTINCT v.Id) > (SELECT AVG(UpVotes) FROM Users) 
    OR fp.Score > (SELECT AVG(Score) FROM Posts)
ORDER BY 
    fp.ViewCount DESC
LIMIT 10;