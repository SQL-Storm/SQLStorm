
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS PostRank,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount,
        COUNT(v.Id) OVER (PARTITION BY p.Id, v.VoteTypeId) AS UpvoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
    WHERE 
        p.CreationDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '365 days'
),

FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.ViewCount,
        rp.CommentCount,
        rp.UpvoteCount
    FROM 
        RankedPosts rp
    WHERE 
        (rp.CommentCount > 0 OR rp.UpvoteCount > 0) 
        AND rp.PostRank <= 5
),

UserBadges AS (
    SELECT 
        b.UserId,
        STRING_AGG(b.Name, ', ') AS BadgeNames,
        COUNT(b.Id) AS TotalBadges
    FROM 
        Badges b
    GROUP BY 
        b.UserId
)

SELECT 
    p.Title,
    p.Score,
    p.ViewCount,
    p.CommentCount,
    ub.BadgeNames,
    ub.TotalBadges,
    CASE 
        WHEN p.Score > 100 THEN 'High Score'
        WHEN p.Score BETWEEN 50 AND 100 THEN 'Medium Score'
        ELSE 'Low Score' 
    END AS ScoreCategory,
    COALESCE(
        (SELECT STRING_AGG(DISTINCT ht.Name, ', ')
         FROM PostHistory ph 
         INNER JOIN PostHistoryTypes ht ON ph.PostHistoryTypeId = ht.Id
         WHERE ph.PostId = p.PostId AND ht.Name LIKE 'Edit%'), 
        'No Edits') AS EditHistory
FROM 
    FilteredPosts p
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    UserBadges ub ON u.Id = ub.UserId
WHERE 
    u.Reputation > 100 AND 
    u.LastAccessDate >= CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '30 days'
ORDER BY 
    p.Score DESC, p.CommentCount DESC;
