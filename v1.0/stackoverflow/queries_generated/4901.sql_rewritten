WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.Score,
        p.AnswerCount,
        u.DisplayName AS OwnerDisplayName,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS rn
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.PostTypeId = 1 AND 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
PostEngagement AS (
    SELECT 
        p.Id,
        COUNT(c.Id) AS CommentCount,
        SUM(v.VoteTypeId = 2) AS UpVoteCount,
        SUM(v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        p.Id
),
PostHistorySummary AS (
    SELECT 
        ph.PostId,
        COUNT(ph.Id) AS EditCount,
        MAX(ph.CreationDate) AS LastEditDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId IN (4, 5, 6) 
    GROUP BY 
        ph.PostId
)

SELECT 
    rp.Title,
    rp.Score,
    rp.OwnerDisplayName,
    pe.CommentCount,
    pe.UpVoteCount,
    pe.DownVoteCount,
    COALESCE(phs.EditCount, 0) AS EditCount,
    phs.LastEditDate,
    CASE 
        WHEN rp.rn = 1 THEN 'Top Post'
        ELSE 'Other Post'
    END AS PostRank
FROM 
    RankedPosts rp
LEFT JOIN 
    PostEngagement pe ON rp.Id = pe.Id
LEFT JOIN 
    PostHistorySummary phs ON rp.Id = phs.PostId
WHERE 
    rp.Score > 5 AND 
    (pe.DownVoteCount IS NULL OR pe.DownVoteCount < pe.UpVoteCount)
ORDER BY 
    rp.Score DESC, rp.Title ASC;