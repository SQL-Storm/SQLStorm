
WITH TagStatistics AS (
    SELECT 
        t.TagName, 
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount,
        AVG(p.ViewCount) AS AvgViews,
        AVG(p.Score) AS AvgScore
    FROM 
        Tags t
    LEFT JOIN 
        Posts p ON t.Id = ANY(string_to_array(substr(p.Tags, 2, length(p.Tags) - 2), '><')::text[])
    GROUP BY 
        t.TagName
),
UserActivity AS (
    SELECT 
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostsCreated,
        SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionsAsked,
        SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswersGiven,
        SUM(c.Score) AS TotalCommentScore,
        BASE64_ENCODE(u.EmailHash) AS EncodedEmail
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    GROUP BY 
        u.Id, u.DisplayName, u.EmailHash
),
PostHistoryAnalysis AS (
    SELECT 
        ph.UserDisplayName,
        COUNT(ph.Id) AS TotalEdits,
        MAX(ph.CreationDate) AS LastEditDate,
        MAX(
            CASE 
                WHEN ph.PostHistoryTypeId = 4 THEN 'Title Edit'
                WHEN ph.PostHistoryTypeId = 5 THEN 'Body Edit'
                WHEN ph.PostHistoryTypeId = 6 THEN 'Tags Edit'
                ELSE 'Other Edits'
            END
        ) AS LastEditType,
        STRING_AGG(DISTINCT pt.Name, ', ') AS AffectedPostTypes
    FROM 
        PostHistory ph
    JOIN 
        Posts p ON p.Id = ph.PostId
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    GROUP BY 
        ph.UserDisplayName
)
SELECT 
    ts.TagName,
    ts.PostCount,
    ts.QuestionCount,
    ts.AnswerCount,
    ts.AvgViews,
    ts.AvgScore,
    ua.DisplayName AS TopUser,
    ua.PostsCreated,
    ua.QuestionsAsked,
    ua.AnswersGiven,
    phd.TotalEdits,
    phd.LastEditDate,
    phd.LastEditType,
    phd.AffectedPostTypes
FROM 
    TagStatistics ts
JOIN 
    (SELECT * FROM UserActivity ORDER BY PostsCreated DESC LIMIT 1) ua ON TRUE
JOIN 
    (SELECT * FROM PostHistoryAnalysis ORDER BY TotalEdits DESC LIMIT 1) phd ON TRUE
ORDER BY 
    ts.AvgScore DESC;
