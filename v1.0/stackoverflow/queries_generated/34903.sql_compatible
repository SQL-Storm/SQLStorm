
WITH UserRatings AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        COUNT(DISTINCT p.Id) AS PostCount
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Votes v ON p.Id = v.PostId
    GROUP BY u.Id, u.DisplayName
), 
MostActiveUsers AS (
    SELECT 
        UserId,
        DisplayName,
        UpVotes - DownVotes AS NetVotes,
        RANK() OVER (ORDER BY UpVotes - DownVotes DESC) AS Rank,
        ROW_NUMBER() OVER (ORDER BY PostCount DESC) AS ActivityRank
    FROM UserRatings
), 
TagStats AS (
    SELECT 
        t.TagName,
        COUNT(p.Id) AS PostCount,
        SUM(COALESCE(p.ViewCount, 0)) AS TotalViews
    FROM Tags t
    JOIN Posts p ON t.Id = ANY(string_to_array(substring(p.Tags, 2, LENGTH(p.Tags) - 2), '><')::text[])
    GROUP BY t.TagName
    HAVING COUNT(p.Id) > 10  
),
PostHistoryStats AS (
    SELECT 
        ph.PostId,
        MAX(ph.CreationDate) AS LastEdit,
        COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS ClosureCount
    FROM PostHistory ph
    GROUP BY ph.PostId
),
RecentClosePosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        phs.LastEdit,
        phs.ClosureCount
    FROM Posts p
    JOIN PostHistoryStats phs ON p.Id = phs.PostId
    WHERE phs.ClosureCount > 0
    ORDER BY phs.LastEdit DESC
    LIMIT 10  
)

SELECT 
    mau.DisplayName,
    mau.NetVotes,
    mau.Rank,
    mau.ActivityRank,
    ts.TagName,
    ts.PostCount,
    ts.TotalViews,
    rcp.Title AS RecentlyClosedPostTitle,
    rcp.CreationDate AS RecentlyClosedPostDate,
    rcp.LastEdit AS RecentlyClosedPostLastEdit,
    rcp.ClosureCount AS RecentlyClosedPostClosureCount
FROM MostActiveUsers mau
CROSS JOIN TagStats ts
LEFT JOIN RecentClosePosts rcp ON mau.UserId = (SELECT OwnerUserId FROM Posts WHERE Id = rcp.Id)
WHERE mau.NetVotes > 0
ORDER BY mau.Rank, ts.PostCount DESC, rcp.ClosureCount DESC;
