WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation,
        ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY p.Score DESC) AS RankByScore,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, u.DisplayName
),
PopularTags AS (
    SELECT
        LOWER(TRIM(SUBSTRING(tag, 2, LENGTH(tag) - 2))) AS TagName,
        COUNT(*) AS TagCount
    FROM 
        Posts 
    CROSS JOIN 
        UNNEST(string_to_array(substring(Tags, 2, LENGTH(Tags) - 2), '><')) AS tag 
    WHERE 
        PostTypeId = 1 
    GROUP BY 
        TagName
    ORDER BY 
        TagCount DESC
    LIMIT 5
),
FinalResults AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Body,
        rp.CreationDate,
        rp.Score,
        rp.ViewCount,
        rp.OwnerDisplayName,
        rp.Reputation,
        pt.TagName
    FROM 
        RankedPosts rp
    JOIN 
        PopularTags pt ON rp.Tags LIKE '%' || pt.TagName || '%'
    WHERE 
        rp.RankByScore <= 3  
)
SELECT 
    fr.PostId,
    fr.Title,
    fr.Body,
    fr.CreationDate,
    fr.Score,
    fr.ViewCount,
    fr.OwnerDisplayName,
    fr.Reputation,
    STRING_AGG(DISTINCT pt.TagName, ', ') AS Tags
FROM 
    FinalResults fr
JOIN 
    Posts p ON fr.PostId = p.Id
JOIN 
    UNNEST(string_to_array(substring(p.Tags, 2, LENGTH(p.Tags) - 2), '><')) AS pt(TagName) 
GROUP BY 
    fr.PostId, fr.Title, fr.Body, fr.CreationDate, fr.Score, fr.ViewCount, fr.OwnerDisplayName, fr.Reputation
ORDER BY 
    fr.Score DESC, fr.CreationDate DESC;