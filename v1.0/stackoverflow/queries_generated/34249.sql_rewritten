WITH RECURSIVE UserReputationCTE AS (
    SELECT Id, DisplayName, Reputation, CreationDate, LastAccessDate, 
           ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS ReputationRank 
    FROM Users
), 
PostAnalysis AS (
    SELECT p.Id AS PostId, p.Title, p.ViewCount, p.Score, 
           COALESCE(c.CommentCount, 0) AS CommentCount, 
           COALESCE(a.AuthorDisplayName, 'Community') AS AuthorDisplayName,
           p.CreationDate, 
           DENSE_RANK() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS RecentPostsRank
    FROM Posts p
    LEFT JOIN (SELECT PostId, COUNT(*) AS CommentCount 
               FROM Comments 
               GROUP BY PostId) c ON p.Id = c.PostId
    LEFT JOIN (SELECT UserId, DisplayName AS AuthorDisplayName 
               FROM Users) a ON p.OwnerUserId = a.UserId
    WHERE p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - interval '3 months'
), 
BadgeCount AS (
    SELECT UserId, COUNT(*) AS BadgeTotal 
    FROM Badges 
    GROUP BY UserId
),
PostHistoryAnalysis AS (
    SELECT ph.PostId, COUNT(*) AS EditCount, 
           MAX(CASE WHEN ph.PostHistoryTypeId IN (4, 5, 6) THEN ph.CreationDate END) AS LastEditDate
    FROM PostHistory ph
    GROUP BY ph.PostId
),
CombinedAnalysis AS (
    SELECT pa.PostId, pa.Title, pa.ViewCount, pa.Score, 
           pa.CommentCount, pa.AuthorDisplayName, 
           ph.EditCount, ph.LastEditDate,
           COALESCE(b.BadgeTotal, 0) AS BadgeTotal
    FROM PostAnalysis pa
    LEFT JOIN PostHistoryAnalysis ph ON pa.PostId = ph.PostId
    LEFT JOIN BadgeCount b ON pa.OwnerUserId = b.UserId
)

SELECT u.DisplayName AS UserName, 
       u.Reputation AS UserReputation,
       c.PostId, 
       c.Title, 
       c.ViewCount, 
       c.Score, 
       c.CommentCount, 
       c.AuthorDisplayName, 
       c.EditCount, 
       c.LastEditDate, 
       CASE 
           WHEN c.BadgeTotal > 0 THEN 'Has Badges'
           ELSE 'No Badges' 
       END AS BadgeStatus,
       CASE 
           WHEN c.ViewCount > 1000 THEN 'Highly Viewed'
           ELSE 'Moderately Viewed' 
       END AS ViewStatus
FROM UserReputationCTE u
LEFT JOIN CombinedAnalysis c ON u.Id = c.OwnerUserId
WHERE c.RecentPostsRank <= 10
ORDER BY u.Reputation DESC, c.ViewCount DESC