WITH PostActivity AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        COALESCE(v.UpVotes, 0) AS UpVotes,
        COALESCE(v.DownVotes, 0) AS DownVotes,
        COALESCE(c.CommentCount, 0) AS CommentCount,
        COALESCE(a.AnswerCount, 0) AS AnswerCount,
        COALESCE(ph.LastEditDate, p.CreationDate) AS LastActivityDate,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Posts a ON p.Id = a.ParentId AND a.PostTypeId = 2 
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    LEFT JOIN 
        unnest(string_to_array(p.Tags, '>')) AS tag ON tag IS NOT NULL
    LEFT JOIN 
        Tags t ON tag = t.TagName
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.CreationDate, v.UpVotes, v.DownVotes, c.CommentCount, a.AnswerCount, 
        ph.LastEditDate
),
RankedPosts AS (
    SELECT 
        pa.*,
        ROW_NUMBER() OVER (ORDER BY pa.UpVotes DESC, pa.CommentCount DESC, pa.AnswerCount DESC) AS Rank
    FROM 
        PostActivity pa
)

SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.UpVotes,
    rp.DownVotes,
    rp.CommentCount,
    rp.AnswerCount,
    rp.LastActivityDate,
    rp.BadgeCount,
    rp.Tags,
    rp.Rank
FROM 
    RankedPosts rp
WHERE 
    rp.Rank <= 10 
ORDER BY 
    rp.Rank;