
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate ASC) AS Rank,
        COALESCE(p.AcceptedAnswerId, -1) AS AcceptedAnswer
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 
),
UserBadges AS (
    SELECT 
        u.Id AS UserId,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        STRING_AGG(b.Name, ', ') AS BadgeNames
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id
),
PostActivity AS (
    SELECT 
        p.Id,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        MAX(p.LastActivityDate) AS LastActivity
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
    GROUP BY 
        p.Id
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        STRING_AGG(cr.Name, ', ') AS CloseReasons
    FROM 
        PostHistory ph
    JOIN 
        CloseReasonTypes cr ON CAST(ph.Comment AS INT) = cr.Id
    WHERE 
        ph.PostHistoryTypeId = 10 
    GROUP BY 
        ph.PostId
)
SELECT 
    up.DisplayName,
    up.Reputation,
    up.CreationDate AS UserCreationDate,
    rb.BadgeCount,
    rb.BadgeNames,
    rp.Title AS QuestionTitle,
    rp.ViewCount,
    rp.Score,
    pa.CommentCount,
    pa.VoteCount,
    cp.CloseReasons,
    pa.LastActivity,
    DATEDIFF(DAY, rp.CreationDate, CURRENT_DATE) AS DaysSinceCreation,
    CASE 
        WHEN cp.CloseReasons IS NOT NULL THEN 'Closed' 
        ELSE 'Open' 
    END AS PostStatus
FROM 
    Users up
JOIN 
    UserBadges rb ON up.Id = rb.UserId
JOIN 
    RankedPosts rp ON up.Id = rp.OwnerUserId
JOIN 
    PostActivity pa ON pa.Id = rp.Id
LEFT JOIN 
    ClosedPosts cp ON cp.PostId = rp.Id
WHERE 
    rp.Rank <= 3 
    AND up.Reputation > 1000 
ORDER BY 
    up.Reputation DESC, 
    rp.ViewCount DESC;
