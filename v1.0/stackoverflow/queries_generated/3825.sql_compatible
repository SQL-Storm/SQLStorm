
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.Score,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS post_rank,
        COUNT(c.Id) AS comment_count,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS upvote_count
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= DATEADD(year, -1, '2024-10-01')
    GROUP BY 
        p.Id, p.Title, p.CreationDate, p.Score, p.OwnerUserId
),
PostHistories AS (
    SELECT 
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.CreationDate AS history_date,
        ph.UserId,
        PHT.Name AS HistoryTypeName
    FROM 
        PostHistory ph
    JOIN 
        PostHistoryTypes PHT ON ph.PostHistoryTypeId = PHT.Id
    WHERE 
        ph.CreationDate >= DATEADD(year, -1, '2024-10-01')
        AND ph.PostHistoryTypeId IN (10, 11, 12, 13)  
),
UsersWithBadges AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
)
SELECT 
    rp.Title,
    rp.Score,
    rp.CreationDate,
    rp.post_rank,
    u.DisplayName AS OwnerDisplayName,
    COALESCE(ph.history_date, 'No recent changes') AS LastPostHistory,
    uwb.BadgeCount,
    rp.comment_count,
    rp.upvote_count
FROM 
    RankedPosts rp
JOIN 
    Users u ON rp.OwnerUserId = u.Id
LEFT JOIN 
    PostHistories ph ON rp.Id = ph.PostId
JOIN 
    UsersWithBadges uwb ON u.Id = uwb.UserId
WHERE 
    rp.Score > 0 
    AND (uwb.BadgeCount > 0 OR uwb.BadgeCount IS NULL)
ORDER BY 
    rp.Score DESC, rp.CreationDate DESC;
