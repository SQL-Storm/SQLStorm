WITH PostTagAnalysis AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.Tags,
        p.ViewCount,
        p.AnswerCount,
        p.CreationDate,
        COUNT(c.Id) AS CommentCount,
        MAX(ph.CreationDate) AS LastEditDate,
        STRING_AGG(DISTINCT t.TagName, ', ') AS TagsList,
        COUNT(DISTINCT b.Id) AS BadgeCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes
    FROM
        Posts p
    LEFT JOIN
        Comments c ON p.Id = c.PostId
    LEFT JOIN
        PostHistory ph ON p.Id = ph.PostId
    LEFT JOIN
        PostLinks pl ON p.Id = pl.PostId
    LEFT JOIN
        Tags t ON POSITION(t.TagName IN p.Tags) > 0
    LEFT JOIN
        Badges b ON p.OwnerUserId = b.UserId
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    WHERE
        p.PostTypeId = 1  
    GROUP BY
        p.Id, p.Title, p.Tags, p.ViewCount, p.AnswerCount, p.CreationDate
),
StringBenchmark AS (
    SELECT
        PostId,
        LENGTH(TagsList) AS TagStringLength,
        LENGTH(Tags) AS OriginalTagsLength
    FROM
        PostTagAnalysis
),
TagComparison AS (
    SELECT
        PostId,
        TagStringLength,
        OriginalTagsLength,
        CASE 
            WHEN TagStringLength > OriginalTagsLength THEN 'Increased'
            WHEN TagStringLength < OriginalTagsLength THEN 'Decreased'
            ELSE 'No Change'
        END AS TagLengthChange
    FROM
        StringBenchmark
)
SELECT
    pta.PostId,
    pta.Title,
    pta.ViewCount,
    pta.AnswerCount,
    pta.CommentCount,
    pta.BadgeCount,
    pta.TotalUpvotes,
    pta.TotalDownvotes,
    tc.TagLengthChange,
    pta.LastEditDate
FROM
    PostTagAnalysis pta
JOIN
    TagComparison tc ON pta.PostId = tc.PostId
ORDER BY
    pta.ViewCount DESC, 
    pta.AnswerCount DESC, 
    pta.CommentCount DESC;