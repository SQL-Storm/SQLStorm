WITH RankedPosts AS (
    SELECT p.Id AS PostId,
           p.Title,
           p.Score,
           p.ViewCount,
           p.AnswerCount,
           ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS RankScore,
           ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC) AS RankView
    FROM Posts p
    WHERE p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year'
),
TopPosts AS (
    SELECT rp.PostId,
           rp.Title,
           rp.Score,
           rp.ViewCount,
           rp.AnswerCount,
           COALESCE((SELECT COUNT(DISTINCT c.Id)
                     FROM Comments c
                     WHERE c.PostId = rp.PostId), 0) AS CommentCount,
           COALESCE((SELECT STRING_AGG(b.Name, ', ') 
                     FROM Badges b
                     JOIN Users u ON b.UserId = u.Id
                     WHERE u.Reputation > 1000 AND u.Id = rp.OwnerUserId), 'No Badges') AS UserBadges
    FROM RankedPosts rp
    WHERE RankScore <= 5 OR RankView <= 5
),
ClosedPosts AS (
    SELECT ph.PostId,
           ph.UserDisplayName,
           ph.CreationDate,
           p.Title,
           pr.Name AS CloseReason
    FROM PostHistory ph
    JOIN CloseReasonTypes pr ON ph.Comment::int = pr.Id
    JOIN Posts p ON ph.PostId = p.Id
    WHERE ph.PostHistoryTypeId IN (10, 11) 
),
RecentVotes AS (
    SELECT v.PostId,
           v.VoteTypeId,
           COUNT(*) AS VoteCount
    FROM Votes v
    WHERE v.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
    GROUP BY v.PostId, v.VoteTypeId
),
VoteSummary AS (
    SELECT rv.PostId,
           SUM(CASE WHEN rv.VoteTypeId = 2 THEN rv.VoteCount ELSE 0 END) AS UpvoteCount,
           SUM(CASE WHEN rv.VoteTypeId = 3 THEN rv.VoteCount ELSE 0 END) AS DownvoteCount,
           COUNT(*) AS TotalVotes
    FROM RecentVotes rv
    GROUP BY rv.PostId
)
SELECT tp.PostId,
       tp.Title,
       tp.Score,
       tp.ViewCount,
       tp.AnswerCount,
       tp.CommentCount,
       tp.UserBadges,
       COALESCE(vs.UpvoteCount, 0) AS UpvoteCount,
       COALESCE(vs.DownvoteCount, 0) AS DownvoteCount,
       CASE WHEN cp.PostId IS NOT NULL THEN 'Closed' ELSE 'Active' END AS PostStatus,
       ARRAY_AGG(DISTINCT cp.CloseReason) AS CloseReasons
FROM TopPosts tp
LEFT JOIN ClosedPosts cp ON tp.PostId = cp.PostId
LEFT JOIN VoteSummary vs ON tp.PostId = vs.PostId
GROUP BY tp.PostId, tp.Title, tp.Score, tp.ViewCount, tp.AnswerCount, tp.CommentCount, tp.UserBadges, cp.PostId
ORDER BY tp.Score DESC, tp.ViewCount DESC
LIMIT 100;