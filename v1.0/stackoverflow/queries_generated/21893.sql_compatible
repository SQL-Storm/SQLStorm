
WITH RankedPosts AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        p.ViewCount,
        p.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS RankByViews
    FROM
        Posts p
    WHERE
        p.CreationDate >= DATEADD(year, -1, CAST('2024-10-01' AS DATE))
),
TopUsers AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(CASE WHEN p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AcceptedAnswers,
        SUM(COALESCE(b.Class, 0)) AS TotalBadgeClass
    FROM
        Users u
    LEFT JOIN
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN
        Badges b ON u.Id = b.UserId
    GROUP BY
        u.Id, u.DisplayName
),
PostVoteStats AS (
    SELECT
        p.Id AS PostId,
        COUNT(v.Id) FILTER (WHERE vt.Id = 2) AS UpVotes,
        COUNT(v.Id) FILTER (WHERE vt.Id = 3) AS DownVotes
    FROM
        Posts p
    LEFT JOIN
        Votes v ON p.Id = v.PostId
    LEFT JOIN
        VoteTypes vt ON v.VoteTypeId = vt.Id
    GROUP BY
        p.Id
)
SELECT
    tp.UserId,
    tp.DisplayName,
    COALESCE(tp.PostCount, 0) AS TotalPosts,
    COALESCE(tp.AcceptedAnswers, 0) AS AcceptedAnswers,
    COALESCE(tp.TotalBadgeClass, 0) AS TotalBadgeClass,
    COUNT(DISTINCT rp.PostId) AS RankedPostsCount,
    AVG(COALESCE(pvs.UpVotes, 0) - COALESCE(pvs.DownVotes, 0)) AS AverageNetVotes,
    STRING_AGG(DISTINCT ph.Comment, '; ') AS PostHistoryComments
FROM
    TopUsers tp
LEFT JOIN
    RankedPosts rp ON tp.UserId = rp.OwnerUserId AND rp.RankByViews <= 5
LEFT JOIN
    PostVoteStats pvs ON pvs.PostId = rp.PostId
LEFT JOIN
    PostHistory ph ON ph.UserId = tp.UserId AND ph.CreationDate >= CAST(tp.Reputation AS TIMESTAMP)
WHERE
    tp.PostCount > 0
GROUP BY
    tp.UserId, tp.DisplayName
ORDER BY
    TotalPosts DESC, AverageNetVotes DESC
LIMIT 10;
