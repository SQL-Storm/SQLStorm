WITH RecursivePostHistory AS (
    SELECT
        ph.Id AS HistoryId,
        ph.PostId,
        ph.UserId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.Comment,
        ph.Text,
        1 AS RecursionLevel
    FROM PostHistory ph
    WHERE ph.PostHistoryTypeId IN (10, 11)  
    UNION ALL
    SELECT
        ph.Id AS HistoryId,
        ph.PostId,
        ph.UserId,
        ph.PostHistoryTypeId,
        ph.CreationDate,
        ph.Comment,
        ph.Text,
        rh.RecursionLevel + 1
    FROM PostHistory ph
    INNER JOIN RecursivePostHistory rh ON ph.PostId = rh.PostId
    WHERE ph.CreationDate < rh.CreationDate
)
SELECT
    p.Id AS PostId,
    p.Title,
    p.ViewCount,
    COALESCE(SUM(CASE WHEN rph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END), 0) AS CloseCount,
    COALESCE(SUM(CASE WHEN rph.PostHistoryTypeId = 11 THEN 1 ELSE 0 END), 0) AS ReopenCount,
    U.DisplayName AS MostActiveUser,
    COUNT(DISTINCT c.Id) AS CommentCount,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM Posts p
LEFT JOIN RecursivePostHistory rph ON p.Id = rph.PostId
LEFT JOIN Users U ON U.Id = (SELECT TOP 1 UserId FROM RecursivePostHistory WHERE PostId = p.Id ORDER BY CreationDate)
LEFT JOIN Comments c ON c.PostId = p.Id
LEFT JOIN Tags t ON p.Tags LIKE '%' || t.TagName || '%'  
WHERE p.CreationDate > '2020-01-01'
GROUP BY p.Id, p.Title, p.ViewCount, U.DisplayName
HAVING COUNT(DISTINCT rph.Id) > 0
ORDER BY CloseCount DESC, ReopenCount DESC, p.ViewCount DESC;