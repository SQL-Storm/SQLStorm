
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.ViewCount,
        p.Score,
        p.CreationDate,
        p.Tags,
        u.DisplayName AS Author,
        RANK() OVER (PARTITION BY STRING_AGG(t.TagName, ',') ORDER BY p.Score DESC) AS RankByTag,
        COUNT(c.Id) AS CommentCount
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        (SELECT UNNEST(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2)) AS Tag) AS tagArray ON TRUE
    LEFT JOIN 
        Tags t ON t.TagName = tagArray.Tag
    WHERE 
        p.PostTypeId = 1 
    GROUP BY 
        p.Id, p.Title, p.Body, p.ViewCount, p.Score, p.CreationDate, p.Tags, u.DisplayName
),
PostStats AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.ViewCount,
        rp.Score,
        rp.Author,
        rp.RankByTag,
        CASE 
            WHEN rp.ViewCount > 1000 THEN 'High Visibility'
            WHEN rp.ViewCount BETWEEN 100 AND 1000 THEN 'Moderate Visibility'
            ELSE 'Low Visibility'
        END AS VisibilityCategory
    FROM 
        RankedPosts rp
    WHERE 
        rp.RankByTag = 1 
)
SELECT 
    ps.PostId,
    ps.Title,
    ps.ViewCount,
    ps.Score,
    ps.Author,
    ps.VisibilityCategory,
    (SELECT COUNT(*) FROM PostHistory ph WHERE ph.PostId = ps.PostId AND ph.CreationDate BETWEEN TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' AND TIMESTAMP '2024-10-01 12:34:56') AS RecentEdits,
    (SELECT STRING_AGG(DISTINCT c.Text, '; ') FROM Comments c WHERE c.PostId = ps.PostId) AS CommentSummary 
FROM 
    PostStats ps
ORDER BY 
    ps.Score DESC, ps.ViewCount DESC;
