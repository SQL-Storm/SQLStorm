WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.Title,
        0 AS Level
    FROM 
        Posts p
    WHERE 
        p.ParentId IS NULL
    UNION ALL
    SELECT 
        p.Id AS PostId,
        p.ParentId,
        p.Title,
        rph.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy rph ON p.ParentId = rph.PostId
),
PostStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes,
        FIRST_VALUE(b.Name) OVER (PARTITION BY p.Id ORDER BY b.Date DESC) AS LatestBadge,
        p.CreationDate,
        p.LastActivityDate
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    GROUP BY 
        p.Id, p.Title
),
PostSummary AS (
    SELECT 
        ps.PostId,
        ps.Title,
        ps.CommentCount,
        ps.UpVotes,
        ps.DownVotes,
        re.ParentId,
        COALESCE(NULLIF(re.Title, ''), 'No Parent') AS ParentTitle,
        ps.CreationDate,
        ps.LastActivityDate,
        RANK() OVER (ORDER BY ps.UpVotes DESC) AS UpvoteRank
    FROM 
        PostStats ps
    LEFT JOIN 
        RecursivePostHierarchy re ON ps.PostId = re.PostId
)
SELECT 
    ps.Title AS PostTitle,
    ps.CommentCount AS TotalComments,
    ps.UpVotes AS TotalUpVotes,
    ps.DownVotes AS TotalDownVotes,
    ps.ParentTitle,
    ps.UpvoteRank,
    CASE 
        WHEN ps.CommentCount > 10 THEN 'Highly Engaged'
        WHEN ps.CommentCount BETWEEN 5 AND 10 THEN 'Moderately Engaged'
        ELSE 'Less Engaged' 
    END AS EngagementLevel,
    CASE 
        WHEN ps.LastActivityDate IS NOT NULL AND ps.LastActivityDate <= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days' THEN 'Inactive'
        ELSE 'Active' 
    END AS ActivityStatus
FROM 
    PostSummary ps
WHERE 
    ps.UpVotes > 0 
ORDER BY 
    ps.UpVotes DESC, ps.CommentCount DESC
FETCH FIRST 50 ROWS ONLY;