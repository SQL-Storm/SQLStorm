WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        u.DisplayName AS OwnerDisplayName,
        pt.Name AS PostType,
        COALESCE(pc.Count, 0) AS CommentCount,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    LEFT JOIN 
        (SELECT PostId, COUNT(*) AS Count FROM Comments GROUP BY PostId) pc ON p.Id = pc.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),
TopRankedPosts AS (
    SELECT 
        PostId,
        Title,
        OwnerDisplayName,
        PostType,
        CommentCount,
        Score,
        ViewCount
    FROM 
        RankedPosts
    WHERE 
        Rank <= 5
)
SELECT 
    trp.PostId,
    trp.Title,
    trp.OwnerDisplayName,
    trp.PostType,
    trp.CommentCount,
    trp.Score,
    trp.ViewCount,
    COALESCE(STRING_AGG(t.TagName, ', '), 'No Tags') AS Tags
FROM 
    TopRankedPosts trp
LEFT JOIN 
    (SELECT 
        pt.Id AS PostId, 
        t.TagName 
     FROM 
        Posts pt 
     JOIN 
        unnest(string_to_array(pt.Tags, ',')) AS tag ON pt.Id = tag.PostId 
     JOIN 
        Tags t ON t.TagName = tag) AS t ON trp.PostId = t.PostId
GROUP BY 
    trp.PostId, trp.Title, trp.OwnerDisplayName, trp.PostType, trp.CommentCount, trp.Score, trp.ViewCount
ORDER BY 
    trp.Score DESC, trp.ViewCount DESC;