
WITH RecursivePostHistory AS (
    SELECT 
        ph.Id,
        ph.PostId,
        ph.PostHistoryTypeId,
        ph.UserId,
        ph.CreationDate,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS rn
    FROM PostHistory ph
), UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COALESCE(SUM(CASE WHEN v.CreationDate IS NOT NULL THEN 1 ELSE 0 END), 0) AS VoteCount,
        COUNT(c.Id) AS CommentCount,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE 
              WHEN b.Class = 1 THEN 1
              WHEN b.Class = 2 THEN 0.5
              WHEN b.Class = 3 THEN 0.25 
              ELSE 0 
            END) AS BadgeScore
    FROM Users u
    LEFT JOIN Votes v ON u.Id = v.UserId
    LEFT JOIN Comments c ON u.Id = c.UserId
    LEFT JOIN Badges b ON u.Id = b.UserId AND b.Date >= '2023-01-01'
    GROUP BY u.Id, u.DisplayName
), PostMetrics AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        COUNT(DISTINCT c.Id) AS CommentCount,
        SUM(COALESCE(p.Score, 0)) AS TotalScore,
        MAX(CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.CreationDate END) AS CloseDate,
        COUNT(DISTINCT ph.Id) AS EditCount
    FROM Posts p
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN PostHistory ph ON p.Id = ph.PostId
    WHERE p.CreationDate >= '2022-01-01'
    GROUP BY p.Id, p.Title
), FilteredContent AS (
    SELECT 
        pm.PostId,
        pm.Title,
        pm.CommentCount,
        pm.TotalScore,
        pm.CloseDate,
        pm.EditCount,
        COUNT(DISTINCT tags.TagName) AS TagCount
    FROM PostMetrics pm
    LEFT JOIN LATERAL (
        SELECT 
            unnest(string_to_array(p.Tags, '><')) AS TagName
        FROM Posts p 
        WHERE pm.PostId = p.Id
    ) tags ON TRUE
    GROUP BY pm.PostId, pm.Title, pm.CommentCount, pm.TotalScore, pm.CloseDate, pm.EditCount
)

SELECT 
    ua.UserId,
    ua.DisplayName,
    COUNT(DISTINCT f.PostId) AS ContributedPosts,
    SUM(f.TotalScore) AS TotalScoreFromContributions,
    SUM(f.CommentCount) AS TotalCommentsMade,
    AVG(f.EditCount) AS AvgEditsPerPost,
    MAX(f.CloseDate) AS MostRecentCloseDate,
    ua.BadgeCount,
    ua.BadgeScore
FROM UserActivity ua
JOIN FilteredContent f ON ua.UserId IN (SELECT DISTINCT c.UserId FROM Comments c WHERE c.PostId = f.PostId)
WHERE ua.Reputation > 100
GROUP BY ua.UserId, ua.DisplayName, ua.BadgeCount, ua.BadgeScore
ORDER BY TotalScoreFromContributions DESC, ua.DisplayName ASC;
