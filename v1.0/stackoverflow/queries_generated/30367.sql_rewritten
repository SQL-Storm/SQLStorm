WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        p.OwnerUserId,
        p.PostTypeId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVoteCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVoteCount
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= DATEADD(YEAR, -1, GETDATE()) 
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownVotes,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    GROUP BY 
        u.Id, u.DisplayName
),
PopularTags AS (
    SELECT 
        TRIM(tag) AS TagName,
        COUNT(*) AS TagCount
    FROM (
        SELECT 
            UNNEST(STRING_TO_ARRAY(SUBSTRING(p.Tags, 2, LENGTH(p.Tags) - 2), '><'))::VARCHAR[]) AS tag
        FROM 
            Posts p
    ) AS t
    GROUP BY 
        TRIM(tag)
),
PostHistoryCTE AS (
    SELECT 
        ph.PostId,
        ph.Comment,
        ph.CreationDate,
        ph.UserId,
        ph.UserDisplayName,
        p.Title AS PostTitle,
        ROW_NUMBER() OVER (PARTITION BY ph.PostId ORDER BY ph.CreationDate DESC) AS HistoryRank
    FROM 
        PostHistory ph
    JOIN 
        Posts p ON ph.PostId = p.Id
    WHERE 
        ph.PostHistoryTypeId IN (10, 11, 12) 
)
SELECT 
    rp.Id AS PostId,
    rp.Title AS PostTitle,
    rp.CreationDate,
    rp.ViewCount,
    rp.Score,
    rp.Rank,
    us.DisplayName AS OwnerDisplayName,
    us.TotalUpVotes,
    us.TotalDownVotes,
    pt.TagName,
    ph.Comment AS PostHistoryComment,
    ph.CreationDate AS HistoryDate
FROM 
    RankedPosts rp
JOIN 
    Users us ON rp.OwnerUserId = us.Id
LEFT JOIN 
    PopularTags pt ON pt.TagCount > 10 
LEFT JOIN 
    PostHistoryCTE ph ON rp.Id = ph.PostId AND ph.HistoryRank = 1 
WHERE 
    rp.Rank <= 5 
ORDER BY 
    rp.PostTypeId, rp.Score DESC;