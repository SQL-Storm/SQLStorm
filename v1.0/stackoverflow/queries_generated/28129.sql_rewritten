WITH PostTagStats AS (
    SELECT 
        p.Id AS PostId,
        p.Title, 
        p.Body, 
        p.CreationDate, 
        p.ViewCount, 
        p.AnswerCount, 
        t.TagName,
        COUNT(v.Id) AS VoteCount,
        STRING_AGG(DISTINCT c.Text, ' | ') AS CommentTexts
    FROM 
        Posts p
    LEFT JOIN 
        Tags t ON t.Id IN (SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')))
    LEFT JOIN 
        Votes v ON v.PostId = p.Id
    LEFT JOIN 
        Comments c ON c.PostId = p.Id
    WHERE 
        p.PostTypeId = 1  
    GROUP BY 
        p.Id, t.TagName
),
UserBadgeStats AS (
    SELECT 
        u.Id AS UserId, 
        u.DisplayName,
        COUNT(b.Id) AS BadgeCount,
        SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON b.UserId = u.Id
    GROUP BY 
        u.Id
)
SELECT 
    pts.PostId,
    pts.Title,
    pts.Body,
    pts.CreationDate,
    pts.ViewCount,
    pts.AnswerCount,
    pts.TagName,
    pts.VoteCount,
    ubs.UserId,
    ubs.DisplayName,
    ubs.BadgeCount,
    ubs.GoldBadges,
    ubs.SilverBadges,
    ubs.BronzeBadges,
    pts.CommentTexts
FROM 
    PostTagStats pts
JOIN 
    Posts p ON pts.PostId = p.Id
JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    UserBadgeStats ubs ON ubs.UserId = u.Id
WHERE 
    pts.VoteCount > 0
ORDER BY 
    pts.ViewCount DESC,
    ubs.BadgeCount DESC
LIMIT 100;