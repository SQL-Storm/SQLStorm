WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        p.OwnerUserId,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS rn,
        (SELECT COUNT(*)
         FROM Votes v
         WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpvoteCount,
        (SELECT COUNT(*)
         FROM Votes v
         WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownvoteCount,
        (SELECT STRING_AGG(tag.TagName, ', ') 
         FROM Tags tag 
         WHERE tag.Id IN (
             SELECT UNNEST(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
         )) AS TagsList
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '30 days'
),

UserReputation AS (
    SELECT 
        u.Id AS UserId,
        SUM(CASE WHEN b.Class = 1 THEN 3 WHEN b.Class = 2 THEN 2 WHEN b.Class = 3 THEN 1 ELSE 0 END) AS TotalBadgePoints,
        COUNT(v.Id) AS TotalVotes,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounty
    FROM 
        Users u
    LEFT JOIN 
        Badges b ON u.Id = b.UserId
    LEFT JOIN 
        Votes v ON u.Id = v.UserId
    GROUP BY 
        u.Id
)

SELECT 
    up.UserId,
    up.TotalBadgePoints,
    up.TotalVotes,
    up.TotalBounty,
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    COALESCE(rp.UpvoteCount, 0) - COALESCE(rp.DownvoteCount, 0) AS NetVoteScore,
    CASE 
        WHEN rp.Score < 0 THEN 'Negative'
        WHEN rp.Score = 0 THEN 'Neutral'
        ELSE 'Positive'
    END AS ScoreCategory,
    CASE
        WHEN rp.ViewCount IS NULL THEN 'No Views'
        WHEN rp.ViewCount >= 100 THEN 'High Traffic'
        ELSE 'Moderate Traffic'
    END AS TrafficCategory,
    rp.TagsList
FROM 
    UserReputation up
JOIN 
    RankedPosts rp ON up.UserId = rp.OwnerUserId
WHERE 
    rp.rn = 1
ORDER BY 
    up.TotalBadgePoints DESC, 
    NetVoteScore DESC, 
    rp.CreationDate DESC
LIMIT 50;