WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.ViewCount,
        p.AnswerCount,
        p.CreationDate,
        p.Tags,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS PostRank,
        COUNT(v.PostId) FILTER (WHERE v.VoteTypeId = 2) OVER (PARTITION BY p.Id) AS UpvoteCount,
        COUNT(v.PostId) FILTER (WHERE v.VoteTypeId = 3) OVER (PARTITION BY p.Id) AS DownvoteCount
    FROM 
        Posts p
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
),

FilteredPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.ViewCount,
        rp.AnswerCount,
        rp.CreationDate,
        rp.Tags,
        rp.PostRank,
        (rp.UpvoteCount - rp.DownvoteCount) AS NetVotes
    FROM 
        RankedPosts rp
    WHERE 
        rp.PostRank <= 10
        OR (rp.PostRank > 10 AND rp.NetVotes > 5)
),

TagStats AS (
    SELECT 
        tag.TagName,
        COUNT(DISTINCT p.Id) AS PostCount,
        SUM(p.ViewCount) AS TotalViews
    FROM 
        Tags tag
    JOIN 
        Posts p ON tag.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags) - 2), '><')::int[])
    GROUP BY 
        tag.TagName
)

SELECT 
    fp.PostId,
    fp.Title,
    fp.Score,
    fp.ViewCount,
    fp.AnswerCount,
    fp.CreationDate,
    fp.Tags,
    ts.TagName,
    ts.PostCount,
    ts.TotalViews,
    COALESCE(b.Name, 'No Badge') AS BadgeName,
    CASE 
        WHEN fp.Score < 0 THEN 'Unsatisfactory'
        WHEN fp.Score BETWEEN 0 AND 10 THEN 'Moderate'
        ELSE 'Outstanding'
    END AS PostQuality
FROM 
    FilteredPosts fp
LEFT JOIN 
    Badges b ON fp.PostId = b.UserId 
LEFT JOIN 
    TagStats ts ON ts.TagName = ANY(string_to_array(substring(fp.Tags, 2, length(fp.Tags) - 2), '><'))
WHERE 
    (fp.Score <> 0 AND ts.TotalViews > 100) 
    OR (fp.CreationDate < cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '6 months' AND fp.ViewCount > 50) 
ORDER BY 
    fp.Score DESC,
    ts.TotalViews DESC;