
WITH RecursivePostHierarchy AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        p.CreationDate,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1 

    UNION ALL

    SELECT 
        p.Id,
        p.Title,
        p.OwnerUserId,
        p.ParentId,
        p.CreationDate,
        r.Level + 1
    FROM 
        Posts p
    INNER JOIN 
        RecursivePostHierarchy r ON p.ParentId = r.PostId
)

SELECT 
    u.DisplayName AS UserDisplayName,
    u.Reputation,
    COUNT(DISTINCT p.Id) AS TotalPosts,
    SUM(COALESCE(v.Score, 0)) AS TotalVotes,
    ARRAY_AGG(DISTINCT t.TagName) AS TagsUsed,
    COUNT(DISTINCT b.Id) AS TotalBadges,
    MAX(p.CreationDate) AS LastPostDate,
    (SELECT COUNT(*)
     FROM Posts p1
     WHERE p1.OwnerUserId = u.Id 
       AND p1.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 month') AS RecentPostsLastMonth,
    ROW_NUMBER() OVER (PARTITION BY u.Id ORDER BY MAX(p.CreationDate) DESC) AS Ranking
FROM 
    Users u
LEFT JOIN 
    Posts p ON u.Id = p.OwnerUserId
LEFT JOIN 
    Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2 
LEFT JOIN 
    Badges b ON u.Id = b.UserId
LEFT JOIN 
    LATERAL (SELECT unnest(string_to_array(p.Tags, '>')) AS TagName) t ON TRUE
GROUP BY 
    u.Id, u.DisplayName, u.Reputation
HAVING 
    COUNT(DISTINCT p.Id) >= 5 
ORDER BY 
    TotalVotes DESC, u.Reputation DESC
LIMIT 10;
