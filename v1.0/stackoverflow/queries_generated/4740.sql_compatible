
WITH RankedPosts AS (
    SELECT 
        p.Id,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.AnswerCount,
        p.CommentCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS PostRank,
        p.OwnerUserId
    FROM 
        Posts p
    WHERE 
        p.CreationDate >= DATEADD(year, -1, CAST('2024-10-01' AS DATE))
),
UserStats AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositiveScores,
        SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativeScores,
        AVG(COALESCE(NULLIF(p.ViewCount, 0), 1)) AS AvgViewsPerPost
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    GROUP BY 
        u.Id, u.DisplayName
),
HighlightedPosts AS (
    SELECT 
        rp.Id,
        rp.Title,
        rp.CreationDate,
        rp.ViewCount,
        u.DisplayName AS OwnerName,
        CASE 
            WHEN rp.ViewCount > 100 THEN 'High Traffic'
            WHEN rp.ViewCount BETWEEN 50 AND 100 THEN 'Moderate Traffic'
            ELSE 'Low Traffic'
        END AS TrafficCategory
    FROM 
        RankedPosts rp
    JOIN 
        Users u ON rp.OwnerUserId = u.Id
    WHERE 
        rp.PostRank <= 5
)
SELECT 
    u.UserId,
    u.DisplayName,
    u.TotalPosts,
    u.PositiveScores,
    u.NegativeScores,
    u.AvgViewsPerPost,
    hp.Title,
    hp.CreationDate,
    hp.ViewCount,
    hp.TrafficCategory
FROM 
    UserStats u
LEFT JOIN 
    HighlightedPosts hp ON u.UserId = hp.OwnerName
WHERE 
    u.TotalPosts > 0
ORDER BY 
    u.TotalPosts DESC, hp.ViewCount DESC;
