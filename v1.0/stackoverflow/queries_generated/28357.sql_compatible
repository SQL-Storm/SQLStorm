
WITH ProcessedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Body,
        p.Tags,
        u.DisplayName AS OwnerDisplayName,
        u.Reputation,
        ARRAY(
            SELECT DISTINCT t.TagName 
            FROM Tags t 
            WHERE t.Id = ANY(string_to_array(substring(p.Tags, 2, length(p.Tags)-2), '><')::int[])
        ) AS ProcessedTags,
        (SELECT COUNT(*) FROM Comments c WHERE c.PostId = p.Id) AS CommentCount,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 2) AS UpVotes,
        (SELECT COUNT(*) FROM Votes v WHERE v.PostId = p.Id AND v.VoteTypeId = 3) AS DownVotes
    FROM 
        Posts p 
    JOIN 
        Users u ON p.OwnerUserId = u.Id
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' 
        AND p.PostTypeId = 1  
),
TaggedPosts AS (
    SELECT 
        pp.PostId,
        pp.Title,
        pp.Body,
        pp.OwnerDisplayName,
        pp.Reputation,
        pp.ProcessedTags,
        pp.CommentCount,
        pp.UpVotes,
        pp.DownVotes,
        (pp.UpVotes - pp.DownVotes) AS NetVotes,
        ROW_NUMBER() OVER (PARTITION BY unnest(pp.ProcessedTags) ORDER BY pp.NetVotes DESC) AS TagRank
    FROM 
        ProcessedPosts pp
),
TopPosts AS (
    SELECT 
        tp.*, 
        COUNT(*) OVER (PARTITION BY unnest(tp.ProcessedTags)) AS TagCount 
    FROM 
        TaggedPosts tp
    WHERE 
        tp.TagRank <= 5  
)
SELECT 
    tp.PostId,
    tp.Title,
    tp.Body,
    tp.OwnerDisplayName,
    tp.Reputation,
    tp.ProcessedTags,
    tp.CommentCount,
    tp.UpVotes,
    tp.DownVotes,
    tp.NetVotes,
    tp.TagCount
FROM 
    TopPosts tp
ORDER BY 
    tp.NetVotes DESC, tp.Reputation DESC;
