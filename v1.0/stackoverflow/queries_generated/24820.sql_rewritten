WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.AnswerCount,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY pt.Name ORDER BY p.Score DESC) AS Rank
    FROM 
        Posts p
    JOIN 
        PostTypes pt ON p.PostTypeId = pt.Id
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
        AND p.Score IS NOT NULL
),
UserStatistics AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        SUM(COALESCE(v.BountyAmount, 0)) AS TotalBounty,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
    FROM 
        Users u
    LEFT JOIN 
        Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId
    GROUP BY 
        u.Id, u.DisplayName
),
ClosedPosts AS (
    SELECT 
        ph.PostId,
        COUNT(*) AS CloseCount,
        MAX(ph.CreationDate) AS LastClosedDate
    FROM 
        PostHistory ph
    WHERE 
        ph.PostHistoryTypeId = 10
    GROUP BY 
        ph.PostId
),
FinalScores AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.CreationDate,
        rp.Score,
        us.TotalPosts,
        us.TotalBounty,
        COALESCE(cp.CloseCount, 0) AS CloseCount,
        cp.LastClosedDate
    FROM 
        RankedPosts rp
    LEFT JOIN 
        UserStatistics us ON rp.PostId IN (SELECT DISTINCT AcceptedAnswerId FROM Posts WHERE AcceptedAnswerId IS NOT NULL)
    LEFT JOIN 
        ClosedPosts cp ON rp.PostId = cp.PostId
)
SELECT 
    fs.PostId,
    fs.Title,
    fs.CreationDate,
    fs.Score,
    fs.TotalPosts,
    fs.TotalBounty,
    fs.CloseCount,
    fs.LastClosedDate,
    CASE 
        WHEN fs.CloseCount > 0 AND fs.Score < 0 THEN 'Potentially Controversial'
        WHEN fs.Score >= 0 THEN 'Positive Engagement'
        ELSE 'Negative Engagement'
    END AS EngagementType,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags
FROM 
    FinalScores fs
LEFT JOIN 
    Posts p ON fs.PostId = p.Id
LEFT JOIN 
    LATERAL (
        SELECT 
            unnest(string_to_array(p.Tags, '<>')) AS TagName
    ) t ON TRUE
GROUP BY 
    fs.PostId, fs.Title, fs.CreationDate, fs.Score, fs.TotalPosts, fs.TotalBounty, fs.CloseCount, fs.LastClosedDate
ORDER BY 
    fs.Score DESC, fs.CloseCount DESC 
LIMIT 100;