WITH RankedPosts AS (
    SELECT 
        P.Id AS PostId,
        P.Title,
        P.CreationDate,
        P.Score,
        P.ViewCount,
        P.AnswerCount,
        P.CommentCount,
        P.Tags,
        RANK() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS PostRank
    FROM 
        Posts P
    WHERE 
        P.CreationDate >= (cast('2024-10-01' as date) - INTERVAL '30 days')
          AND P.ViewCount > 100
),
UserBadgeCounts AS (
    SELECT 
        U.Id AS UserId,
        COUNT(B.Id) AS BadgeCount,
        SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges,
        SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges,
        SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges
    FROM 
        Users U
    LEFT JOIN 
        Badges B ON U.Id = B.UserId
    GROUP BY 
        U.Id
),
PostActivity AS (
    SELECT 
        PH.PostId,
        COUNT(CASE WHEN PH.PostHistoryTypeId IN (10, 11) THEN 1 END) AS ClosureCount,
        MIN(PH.CreationDate) AS FirstClosureDate,
        MAX(PH.CreationDate) AS LastEditDate
    FROM 
        PostHistory PH
    GROUP BY 
        PH.PostId
),
CommentData AS (
    SELECT 
        C.PostId,
        COUNT(C.Id) AS CommentCount,
        STRING_AGG(C.Text, ' | ' ORDER BY C.CreationDate) AS CommentTexts
    FROM 
        Comments C
    GROUP BY 
        C.PostId
)

SELECT 
    RP.PostId,
    RP.Title,
    RP.CreationDate,
    RP.Score,
    RP.ViewCount,
    RP.AnswerCount,
    RP.CommentCount,
    RP.Tags,
    UBS.UserId,
    UBS.BadgeCount,
    UBS.GoldBadges,
    UBS.SilverBadges,
    UBS.BronzeBadges,
    PA.ClosureCount,
    PA.FirstClosureDate,
    PA.LastEditDate,
    CD.CommentCount AS TotalComments,
    COALESCE(CD.CommentTexts, 'No comments yet') AS AllComments,
    COALESCE(UBC.BadgeCount, 0) AS UserBadgeCount
FROM 
    RankedPosts RP
JOIN 
    UserBadgeCounts UBS ON RP.OwnerUserId = UBS.UserId
LEFT JOIN 
    PostActivity PA ON RP.PostId = PA.PostId
LEFT JOIN 
    CommentData CD ON RP.PostId = CD.PostId
WHERE 
    RP.PostRank = 1
ORDER BY 
    RP.Score DESC, RP.ViewCount ASC
LIMIT 100
OFFSET 0;