
WITH UserActivity AS (
    SELECT 
        u.Id AS UserId,
        u.DisplayName,
        COUNT(DISTINCT p.Id) AS TotalPosts,
        COUNT(DISTINCT c.Id) AS TotalComments,
        SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes,
        SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownVotes,
        SUM(CASE WHEN b.Id IS NOT NULL THEN 1 ELSE 0 END) AS TotalBadges,
        SUM(p.ViewCount) AS TotalViews,
        AVG(COALESCE(DATEDIFF(second, p.CreationDate, p.LastActivityDate), 0)) AS AvgActiveDuration
    FROM Users u
    LEFT JOIN Posts p ON u.Id = p.OwnerUserId
    LEFT JOIN Comments c ON p.Id = c.PostId
    LEFT JOIN Votes v ON p.Id = v.PostId
    LEFT JOIN Badges b ON u.Id = b.UserId
    WHERE u.Reputation > 1000 
    GROUP BY u.Id, u.DisplayName
),
TopUsers AS (
    SELECT 
        UserId,
        DisplayName,
        TotalPosts,
        TotalComments,
        TotalUpVotes,
        TotalDownVotes,
        TotalBadges,
        TotalViews,
        AvgActiveDuration,
        RANK() OVER (ORDER BY TotalViews DESC) AS ViewRank
    FROM UserActivity
)
SELECT 
    tu.DisplayName,
    tu.TotalPosts,
    tu.TotalComments,
    tu.TotalUpVotes,
    tu.TotalDownVotes,
    tu.TotalBadges,
    tu.TotalViews,
    tu.AvgActiveDuration,
    pt.Name AS PostType,
    COUNT(DISTINCT p.Id) AS PostsOfType
FROM TopUsers tu
LEFT JOIN Posts p ON tu.UserId = p.OwnerUserId
LEFT JOIN PostTypes pt ON p.PostTypeId = pt.Id
WHERE tu.ViewRank <= 10 
GROUP BY 
    tu.DisplayName, 
    tu.TotalPosts, 
    tu.TotalComments, 
    tu.TotalUpVotes, 
    tu.TotalDownVotes, 
    tu.TotalBadges, 
    tu.TotalViews, 
    tu.AvgActiveDuration, 
    pt.Name
ORDER BY tu.TotalViews DESC, pt.Name;
