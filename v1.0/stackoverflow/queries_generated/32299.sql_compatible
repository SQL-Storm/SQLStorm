
WITH RecursivePostHierarchy AS (
    
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.AcceptedAnswerId,
        1 AS Level
    FROM 
        Posts p
    WHERE 
        p.PostTypeId = 1

    UNION ALL

    
    SELECT 
        a.Id AS PostId,
        a.Title,
        a.CreationDate,
        a.AcceptedAnswerId,
        Level + 1 AS Level
    FROM 
        Posts a
    INNER JOIN 
        RecursivePostHierarchy q ON a.ParentId = q.PostId
)

SELECT 
    p.Title AS QuestionTitle,
    COUNT(a.Id) AS AnswerCount,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVoteCount,
    COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVoteCount,
    AVG(u.Reputation) AS AverageReputation,
    STRING_AGG(DISTINCT t.TagName, ', ') AS Tags,
    p.CreationDate,
    ROW_NUMBER() OVER (PARTITION BY p.Id ORDER BY a.CreationDate DESC) AS RecentAnswerRank
FROM 
    Posts p
LEFT JOIN 
    Posts a ON p.Id = a.ParentId
LEFT JOIN 
    Votes v ON a.Id = v.PostId
LEFT JOIN 
    Users u ON p.OwnerUserId = u.Id
LEFT JOIN 
    (SELECT TRIM(value) AS TagName FROM STRING_SPLIT(p.Tags, ',')) AS t ON t.TagName = TRIM(tag.value)
WHERE 
    p.PostTypeId = 1
GROUP BY 
    p.Id, p.Title, p.CreationDate
HAVING 
    COUNT(a.Id) > 0
ORDER BY 
    UpVoteCount DESC, AnswerCount DESC;
