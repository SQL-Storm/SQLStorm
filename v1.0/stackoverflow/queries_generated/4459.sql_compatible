
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.Score,
        p.CreationDate,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS RN,
        COUNT(c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
UserReputation AS (
    SELECT 
        u.Id AS UserId,
        u.Reputation,
        COALESCE(b.Class, 0) AS BadgeClass
    FROM 
        Users u
    LEFT JOIN 
        (SELECT UserId, MIN(Class) AS Class
         FROM Badges
         GROUP BY UserId) b ON u.Id = b.UserId
    WHERE 
        u.Reputation > 1000
),
TopPosts AS (
    SELECT 
        rp.PostId,
        rp.Title,
        rp.Score,
        rp.CreationDate,
        rp.ViewCount,
        ur.Reputation,
        ur.BadgeClass,
        CASE 
            WHEN ur.BadgeClass = 1 THEN 'Gold Badge Holder'
            WHEN ur.BadgeClass = 2 THEN 'Silver Badge Holder'
            ELSE 'No Badge'
        END AS BadgeInfo
    FROM 
        RankedPosts rp
    INNER JOIN 
        UserReputation ur ON rp.OwnerUserId = ur.UserId
    WHERE 
        rp.RN = 1
)

SELECT 
    tp.PostId,
    tp.Title,
    tp.Score,
    tp.ViewCount,
    tp.Reputation,
    tp.BadgeInfo,
    COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = tp.PostId AND v.VoteTypeId = 2), 0) AS UpVotes,
    COALESCE((SELECT COUNT(*) FROM Votes v WHERE v.PostId = tp.PostId AND v.VoteTypeId = 3), 0) AS DownVotes
FROM 
    TopPosts tp
WHERE 
    tp.Score > 0
ORDER BY 
    tp.Score DESC, tp.ViewCount DESC
LIMIT 10

UNION ALL

SELECT 
    NULL AS PostId,
    'Total Number of Unique Posts' AS Title,
    COUNT(DISTINCT p.Id) AS Score,
    NULL AS ViewCount,
    NULL AS Reputation,
    NULL AS BadgeInfo,
    NULL AS UpVotes,
    NULL AS DownVotes
FROM 
    Posts p
WHERE 
    p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year';
