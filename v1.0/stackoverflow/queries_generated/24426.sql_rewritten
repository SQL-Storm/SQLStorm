WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.Score,
        p.ViewCount,
        ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank,
        COUNT(c.Id) AS CommentCount,
        COUNT(v.Id) AS VoteCount,
        COUNT(DISTINCT b.Id) AS BadgeCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    LEFT JOIN 
        Votes v ON p.Id = v.PostId AND v.VoteTypeId = 2  
    LEFT JOIN 
        Badges b ON p.OwnerUserId = b.UserId
    WHERE 
        p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year'
    GROUP BY 
        p.Id
),
PostIssues AS (
    SELECT 
        p.Id,
        COUNT(ph.Id) AS HistoryCount,
        MAX(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 ELSE 0 END) AS WasClosed,
        MAX(CASE WHEN ph.PostHistoryTypeId = 12 THEN 1 ELSE 0 END) AS WasDeleted,
        MAX(CASE WHEN ph.PostHistoryTypeId = 14 THEN 1 ELSE 0 END) AS WasLocked
    FROM 
        Posts p
    LEFT JOIN 
        PostHistory ph ON p.Id = ph.PostId
    GROUP BY 
        p.Id
)
SELECT 
    rp.PostId,
    rp.Title,
    rp.CreationDate,
    rp.Score,
    rp.ViewCount,
    rp.Rank,
    rp.CommentCount,
    rp.VoteCount,
    pi.HistoryCount,
    CASE 
        WHEN pi.WasClosed = 1 THEN 'Closed'
        WHEN pi.WasDeleted = 1 THEN 'Deleted'
        WHEN pi.WasLocked = 1 THEN 'Locked'
        ELSE 'Active'
    END AS PostStatus,
    COALESCE(u.DisplayName, 'Anonymous') AS OwnerDisplayName,
    COALESCE(bc.BadgeCount, 0) AS TotalBadges,
    STRING_AGG(DISTINCT t.TagName, ', ') AS AssociatedTags
FROM 
    RankedPosts rp
LEFT JOIN 
    Users u ON rp.OwnerUserId = u.Id
LEFT JOIN 
    PostIssues pi ON rp.PostId = pi.Id
LEFT JOIN 
    Posts p ON rp.PostId = p.Id
LEFT JOIN 
    Tags t ON t.WikiPostId = p.Id
LEFT JOIN 
    (SELECT UserId, COUNT(*) AS BadgeCount FROM Badges GROUP BY UserId) bc ON u.Id = bc.UserId
WHERE 
    rp.Rank <= 5 
GROUP BY 
    rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, 
    rp.Rank, pi.HistoryCount, pi.WasClosed, pi.WasDeleted, pi.WasLocked, 
    u.DisplayName, bc.BadgeCount
ORDER BY 
    rp.Score DESC, rp.Rank;