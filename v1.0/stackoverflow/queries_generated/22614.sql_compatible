
WITH RankedPosts AS (
    SELECT 
        p.Id AS PostId,
        p.Title,
        p.CreationDate,
        p.ViewCount,
        p.Score,
        ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.CreationDate DESC) AS rn,
        COUNT(DISTINCT c.Id) OVER (PARTITION BY p.Id) AS CommentCount
    FROM 
        Posts p
    LEFT JOIN 
        Comments c ON p.Id = c.PostId
    WHERE 
        p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year'
),
PopularTags AS (
    SELECT
        UNNEST(SPLIT_PART(p.Tags, '><', 1) ) AS Tag
    FROM 
        Posts p 
    WHERE 
        p.Tags IS NOT NULL
),
TagsWithCount AS (
    SELECT
        Tag,
        COUNT(*) AS TagUsage
    FROM
        PopularTags
    GROUP BY Tag
    HAVING COUNT(*) > 5
),
PostActivity AS (
    SELECT
        p.Id AS PostId,
        p.Title,
        (COALESCE(p.Score, 0) + COALESCE(a.UpVotes, 0) - COALESCE(a.DownVotes, 0)) AS NetScore,
        a.*, 
        (SELECT STRING_AGG(b.Name, ', ') 
         FROM Badges b 
         WHERE b.UserId = p.OwnerUserId) AS UserBadges
    FROM 
        Posts p
    LEFT JOIN 
        Users u ON p.OwnerUserId = u.Id
    LEFT JOIN 
        (SELECT 
            PostId, 
            SUM(CASE WHEN VoteTypeId IN (2, 3) THEN 1 ELSE 0 END) AS UpVotes,
            SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes
         FROM 
            Votes 
         GROUP BY PostId) a ON p.Id = a.PostId
),
PostsWithTags AS (
    SELECT 
        p.PostId,
        p.Title,
        p.NetScore,
        t.Tag,
        ROW_NUMBER() OVER (PARTITION BY t.Tag ORDER BY p.NetScore DESC) AS TagRank
    FROM 
        PostActivity p
    JOIN 
        PopularTags tp ON tp.Tag = ANY(SPLIT_PARTS(p.Title, ' '))
)
SELECT *
FROM PostsWithTags;
