query,category,explanation,text
7397.sql,"Post analytics","The query calculates and compares average views, total comments, total scores, and post counts between the top 10 highest-scoring posts and other posts created in the past year, grouped by post type.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.ViewCount, p.Score, COUNT(c.Id) AS CommentCount, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.ViewCount, p.Score, p.PostTypeId ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.ViewCount, rp.Score, rp.CommentCount, CASE WHEN rp.Rank <= 10 THEN 'Top 10' ELSE 'Other' END AS RankingCategory FROM RankedPosts rp ) SELECT tp.RankingCategory, AVG(tp.ViewCount) AS AvgViewCount, SUM(tp.CommentCount) AS TotalComments, SUM(tp.Score) AS TotalScore, COUNT(tp.PostId) AS TotalPosts FROM TopPosts tp GROUP BY tp.RankingCategory ORDER BY tp.RankingCategory DESC;"
19677.sql,"Top posts by score","This query retrieves the top 10 highest-scoring questions along with their author's display name, title, creation date, score, and view count.","SELECT u.DisplayName, p.Title, p.CreationDate, p.Score, p.ViewCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.Score DESC LIMIT 10;"
9563.sql,"Top posts by score and author","The query retrieves the top 5 highest-scoring posts by type created within the last year with over 100 views, along with their authors, creation dates, scores, and total upvote and downvote counts.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.Score, p.CreationDate, u.DisplayName AS Author, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) as PostRank FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' AND p.ViewCount > 100 ), AggregatedVotes AS ( SELECT v.PostId, SUM(CASE WHEN vt.Name = 'UpMod' THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN vt.Name = 'DownMod' THEN 1 ELSE 0 END) AS DownVotes FROM Votes v JOIN VoteTypes vt ON v.VoteTypeId = vt.Id GROUP BY v.PostId ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.Score, rp.CreationDate, rp.Author, av.UpVotes, av.DownVotes FROM RankedPosts rp LEFT JOIN AggregatedVotes av ON rp.PostId = av.PostId WHERE rp.PostRank <= 5 ) SELECT tp.Title, tp.Score, tp.CreationDate, tp.Author, COALESCE(tp.UpVotes, 0) AS TotalUpVotes, COALESCE(tp.DownVotes, 0) AS TotalDownVotes FROM TopPosts tp ORDER BY tp.Score DESC, tp.CreationDate DESC;"
26260.sql,"Top questions + details","This query retrieves the top 10 highest-scoring questions with at least one answer, including their details, tags, answer count, upvotes, downvotes, and upvote ratio.","WITH RankedPosts AS ( SELECT p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, ARRAY_AGG(DISTINCT t.TagName) AS Tags, COUNT(DISTINCT a.Id) AS AnswerCount, ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.ViewCount DESC) AS PostRank FROM Posts p LEFT JOIN Posts a ON p.Id = a.ParentId LEFT JOIN UNNEST(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><')) AS tag_name ON TRUE JOIN Tags t ON t.TagName = tag_name WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score ), FilteredPosts AS ( SELECT rp.*, (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 2) AS Upvotes, (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 3) AS Downvotes FROM RankedPosts rp WHERE rp.AnswerCount > 0 ) SELECT fp.Id, fp.Title, fp.CreationDate, fp.ViewCount, fp.Score, fp.AnswerCount, fp.Tags, fp.Upvotes, fp.Downvotes, ROUND(COALESCE(fp.Upvotes::FLOAT / NULLIF(fp.Upvotes + fp.Downvotes, 0), 0), 2) AS UpvoteRatio FROM FilteredPosts fp WHERE fp.PostRank <= 10 ORDER BY fp.Score DESC, fp.ViewCount DESC;"
15490.sql,"Recent posts","This query retrieves the 10 most recent questions along with their titles, creation dates, view counts, scores, and the display names of their owners.","SELECT p.Title, p.CreationDate, p.ViewCount, p.Score, u.DisplayName AS OwnerDisplayName FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.CreationDate DESC LIMIT 10;"
12033.sql,"User analytics","The query retrieves each user's name along with their total posts, questions, answers, scores, average post views, and badge counts, ordered by highest total score and posts.","WITH UserPostStats AS ( SELECT u.Id AS UserId, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(p.Score) AS TotalScore, AVG(p.ViewCount) AS AvgViewCount FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.Id ), BadgeStats AS ( SELECT b.UserId, COUNT(b.Id) AS TotalBadges, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS TotalGoldBadges, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS TotalSilverBadges, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS TotalBronzeBadges FROM Badges b GROUP BY b.UserId ) SELECT u.DisplayName, ups.TotalPosts, ups.TotalQuestions, ups.TotalAnswers, ups.TotalScore, ups.AvgViewCount, bs.TotalBadges, bs.TotalGoldBadges, bs.TotalSilverBadges, bs.TotalBronzeBadges FROM Users u LEFT JOIN UserPostStats ups ON u.Id = ups.UserId LEFT JOIN BadgeStats bs ON u.Id = bs.UserId ORDER BY ups.TotalScore DESC, ups.TotalPosts DESC;"
13845.sql,"Top users by reputation and post score","This query retrieves the top 100 users ranked by reputation and total post score, along with their number of posts, questions, answers, views, and badge counts.","WITH UserStats AS ( SELECT U.Id AS UserId, U.Reputation, U.Views, COUNT(DISTINCT P.Id) AS PostCount, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount, SUM(CASE WHEN P.PostTypeId IN (1, 2) THEN P.Score ELSE 0 END) AS TotalScore FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId GROUP BY U.Id, U.Reputation, U.Views ), TopBadgeUsers AS ( SELECT B.UserId, COUNT(B.Id) AS BadgeCount FROM Badges B GROUP BY B.UserId ) SELECT U.UserId, U.Reputation, U.Views, U.PostCount, U.QuestionCount, U.AnswerCount, U.TotalScore, COALESCE(B.BadgeCount, 0) AS BadgeCount FROM UserStats U LEFT JOIN TopBadgeUsers B ON U.UserId = B.UserId ORDER BY U.Reputation DESC, U.TotalScore DESC LIMIT 100;"
12771.sql,"Post types","The query retrieves each post type's name along with the total number of posts, average score, average view count, and number of distinct active users who created posts, sorted by the number of posts in descending order.","SELECT pt.Name AS PostType, COUNT(p.Id) AS PostCount, AVG(p.Score) AS AverageScore, AVG(p.ViewCount) AS AverageViewCount, COUNT(DISTINCT p.OwnerUserId) AS ActiveUsers FROM Posts p JOIN PostTypes pt ON p.PostTypeId = pt.Id GROUP BY pt.Name ORDER BY PostCount DESC;"
14549.sql,"Top posts by revisions","The query retrieves the top 10 posts with the most revisions, showing each post's ID, number of revisions, first and last revision dates, the user who made the last edit, and various post statistics like title, score, views, answers, and comments.","SELECT PH.PostId, COUNT(PH.Id) AS RevisionCount, MIN(PH.CreationDate) AS FirstRevisionDate, MAX(PH.CreationDate) AS LastRevisionDate, U.DisplayName AS LastEditedBy, P.Title, P.Score, P.ViewCount, P.AnswerCount, P.CommentCount FROM PostHistory PH JOIN Posts P ON PH.PostId = P.Id LEFT JOIN Users U ON PH.UserId = U.Id GROUP BY PH.PostId, U.DisplayName, P.Title, P.Score, P.ViewCount, P.AnswerCount, P.CommentCount ORDER BY RevisionCount DESC LIMIT 10;"
6625.sql,"Users and worst question","This query retrieves each user's lowest-ranked (worst scoring) question created since January 1, 2022, showing its details sorted by score and views.","WITH RankedPosts AS ( SELECT p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName AS OwnerDisplayName, DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 AND p.CreationDate >= '2022-01-01' ), MaxRank AS ( SELECT OwnerDisplayName, MAX(PostRank) AS MaxPostRank FROM RankedPosts GROUP BY OwnerDisplayName ) SELECT rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, rp.OwnerDisplayName FROM RankedPosts rp JOIN MaxRank mr ON rp.OwnerDisplayName = mr.OwnerDisplayName WHERE rp.PostRank = mr.MaxPostRank ORDER BY rp.Score DESC, rp.ViewCount DESC;"
16141.sql,"Top users by post count","This query lists the top 10 users by total posts, showing each user's name along with counts of their questions, answers, and tag wiki edits.","SELECT u.DisplayName, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(CASE WHEN p.PostTypeId IN (4, 5) THEN 1 ELSE 0 END) AS TotalTagWikis FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.DisplayName ORDER BY TotalPosts DESC LIMIT 10;"
10183.sql,"Posts and author","This query retrieves detailed statistics about users and their posts, combining user reputation, post and comment counts, vote counts, and post details, then lists all posts along with their owners, ordered by user reputation and post view count.","WITH UserStats AS ( SELECT U.Id AS UserId, U.DisplayName, U.Reputation, COUNT(DISTINCT P.Id) AS PostCount, COUNT(DISTINCT C.Id) AS CommentCount, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY U.Id, U.DisplayName, U.Reputation ), PostStats AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.OwnerUserId, P.ViewCount, P.Score, P.AnswerCount, P.CommentCount, CASE WHEN P.PostTypeId = 1 THEN 'Question' WHEN P.PostTypeId = 2 THEN 'Answer' ELSE 'Other' END AS PostType, COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpVotes, COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownVotes FROM Posts P LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY P.Id, P.Title, P.CreationDate, P.OwnerUserId, P.ViewCount, P.Score, P.AnswerCount, P.CommentCount, P.PostTypeId ) SELECT U.DisplayName, U.Reputation, U.PostCount, U.CommentCount, U.UpVoteCount, U.DownVoteCount, P.PostId, P.Title, P.CreationDate, P.ViewCount, P.Score, P.AnswerCount, P.CommentCount, P.PostType, P.UpVotes, P.DownVotes FROM UserStats U JOIN PostStats P ON U.UserId = P.OwnerUserId ORDER BY U.Reputation DESC, P.ViewCount DESC;"
2228.sql,"Users and 5 recent posts","The query retrieves users with over 1000 reputation, showing their top 5 most recent posts from the past year along with comment counts and badges, or indicates if they have no recent posts, ordered by reputation and name.","WITH RankedPosts AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.Score, COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount, ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS PostRank, P.OwnerUserId FROM Posts P LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.CreationDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY P.Id, P.Title, P.CreationDate, P.Score, P.OwnerUserId ), UserBadges AS ( SELECT U.Id AS UserId, COUNT(CASE WHEN B.Class = 1 THEN 1 END) AS GoldCount, COUNT(CASE WHEN B.Class = 2 THEN 1 END) AS SilverCount, COUNT(CASE WHEN B.Class = 3 THEN 1 END) AS BronzeCount FROM Users U LEFT JOIN Badges B ON U.Id = B.UserId GROUP BY U.Id ), TopUsers AS ( SELECT U.Id, U.DisplayName, U.Reputation, UBad.GoldCount, UBad.SilverCount, UBad.BronzeCount, R.PostRank, R.PostId FROM Users U JOIN UserBadges UBad ON U.Id = UBad.UserId LEFT JOIN RankedPosts R ON U.Id = R.OwnerUserId WHERE U.Reputation > 1000 ) SELECT U.DisplayName, U.Reputation, COALESCE(R.PostId, -1) AS MostRecentPost, COALESCE(R.Title, 'No Posts') AS LatestPostTitle, COALESCE(R.CommentCount, 0) AS CommentsOnLatestPost, (SELECT STRING_AGG(CASE WHEN B.Class = 1 THEN 'Gold' WHEN B.Class = 2 THEN 'Silver' WHEN B.Class = 3 THEN 'Bronze' END, ', ') FROM Badges B WHERE B.UserId = U.Id) AS BadgeList FROM Users U LEFT JOIN TopUsers T ON U.Id = T.Id LEFT JOIN RankedPosts R ON T.PostId = R.PostId WHERE T.PostRank IS NULL OR T.PostRank <= 5 ORDER BY U.Reputation DESC, U.DisplayName ASC;"
5046.sql,"Top posts by score and tags","The query retrieves the top 10 highest-scoring posts of each post type created in the last 30 days, including their details, owner names, comment counts, and associated tags, ordered by score and view count.","WITH RankedPosts AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.Score, P.ViewCount, U.DisplayName AS Owner, COUNT(CASE WHEN C.PostId IS NOT NULL THEN 1 END) AS CommentCount, RANK() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC) AS RankByScore FROM Posts P LEFT JOIN Users U ON P.OwnerUserId = U.Id LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' GROUP BY P.Id, P.Title, P.CreationDate, P.Score, P.ViewCount, U.DisplayName, P.PostTypeId ), TopPosts AS ( SELECT RP.PostId, RP.Title, RP.CreationDate, RP.Score, RP.ViewCount, RP.Owner, RP.CommentCount FROM RankedPosts RP WHERE RP.RankByScore <= 10 ) SELECT TP.PostId, TP.Title, TP.CreationDate, TP.Score, TP.ViewCount, TP.Owner, TP.CommentCount, (SELECT STRING_AGG(T.TagName, ', ') FROM Tags T JOIN LATERAL unnest(string_to_array(substring(P.Tags, 2, length(P.Tags)-2), '><')) AS tag ON T.TagName = tag WHERE P.Id = TP.PostId) AS TagsList FROM TopPosts TP LEFT JOIN Posts P ON TP.PostId = P.Id ORDER BY TP.Score DESC, TP.ViewCount DESC;"
30424.sql,"Top posts by votes and author information","The query retrieves detailed information about each user's most recent question from the past year, including user badges, vote counts, and post history stats, ordered by net votes and creation date, limited to the top 100 posts.","WITH RecursivePostStats AS ( SELECT p.Id AS PostId, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount, p.CreationDate, p.OwnerUserId, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn FROM Posts p WHERE p.PostTypeId = 1 ), UserBadges AS ( SELECT b.UserId, COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges, COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges, COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges FROM Badges b GROUP BY b.UserId ), VoteCounts AS ( SELECT v.PostId, COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes, COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes FROM Votes v GROUP BY v.PostId ), PostHistoryAnalysis AS ( SELECT ph.PostId, MAX(ph.CreationDate) AS LastActivityDate, COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.UserId END) AS CloseVotes, COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId = 11 THEN ph.UserId END) AS ReopenVotes FROM PostHistory ph GROUP BY ph.PostId ) SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, ps.ViewCount, ps.AnswerCount, ps.CommentCount, ps.OwnerUserId, u.DisplayName AS OwnerDisplayName, COALESCE(ub.GoldBadges, 0) AS GoldBadges, COALESCE(ub.SilverBadges, 0) AS SilverBadges, COALESCE(ub.BronzeBadges, 0) AS BronzeBadges, COALESCE(vc.UpVotes, 0) - COALESCE(vc.DownVotes, 0) AS NetVotes, pha.LastActivityDate, pha.CloseVotes, pha.ReopenVotes FROM Posts p JOIN RecursivePostStats ps ON p.Id = ps.PostId JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN UserBadges ub ON u.Id = ub.UserId LEFT JOIN VoteCounts vc ON p.Id = vc.PostId LEFT JOIN PostHistoryAnalysis pha ON p.Id = pha.PostId WHERE ps.rn = 1 AND p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year') ORDER BY NetVotes DESC, p.CreationDate DESC LIMIT 100;"
26640.sql,"Posts and top-ranked answer","The query retrieves detailed information about each question post, including its top-ranked answers, answer owners, scores, and any closure details, ordered by answer score and question date.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title AS PostTitle, p.Tags, p.CreationDate, p.AcceptedAnswerId, COUNT(a.Id) AS AnswerCount, ROW_NUMBER() OVER(PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS rn FROM Posts p LEFT JOIN Posts a ON p.Id = a.ParentId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.Tags, p.CreationDate, p.AcceptedAnswerId ), MostVotedAnswers AS ( SELECT a.Id AS AnswerId, a.ParentId, a.Score, u.DisplayName AS OwnerName FROM Posts a JOIN Users u ON a.OwnerUserId = u.Id WHERE a.PostTypeId = 2 ORDER BY a.Score DESC ), ClosedPosts AS ( SELECT ph.PostId, ph.CreationDate AS CloseDate, c.Name AS CloseReason FROM PostHistory ph JOIN CloseReasonTypes c ON ph.Comment = CAST(c.Id AS VARCHAR) WHERE ph.PostHistoryTypeId = 10 ) SELECT rp.PostId, rp.PostTitle, rp.Tags, rp.CreationDate AS QuestionDate, mp.AnswerId, mp.OwnerName AS AnswerOwner, mp.Score AS AnswerScore, cp.CloseDate, cp.CloseReason FROM RankedPosts rp LEFT JOIN MostVotedAnswers mp ON rp.PostId = mp.ParentId LEFT JOIN ClosedPosts cp ON rp.PostId = cp.PostId WHERE rp.rn = 1 ORDER BY AnswerScore DESC NULLS LAST, QuestionDate DESC;"
31859.sql,"Top users by post score","This query retrieves the top 100 users who have at least one post and one badge, showing their badge counts, post statistics, and days since their last post, sorted by total score and total posts.","WITH RECURSIVE UserBadgeCounts AS ( SELECT u.Id AS UserId, u.DisplayName, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadgeCount, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadgeCount, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadgeCount FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName ), PostMetrics AS ( SELECT p.OwnerUserId, COUNT(DISTINCT p.Id) AS TotalPosts, COUNT(DISTINCT CASE WHEN p.PostTypeId = 1 THEN p.Id END) AS TotalQuestions, COUNT(DISTINCT CASE WHEN p.PostTypeId = 2 THEN p.Id END) AS TotalAnswers, SUM(p.Score) AS TotalScore, AVG(p.ViewCount) AS AvgViewCount, MAX(p.CreationDate) AS LastPostDate FROM Posts p GROUP BY p.OwnerUserId ), CombinedMetrics AS ( SELECT u.Id AS UserId, u.DisplayName, COALESCE(ubc.GoldBadgeCount, 0) AS GoldBadgeCount, COALESCE(ubc.SilverBadgeCount, 0) AS SilverBadgeCount, COALESCE(ubc.BronzeBadgeCount, 0) AS BronzeBadgeCount, COALESCE(pm.TotalPosts, 0) AS TotalPosts, COALESCE(pm.TotalQuestions, 0) AS TotalQuestions, COALESCE(pm.TotalAnswers, 0) AS TotalAnswers, COALESCE(pm.TotalScore, 0) AS TotalScore, COALESCE(pm.AvgViewCount, 0) AS AvgViewCount, pm.LastPostDate FROM Users u LEFT JOIN UserBadgeCounts ubc ON u.Id = ubc.UserId LEFT JOIN PostMetrics pm ON u.Id = pm.OwnerUserId ) SELECT c.UserId, c.DisplayName, c.GoldBadgeCount, c.SilverBadgeCount, c.BronzeBadgeCount, c.TotalPosts, c.TotalQuestions, c.TotalAnswers, c.TotalScore, c.AvgViewCount, CASE WHEN c.LastPostDate IS NOT NULL THEN DATE '2024-10-01' - c.LastPostDate ELSE NULL END AS DaysSinceLastPost FROM CombinedMetrics c WHERE (c.TotalQuestions > 0 OR c.TotalAnswers > 0) AND (c.GoldBadgeCount > 0 OR c.SilverBadgeCount > 0 OR c.BronzeBadgeCount > 0) ORDER BY c.TotalScore DESC, c.TotalPosts DESC LIMIT 100;"
31711.sql,"Top users by reputation and highest-scoring post","The query lists each user's highest-scoring post from the past year along with the user's badge counts and reputation (for users with reputation over 500), ordered by the number of comments on their top post and then by reputation.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.PostTypeId, p.OwnerUserId, p.CreationDate, RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank, COUNT(DISTINCT c.Id) AS CommentCount, p.Score FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.PostTypeId, p.OwnerUserId, p.CreationDate, p.Score ), UserBadges AS ( SELECT b.UserId, COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges, COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges, COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges FROM Badges b GROUP BY b.UserId ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.OwnerUserId, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges, rp.CommentCount, ROW_NUMBER() OVER (ORDER BY rp.Score DESC) AS TopRank FROM RankedPosts rp JOIN UserBadges ub ON rp.OwnerUserId = ub.UserId WHERE rp.Rank = 1 ) SELECT p.Title, u.DisplayName, u.Reputation, COALESCE(tp.GoldBadges, 0) AS GoldBadges, COALESCE(tp.SilverBadges, 0) AS SilverBadges, COALESCE(tp.BronzeBadges, 0) AS BronzeBadges, tp.CommentCount FROM TopPosts tp JOIN Users u ON tp.OwnerUserId = u.Id JOIN Posts p ON tp.PostId = p.Id WHERE u.Reputation > 500 ORDER BY tp.CommentCount DESC, u.Reputation DESC;"
23496.sql,"Top users by reputation and post statistics","This query retrieves detailed badge, post, and vote statistics for experienced users with significant reputation and activity, ranks them by score and reputation, categorizes their activity level, and returns a paginated list of users.","WITH UserBadgeStats AS ( SELECT u.Id AS UserId, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges, COUNT(b.Id) AS TotalBadges FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id ), PostSummary AS ( SELECT p.OwnerUserId, COUNT(DISTINCT p.Id) AS TotalPosts, COUNT(DISTINCT CASE WHEN p.PostTypeId = 1 THEN p.Id END) AS QuestionCount, COUNT(DISTINCT CASE WHEN p.PostTypeId = 2 THEN p.Id END) AS AnswerCount, SUM(COALESCE(p.Score, 0)) AS TotalScore, MAX(p.CreationDate) AS LastPostDate FROM Posts p GROUP BY p.OwnerUserId ), VoteCounts AS ( SELECT v.UserId, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, COUNT(DISTINCT v.PostId) AS VotedPosts FROM Votes v GROUP BY v.UserId ) SELECT u.Id, u.DisplayName, COALESCE(ubs.GoldBadges, 0) AS GoldBadges, COALESCE(ubs.SilverBadges, 0) AS SilverBadges, COALESCE(ubs.BronzeBadges, 0) AS BronzeBadges, COALESCE(ps.TotalPosts, 0) AS TotalPosts, COALESCE(ps.QuestionCount, 0) AS QuestionCount, COALESCE(ps.AnswerCount, 0) AS AnswerCount, COALESCE(ps.TotalScore, 0) AS TotalScore, COALESCE(vcs.UpVotes, 0) AS UpVotes, COALESCE(vcs.DownVotes, 0) AS DownVotes, COALESCE(vcs.VotedPosts, 0) AS VotedPosts, CASE WHEN COALESCE(ubs.TotalBadges, 0) > 0 THEN 'Active User' WHEN COALESCE(ps.TotalPosts, 0) = 0 AND COALESCE(vcs.VotedPosts, 0) = 0 THEN 'Inactive User' ELSE 'Moderate User' END AS UserStatus, LEAD(u.CreationDate) OVER (ORDER BY u.CreationDate) AS NextUserCreationDate, ROW_NUMBER() OVER (ORDER BY COALESCE(ps.TotalScore, 0) DESC, u.Reputation DESC) AS Rank FROM Users u LEFT JOIN UserBadgeStats ubs ON u.Id = ubs.UserId LEFT JOIN PostSummary ps ON u.Id = ps.OwnerUserId LEFT JOIN VoteCounts vcs ON u.Id = vcs.UserId WHERE u.Reputation > 1000 AND (COALESCE(ubs.TotalBadges, 0) > 2 OR COALESCE(ps.TotalPosts, 0) > 5) ORDER BY Rank, u.DisplayName OFFSET 10 ROWS FETCH NEXT 5 ROWS ONLY;"
29093.sql,"Top post tags and users activity","The query retrieves each user's post count, badge counts, post moderation actions, and their association with the top 5 most popular post tags, summarizing user activity and achievements.","WITH TagCounts AS ( SELECT TRIM(UNNEST(string_to_array(SUBSTRING(Tags, 2, LENGTH(Tags) - 2), '><'))) AS tag, COUNT(*) AS total_posts FROM Posts WHERE PostTypeId = 1 GROUP BY tag ), BadgeStats AS ( SELECT U.Id AS user_id, SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS gold_badges, SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS silver_badges, SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS bronze_badges FROM Users U LEFT JOIN Badges B ON U.Id = B.UserId GROUP BY U.Id ), PostActivity AS ( SELECT P.OwnerUserId, COUNT(CASE WHEN PH.PostHistoryTypeId = 10 THEN 1 END) AS close_count, COUNT(CASE WHEN PH.PostHistoryTypeId = 11 THEN 1 END) AS reopen_count, COUNT(CASE WHEN PH.PostHistoryTypeId IN (12, 13) THEN 1 END) AS delete_count FROM Posts P LEFT JOIN PostHistory PH ON P.Id = PH.PostId GROUP BY P.OwnerUserId ) SELECT U.Id AS user_id, U.DisplayName, COALESCE(TC.total_posts, 0) AS post_count, COALESCE(BS.gold_badges, 0) AS gold_badges, COALESCE(BS.silver_badges, 0) AS silver_badges, COALESCE(BS.bronze_badges, 0) AS bronze_badges, COALESCE(PA.close_count, 0) AS close_count, COALESCE(PA.reopen_count, 0) AS reopen_count, COALESCE(PA.delete_count, 0) AS delete_count, STRING_AGG(DISTINCT TC.tag, ', ') AS popular_tags FROM Users U LEFT JOIN TagCounts TC ON TC.tag IN (SELECT tag FROM TagCounts ORDER BY total_posts DESC LIMIT 5) LEFT JOIN BadgeStats BS ON U.Id = BS.user_id LEFT JOIN PostActivity PA ON U.Id = PA.OwnerUserId GROUP BY U.Id, U.DisplayName, TC.total_posts, BS.gold_badges, BS.silver_badges, BS.bronze_badges, PA.close_count, PA.reopen_count, PA.delete_count ORDER BY post_count DESC, gold_badges DESC, silver_badges DESC, bronze_badges DESC;"
12754.sql,"Posts and author and vote counts","This query retrieves all users with their posts along with each post's creation details, scores, view counts, and vote counts, ordered by user reputation and post creation date.","SELECT u.Id AS UserId, u.DisplayName, u.Reputation, p.Id AS PostId, p.Title, p.CreationDate AS PostCreationDate, p.Score AS PostScore, p.ViewCount, COALESCE(vote_counts.UpVotes, 0) AS UpVotes, COALESCE(vote_counts.DownVotes, 0) AS DownVotes, COALESCE(vote_counts.TotalVotes, 0) AS TotalVotes FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN (SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, COUNT(*) AS TotalVotes FROM Votes GROUP BY PostId) AS vote_counts ON p.Id = vote_counts.PostId WHERE p.Id IS NOT NULL ORDER BY u.Reputation DESC, p.CreationDate DESC;"
8708.sql,"User ranking","This query ranks users based on their total posts and views, categorizes them as 'Top Contributor', 'Popular User', or 'Regular User', and lists those with more than 50 posts or 1000 views along with their posting statistics.","WITH UserPostStats AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts, SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativePosts, SUM(p.ViewCount) AS TotalViews FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.Id, u.DisplayName ), TopUsers AS ( SELECT UserId, DisplayName, TotalPosts, TotalQuestions, TotalAnswers, PositivePosts, NegativePosts, TotalViews, RANK() OVER (ORDER BY TotalPosts DESC) AS RankByPosts, RANK() OVER (ORDER BY TotalViews DESC) AS RankByViews FROM UserPostStats ) SELECT tu.DisplayName, tu.TotalPosts, tu.TotalQuestions, tu.TotalAnswers, tu.PositivePosts, tu.NegativePosts, tu.TotalViews, CASE WHEN tu.RankByPosts <= 10 THEN 'Top Contributor' WHEN tu.RankByViews <= 10 THEN 'Popular User' ELSE 'Regular User' END AS UserCategory FROM TopUsers tu WHERE tu.TotalPosts > 50 OR tu.TotalViews > 1000 ORDER BY tu.TotalPosts DESC, tu.TotalViews DESC;"
28524.sql,"Top post tags and authors","This query finds the top tags with more than one post, lists details of the most active users who have answered questions, and shows statistics about posts using those tags, all combined and limited to the top 10 results.","WITH TagCount AS ( SELECT TRIM(tag) AS TagName, COUNT(*) AS PostCount FROM ( SELECT UNNEST(string_to_array(SUBSTRING(Tags FROM 2 FOR LENGTH(Tags) - 2), '><')) AS tag FROM Posts WHERE PostTypeId = 1 ) AS extracted_tags GROUP BY TRIM(tag) ), TopTags AS ( SELECT TagName, PostCount, ROW_NUMBER() OVER (ORDER BY PostCount DESC) AS Rank FROM TagCount WHERE PostCount > 1 ), MostActiveUsers AS ( SELECT Users.DisplayName, Users.Reputation, COUNT(Posts.Id) AS QuestionsAnswered, SUM(COALESCE(Posts.AnswerCount, 0)) AS TotalAnswers, SUM(COALESCE(Posts.Score, 0)) AS TotalScore FROM Users JOIN Posts ON Users.Id = Posts.OwnerUserId WHERE Posts.PostTypeId = 2 GROUP BY Users.DisplayName, Users.Reputation ), TagUsage AS ( SELECT Posts.Id AS PostId, Posts.Title, Posts.CreationDate, UNNEST(string_to_array(SUBSTRING(Posts.Tags FROM 2 FOR LENGTH(Posts.Tags) - 2), '><')) AS TagName, Users.DisplayName AS Owner FROM Posts JOIN Users ON Posts.OwnerUserId = Users.Id WHERE Posts.PostTypeId = 1 ) SELECT TopTags.TagName, TopTags.PostCount, MostActiveUsers.DisplayName, MostActiveUsers.Reputation, MostActiveUsers.QuestionsAnswered, MostActiveUsers.TotalAnswers, MostActiveUsers.TotalScore, COUNT(TagUsage.PostId) AS TagPostCount, MIN(TagUsage.CreationDate) AS EarliestPostDate, MAX(TagUsage.CreationDate) AS LatestPostDate FROM TopTags JOIN TagUsage ON TopTags.TagName = TagUsage.TagName JOIN MostActiveUsers ON TagUsage.Owner = MostActiveUsers.DisplayName GROUP BY TopTags.TagName, TopTags.PostCount, MostActiveUsers.DisplayName, MostActiveUsers.Reputation, MostActiveUsers.QuestionsAnswered, MostActiveUsers.TotalAnswers, MostActiveUsers.TotalScore ORDER BY TopTags.PostCount DESC, MostActiveUsers.TotalScore DESC LIMIT 10;"
