query,semantics,comment,explanation,text
16014.sql,almost,"The query does not group by the user id, there multiple users with the same display name. The post count does not account for duplicates due to the join with votes, a distinct count should be used.","The query retrieves the top 10 users with more than 1000 reputation, showing their display name, number of posts, and total bounty amount from votes type 8, ordered by the number of posts in descending order.","SELECT u.DisplayName, COUNT(p.Id) AS PostCount, SUM(v.BountyAmount) AS TotalBounty FROM Users u JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId = 8 WHERE u.Reputation > 1000 GROUP BY u.DisplayName ORDER BY PostCount DESC LIMIT 10;"
7397.sql,correct,,"The query calculates and compares average views, total comments, total scores, and post counts between the top 10 highest-scoring posts and other posts created in the past year, grouped by post type.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.ViewCount, p.Score, COUNT(c.Id) AS CommentCount, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.ViewCount, p.Score, p.PostTypeId ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.ViewCount, rp.Score, rp.CommentCount, CASE WHEN rp.Rank <= 10 THEN 'Top 10' ELSE 'Other' END AS RankingCategory FROM RankedPosts rp ) SELECT tp.RankingCategory, AVG(tp.ViewCount) AS AvgViewCount, SUM(tp.CommentCount) AS TotalComments, SUM(tp.Score) AS TotalScore, COUNT(tp.PostId) AS TotalPosts FROM TopPosts tp GROUP BY tp.RankingCategory ORDER BY tp.RankingCategory DESC;"
2724.sql,incorrect,"Incorrect join between postid and userid. The comment count does not account for duplicates due to the join with votes, a distinct count should be used.","The query retrieves the top three highest-scored posts per user with above-average reputation, along with their comment count, average bounty, and the users' badge counts and reputation, sorted by reputation and post score, limited to 10 results.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS ScoreRank, COUNT(c.Id) AS CommentCount, AVG(CASE WHEN v.VoteTypeId = 8 THEN v.BountyAmount ELSE NULL END) AS AvgBounty FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.OwnerUserId, p.Title, p.CreationDate, p.Score ), UserStats AS ( SELECT u.Id AS UserId, u.DisplayName, u.Reputation, u.CreationDate, u.LastAccessDate, COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges, COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges, COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName, u.Reputation, u.CreationDate, u.LastAccessDate ) SELECT us.DisplayName, us.Reputation, rp.Title, rp.Score, rp.CreationDate, rp.CommentCount, us.GoldBadges, us.SilverBadges, us.BronzeBadges, rp.AvgBounty FROM RankedPosts rp JOIN UserStats us ON rp.PostId = us.UserId WHERE rp.ScoreRank <= 3 AND us.Reputation > (SELECT AVG(Reputation) FROM Users WHERE Reputation IS NOT NULL) ORDER BY us.Reputation DESC, rp.Score DESC LIMIT 10;"
19677.sql,correct,,"This query retrieves the top 10 highest-scoring questions along with their author's display name, title, creation date, score, and view count.","SELECT u.DisplayName, p.Title, p.CreationDate, p.Score, p.ViewCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.Score DESC LIMIT 10;"
15440.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves the latest 10 questions with their authors, creation dates, titles, and counts of comments, upvotes, and downvotes.","SELECT p.Id AS PostId, p.Title, p.CreationDate, u.DisplayName AS Author, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.CreationDate, u.DisplayName ORDER BY p.CreationDate DESC LIMIT 10;"
9563.sql,correct,,"The query retrieves the top 5 highest-scoring posts by type created within the last year with over 100 views, along with their authors, creation dates, scores, and total upvote and downvote counts.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.Score, p.CreationDate, u.DisplayName AS Author, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) as PostRank FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' AND p.ViewCount > 100 ), AggregatedVotes AS ( SELECT v.PostId, SUM(CASE WHEN vt.Name = 'UpMod' THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN vt.Name = 'DownMod' THEN 1 ELSE 0 END) AS DownVotes FROM Votes v JOIN VoteTypes vt ON v.VoteTypeId = vt.Id GROUP BY v.PostId ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.Score, rp.CreationDate, rp.Author, av.UpVotes, av.DownVotes FROM RankedPosts rp LEFT JOIN AggregatedVotes av ON rp.PostId = av.PostId WHERE rp.PostRank <= 5 ) SELECT tp.Title, tp.Score, tp.CreationDate, tp.Author, COALESCE(tp.UpVotes, 0) AS TotalUpVotes, COALESCE(tp.DownVotes, 0) AS TotalDownVotes FROM TopPosts tp ORDER BY tp.Score DESC, tp.CreationDate DESC;"
26260.sql,correct,,"This query retrieves the top 10 highest-scoring questions with at least one answer, including their details, tags, answer count, upvotes, downvotes, and upvote ratio.","WITH RankedPosts AS ( SELECT p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, ARRAY_AGG(DISTINCT t.TagName) AS Tags, COUNT(DISTINCT a.Id) AS AnswerCount, ROW_NUMBER() OVER (ORDER BY p.Score DESC, p.ViewCount DESC) AS PostRank FROM Posts p LEFT JOIN Posts a ON p.Id = a.ParentId LEFT JOIN UNNEST(string_to_array(SUBSTRING(p.Tags FROM 2 FOR LENGTH(p.Tags) - 2), '><')) AS tag_name ON TRUE JOIN Tags t ON t.TagName = tag_name WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score ), FilteredPosts AS ( SELECT rp.*, (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 2) AS Upvotes, (SELECT COUNT(*) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 3) AS Downvotes FROM RankedPosts rp WHERE rp.AnswerCount > 0 ) SELECT fp.Id, fp.Title, fp.CreationDate, fp.ViewCount, fp.Score, fp.AnswerCount, fp.Tags, fp.Upvotes, fp.Downvotes, ROUND(COALESCE(fp.Upvotes::FLOAT / NULLIF(fp.Upvotes + fp.Downvotes, 0), 0), 2) AS UpvoteRatio FROM FilteredPosts fp WHERE fp.PostRank <= 10 ORDER BY fp.Score DESC, fp.ViewCount DESC;"
15490.sql,correct,,"This query retrieves the 10 most recent questions along with their titles, creation dates, view counts, scores, and the display names of their owners.","SELECT p.Title, p.CreationDate, p.ViewCount, p.Score, u.DisplayName AS OwnerDisplayName FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.CreationDate DESC LIMIT 10;"
18098.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The vote count does not account for duplicates due to the join with comments, a distinct count should be used.","The query retrieves the latest 10 questions with their titles, creation dates, owners' names, and counts of comments and votes.","SELECT p.Id AS PostId, p.Title, p.CreationDate, u.DisplayName AS OwnerDisplayName, COUNT(c.Id) AS CommentCount, COUNT(v.Id) AS VoteCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.CreationDate, u.DisplayName ORDER BY p.CreationDate DESC LIMIT 10;"
12033.sql,correct,,"The query retrieves each user's name along with their total posts, questions, answers, scores, average post views, and badge counts, ordered by highest total score and posts.","WITH UserPostStats AS ( SELECT u.Id AS UserId, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(p.Score) AS TotalScore, AVG(p.ViewCount) AS AvgViewCount FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.Id ), BadgeStats AS ( SELECT b.UserId, COUNT(b.Id) AS TotalBadges, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS TotalGoldBadges, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS TotalSilverBadges, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS TotalBronzeBadges FROM Badges b GROUP BY b.UserId ) SELECT u.DisplayName, ups.TotalPosts, ups.TotalQuestions, ups.TotalAnswers, ups.TotalScore, ups.AvgViewCount, bs.TotalBadges, bs.TotalGoldBadges, bs.TotalSilverBadges, bs.TotalBronzeBadges FROM Users u LEFT JOIN UserPostStats ups ON u.Id = ups.UserId LEFT JOIN BadgeStats bs ON u.Id = bs.UserId ORDER BY ups.TotalScore DESC, ups.TotalPosts DESC;"
25080.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves the top 5 most commented questions per tag, then summarizes and lists the top 10 tags with the highest total upvotes on those questions.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.Tags, p.Body, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY COUNT(c.Id) DESC) AS Rank FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.Tags, p.Body ), FilteredPosts AS ( SELECT PostId, Title, Tags, Body, CommentCount, UpVotes, DownVotes FROM RankedPosts WHERE Rank <= 5 ) SELECT fp.Tags, STRING_AGG(fp.Title, '; ') AS TopQuestions, SUM(fp.CommentCount) AS TotalComments, SUM(fp.UpVotes) AS TotalUpVotes, SUM(fp.DownVotes) AS TotalDownVotes, COUNT(fp.PostId) AS TotalPosts FROM FilteredPosts fp GROUP BY fp.Tags ORDER BY TotalUpVotes DESC LIMIT 10;"
13845.sql,correct,,"This query retrieves the top 100 users ranked by reputation and total post score, along with their number of posts, questions, answers, views, and badge counts.","WITH UserStats AS ( SELECT U.Id AS UserId, U.Reputation, U.Views, COUNT(DISTINCT P.Id) AS PostCount, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount, SUM(CASE WHEN P.PostTypeId IN (1, 2) THEN P.Score ELSE 0 END) AS TotalScore FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId GROUP BY U.Id, U.Reputation, U.Views ), TopBadgeUsers AS ( SELECT B.UserId, COUNT(B.Id) AS BadgeCount FROM Badges B GROUP BY B.UserId ) SELECT U.UserId, U.Reputation, U.Views, U.PostCount, U.QuestionCount, U.AnswerCount, U.TotalScore, COALESCE(B.BadgeCount, 0) AS BadgeCount FROM UserStats U LEFT JOIN TopBadgeUsers B ON U.UserId = B.UserId ORDER BY U.Reputation DESC, U.TotalScore DESC LIMIT 100;"
6566.sql,almost,"The post count does not account for duplicates due to the join with votes and badges, a distinct count should be used. The up other counts also do not account for duplicates. Rank is incorrect due to this mistake.","The query retrieves the top 10 users ranked by their total number of posts, along with counts of their questions, answers, wikis, upvotes, downvotes, and badges.","WITH UserActivity AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(CASE WHEN p.PostTypeId = 3 THEN 1 ELSE 0 END) AS TotalWikis, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpvotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownvotes, SUM(CASE WHEN b.Date IS NOT NULL THEN 1 ELSE 0 END) AS TotalBadges FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Votes v ON p.Id = v.PostId AND v.UserId = u.Id LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName ), TopUsers AS ( SELECT UserId, DisplayName, TotalPosts, TotalQuestions, TotalAnswers, TotalWikis, TotalUpvotes, TotalDownvotes, TotalBadges, RANK() OVER (ORDER BY TotalPosts DESC) AS Rank FROM UserActivity ) SELECT t.UserId, t.DisplayName, t.TotalPosts, t.TotalQuestions, t.TotalAnswers, t.TotalWikis, t.TotalUpvotes, t.TotalDownvotes, t.TotalBadges, t.Rank FROM TopUsers t WHERE t.Rank <= 10 ORDER BY t.Rank;"
28677.sql,incorrect,"Tags are extracted incorrectly.","This query retrieves the top 50 questions ranked by comment and vote counts, along with their tags, associated popular tags, recent editors, and last edit dates.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.Body, COUNT(c.Id) AS CommentCount, COUNT(DISTINCT v.UserId) AS VoteCount, ARRAY_AGG(DISTINCT t.TagName) AS Tags, ROW_NUMBER() OVER (ORDER BY COUNT(c.Id) DESC, COUNT(DISTINCT v.UserId) DESC) AS Rank FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId AND v.VoteTypeId IN (2, 3) LEFT JOIN unnest(string_to_array(p.Tags, ',')) AS tag ON TRUE LEFT JOIN Tags t ON TRIM(tag) = t.TagName WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.Body ), PopularTags AS ( SELECT t.TagName, COUNT(DISTINCT p.Id) AS PostCount FROM Posts p JOIN unnest(string_to_array(p.Tags, ',')) AS tag ON TRUE JOIN Tags t ON TRIM(tag) = t.TagName WHERE p.PostTypeId = 1 GROUP BY t.TagName HAVING COUNT(DISTINCT p.Id) > 10 ), RecentPostHistory AS ( SELECT ph.PostId, ARRAY_AGG(DISTINCT ph.UserDisplayName) AS Editors, MAX(ph.CreationDate) AS LastEditDate FROM PostHistory ph GROUP BY ph.PostId ) SELECT rp.PostId, rp.Title, rp.Body, rp.CommentCount, rp.VoteCount, rp.Tags, pt.TagName AS PopularTag, rph.Editors, rph.LastEditDate, rp.Rank FROM RankedPosts rp LEFT JOIN PopularTags pt ON pt.TagName = ANY(rp.Tags) LEFT JOIN RecentPostHistory rph ON rph.PostId = rp.PostId WHERE rp.Rank <= 50 ORDER BY rp.Rank;"
20832.sql,incorrect,"Incorrect join between postid and userid.","The query retrieves active users with more than five answered questions and at least one gold badge, summarizing their post statistics, top trending post details, close vote reasons, and related post links within the past year.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.ViewCount, p.Score, p.CreationDate, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.ViewCount DESC, p.Score DESC) AS Rank, COALESCE(p.AcceptedAnswerId, -1) AS AnswerStatus FROM Posts p WHERE p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year' AND p.ViewCount IS NOT NULL ), PostStatistics AS ( SELECT u.Id AS UserId, SUM(CASE WHEN p.AnswerCount > 0 THEN 1 ELSE 0 END) AS TotalQuestionsAnswered, COUNT(DISTINCT p.Id) AS TotalPosts, AVG(p.Score) AS AverageScore, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id ), ClosedPostReasons AS ( SELECT ph.PostId, COUNT(*) AS CloseVoteCount, STRING_AGG(CASE WHEN ph.PostHistoryTypeId = 10 THEN cr.Name END, ', ') AS CloseReasons FROM PostHistory ph LEFT JOIN CloseReasonTypes cr ON cr.Id::text = ph.Comment GROUP BY ph.PostId ), UserPostLinkages AS ( SELECT pl.PostId, pl.RelatedPostId, COUNT(pl.Id) AS LinkCount FROM PostLinks pl JOIN Posts p ON pl.PostId = p.Id WHERE p.CreationDate < cast('2024-10-01' as date) - INTERVAL '6 months' GROUP BY pl.PostId, pl.RelatedPostId ), FinalStats AS ( SELECT ps.UserId, ps.TotalQuestionsAnswered, ps.TotalPosts, ps.AverageScore, ps.GoldBadges, ps.SilverBadges, ps.BronzeBadges, COALESCE(rp.PostId, 0) AS TopPostId, COALESCE(rp.Title, 'No Trending Post') AS TopPostTitle, COALESCE(rp.ViewCount, 0) AS TopPostViewCount, COALESCE(rp.Score, 0) AS TopPostScore, COALESCE(cpr.CloseVoteCount, 0) AS TotalCloseVotes, COALESCE(cpr.CloseReasons, 'No Close Reasons') AS CloseReasons, COALESCE(pl.LinkCount, 0) AS TotalRelatedLinks FROM PostStatistics ps LEFT JOIN RankedPosts rp ON ps.UserId = rp.PostId LEFT JOIN ClosedPostReasons cpr ON rp.PostId = cpr.PostId LEFT JOIN UserPostLinkages pl ON ps.UserId = pl.PostId ) SELECT *, CASE WHEN TotalPosts = 0 THEN 'No activity' ELSE 'Active User' END AS UserActivityStatus FROM FinalStats WHERE TotalQuestionsAnswered > 5 AND GoldBadges > 0 ORDER BY TotalPosts DESC, AverageScore DESC;"
12771.sql,correct,,"The query retrieves each post type's name along with the total number of posts, average score, average view count, and number of distinct active users who created posts, sorted by the number of posts in descending order.","SELECT pt.Name AS PostType, COUNT(p.Id) AS PostCount, AVG(p.Score) AS AverageScore, AVG(p.ViewCount) AS AverageViewCount, COUNT(DISTINCT p.OwnerUserId) AS ActiveUsers FROM Posts p JOIN PostTypes pt ON p.PostTypeId = pt.Id GROUP BY pt.Name ORDER BY PostCount DESC;"
21134.sql,correct,,"The query lists the top 10 most-commented posts from the past year along with their upvotes and downvotes, showing details of users with over 1000 reputation and badges in the last 6 months who own those posts, ordered by user reputation.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, p.ViewCount, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS ScoreRank, COUNT(c.Id) AS CommentCount FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount ), PostVoteSummary AS ( SELECT p.Id AS PostId, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, COALESCE(SUM(CASE WHEN v.VoteTypeId = 1 THEN 1 ELSE 0 END), 0) AS AcceptedVotes FROM Posts p LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id ), UserBadgesCount AS ( SELECT b.UserId, COUNT(b.Id) AS BadgeCount, MAX(b.Class) AS MaxBadgeClass FROM Badges b WHERE b.Date >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '6 months' GROUP BY b.UserId ), FilteredUsers AS ( SELECT u.Id AS UserId, u.DisplayName, u.Reputation, COALESCE(ub.BadgeCount, 0) AS BadgeCount, CASE WHEN ub.MaxBadgeClass = 1 THEN 'Gold' WHEN ub.MaxBadgeClass = 2 THEN 'Silver' WHEN ub.MaxBadgeClass = 3 THEN 'Bronze' ELSE 'No Badge' END AS MaxBadgeCategory FROM Users u LEFT JOIN UserBadgesCount ub ON u.Id = ub.UserId WHERE u.Reputation > 1000 AND u.Location IS NOT NULL ), MostCommentedPosts AS ( SELECT rp.PostId, rp.Title, rp.CreationDate, rp.CommentCount, pv.UpVotes, pv.DownVotes, RANK() OVER (ORDER BY rp.CommentCount DESC) AS CommentRank FROM RankedPosts rp JOIN PostVoteSummary pv ON rp.PostId = pv.PostId WHERE rp.CommentCount > 0 ) SELECT f.DisplayName, f.Reputation, f.MaxBadgeCategory, mcp.Title AS MostCommentedPostTitle, mcp.CommentCount AS MostComments, mcp.UpVotes, mcp.DownVotes FROM FilteredUsers f LEFT JOIN MostCommentedPosts mcp ON f.UserId = ( SELECT p.OwnerUserId FROM Posts p WHERE p.Id = mcp.PostId LIMIT 1 ) WHERE mcp.CommentRank <= 10 ORDER BY f.Reputation DESC;"
4498.sql,almost,"UpVotes and DownVotes are not associated with users, the up vote, down vote, and net vote counts are always zero.","The query retrieves the top 10 posts with positive scores, including post details and the net voting statistics of their owners, ordered by the owners' net votes and post creation date.","WITH UserVoteCounts AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpVoteCount, COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownVoteCount, SUM(CASE WHEN V.VoteTypeId IN (2, 3) THEN CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE -1 END ELSE 0 END) AS NetVotes FROM Users U LEFT JOIN Votes V ON U.Id = V.UserId GROUP BY U.Id, U.DisplayName ), PostAnalytics AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, COUNT(C) AS CommentCount, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE -1 END) AS Score, ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS UserPostRank, P.OwnerUserId FROM Posts P LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY P.Id, P.Title, P.CreationDate, P.OwnerUserId ), FinalResults AS ( SELECT UA.UserId, UA.DisplayName, PA.PostId, PA.Title, PA.CreationDate, PA.CommentCount, PA.UpVotes, PA.DownVotes, PA.Score, UA.NetVotes FROM UserVoteCounts UA JOIN PostAnalytics PA ON UA.UserId = PA.OwnerUserId WHERE UA.NetVotes IS NOT NULL ) SELECT UserId, DisplayName, PostId, Title, CreationDate, CommentCount, UpVotes, DownVotes, Score, NetVotes FROM FinalResults WHERE Score > 0 ORDER BY NetVotes DESC, CreationDate ASC LIMIT 10;"
17894.sql,correct,,"This query retrieves the top 10 most recent questions with their author's name, title, creation date, score, and the count of comments on each question.","SELECT U.DisplayName AS UserDisplayName, P.Title AS PostTitle, P.CreationDate AS PostCreationDate, P.Score AS PostScore, COUNT(C.Id) AS CommentCount FROM Users U JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.PostTypeId = 1 GROUP BY U.DisplayName, P.Title, P.CreationDate, P.Score ORDER BY P.CreationDate DESC LIMIT 10;"
14549.sql,correct,,"The query retrieves the top 10 posts with the most revisions, showing each post's ID, number of revisions, first and last revision dates, the user who made the last edit, and various post statistics like title, score, views, answers, and comments.","SELECT PH.PostId, COUNT(PH.Id) AS RevisionCount, MIN(PH.CreationDate) AS FirstRevisionDate, MAX(PH.CreationDate) AS LastRevisionDate, U.DisplayName AS LastEditedBy, P.Title, P.Score, P.ViewCount, P.AnswerCount, P.CommentCount FROM PostHistory PH JOIN Posts P ON PH.PostId = P.Id LEFT JOIN Users U ON PH.UserId = U.Id GROUP BY PH.PostId, U.DisplayName, P.Title, P.Score, P.ViewCount, P.AnswerCount, P.CommentCount ORDER BY RevisionCount DESC LIMIT 10;"
17626.sql,correct,,"This query retrieves the 10 most recent questions along with their details, owner name, and the number of comments each has.","SELECT P.Id AS PostId, P.Title, P.CreationDate, U.DisplayName AS OwnerDisplayName, P.Score, P.ViewCount, COUNT(C.Id) AS CommentCount FROM Posts P JOIN Users U ON P.OwnerUserId = U.Id LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.PostTypeId = 1 GROUP BY P.Id, P.Title, P.CreationDate, U.DisplayName, P.Score, P.ViewCount ORDER BY P.CreationDate DESC LIMIT 10;"
6625.sql,correct,,"This query retrieves each user's lowest-ranked (worst scoring) question created since January 1, 2022, showing its details sorted by score and views.","WITH RankedPosts AS ( SELECT p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName AS OwnerDisplayName, DENSE_RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS PostRank FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 AND p.CreationDate >= '2022-01-01' ), MaxRank AS ( SELECT OwnerDisplayName, MAX(PostRank) AS MaxPostRank FROM RankedPosts GROUP BY OwnerDisplayName ) SELECT rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, rp.OwnerDisplayName FROM RankedPosts rp JOIN MaxRank mr ON rp.OwnerDisplayName = mr.OwnerDisplayName WHERE rp.PostRank = mr.MaxPostRank ORDER BY rp.Score DESC, rp.ViewCount DESC;"
25959.sql,almost,"The up and down vote count does not account for duplicates due to the self-join. Cross-join with top tags.","The query retrieves the top 20 users by reputation along with their activity stats, badge counts, and details of the top 10 most popular tags with questions, answers, and post counts.","WITH UserReputation AS ( SELECT U.Id AS UserId, U.DisplayName, U.Reputation, COUNT(DISTINCT P.Id) AS QuestionsAsked, COUNT(DISTINCT A.Id) AS AnswersProvided, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvotesReceived, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvotesReceived FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId AND P.PostTypeId = 1 LEFT JOIN Posts A ON A.ParentId = P.Id AND A.PostTypeId = 2 LEFT JOIN Votes V ON V.UserId = U.Id AND V.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = U.Id) GROUP BY U.Id, U.DisplayName, U.Reputation ), TopTags AS ( SELECT T.TagName, COUNT(P.Id) AS PostsCount, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionsCount, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswersCount FROM Tags T LEFT JOIN Posts P ON P.Tags LIKE CONCAT('%', T.TagName, '%') GROUP BY T.TagName ORDER BY PostsCount DESC LIMIT 10 ), UserBadgeCount AS ( SELECT U.Id AS UserId, COUNT(B.Id) AS BadgeCount FROM Users U LEFT JOIN Badges B ON U.Id = B.UserId GROUP BY U.Id ) SELECT UR.DisplayName, UR.Reputation, UR.QuestionsAsked, UR.AnswersProvided, UR.UpvotesReceived, UR.DownvotesReceived, UBC.BadgeCount, TT.TagName, TT.PostsCount, TT.QuestionsCount, TT.AnswersCount FROM UserReputation UR JOIN UserBadgeCount UBC ON UR.UserId = UBC.UserId JOIN TopTags TT ON TT.QuestionsCount > 0 ORDER BY UR.Reputation DESC, UBC.BadgeCount DESC FETCH FIRST 20 ROWS ONLY;"
16141.sql,correct,,"This query lists the top 10 users by total posts, showing each user's name along with counts of their questions, answers, and tag wiki edits.","SELECT u.DisplayName, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(CASE WHEN p.PostTypeId IN (4, 5) THEN 1 ELSE 0 END) AS TotalTagWikis FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.DisplayName ORDER BY TotalPosts DESC LIMIT 10;"
23892.sql,incorrect,"Incorrect join between acceptedanswerid and userid","This query lists the top 3 most commented posts by type from the past year with more than 10 net upvotes, including their popular tags, accepted answer authors' badge info, and recent closure details if any.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.PostTypeId, p.AcceptedAnswerId, COUNT(CASE WHEN c.Id IS NOT NULL THEN 1 END) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY COUNT(c.Id) DESC) AS RN FROM Posts p LEFT JOIN Comments c ON c.PostId = p.Id LEFT JOIN Votes v ON v.PostId = p.Id WHERE p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year') GROUP BY p.Id, p.Title, p.CreationDate, p.PostTypeId, p.AcceptedAnswerId ), PopularTags AS ( SELECT UNNEST(string_to_array(Tags, '><')) AS TagName, COUNT(*) AS TagCount FROM Posts WHERE PostTypeId = 1 GROUP BY TagName HAVING COUNT(*) > 5 ), UserBadges AS ( SELECT u.Id AS UserId, COUNT(b.Id) AS TotalBadges, MAX(b.Class) AS MaxBadgeClass FROM Users u LEFT JOIN Badges b ON b.UserId = u.Id GROUP BY u.Id ), ClosedPosts AS ( SELECT p.Id AS PostId, p.Title, ph.CreationDate, pt.Name AS PostHistoryTypeName FROM Posts p JOIN PostHistory ph ON p.Id = ph.PostId JOIN PostHistoryTypes pt ON ph.PostHistoryTypeId = pt.Id WHERE ph.PostHistoryTypeId = 10 AND ph.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 month') ) SELECT rp.PostId, rp.Title, rp.CreationDate, rt.TagName AS PopularTag, ub.UserId, ub.TotalBadges, ub.MaxBadgeClass, cp.PostId AS ClosedPostId, cp.Title AS ClosedPostTitle, cp.CreationDate AS ClosedPostDate, cp.PostHistoryTypeName FROM RankedPosts rp LEFT JOIN PopularTags rt ON rp.Title ILIKE '%' || rt.TagName || '%' LEFT JOIN UserBadges ub ON rp.AcceptedAnswerId = ub.UserId LEFT JOIN ClosedPosts cp ON rp.PostId = cp.PostId WHERE rp.RN <= 3 AND (rp.UpVotes - rp.DownVotes) > 10 ORDER BY rp.CreationDate DESC, rp.UpVotes DESC NULLS LAST;"
19393.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query retrieves the latest 10 questions along with their author's name, title, creation date, score, number of comments, and counts of upvotes and downvotes.","SELECT u.DisplayName, p.Title, p.CreationDate, p.Score, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY u.DisplayName, p.Title, p.CreationDate, p.Score ORDER BY p.CreationDate DESC LIMIT 10;"
19417.sql,correct,,"This query retrieves the 10 most recent questions along with their titles, authors, creation dates, scores, and view counts.","SELECT p.Id AS PostId, p.Title, u.DisplayName AS Author, p.CreationDate, p.Score, p.ViewCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.CreationDate DESC LIMIT 10;"
11238.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query selects the top 100 users ranked by their total number of posts along with counts of their questions, answers, comments, votes, and badges.","WITH UserActivity AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(DISTINCT P.Id) AS TotalPosts, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, COUNT(C) AS TotalComments, SUM(CASE WHEN V.CreationDate IS NOT NULL THEN 1 ELSE 0 END) AS TotalVotes, SUM(CASE WHEN B.Id IS NOT NULL THEN 1 ELSE 0 END) AS TotalBadges FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Votes V ON P.Id = V.PostId LEFT JOIN Badges B ON U.Id = B.UserId GROUP BY U.Id, U.DisplayName ) SELECT UA.UserId, UA.DisplayName, UA.TotalPosts, UA.TotalQuestions, UA.TotalAnswers, UA.TotalComments, UA.TotalVotes, UA.TotalBadges, COALESCE(RANK() OVER (ORDER BY UA.TotalPosts DESC), 0) AS UserRank FROM UserActivity UA ORDER BY UA.TotalPosts DESC FETCH FIRST 100 ROWS ONLY;"
24521.sql,incorrect,"The userbadges table is joined using the location and not the id.","The query retrieves a paginated list of recent top-scoring posts by type from the past year, along with their comment counts and summaries, the badge information of users from the same locations as the post owners, showing only the top 5 posts per type or posts with badges, ordered by score and creation date.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, p.ViewCount, ROW_NUMBER() OVER (PARTITION BY pt.Name ORDER BY p.CreationDate DESC) AS Rank, COALESCE(NULLIF(u.Location, ''), 'Unknown Location') AS UserLocation FROM Posts p JOIN PostTypes pt ON p.PostTypeId = pt.Id LEFT JOIN Users u ON p.OwnerUserId = u.Id WHERE p.CreationDate >= CURRENT_DATE - INTERVAL '1 year' AND p.Score > (SELECT AVG(Score) FROM Posts) ), PostComments AS ( SELECT c.PostId, COUNT(*) AS CommentCount, STRING_AGG(c.Text, '; ' ORDER BY c.CreationDate) AS CommentsSummary FROM Comments c GROUP BY c.PostId ), UserBadges AS ( SELECT b.UserId, COUNT(*) AS BadgeCount, STRING_AGG(b.Name, ', ') AS Badges FROM Badges b WHERE b.Class = 1 GROUP BY b.UserId ) SELECT rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, COALESCE(pc.CommentCount, 0) AS NumberOfComments, COALESCE(pc.CommentsSummary, 'No comments') AS CommentSnippet, ub.BadgeCount, ub.Badges, rp.UserLocation FROM RankedPosts rp LEFT JOIN PostComments pc ON rp.PostId = pc.PostId LEFT JOIN UserBadges ub ON rp.UserLocation IS NOT NULL AND rp.UserLocation <> 'Unknown Location' AND EXISTS (SELECT 1 FROM Users u WHERE u.Id = ub.UserId AND COALESCE(u.Location, '') = rp.UserLocation) WHERE (rp.Rank <= 5 OR ub.BadgeCount > 0) ORDER BY rp.Score DESC, rp.CreationDate ASC OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;"
6102.sql,almost,"The badge count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with badges.","The query calculates various statistics for each user, ranks them by reputation, and retrieves details for the top 10 users by reputation.","WITH UserStats AS ( SELECT U.Id AS UserId, U.DisplayName, U.Reputation, COUNT(DISTINCT P.Id) AS PostCount, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, COUNT(B.Id) AS BadgeCount FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Votes V ON P.Id = V.PostId LEFT JOIN Badges B ON U.Id = B.UserId GROUP BY U.Id, U.DisplayName, U.Reputation ), TopUsers AS ( SELECT UserId, DisplayName, Reputation, PostCount, QuestionCount, AnswerCount, UpVotes, DownVotes, BadgeCount, RANK() OVER (ORDER BY Reputation DESC) AS ReputationRank FROM UserStats ) SELECT UserId, DisplayName, Reputation, PostCount, QuestionCount, AnswerCount, UpVotes, DownVotes, BadgeCount, ReputationRank FROM TopUsers WHERE ReputationRank <= 10 ORDER BY Reputation DESC;"
19000.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query retrieves the latest 10 posts with their details, including the author's name, the number of comments, and counts of upvotes and downvotes.","SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, u.DisplayName AS OwnerDisplayName, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.Title, p.CreationDate, p.Score, u.DisplayName ORDER BY p.CreationDate DESC FETCH FIRST 10 ROWS ONLY;"
16832.sql,correct,,"The query retrieves the top 10 highest-reputation users' questions along with their titles, creation dates, and the count of comments on each question.","SELECT u.DisplayName, u.Reputation, p.Title, p.CreationDate, COUNT(c.Id) AS CommentCount FROM Users u JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.PostTypeId = 1 GROUP BY u.DisplayName, u.Reputation, p.Title, p.CreationDate ORDER BY u.Reputation DESC, p.CreationDate DESC LIMIT 10;"
11649.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query retrieves the 100 most recent posts from the past year along with their details, owner information, and counts of comments, votes, upvotes, and downvotes.","SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName AS OwnerDisplayName, u.Reputation AS OwnerReputation, COUNT(c.Id) AS CommentCount, COUNT(v.Id) AS VoteCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes FROM Posts p LEFT JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName, u.Reputation ORDER BY p.CreationDate DESC LIMIT 100;"
18663.sql,correct,,"This query retrieves the 10 most recent questions with their titles, authors, creation dates, and the number of comments each has.","SELECT P.Id AS PostID, P.Title, P.CreationDate, U.DisplayName AS Author, COUNT(C.Id) AS CommentCount FROM Posts P JOIN Users U ON P.OwnerUserId = U.Id LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.PostTypeId = 1 GROUP BY P.Id, P.Title, P.CreationDate, U.DisplayName ORDER BY P.CreationDate DESC LIMIT 10;"
8496.sql,incorrect,"The in statement is wrong, the select does not use the post id from the inner post table.","This query retrieves the top 10 highest-scored recent questions and answers from the past year along with their owners, post types, close reasons, and the most popular tags associated with those posts.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, p.ViewCount, u.DisplayName AS OwnerDisplayName, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId IN (1, 2) AND p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' ), PopularTags AS ( SELECT t.TagName, COUNT(DISTINCT p.Id) AS PostCount FROM Tags t JOIN Posts p ON p.Tags LIKE CONCAT('%', t.TagName, '%') GROUP BY t.TagName ORDER BY PostCount DESC LIMIT 10 ), PostDetails AS ( SELECT rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, rp.OwnerDisplayName, pt.Name AS PostType, COALESCE(cht.Name, 'No Close Reason') AS CloseReason FROM RankedPosts rp LEFT JOIN CloseReasonTypes cht ON EXISTS ( SELECT 1 FROM PostHistory ph WHERE ph.PostId = rp.PostId AND ph.PostHistoryTypeId = 10 ) JOIN PostTypes pt ON pt.Id = (SELECT PostTypeId FROM Posts WHERE Id = rp.PostId) WHERE rp.Rank <= 10 ) SELECT pd.PostId, pd.Title, pd.CreationDate, pd.Score, pd.ViewCount, pd.OwnerDisplayName, pd.PostType, pt.TagName AS MostPopularTag FROM PostDetails pd JOIN PopularTags pt ON pd.PostId IN (SELECT PostId FROM Posts WHERE Tags LIKE CONCAT('%', pt.TagName, '%')) ORDER BY pd.Score DESC, pd.ViewCount DESC;"
14106.sql,incorrect,"Incorrect join between postid and userid. The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves combined statistics for the top 100 posts and users, including post comments, votes, scores, user badges, and votes, ordered by the most recent post activity and highest average score.","WITH PostStatistics AS ( SELECT p.Id AS PostId, p.Title, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount, AVG(p.Score) AS AverageScore, MAX(p.CreationDate) AS LastActivityDate FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.Title ), UserStatistics AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(b.Id) AS BadgeCount, SUM(u.UpVotes) AS TotalUpVotes, SUM(u.DownVotes) AS TotalDownVotes FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName ) SELECT ps.PostId, ps.Title, ps.CommentCount, ps.UpVoteCount, ps.DownVoteCount, ps.AverageScore, ps.LastActivityDate, us.UserId, us.DisplayName, us.BadgeCount, us.TotalUpVotes, us.TotalDownVotes FROM PostStatistics ps JOIN UserStatistics us ON ps.PostId = us.UserId ORDER BY ps.LastActivityDate DESC, ps.AverageScore DESC LIMIT 100;"
11112.sql,incorrect,"Incorrect join between postid and userid.","This query retrieves the top 100 users by total post score along with detailed statistics about their posts, including comments, votes, badges, and last activity dates.","WITH PostStats AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT v.Id) AS VoteCount, COUNT(DISTINCT b.Id) AS BadgeCount, MAX(p.LastActivityDate) AS LastActivityDate FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId LEFT JOIN Badges b ON p.OwnerUserId = b.UserId GROUP BY p.Id, p.Title, p.CreationDate ), UserStats AS ( SELECT u.Id AS UserId, u.DisplayName, SUM(p.ViewCount) AS TotalViews, SUM(v.BountyAmount) AS TotalBounties, SUM(p.Score) AS TotalScore, COUNT(DISTINCT p.Id) AS PostCount FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY u.Id, u.DisplayName ) SELECT u.UserId, u.DisplayName, u.TotalViews, u.TotalBounties, u.TotalScore, u.PostCount, ps.PostId, ps.Title AS PostTitle, ps.CreationDate AS PostCreationDate, ps.CommentCount, ps.VoteCount, ps.BadgeCount, ps.LastActivityDate FROM UserStats u JOIN PostStats ps ON u.UserId = ps.PostId ORDER BY u.TotalScore DESC, ps.LastActivityDate DESC LIMIT 100;"
10183.sql,correct,,"This query retrieves detailed statistics about users and their posts, combining user reputation, post and comment counts, vote counts, and post details, then lists all posts along with their owners, ordered by user reputation and post view count.","WITH UserStats AS ( SELECT U.Id AS UserId, U.DisplayName, U.Reputation, COUNT(DISTINCT P.Id) AS PostCount, COUNT(DISTINCT C.Id) AS CommentCount, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY U.Id, U.DisplayName, U.Reputation ), PostStats AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.OwnerUserId, P.ViewCount, P.Score, P.AnswerCount, P.CommentCount, CASE WHEN P.PostTypeId = 1 THEN 'Question' WHEN P.PostTypeId = 2 THEN 'Answer' ELSE 'Other' END AS PostType, COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpVotes, COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownVotes FROM Posts P LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY P.Id, P.Title, P.CreationDate, P.OwnerUserId, P.ViewCount, P.Score, P.AnswerCount, P.CommentCount, P.PostTypeId ) SELECT U.DisplayName, U.Reputation, U.PostCount, U.CommentCount, U.UpVoteCount, U.DownVoteCount, P.PostId, P.Title, P.CreationDate, P.ViewCount, P.Score, P.AnswerCount, P.CommentCount, P.PostType, P.UpVotes, P.DownVotes FROM UserStats U JOIN PostStats P ON U.UserId = P.OwnerUserId ORDER BY U.Reputation DESC, P.ViewCount DESC;"
15552.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query retrieves all questions with their titles, creation dates, owner names, and counts of comments and votes, ordered by newest first.","SELECT p.Id AS PostId, p.Title, p.CreationDate, u.DisplayName AS OwnerDisplayName, COUNT(c.Id) AS CommentCount, COUNT(v.Id) AS VoteCount FROM Posts p LEFT JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.CreationDate, u.DisplayName ORDER BY p.CreationDate DESC;"
12508.sql,correct,,"This query retrieves the number, average score, and type name of posts grouped by their post type, sorted by the total number of posts in descending order.","SELECT pt.Name AS PostType, COUNT(p.Id) AS TotalPosts, AVG(p.Score) AS AverageScore FROM Posts p JOIN PostTypes pt ON p.PostTypeId = pt.Id GROUP BY pt.Name ORDER BY TotalPosts DESC;"
2228.sql,correct,,"The query retrieves users with over 1000 reputation, showing their top 5 most recent posts from the past year along with comment counts and badges, or indicates if they have no recent posts, ordered by reputation and name.","WITH RankedPosts AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.Score, COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount, ROW_NUMBER() OVER (PARTITION BY P.OwnerUserId ORDER BY P.CreationDate DESC) AS PostRank, P.OwnerUserId FROM Posts P LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.CreationDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY P.Id, P.Title, P.CreationDate, P.Score, P.OwnerUserId ), UserBadges AS ( SELECT U.Id AS UserId, COUNT(CASE WHEN B.Class = 1 THEN 1 END) AS GoldCount, COUNT(CASE WHEN B.Class = 2 THEN 1 END) AS SilverCount, COUNT(CASE WHEN B.Class = 3 THEN 1 END) AS BronzeCount FROM Users U LEFT JOIN Badges B ON U.Id = B.UserId GROUP BY U.Id ), TopUsers AS ( SELECT U.Id, U.DisplayName, U.Reputation, UBad.GoldCount, UBad.SilverCount, UBad.BronzeCount, R.PostRank, R.PostId FROM Users U JOIN UserBadges UBad ON U.Id = UBad.UserId LEFT JOIN RankedPosts R ON U.Id = R.OwnerUserId WHERE U.Reputation > 1000 ) SELECT U.DisplayName, U.Reputation, COALESCE(R.PostId, -1) AS MostRecentPost, COALESCE(R.Title, 'No Posts') AS LatestPostTitle, COALESCE(R.CommentCount, 0) AS CommentsOnLatestPost, (SELECT STRING_AGG(CASE WHEN B.Class = 1 THEN 'Gold' WHEN B.Class = 2 THEN 'Silver' WHEN B.Class = 3 THEN 'Bronze' END, ', ') FROM Badges B WHERE B.UserId = U.Id) AS BadgeList FROM Users U LEFT JOIN TopUsers T ON U.Id = T.Id LEFT JOIN RankedPosts R ON T.PostId = R.PostId WHERE T.PostRank IS NULL OR T.PostRank <= 5 ORDER BY U.Reputation DESC, U.DisplayName ASC;"
5197.sql,almost,"The comment count does not account for duplicates due to the join with post, a distinct count should be used. The answer count does not account for duplicates due to the join with comments.","The query retrieves the top 100 highly reputed users (with reputation over 1000) and details of recent posts (from the past year) that they have accepted answers for, including post titles, views, scores, comment and answer counts, along with the users' rank by reputation.","WITH UserStats AS ( SELECT U.Id AS UserId, U.DisplayName, U.Reputation, U.CreationDate, COUNT(DISTINCT B.Id) AS BadgeCount, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes FROM Users U LEFT JOIN Badges B ON U.Id = B.UserId LEFT JOIN Votes V ON U.Id = V.UserId GROUP BY U.Id, U.DisplayName, U.Reputation, U.CreationDate ), PostAnalysis AS ( SELECT P.Id AS PostId, P.Title, P.ViewCount, P.Score, P.CreationDate, P.AcceptedAnswerId, COUNT(C.Id) AS CommentCount, COUNT(A.Id) AS AnswerCount FROM Posts P LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Posts A ON P.Id = A.ParentId WHERE P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' GROUP BY P.Id, P.Title, P.ViewCount, P.Score, P.CreationDate, P.AcceptedAnswerId ), TopUsers AS ( SELECT U.UserId, U.DisplayName, U.Reputation, ROW_NUMBER() OVER (ORDER BY U.Reputation DESC) AS Rank FROM UserStats U WHERE U.Reputation > 1000 ) SELECT U.DisplayName AS UserName, U.Reputation AS UserReputation, P.Title AS PostTitle, P.ViewCount AS PostViews, P.Score AS PostScore, P.CommentCount, P.AnswerCount, R.Rank FROM PostAnalysis P JOIN Users U ON P.AcceptedAnswerId IN (SELECT Id FROM Posts WHERE OwnerUserId = U.Id) JOIN TopUsers R ON U.Id = R.UserId ORDER BY R.Rank, P.Score DESC LIMIT 100;"
5046.sql,correct,,"The query retrieves the top 10 highest-scoring posts of each post type created in the last 30 days, including their details, owner names, comment counts, and associated tags, ordered by score and view count.","WITH RankedPosts AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.Score, P.ViewCount, U.DisplayName AS Owner, COUNT(CASE WHEN C.PostId IS NOT NULL THEN 1 END) AS CommentCount, RANK() OVER (PARTITION BY P.PostTypeId ORDER BY P.Score DESC) AS RankByScore FROM Posts P LEFT JOIN Users U ON P.OwnerUserId = U.Id LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' GROUP BY P.Id, P.Title, P.CreationDate, P.Score, P.ViewCount, U.DisplayName, P.PostTypeId ), TopPosts AS ( SELECT RP.PostId, RP.Title, RP.CreationDate, RP.Score, RP.ViewCount, RP.Owner, RP.CommentCount FROM RankedPosts RP WHERE RP.RankByScore <= 10 ) SELECT TP.PostId, TP.Title, TP.CreationDate, TP.Score, TP.ViewCount, TP.Owner, TP.CommentCount, (SELECT STRING_AGG(T.TagName, ', ') FROM Tags T JOIN LATERAL unnest(string_to_array(substring(P.Tags, 2, length(P.Tags)-2), '><')) AS tag ON T.TagName = tag WHERE P.Id = TP.PostId) AS TagsList FROM TopPosts TP LEFT JOIN Posts P ON TP.PostId = P.Id ORDER BY TP.Score DESC, TP.ViewCount DESC;"
17843.sql,correct,,This query retrieves the top 10 highest-scoring posts along with their authors' names and the number of comments each post has.,"SELECT p.Id AS PostId, p.Title, p.Score, p.CreationDate, u.DisplayName AS OwnerDisplayName, COUNT(c.Id) AS CommentCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.Score, p.CreationDate, u.DisplayName ORDER BY p.Score DESC LIMIT 10;"
10888.sql,correct,,"The query calculates and lists statistics such as total posts, unique users, average user reputation, total views, and total score for each post type, ordered by the number of posts in descending order.","WITH PostStats AS ( SELECT pt.Name AS PostType, COUNT(p.Id) AS TotalPosts, COUNT(DISTINCT p.OwnerUserId) AS UniqueUsers, AVG(u.Reputation) AS AverageUserReputation, SUM(p.ViewCount) AS TotalViews, SUM(p.Score) AS TotalScore FROM Posts p JOIN PostTypes pt ON p.PostTypeId = pt.Id LEFT JOIN Users u ON p.OwnerUserId = u.Id GROUP BY pt.Name ) SELECT PostType, TotalPosts, UniqueUsers, AverageUserReputation, TotalViews, TotalScore FROM PostStats ORDER BY TotalPosts DESC;"
30424.sql,correct,,"The query retrieves detailed information about each user's most recent question from the past year, including user badges, vote counts, and post history stats, ordered by net votes and creation date, limited to the top 100 posts.","WITH RecursivePostStats AS ( SELECT p.Id AS PostId, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount, p.CreationDate, p.OwnerUserId, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn FROM Posts p WHERE p.PostTypeId = 1 ), UserBadges AS ( SELECT b.UserId, COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges, COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges, COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges FROM Badges b GROUP BY b.UserId ), VoteCounts AS ( SELECT v.PostId, COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes, COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes FROM Votes v GROUP BY v.PostId ), PostHistoryAnalysis AS ( SELECT ph.PostId, MAX(ph.CreationDate) AS LastActivityDate, COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId = 10 THEN ph.UserId END) AS CloseVotes, COUNT(DISTINCT CASE WHEN ph.PostHistoryTypeId = 11 THEN ph.UserId END) AS ReopenVotes FROM PostHistory ph GROUP BY ph.PostId ) SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, ps.ViewCount, ps.AnswerCount, ps.CommentCount, ps.OwnerUserId, u.DisplayName AS OwnerDisplayName, COALESCE(ub.GoldBadges, 0) AS GoldBadges, COALESCE(ub.SilverBadges, 0) AS SilverBadges, COALESCE(ub.BronzeBadges, 0) AS BronzeBadges, COALESCE(vc.UpVotes, 0) - COALESCE(vc.DownVotes, 0) AS NetVotes, pha.LastActivityDate, pha.CloseVotes, pha.ReopenVotes FROM Posts p JOIN RecursivePostStats ps ON p.Id = ps.PostId JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN UserBadges ub ON u.Id = ub.UserId LEFT JOIN VoteCounts vc ON p.Id = vc.PostId LEFT JOIN PostHistoryAnalysis pha ON p.Id = pha.PostId WHERE ps.rn = 1 AND p.CreationDate >= (cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year') ORDER BY NetVotes DESC, p.CreationDate DESC LIMIT 100;"
5790.sql,correct,,"The query retrieves the top 10 highest-scoring posts of each type created in the last year, along with their view counts, comment counts, owner names, vote counts, and calculates an engagement score to order the results.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.ViewCount, p.Score, u.DisplayName AS OwnerDisplayName, COUNT(c.Id) AS CommentCount, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, u.DisplayName, p.PostTypeId ), TopPosts AS ( SELECT PostId, Title, CreationDate, ViewCount, Score, OwnerDisplayName FROM RankedPosts WHERE Rank <= 10 ), VoteSummary AS ( SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes FROM Votes GROUP BY PostId ) SELECT tp.PostId, tp.Title, tp.CreationDate, tp.ViewCount, tp.Score, tp.OwnerDisplayName, COALESCE(vs.UpVotes, 0) AS UpVotes, COALESCE(vs.DownVotes, 0) AS DownVotes, (tp.ViewCount + COALESCE(vs.UpVotes, 0) - COALESCE(vs.DownVotes, 0)) AS EngagementScore FROM TopPosts tp LEFT JOIN VoteSummary vs ON tp.PostId = vs.PostId ORDER BY EngagementScore DESC;"
26640.sql,correct,,"The query retrieves detailed information about each question post, including its top-ranked answers, answer owners, scores, and any closure details, ordered by answer score and question date.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title AS PostTitle, p.Tags, p.CreationDate, p.AcceptedAnswerId, COUNT(a.Id) AS AnswerCount, ROW_NUMBER() OVER(PARTITION BY p.Id ORDER BY p.CreationDate DESC) AS rn FROM Posts p LEFT JOIN Posts a ON p.Id = a.ParentId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.Tags, p.CreationDate, p.AcceptedAnswerId ), MostVotedAnswers AS ( SELECT a.Id AS AnswerId, a.ParentId, a.Score, u.DisplayName AS OwnerName FROM Posts a JOIN Users u ON a.OwnerUserId = u.Id WHERE a.PostTypeId = 2 ORDER BY a.Score DESC ), ClosedPosts AS ( SELECT ph.PostId, ph.CreationDate AS CloseDate, c.Name AS CloseReason FROM PostHistory ph JOIN CloseReasonTypes c ON ph.Comment = CAST(c.Id AS VARCHAR) WHERE ph.PostHistoryTypeId = 10 ) SELECT rp.PostId, rp.PostTitle, rp.Tags, rp.CreationDate AS QuestionDate, mp.AnswerId, mp.OwnerName AS AnswerOwner, mp.Score AS AnswerScore, cp.CloseDate, cp.CloseReason FROM RankedPosts rp LEFT JOIN MostVotedAnswers mp ON rp.PostId = mp.ParentId LEFT JOIN ClosedPosts cp ON rp.PostId = cp.PostId WHERE rp.rn = 1 ORDER BY AnswerScore DESC NULLS LAST, QuestionDate DESC;"
4592.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves detailed information about the top 50 users by reputation, including their highly scored or viewed posts with above-average comments, along with post history types and user locations.","WITH UserStatistics AS ( SELECT u.Id AS UserId, u.DisplayName, u.Reputation, u.CreationDate, u.UpVotes, u.DownVotes, DENSE_RANK() OVER (ORDER BY u.Reputation DESC) AS ReputationRank, ROW_NUMBER() OVER (PARTITION BY u.Location ORDER BY u.Reputation DESC) AS LocationRank, u.Location FROM Users u ), PostDetails AS ( SELECT p.Id AS PostId, p.OwnerUserId, p.Title, p.Score, p.ViewCount, p.CreationDate, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvoteCount FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.OwnerUserId, p.Title, p.Score, p.ViewCount, p.CreationDate ), TopPosts AS ( SELECT pd.PostId, pd.Title, pd.Score, pd.ViewCount, pd.CommentCount, ROW_NUMBER() OVER (ORDER BY pd.Score DESC, pd.ViewCount DESC) AS ScoreRank FROM PostDetails pd WHERE pd.Score > 0 ) SELECT us.DisplayName AS UserName, us.Reputation, pp.Title AS PostTitle, pp.Score, pp.ViewCount, pp.CommentCount, CASE WHEN us.Location IS NULL THEN 'Unknown Location' ELSE us.Location END AS UserLocation, pht.Name AS PostHistoryType FROM UserStatistics us LEFT JOIN Posts p ON us.UserId = p.OwnerUserId LEFT JOIN TopPosts pp ON p.Id = pp.PostId LEFT JOIN PostHistory ph ON p.Id = ph.PostId LEFT JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id WHERE us.ReputationRank <= 50 AND (pp.ScoreRank <= 10 OR pp.ViewCount > 100) AND pp.CommentCount > COALESCE((SELECT AVG(CommentCount) FROM PostDetails), 0) ORDER BY us.Reputation DESC, pp.Score DESC;"
7693.sql,almost,"The comment count does not account for duplicates due to the join with votes and badges, a distinct count should be used. The badge count does not account for duplicates due to the join with votes and comments.","This query retrieves the top 10 highest-scoring posts from the past year for each post type, including their author, view count, vote count, comment count, and the author's badge count, ordered by score and views.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, u.DisplayName AS Author, p.CreationDate, p.ViewCount, p.Score, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC, p.ViewCount DESC) AS Rank, COUNT(DISTINCT v.Id) AS VoteCount, COUNT(c.Id) AS CommentCount, COUNT(b.Id) AS BadgeCount FROM Posts p LEFT JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Votes v ON p.Id = v.PostId LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Badges b ON u.Id = b.UserId WHERE p.CreationDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY p.Id, p.Title, u.DisplayName, p.CreationDate, p.ViewCount, p.Score, p.PostTypeId ), FilteredPosts AS ( SELECT rp.PostId, rp.Title, rp.Author, rp.CreationDate, rp.ViewCount, rp.Score, rp.Rank, rp.VoteCount, rp.CommentCount, rp.BadgeCount FROM RankedPosts rp WHERE rp.Rank <= 10 ) SELECT fp.PostId, fp.Title, fp.Author, fp.CreationDate, fp.ViewCount, fp.Score, fp.VoteCount, fp.CommentCount, fp.BadgeCount FROM FilteredPosts fp ORDER BY fp.Score DESC, fp.ViewCount DESC;"
7876.sql,correct,,"This query retrieves detailed activity, badge, and edit statistics for users with a reputation over 1000, combining their post counts, vote counts, badges earned, and post history edits, ordered by total posts and upvotes.","WITH UserStats AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(DISTINCT p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers, SUM(CASE WHEN p.PostTypeId = 3 THEN 1 ELSE 0 END) AS Wikis, SUM(p.ViewCount) AS TotalViews, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS Upvotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS Downvotes FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Votes v ON p.Id = v.PostId WHERE u.Reputation > 1000 GROUP BY u.Id, u.DisplayName ), BadgeCounts AS ( SELECT UserId, COUNT(*) AS TotalBadges, SUM(CASE WHEN Class = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN Class = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges FROM Badges GROUP BY UserId ), PostHistoryAnalytics AS ( SELECT ph.UserId, COUNT(*) AS EditsCount, SUM(CASE WHEN ph.PostHistoryTypeId IN (4, 5) THEN 1 ELSE 0 END) AS TitleAndBodyEdits, SUM(CASE WHEN ph.PostHistoryTypeId IN (10, 11) THEN 1 ELSE 0 END) AS CloseReopenCounts FROM PostHistory ph GROUP BY ph.UserId ) SELECT us.UserId, us.DisplayName, us.TotalPosts, us.Questions, us.Answers, us.Wikis, us.TotalViews, us.Upvotes, us.Downvotes, COALESCE(bc.TotalBadges, 0) AS TotalBadges, COALESCE(bc.GoldBadges, 0) AS GoldBadges, COALESCE(bc.SilverBadges, 0) AS SilverBadges, COALESCE(bc.BronzeBadges, 0) AS BronzeBadges, COALESCE(ph.EditsCount, 0) AS EditsCount, COALESCE(ph.TitleAndBodyEdits, 0) AS TitleAndBodyEdits, COALESCE(ph.CloseReopenCounts, 0) AS CloseReopenCounts FROM UserStats us LEFT JOIN BadgeCounts bc ON us.UserId = bc.UserId LEFT JOIN PostHistoryAnalytics ph ON us.UserId = ph.UserId ORDER BY us.TotalPosts DESC, us.Upvotes DESC;"
6245.sql,almost,"The score sum does not account for duplicates due to the join with votes and badges. The up vote and down vote count does not account for duplicates due to the join with comments.","The query selects the top 10 users with reputation over 1000, ranked by the total score of their posts, along with their post and comment counts and vote statistics.","WITH UserActivity AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(DISTINCT P.Id) AS TotalPosts, COUNT(DISTINCT C.Id) AS TotalComments, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownVotes, SUM(P.Score) AS TotalScore FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Votes V ON P.Id = V.PostId WHERE U.Reputation > 1000 GROUP BY U.Id, U.DisplayName ), TopUsers AS ( SELECT UserId, DisplayName, TotalPosts, TotalComments, TotalUpVotes, TotalDownVotes, TotalScore, RANK() OVER (ORDER BY TotalScore DESC) AS Rank FROM UserActivity ) SELECT T.DisplayName, T.TotalPosts, T.TotalComments, T.TotalUpVotes, T.TotalDownVotes, T.TotalScore, T.Rank FROM TopUsers T WHERE T.Rank <= 10 ORDER BY T.Rank;"
5416.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves users with reputation over 1000 along with their total posts, views, badges, and details of their top three most-viewed posts created in the past year, ordered by total views and post views.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.ViewCount, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.ViewCount DESC) AS ViewRank, COUNT(DISTINCT c.Id) AS CommentCount, p.OwnerUserId FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '365 days' AND p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.OwnerUserId ), UserStats AS ( SELECT u.Id AS UserId, u.DisplayName, SUM(COALESCE(p.ViewCount, 0)) AS TotalViews, COUNT(DISTINCT p.Id) AS TotalPosts, COALESCE(SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END), 0) AS GoldBadges, COALESCE(SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END), 0) AS SilverBadges, COALESCE(SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END), 0) AS BronzeBadges FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Badges b ON u.Id = b.UserId WHERE u.Reputation > 1000 GROUP BY u.Id, u.DisplayName ) SELECT us.DisplayName, us.TotalPosts, us.TotalViews, us.GoldBadges, us.SilverBadges, us.BronzeBadges, rp.Title, rp.CreationDate, rp.ViewCount, rp.CommentCount FROM UserStats us JOIN RankedPosts rp ON us.UserId = rp.OwnerUserId WHERE rp.ViewRank <= 3 ORDER BY us.TotalViews DESC, rp.ViewCount DESC;"
32348.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves the top 50 most voted and commented posts created within the past year, along with their comment and vote counts, hierarchical level in the post tree, owner's display name and badge counts, and marks posts as active or stale based on recent history updates.","WITH RECURSIVE RecursivePostHierarchy AS ( SELECT Id AS PostId, Title, ParentId, CreationDate, 0 AS Level FROM Posts WHERE ParentId IS NULL UNION ALL SELECT p.Id AS PostId, p.Title, p.ParentId, p.CreationDate, r.Level + 1 FROM Posts p INNER JOIN RecursivePostHierarchy r ON p.ParentId = r.PostId ), PostStats AS ( SELECT p.Id AS PostId, COUNT(c.Id) AS CommentCount, COUNT(DISTINCT v.UserId) FILTER (WHERE v.VoteTypeId = 2) AS UpvoteCount, COUNT(DISTINCT v.UserId) FILTER (WHERE v.VoteTypeId = 3) AS DownvoteCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 WHEN v.VoteTypeId = 3 THEN -1 ELSE 0 END) AS NetVotes, MAX(ph.CreationDate) AS LastHistoryUpdate FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId LEFT JOIN PostHistory ph ON p.Id = ph.PostId GROUP BY p.Id ), UserBadges AS ( SELECT u.Id AS UserId, COUNT(b.Id) FILTER (WHERE b.Class = 1) AS GoldBadges, COUNT(b.Id) FILTER (WHERE b.Class = 2) AS SilverBadges, COUNT(b.Id) FILTER (WHERE b.Class = 3) AS BronzeBadges, SUM(CASE WHEN b.TagBased THEN 1 ELSE 0 END) AS TagBasedBadges FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id ) SELECT p.Title AS PostTitle, p.CreationDate AS PostCreationDate, ps.CommentCount, ps.UpvoteCount, ps.DownvoteCount, ps.NetVotes, COALESCE(u.DisplayName, 'Unknown User') AS OwnerDisplayName, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges, ph.Level AS PostLevel, ph.ParentId AS ParentPostId, CASE WHEN ps.LastHistoryUpdate IS NOT NULL AND ps.LastHistoryUpdate < TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' THEN 'Stale Post' ELSE 'Active Post' END AS PostStatus FROM Posts p LEFT JOIN PostStats ps ON p.Id = ps.PostId LEFT JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN UserBadges ub ON u.Id = ub.UserId LEFT JOIN RecursivePostHierarchy ph ON p.Id = ph.PostId WHERE p.CreationDate > TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year' ORDER BY ps.NetVotes DESC, ps.CommentCount DESC LIMIT 50;"
1077.sql,almost,"UpVotes and DownVotes are not associated with users, the up vote and down vote counts are always zero.","This query summarizes user voting stats and ranks closed posts by their close votes and comments, then combines and filters them to show details for users named ""David"" or posts with more than 10 comments.","WITH UserVoteSummary AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(CASE WHEN V.VoteTypeId = 2 THEN 1 END) AS UpVotes, COUNT(CASE WHEN V.VoteTypeId = 3 THEN 1 END) AS DownVotes, SUM(CASE WHEN P.PostTypeId = 1 THEN P.Score ELSE 0 END) AS TotalQuestionScore FROM Users U LEFT JOIN Votes V ON U.Id = V.UserId LEFT JOIN Posts P ON V.PostId = P.Id GROUP BY U.Id, U.DisplayName ), ClosedPostDetails AS ( SELECT P.Id AS PostId, P.Title, PH.CreationDate AS ClosedDate, (SELECT COUNT(*) FROM Comments C WHERE C.PostId = P.Id) AS TotalComments, (SELECT COUNT(*) FROM Votes V WHERE V.PostId = P.Id AND V.VoteTypeId IN (6, 12)) AS CloseVotes FROM Posts P JOIN PostHistory PH ON P.Id = PH.PostId WHERE PH.PostHistoryTypeId = 10 ), RankedPosts AS ( SELECT PD.PostId, PD.Title, PD.ClosedDate, PD.TotalComments, PD.CloseVotes, RANK() OVER (ORDER BY PD.CloseVotes DESC, PD.TotalComments DESC) AS PostRank FROM ClosedPostDetails PD ) SELECT U.DisplayName, U.UpVotes, U.DownVotes, U.TotalQuestionScore, RP.Title, RP.ClosedDate, RP.TotalComments, RP.CloseVotes, RP.PostRank FROM UserVoteSummary U FULL OUTER JOIN RankedPosts RP ON U.UserId = RP.PostId WHERE U.UserId IS NOT NULL AND (UPPER(U.DisplayName) LIKE '%DAVID%' OR RP.TotalComments > 10) ORDER BY COALESCE(RP.CloseVotes, 0) DESC, U.UpVotes DESC;"
13449.sql,almost,"The questions and answer counts do not account for duplicates due to the join with votes.","The query retrieves a summary of each user's posts, votes, views, and badges, ordered by total views and post count.","WITH UserStats AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(DISTINCT P.Id) AS PostCount, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS Questions, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS Answers, SUM(CASE WHEN P.ViewCount IS NOT NULL THEN P.ViewCount ELSE 0 END) AS TotalViews, SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END) AS TotalUpVotes, SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END) AS TotalDownVotes FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY U.Id, U.DisplayName ), TagStats AS ( SELECT T.Id AS TagId, T.TagName, COUNT(P.Id) AS PostCount, SUM(P.ViewCount) AS TotalViews FROM Tags T LEFT JOIN Posts P ON P.Tags LIKE CONCAT('%', T.TagName, '%') GROUP BY T.Id, T.TagName ), BadgeStats AS ( SELECT B.UserId, COUNT(B.Id) AS BadgeCount, SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges FROM Badges B GROUP BY B.UserId ) SELECT U.UserId, U.DisplayName, COALESCE(U.PostCount, 0) AS TotalPosts, COALESCE(U.Questions, 0) AS TotalQuestions, COALESCE(U.Answers, 0) AS TotalAnswers, COALESCE(U.TotalViews, 0) AS TotalViews, COALESCE(U.TotalUpVotes, 0) AS TotalUpVotes, COALESCE(U.TotalDownVotes, 0) AS TotalDownVotes, COALESCE(B.BadgeCount, 0) AS TotalBadges, COALESCE(B.GoldBadges, 0) AS TotalGoldBadges, COALESCE(B.SilverBadges, 0) AS TotalSilverBadges, COALESCE(B.BronzeBadges, 0) AS TotalBronzeBadges FROM UserStats U LEFT JOIN BadgeStats B ON U.UserId = B.UserId ORDER BY U.TotalViews DESC, U.PostCount DESC;"
16614.sql,correct,,"This query retrieves the titles, creation dates, owner names, scores, and view counts of the 10 most recent questions from the Posts table along with their owners' display names.","SELECT p.Title, p.CreationDate, u.DisplayName AS OwnerDisplayName, p.Score, p.ViewCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.CreationDate DESC LIMIT 10;"
10314.sql,correct,,"This query retrieves each user's post and badge statistics, including counts of posts, questions, answers, scores, views, and badges, ordered by their total post score in descending order.","WITH UserPostStatistics AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(P.Id) AS TotalPosts, COUNT(CASE WHEN P.PostTypeId = 1 THEN 1 END) AS TotalQuestions, COUNT(CASE WHEN P.PostTypeId = 2 THEN 1 END) AS TotalAnswers, SUM(P.Score) AS TotalScore, SUM(P.ViewCount) AS TotalViews FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId GROUP BY U.Id, U.DisplayName ), UserBadgeStatistics AS ( SELECT B.UserId, COUNT(B.Id) AS TotalBadges, COUNT(CASE WHEN B.Class = 1 THEN 1 END) AS GoldBadges, COUNT(CASE WHEN B.Class = 2 THEN 1 END) AS SilverBadges, COUNT(CASE WHEN B.Class = 3 THEN 1 END) AS BronzeBadges FROM Badges B GROUP BY B.UserId ) SELECT UPS.UserId, UPS.DisplayName, UPS.TotalPosts, UPS.TotalQuestions, UPS.TotalAnswers, UPS.TotalScore, UPS.TotalViews, COALESCE(UBS.TotalBadges, 0) AS TotalBadges, COALESCE(UBS.GoldBadges, 0) AS GoldBadges, COALESCE(UBS.SilverBadges, 0) AS SilverBadges, COALESCE(UBS.BronzeBadges, 0) AS BronzeBadges FROM UserPostStatistics UPS LEFT JOIN UserBadgeStatistics UBS ON UPS.UserId = UBS.UserId ORDER BY UPS.TotalScore DESC;"
17723.sql,correct,,"This query retrieves the top 10 most recent questions along with their author's name, title, creation date, view count, score, and number of comments.","SELECT u.DisplayName, p.Title, p.CreationDate, p.ViewCount, p.Score, COUNT(c.Id) AS CommentCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.PostTypeId = 1 GROUP BY u.DisplayName, p.Title, p.CreationDate, p.ViewCount, p.Score ORDER BY p.CreationDate DESC LIMIT 10;"
17377.sql,correct,,"This query retrieves the 10 most recent questions' titles, creation dates, authors' names, and their comment counts.","SELECT p.Title AS PostTitle, p.CreationDate AS PostCreationDate, u.DisplayName AS AuthorName, COUNT(c.Id) AS CommentCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.PostTypeId = 1 GROUP BY p.Title, p.CreationDate, u.DisplayName ORDER BY p.CreationDate DESC LIMIT 10;"
12028.sql,correct,,"The query retrieves the top 10 users ranked by their total post scores, showing their post counts, question and answer counts, total views, and total scores.","WITH UserPostStats AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(DISTINCT P.Id) AS TotalPosts, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(P.ViewCount) AS TotalViews, SUM(P.Score) AS TotalScore FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId GROUP BY U.Id, U.DisplayName ), TopUsers AS ( SELECT UserId, DisplayName, TotalPosts, TotalQuestions, TotalAnswers, TotalViews, TotalScore, ROW_NUMBER() OVER (ORDER BY TotalScore DESC) AS Rank FROM UserPostStats ) SELECT Rank, DisplayName, TotalPosts, TotalQuestions, TotalAnswers, TotalViews, TotalScore FROM TopUsers WHERE Rank <= 10;"
31859.sql,correct,,"This query retrieves the top 100 users who have at least one post and one badge, showing their badge counts, post statistics, and days since their last post, sorted by total score and total posts.","WITH RECURSIVE UserBadgeCounts AS ( SELECT u.Id AS UserId, u.DisplayName, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadgeCount, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadgeCount, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadgeCount FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName ), PostMetrics AS ( SELECT p.OwnerUserId, COUNT(DISTINCT p.Id) AS TotalPosts, COUNT(DISTINCT CASE WHEN p.PostTypeId = 1 THEN p.Id END) AS TotalQuestions, COUNT(DISTINCT CASE WHEN p.PostTypeId = 2 THEN p.Id END) AS TotalAnswers, SUM(p.Score) AS TotalScore, AVG(p.ViewCount) AS AvgViewCount, MAX(p.CreationDate) AS LastPostDate FROM Posts p GROUP BY p.OwnerUserId ), CombinedMetrics AS ( SELECT u.Id AS UserId, u.DisplayName, COALESCE(ubc.GoldBadgeCount, 0) AS GoldBadgeCount, COALESCE(ubc.SilverBadgeCount, 0) AS SilverBadgeCount, COALESCE(ubc.BronzeBadgeCount, 0) AS BronzeBadgeCount, COALESCE(pm.TotalPosts, 0) AS TotalPosts, COALESCE(pm.TotalQuestions, 0) AS TotalQuestions, COALESCE(pm.TotalAnswers, 0) AS TotalAnswers, COALESCE(pm.TotalScore, 0) AS TotalScore, COALESCE(pm.AvgViewCount, 0) AS AvgViewCount, pm.LastPostDate FROM Users u LEFT JOIN UserBadgeCounts ubc ON u.Id = ubc.UserId LEFT JOIN PostMetrics pm ON u.Id = pm.OwnerUserId ) SELECT c.UserId, c.DisplayName, c.GoldBadgeCount, c.SilverBadgeCount, c.BronzeBadgeCount, c.TotalPosts, c.TotalQuestions, c.TotalAnswers, c.TotalScore, c.AvgViewCount, CASE WHEN c.LastPostDate IS NOT NULL THEN DATE '2024-10-01' - c.LastPostDate ELSE NULL END AS DaysSinceLastPost FROM CombinedMetrics c WHERE (c.TotalQuestions > 0 OR c.TotalAnswers > 0) AND (c.GoldBadgeCount > 0 OR c.SilverBadgeCount > 0 OR c.BronzeBadgeCount > 0) ORDER BY c.TotalScore DESC, c.TotalPosts DESC LIMIT 100;"
7047.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query lists users with over 1000 reputation, showing their post and badge counts plus statistics on their top 5 most upvoted posts from the past year, ordered by average vote difference and total posts.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes, COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes, COUNT(DISTINCT c.Id) AS CommentCount, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) DESC) AS VoteRank, p.OwnerUserId FROM Posts p LEFT JOIN Votes v ON p.Id = v.PostId LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= CURRENT_TIMESTAMP - INTERVAL '1 year' GROUP BY p.Id, p.OwnerUserId, p.Title, p.CreationDate ), UserStats AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(DISTINCT p.Id) AS TotalPosts, SUM(CASE WHEN COALESCE(b.Class, 0) = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN COALESCE(b.Class, 0) = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN COALESCE(b.Class, 0) = 3 THEN 1 ELSE 0 END) AS BronzeBadges FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Badges b ON u.Id = b.UserId WHERE u.Reputation > 1000 GROUP BY u.Id, u.DisplayName ) SELECT us.DisplayName, us.TotalPosts, us.GoldBadges, us.SilverBadges, us.BronzeBadges, COUNT(rp.PostId) AS ActivePostCount, AVG(rp.UpVotes - rp.DownVotes) AS AverageVoteDifference FROM UserStats us LEFT JOIN RankedPosts rp ON us.UserId = rp.OwnerUserId WHERE rp.VoteRank <= 5 GROUP BY us.DisplayName, us.TotalPosts, us.GoldBadges, us.SilverBadges, us.BronzeBadges ORDER BY AverageVoteDifference DESC, us.TotalPosts ASC;"
12245.sql,almost,"The score and view sum do not account for duplicates due to the join with comments and badges.","The query lists the top 10 users with the most posts, showing their ID, name, total posts, questions, answers, post scores, views, comment scores, and badges.","SELECT u.Id AS UserId, u.DisplayName, COUNT(DISTINCT p.Id) AS TotalPosts, COUNT(DISTINCT CASE WHEN p.PostTypeId = 1 THEN p.Id END) AS TotalQuestions, COUNT(DISTINCT CASE WHEN p.PostTypeId = 2 THEN p.Id END) AS TotalAnswers, SUM(p.Score) AS TotalScore, SUM(p.ViewCount) AS TotalViews, SUM(COALESCE(c.Score, 0)) AS TotalCommentScore, COUNT(DISTINCT b.Id) AS TotalBadges FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName ORDER BY TotalPosts DESC LIMIT 10;"
5271.sql,correct,,"The query retrieves the top 5 highest-scoring questions and answers from the past year, along with their details, owner names, comment counts, upvotes, downvotes, and categorizes them by score.","WITH RankedPosts AS ( SELECT p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.AnswerCount, p.CommentCount, p.OwnerUserId, u.DisplayName AS OwnerDisplayName, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS Rank FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' AND p.PostTypeId IN (1, 2) ), TopPosts AS ( SELECT rp.*, (SELECT COUNT(DISTINCT c.Id) FROM Comments c WHERE c.PostId = rp.Id) AS TotalComments, (SELECT COUNT(DISTINCT v.Id) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 2) AS UpVotes, (SELECT COUNT(DISTINCT v.Id) FROM Votes v WHERE v.PostId = rp.Id AND v.VoteTypeId = 3) AS DownVotes FROM RankedPosts rp WHERE rp.Rank <= 5 ) SELECT tp.Title, tp.CreationDate, tp.ViewCount, tp.Score, tp.AnswerCount, tp.CommentCount, tp.OwnerDisplayName, tp.TotalComments, tp.UpVotes, tp.DownVotes, CASE WHEN tp.Score >= 100 THEN 'High Score' WHEN tp.Score >= 50 THEN 'Medium Score' ELSE 'Low Score' END AS ScoreCategory FROM TopPosts tp ORDER BY tp.Score DESC;"
2017.sql,almost,"The question and answer count do not account for duplicates due to the join with votes, a distinct count should be used.","The query retrieves the top 10 users by reputation along with details of their posts, including post status, comment count, and related post count.","WITH UserStatistics AS ( SELECT U.Id AS UserId, U.DisplayName, U.Reputation, COALESCE(SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END), 0) AS QuestionCount, COALESCE(SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END), 0) AS AnswerCount, COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVoteCount, COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVoteCount FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY U.Id, U.DisplayName, U.Reputation ), TopUsers AS ( SELECT UserId, DisplayName, Reputation, QuestionCount, AnswerCount, UpVoteCount, DownVoteCount, ROW_NUMBER() OVER (ORDER BY Reputation DESC) AS Rank FROM UserStatistics ), PostDetails AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.OwnerUserId, CASE WHEN PH.PostId IS NOT NULL THEN 'Closed' ELSE 'Open' END AS PostStatus, COUNT(CASE WHEN C.Id IS NOT NULL THEN 1 END) AS CommentCount, COUNT(DISTINCT PL.RelatedPostId) AS RelatedPostCount FROM Posts P LEFT JOIN PostHistory PH ON P.Id = PH.PostId AND PH.PostHistoryTypeId IN (10, 11) LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN PostLinks PL ON P.Id = PL.PostId GROUP BY P.Id, P.Title, P.CreationDate, P.OwnerUserId, PH.PostId ) SELECT TU.DisplayName, TU.Reputation, PD.PostId, PD.Title, PD.CreationDate, PD.PostStatus, PD.CommentCount, PD.RelatedPostCount FROM TopUsers TU JOIN PostDetails PD ON TU.UserId = PD.OwnerUserId WHERE TU.Rank <= 10 ORDER BY TU.Reputation DESC, PD.PostStatus;"
9110.sql,almost,"The question and answer count do not account for duplicates due to the join with votes, a distinct count should be used.","The query retrieves the top 100 users with more than 10 posts, showing their post counts, vote counts, and badge totals, ordered by most upvotes and fewest downvotes.","WITH UserStats AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(DISTINCT p.Id) AS PostCount, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY u.Id, u.DisplayName ), BadgeCounts AS ( SELECT b.UserId, COUNT(b.Id) AS BadgeCount, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges FROM Badges b GROUP BY b.UserId ) SELECT us.UserId, us.DisplayName, us.PostCount, us.QuestionCount, us.AnswerCount, COALESCE(bc.BadgeCount, 0) AS TotalBadges, COALESCE(bc.GoldBadges, 0) AS GoldBadges, COALESCE(bc.SilverBadges, 0) AS SilverBadges, COALESCE(bc.BronzeBadges, 0) AS BronzeBadges, us.UpVotes, us.DownVotes FROM UserStats us LEFT JOIN BadgeCounts bc ON us.UserId = bc.UserId WHERE us.PostCount > 10 ORDER BY us.UpVotes DESC, us.DownVotes ASC LIMIT 100;"
32025.sql,correct,,"The query retrieves the top 10 highest-scoring recent questions with over 100 views, along with details about the top 5 active users who asked the most questions and their bounty spending, plus the questions' closure histories.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.ViewCount, p.Score, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY p.Score DESC) AS PostRank FROM Posts p WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' AND p.PostTypeId = 1 ), UserActivity AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(DISTINCT p.Id) AS QuestionsAsked, SUM(v.BountyAmount) AS TotalBountySpent FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1 LEFT JOIN Votes v ON u.Id = v.UserId WHERE u.Reputation > 1000 AND u.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '2 years' GROUP BY u.Id, u.DisplayName ), TopUsers AS ( SELECT ua.UserId, ua.DisplayName, ua.QuestionsAsked, ua.TotalBountySpent, RANK() OVER (ORDER BY ua.QuestionsAsked DESC) AS UserRank FROM UserActivity ua WHERE ua.TotalBountySpent IS NOT NULL ), PostHistorySummary AS ( SELECT ph.PostId, MAX(CASE WHEN pht.Name = 'Post Closed' THEN ph.CreationDate END) AS LastCloseDate, COUNT(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 END) AS ClosureCount FROM PostHistory ph JOIN PostHistoryTypes pht ON ph.PostHistoryTypeId = pht.Id GROUP BY ph.PostId ) SELECT rp.PostId, rp.Title, rp.CreationDate, rp.ViewCount, rp.Score, tu.DisplayName AS TopUserDisplayName, tu.QuestionsAsked, tu.TotalBountySpent, phs.LastCloseDate, phs.ClosureCount FROM RankedPosts rp LEFT JOIN TopUsers tu ON rp.ViewCount > 100 AND tu.UserRank <= 5 LEFT JOIN PostHistorySummary phs ON rp.PostId = phs.PostId WHERE rp.PostRank <= 10 ORDER BY rp.Score DESC, rp.CreationDate ASC;"
31711.sql,correct,,"The query lists each user's highest-scoring post from the past year along with the user's badge counts and reputation (for users with reputation over 500), ordered by the number of comments on their top post and then by reputation.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.PostTypeId, p.OwnerUserId, p.CreationDate, RANK() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank, COUNT(DISTINCT c.Id) AS CommentCount, p.Score FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.CreationDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.PostTypeId, p.OwnerUserId, p.CreationDate, p.Score ), UserBadges AS ( SELECT b.UserId, COUNT(CASE WHEN b.Class = 1 THEN 1 END) AS GoldBadges, COUNT(CASE WHEN b.Class = 2 THEN 1 END) AS SilverBadges, COUNT(CASE WHEN b.Class = 3 THEN 1 END) AS BronzeBadges FROM Badges b GROUP BY b.UserId ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.OwnerUserId, ub.GoldBadges, ub.SilverBadges, ub.BronzeBadges, rp.CommentCount, ROW_NUMBER() OVER (ORDER BY rp.Score DESC) AS TopRank FROM RankedPosts rp JOIN UserBadges ub ON rp.OwnerUserId = ub.UserId WHERE rp.Rank = 1 ) SELECT p.Title, u.DisplayName, u.Reputation, COALESCE(tp.GoldBadges, 0) AS GoldBadges, COALESCE(tp.SilverBadges, 0) AS SilverBadges, COALESCE(tp.BronzeBadges, 0) AS BronzeBadges, tp.CommentCount FROM TopPosts tp JOIN Users u ON tp.OwnerUserId = u.Id JOIN Posts p ON tp.PostId = p.Id WHERE u.Reputation > 500 ORDER BY tp.CommentCount DESC, u.Reputation DESC;"
15132.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query retrieves the latest 10 posts with their titles, owners' display names, number of comments, and counts of upvotes and downvotes.","SELECT p.Id AS PostId, p.Title, u.DisplayName AS OwnerDisplayName, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.Title, u.DisplayName ORDER BY p.CreationDate DESC LIMIT 10;"
1436.sql,almost,"The answer count does not account for duplicates due to the join with badges, a distinct count should be used. The gold/silver/bronze badge counts do not account for duplicates due to the join with posts.","This query retrieves the highest-scoring recent questions posted in the last year by users with above-average reputation, along with their user stats, badge counts, and post close reasons if any.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.Body, p.CreationDate, p.Score, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS Rank, p.OwnerUserId FROM Posts p WHERE p.PostTypeId = 1 AND p.Score IS NOT NULL ), UserReputation AS ( SELECT u.Id AS UserId, u.Reputation, COUNT(a.Id) AS AnswerCount, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges FROM Users u LEFT JOIN Posts a ON u.Id = a.OwnerUserId AND a.PostTypeId = 2 LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.Reputation ), CloseReasons AS ( SELECT ph.PostId, cr.Name AS CloseReason FROM PostHistory ph JOIN CloseReasonTypes cr ON ph.Comment = cr.Id::TEXT WHERE ph.PostHistoryTypeId IN (10, 11) ) SELECT rp.PostId, rp.Title, rp.Body, rp.CreationDate, ur.UserId, ur.Reputation, ur.AnswerCount, ur.GoldBadges, ur.SilverBadges, ur.BronzeBadges, COALESCE(cr.CloseReason, 'Not Closed') AS CloseReason, CASE WHEN rp.Rank = 1 THEN 'Top Post' ELSE 'Regular Post' END AS PostRank FROM RankedPosts rp JOIN UserReputation ur ON rp.OwnerUserId = ur.UserId LEFT JOIN CloseReasons cr ON rp.PostId = cr.PostId WHERE ur.Reputation >= (SELECT AVG(Reputation) FROM Users) AND rp.CreationDate >= (TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '1 year') ORDER BY rp.Score DESC, ur.Reputation DESC;"
14966.sql,correct,,"This query retrieves the top 10 posts with the highest scores and views, including their details, owner reputation, and counts of upvotes and downvotes.","WITH PostStats AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount, u.Reputation AS OwnerReputation, COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes, COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes FROM Posts p LEFT JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.AnswerCount, p.CommentCount, u.Reputation ), TopPosts AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY Score DESC, ViewCount DESC) AS Rank FROM PostStats ) SELECT PostId, Title, CreationDate, Score, ViewCount, AnswerCount, CommentCount, OwnerReputation, UpVotes, DownVotes FROM TopPosts WHERE Rank <= 10;"
17540.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves the 10 most recent questions with their titles, creation dates, owner names, and counts of comments, upvotes, and downvotes.","SELECT p.Title, p.CreationDate, u.DisplayName AS OwnerName, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVoteCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY p.Title, p.CreationDate, u.DisplayName ORDER BY p.CreationDate DESC LIMIT 10;"
3864.sql,incorrect,"The score count is incorrect due to duplicates. The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query selects the top-ranked user with reputation over 100 who has earned bounties (or none) and their most upvoted post from the past year, along with their activity stats like post count, total bounties, badges, and details of that top post.","WITH UserActivity AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(DISTINCT p.Id) AS PostCount, SUM(v.BountyAmount) AS TotalBounties, COUNT(DISTINCT b.Id) AS BadgeCount, ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT p.Id) DESC) AS UserRank FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Votes v ON u.Id = v.UserId AND v.VoteTypeId IN (8, 9) LEFT JOIN Badges b ON u.Id = b.UserId WHERE u.Reputation > 100 GROUP BY u.Id, u.DisplayName ), PostActivity AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, COALESCE(SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes, COALESCE(SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes, COUNT(c.Id) AS CommentCount, COUNT(DISTINCT pl.RelatedPostId) AS RelatedPostsCount, p.OwnerUserId FROM Posts p LEFT JOIN Votes v ON p.Id = v.PostId LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN PostLinks pl ON p.Id = pl.PostId WHERE p.CreationDate >= (CAST('2024-10-01 12:34:56' AS TIMESTAMP) - INTERVAL '1 year') GROUP BY p.Id, p.Title, p.CreationDate, p.OwnerUserId ), RankedPosts AS ( SELECT pa.PostId, pa.Title, pa.CreationDate, pa.UpVotes, pa.DownVotes, pa.CommentCount, pa.RelatedPostsCount, ROW_NUMBER() OVER (ORDER BY (pa.UpVotes - pa.DownVotes) DESC) AS ScoreRank FROM PostActivity pa ) SELECT ua.UserId, ua.DisplayName, ua.PostCount, ua.TotalBounties, ua.BadgeCount, rp.Title AS TopPostTitle, rp.UpVotes, rp.DownVotes, rp.CommentCount, rp.RelatedPostsCount FROM UserActivity ua LEFT JOIN RankedPosts rp ON ua.UserRank = 1 WHERE (ua.TotalBounties IS NULL OR ua.TotalBounties > 0) ORDER BY ua.PostCount DESC, ua.TotalBounties DESC;"
17952.sql,correct,,"This query retrieves the 10 most recent questions along with their IDs, titles, owner display names, creation dates, scores, and view counts.","SELECT p.Id AS PostId, p.Title, u.DisplayName AS OwnerDisplayName, p.CreationDate, p.Score, p.ViewCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.CreationDate DESC LIMIT 10;"
5214.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query retrieves the top 5 posts of each type from the past year based on comment count and vote totals, along with their upvote/downvote counts and classifies their sentiment as Positive, Negative, or Neutral.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpvoteCount, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownvoteCount, ROW_NUMBER() OVER (PARTITION BY p.PostTypeId ORDER BY COUNT(c.Id) DESC, SUM(v.VoteTypeId) DESC) AS Rank FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 year' GROUP BY p.Id, p.Title, p.PostTypeId ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.CommentCount, rp.UpvoteCount, rp.DownvoteCount FROM RankedPosts rp WHERE rp.Rank <= 5 ) SELECT tp.PostId, tp.Title, tp.CommentCount, tp.UpvoteCount, tp.DownvoteCount, CASE WHEN tp.UpvoteCount - tp.DownvoteCount > 0 THEN 'Positive' WHEN tp.UpvoteCount - tp.DownvoteCount < 0 THEN 'Negative' ELSE 'Neutral' END AS Sentiment FROM TopPosts tp ORDER BY tp.UpvoteCount DESC;"
23496.sql,correct,,"This query retrieves detailed badge, post, and vote statistics for experienced users with significant reputation and activity, ranks them by score and reputation, categorizes their activity level, and returns a paginated list of users.","WITH UserBadgeStats AS ( SELECT u.Id AS UserId, SUM(CASE WHEN b.Class = 1 THEN 1 ELSE 0 END) AS GoldBadges, SUM(CASE WHEN b.Class = 2 THEN 1 ELSE 0 END) AS SilverBadges, SUM(CASE WHEN b.Class = 3 THEN 1 ELSE 0 END) AS BronzeBadges, COUNT(b.Id) AS TotalBadges FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id ), PostSummary AS ( SELECT p.OwnerUserId, COUNT(DISTINCT p.Id) AS TotalPosts, COUNT(DISTINCT CASE WHEN p.PostTypeId = 1 THEN p.Id END) AS QuestionCount, COUNT(DISTINCT CASE WHEN p.PostTypeId = 2 THEN p.Id END) AS AnswerCount, SUM(COALESCE(p.Score, 0)) AS TotalScore, MAX(p.CreationDate) AS LastPostDate FROM Posts p GROUP BY p.OwnerUserId ), VoteCounts AS ( SELECT v.UserId, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, COUNT(DISTINCT v.PostId) AS VotedPosts FROM Votes v GROUP BY v.UserId ) SELECT u.Id, u.DisplayName, COALESCE(ubs.GoldBadges, 0) AS GoldBadges, COALESCE(ubs.SilverBadges, 0) AS SilverBadges, COALESCE(ubs.BronzeBadges, 0) AS BronzeBadges, COALESCE(ps.TotalPosts, 0) AS TotalPosts, COALESCE(ps.QuestionCount, 0) AS QuestionCount, COALESCE(ps.AnswerCount, 0) AS AnswerCount, COALESCE(ps.TotalScore, 0) AS TotalScore, COALESCE(vcs.UpVotes, 0) AS UpVotes, COALESCE(vcs.DownVotes, 0) AS DownVotes, COALESCE(vcs.VotedPosts, 0) AS VotedPosts, CASE WHEN COALESCE(ubs.TotalBadges, 0) > 0 THEN 'Active User' WHEN COALESCE(ps.TotalPosts, 0) = 0 AND COALESCE(vcs.VotedPosts, 0) = 0 THEN 'Inactive User' ELSE 'Moderate User' END AS UserStatus, LEAD(u.CreationDate) OVER (ORDER BY u.CreationDate) AS NextUserCreationDate, ROW_NUMBER() OVER (ORDER BY COALESCE(ps.TotalScore, 0) DESC, u.Reputation DESC) AS Rank FROM Users u LEFT JOIN UserBadgeStats ubs ON u.Id = ubs.UserId LEFT JOIN PostSummary ps ON u.Id = ps.OwnerUserId LEFT JOIN VoteCounts vcs ON u.Id = vcs.UserId WHERE u.Reputation > 1000 AND (COALESCE(ubs.TotalBadges, 0) > 2 OR COALESCE(ps.TotalPosts, 0) > 5) ORDER BY Rank, u.DisplayName OFFSET 10 ROWS FETCH NEXT 5 ROWS ONLY;"
20632.sql,almost,"The bounty sum does not account for duplicates due to the join with badges and posts. The badges count does not account for duplicates due to the join with posts and votes.","The query retrieves detailed statistics and top 5 highest-scored questions of the top 10 users ranked by total bounty who have earned bounties or badges and whose questions have been edited more than once or recently, including user info, ranks, post details, and post history summaries.","WITH RankedPosts AS ( SELECT p.Id, p.Title, p.CreationDate, p.Score, p.ViewCount, p.OwnerUserId, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC, p.CreationDate DESC) AS Rank FROM Posts p WHERE p.PostTypeId = 1 ), EnhancedUserStats AS ( SELECT u.Id AS UserId, u.DisplayName, COALESCE(SUM(v.BountyAmount), 0) AS TotalBounty, COUNT(b.Id) AS BadgeCount, COUNT(DISTINCT p.Id) AS TotalQuestions, MAX(u.Reputation) AS MaxReputation FROM Users u LEFT JOIN Votes v ON u.Id = v.UserId AND v.VoteTypeId IN (8, 9) LEFT JOIN Badges b ON u.Id = b.UserId LEFT JOIN Posts p ON u.Id = p.OwnerUserId AND p.PostTypeId = 1 GROUP BY u.Id, u.DisplayName ), UserRanks AS ( SELECT UserId, DisplayName, DENSE_RANK() OVER (ORDER BY TotalBounty DESC) AS BountyRank, DENSE_RANK() OVER (ORDER BY MaxReputation DESC) AS ReputationRank FROM EnhancedUserStats ), PostHistorySummary AS ( SELECT ph.PostId, ph.PostHistoryTypeId, COUNT(*) AS HistoryCount, MAX(ph.CreationDate) AS LastModifiedDate FROM PostHistory ph GROUP BY ph.PostId, ph.PostHistoryTypeId ) SELECT up.UserId, up.DisplayName, up.TotalBounty, up.BadgeCount, up.TotalQuestions, ur.BountyRank, ur.ReputationRank, iron.Id AS PostId, iron.Title, iron.CreationDate, iron.Score, iron.ViewCount, phs.HistoryCount, phs.LastModifiedDate FROM EnhancedUserStats up JOIN UserRanks ur ON up.UserId = ur.UserId INNER JOIN RankedPosts iron ON up.UserId = iron.OwnerUserId AND iron.Rank <= 5 LEFT JOIN PostHistorySummary phs ON iron.Id = phs.PostId WHERE (up.TotalBounty > 0 OR up.BadgeCount > 0) AND ur.BountyRank < 10 AND (phs.HistoryCount > 1 OR phs.LastModifiedDate IS NOT NULL) ORDER BY up.TotalBounty DESC, ur.ReputationRank ASC;"
10608.sql,correct,,"The query retrieves the top 10 users ranked by their total post scores or total number of posts, including counts of their questions, answers, total score, and average post views.","WITH UserPostStats AS ( SELECT U.Id AS UserId, U.DisplayName, COUNT(P.Id) AS TotalPosts, SUM(CASE WHEN P.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN P.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(P.Score) AS TotalScore, AVG(P.ViewCount) AS AvgViewCount FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId GROUP BY U.Id, U.DisplayName ), TopUsers AS ( SELECT UserId, DisplayName, TotalPosts, TotalQuestions, TotalAnswers, TotalScore, AvgViewCount, RANK() OVER (ORDER BY TotalScore DESC) AS RankByScore, RANK() OVER (ORDER BY TotalPosts DESC) AS RankByPosts FROM UserPostStats ) SELECT UserId, DisplayName, TotalPosts, TotalQuestions, TotalAnswers, TotalScore, AvgViewCount, RankByScore, RankByPosts FROM TopUsers WHERE RankByScore <= 10 OR RankByPosts <= 10 ORDER BY RankByScore, RankByPosts;"
7073.sql,incorrect,"Incorrect join between postid and userid. The up and down vote count do not account for duplicates due to the join with comments and badges, a distinct count should be used.","The query retrieves users created since 2023 with their vote counts, post and comment counts, badges, and details of their top 10 highest-scoring posts ranked by score and views, ordered by badge count and upvotes.","WITH UserActivity AS ( SELECT U.Id AS UserId, U.DisplayName, COALESCE(SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE 0 END), 0) AS UpVotes, COALESCE(SUM(CASE WHEN V.VoteTypeId = 3 THEN 1 ELSE 0 END), 0) AS DownVotes, COUNT(DISTINCT P.Id) AS PostCount, COUNT(DISTINCT C.Id) AS CommentCount, COUNT(DISTINCT B.Id) AS BadgeCount FROM Users U LEFT JOIN Posts P ON U.Id = P.OwnerUserId LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Votes V ON P.Id = V.PostId AND V.UserId = U.Id LEFT JOIN Badges B ON U.Id = B.UserId WHERE U.CreationDate >= '2023-01-01' GROUP BY U.Id, U.DisplayName ), PostStatistics AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.ViewCount, P.Score, P.Tags, COUNT(DISTINCT C.Id) AS CommentCount, COUNT(DISTINCT V.Id) AS VoteCount FROM Posts P LEFT JOIN Comments C ON P.Id = C.PostId LEFT JOIN Votes V ON P.Id = V.PostId GROUP BY P.Id, P.Title, P.CreationDate, P.ViewCount, P.Score, P.Tags ), TopPosts AS ( SELECT PS.PostId, PS.Title, PS.CreationDate, PS.ViewCount, PS.Score, PS.Tags, PS.CommentCount, PS.VoteCount, ROW_NUMBER() OVER (ORDER BY PS.Score DESC, PS.ViewCount DESC) AS Rank FROM PostStatistics PS ) SELECT UA.DisplayName, UA.UpVotes, UA.DownVotes, UA.PostCount, UA.CommentCount, UA.BadgeCount, TP.Title AS TopPostTitle, TP.ViewCount AS TopPostViewCount, TP.Score AS TopPostScore, TP.Rank FROM UserActivity UA LEFT JOIN TopPosts TP ON UA.UserId = TP.PostId WHERE TP.Rank <= 10 ORDER BY UA.BadgeCount DESC, UA.UpVotes DESC;"
29093.sql,correct,,"The query retrieves each user's post count, badge counts, post moderation actions, and their association with the top 5 most popular post tags, summarizing user activity and achievements.","WITH TagCounts AS ( SELECT TRIM(UNNEST(string_to_array(SUBSTRING(Tags, 2, LENGTH(Tags) - 2), '><'))) AS tag, COUNT(*) AS total_posts FROM Posts WHERE PostTypeId = 1 GROUP BY tag ), BadgeStats AS ( SELECT U.Id AS user_id, SUM(CASE WHEN B.Class = 1 THEN 1 ELSE 0 END) AS gold_badges, SUM(CASE WHEN B.Class = 2 THEN 1 ELSE 0 END) AS silver_badges, SUM(CASE WHEN B.Class = 3 THEN 1 ELSE 0 END) AS bronze_badges FROM Users U LEFT JOIN Badges B ON U.Id = B.UserId GROUP BY U.Id ), PostActivity AS ( SELECT P.OwnerUserId, COUNT(CASE WHEN PH.PostHistoryTypeId = 10 THEN 1 END) AS close_count, COUNT(CASE WHEN PH.PostHistoryTypeId = 11 THEN 1 END) AS reopen_count, COUNT(CASE WHEN PH.PostHistoryTypeId IN (12, 13) THEN 1 END) AS delete_count FROM Posts P LEFT JOIN PostHistory PH ON P.Id = PH.PostId GROUP BY P.OwnerUserId ) SELECT U.Id AS user_id, U.DisplayName, COALESCE(TC.total_posts, 0) AS post_count, COALESCE(BS.gold_badges, 0) AS gold_badges, COALESCE(BS.silver_badges, 0) AS silver_badges, COALESCE(BS.bronze_badges, 0) AS bronze_badges, COALESCE(PA.close_count, 0) AS close_count, COALESCE(PA.reopen_count, 0) AS reopen_count, COALESCE(PA.delete_count, 0) AS delete_count, STRING_AGG(DISTINCT TC.tag, ', ') AS popular_tags FROM Users U LEFT JOIN TagCounts TC ON TC.tag IN (SELECT tag FROM TagCounts ORDER BY total_posts DESC LIMIT 5) LEFT JOIN BadgeStats BS ON U.Id = BS.user_id LEFT JOIN PostActivity PA ON U.Id = PA.OwnerUserId GROUP BY U.Id, U.DisplayName, TC.total_posts, BS.gold_badges, BS.silver_badges, BS.bronze_badges, PA.close_count, PA.reopen_count, PA.delete_count ORDER BY post_count DESC, gold_badges DESC, silver_badges DESC, bronze_badges DESC;"
12754.sql,correct,,"This query retrieves all users with their posts along with each post's creation details, scores, view counts, and vote counts, ordered by user reputation and post creation date.","SELECT u.Id AS UserId, u.DisplayName, u.Reputation, p.Id AS PostId, p.Title, p.CreationDate AS PostCreationDate, p.Score AS PostScore, p.ViewCount, COALESCE(vote_counts.UpVotes, 0) AS UpVotes, COALESCE(vote_counts.DownVotes, 0) AS DownVotes, COALESCE(vote_counts.TotalVotes, 0) AS TotalVotes FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN (SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, COUNT(*) AS TotalVotes FROM Votes GROUP BY PostId) AS vote_counts ON p.Id = vote_counts.PostId WHERE p.Id IS NOT NULL ORDER BY u.Reputation DESC, p.CreationDate DESC;"
4726.sql,correct,,"The query lists the top 10 users by reputation, showing their post statistics, badge counts and names, and whether they have any accepted answers.","WITH UserPostStats AS ( SELECT u.Id AS UserId, u.Reputation, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(CASE WHEN p.PostTypeId = 1 AND p.AcceptedAnswerId IS NOT NULL THEN 1 ELSE 0 END) AS AcceptedAnswers FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.Id, u.Reputation ), TopUsers AS ( SELECT UserId, Reputation, TotalPosts, TotalAnswers, AcceptedAnswers, RANK() OVER (ORDER BY Reputation DESC) AS ReputationRank FROM UserPostStats ), UserBadges AS ( SELECT b.UserId, COUNT(b.Id) AS BadgeCount, STRING_AGG(b.Name, ', ') AS BadgeNames FROM Badges b GROUP BY b.UserId ) SELECT u.UserId, u.Reputation, u.TotalPosts, u.TotalAnswers, u.AcceptedAnswers, ub.BadgeCount, COALESCE(ub.BadgeNames, 'No Badges') AS BadgeNames, CASE WHEN u.AcceptedAnswers > 0 THEN 'Yes' ELSE 'No' END AS HasAcceptedAnswers FROM TopUsers u LEFT JOIN UserBadges ub ON u.UserId = ub.UserId WHERE u.ReputationRank <= 10 ORDER BY u.Reputation DESC;"
11633.sql,incorrect,"Join condition is missing","The query retrieves the top 100 most voted posts of type 1 that were active in the last 30 days, along with aggregated comment counts, post activity dates, and statistics about all users' badges, upvotes, and reputation.","WITH PostStats AS ( SELECT p.Id AS PostId, p.PostTypeId, COUNT(c.Id) AS CommentCount, COUNT(v.Id) AS VoteCount, MAX(p.CreationDate) AS LastActive FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.PostTypeId ), UserStats AS ( SELECT u.Id AS UserId, COUNT(b.Id) AS BadgeCount, SUM(u.UpVotes) AS TotalUpVotes, AVG(u.Reputation) AS AvgReputation FROM Users u LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id ) SELECT ps.PostId, ps.PostTypeId, ps.CommentCount, ps.VoteCount, ps.LastActive, us.UserId, us.BadgeCount, us.TotalUpVotes, us.AvgReputation FROM PostStats ps JOIN UserStats us ON ps.PostTypeId = 1 WHERE ps.LastActive BETWEEN TIMESTAMP '2024-10-01 12:34:56' - INTERVAL '30 days' AND TIMESTAMP '2024-10-01 12:34:56' ORDER BY ps.VoteCount DESC LIMIT 100;"
12064.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","This query retrieves detailed statistics for each post, including counts of comments, votes, average upvotes and downvotes, and the owner's display name, ordered by the post's score and view count in descending order.","WITH PostStats AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.ViewCount, p.Score, p.AnswerCount, COUNT(c.Id) AS CommentCount, COALESCE(u.DisplayName, 'Community User') AS OwnerDisplayName, COUNT(DISTINCT v.Id) AS VoteCount, AVG(CASE WHEN v.VoteTypeId = 2 THEN 1.0 ELSE 0 END) AS AvgUpVotes, AVG(CASE WHEN v.VoteTypeId = 3 THEN 1.0 ELSE 0 END) AS AvgDownVotes FROM Posts p LEFT JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, p.AnswerCount, u.DisplayName ) SELECT ps.PostId, ps.Title, ps.CreationDate, ps.ViewCount, ps.Score, ps.AnswerCount, ps.CommentCount, ps.OwnerDisplayName, ps.VoteCount, ps.AvgUpVotes, ps.AvgDownVotes FROM PostStats ps ORDER BY ps.Score DESC, ps.ViewCount DESC;"
255.sql,incorrect,"Incorrect join between relatedpostid and the tag id.","This query retrieves detailed information, including status, comment count, and tags, for the top 10 most recent posts per year from the past year, ranked by creation date, along with their owners and vote counts.","WITH RecentPosts AS ( SELECT P.Id AS PostId, P.Title, P.CreationDate, P.Score, P.ViewCount, P.AnswerCount, U.DisplayName AS OwnerDisplayName, COALESCE(V.UpVotes, 0) AS UpVotes, COALESCE(V.DownVotes, 0) AS DownVotes, DENSE_RANK() OVER (PARTITION BY EXTRACT(YEAR FROM P.CreationDate) ORDER BY P.CreationDate DESC) AS YearRank FROM Posts P JOIN Users U ON P.OwnerUserId = U.Id LEFT JOIN ( SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes FROM Votes GROUP BY PostId ) V ON P.Id = V.PostId WHERE P.CreationDate >= cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '1 YEAR' ), TopPosts AS ( SELECT PostId, Title, CreationDate, Score, ViewCount, AnswerCount, OwnerDisplayName, UpVotes, DownVotes FROM RecentPosts WHERE YearRank <= 10 ), PostDetails AS ( SELECT T.*, PH.PostHistoryTypeId, PH.CreationDate AS HistoryDate, PH.Comment AS CloseReason FROM TopPosts T LEFT JOIN PostHistory PH ON T.PostId = PH.PostId AND PH.PostHistoryTypeId IN (10, 11) ) SELECT PD.Title, PD.OwnerDisplayName, PD.CreationDate, PD.Score, PD.ViewCount, PD.AnswerCount, CASE WHEN PD.CloseReason IS NOT NULL THEN 'Closed: ' || PD.CloseReason ELSE 'Active' END AS PostStatus, (SELECT COUNT(*) FROM Comments C WHERE C.PostId = PD.PostId) AS CommentCount, STRING_AGG(T.TagName, ', ') AS Tags FROM PostDetails PD LEFT JOIN PostLinks PL ON PD.PostId = PL.PostId LEFT JOIN Tags T ON PL.RelatedPostId = T.Id GROUP BY PD.PostId, PD.OwnerDisplayName, PD.Title, PD.CreationDate, PD.Score, PD.ViewCount, PD.AnswerCount, PD.CloseReason ORDER BY PD.Score DESC, PD.ViewCount DESC;"
17469.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote and down vote count does not account for duplicates due to the join with comments.","The query retrieves the 10 most recent posts with their titles, creation dates, owner names, comment counts, and totals of upvotes and downvotes.","SELECT p.Id AS PostId, p.Title, p.CreationDate, u.DisplayName AS Owner, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId GROUP BY p.Id, p.Title, p.CreationDate, u.DisplayName ORDER BY p.CreationDate DESC LIMIT 10;"
8708.sql,correct,,"This query ranks users based on their total posts and views, categorizes them as 'Top Contributor', 'Popular User', or 'Regular User', and lists those with more than 50 posts or 1000 views along with their posting statistics.","WITH UserPostStats AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(p.Id) AS TotalPosts, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS TotalQuestions, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS TotalAnswers, SUM(CASE WHEN p.Score > 0 THEN 1 ELSE 0 END) AS PositivePosts, SUM(CASE WHEN p.Score < 0 THEN 1 ELSE 0 END) AS NegativePosts, SUM(p.ViewCount) AS TotalViews FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.Id, u.DisplayName ), TopUsers AS ( SELECT UserId, DisplayName, TotalPosts, TotalQuestions, TotalAnswers, PositivePosts, NegativePosts, TotalViews, RANK() OVER (ORDER BY TotalPosts DESC) AS RankByPosts, RANK() OVER (ORDER BY TotalViews DESC) AS RankByViews FROM UserPostStats ) SELECT tu.DisplayName, tu.TotalPosts, tu.TotalQuestions, tu.TotalAnswers, tu.PositivePosts, tu.NegativePosts, tu.TotalViews, CASE WHEN tu.RankByPosts <= 10 THEN 'Top Contributor' WHEN tu.RankByViews <= 10 THEN 'Popular User' ELSE 'Regular User' END AS UserCategory FROM TopUsers tu WHERE tu.TotalPosts > 50 OR tu.TotalViews > 1000 ORDER BY tu.TotalPosts DESC, tu.TotalViews DESC;"
14045.sql,correct,,"Retrieve details of posts created since 2023 including their counts of distinct comments, answers, votes, badges of the post owner, and the owner's name and reputation, ordered by newest posts first.","SELECT p.Id AS PostId, p.Title, p.CreationDate AS PostCreationDate, p.ViewCount, p.Score, COUNT(DISTINCT c.Id) AS CommentCount, COUNT(DISTINCT a.Id) AS AnswerCount, u.DisplayName AS OwnerDisplayName, u.Reputation AS OwnerReputation, COUNT(DISTINCT v.Id) AS VoteCount, COUNT(DISTINCT b.Id) AS BadgeCount FROM Posts p LEFT JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Posts a ON p.Id = a.ParentId LEFT JOIN Votes v ON p.Id = v.PostId LEFT JOIN Badges b ON u.Id = b.UserId WHERE p.CreationDate >= DATE('2023-01-01') GROUP BY p.Id, p.Title, p.CreationDate, p.ViewCount, p.Score, u.DisplayName, u.Reputation ORDER BY p.CreationDate DESC;"
33282.sql,correct,,"The query retrieves the top 5 highest-scoring questions per user from the past year along with their vote counts and edit histories, ordered by score and creation date.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.CreationDate, p.Score, p.ViewCount, u.Id AS UserId, u.DisplayName AS OwnerDisplayName, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.Score DESC) AS RankPerUser FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.CreationDate >= cast('2024-10-01' as date) - INTERVAL '1 year' AND p.PostTypeId = 1 ), PostVoteCounts AS ( SELECT v.PostId, COUNT(CASE WHEN v.VoteTypeId = 2 THEN 1 END) AS UpVotes, COUNT(CASE WHEN v.VoteTypeId = 3 THEN 1 END) AS DownVotes FROM Votes v GROUP BY v.PostId ), AggregatedData AS ( SELECT rp.PostId, rp.Title, rp.CreationDate, rp.Score, rp.ViewCount, rp.OwnerDisplayName, COALESCE(pvc.UpVotes, 0) AS TotalUpVotes, COALESCE(pvc.DownVotes, 0) AS TotalDownVotes, rp.RankPerUser FROM RankedPosts rp LEFT JOIN PostVoteCounts pvc ON rp.PostId = pvc.PostId ), TopPosts AS ( SELECT PostId, Title, CreationDate, Score, ViewCount, OwnerDisplayName, TotalUpVotes, TotalDownVotes, RankPerUser FROM AggregatedData WHERE RankPerUser <= 5 ), PostHistorySummary AS ( SELECT ph.PostId, MIN(ph.CreationDate) AS FirstHistoryDate, COUNT(*) AS TotalEdits, SUM(CASE WHEN ph.PostHistoryTypeId = 10 THEN 1 ELSE 0 END) AS CloseVotes FROM PostHistory ph GROUP BY ph.PostId ) SELECT tp.PostId, tp.Title, tp.OwnerDisplayName, tp.CreationDate, tp.Score, tp.ViewCount, tp.TotalUpVotes, tp.TotalDownVotes, phs.FirstHistoryDate, phs.TotalEdits, phs.CloseVotes, CASE WHEN phs.TotalEdits > 0 THEN 'Edited' ELSE 'Not Edited' END AS EditStatus FROM TopPosts tp LEFT JOIN PostHistorySummary phs ON tp.PostId = phs.PostId ORDER BY tp.Score DESC, tp.CreationDate DESC;"
28524.sql,correct,,"This query finds the top tags with more than one post, lists details of the most active users who have answered questions, and shows statistics about posts using those tags, all combined and limited to the top 10 results.","WITH TagCount AS ( SELECT TRIM(tag) AS TagName, COUNT(*) AS PostCount FROM ( SELECT UNNEST(string_to_array(SUBSTRING(Tags FROM 2 FOR LENGTH(Tags) - 2), '><')) AS tag FROM Posts WHERE PostTypeId = 1 ) AS extracted_tags GROUP BY TRIM(tag) ), TopTags AS ( SELECT TagName, PostCount, ROW_NUMBER() OVER (ORDER BY PostCount DESC) AS Rank FROM TagCount WHERE PostCount > 1 ), MostActiveUsers AS ( SELECT Users.DisplayName, Users.Reputation, COUNT(Posts.Id) AS QuestionsAnswered, SUM(COALESCE(Posts.AnswerCount, 0)) AS TotalAnswers, SUM(COALESCE(Posts.Score, 0)) AS TotalScore FROM Users JOIN Posts ON Users.Id = Posts.OwnerUserId WHERE Posts.PostTypeId = 2 GROUP BY Users.DisplayName, Users.Reputation ), TagUsage AS ( SELECT Posts.Id AS PostId, Posts.Title, Posts.CreationDate, UNNEST(string_to_array(SUBSTRING(Posts.Tags FROM 2 FOR LENGTH(Posts.Tags) - 2), '><')) AS TagName, Users.DisplayName AS Owner FROM Posts JOIN Users ON Posts.OwnerUserId = Users.Id WHERE Posts.PostTypeId = 1 ) SELECT TopTags.TagName, TopTags.PostCount, MostActiveUsers.DisplayName, MostActiveUsers.Reputation, MostActiveUsers.QuestionsAnswered, MostActiveUsers.TotalAnswers, MostActiveUsers.TotalScore, COUNT(TagUsage.PostId) AS TagPostCount, MIN(TagUsage.CreationDate) AS EarliestPostDate, MAX(TagUsage.CreationDate) AS LatestPostDate FROM TopTags JOIN TagUsage ON TopTags.TagName = TagUsage.TagName JOIN MostActiveUsers ON TagUsage.Owner = MostActiveUsers.DisplayName GROUP BY TopTags.TagName, TopTags.PostCount, MostActiveUsers.DisplayName, MostActiveUsers.Reputation, MostActiveUsers.QuestionsAnswered, MostActiveUsers.TotalAnswers, MostActiveUsers.TotalScore ORDER BY TopTags.PostCount DESC, MostActiveUsers.TotalScore DESC LIMIT 10;"
17408.sql,correct,,"The query retrieves the top 10 most recent questions with their title, creation date, owner's name, score, view count, and number of comments.","SELECT p.Title, p.CreationDate, u.DisplayName AS OwnerDisplayName, p.Score, p.ViewCount, COUNT(c.Id) AS CommentCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId WHERE p.PostTypeId = 1 GROUP BY p.Title, p.CreationDate, u.DisplayName, p.Score, p.ViewCount, p.Id ORDER BY p.CreationDate DESC LIMIT 10;"
19586.sql,correct,,"This query retrieves the top 10 users with the highest number of posts, showing their ID, display name, total posts, number of questions, and number of answers.","SELECT u.Id AS UserId, u.DisplayName, COUNT(p.Id) AS PostCount, SUM(CASE WHEN p.PostTypeId = 1 THEN 1 ELSE 0 END) AS QuestionCount, SUM(CASE WHEN p.PostTypeId = 2 THEN 1 ELSE 0 END) AS AnswerCount FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.Id, u.DisplayName ORDER BY PostCount DESC LIMIT 10;"
12940.sql,almost,"The post count does not account for duplicates due to the join with votes and badges, a distinct count should be used.","The query calculates various activity metrics for each user—including post count, total bounty earned, upvotes, downvotes, badge count, and total post views—and ranks users by their total views and post counts.","WITH UserActivity AS ( SELECT u.Id AS UserId, u.DisplayName, COUNT(p.Id) AS PostCount, SUM(v.BountyAmount) AS TotalBounty, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN v.VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes, SUM(CASE WHEN b.Id IS NOT NULL THEN 1 ELSE 0 END) AS BadgeCount, SUM(COALESCE(p.ViewCount, 0)) AS TotalViews FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId LEFT JOIN Votes v ON p.Id = v.PostId LEFT JOIN Badges b ON u.Id = b.UserId GROUP BY u.Id, u.DisplayName ) SELECT ua.DisplayName, ua.PostCount, ua.TotalBounty, ua.UpVotes, ua.DownVotes, ua.BadgeCount, ua.TotalViews, RANK() OVER (ORDER BY ua.TotalViews DESC) AS ViewRank, RANK() OVER (ORDER BY ua.PostCount DESC) AS PostRank FROM UserActivity ua ORDER BY ua.TotalViews DESC, ua.PostCount DESC;"
14250.sql,incorrect,"Incorrect join between userid and postid.","This query retrieves each user's post statistics including count, total score, average views, along with edit counts and last edit dates of their posts, ordered by total score and post count in descending order.","WITH UserPostStats AS ( SELECT u.Id AS UserId, COUNT(p.Id) AS PostCount, SUM(COALESCE(p.Score, 0)) AS TotalScore, AVG(COALESCE(p.ViewCount, 0)) AS AvgViewCount, AVG(COALESCE(p.AcceptedAnswerId, 0)) AS AcceptedAnswerRatio FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.Id ), PostHistoryStats AS ( SELECT ph.PostId, COUNT(ph.Id) AS EditCount, MAX(ph.CreationDate) AS LastEdited FROM PostHistory ph GROUP BY ph.PostId ), FinalStats AS ( SELECT up.UserId, up.PostCount, up.TotalScore, up.AvgViewCount, ph.EditCount, ph.LastEdited FROM UserPostStats up LEFT JOIN PostHistoryStats ph ON up.UserId = ph.PostId ) SELECT UserId, PostCount, TotalScore, AvgViewCount, EditCount, LastEdited FROM FinalStats ORDER BY TotalScore DESC, PostCount DESC;"
15997.sql,correct,,"The query retrieves the top 10 highest-scoring questions along with their authors' names, titles, creation dates, scores, and the number of comments each question has.","SELECT U.DisplayName AS UserName, P.Title AS PostTitle, P.CreationDate AS PostDate, P.Score AS PostScore, COUNT(C.Id) AS CommentCount FROM Posts P JOIN Users U ON P.OwnerUserId = U.Id LEFT JOIN Comments C ON P.Id = C.PostId WHERE P.PostTypeId = 1 GROUP BY U.DisplayName, P.Title, P.CreationDate, P.Score ORDER BY PostScore DESC LIMIT 10;"
28152.sql,correct,,"This query retrieves the top 10 highest-scoring questions with their tags, comment counts, and owner information, selecting up to the top 5 posts per tag based on upvotes.","WITH RankedPosts AS ( SELECT p.Id AS PostId, p.Title, p.Tags, COUNT(c.Id) AS CommentCount, COALESCE(v.UpVotes, 0) - COALESCE(v.DownVotes, 0) AS Score, ROW_NUMBER() OVER (PARTITION BY p.Tags ORDER BY COALESCE(v.UpVotes, 0) DESC) AS TagRank FROM Posts p LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN (SELECT PostId, SUM(CASE WHEN VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVotes, SUM(CASE WHEN VoteTypeId = 3 THEN 1 ELSE 0 END) AS DownVotes FROM Votes GROUP BY PostId) v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY p.Id, p.Title, p.Tags, v.UpVotes, v.DownVotes ), TopPosts AS ( SELECT rp.PostId, rp.Title, rp.Tags, rp.CommentCount, rp.Score FROM RankedPosts rp WHERE rp.TagRank <= 5 ) SELECT tp.Title, tp.Tags, tp.CommentCount, tp.Score, U.DisplayName AS OwnerDisplayName, U.Reputation AS OwnerReputation FROM TopPosts tp JOIN Users U ON tp.PostId IN (SELECT Id FROM Posts WHERE OwnerUserId = U.Id) ORDER BY tp.Score DESC, tp.CommentCount DESC LIMIT 10;"
15899.sql,almost,"The comment count does not account for duplicates due to the join with votes, a distinct count should be used. The up vote count does not account for duplicates due to the join with comments.","This query retrieves the title, creation date, owner's name, number of comments, and number of upvotes for the 10 most recent questions.","SELECT p.Title, p.CreationDate, u.DisplayName AS OwnerName, COUNT(c.Id) AS CommentCount, SUM(CASE WHEN v.VoteTypeId = 2 THEN 1 ELSE 0 END) AS UpVoteCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id LEFT JOIN Comments c ON p.Id = c.PostId LEFT JOIN Votes v ON p.Id = v.PostId WHERE p.PostTypeId = 1 GROUP BY p.Title, p.CreationDate, u.DisplayName ORDER BY p.CreationDate DESC LIMIT 10;"
19790.sql,correct,,"This query retrieves the 10 most recent questions along with their details and the display names of their owners.","SELECT p.Id AS PostId, p.Title, p.CreationDate, u.DisplayName AS OwnerDisplayName, p.Score, p.ViewCount, p.AnswerCount FROM Posts p JOIN Users u ON p.OwnerUserId = u.Id WHERE p.PostTypeId = 1 ORDER BY p.CreationDate DESC LIMIT 10;"
4812.sql,correct,,"The query lists users with over 1000 reputation who have more than 100 total post views, showing their post counts, total views, badge counts, highest badge class, and their most recent post within the last 30 days, ordered by post count, total views, and badge count.","WITH MostActiveUsers AS ( SELECT u.Id, u.DisplayName, COUNT(p.Id) AS PostCount, SUM(COALESCE(p.ViewCount, 0)) AS TotalViews FROM Users u JOIN Posts p ON u.Id = p.OwnerUserId WHERE u.Reputation > 1000 GROUP BY u.Id, u.DisplayName ), UserBadges AS ( SELECT b.UserId, COUNT(b.Id) AS BadgeCount, MAX(b.Class) AS HighestBadgeClass FROM Badges b GROUP BY b.UserId ), UserPostStats AS ( SELECT ua.Id, ua.DisplayName, ua.PostCount, ua.TotalViews, COALESCE(ub.BadgeCount, 0) AS BadgeCount, COALESCE(ub.HighestBadgeClass, 0) AS HighestBadgeClass FROM MostActiveUsers ua LEFT JOIN UserBadges ub ON ua.Id = ub.UserId ), RecentPosts AS ( SELECT p.Id, p.Title, p.CreationDate, p.OwnerUserId, ROW_NUMBER() OVER (PARTITION BY p.OwnerUserId ORDER BY p.CreationDate DESC) AS rn FROM Posts p WHERE p.CreationDate > cast('2024-10-01 12:34:56' as timestamp) - INTERVAL '30 days' ) SELECT ups.DisplayName, ups.PostCount, ups.TotalViews, ups.BadgeCount, ups.HighestBadgeClass, rp.Title AS LatestPostTitle, rp.CreationDate AS LatestPostDate FROM UserPostStats ups LEFT JOIN RecentPosts rp ON ups.Id = rp.OwnerUserId AND rp.rn = 1 WHERE ups.TotalViews > 100 ORDER BY ups.PostCount DESC, ups.TotalViews DESC, ups.BadgeCount DESC;"
