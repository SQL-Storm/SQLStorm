
WITH CustomerStats AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_credit_rating,
        COALESCE(cd.cd_purchase_estimate, 0) AS purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY COALESCE(cd.cd_purchase_estimate, 0) DESC) AS rank,
        COALESCE(SUM(ss.ss_sales_price) OVER (PARTITION BY c.c_customer_sk), 0) AS total_sales
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    WHERE 
        c.c_birth_year >= 1980 AND 
        cd.cd_marital_status IN ('M', 'S') AND 
        (cd.cd_credit_rating IS NOT NULL OR cd.cd_credit_rating LIKE '%S%')
)
SELECT 
    cs.c_first_name,
    cs.c_last_name,
    cs.cd_gender,
    CASE 
        WHEN cs.total_sales = 0 THEN 'No Purchases'
        WHEN cs.total_sales < 500 THEN 'Low Value Customer'
        WHEN cs.total_sales < 1000 THEN 'Medium Value Customer'
        ELSE 'High Value Customer'
    END AS customer_value,
    cs.purchase_estimate,
    COUNT(DISTINCT ss.ss_item_sk) AS unique_items_purchased,
    SUM(ss.ss_ext_discount_amt) AS total_discounts
FROM CustomerStats cs
LEFT JOIN store_sales ss ON cs.c_customer_sk = ss.ss_customer_sk
WHERE cs.rank <= 10 AND (ss.ss_sold_date_sk BETWEEN 20220101 AND 20221231 OR ss.ss_sold_date_sk IS NULL)
GROUP BY cs.c_first_name, cs.c_last_name, cs.cd_gender, cs.purchase_estimate
HAVING SUM(ss.ss_net_paid) > 100
ORDER BY customer_value DESC, cs.purchase_estimate DESC
LIMIT 50 OFFSET 0;
