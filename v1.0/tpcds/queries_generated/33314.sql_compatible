
WITH RECURSIVE sales_data AS (
    SELECT 
        cs.item_sk,
        SUM(cs.ext_sales_price) AS total_sales,
        COUNT(DISTINCT cs.order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY cs.item_sk ORDER BY SUM(cs.ext_sales_price) DESC) AS rank
    FROM 
        catalog_sales cs
    GROUP BY 
        cs.item_sk
),
customer_ranks AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_credit_rating,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_credit_rating ORDER BY SUM(ws.ws_sales_price) DESC) AS rank_per_credit 
    FROM 
        customer c 
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_credit_rating
),
high_sales_items AS (
    SELECT 
        sd.item_sk,
        sd.total_sales
    FROM 
        sales_data sd
    WHERE 
        sd.rank <= 10
)
SELECT 
    cr.c_customer_sk,
    cr.c_first_name,
    cr.c_last_name,
    hr.item_sk,
    COALESCE(hr.total_sales, 0) AS total_sales,
    COALESCE(hr.total_sales, 0) AS adjusted_sales,
    CASE 
        WHEN cr.rank_per_credit <= 5 THEN 'High Credit'
        ELSE 'Low Credit'
    END AS customer_credit_category
FROM 
    customer_ranks cr
LEFT JOIN 
    high_sales_items hr ON cr.c_customer_sk = hr.item_sk
WHERE 
    hr.total_sales IS NOT NULL OR cr.rank_per_credit IS NOT NULL
ORDER BY 
    cr.c_customer_sk, adjusted_sales DESC;
