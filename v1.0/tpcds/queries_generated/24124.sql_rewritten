WITH RecursiveAddress AS (
    SELECT 
        ca_address_sk, 
        ca_address_id, 
        ca_city, 
        ca_state 
    FROM 
        customer_address 
    WHERE 
        ca_state IS NOT NULL
    UNION ALL
    SELECT 
        ca_address_sk, 
        ca_address_id, 
        ca_city, 
        ca_state 
    FROM 
        customer_address a
    JOIN 
        RecursiveAddress r ON a.ca_address_sk = r.ca_address_sk 
),
AggregatedSales AS (
    SELECT 
        ws_bill_customer_sk, 
        SUM(ws_net_profit) AS total_profit, 
        COUNT(DISTINCT ws_order_number) AS order_count 
    FROM 
        web_sales 
    GROUP BY 
        ws_bill_customer_sk
),
CustomerInfo AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        cd.cd_gender, 
        cd.cd_marital_status, 
        cd.cd_credit_rating, 
        ad.ca_city, 
        ad.ca_state 
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk 
    LEFT JOIN 
        customer_address ad ON c.c_current_addr_sk = ad.ca_address_sk
),
FilteredSales AS (
    SELECT 
        c.c_customer_sk,
        cs.cs_item_sk,
        cs.cs_sales_price,
        CASE 
            WHEN cs.cs_sales_price - cs.cs_ext_discount_amt < 0 THEN 0 
            ELSE cs.cs_sales_price - cs.cs_ext_discount_amt 
        END AS net_price 
    FROM 
        catalog_sales cs 
    JOIN 
        CustomerInfo c ON c.c_customer_sk = cs.cs_bill_customer_sk
    WHERE 
        c.ca_state IN (SELECT DISTINCT ca_state FROM RecursiveAddress) 
        AND cs.cs_ext_sales_price > (SELECT AVG(ws_ext_sales_price) FROM web_sales) 
)
SELECT 
    ci.c_first_name,
    ci.c_last_name,
    ci.ca_city,
    ci.ca_state,
    COALESCE(fs.net_price, 0) AS item_price,
    COUNT(DISTINCT fs.cs_item_sk) AS item_count,
    SUM(fs.net_price) OVER(PARTITION BY ci.c_customer_sk) AS total_spent,
    ROW_NUMBER() OVER(PARTITION BY ci.c_city ORDER BY SUM(fs.net_price) DESC) AS rank_within_city
FROM 
    CustomerInfo ci
LEFT JOIN 
    FilteredSales fs ON ci.c_customer_sk = fs.c_customer_sk
GROUP BY 
    ci.c_first_name, ci.c_last_name, ci.ca_city, ci.ca_state, fs.net_price
HAVING 
    SUM(fs.net_price) IS NOT NULL 
ORDER BY 
    rank_within_city, ci.c_last_name ASC
LIMIT 
    (SELECT COUNT(*) FROM customer) * 0.1;