
WITH RankedSales AS (
    SELECT 
        ws.web_site_id,
        ws.ws_sold_date_sk,
        ws.ws_item_sk,
        ws.ws_quantity,
        ws.ws_sales_price,
        RANK() OVER (PARTITION BY ws.web_site_id ORDER BY ws.ws_sold_date_sk DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        date_dim dd ON dd.d_date_sk = ws.ws_sold_date_sk
    WHERE 
        dd.d_year = 2023
        AND ws.ws_sales_price IS NOT NULL
),
TotalReturns AS (
    SELECT 
        wr.wr_returning_customer_sk,
        SUM(wr.wr_return_quantity) AS total_returned,
        COUNT(*) AS return_count,
        CASE 
            WHEN SUM(wr.wr_return_amt) > 100 THEN 'High Value'
            WHEN SUM(wr.wr_return_amt) BETWEEN 50 AND 100 THEN 'Medium Value'
            ELSE 'Low Value'
        END AS return_value_category
    FROM 
        web_returns wr
    GROUP BY 
        wr.wr_returning_customer_sk
),
FinalReport AS (
    SELECT 
        cs.c_customer_id,
        cs.c_first_name,
        cs.c_last_name,
        COALESCE(rs.total_sales, 0) AS total_sales,
        COALESCE(tr.total_returned, 0) AS total_returned,
        COALESCE(tr.return_value_category, 'No Returns') AS return_category,
        DENSE_RANK() OVER (ORDER BY COALESCE(rs.total_sales, 0) - COALESCE(tr.total_returned, 0) DESC) AS customer_rank
    FROM 
        customer cs
    LEFT JOIN 
        (SELECT 
            ws.ws_bill_customer_sk AS customer_sk,
            SUM(ws.ws_sales_price * ws.ws_quantity) AS total_sales
        FROM 
            web_sales ws
        GROUP BY 
            ws.ws_bill_customer_sk) rs ON cs.c_customer_sk = rs.customer_sk
    LEFT JOIN 
        TotalReturns tr ON cs.c_customer_sk = tr.wr_returning_customer_sk
)
SELECT 
    fr.c_customer_id,
    fr.c_first_name,
    fr.c_last_name,
    fr.total_sales,
    fr.total_returned,
    fr.return_category
FROM 
    FinalReport fr
WHERE 
    fr.customer_rank <= 10 
ORDER BY 
    fr.customer_rank;
