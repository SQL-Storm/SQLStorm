
WITH RankedReturns AS (
    SELECT 
        sr.returned_date_sk,
        sr.return_time_sk,
        sr.store_sk,
        COUNT(sr.return_quantity) AS total_returns,
        SUM(sr.return_amt_inc_tax) AS total_return_amount,
        ROW_NUMBER() OVER (PARTITION BY sr.store_sk ORDER BY SUM(sr.return_amt_inc_tax) DESC) AS return_rank
    FROM 
        store_returns sr
    GROUP BY 
        sr.returned_date_sk, 
        sr.return_time_sk, 
        sr.store_sk
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        SUM(ws.ws_net_paid) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_sk
),
FilteredCustomers AS (
    SELECT 
        cs.c_customer_sk,
        cs.total_spent,
        cs.total_orders,
        cd.cd_gender,
        cd.cd_marital_status
    FROM 
        CustomerStats cs
    JOIN 
        customer_demographics cd ON cs.c_customer_sk = cd.cd_demo_sk
    WHERE 
        cs.total_spent > 500
),
SalesData AS (
    SELECT 
        ss.ss_store_sk,
        SUM(ss.ss_net_paid) AS total_store_sales,
        AVG(ss.ss_sales_price) AS avg_sales_price
    FROM 
        store_sales ss
    GROUP BY 
        ss.ss_store_sk
)
SELECT 
    fs.c_customer_sk, 
    fs.total_spent,
    fs.total_orders,
    fs.cd_gender,
    fs.cd_marital_status,
    sd.total_store_sales,
    sd.avg_sales_price,
    rr.total_returns,
    rr.total_return_amount
FROM 
    FilteredCustomers fs
LEFT JOIN 
    SalesData sd ON fs.store_sk = sd.ss_store_sk
LEFT JOIN 
    RankedReturns rr ON fs.c_customer_sk = rr.returned_date_sk
WHERE 
    fs.cd_gender IS NOT NULL
    AND (fs.cd_marital_status = 'M' OR fs.cd_marital_status IS NULL)
ORDER BY 
    fs.total_spent DESC, sd.total_store_sales DESC;
