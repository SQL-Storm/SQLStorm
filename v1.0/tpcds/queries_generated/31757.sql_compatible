
WITH RECURSIVE item_hierarchy AS (
    SELECT i_item_sk, i_item_id, i_item_desc, i_current_price, 
           1 AS level
    FROM item
    WHERE i_rec_start_date <= DATE '2002-10-01' AND 
          (i_rec_end_date IS NULL OR i_rec_end_date > DATE '2002-10-01')
    
    UNION ALL
    
    SELECT i.i_item_sk, i.i_item_id, i.i_item_desc, i.i_current_price, 
           ih.level + 1
    FROM item i
    JOIN item_hierarchy ih ON i.i_manager_id = ih.i_item_sk
)
SELECT
    c.c_customer_sk,
    CONCAT(c.c_first_name, ' ', c.c_last_name) AS customer_name,
    SUM(ss.ss_net_paid) AS total_spent,
    AVG(ss.ss_net_paid) AS average_spent,
    COUNT(DISTINCT ss.ss_ticket_number) AS total_transactions,
    MAX(i.i_current_price) AS max_item_price,
    MIN(i.i_current_price) AS min_item_price,
    ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ss.ss_net_paid) DESC) AS rank_within_customer,
    CASE 
        WHEN COUNT(DISTINCT ss.ss_ticket_number) = 0 THEN 'No Purchases'
        ELSE 'Active Customer'
    END AS customer_status
FROM customer c
LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
LEFT JOIN item_hierarchy i ON ss.ss_item_sk = i.i_item_sk
WHERE c.c_preferred_cust_flag = 'Y'
GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
HAVING total_spent > (
    SELECT AVG(net_spent)
    FROM (
        SELECT SUM(ss2.ss_net_paid) AS net_spent
        FROM customer c2
        JOIN store_sales ss2 ON c2.c_customer_sk = ss2.ss_customer_sk
        GROUP BY c2.c_customer_sk
    ) AS subquery
)
ORDER BY total_spent DESC
LIMIT 10;
