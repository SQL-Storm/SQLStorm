
WITH RECURSIVE sales_ranking AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        ws_sales_price,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY ws_sales_price DESC) AS rank
    FROM 
        web_sales
    WHERE 
        ws_sales_price IS NOT NULL
    UNION ALL
    SELECT 
        cs_sold_date_sk,
        cs_item_sk,
        cs_sales_price,
        DENSE_RANK() OVER (PARTITION BY cs_item_sk ORDER BY cs_sales_price DESC) AS rank
    FROM 
        catalog_sales
    WHERE 
        cs_sales_price IS NOT NULL
),
customer_sales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_net_profit) AS total_web_profit,
        SUM(cs.cs_net_profit) AS total_catalog_profit
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_ship_customer_sk
    LEFT JOIN 
        catalog_sales cs ON c.c_customer_sk = cs.cs_ship_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
sales_summary AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity_sold,
        AVG(ws.ws_net_profit) AS avg_profit,
        MIN(ws.ws_net_paid) AS min_price,
        MAX(ws.ws_net_paid) AS max_price
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_item_sk
)
SELECT 
    c.c_first_name,
    c.c_last_name,
    COALESCE(s.total_web_profit, 0) AS total_web_profit,
    COALESCE(s.total_catalog_profit, 0) AS total_catalog_profit,
    sr.rank,
    ss.total_quantity_sold,
    ss.avg_profit,
    ss.min_price,
    ss.max_price
FROM 
    customer_sales s
LEFT JOIN 
    sales_ranking sr ON s.c_customer_sk = sr.ws_item_sk
LEFT JOIN 
    sales_summary ss ON sr.ws_item_sk = ss.ws_item_sk
WHERE 
    (s.total_web_profit > 1000 OR s.total_catalog_profit > 1000)
    AND (sr.rank IS NULL OR sr.rank <= 5)
ORDER BY 
    s.total_web_profit DESC, s.total_catalog_profit DESC;
