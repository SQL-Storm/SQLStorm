
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws.web_site_id,
        COUNT(ws.order_number) AS total_orders,
        SUM(ws.net_profit) AS total_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_id ORDER BY SUM(ws.net_profit) DESC) AS ranking
    FROM web_sales ws
    JOIN customer c ON ws.bill_customer_sk = c.c_customer_sk
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_credit_rating IS NOT NULL
    GROUP BY ws.web_site_id
), inventory_summary AS (
    SELECT 
        i.item_id,
        SUM(inv_quantity_on_hand) AS total_quantity,
        MAX(i.current_price) AS max_price
    FROM inventory inv
    JOIN item i ON inv.inv_item_sk = i.i_item_sk
    GROUP BY i.item_id
), unusual_returns AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returns,
        CASE 
            WHEN SUM(sr_return_quantity) > 10 THEN 'High Return'
            WHEN SUM(sr_return_quantity) BETWEEN 1 AND 10 THEN 'Normal Return'
            ELSE 'No Return'
        END AS return_category
    FROM store_returns
    GROUP BY sr_item_sk
)
SELECT 
    ss.web_site_id,
    ss.total_orders,
    ss.total_profit,
    is.total_quantity,
    is.max_price,
    ur.total_returns,
    ur.return_category
FROM sales_summary ss
JOIN inventory_summary is ON ss.web_site_id = (SELECT web_site_id FROM web_site LIMIT 1)
LEFT JOIN unusual_returns ur ON ur.sr_item_sk IN (SELECT i.i_item_sk FROM item i WHERE i.current_price = (SELECT MAX(i2.current_price) FROM item i2))
WHERE ss.ranking <= 5 
ORDER BY ss.total_profit DESC
LIMIT 10;
