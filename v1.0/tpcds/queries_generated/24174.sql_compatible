
WITH RankedSales AS (
    SELECT 
        ws.web_site_id,
        ws.ws_order_number,
        ws.ws_quantity,
        ws.ws_net_paid,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_id ORDER BY ws.ws_net_paid DESC) as rank
    FROM 
        web_sales ws
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    WHERE 
        c.c_preferred_cust_flag = 'Y'
        AND ws.ws_net_paid > (
            SELECT AVG(ws2.ws_net_paid)
            FROM web_sales ws2
            WHERE ws2.ws_sold_date_sk BETWEEN 20150101 AND 20151231
        )
), 
SalesSummary AS (
    SELECT 
        rs.web_site_id,
        SUM(rs.ws_quantity) AS total_quantity,
        SUM(rs.ws_net_paid) AS total_net_paid
    FROM 
        RankedSales rs
    WHERE 
        rs.rank <= 10
    GROUP BY 
        rs.web_site_id
), 
FilteredSales AS (
    SELECT 
        s.web_site_id,
        s.total_quantity,
        s.total_net_paid,
        CASE 
            WHEN s.total_net_paid IS NULL OR s.total_quantity IS NULL THEN 'UNKNOWN' 
            ELSE CASE 
                WHEN s.total_net_paid > 10000 THEN 'HIGH'
                WHEN s.total_net_paid BETWEEN 5000 AND 10000 THEN 'MEDIUM'
                ELSE 'LOW'
            END
        END AS sale_category
    FROM 
        SalesSummary s
)
SELECT 
    f.web_site_id,
    f.total_quantity,
    f.total_net_paid,
    COALESCE(f.sale_category, 'N/A') AS sale_category,
    CASE 
        WHEN f.total_net_paid IS NOT NULL 
        THEN (SELECT MAX(s.ws_net_paid) FROM web_sales s WHERE s.ws_web_site_sk = f.web_site_id)
        ELSE NULL
    END AS max_net_paid
FROM 
    FilteredSales f
LEFT JOIN 
    inventory inv ON inv.inv_item_sk = f.total_quantity 
WHERE 
    f.total_quantity >= 1
    AND EXISTS (
        SELECT 1 
        FROM item i 
        WHERE i.i_item_sk = f.total_quantity 
        AND i.i_current_price IS NOT NULL
    )
ORDER BY 
    f.total_net_paid DESC
LIMIT 100;
