
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        s_store_sk,
        s_store_name,
        s_manager,
        1 AS level
    FROM store
    WHERE s_closed_date_sk IS NULL
    UNION ALL
    SELECT 
        ss.s_store_sk,
        s.s_store_name,
        s.s_manager,
        sh.level + 1
    FROM store_sales ss
    JOIN sales_hierarchy sh ON ss.ss_store_sk = sh.s_store_sk
    JOIN store s ON s.s_store_sk = ss.ss_store_sk
    WHERE sh.level < 5
),
customer_info AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        COALESCE(hd.hd_income_band_sk, 0) AS income_band_sk,
        COALESCE(hd.hd_buy_potential, 'Unknown') AS buy_potential
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN household_demographics hd ON c.c_customer_sk = hd.hd_demo_sk
),
sales_analysis AS (
    SELECT 
        cs.cs_item_sk,
        SUM(cs.cs_sales_price) AS total_sales,
        COUNT(DISTINCT cs.cs_order_number) AS order_count,
        AVG(cs.cs_list_price) AS avg_list_price,
        MAX(cs.cs_sales_price) AS max_sale_price,
        MIN(cs.cs_sales_price) AS min_sale_price
    FROM catalog_sales cs
    WHERE cs.cs_sold_date_sk BETWEEN 2459215 AND 2459225 
    GROUP BY cs.cs_item_sk
)
SELECT 
    si.s_item_id,
    si.i_item_desc,
    sa.total_sales,
    sa.order_count,
    si.i_current_price,
    ci.c_first_name,
    ci.c_last_name,
    ci.cd_gender,
    ci.buy_potential,
    sh.s_store_name,
    sh.level,
    CASE 
        WHEN sa.total_sales > 10000 THEN 'High Performer'
        WHEN sa.total_sales BETWEEN 5000 AND 10000 THEN 'Moderate Performer'
        ELSE 'Low Performer'
    END AS performance_label
FROM sales_analysis sa
JOIN item si ON sa.cs_item_sk = si.i_item_sk
LEFT JOIN customer_info ci ON ci.c_customer_sk IN (SELECT DISTINCT ss.ss_customer_sk FROM store_sales ss WHERE ss.ss_item_sk = si.i_item_sk)
JOIN sales_hierarchy sh ON sh.s_store_sk = si.i_item_sk
WHERE si.i_current_price IS NOT NULL
ORDER BY sa.total_sales DESC, ci.c_last_name ASC;
