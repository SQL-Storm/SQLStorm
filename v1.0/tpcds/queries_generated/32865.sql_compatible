
WITH RECURSIVE sales_summary AS (
    SELECT 
        s_store_sk,
        SUM(ss_sales_price) AS total_sales,
        COUNT(ss_item_sk) AS total_items_sold,
        ROW_NUMBER() OVER (PARTITION BY s_store_sk ORDER BY SUM(ss_sales_price) DESC) AS sales_rank
    FROM store_sales 
    GROUP BY s_store_sk
    UNION ALL
    SELECT 
        s_store_sk, 
        SUM(ss_sales_price) + total_sales AS total_sales,
        COUNT(ss_item_sk) + total_items_sold AS total_items_sold,
        ROW_NUMBER() OVER (PARTITION BY s_store_sk ORDER BY SUM(ss_sales_price) DESC) AS sales_rank
    FROM store_sales 
    WHERE s_store_sk IN (SELECT s_store_sk FROM sales_summary)
    GROUP BY s_store_sk, total_sales, total_items_sold
),
filtered_sales AS (
    SELECT 
        s.s_store_id,
        ss.total_sales,
        ss.total_items_sold,
        ss.sales_rank AS rank
    FROM sales_summary ss
    JOIN store s ON ss.s_store_sk = s.s_store_sk
    WHERE ss.total_sales > (
        SELECT AVG(total_sales) 
        FROM sales_summary
    )
    AND ss.sales_rank <= 10
),
addresses AS (
    SELECT 
        ca_address_id,
        ca_city,
        ca_state
    FROM customer_address
    WHERE ca_country IS NOT NULL
),
customer_details AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_income_band_sk,
        ca.ca_city,
        ca.ca_state
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN addresses ca ON c.c_current_addr_sk = ca.ca_address_sk
)

SELECT 
    fs.s_store_id,
    COUNT(DISTINCT cd.c_customer_id) AS unique_customers,
    SUM(fs.total_sales) AS total_sales_value,
    AVG(fs.total_items_sold) AS avg_items_sold,
    STRING_AGG(CONCAT(cd.ca_city, ', ', cd.ca_state), '; ') AS customer_locations
FROM filtered_sales fs
JOIN customer_details cd ON cd.cd_income_band_sk IN (
    SELECT 
        ib_income_band_sk 
    FROM income_band 
    WHERE ib_lower_bound <= (1000 + RANDOM() * 1000) AND ib_upper_bound >= (1000 + RANDOM() * 1000)
)
GROUP BY fs.s_store_id
ORDER BY total_sales_value DESC;
