
WITH RECURSIVE sales_cte AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk BETWEEN 1 AND 30  
    GROUP BY 
        ws_item_sk
    UNION ALL
    SELECT 
        cs_item_sk,
        SUM(cs_quantity) AS total_quantity,
        SUM(cs_sales_price) AS total_sales
    FROM 
        catalog_sales
    WHERE 
        cs_sold_date_sk BETWEEN 1 AND 30
    GROUP BY 
        cs_item_sk
),
item_sales AS (
    SELECT
        i.i_item_id,
        COALESCE(s.total_quantity, 0) AS total_quantity,
        COALESCE(s.total_sales, 0) AS total_sales
    FROM 
        item i
    LEFT JOIN 
        (SELECT 
            ws_item_sk, 
            SUM(total_quantity) AS total_quantity, 
            SUM(total_sales) AS total_sales
         FROM 
            sales_cte 
         GROUP BY 
            ws_item_sk) s ON i.i_item_sk = s.ws_item_sk
    WHERE 
        i.i_current_price IS NOT NULL
),
customer_rank AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_age_group,
        RANK() OVER (PARTITION BY cd.cd_gender ORDER BY SUM(s.total_sales) DESC) AS gender_rank,
        RANK() OVER (PARTITION BY cd.cd_age_group ORDER BY SUM(s.total_sales) DESC) AS age_rank
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN 
        store_sales s ON c.c_customer_sk = s.ss_customer_sk
    GROUP BY 
        c.c_customer_id, cd.cd_gender, cd.cd_age_group
),
final_sales AS (
    SELECT 
        i.i_item_id,
        is.total_quantity,
        is.total_sales,
        cr.c_customer_id,
        cr.gender_rank,
        cr.age_rank
    FROM 
        item_sales is
    LEFT JOIN 
        customer_rank cr ON cr.gender_rank <= 10 
)
SELECT 
    fs.i_item_id,
    SUM(fs.total_quantity) AS total_quantity,
    SUM(fs.total_sales) AS total_sales,
    COUNT(DISTINCT fs.c_customer_id) AS unique_customers,
    CASE 
        WHEN SUM(fs.total_sales) IS NULL OR SUM(fs.total_sales) = 0 THEN 'No Sales'
        WHEN SUM(fs.total_sales) > 1000 THEN 'High Sales'
        ELSE 'Medium Sales'
    END AS sales_category
FROM 
    final_sales fs
GROUP BY 
    fs.i_item_id
ORDER BY 
    total_sales DESC
LIMIT 50 OFFSET 0;
