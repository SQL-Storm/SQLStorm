
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_bill_customer_sk AS customer_id,
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(ws_order_number) AS order_count,
        DENSE_RANK() OVER (ORDER BY SUM(ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        ws_bill_customer_sk
),
top_customers AS (
    SELECT
        c.c_customer_id,
        COALESCE(cd.cd_gender, 'Unknown') AS gender,
        COALESCE(cd.cd_marital_status, 'Unknown') AS marital_status,
        ss.total_sales,
        ss.order_count
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    INNER JOIN 
        sales_summary ss ON c.c_customer_sk = ss.customer_id
    WHERE 
        ss.sales_rank <= 100
),
store_sales_summary AS (
    SELECT 
        ss_store_sk,
        SUM(ss_net_paid) AS total_store_sales
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        ss_store_sk
)
SELECT 
    ts.c_customer_id,
    ts.gender,
    ts.marital_status,
    ts.total_sales,
    COALESCE(st.total_store_sales, 0) AS store_sales,
    ts.total_sales - COALESCE(st.total_store_sales, 0) AS online_vs_store_diff,
    (SELECT COUNT(DISTINCT wr_returning_customer_sk) FROM web_returns WHERE wr_returning_customer_sk = ts.c_customer_id) AS total_returns,
    CASE 
        WHEN ts.total_sales > 1000 THEN 'High Value Customer'
        ELSE 'Regular Customer' 
    END AS customer_type
FROM 
    top_customers ts
LEFT JOIN 
    store_sales_summary st ON ts.c_customer_id = CAST(st.ss_store_sk AS VARCHAR(16))
ORDER BY 
    ts.total_sales DESC;
