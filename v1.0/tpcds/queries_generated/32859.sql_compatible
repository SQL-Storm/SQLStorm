
WITH RECURSIVE price_history AS (
    SELECT 
        i_item_sk, 
        i_item_desc, 
        i_current_price, 
        i_rec_start_date, 
        i_rec_end_date,
        ROW_NUMBER() OVER (PARTITION BY i_item_sk ORDER BY i_rec_start_date DESC) AS price_rank
    FROM 
        item
    WHERE 
        i_rec_start_date IS NOT NULL
),
sales_data AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_quantity) AS total_sales,
        SUM(ws_net_paid) AS total_revenue,
        COUNT(DISTINCT ws_order_number) AS order_count
    FROM 
        web_sales
    LEFT JOIN 
        date_dim ON ws_sold_date_sk = d_date_sk
    WHERE 
        d_year = 2023
    GROUP BY 
        ws_item_sk
),
customer_segment AS (
    SELECT 
        c_customer_sk, 
        CASE 
            WHEN cd_income_band_sk IS NULL THEN 'Unknown' 
            WHEN cd_income_band_sk BETWEEN 1 AND 5 THEN 'Low Income'
            WHEN cd_income_band_sk BETWEEN 6 AND 10 THEN 'Middle Income'
            ELSE 'High Income'
        END AS income_segment
    FROM 
        customer 
    LEFT JOIN 
        household_demographics ON c_current_hdemo_sk = hd_demo_sk
),
return_summary AS (
    SELECT 
        sr_item_sk, 
        COUNT(sr_return_quantity) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS total_return_value
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
)
SELECT 
    ih.i_item_desc,
    ih.i_current_price,
    sd.total_sales,
    sd.total_revenue,
    cs.income_segment,
    rs.total_returns,
    rs.total_return_value,
    (COALESCE(sd.total_revenue, 0) - COALESCE(rs.total_return_value, 0)) AS net_revenue
FROM 
    price_history ih
JOIN 
    sales_data sd ON ih.i_item_sk = sd.ws_item_sk
LEFT JOIN 
    customer_segment cs ON ih.i_item_sk = cs.c_customer_sk
LEFT JOIN 
    return_summary rs ON ih.i_item_sk = rs.sr_item_sk
WHERE 
    ih.price_rank = 1
ORDER BY 
    net_revenue DESC
FETCH FIRST 10 ROWS ONLY;
