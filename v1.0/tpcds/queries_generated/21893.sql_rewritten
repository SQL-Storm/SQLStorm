WITH RECURSIVE address_tree AS (
    SELECT ca_address_sk, ca_address_id, 0 AS level
    FROM customer_address
    WHERE ca_city IS NOT NULL
    UNION ALL
    SELECT ca.ca_address_sk, ca.ca_address_id, at.level + 1
    FROM customer_address ca
    JOIN address_tree at ON ca.ca_address_sk = at.ca_address_sk
    WHERE ca.ca_street_number IS NOT NULL AND at.level < 2
),
customer_sales AS (
    SELECT
        c.c_customer_sk,
        SUM(ws.ws_net_paid) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ws.ws_net_paid) DESC) AS rn
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE ws.ws_sold_date_sk = (
        SELECT MAX(ws2.ws_sold_date_sk)
        FROM web_sales ws2
        WHERE ws2.ws_bill_customer_sk = c.c_customer_sk
    )
    GROUP BY c.c_customer_sk
),
top_customers AS (
    SELECT 
        cs.c_customer_sk, cs.total_spent
    FROM customer_sales cs
    WHERE cs.order_count > 5
    ORDER BY cs.total_spent DESC
    LIMIT 10
),
inventory_summary AS (
    SELECT 
        inv.inv_item_sk,
        SUM(inv.inv_quantity_on_hand) AS total_inventory,
        MAX(inv_date_sk) AS last_inventory_date
    FROM inventory inv
    GROUP BY inv.inv_item_sk
),
purchase_data AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_net_profit,
        COALESCE(ws.ws_coupon_amt, 0) AS coupon_amt,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_net_paid DESC) AS item_rank
    FROM web_sales ws
    LEFT JOIN store_sales ss ON ws.ws_item_sk = ss.ss_item_sk 
    WHERE ss.ss_sold_date_sk IS NULL OR ss.ss_sold_date_sk > DATEADD(day, -30, cast('2002-10-01' as date))
),
returns_summary AS (
    SELECT 
        wr.wr_item_sk,
        SUM(wr.wr_return_quantity) AS total_returned,
        COUNT(*) AS total_returns,
        DENSE_RANK() OVER (ORDER BY SUM(wr.wr_return_quantity) DESC) AS return_rank
    FROM web_returns wr
    GROUP BY wr.wr_item_sk
)
SELECT 
    a.ca_address_id,
    tc.c_customer_sk,
    tc.total_spent,
    ts.total_inventory,
    pd.ws_net_profit,
    r.total_returned,
    CASE 
        WHEN pd.coupon_amt > 0 THEN 'Has Coupon'
        ELSE 'No Coupon'
    END AS coupon_status
FROM address_tree a
JOIN top_customers tc ON EXISTS (
    SELECT 1
    FROM customer cus
    WHERE cus.c_current_addr_sk = a.ca_address_sk
      AND cus.c_customer_sk = tc.c_customer_sk
)
JOIN inventory_summary ts ON ts.inv_item_sk IN (
    SELECT cs.cs_item_sk
    FROM catalog_sales cs
    WHERE cs.cs_order_number IN (
        SELECT ws.ws_order_number
        FROM web_sales ws
        WHERE ws.ws_bill_customer_sk = tc.c_customer_sk
    )
)
JOIN purchase_data pd ON pd.ws_item_sk = ts.inv_item_sk
LEFT JOIN returns_summary r ON r.wr_item_sk = pd.ws_item_sk
WHERE r.total_returned IS NULL OR r.total_returned < 5
ORDER BY total_spent DESC, total_inventory DESC, coupon_status;