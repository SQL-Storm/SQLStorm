WITH RECURSIVE CustomerChain AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year,
           COALESCE(ha.hd_income_band_sk, -1) AS income_band,
           CASE 
               WHEN c.c_birth_year IS NULL THEN 'Unknown'
               WHEN c.c_birth_year > 1980 THEN 'Millennial'
               WHEN c.c_birth_year BETWEEN 1965 AND 1980 THEN 'Gen X'
               ELSE 'Baby Boomer'
           END AS generation
    FROM customer c
    LEFT JOIN household_demographics ha ON c.c_current_hdemo_sk = ha.hd_demo_sk
    WHERE c.c_first_name IS NOT NULL
    
    UNION ALL
    
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year,
           COALESCE(ha.hd_income_band_sk, -1) AS income_band,
           CASE 
               WHEN c.c_birth_year IS NULL THEN 'Unknown'
               WHEN c.c_birth_year > 1980 THEN 'Millennial'
               WHEN c.c_birth_year BETWEEN 1965 AND 1980 THEN 'Gen X'
               ELSE 'Baby Boomer'
           END AS generation
    FROM customer c
    JOIN CustomerChain cc ON cc.c_customer_sk = c.c_current_hdemo_sk
)
SELECT 
    cc.c_customer_sk,
    cc.c_first_name,
    cc.c_last_name,
    cc.generation,
    COUNT(DISTINCT sr.ticket_number) AS total_returns,
    SUM(sr.return_quantity) AS total_returned_items,
    AVG(sr.return_amt) AS avg_return_amount,
    MAX(sr.return_tax) AS max_return_tax
FROM CustomerChain cc
LEFT JOIN store_returns sr ON cc.c_customer_sk = sr.sr_customer_sk
WHERE cc.income_band IS NOT NULL
  AND EXISTS (
      SELECT 1
      FROM date_dim dd
      WHERE dd.d_year = EXTRACT(YEAR FROM cast('2002-10-01' as date)) 
        AND dd.d_date_sk = sr.sr_returned_date_sk
        AND dd.d_holiday IS NULL
  )
GROUP BY cc.c_customer_sk, cc.c_first_name, cc.c_last_name, cc.generation
HAVING COUNT(DISTINCT sr.ticket_number) > 5
ORDER BY total_returned_items DESC
LIMIT 10;