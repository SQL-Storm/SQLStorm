
WITH RECURSIVE AddressHierarchy AS (
    SELECT ca_address_sk, ca_city, ca_state, ca_zip, ca_country
    FROM customer_address
    WHERE ca_country IS NOT NULL
    UNION ALL
    SELECT a.ca_address_sk, a.ca_city, a.ca_state, a.ca_zip, a.ca_country
    FROM customer_address a
    JOIN AddressHierarchy ah ON a.ca_address_sk = ah.ca_address_sk
    WHERE a.ca_state IS NOT NULL AND a.ca_country = ah.ca_country
),
CustomerDemographics AS (
    SELECT cd_demo_sk, cd_gender, 
           CASE 
               WHEN cd_marital_status = 'M' THEN 'Married'
               ELSE 'Single'
           END AS marital_status,
           cd_purchase_estimate,
           DENSE_RANK() OVER (PARTITION BY cd_gender ORDER BY cd_purchase_estimate DESC) AS gender_rank
    FROM customer_demographics
    WHERE cd_purchase_estimate IS NOT NULL
),
SalesSummary AS (
    SELECT ws_bill_customer_sk, SUM(ws_net_profit) AS total_profit,
           AVG(ws_net_paid) AS avg_net_paid
    FROM web_sales
    GROUP BY ws_bill_customer_sk
)
SELECT 
    c.c_customer_id,
    ca.ca_city,
    ca.ca_state,
    ca.ca_zip,
    cd.marital_status,
    SUM(ss.total_profit) AS overall_profit,
    CASE 
        WHEN COUNT(DISTINCT cd.cd_demo_sk) = 0 THEN 'No Demographics'
        ELSE STRING_AGG(DISTINCT cd.cd_gender || ': ' || CAST(cd.gender_rank AS TEXT), ', ' ORDER BY cd.gender_rank)
    END AS gender_rankings,
    MAX(ss.avg_net_paid) AS max_avg_net_paid,
    COUNT(DISTINCT ca.ca_address_sk) AS unique_addresses,
    COUNT(DISTINCT cs.cs_order_number) AS unique_catalog_sales
FROM customer c
LEFT JOIN AddressHierarchy ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN CustomerDemographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
LEFT JOIN SalesSummary ss ON c.c_customer_sk = ss.ws_bill_customer_sk
LEFT JOIN catalog_sales cs ON cs.cs_bill_customer_sk = c.c_customer_sk
WHERE ca.ca_zip IS NOT NULL 
  AND ca.ca_state IN ('CA', 'TX', 'NY') 
  AND (cd.cd_purchase_estimate > 1000 OR cd.cd_purchase_estimate IS NULL)
GROUP BY c.c_customer_id, ca.ca_city, ca.ca_state, ca.ca_zip, cd.marital_status
HAVING SUM(ss.total_profit) IS NOT NULL
ORDER BY overall_profit DESC
LIMIT 10;
