
WITH RECURSIVE customer_tree AS (
    SELECT 
        c.c_customer_sk, 
        c.c_customer_id, 
        cd.cd_gender, 
        ARRAY_LENGTH(ARRAY[cd.cd_dep_count, cd.cd_dep_employed_count, cd.cd_dep_college_count]) AS dep_info_count
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_marital_status = 'M'
    UNION ALL
    SELECT 
        ct.c_customer_sk, 
        ct.c_customer_id, 
        cd.cd_gender, 
        ARRAY_LENGTH(ARRAY[cd.cd_dep_count, cd.cd_dep_employed_count, cd.cd_dep_college_count]) AS dep_info_count
    FROM 
        customer_tree ct
    JOIN 
        customer c ON c.c_current_cdemo_sk = ct.c_customer_sk
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_marital_status = 'S'
),
sales_info AS (
    SELECT 
        ws.ws_sold_date_sk, 
        SUM(ws.ws_sales_price) AS total_sales_price
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_sold_date_sk
),
inventory_status AS (
    SELECT 
        inv.inv_item_sk, 
        CASE 
            WHEN inv.inv_quantity_on_hand IS NULL THEN 'OUT OF STOCK'
            ELSE 'IN STOCK'
        END AS stock_status
    FROM 
        inventory inv
    WHERE 
        inv.inv_quantity_on_hand < 1
    UNION 
    SELECT 
        inv.inv_item_sk, 
        'IN STOCK' AS stock_status
    FROM 
        inventory inv
    WHERE 
        inv.inv_quantity_on_hand >= 1
),
top_items AS (
    SELECT 
        i.i_item_id,
        SUM(ws.ws_quantity) AS total_quantity_sold,
        ROW_NUMBER() OVER (PARTITION BY i.i_item_id ORDER BY SUM(ws.ws_quantity) DESC) AS item_ranking
    FROM 
        item i
    JOIN 
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    WHERE 
        ws.ws_sold_date_sk IN (SELECT ws_sold_date_sk FROM sales_info)
    GROUP BY 
        i.i_item_id
)
SELECT 
    ca.ca_city,
    COUNT(DISTINCT ct.c_customer_id) AS unique_married_customers,
    AVG(ss.ss_net_paid) AS avg_net_paid,
    MAX(ss.ss_net_paid) AS max_item_price,
    STRING_AGG(DISTINCT inv.stock_status) AS stock_statuses,
    SUM(t.total_sales_price) AS total_daily_sales
FROM 
    customer_tree ct
LEFT JOIN 
    customer_address ca ON ct.c_customer_sk = ca.ca_address_sk
LEFT JOIN 
    store_sales ss ON ss.ss_customer_sk = ct.c_customer_sk
LEFT JOIN 
    inventory_status inv ON inv.inv_item_sk = ss.ss_item_sk
JOIN 
    sales_info t ON t.ws_sold_date_sk = ss.ss_sold_date_sk
JOIN 
    top_items tt ON tt.item_ranking <= 10
GROUP BY 
    ca.ca_city
HAVING 
    COUNT(DISTINCT ct.c_customer_id) > 50
    AND MAX(ss.ss_net_paid) IS NOT NULL
ORDER BY 
    unique_married_customers DESC, total_daily_sales DESC
LIMIT 10 OFFSET 0;
