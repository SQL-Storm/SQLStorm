
WITH RankedReturns AS (
    SELECT 
        sr_item_sk,
        sr_return_quantity,
        sr_return_amt,
        RANK() OVER (PARTITION BY sr_item_sk ORDER BY sr_return_amt DESC) AS ReturnRank
    FROM 
        store_returns
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT r.sr_item_sk) AS UniqueReturns,
        SUM(r.sr_return_quantity) AS TotalReturnQuantity,
        SUM(r.sr_return_amt) AS TotalReturnAmount
    FROM 
        customer c
    LEFT JOIN 
        RankedReturns r ON c.c_customer_sk = r.sr_customer_sk
    GROUP BY 
        c.c_customer_sk
),
SalesStats AS (
    SELECT 
        ws.ws_bill_customer_sk,
        SUM(ws.ws_quantity) AS TotalSalesQuantity,
        SUM(ws.ws_net_profit) AS TotalNetProfit
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_bill_customer_sk
),
FinalStats AS (
    SELECT 
        cs.c_customer_sk,
        COALESCE(cs.UniqueReturns, 0) AS UniqueReturns,
        COALESCE(cs.TotalReturnQuantity, 0) AS TotalReturnQuantity,
        COALESCE(cs.TotalReturnAmount, 0) AS TotalReturnAmount,
        COALESCE(ss.TotalSalesQuantity, 0) AS TotalSalesQuantity,
        COALESCE(ss.TotalNetProfit, 0) AS TotalNetProfit
    FROM 
        CustomerStats cs
    FULL OUTER JOIN 
        SalesStats ss ON cs.c_customer_sk = ss.ws_bill_customer_sk
)
SELECT 
    c.c_customer_id,
    f.UniqueReturns,
    f.TotalReturnQuantity,
    f.TotalReturnAmount,
    f.TotalSalesQuantity,
    f.TotalNetProfit,
    CASE 
        WHEN f.TotalNetProfit <= 0 THEN 'Low Value Customer'
        WHEN f.TotalNetProfit < 1000 THEN 'Moderate Value Customer'
        ELSE 'High Value Customer'
    END AS CustomerValueCategory
FROM 
    FinalStats f
JOIN 
    customer c ON f.c_customer_sk = c.c_customer_sk
WHERE 
    f.TotalReturnAmount IS NOT NULL
ORDER BY 
    f.TotalNetProfit DESC;
