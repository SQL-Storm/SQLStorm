
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk DESC) AS rn 
    FROM 
        web_sales 
    WHERE 
        ws_sold_date_sk > (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2000)
    GROUP BY 
        ws_item_sk
),
CategorySales AS (
    SELECT 
        i_category, 
        SUM(SC.total_sales) AS category_sales
    FROM 
        SalesCTE SC
    JOIN 
        item I ON I.i_item_sk = SC.ws_item_sk
    WHERE 
        I.i_brand IS NOT NULL
    GROUP BY 
        I.i_category
),
CustomerSales AS (
    SELECT 
        cd_gender,
        SUM(ws_ext_sales_price) AS total_gender_sales
    FROM 
        web_sales W
    JOIN 
        customer C ON W.ws_ship_customer_sk = C.c_customer_sk
    JOIN 
        customer_demographics CD ON C.c_current_cdemo_sk = CD.cd_demo_sk
    GROUP BY 
        CD.cd_gender
),
FinalReport AS (
    SELECT 
        cs.cd_gender, 
        cs.total_gender_sales, 
        CASE 
            WHEN cs.total_gender_sales > 10000 THEN 'High Sales'
            WHEN cs.total_gender_sales BETWEEN 5000 AND 10000 THEN 'Medium Sales'
            ELSE 'Low Sales'
        END AS sales_category,
        COALESCE(ca.category_sales, 0) AS total_category_sales
    FROM 
        CustomerSales cs
    LEFT JOIN 
        CategorySales ca ON cs.cd_gender = 'M' 
)
SELECT 
    f.cd_gender, 
    f.total_gender_sales, 
    f.sales_category, 
    f.total_category_sales
FROM 
    FinalReport f
WHERE 
    f.total_gender_sales > (SELECT AVG(total_gender_sales) FROM CustomerSales)
ORDER BY 
    f.total_gender_sales DESC;
