
WITH RECURSIVE item_hierarchy AS (
    SELECT i_item_sk, i_item_id, i_item_desc, i_category_id, 1 AS level
    FROM item
    WHERE i_item_sk IN (
        SELECT DISTINCT sr_item_sk
        FROM store_returns
        WHERE sr_return_quantity > 0
    )
    UNION ALL
    SELECT i.i_item_sk, i.i_item_id, i.i_item_desc, i.i_category_id, ih.level + 1
    FROM item_hierarchy ih
    JOIN item i ON ih.i_category_id = i.i_category_id
    WHERE ih.level < 5
),
promo_summary AS (
    SELECT p.p_promo_sk, COUNT(p.p_item_sk) AS promo_count,
           SUM(CASE WHEN r.r_reason_desc IS NOT NULL THEN 1 ELSE 0 END) AS reason_count
    FROM promotion p
    LEFT JOIN reason r ON p.p_promo_sk = r.r_reason_sk
    GROUP BY p.p_promo_sk
),
sales_data AS (
    SELECT ws.ws_item_sk, SUM(ws.ws_sales_price) AS total_sales,
           AVG(ws.ws_net_profit) OVER (PARTITION BY ws.ws_item_sk) AS avg_net_profit
    FROM web_sales ws
    GROUP BY ws.ws_item_sk
),
address_summary AS (
    SELECT ca.ca_state, COUNT(DISTINCT c.c_customer_sk) AS customer_count
    FROM customer_address ca
    JOIN customer c ON ca.ca_address_sk = c.c_current_addr_sk
    GROUP BY ca.ca_state
)
SELECT it.i_item_id, it.i_item_desc, sd.total_sales, sd.avg_net_profit,
       a.ca_state, a.customer_count,
       COALESCE(ps.promo_count, 0) AS promo_count,
       COALESCE(ps.reason_count, 0) AS reason_count,
       CASE WHEN sd.avg_net_profit > 500 THEN 'High' 
            WHEN sd.avg_net_profit BETWEEN 100 AND 500 THEN 'Medium' 
            ELSE 'Low' END AS profit_category
FROM item_hierarchy it
LEFT JOIN sales_data sd ON it.i_item_sk = sd.ws_item_sk
LEFT JOIN address_summary a ON a.customer_count > 10
LEFT JOIN promo_summary ps ON ps.p_promo_sk IN (
    SELECT p.p_promo_sk
    FROM promotion p
    WHERE p.p_discount_active = 'Y'
)
GROUP BY it.i_item_id, it.i_item_desc, sd.total_sales, sd.avg_net_profit, 
         a.ca_state, a.customer_count, ps.promo_count, ps.reason_count
ORDER BY sd.total_sales DESC, it.i_item_desc
LIMIT 100;
