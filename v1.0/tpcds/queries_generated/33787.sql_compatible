
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        ss_store_sk,
        ss_ticket_number,
        ss_quantity,
        ss_sales_price,
        1 AS level
    FROM store_sales
    WHERE ss_sales_price > 100

    UNION ALL

    SELECT 
        sh.ss_store_sk,
        sh.ss_ticket_number,
        sh.ss_quantity,
        sh.ss_sales_price * 0.9,
        sh.level + 1
    FROM store_sales sh
    JOIN sales_hierarchy shier ON shier.ss_ticket_number = sh.ss_ticket_number
    WHERE sh.ss_sales_price > 50 AND shier.level < 5
),
total_sales AS (
    SELECT 
        sh.ss_store_sk,
        SUM(sh.ss_quantity * sh.ss_sales_price) AS total_revenue
    FROM sales_hierarchy sh
    GROUP BY sh.ss_store_sk
),
customer_info AS (
    SELECT 
        ca.ca_address_sk,
        c.c_customer_sk,
        SUM(ws.ws_net_paid) AS total_spent
    FROM customer c
    JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY ca.ca_address_sk, c.c_customer_sk
),
highest_spenders AS (
    SELECT 
        ci.ca_address_sk,
        ci.c_customer_sk,
        ci.total_spent,
        DENSE_RANK() OVER (ORDER BY ci.total_spent DESC) AS spend_rank
    FROM customer_info ci
    WHERE ci.total_spent IS NOT NULL
),
final_report AS (
    SELECT 
        hs.ss_store_sk,
        hs.total_revenue,
        hs.total_revenue * 0.1 AS projected_future_revenue,
        CASE 
            WHEN hs.total_revenue > 10000 THEN 'High'
            ELSE 'Low'
        END AS revenue_category
    FROM total_sales hs
)
SELECT 
    fr.ss_store_sk,
    fr.total_revenue,
    fr.projected_future_revenue,
    0.25 * (SELECT AVG(total_spent) FROM highest_spenders) AS average_spending_per_customer,
    MAX(hs.spend_rank) AS highest_spender_rank
FROM final_report fr
LEFT JOIN highest_spenders hs ON fr.ss_store_sk = hs.ca_address_sk
GROUP BY fr.ss_store_sk, fr.total_revenue, fr.projected_future_revenue
HAVING fr.total_revenue > (SELECT AVG(total_revenue) FROM total_sales)
ORDER BY fr.total_revenue DESC
LIMIT 10;
