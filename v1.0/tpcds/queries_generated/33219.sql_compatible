
WITH RECURSIVE date_series AS (
    SELECT d_date_sk, d_date, d_year
    FROM date_dim
    WHERE d_date = (SELECT MAX(d_date) FROM date_dim)
    UNION ALL
    SELECT dd.d_date_sk, dd.d_date, dd.d_year
    FROM date_dim dd
    JOIN date_series ds ON dd.d_date_sk = ds.d_date_sk - 1
),
customer_sales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        DENSE_RANK() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ws.ws_sales_price) DESC) AS sales_rank
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
),
item_sales AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        SUM(ws.ws_sales_price) AS total_item_sales
    FROM item i
    JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY i.i_item_sk, i.i_item_desc
),
top_items AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        i.total_item_sales,
        RANK() OVER (ORDER BY i.total_item_sales DESC) AS item_rank
    FROM item_sales i
    WHERE i.total_item_sales > 0
),
inactive_customers AS (
    SELECT DISTINCT c.c_customer_sk
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE ws.ws_item_sk IS NULL
)
SELECT 
    cs.c_customer_sk,
    cs.c_first_name,
    cs.c_last_name,
    COALESCE(cs.total_sales, 0) AS total_sales,
    COALESCE(cs.total_orders, 0) AS total_orders,
    ti.i_item_desc,
    ti.total_item_sales,
    ds.d_year
FROM customer_sales cs
FULL OUTER JOIN top_items ti ON cs.c_customer_sk IS NULL OR cs.total_sales IS NOT NULL
LEFT JOIN date_series ds ON ds.d_year = (SELECT MAX(d_year) FROM date_dim)
WHERE cs.c_customer_sk IS NOT NULL OR ti.i_item_sk IS NOT NULL 
ORDER BY COALESCE(cs.total_sales, 0) DESC, COALESCE(ti.total_item_sales, 0) DESC;
