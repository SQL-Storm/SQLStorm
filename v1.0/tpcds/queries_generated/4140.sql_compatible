
WITH CustomerReturns AS (
    SELECT 
        c.c_customer_id,
        COALESCE(SUM(sr.sr_return_quantity), 0) AS total_store_returns,
        COALESCE(SUM(wr.wr_return_quantity), 0) AS total_web_returns
    FROM 
        customer c
    LEFT JOIN store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    LEFT JOIN web_returns wr ON c.c_customer_sk = wr.wr_returning_customer_sk
    GROUP BY 
        c.c_customer_id
),
ItemSales AS (
    SELECT 
        i.i_item_id,
        SUM(ws.ws_quantity + cs.cs_quantity + ss.ss_quantity) AS total_sold,
        AVG(ws.ws_sales_price) AS avg_web_price,
        AVG(cs.cs_sales_price) AS avg_catalog_price,
        AVG(ss.ss_sales_price) AS avg_store_price
    FROM 
        item i
    LEFT JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    LEFT JOIN catalog_sales cs ON i.i_item_sk = cs.cs_item_sk
    LEFT JOIN store_sales ss ON i.i_item_sk = ss.ss_item_sk
    GROUP BY 
        i.i_item_id
),
SalesAnalytics AS (
    SELECT 
        r.c_customer_id AS customer_id,
        i.total_sold,
        (i.avg_web_price + i.avg_catalog_price + i.avg_store_price) / NULLIF(3, 0) AS avg_price,
        r.total_store_returns + r.total_web_returns AS total_returns
    FROM 
        CustomerReturns r
    JOIN ItemSales i ON r.c_customer_id = i.i_item_id
    WHERE 
        r.total_store_returns > 5 OR r.total_web_returns > 2
),
RankedSales AS (
    SELECT 
        sa.customer_id,
        sa.total_sold,
        sa.avg_price,
        sa.total_returns,
        RANK() OVER (ORDER BY sa.total_sold DESC) AS sales_rank
    FROM 
        SalesAnalytics sa
)
SELECT 
    rs.customer_id,
    rs.total_sold,
    rs.avg_price,
    rs.total_returns,
    CASE 
        WHEN rs.sales_rank <= 10 THEN 'Top Performer' 
        ELSE 'Average Performer' 
    END AS performance_category
FROM 
    RankedSales rs
WHERE 
    rs.avg_price > (SELECT AVG(avg_price) FROM RankedSales)
ORDER BY 
    rs.total_sold DESC
FETCH FIRST 100 ROWS ONLY;
