
WITH RECURSIVE sales_cte AS (
    SELECT 
        ws_bill_customer_sk,
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(ws_order_number) AS total_orders,
        ROW_NUMBER() OVER (PARTITION BY ws_bill_customer_sk ORDER BY SUM(ws_ext_sales_price) DESC) as sales_rank
    FROM web_sales
    GROUP BY ws_bill_customer_sk
),
customer_info AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        CASE 
            WHEN hd.hd_income_band_sk IS NOT NULL THEN CONCAT(ib.ib_lower_bound, ' - ', ib.ib_upper_bound)
            ELSE 'Unknown'
        END AS income_range
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN household_demographics hd ON c.c_customer_sk = hd.hd_demo_sk
    LEFT JOIN income_band ib ON hd.hd_income_band_sk = ib.ib_income_band_sk
),
sales_summary AS (
    SELECT 
        cs.ws_bill_customer_sk,
        SUM(cs.ws_ext_sales_price) AS total_web_sales,
        COUNT(DISTINCT cs.ws_order_number) AS web_order_count,
        SUM(cr.cr_return_amount) AS total_returns
    FROM web_sales cs
    LEFT JOIN web_returns cr ON cs.ws_order_number = cr.wr_order_number
    GROUP BY cs.ws_bill_customer_sk
)
SELECT 
    ci.c_first_name,
    ci.c_last_name,
    ci.cd_gender,
    ci.cd_marital_status,
    ci.cd_purchase_estimate,
    ss.total_web_sales,
    ss.web_order_count,
    COALESCE(ss.total_returns, 0) AS total_returns,
    CASE 
        WHEN ss.total_web_sales > 1000 THEN 'High Value'
        WHEN ss.total_web_sales BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value,
    cte.total_sales,
    cte.total_orders
FROM customer_info ci
JOIN sales_summary ss ON ci.c_customer_sk = ss.ws_bill_customer_sk
LEFT JOIN sales_cte cte ON ci.c_customer_sk = cte.ws_bill_customer_sk
WHERE ci.cd_marital_status = 'M' AND ci.cd_gender = 'F'
ORDER BY ss.total_web_sales DESC
LIMIT 100;
