
WITH ranked_sales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_net_paid,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_net_paid DESC) AS sales_rank,
        COALESCE(NULLIF(ws.ws_web_page_sk, 0), 99999) AS non_null_web_page_sk
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) - 30 FROM date_dim) AND (SELECT MAX(d_date_sk) FROM date_dim)
),
customer_sales AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_net_paid) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        MIN(ws.ws_net_paid) AS min_order,
        MAX(ws.ws_net_paid) AS max_order,
        AVG(ws.ws_net_paid) AS avg_order
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_id
),
top_customers AS (
    SELECT 
        cs.c_customer_id,
        cs.total_spent,
        ROW_NUMBER() OVER (ORDER BY cs.total_spent DESC) AS customer_rank
    FROM 
        customer_sales cs
    WHERE 
        cs.total_orders > 5
),
return_stats AS (
    SELECT 
        sr.store_sk,
        COUNT(sr.sr_item_sk) AS returns_count,
        SUM(sr.sr_return_amt) AS total_return_amt
    FROM 
        store_returns sr
    GROUP BY 
        sr.store_sk
)
SELECT 
    cu.c_customer_id,
    cu.total_spent,
    cu.total_orders,
    T.total_return_amt,
    COALESCE(R.returns_count, 0) AS returns_count,
    (SELECT COUNT(*) FROM store s WHERE s.s_zip LIKE '12%') AS store_count_starts_with_12
FROM 
    top_customers cu
LEFT OUTER JOIN 
    return_stats R ON R.store_sk = (SELECT s_store_sk FROM store WHERE s_store_name = 'Main Store' LIMIT 1)
JOIN 
    (SELECT DISTINCT rs.ws_item_sk FROM ranked_sales rs WHERE rs.sales_rank = 1) AS T ON cu.c_customer_id IN (
        SELECT c.c_customer_id 
        FROM customer c 
        JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk 
        WHERE ws.ws_item_sk = T.ws_item_sk
    )
WHERE 
    T.ws_item_sk IS NOT NULL
ORDER BY 
    cu.total_spent DESC, cu.total_orders ASC
OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY;
