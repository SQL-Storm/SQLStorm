
WITH RECURSIVE SalesHierarchy AS (
    SELECT s_store_sk,
           s_store_name,
           s_sales_price,
           s_quantity,
           1 AS depth
    FROM store_sales
    WHERE ss_sold_date_sk = (SELECT MAX(ss_sold_date_sk) FROM store_sales)
    
    UNION ALL
    
    SELECT ph.s_store_sk,
           ph.s_store_name,
           ph.s_sales_price * 0.9 AS s_sales_price,
           ph.s_quantity + 1 AS s_quantity,
           sh.depth + 1
    FROM SalesHierarchy AS sh
    JOIN store_sales AS ph ON sh.s_store_sk = ph.s_store_sk
    WHERE sh.depth < 5
),
CustomerData AS (
    SELECT cd.cd_demo_sk,
           cd.cd_gender,
           cd.cd_marital_status,
           SUM(ss.ss_net_paid) AS total_spent,
           COUNT(ss.ss_ticket_number) AS total_purchases
    FROM customer AS c
    JOIN customer_demographics AS cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN store_sales AS ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status
),
TrendingItems AS (
    SELECT i.i_item_id,
           COUNT(ws.ws_order_number) AS order_count,
           SUM(ws.ws_net_paid) AS total_revenue
    FROM web_sales AS ws
    JOIN item AS i ON ws.ws_item_sk = i.i_item_sk
    GROUP BY i.i_item_id
    HAVING COUNT(ws.ws_order_number) > 100
),
Summary AS (
    SELECT c.c_birth_year,
           cd.cd_gender,
           SUM(cd.total_spent) AS total_spent,
           COUNT(DISTINCT c.c_customer_sk) AS customer_count,
           AVG(cd.total_purchases) AS avg_purchases
    FROM CustomerData AS cd
    JOIN customer AS c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    GROUP BY c.c_birth_year, cd.cd_gender
)
SELECT sh.s_store_name,
       sh.depth,
       t.total_revenue,
       st.total_spent,
       sr.c_birth_year,
       sr.cd_gender
FROM SalesHierarchy AS sh
JOIN TrendingItems AS t ON sh.s_store_sk = t.i_item_id
JOIN Summary AS sr ON sh.s_store_sk = sr.customer_count
WHERE sh.s_quantity > 10
ORDER BY t.total_revenue DESC, st.total_spent DESC;
