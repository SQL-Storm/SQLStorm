WITH RECURSIVE address_hierarchy AS (
    SELECT 
        ca_address_sk,
        ca_address_id,
        ca_city,
        ca_state,
        ca_zip,
        ca_country,
        COALESCE(ca_street_name, 'Unknown') AS full_address,
        1 AS level
    FROM customer_address
    WHERE ca_address_sk IS NOT NULL
    
    UNION ALL
    
    SELECT 
        aa.ca_address_sk,
        aa.ca_address_id,
        aa.ca_city,
        aa.ca_state,
        aa.ca_zip,
        aa.ca_country,
        CONCAT(ah.full_address, ', ', COALESCE(aa.ca_street_name, 'Unknown')) AS full_address,
        ah.level + 1
    FROM customer_address aa
    JOIN address_hierarchy ah ON aa.ca_address_sk = (SELECT MAX(ca_address_sk) FROM customer_address) 
    WHERE ah.level < 3
), 

demographic_summary AS (
    SELECT 
        cd_gender,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count,
        AVG(cd_purchase_estimate) AS avg_purchase_estimate,
        MAX(cd_credit_rating) AS max_credit_rating
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY cd_gender
),

return_summary AS (
    SELECT 
        COALESCE(SUM(sr_return_quantity), 0) AS total_returned_quantity,
        SUM(sr_return_amt) AS total_return_amount
    FROM store_returns sr
    WHERE sr_returned_date_sk IS NOT NULL
),

sales_summary AS (
    SELECT 
        ws_sold_date_sk,
        SUM(ws_quantity) AS total_sold_quantity,
        SUM(ws_net_profit) AS total_profit
    FROM web_sales
    WHERE ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = EXTRACT(YEAR FROM cast('2002-10-01' as date)))
    GROUP BY ws_sold_date_sk
)

SELECT 
    ah.full_address,
    ds.customer_count,
    ds.avg_purchase_estimate,
    rs.total_returned_quantity,
    ss.total_sold_quantity,
    ss.total_profit,
    CASE 
        WHEN ds.avg_purchase_estimate IS NULL THEN 'N/A' 
        ELSE CASE 
            WHEN ds.avg_purchase_estimate < 1000 THEN 'Low'
            WHEN ds.avg_purchase_estimate BETWEEN 1000 AND 5000 THEN 'Medium'
            ELSE 'High'
        END
    END AS purchase_estimate_category
FROM address_hierarchy ah
CROSS JOIN demographic_summary ds
CROSS JOIN return_summary rs
CROSS JOIN sales_summary ss
WHERE ah.level = 1
  AND (ds.customer_count IS NULL OR ds.customer_count > 0)
ORDER BY ah.ca_city, ah.ca_state;