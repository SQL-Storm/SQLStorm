
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        ws_order_number, 
        ws_item_sk, 
        ws_sold_date_sk, 
        ws_quantity, 
        ws_sales_price, 
        1 AS depth 
    FROM 
        web_sales 
    WHERE 
        ws_sold_date_sk = (SELECT MAX(ws_sold_date_sk) FROM web_sales) 
    UNION ALL 
    SELECT 
        ws.ws_order_number, 
        ws.ws_item_sk, 
        ws.ws_sold_date_sk, 
        ws.ws_quantity, 
        ws.ws_sales_price, 
        sh.depth + 1 
    FROM 
        web_sales ws 
    INNER JOIN 
        sales_hierarchy sh ON ws.ws_order_number = sh.ws_order_number 
    WHERE 
        sh.depth < 10 
)
SELECT 
    c.c_customer_id, 
    SUM(ws.ws_net_paid_exc_tax) AS total_spent, 
    COUNT(DISTINCT s.ss_ticket_number) AS total_transactions, 
    AVG(ws.ws_sales_price) AS avg_order_value, 
    MAX(ws.ws_net_profit) AS max_profit, 
    MIN(ws.ws_net_profit) AS min_profit,
    CASE 
        WHEN SUM(ws.ws_net_profit) IS NULL THEN 'No Profit'
        ELSE 'Profit Present'
    END AS profit_status,
    COUNT(DISTINCT CASE WHEN sh.ws_item_sk IS NOT NULL THEN sh.ws_item_sk END) AS items_sold,
    STRING_AGG(DISTINCT CONCAT(i.i_item_desc, ' - ', CAST(i.i_current_price AS VARCHAR)), '; ') AS item_details
FROM 
    (SELECT DISTINCT c.c_customer_id, sr_item_sk FROM store_returns 
     UNION 
     SELECT DISTINCT c.c_customer_id, cr_item_sk FROM catalog_returns) AS returns 
JOIN 
    customer c ON c.c_customer_sk = returns.c_customer_id
LEFT JOIN 
    web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN 
    item i ON ws.ws_item_sk = i.i_item_sk
LEFT JOIN 
    sales_hierarchy sh ON ws.ws_order_number = sh.ws_order_number
GROUP BY 
    c.c_customer_id
HAVING 
    SUM(ws.ws_net_paid_inc_tax) > 1000
ORDER BY 
    total_spent DESC
LIMIT 100;
