
WITH RECURSIVE CustomerHier AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        cd.cd_credit_rating,
        cd.cd_dep_count,
        1 AS depth
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
  
    UNION ALL

    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        cd.cd_credit_rating,
        cd.cd_dep_count,
        depth + 1
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN 
        CustomerHier ch ON ch.c_customer_sk = c.c_current_hdemo_sk
)

SELECT 
    ca.ca_city,
    COUNT(DISTINCT ch.c_customer_sk) AS customer_count,
    AVG(ch.cd_purchase_estimate) AS avg_purchase_estimate,
    MAX(ch.cd_dep_count) AS max_dependents,
    SUM(CASE 
        WHEN ch.cd_gender = 'M' THEN 1 
        ELSE 0 
    END) AS male_count,
    SUM(CASE 
        WHEN ch.cd_gender = 'F' THEN 1 
        ELSE 0 
    END) AS female_count
FROM 
    CustomerHier ch
JOIN 
    customer_address ca ON ch.c_customer_sk = ca.ca_address_sk
LEFT JOIN 
    (SELECT 
        ca_state,
        SUM(sr_return_amt) AS total_returns
     FROM 
        store_returns sr
     JOIN 
        customer c ON sr.sr_customer_sk = c.c_customer_sk
     GROUP BY 
        ca_state) AS returns ON ca.ca_state = returns.ca_state
WHERE 
    (ch.cd_purchase_estimate IS NOT NULL 
     OR returns.total_returns IS NULL)
GROUP BY 
    ca.ca_city,
    ch.cd_purchase_estimate,
    ch.cd_dep_count,
    ch.cd_gender,
    ch.c_customer_sk
HAVING 
    COUNT(DISTINCT ch.c_customer_sk) > 5
ORDER BY 
    avg_purchase_estimate DESC
LIMIT 10;
