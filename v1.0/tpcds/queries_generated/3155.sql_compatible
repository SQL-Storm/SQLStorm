
WITH ranked_sales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_sales_price,
        ws.ws_date_sk,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS price_rank,
        COALESCE(sr.sr_return_quantity, 0) AS total_returned,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM 
        web_sales ws
    LEFT JOIN 
        web_returns wr ON ws.ws_item_sk = wr.wr_item_sk
    LEFT JOIN 
        store_returns sr ON ws.ws_item_sk = sr.sr_item_sk
    GROUP BY 
        ws.ws_item_sk, ws.ws_sales_price, ws.ws_date_sk, sr.sr_return_quantity
),
best_selling_items AS (
    SELECT 
        r.ws_item_sk,
        SUM(r.ws_sales_price) AS total_sales,
        AVG(r.ws_sales_price) AS avg_price,
        COUNT(r.total_orders) AS order_count,
        SUM(r.total_returned) AS total_returns
    FROM 
        ranked_sales r
    WHERE 
        r.price_rank <= 10
    GROUP BY 
        r.ws_item_sk
)
SELECT 
    i.i_item_id,
    i.i_item_desc,
    bi.total_sales,
    bi.avg_price,
    bi.order_count,
    bi.total_returns,
    CASE 
        WHEN bi.total_returns > 0 THEN 'High Return'
        ELSE 'Low Return'
    END AS return_status
FROM 
    best_selling_items bi
JOIN 
    item i ON bi.ws_item_sk = i.i_item_sk
WHERE 
    bi.total_sales > (SELECT AVG(total_sales) FROM best_selling_items)
ORDER BY 
    bi.total_sales DESC
LIMIT 5;
