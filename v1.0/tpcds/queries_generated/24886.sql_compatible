
WITH ranked_sales AS (
    SELECT 
        ws.web_site_sk,
        ws_sold_date_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        item i ON ws.ws_item_sk = i.i_item_sk
    WHERE 
        i.i_current_price IS NOT NULL
    GROUP BY 
        ws.web_site_sk, ws_sold_date_sk
),

top_sales_sites AS (
    SELECT 
        web_site_sk,
        total_sales,
        total_quantity,
        ws_sold_date_sk
    FROM 
        ranked_sales
    WHERE 
        sales_rank = 1
),

average_demos AS (
    SELECT 
        cd_gender,
        AVG(cd_purchase_estimate) AS avg_purchase_estimate
    FROM 
        customer_demographics
    GROUP BY 
        cd_gender
),

returns AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returned,
        SUM(sr_return_amt_inc_tax) AS total_returned_amt
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
)

SELECT 
    w.warehouse_id,
    w.warehouse_name,
    ts.total_sales,
    ts.total_quantity,
    d.d_date AS return_date,
    COALESCE(r.total_returned, 0) AS total_returns,
    ad.avg_purchase_estimate
FROM 
    warehouse w
LEFT JOIN 
    top_sales_sites ts ON w.warehouse_sk = ts.web_site_sk
JOIN 
    date_dim d ON d.d_date_sk = ts.ws_sold_date_sk
LEFT JOIN 
    returns r ON ts.ws_item_sk = r.sr_item_sk
CROSS JOIN 
    average_demos ad
WHERE 
    (d.d_current_year = 2023 AND d.d_weekend = '1')
    OR (ts.total_sales > 1000 AND ad.cd_gender = 'F')
ORDER BY 
    w.warehouse_name, ts.total_sales DESC
OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;
