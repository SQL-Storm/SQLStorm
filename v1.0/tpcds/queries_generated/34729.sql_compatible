
WITH RECURSIVE CustomerHolidays AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           d.d_date, d.d_holiday
    FROM customer c
    JOIN date_dim d ON d.d_date = CAST(CONCAT(c.c_birth_year, '-', c.c_birth_month, '-', c.c_birth_day) AS DATE)
    WHERE d.d_holiday = 'Y'
    UNION ALL
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           d.d_date, d.d_holiday
    FROM customer c
    JOIN date_dim d ON d.d_date = DATE_ADD(CAST(CONCAT(c.c_birth_year, '-', c.c_birth_month, '-', c.c_birth_day) AS DATE), INTERVAL 1 YEAR)
    WHERE d.d_holiday = 'Y' 
      AND d.d_date > (SELECT MAX(d1.d_date) FROM date_dim d1 WHERE d1.d_holiday = 'Y')
),
TotalSales AS (
    SELECT 
        COALESCE(SUM(ws.ws_net_profit), 0) AS total_profit,
        COALESCE(SUM(ws.ws_quantity), 0) AS total_quantity,
        ws.ws_bill_customer_sk
    FROM web_sales ws
    GROUP BY ws.ws_bill_customer_sk
),
CustomerProfile AS (
    SELECT 
        cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status,
        cd.cd_purchase_estimate, cd.cd_credit_rating,
        c.c_customer_sk
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
)
SELECT 
    c.c_first_name,
    c.c_last_name,
    ch.d_date AS holiday_date,
    cp.cd_gender,
    cp.cd_marital_status,
    ts.total_profit,
    ROW_NUMBER() OVER (PARTITION BY cp.cd_gender ORDER BY ts.total_profit DESC) AS gender_rank
FROM CustomerHolidays ch
JOIN CustomerProfile cp ON ch.c_customer_sk = cp.c_customer_sk
LEFT JOIN TotalSales ts ON cp.c_customer_sk = ts.ws_bill_customer_sk
WHERE ts.total_profit > (SELECT AVG(total_profit) FROM TotalSales)
GROUP BY c.c_first_name, c.c_last_name, ch.d_date, cp.cd_gender, cp.cd_marital_status, ts.total_profit
ORDER BY holiday_date
LIMIT 50;
