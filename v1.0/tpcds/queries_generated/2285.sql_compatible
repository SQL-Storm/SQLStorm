
WITH CustomerSales AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_net_paid_inc_ship_tax) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_id ORDER BY SUM(ws.ws_net_paid_inc_ship_tax) DESC) AS sales_rank
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE 
        c.c_birth_year BETWEEN 1970 AND 1990
    GROUP BY 
        c.c_customer_id
), 
SalesAnalysis AS (
    SELECT 
        cs.c_customer_id,
        cs.total_sales, 
        cs.order_count,
        DENSE_RANK() OVER (ORDER BY cs.total_sales DESC) AS overall_rank,
        CASE 
            WHEN cs.total_sales IS NULL THEN 'No Sales'
            WHEN cs.total_sales < 1000 THEN 'Low Sales'
            WHEN cs.total_sales < 5000 THEN 'Medium Sales'
            ELSE 'High Sales'
        END AS sales_category
    FROM 
        CustomerSales cs
    WHERE 
        cs.sales_rank = 1
)

SELECT 
    sa.c_customer_id,
    sa.total_sales,
    sa.order_count,
    sa.overall_rank,
    sa.sales_category,
    COALESCE(ci.total_items, 0) AS total_items,
    COALESCE(ip.avg_price, 0.00) AS avg_item_price
FROM 
    SalesAnalysis sa
LEFT JOIN (
    SELECT 
        ws_bill_customer_sk,
        COUNT(ws_item_sk) AS total_items
    FROM 
        web_sales
    GROUP BY 
        ws_bill_customer_sk
) ci ON sa.c_customer_id = ci.ws_bill_customer_sk
LEFT JOIN (
    SELECT 
        ws_bill_customer_sk,
        SUM(ws_sales_price) / NULLIF(COUNT(ws_item_sk), 0) AS avg_price
    FROM 
        web_sales
    GROUP BY 
        ws_bill_customer_sk
) ip ON sa.c_customer_id = ip.ws_bill_customer_sk
ORDER BY 
    sa.total_sales DESC
LIMIT 10;
