WITH RECURSIVE Sales_CTE AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_sales_price) AS total_sales,
        COUNT(ws_order_number) AS order_count,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales 
    WHERE 
        ws_sold_date_sk BETWEEN 1 AND 100
    GROUP BY 
        ws_item_sk
), 

Inventory_Report AS (
    SELECT 
        inv.inv_item_sk, 
        SUM(inv.inv_quantity_on_hand) AS total_quantity,
        w.warehouse_name
    FROM 
        inventory inv
    JOIN 
        warehouse w ON inv.inv_warehouse_sk = w.w_warehouse_sk
    GROUP BY 
        inv.inv_item_sk, w.warehouse_name
),

Customer_Preferences AS (
    SELECT 
        cd_gender, 
        COUNT(DISTINCT c_customer_id) AS customer_count
    FROM 
        customer_demographics
    JOIN 
        customer c ON c.c_current_cdemo_sk = cd_demo_sk
    GROUP BY 
        cd_gender
)

SELECT 
    i.item_id, 
    i.i_product_name,
    COALESCE(sr.total_sales, 0) AS total_sales,
    COALESCE(ir.total_quantity, 0) AS total_quantity,
    cp.customer_count,
    CASE 
        WHEN sr.total_sales IS NOT NULL AND ir.total_quantity IS NOT NULL THEN 
            (sr.total_sales / NULLIF(ir.total_quantity, 0)) 
        ELSE 
            NULL 
    END AS sales_per_quantity
FROM 
    item i
LEFT JOIN 
    Sales_CTE sr ON i.i_item_sk = sr.ws_item_sk
LEFT JOIN 
    Inventory_Report ir ON i.i_item_sk = ir.inv_item_sk
LEFT JOIN 
    Customer_Preferences cp ON 1=1 
WHERE 
    i.i_current_price IS NOT NULL
ORDER BY 
    total_sales DESC, 
    total_quantity DESC
LIMIT 100;