
WITH ranked_sales AS (
    SELECT
        s_store_sk,
        ss_item_sk,
        SUM(ss_sales_price) AS total_sales,
        RANK() OVER (PARTITION BY s_store_sk ORDER BY SUM(ss_sales_price) DESC) AS sales_rank,
        DENSE_RANK() OVER (PARTITION BY s_store_sk ORDER BY SUM(ss_sales_price) DESC) AS dense_sales_rank,
        COUNT(*) OVER (PARTITION BY s_store_sk) AS total_transactions
    FROM
        store_sales
    GROUP BY
        s_store_sk, ss_item_sk
),
high_performance_stores AS (
    SELECT
        s_store_sk,
        s_store_name,
        SUM(total_sales) AS cumulative_sales,
        AVG(total_transactions) AS avg_transaction_per_item
    FROM
        ranked_sales
    JOIN store ON ranked_sales.s_store_sk = store.s_store_sk
    WHERE
        sales_rank <= 10
    GROUP BY
        s_store_sk, s_store_name
),
customer_analysis AS (
    SELECT
        c_customer_sk,
        c_first_name,
        c_last_name,
        COUNT(*) AS number_of_returns,
        SUM(sr_return_amt) AS total_returned_amount,
        CASE
            WHEN SUM(sr_return_amt) IS NULL THEN 'No Returns'
            WHEN SUM(sr_return_amt) > 0 THEN 'Some Returns'
            ELSE 'Negative Returns'
        END AS return_status
    FROM
        store_returns sr
    JOIN customer c ON sr.sr_customer_sk = c.c_customer_sk
    GROUP BY
        c_customer_sk, c_first_name, c_last_name
),
final_report AS (
    SELECT
        hps.s_store_name,
        ca.c_first_name,
        ca.c_last_name,
        COALESCE(SUM(hps.cumulative_sales), 0) AS total_sales,
        COALESCE(SUM(ca.total_returned_amount), 0) AS total_return_amount,
        COUNT(DISTINCT ca.c_customer_sk) AS unique_customers,
        COUNT(DISTINCT hps.s_store_sk) AS active_stores
    FROM
        high_performance_stores hps
    FULL OUTER JOIN customer_analysis ca ON hps.s_store_sk = ca.c_customer_sk
    GROUP BY
        hps.s_store_name, ca.c_first_name, ca.c_last_name
)
SELECT
    f.s_store_name,
    f.c_first_name,
    f.c_last_name,
    f.total_sales,
    f.total_return_amount,
    f.unique_customers,
    f.active_stores
FROM
    final_report f
WHERE
    (f.total_sales > 10000 OR f.total_return_amount < 0)
    AND f.unique_customers IS NOT NULL
ORDER BY
    f.total_sales DESC, f.total_return_amount ASC
LIMIT 100;
