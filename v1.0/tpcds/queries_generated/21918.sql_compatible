
WITH RankedSales AS (
    SELECT 
        c.c_customer_id,
        ws.ws_order_number,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        RANK() OVER (PARTITION BY c.c_customer_id ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    GROUP BY 
        c.c_customer_id, ws.ws_order_number
),
SalesDetails AS (
    SELECT 
        rs.c_customer_id,
        rs.ws_order_number,
        rs.total_sales,
        COUNT(DISTINCT CASE WHEN ws.ws_sold_date_sk IS NOT NULL THEN ws.ws_item_sk END) AS item_count,
        SUM(ws.ws_net_profit) FILTER (WHERE ws.ws_net_profit > 0) AS positive_net_profit
    FROM 
        RankedSales rs
    LEFT JOIN 
        web_sales ws ON rs.ws_order_number = ws.ws_order_number AND rs.c_customer_id = ws.ws_bill_customer_sk
    GROUP BY 
        rs.c_customer_id, rs.ws_order_number, rs.total_sales
),
ReturnedSales AS (
    SELECT 
        sr_returning_customer_sk,
        SUM(sr_return_amt_inc_tax) AS total_returned_amount,
        COUNT(sr_return_quantity) AS total_returns
    FROM 
        store_returns
    GROUP BY 
        sr_returning_customer_sk
),
FinalReport AS (
    SELECT 
        sd.c_customer_id,
        sd.total_sales,
        sd.item_count,
        COALESCE(rs.total_returned_amount, 0) AS total_returned,
        sd.positive_net_profit,
        (sd.total_sales - COALESCE(rs.total_returned_amount, 0)) AS net_revenue
    FROM 
        SalesDetails sd
    LEFT JOIN 
        ReturnedSales rs ON sd.c_customer_id = rs.sr_returning_customer_sk
    WHERE 
        sd.item_count > 5 AND 
        (sd.positive_net_profit IS NOT NULL OR sd.total_sales > 1000)
)
SELECT 
    f.c_customer_id,
    f.net_revenue,
    CASE 
        WHEN f.net_revenue > 0 THEN 'Profitable' 
        ELSE 'Unprofitable' 
    END AS profitability_status,
    DENSE_RANK() OVER (ORDER BY f.net_revenue DESC) AS revenue_rank
FROM 
    FinalReport f
ORDER BY 
    f.net_revenue DESC
LIMIT 50;
