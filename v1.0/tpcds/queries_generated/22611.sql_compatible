
WITH RankedReturns AS (
    SELECT 
        sr_customer_sk,
        sr_return_quantity,
        ROW_NUMBER() OVER (PARTITION BY sr_customer_sk ORDER BY sr_returned_date_sk DESC) AS rn
    FROM 
        store_returns
    WHERE 
        sr_return_quantity > 0
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT rr.sr_ticket_number) AS total_returns,
        SUM(COALESCE(rr.sr_return_quantity, 0)) AS total_quantity_returned,
        MAX(rn) OVER (PARTITION BY c.c_customer_sk) AS recent_return_rank
    FROM 
        customer c
    LEFT JOIN 
        RankedReturns rr ON c.c_customer_sk = rr.sr_customer_sk
    GROUP BY 
        c.c_customer_sk
),
ItemSales AS (
    SELECT 
        i.i_item_sk,
        (SUM(cs.cs_quantity) + COALESCE(SUM(ws.ws_quantity), 0)) AS total_sold_quantity,
        AVG(ws.ws_sales_price) AS average_web_price,
        SUM(COALESCE(cs.cs_ext_discount_amt, 0)) AS total_discounted_amount
    FROM 
        item i
    LEFT JOIN 
        catalog_sales cs ON i.i_item_sk = cs.cs_item_sk
    LEFT JOIN 
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY 
        i.i_item_sk
),
TopCustomers AS (
    SELECT 
        cs.c_customer_sk,
        cs.total_returns,
        cs.total_quantity_returned,
        ROW_NUMBER() OVER (ORDER BY cs.total_quantity_returned DESC) AS rank
    FROM 
        CustomerStats cs
    WHERE 
        cs.total_returns IS NOT NULL
)
SELECT 
    c.c_customer_id,
    cs.total_returns,
    cs.total_quantity_returned,
    it.total_sold_quantity,
    it.average_web_price,
    it.total_discounted_amount
FROM 
    TopCustomers tc
JOIN 
    customer c ON tc.c_customer_sk = c.c_customer_sk
LEFT JOIN 
    ItemSales it ON it.total_sold_quantity > 0
WHERE 
    tc.rank <= 10
    AND (c.c_birth_month IS NULL OR c.c_birth_month BETWEEN 1 AND 6)
ORDER BY 
    cs.total_quantity_returned DESC, 
    it.average_web_price ASC
LIMIT 10;
