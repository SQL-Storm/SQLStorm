
WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS rnk
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
),
HighValueItems AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        i.i_current_price
    FROM 
        item i
    WHERE 
        i.i_current_price > (SELECT AVG(i2.i_current_price) 
                             FROM item i2 WHERE i2.i_current_price IS NOT NULL)
),
CustomerReturns AS (
    SELECT 
        sir.cs_bill_customer_sk,
        COALESCE(SUM(sr.sr_returned_quantity), 0) AS total_returns
    FROM 
        store_returns sr
    LEFT JOIN 
        store_sales sir ON sr.sr_item_sk = sir.ss_item_sk
    GROUP BY 
        sir.cs_bill_customer_sk
)
SELECT 
    c.c_customer_id,
    ca.ca_city,
    SUM(CASE 
        WHEN sr.sr_returned_date_sk IS NOT NULL THEN ws.ws_net_paid 
        ELSE 0 
    END) AS net_paid_amount,
    (SELECT MAX(ws_sales_price) FROM RankedSales rs WHERE rs.rnk = 1 AND rs.ws_item_sk IN (SELECT i.i_item_sk FROM HighValueItems i)) AS max_high_value_sales_price,
    c.c_country,
    COUNT(DISTINCT cu.cd_demo_sk) AS customer_demographics_count,
    (CASE WHEN (SELECT COUNT(*) FROM CustomerReturns) > 0 THEN 'Returns Exist' ELSE 'No Returns' END) AS returns_status
FROM 
    customer c
JOIN 
    customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN 
    web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN 
    store_returns sr ON ws.ws_order_number = sr.sr_ticket_number 
GROUP BY 
    c.c_customer_id,
    ca.ca_city,
    c.c_country
HAVING 
    SUM(ws.ws_sales_price) IS NOT NULL 
    AND COUNT(ws.ws_order_number) > 1 
ORDER BY 
    c.c_customer_id DESC 
OFFSET 10 ROWS FETCH NEXT 5 ROWS ONLY;
