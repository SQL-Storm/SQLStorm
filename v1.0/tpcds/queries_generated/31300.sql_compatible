
WITH RECURSIVE sales_summary AS (
    SELECT 
        ss_store_sk,
        SUM(ss_net_profit) AS total_net_profit,
        SUM(ss_quantity) AS total_quantity,
        ROW_NUMBER() OVER (PARTITION BY ss_store_sk ORDER BY SUM(ss_net_profit) DESC) AS rn
    FROM 
        store_sales
    GROUP BY 
        ss_store_sk
),
customer_details AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        hd.hd_income_band_sk,
        ROW_NUMBER() OVER (PARTITION BY hd.hd_income_band_sk ORDER BY c.c_birth_year DESC) AS income_rank
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        household_demographics hd ON c.c_customer_sk = hd.hd_demo_sk
),
top_customers AS (
    SELECT 
        cd.c_customer_sk,
        cd.c_first_name,
        cd.c_last_name,
        SUM(ws.ws_net_profit) AS total_spent
    FROM 
        web_sales ws
    JOIN 
        customer_details cd ON ws.ws_bill_customer_sk = cd.c_customer_sk
    GROUP BY 
        cd.c_customer_sk, cd.c_first_name, cd.c_last_name
    HAVING 
        SUM(ws.ws_net_profit) > 1000
)
SELECT 
    st.ss_store_sk,
    st.total_net_profit,
    CASE 
        WHEN st.total_net_profit IS NULL THEN 0
        ELSE st.total_net_profit
    END AS adjusted_net_profit,
    tc.total_spent,
    cd.c_first_name,
    cd.c_last_name
FROM 
    sales_summary st
FULL OUTER JOIN 
    top_customers tc ON st.ss_store_sk = (SELECT DISTINCT ss_store_sk FROM store WHERE ss_store_sk IS NOT NULL FETCH FIRST 1 ROW ONLY)
LEFT JOIN 
    customer_details cd ON tc.c_customer_sk = cd.c_customer_sk AND cd.income_rank = 1
WHERE 
    (tc.total_spent IS NOT NULL OR st.total_net_profit IS NOT NULL)
ORDER BY 
    adjusted_net_profit DESC, tc.total_spent DESC
FETCH FIRST 100 ROWS ONLY;
