WITH ranked_sales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2000) - 90
        AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2000)
    GROUP BY 
        ws_item_sk
),
high_value_customers AS (
    SELECT 
        c_customer_sk,
        SUM(ws_net_paid) AS total_spent
    FROM 
        web_sales
    JOIN 
        customer ON ws_bill_customer_sk = c_customer_sk
    WHERE 
        c_birth_year IS NOT NULL AND (c_birth_month IS NULL OR c_birth_day IS NULL)
    GROUP BY 
        c_customer_sk
    HAVING 
        SUM(ws_net_paid) > 1000
),
inventory_status AS (
    SELECT 
        i_item_sk,
        AVG(inv_quantity_on_hand) AS avg_quantity,
        CASE 
            WHEN AVG(inv_quantity_on_hand) < 10 THEN 'Low Stock'
            WHEN AVG(inv_quantity_on_hand) BETWEEN 10 AND 50 THEN 'Moderate Stock'
            ELSE 'Sufficient Stock'
        END AS stock_status
    FROM 
        inventory
    GROUP BY 
        i_item_sk
)
SELECT 
    i.i_item_id,
    i.i_item_desc,
    COALESCE(rs.total_quantity, 0) AS total_quantity_sold,
    COALESCE(rs.total_sales, 0) AS total_sales_amount,
    COALESCE(hv.total_spent, 0) AS customer_total_spend,
    inv.avg_quantity,
    inv.stock_status
FROM 
    item i
LEFT JOIN 
    ranked_sales rs ON i.i_item_sk = rs.ws_item_sk AND rs.sales_rank = 1
LEFT JOIN 
    high_value_customers hv ON hv.c_customer_sk IN (
        SELECT 
            c_current_addr_sk 
        FROM 
            customer 
        WHERE 
            c_current_cdemo_sk IS NOT NULL
    )
LEFT JOIN 
    inventory_status inv ON i.i_item_sk = inv.i_item_sk
WHERE 
    i.i_current_price BETWEEN 5.00 AND 50.00
    AND (i.i_rec_end_date IS NULL OR i.i_rec_start_date <= cast('2002-10-01' as date))
ORDER BY 
    COALESCE(rs.total_sales, 0) DESC, 
    i.i_item_id 
FETCH FIRST 100 ROWS ONLY;