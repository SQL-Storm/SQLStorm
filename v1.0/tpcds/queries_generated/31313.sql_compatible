
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        s.ss_sales_price,
        s.ss_quantity,
        s.ss_sold_date_sk,
        d.d_year,
        1 AS level
    FROM 
        customer c
    JOIN 
        store_sales s ON c.c_customer_sk = s.ss_customer_sk
    JOIN 
        date_dim d ON s.ss_sold_date_sk = d.d_date_sk
    WHERE 
        d.d_year = 2023
    UNION ALL
    SELECT 
        ch.c_customer_sk,
        ch.c_first_name,
        ch.c_last_name,
        s.ss_sales_price,
        s.ss_quantity,
        s.ss_sold_date_sk,
        d.d_year,
        sh.level + 1
    FROM 
        sales_hierarchy sh
    JOIN 
        customer ch ON sh.c_customer_sk = ch.c_current_cdemo_sk
    JOIN 
        store_sales s ON ch.c_customer_sk = s.ss_customer_sk
    JOIN 
        date_dim d ON s.ss_sold_date_sk = d.d_date_sk
    WHERE 
        d.d_year = 2023 
        AND sh.level < 5
)
SELECT 
    s.c_first_name,
    s.c_last_name,
    SUM(s.ss_sales_price * s.ss_quantity) AS total_sales,
    AVG(s.ss_sales_price) AS avg_sales_price,
    COUNT(DISTINCT s.ss_ticket_number) AS transaction_count,
    MAX(s.ss_sold_date_sk) AS last_purchase_date,
    COALESCE(demo.cd_gender, 'Unknown') AS gender,
    CASE 
        WHEN MAX(s.ss_sales_price) > 100 THEN 'High Value'
        WHEN MAX(s.ss_sales_price) BETWEEN 50 AND 100 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS value_band
FROM 
    sales_hierarchy s
LEFT JOIN 
    customer_demographics demo ON s.c_customer_sk = demo.cd_demo_sk
GROUP BY 
    s.c_first_name, s.c_last_name, demo.cd_gender
HAVING 
    SUM(s.ss_sales_price * s.ss_quantity) > 5000
ORDER BY 
    total_sales DESC
LIMIT 10;
