
WITH RecursiveAddress AS (
    SELECT ca_address_sk, ca_city, ca_state,
           ROW_NUMBER() OVER (PARTITION BY ca_state ORDER BY ca_city) AS rn
    FROM customer_address
    WHERE ca_country = 'USA'
),
CustomerStats AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name,
           cd.cd_gender, cd.cd_marital_status,
           COUNT(ws.ws_order_number) AS total_orders,
           SUM(ws.ws_net_paid) AS total_spent,
           AVG(ws.ws_net_profit) AS avg_profit,
           DENSE_RANK() OVER (PARTITION BY cd.cd_gender ORDER BY SUM(ws.ws_net_paid) DESC) AS purchase_rank
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status
),
HighSpenders AS (
    SELECT cs.*, ra.ca_city, ra.ca_state
    FROM CustomerStats cs
    LEFT JOIN RecursiveAddress ra ON cs.total_spent > 5000 AND cs.c_customer_sk % 3 = ra.rn
    WHERE cs.total_orders > 1
),
SalesDetails AS (
    SELECT SUM(ws_ext_sales_price) AS total_sales,
           COUNT(DISTINCT ws_item_sk) AS distinct_items,
           cs.c_customer_sk
    FROM web_sales ws
    JOIN CustomerStats cs ON ws.ws_bill_customer_sk = cs.c_customer_sk
    GROUP BY cs.c_customer_sk
)
SELECT h.c_customer_sk, h.c_first_name, h.c_last_name, h.total_orders,
       h.total_spent, h.avg_profit, h.ca_city, h.ca_state,
       CASE 
           WHEN sd.total_sales IS NULL THEN 'No Sales'
           WHEN sd.total_sales < 100 THEN 'Low Sales'
           ELSE 'High Sales'
       END AS sales_category,
       STRING_AGG(DISTINCT CONCAT(h.ca_city, ' - ', h.ca_state), '; ') AS address_summary
FROM HighSpenders h
LEFT JOIN SalesDetails sd ON h.c_customer_sk = sd.c_customer_sk
GROUP BY h.c_customer_sk, h.c_first_name, h.c_last_name, h.total_orders,
         h.total_spent, h.avg_profit, h.ca_city, h.ca_state
HAVING COUNT(h.c_customer_sk) > 0 AND SUM(h.total_spent) IS NOT NULL
ORDER BY h.total_spent DESC 
OFFSET 10 ROWS
FETCH NEXT 20 ROWS ONLY;
