WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_sales_price) AS total_sales,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        item i ON ws.ws_item_sk = i.i_item_sk
    WHERE 
        ws.ws_sold_date_sk BETWEEN (SELECT MIN(d_date_sk) FROM date_dim) AND (SELECT MAX(d_date_sk) FROM date_dim)
    GROUP BY 
        ws.ws_item_sk
),
TopSellingItems AS (
    SELECT 
        rs.ws_item_sk,
        rs.total_quantity,
        rs.total_sales,
        i.i_item_desc
    FROM 
        RankedSales rs
    JOIN 
        item i ON rs.ws_item_sk = i.i_item_sk
    WHERE 
        sales_rank <= 10
),
CustomerDemographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        COALESCE(hd.hd_income_band_sk, 0) AS income_band
    FROM 
        customer_demographics cd
    LEFT JOIN 
        household_demographics hd ON cd.cd_demo_sk = hd.hd_demo_sk
),
FinalAnalysis AS (
    SELECT 
        tsi.i_item_desc,
        c.cd_gender,
        c.cd_marital_status,
        SUM(tsi.total_sales) AS sales_sum,
        AVG(c.cd_purchase_estimate) AS avg_purchase_estimate,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count
    FROM 
        TopSellingItems tsi
    JOIN 
        web_sales ws ON tsi.ws_item_sk = ws.ws_item_sk
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    JOIN 
        CustomerDemographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_purchase_estimate IS NOT NULL
        AND cd.cd_marital_status <> 'S' 
    GROUP BY 
        tsi.i_item_desc, c.cd_gender, c.cd_marital_status
)

SELECT 
    fa.i_item_desc,
    fa.cd_gender,
    fa.cd_marital_status,
    fa.sales_sum,
    fa.avg_purchase_estimate,
    CASE 
        WHEN fa.customer_count > 100 THEN 'Good'
        WHEN fa.customer_count BETWEEN 50 AND 100 THEN 'Average'
        ELSE 'Poor'
    END AS customer_feedback
FROM 
    FinalAnalysis fa
WHERE 
    fa.sales_sum > (SELECT AVG(sales_sum) FROM FinalAnalysis)
ORDER BY 
    fa.sales_sum DESC;