WITH RECURSIVE sales_cte AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2001)
    GROUP BY 
        ws_item_sk
    UNION ALL
    SELECT 
        ws_item_sk, 
        SUM(ws_quantity) + r.total_quantity,
        SUM(ws_sales_price) + r.total_sales
    FROM 
        web_sales ws
    JOIN 
        sales_cte r ON ws_item_sk = r.ws_item_sk
    WHERE 
        ws_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2000)
    GROUP BY 
        ws_item_sk
),
item_details AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        COALESCE(SUM(d.ws_quantity), 0) AS total_quantity,
        COALESCE(SUM(d.ws_sales_price), 0) AS total_sales
    FROM 
        item i
    LEFT JOIN 
        web_sales d ON i.i_item_sk = d.ws_item_sk
    GROUP BY 
        i.i_item_sk, 
        i.i_item_desc
),
customer_stats AS (
    SELECT 
        cd.cd_demo_sk,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count,
        AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY 
        cd.cd_demo_sk
)
SELECT 
    i.i_item_desc, 
    COALESCE(s.total_quantity, 0) AS total_quantity,
    COALESCE(s.total_sales, 0) AS total_sales,
    cs.customer_count,
    cs.avg_purchase_estimate,
    CASE 
        WHEN cs.avg_purchase_estimate IS NULL THEN 'No Data'
        WHEN cs.avg_purchase_estimate > 1000 THEN 'High Value Customer'
        ELSE 'Regular Customer'
    END AS customer_value
FROM 
    item_details i
LEFT JOIN 
    sales_cte s ON i.i_item_sk = s.ws_item_sk
LEFT JOIN 
    customer_stats cs ON cs.cd_demo_sk = (SELECT MIN(cd_demo_sk) FROM customer_demographics) 
WHERE 
    i.total_quantity > 0
ORDER BY 
    total_sales DESC
LIMIT 10;