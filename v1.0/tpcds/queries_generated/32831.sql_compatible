
WITH RECURSIVE income_summary AS (
    SELECT 
        h.hd_income_band_sk,
        SUM(CASE WHEN h.hd_buy_potential = 'High' THEN h.hd_dep_count ELSE 0 END) AS high_potential_deps,
        COUNT(DISTINCT h.hd_demo_sk) AS total_demographics
    FROM 
        household_demographics h
    GROUP BY 
        h.hd_income_band_sk

    UNION ALL
    
    SELECT 
        h.hd_income_band_sk,
        SUM(CASE WHEN h.hd_buy_potential = 'Medium' THEN h.hd_dep_count ELSE 0 END) AS high_potential_deps,
        COUNT(DISTINCT h.hd_demo_sk) AS total_demographics
    FROM 
        household_demographics h
    WHERE 
        h.hd_income_band_sk IS NOT NULL
    GROUP BY 
        h.hd_income_band_sk
),
customer_return_stats AS (
    SELECT 
        c.c_customer_sk, 
        COUNT(DISTINCT sr.returned_date) AS total_returns,
        SUM(sr.sr_net_loss) AS total_return_loss
    FROM 
        customer c
    LEFT JOIN store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    GROUP BY 
        c.c_customer_sk
),
sales_summary AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity_sold,
        SUM(ws.ws_net_paid_inc_tax) AS total_sales,
        RANK() OVER (PARTITION BY ws.ws_ship_date_sk ORDER BY SUM(ws.ws_net_paid_inc_tax) DESC) AS sales_rank
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_item_sk, ws.ws_ship_date_sk
)
SELECT 
    c.c_first_name,
    c.c_last_name,
    ci.hd_income_band_sk,
    COALESCE(cs.total_returns, 0) AS total_returns,
    COALESCE(cs.total_return_loss, 0) AS total_return_loss,
    i.total_quantity_sold,
    i.total_sales,
    COALESCE(i.sales_rank, 0) AS sales_rank,
    CASE 
        WHEN i.total_quantity_sold > 100 THEN 'High Volume'
        WHEN i.total_quantity_sold BETWEEN 50 AND 100 THEN 'Moderate Volume'
        ELSE 'Low Volume'
    END AS volume_category
FROM 
    customer c
LEFT JOIN customer_return_stats cs ON c.c_customer_sk = cs.c_customer_sk
LEFT JOIN income_summary ci ON ci.hd_income_band_sk = c.c_current_hdemo_sk
LEFT JOIN sales_summary i ON i.ws_item_sk = c.c_current_addr_sk
ORDER BY 
    c.c_first_name, c.c_last_name;
