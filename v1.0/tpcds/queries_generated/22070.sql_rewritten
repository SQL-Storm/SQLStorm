WITH RecursiveCustomerReturns AS (
    SELECT sr_returning_customer_sk, SUM(sr_return_quantity) AS total_return_qty
    FROM store_returns
    GROUP BY sr_returning_customer_sk
    UNION ALL
    SELECT wr_returning_customer_sk, SUM(wr_return_quantity) AS total_return_qty
    FROM web_returns
    GROUP BY wr_returning_customer_sk
),
CustomerPromoStats AS (
    SELECT c.c_customer_sk, 
           COALESCE(SUM(CASE WHEN r.r_reason_sk IS NOT NULL THEN 1 ELSE 0 END), 0) AS returns_count,
           COUNT(DISTINCT cs.cs_order_number) AS catalog_sales_count,
           (SELECT COUNT(*) 
            FROM promotion p 
            WHERE p.p_discount_active = 'Y' AND p.p_start_date_sk < cast('2002-10-01' as date) AND p.p_end_date_sk > cast('2002-10-01' as date)) AS active_promotions_count
    FROM customer c
    LEFT JOIN store_returns sr ON c.c_customer_sk = sr.sr_returning_customer_sk
    LEFT JOIN catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    LEFT JOIN reason r ON sr.sr_reason_sk = r.r_reason_sk
    GROUP BY c.c_customer_sk
),
TotalReturns AS (
    SELECT cr.returning_customer_sk, 
           SUM(cr.total_return_qty) AS total_returns,
           COUNT(cd.cd_demo_sk) AS demographics_count
    FROM RecursiveCustomerReturns cr
    LEFT JOIN customer_demographics cd ON cr.returning_customer_sk = cd.cd_demo_sk
    GROUP BY cr.returning_customer_sk
)
SELECT c.c_customer_id, 
       cs.returns_count, 
       cs.catalog_sales_count, 
       ts.total_returns, 
       ts.demographics_count,
       (CASE WHEN ts.total_returns > 0 THEN 'Active' ELSE 'Inactive' END) AS return_status,
       (ROW_NUMBER() OVER (PARTITION BY cs.returns_count ORDER BY ts.total_returns DESC)) AS rank_within_returns
FROM CustomerPromoStats cs
JOIN customer c ON cs.c_customer_sk = c.c_customer_sk
JOIN TotalReturns ts ON c.c_customer_sk = ts.returning_customer_sk
WHERE (cs.catalog_sales_count > 0 OR cs.returns_count > 5)
  AND cs.active_promotions_count > 5
  AND c.c_birth_year > 1980
  AND (c.c_preferred_cust_flag = 'Y' OR c.c_birth_month IS NULL)
ORDER BY ts.total_returns DESC, cs.returns_count DESC, c.c_customer_id;