
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales,
        SUM(ws_quantity) AS total_quantity,
        COUNT(DISTINCT ws_order_number) AS orders_count,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sales_price DESC) AS sales_rank
    FROM web_sales
    WHERE ws_sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2022)
    GROUP BY ws_item_sk
), 
customer_info AS (
    SELECT 
        c.c_customer_sk,
        CONCAT(c.c_first_name, ' ', c.c_last_name) AS full_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS demo_rank
    FROM customer c
    INNER JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_purchase_estimate > 500
), 
filtered_sales AS (
    SELECT 
        s.ws_item_sk,
        ss.total_sales,
        ss.total_quantity
    FROM sales_summary ss
    INNER JOIN web_sales s ON s.ws_item_sk = ss.ws_item_sk
    WHERE ss.sales_rank <= 5
),
warehouse_info AS (
    SELECT 
        w.w_warehouse_sk,
        w.w_warehouse_name,
        COUNT(DISTINCT inv.inv_item_sk) AS inventory_count
    FROM warehouse w
    LEFT JOIN inventory inv ON w.w_warehouse_sk = inv.inv_warehouse_sk
    GROUP BY w.w_warehouse_sk, w.w_warehouse_name
)
SELECT 
    ci.full_name,
    ci.cd_gender,
    ci.cd_marital_status,
    ci.cd_purchase_estimate,
    fs.total_sales,
    fs.total_quantity,
    wi.inventory_count AS warehouse_count
FROM customer_info ci
LEFT JOIN filtered_sales fs ON ci.c_customer_sk = fs.ws_item_sk
FULL OUTER JOIN warehouse_info wi ON wi.inventory_count = (SELECT MAX(inventory_count) FROM warehouse_info)
WHERE ci.demo_rank <= 10
  AND (ci.cd_gender IS NOT NULL OR ci.cd_marital_status IS NOT NULL)
ORDER BY ci.cd_purchase_estimate DESC, fs.total_sales DESC;
