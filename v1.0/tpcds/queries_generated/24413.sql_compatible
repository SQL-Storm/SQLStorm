
WITH RecursiveSales AS (
    SELECT
        ws.web_site_sk,
        ws.ws_sales_price,
        ws.ws_quantity,
        ws.ws_sold_date_sk,
        ws.ws_bill_customer_sk,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_bill_customer_sk ORDER BY ws.ws_sold_date_sk DESC) AS rn
    FROM
        web_sales ws
    WHERE
        ws.ws_sales_price IS NOT NULL
),
CustomerSummary AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(rs.ws_sales_price * rs.ws_quantity) AS total_spent,
        COUNT(DISTINCT rs.ws_sold_date_sk) AS total_orders
    FROM
        customer c
    LEFT JOIN RecursiveSales rs ON c.c_customer_sk = rs.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
),
DemographicAnalysis AS (
    SELECT
        cd.cd_gender,
        cd.cd_marital_status,
        AVG(cs.total_spent) AS avg_spent,
        SUM(cs.total_orders) AS total_order_count
    FROM
        CustomerSummary cs
    JOIN customer_demographics cd ON cs.c_customer_sk = cd.cd_demo_sk
    GROUP BY cd.cd_gender, cd.cd_marital_status
),
HighSpenders AS (
    SELECT
        da.cd_gender,
        da.cd_marital_status,
        da.avg_spent,
        da.total_order_count,
        RANK() OVER (ORDER BY da.avg_spent DESC) AS spending_rank
    FROM
        DemographicAnalysis da
    WHERE
        da.avg_spent > (SELECT AVG(avg_spent) FROM DemographicAnalysis)
)
SELECT 
    hs.cd_gender,
    hs.cd_marital_status,
    hs.avg_spent,
    hs.total_order_count,
    CASE 
        WHEN hs.spending_rank <= 10 THEN 'Top 10%' 
        ELSE 'Others' 
    END AS spend_category,
    COALESCE(SUM(cr.cr_return_amount), 0) AS total_returned
FROM
    HighSpenders hs
LEFT JOIN catalog_returns cr ON cr.cr_returning_customer_sk IN (
    SELECT 
        c.c_customer_sk 
    FROM 
        customer c 
    JOIN RecursiveSales rs ON c.c_customer_sk = rs.ws_bill_customer_sk
)
GROUP BY 
    hs.cd_gender, 
    hs.cd_marital_status,
    hs.avg_spent,
    hs.total_order_count,
    hs.spending_rank
ORDER BY 
    hs.avg_spent DESC,
    hs.cd_gender,
    hs.cd_marital_status;
