
WITH RECURSIVE sales_cte AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        ws_quantity,
        ws_sales_price,
        ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk DESC) AS rn
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk >= 20200301 
), 
customer_info AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_credit_rating,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_credit_rating ORDER BY cd.cd_purchase_estimate DESC) AS rank
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), 
inventory_status AS (
    SELECT 
        inv.inv_item_sk,
        SUM(inv.inv_quantity_on_hand) AS total_quantity,
        COUNT(DISTINCT inv.inv_warehouse_sk) AS warehouse_count
    FROM 
        inventory inv
    GROUP BY 
        inv.inv_item_sk
)

SELECT 
    ci.c_first_name,
    ci.c_last_name,
    ci.cd_gender,
    ci.cd_marital_status,
    si.total_quantity,
    si.warehouse_count,
    COALESCE(SUM(s.ws_sales_price), 0) AS total_sales,
    MAX(s.ws_sales_price) AS max_sales_price,
    MIN(s.ws_sales_price) AS min_sales_price
FROM 
    customer_info ci
LEFT JOIN 
    sales_cte s ON ci.c_customer_sk = s.ws_bill_customer_sk
LEFT JOIN 
    inventory_status si ON s.ws_item_sk = si.inv_item_sk
WHERE 
    ci.rank <= 10 
GROUP BY 
    ci.c_first_name, 
    ci.c_last_name, 
    ci.cd_gender, 
    ci.cd_marital_status, 
    si.total_quantity, 
    si.warehouse_count
HAVING 
    COALESCE(SUM(s.ws_sales_price), 0) > 1000 
ORDER BY 
    total_sales DESC
LIMIT 50;
