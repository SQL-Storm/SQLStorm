WITH RECURSIVE ItemHierarchy AS (
    SELECT i_item_sk, i_item_id, i_item_desc, i_current_price, 0 AS level
    FROM item
    WHERE i_item_sk IS NOT NULL
      
    UNION ALL
  
    SELECT i.i_item_sk, i.i_item_id, CONCAT(h.i_item_desc, ' -> ', i.i_item_desc) AS i_item_desc, i.i_current_price, h.level + 1
    FROM item i
    JOIN ItemHierarchy h ON i.i_item_sk = h.i_item_sk + 1  
)
SELECT 
    c.c_customer_id,
    SUM(CASE 
            WHEN cs.cs_quantity > 0 THEN cs.cs_ext_sales_price 
            ELSE NULL 
        END) AS total_sales,
    COUNT(DISTINCT cs.cs_order_number) AS order_count,
    AVG(CASE 
            WHEN ws.ws_quantity IS NOT NULL THEN ws.ws_net_profit 
            ELSE 0 
        END) AS avg_web_profit,
    MAX(ih.i_item_desc) AS max_item_hierarchy,
    SMO.sm_carrier,
    DENSE_RANK() OVER (PARTITION BY c.c_country ORDER BY SUM(cs.cs_sales_price) DESC) AS sales_rank
FROM customer c
LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
LEFT JOIN catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN ship_mode SMO ON ss.ss_ship_mode_sk = SMO.sm_ship_mode_sk
LEFT JOIN ItemHierarchy ih ON ss.ss_item_sk = ih.i_item_sk
WHERE c.c_birth_year BETWEEN 1980 AND 1990 
    AND (ws.ws_sales_price IS NULL OR ws.ws_sales_price > 100) 
GROUP BY c.c_customer_id, SMO.sm_carrier
HAVING total_sales > 500
ORDER BY total_sales DESC
LIMIT 10;