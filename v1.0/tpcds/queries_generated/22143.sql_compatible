
WITH RECURSIVE demographic_analysis AS (
    SELECT 
        cd_demo_sk,
        cd_gender,
        cd_marital_status,
        cd_birth_month,
        cd_birth_year,
        cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd_gender ORDER BY cd_purchase_estimate DESC) AS rn
    FROM customer_demographics
    WHERE cd_purchase_estimate IS NOT NULL
),
customer_data AS (
    SELECT 
        c.c_customer_sk,
        c.c_email_address,
        ca.ca_city,
        ca.ca_state,
        CAST(d.d_date AS DATE) AS purchase_date,
        d.d_month_seq,
        d.d_year,
        SUM(ws.ws_ext_sales_price) AS total_spent
    FROM customer c
    JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE d.d_year BETWEEN 2020 AND 2023
    GROUP BY c.c_customer_sk, c.c_email_address, ca.ca_city, ca.ca_state, d.d_month_seq, d.d_year
),
top_customers AS (
    SELECT 
        c.c_customer_sk,
        SUM(cs.cs_net_paid) AS total_spent,
        COUNT(DISTINCT cs.cs_order_number) AS orders_count
    FROM customer c
    LEFT JOIN catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    WHERE cs.cs_net_paid IS NOT NULL
    GROUP BY c.c_customer_sk
    HAVING SUM(cs.cs_net_paid) > 1000
),
detailed_customer_info AS (
    SELECT 
        ca.ca_city,
        ca.ca_state,
        c.c_email_address,
        cu.total_spent,
        da.cd_gender,
        da.cd_marital_status
    FROM top_customers cu
    JOIN customer c ON cu.c_customer_sk = c.c_customer_sk
    JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    LEFT JOIN demographic_analysis da ON c.c_current_cdemo_sk = da.cd_demo_sk
)
SELECT 
    dci.ca_city,
    dci.ca_state,
    dci.c_email_address,
    COALESCE(dci.total_spent, 0) AS spent,
    dci.cd_gender,
    dci.cd_marital_status,
    CASE 
        WHEN dci.total_spent IS NULL THEN 'New Customer'
        WHEN dci.total_spent < 500 THEN 'Low Spender'
        WHEN dci.total_spent BETWEEN 500 AND 1000 THEN 'Medium Spender'
        ELSE 'High Spender'
    END AS customer_segment
FROM detailed_customer_info dci
FULL OUTER JOIN (
    SELECT DISTINCT ca.ca_state, ca.ca_city
    FROM customer_address ca
    WHERE ca.ca_state IS NOT NULL
) DISTINCT_ADDRESSES ON dci.ca_city = DISTINCT_ADDRESSES.ca_city AND dci.ca_state = DISTINCT_ADDRESSES.ca_state
WHERE (dci.ca_city IS NOT NULL OR DISTINCT_ADDRESSES.ca_city IS NOT NULL)
ORDER BY dci.ca_state, dci.ca_city, spent DESC;
