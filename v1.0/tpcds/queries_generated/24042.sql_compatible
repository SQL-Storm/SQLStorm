
WITH RankedReturns AS (
    SELECT 
        cr_returning_customer_sk,
        cr_item_sk,
        cr_return_quantity,
        cr_return_amount,
        ROW_NUMBER() OVER (PARTITION BY cr_returning_customer_sk ORDER BY cr_returned_date_sk DESC) AS rn
    FROM 
        catalog_returns
    WHERE 
        cr_return_quantity > 0
),
CustomerInfo AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_credit_rating,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_id ORDER BY c.c_birth_year) AS customer_rank
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
SalesData AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_sales,
        AVG(ws.ws_net_profit) AS avg_profit
    FROM 
        web_sales ws
    LEFT JOIN 
        CustomerInfo ci ON ws.ws_bill_customer_sk = (SELECT c.c_customer_sk FROM customer c WHERE c.c_customer_id = ci.c_customer_id)
    WHERE 
        ci.customer_rank = 1
    GROUP BY 
        ws.ws_item_sk
)
SELECT 
    r.cr_returning_customer_sk,
    ci.c_customer_id,
    ci.cd_gender,
    sd.total_sales,
    sd.avg_profit,
    CASE 
        WHEN r.cr_return_quantity IS NULL THEN 0 
        ELSE r.cr_return_quantity 
    END AS return_quantity,
    COALESCE(sd.total_sales, 0) - COALESCE(r.cr_return_quantity, 0) AS net_sales
FROM 
    RankedReturns r
FULL OUTER JOIN 
    CustomerInfo ci ON r.cr_returning_customer_sk = ci.c_customer_id
LEFT JOIN 
    SalesData sd ON r.cr_item_sk = sd.ws_item_sk
WHERE 
    (ci.cd_marital_status IS NULL OR ci.cd_marital_status <> 'S')
    AND (r.cr_return_amount > 100.00 OR sd.total_sales IS NULL)
ORDER BY 
    return_quantity DESC, net_sales ASC;
