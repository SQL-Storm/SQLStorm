WITH RECURSIVE sales_data AS (
    SELECT
        ws_sold_date_sk,
        ws_item_sk,
        ws_quantity,
        ws_net_paid,
        1 AS level
    FROM
        web_sales
    WHERE
        ws_sold_date_sk = (SELECT d_date_sk FROM date_dim WHERE d_date = cast('2002-10-01' as date))
    UNION ALL
    SELECT
        ws.ws_sold_date_sk,
        ws.ws_item_sk,
        ws.ws_quantity,
        ws.ws_net_paid,
        sd.level + 1
    FROM
        sales_data sd
    JOIN
        web_sales ws ON sd.ws_item_sk = ws.ws_item_sk
    WHERE
        sd.level < 5 
),
customer_sales AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_net_paid) AS total_net_paid
    FROM
        customer c
    JOIN
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
high_value_customers AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cs.total_net_paid,
        ROW_NUMBER() OVER (ORDER BY cs.total_net_paid DESC) AS rn
    FROM
        customer_sales cs
    JOIN
        customer c ON cs.c_customer_sk = c.c_customer_sk
    WHERE
        cs.total_net_paid > 1000
)
SELECT
    hvc.c_first_name,
    hvc.c_last_name,
    hvc.total_net_paid,
    COALESCE(sd.ws_quantity, 0) AS recursive_sales_quantity,
    (SELECT COUNT(*) FROM store_sales ss WHERE ss.ss_customer_sk = hvc.c_customer_sk) AS store_based_sales_count,
    CASE
        WHEN hvc.total_net_paid IS NULL THEN 'No Sales'
        ELSE 'Sales Present'
    END AS sales_status
FROM
    high_value_customers hvc
LEFT JOIN
    sales_data sd ON hvc.c_customer_sk = sd.ws_item_sk
ORDER BY
    hvc.total_net_paid DESC;