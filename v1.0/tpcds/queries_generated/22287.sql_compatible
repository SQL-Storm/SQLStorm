
WITH CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        COUNT(DISTINCT sr.ticket_number) AS total_returns,
        SUM(sr.return_quantity) AS total_return_quantity,
        COUNT(DISTINCT wr.order_number) AS web_returns_count,
        SUM(wr.return_quantity) AS total_web_return_quantity,
        CASE 
            WHEN COALESCE(SUM(sr.return_amt), 0) > 0 THEN 'High Return'
            WHEN COALESCE(SUM(sr.return_amt), 0) = 0 THEN 'No Returns'
            ELSE 'Minor Returns'
        END AS return_category
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    LEFT JOIN 
        web_returns wr ON c.c_customer_sk = wr.wr_returning_customer_sk
    WHERE 
        c.c_birth_year IS NOT NULL
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status
),
TotalReturns AS (
    SELECT 
        SUM(total_returns) AS overall_returns,
        SUM(total_return_quantity) AS overall_return_quantity
    FROM 
        CustomerStats
),
DateMetrics AS (
    SELECT 
        d.d_date,
        d.d_day_name,
        DENSE_RANK() OVER (ORDER BY d.d_date) AS date_rank
    FROM 
        date_dim d
    WHERE 
        d.d_date BETWEEN '2022-01-01' AND '2022-12-31'
),
RankedReturns AS (
    SELECT 
        cs.c_first_name,
        cs.c_last_name,
        cs.return_category,
        dm.d_day_name,
        dm.date_rank,
        ROW_NUMBER() OVER (PARTITION BY cs.return_category ORDER BY cs.total_returns DESC) AS rnk
    FROM 
        CustomerStats cs
    JOIN 
        DateMetrics dm ON cs.total_returns > 0
)
SELECT 
    rr.c_first_name,
    rr.c_last_name,
    rr.return_category,
    rr.d_day_name,
    rr.date_rank,
    COALESCE(tr.overall_returns, 0) AS total_overall_returns,
    COALESCE(tr.overall_return_quantity, 0) AS total_overall_return_quantity
FROM 
    RankedReturns rr
CROSS JOIN 
    TotalReturns tr
WHERE 
    rr.rnk <= 10
ORDER BY 
    rr.return_category, rr.c_first_name, rr.c_last_name;
