
WITH RECURSIVE date_series AS (
    SELECT MIN(d_date_sk) AS start_date, MAX(d_date_sk) AS end_date
    FROM date_dim
    UNION ALL
    SELECT start_date + INTERVAL '1 day'
    FROM date_series
    WHERE start_date + INTERVAL '1 day' <= (SELECT MAX(d_date_sk) FROM date_dim)
),
inventory_summary AS (
    SELECT 
        inv.inv_warehouse_sk,
        SUM(inv.inv_quantity_on_hand) AS total_inventory,
        COUNT(DISTINCT i.i_item_sk) AS distinct_items
    FROM inventory inv
    JOIN item i ON inv.inv_item_sk = i.i_item_sk
    GROUP BY inv.inv_warehouse_sk
),
sales_data AS (
    SELECT 
        ws.ws_sold_date_sk,
        SUM(COALESCE(ws.ws_sales_price, 0)) AS total_sales,
        SUM(ws.ws_quantity) AS total_quantity,
        ws.ws_ship_mode_sk
    FROM web_sales ws
    LEFT JOIN ship_mode sm ON ws.ws_ship_mode_sk = sm.sm_ship_mode_sk
    GROUP BY ws.ws_sold_date_sk, ws.ws_ship_mode_sk
),
customer_analysis AS (
    SELECT 
        c.c_customer_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        COUNT(DISTINCT ws.ws_order_number) AS orders_count
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, cd.cd_gender, cd.cd_marital_status
),
complex_join AS (
    SELECT 
        ws.ws_order_number,
        cs.cs_order_number,
        cd.cd_demo_sk,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_order_number ORDER BY cd.cd_purchase_estimate DESC) AS rank_order
    FROM web_sales ws
    FULL OUTER JOIN catalog_sales cs ON ws.ws_order_number = cs.cs_order_number
    JOIN customer_demographics cd ON ws.ws_bill_cdemo_sk = cd.cd_demo_sk
),
final_summary AS (
    SELECT 
        ds.start_date,
        COALESCE((SELECT SUM(total_sales) FROM sales_data WHERE ws_sold_date_sk = ds.start_date), 0) AS total_web_sales,
        COALESCE((SELECT SUM(total_quantity) FROM sales_data WHERE ws_sold_date_sk = ds.start_date), 0) AS total_web_sales_quantity,
        COALESCE((SELECT SUM(total_inventory) FROM inventory_summary), 0) AS total_inventory,
        COUNT(DISTINCT c.c_customer_sk) AS unique_customers,
        SUM(CASE WHEN ca.orders_count > 0 THEN 1 ELSE 0 END) AS active_customers
    FROM date_series ds
    LEFT JOIN customer_analysis ca ON ds.start_date = (SELECT MIN(ws.ws_sold_date_sk) FROM web_sales ws WHERE ws.ws_bill_customer_sk = ca.c_customer_sk)
    GROUP BY ds.start_date
)
SELECT 
    fs.start_date,
    fs.total_web_sales,
    fs.total_web_sales_quantity,
    fs.total_inventory,
    fs.unique_customers,
    fs.active_customers,
    CASE 
        WHEN fs.total_web_sales > 50000 THEN 'High'
        WHEN fs.total_web_sales BETWEEN 20000 AND 50000 THEN 'Medium'
        ELSE 'Low'
    END AS sales_category
FROM final_summary fs
ORDER BY fs.start_date DESC
LIMIT 100;
