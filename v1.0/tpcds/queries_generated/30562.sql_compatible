
WITH RECURSIVE customer_sales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
), ranked_sales AS (
    SELECT 
        cs.c_customer_sk,
        cs.c_first_name,
        cs.c_last_name,
        cs.total_sales,
        CASE
            WHEN cs.sales_rank <= 10 THEN 'Top 10 Customers'
            ELSE 'Other Customers'
        END AS customer_group
    FROM 
        customer_sales cs
), top_promotions AS (
    SELECT 
        p.p_promo_name,
        SUM(ws.ws_ext_sales_price) AS total_sales_promotion
    FROM 
        promotion p
    JOIN 
        web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    GROUP BY 
        p.p_promo_name
), combined_data AS (
    SELECT 
        rs.c_customer_sk,
        rs.c_first_name,
        rs.c_last_name,
        rs.total_sales,
        tp.p_promo_name,
        tp.total_sales_promotion,
        COALESCE(rs.total_sales, 0) - COALESCE(tp.total_sales_promotion, 0) AS net_sales_adjustment
    FROM 
        ranked_sales rs
    LEFT JOIN 
        top_promotions tp ON rs.total_sales > tp.total_sales_promotion
)
SELECT 
    c.c_first_name,
    c.c_last_name,
    COALESCE(SUM(cd.total_sales), 0) AS total_customer_sales,
    COALESCE(SUM(cd.cd_purchase_estimate), 0) AS estimated_purchases,
    CASE 
        WHEN COUNT(sr.sr_return_quantity) > 0 THEN 1
        ELSE 0 
    END AS has_returns,
    STRING_AGG(DISTINCT tp.p_promo_name, ', ') AS involved_promotions
FROM 
    combined_data cd
LEFT JOIN 
    customer c ON cd.c_customer_sk = c.c_customer_sk
LEFT JOIN 
    store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
LEFT JOIN 
    customer_demographics cdemo ON c.c_current_cdemo_sk = cdemo.cd_demo_sk
WHERE 
    cd.net_sales_adjustment > 0
GROUP BY 
    c.c_first_name, c.c_last_name
HAVING 
    COUNT(DISTINCT cd.customer_group) > 1
ORDER BY 
    total_customer_sales DESC
LIMIT 100;
