
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ss.ss_net_profit) AS total_net_profit
    FROM customer c
    JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    WHERE ss.ss_sold_date_sk = (SELECT MAX(ss_inner.ss_sold_date_sk) FROM store_sales ss_inner)
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
    HAVING SUM(ss.ss_net_profit) > (SELECT AVG(ss_inner.ss_net_profit) FROM store_sales ss_inner)
    UNION ALL
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ss.ss_net_profit) + sh.total_net_profit
    FROM customer c
    JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    JOIN SalesHierarchy sh ON sh.c_customer_sk = c.c_customer_sk
    WHERE ss.ss_sold_date_sk < (SELECT MAX(ss_inner.ss_sold_date_sk) FROM store_sales ss_inner)
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, sh.total_net_profit
),
RecentReturns AS (
    SELECT 
        cr.cr_returning_customer_sk,
        COUNT(cr.cr_return_number) AS total_returns,
        SUM(cr.cr_return_amount) AS total_return_amount
    FROM catalog_returns cr
    WHERE cr.cr_returned_date_sk >= (SELECT MAX(d.d_date_sk) - 30 FROM date_dim d)
    GROUP BY cr.cr_returning_customer_sk
),
CustomerStats AS (
    SELECT 
        ch.c_customer_sk,
        ch.c_first_name,
        ch.c_last_name,
        COALESCE(sh.total_net_profit, 0) AS total_net_profit,
        COALESCE(rr.total_returns, 0) AS total_returns,
        COALESCE(rr.total_return_amount, 0) AS total_return_amount
    FROM SalesHierarchy sh
    LEFT JOIN RecentReturns rr ON sh.c_customer_sk = rr.cr_returning_customer_sk
    JOIN customer ch ON sh.c_customer_sk = ch.c_customer_sk
)
SELECT 
    cs.c_first_name,
    cs.c_last_name,
    cs.total_net_profit,
    cs.total_returns,
    cs.total_return_amount,
    CASE 
        WHEN cs.total_net_profit > 1000 THEN 'High Value'
        WHEN cs.total_net_profit BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value_segment,
    DENSE_RANK() OVER (ORDER BY cs.total_net_profit DESC) AS rank
FROM CustomerStats cs
WHERE cs.total_net_profit IS NOT NULL OR cs.total_returns > 0
ORDER BY cs.total_net_profit DESC, cs.total_returns DESC
LIMIT 10;
