
WITH RankedSales AS (
    SELECT
        ss_store_sk,
        ss_sold_date_sk,
        SUM(ss_sales_price) AS total_sales,
        RANK() OVER (PARTITION BY ss_store_sk ORDER BY SUM(ss_sales_price) DESC) AS sales_rank
    FROM
        store_sales
    GROUP BY
        ss_store_sk, ss_sold_date_sk
),
TopStores AS (
    SELECT
        ss_store_sk,
        MAX(total_sales) AS max_sales
    FROM
        RankedSales
    WHERE
        sales_rank <= 5
    GROUP BY
        ss_store_sk
),
CustomerReturns AS (
    SELECT
        sr_customer_sk,
        SUM(sr_return_amt_inc_tax) AS total_returned
    FROM
        store_returns
    GROUP BY
        sr_customer_sk
),
ReturnDetails AS (
    SELECT
        c.c_customer_id,
        COALESCE(cr.total_returned, 0) AS total_returned,
        c.c_first_name,
        ca.ca_city,
        CASE
            WHEN cr.total_returned > 100 THEN 'High Return'
            WHEN cr.total_returned > 50 THEN 'Medium Return'
            ELSE 'Low Return'
        END AS return_category
    FROM
        customer c
    LEFT JOIN
        CustomerReturns cr ON c.c_customer_sk = cr.sr_customer_sk
    JOIN
        customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
)
SELECT
    ts.ss_store_sk,
    ts.max_sales,
    rd.c_customer_id,
    rd.total_returned,
    rd.return_category,
    ca.ca_city
FROM
    TopStores ts
JOIN
    store_sales ss ON ts.ss_store_sk = ss.ss_store_sk
JOIN
    ReturnDetails rd ON ss.ss_customer_sk = rd.c_customer_id
LEFT JOIN
    customer_address ca ON rd.c_customer_id = ca.ca_address_sk
WHERE
    ts.max_sales > 5000 AND
    (rd.total_returned IS NULL OR rd.total_returned > 0)
ORDER BY
    ts.max_sales DESC, rd.total_returned DESC;
