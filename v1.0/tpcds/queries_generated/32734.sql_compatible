
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ss.ss_net_paid) AS total_sales,
        1 AS level,
        (c.c_first_name || ' ' || c.c_last_name) AS full_name
    FROM 
        customer c
    JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
    HAVING 
        SUM(ss.ss_net_paid) > 10000

    UNION ALL

    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        sh.total_sales + SUM(ss.ss_net_paid) AS total_sales,
        sh.level + 1,
        (sh.full_name || ' -> ' || c.c_first_name || ' ' || c.c_last_name) AS full_name
    FROM 
        SalesHierarchy sh
    JOIN 
        store_sales ss ON ss.ss_customer_sk = sh.c_customer_sk
    JOIN 
        customer c ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, sh.total_sales, sh.level, sh.full_name
    HAVING 
        SUM(ss.ss_net_paid) > 5000
)
SELECT 
    sh.full_name,
    sh.total_sales,
    DENSE_RANK() OVER (ORDER BY sh.total_sales DESC) AS sales_rank
FROM 
    SalesHierarchy sh
WHERE 
    sh.total_sales IS NOT NULL
ORDER BY 
    sh.total_sales DESC;
