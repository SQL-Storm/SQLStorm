
WITH RECURSIVE CustomerCTE AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_birth_year
    FROM customer
    WHERE c_birth_year IS NOT NULL
    UNION ALL
    SELECT c.customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year 
    FROM customer c
    JOIN CustomerCTE cc ON c.c_customer_sk = cc.c_customer_sk + 1
),
SalesData AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_sales,
        AVG(ws.ws_net_profit) AS avg_profit
    FROM web_sales ws
    GROUP BY ws.ws_item_sk
),
Demographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS rank
    FROM customer_demographics cd
)
SELECT 
    c.c_first_name || ' ' || c.c_last_name AS customer_name,
    sa.total_sales,
    sa.avg_profit,
    d.cd_gender,
    d.cd_marital_status,
    d.cd_purchase_estimate
FROM CustomerCTE c
LEFT JOIN SalesData sa ON sa.ws_item_sk = c.c_customer_sk
LEFT JOIN Demographics d ON d.cd_demo_sk = c.c_customer_sk
WHERE (d.cd_purchase_estimate > 1000 OR d.cd_marital_status IS NULL)
  AND (sa.total_sales IS NOT NULL AND sa.total_sales > 50)
GROUP BY c.c_first_name, c.c_last_name, sa.total_sales, sa.avg_profit, d.cd_gender, d.cd_marital_status, d.cd_purchase_estimate
ORDER BY sa.avg_profit DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
