
WITH RankedReturns AS (
    SELECT 
        wr_returning_customer_sk,
        wr_item_sk,
        wr_return_quantity,
        ROW_NUMBER() OVER (PARTITION BY wr_returning_customer_sk ORDER BY wr_return_quantity DESC) AS rn
    FROM web_returns
    WHERE wr_return_quantity IS NOT NULL AND wr_return_quantity > 0
),
CustomerWithReturns AS (
    SELECT 
        c.c_customer_id,
        SUM(rr.wr_return_quantity) AS total_returns,
        COUNT(*) AS returns_count
    FROM customer c
    LEFT JOIN RankedReturns rr ON c.c_customer_sk = rr.wr_returning_customer_sk
    GROUP BY c.c_customer_id
),
TopReturningCustomers AS (
    SELECT 
        cwr.*,
        DENSE_RANK() OVER (ORDER BY cwr.total_returns DESC) AS return_rank
    FROM CustomerWithReturns cwr
),
OrderDetails AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_item_sk,
        ws.ws_net_profit,
        COALESCE(ss.ss_sales_price, 0) AS ss_sales_price,
        COALESCE(cs.cs_sales_price, 0) AS cs_sales_price
    FROM web_sales ws
    FULL OUTER JOIN store_sales ss ON ws.ws_order_number = ss.ss_ticket_number AND ws.ws_item_sk = ss.ss_item_sk
    FULL OUTER JOIN catalog_sales cs ON ws.ws_order_number = cs.cs_order_number AND ws.ws_item_sk = cs.ws_item_sk
),
FinalResults AS (
    SELECT 
        trc.c_customer_id,
        od.ws_order_number,
        od.ws_item_sk,
        od.ws_net_profit,
        od.ss_sales_price,
        od.cs_sales_price,
        CASE 
            WHEN od.ws_net_profit IS NULL AND od.ss_sales_price = 0 AND od.cs_sales_price = 0 THEN 'No Sales'
            ELSE 'Sales Exist'
        END AS sales_status
    FROM TopReturningCustomers trc
    JOIN OrderDetails od ON trc.c_customer_id = od.ws_order_number
    WHERE trc.return_rank <= 10
)
SELECT 
    fr.c_customer_id,
    SUM(fr.ws_net_profit) AS total_net_profit,
    AVG(fr.ss_sales_price + fr.cs_sales_price) AS average_sales_price,
    COUNT(DISTINCT fr.ws_order_number) AS unique_orders,
    CASE 
        WHEN SUM(fr.ws_net_profit) IS NULL OR SUM(fr.ws_net_profit) = 0 THEN 'No Profit'
        ELSE 'Profit Made'
    END AS profit_status
FROM FinalResults fr
GROUP BY fr.c_customer_id
HAVING AVG(fr.ss_sales_price + fr.cs_sales_price) > (SELECT AVG(ws_net_profit) FROM web_sales WHERE ws_net_profit IS NOT NULL)
ORDER BY total_net_profit DESC;
