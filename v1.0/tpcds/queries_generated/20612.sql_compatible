
WITH customer_summary AS (
    SELECT 
        c.c_customer_sk,
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_marital_status ORDER BY cd.cd_purchase_estimate DESC) AS rnk
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_purchase_estimate IS NOT NULL
),
item_sold AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_sold,
        AVG(ws.ws_sales_price) AS avg_price,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price > 0 
    GROUP BY 
        ws.ws_item_sk
),
returns AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returned
    FROM 
        store_returns 
    GROUP BY 
        sr_item_sk
)
SELECT 
    cs.c_customer_id,
    cs.cd_gender,
    cs.cd_marital_status,
    i.i_item_id,
    COALESCE(is.total_sold, 0) AS total_items_sold,
    COALESCE(r.total_returned, 0) AS total_items_returned,
    (COALESCE(is.total_sold, 0) - COALESCE(r.total_returned, 0)) AS net_items_sold,
    CASE 
        WHEN COALESCE(is.total_sold, 0) > 0 THEN 
            ROUND((COALESCE(is.total_sold, 0) - COALESCE(r.total_returned, 0)) * 100.0 / NULLIF(COALESCE(is.total_sold, 0), 0), 2)
        ELSE 
            NULL 
    END AS return_rate,
    CASE 
        WHEN cs.rnk = 1 THEN 'Top Buyer' 
        ELSE 'Regular Buyer' 
    END AS customer_segment
FROM 
    customer_summary cs
LEFT JOIN 
    item i ON i.i_item_sk IN (
        SELECT ws.ws_item_sk 
        FROM web_sales ws 
        WHERE ws.ws_bill_customer_sk = cs.c_customer_sk
    )
LEFT JOIN 
    item_sold is ON i.i_item_sk = is.ws_item_sk
LEFT JOIN 
    returns r ON i.i_item_sk = r.sr_item_sk
WHERE 
    cs.cd_gender IS NOT NULL
    AND (cs.cd_purchase_estimate > 1000 OR cs.cd_marital_status = 'M')
ORDER BY 
    cs.cd_purchase_estimate DESC, return_rate ASC;
