WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_sold_date_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_sold_date_sk ORDER BY SUM(ws_ext_sales_price) DESC) AS rank
    FROM 
        web_sales
    GROUP BY 
        ws_sold_date_sk
), 
recent_sales AS (
    SELECT 
        ds.d_date,
        COALESCE(ss.total_quantity, 0) AS total_quantity,
        COALESCE(ss.total_sales, 0.00) AS total_sales
    FROM 
        date_dim ds
    LEFT JOIN 
        sales_summary ss ON ds.d_date_sk = ss.ws_sold_date_sk
    WHERE 
        ds.d_date >= DATEADD(day, -30, cast('2002-10-01' as date))
)
SELECT 
    r.d_date,
    r.total_quantity,
    r.total_sales,
    CASE 
        WHEN r.total_quantity > 0 THEN r.total_sales / r.total_quantity
        ELSE NULL
    END AS average_sales_price,
    DENSE_RANK() OVER (ORDER BY r.total_sales DESC) AS sales_rank
FROM 
    recent_sales r
WHERE 
    r.total_sales > 0
ORDER BY 
    r.total_sales DESC
LIMIT 10
UNION ALL
SELECT 
    d.d_date,
    0 AS total_quantity,
    0.00 AS total_sales,
    NULL AS average_sales_price,
    0 AS sales_rank
FROM 
    date_dim d
WHERE 
    d.d_date < DATEADD(day, -30, cast('2002-10-01' as date))
AND 
    NOT EXISTS (
        SELECT 1 
        FROM web_sales ws 
        WHERE ws.ws_sold_date_sk = d.d_date_sk
    )
ORDER BY 
    d.d_date DESC 
LIMIT 5;