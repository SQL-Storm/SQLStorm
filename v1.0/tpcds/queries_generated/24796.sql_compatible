
WITH average_returns AS (
    SELECT
        COALESCE(SUM(sr_return_quantity), 0) AS total_return_quantity,
        COUNT(DISTINCT sr_ticket_number) AS total_return_tickets,
        sr_store_sk
    FROM store_returns
    GROUP BY sr_store_sk
),
high_value_customers AS (
    SELECT
        c.c_customer_id,
        SUM(ws_ext_sales_price) AS total_spent,
        CASE
            WHEN SUM(ws_ext_sales_price) > 1000 THEN 'VIP'
            WHEN SUM(ws_ext_sales_price) BETWEEN 500 AND 1000 THEN 'Regular'
            ELSE 'Occasional'
        END AS customer_type
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_id
),
time_analysis AS (
    SELECT
        d.d_year,
        d.d_month_seq,
        SUM(cs_ext_sales_price) AS total_catalog_sales,
        SUM(ws_ext_sales_price) AS total_web_sales,
        SUM(ss_ext_sales_price) AS total_store_sales,
        ROW_NUMBER() OVER (PARTITION BY d.d_year ORDER BY SUM(cs_ext_sales_price) DESC) AS rank_sales
    FROM date_dim d
    LEFT JOIN catalog_sales cs ON d.d_date_sk = cs.cs_sold_date_sk
    LEFT JOIN web_sales ws ON d.d_date_sk = ws.ws_sold_date_sk
    LEFT JOIN store_sales ss ON d.d_date_sk = ss.ss_sold_date_sk
    WHERE d.d_year BETWEEN 2021 AND 2023
    GROUP BY d.d_year, d.d_month_seq
)
SELECT
    t.d_year,
    MAX(t.total_catalog_sales) AS max_catalog_sales,
    AVG(t.total_web_sales) AS avg_web_sales,
    SUM(t.total_store_sales) AS total_store_sales,
    COUNT(DISTINCT c.c_customer_id) AS unique_customers,
    AVG(ar.total_return_quantity) AS avg_return_quantity,
    CASE 
        WHEN AVG(ar.total_return_quantity) IS NULL THEN 'No returns'
        WHEN AVG(ar.total_return_quantity) > 10 THEN 'High Return Rate'
        ELSE 'Normal Return Rate'
    END AS return_rate_category
FROM time_analysis t
LEFT JOIN high_value_customers c ON c.total_spent > 500
LEFT JOIN average_returns ar ON ar.total_return_quantity > 0
GROUP BY t.d_year
HAVING SUM(t.total_store_sales) > 10000
ORDER BY t.d_year DESC
UNION
SELECT 
    NULL AS d_year, 
    NULL AS max_catalog_sales, 
    NULL AS avg_web_sales, 
    NULL AS total_store_sales,
    COUNT(DISTINCT c.c_customer_id) AS unique_customers,
    NULL AS avg_return_quantity,
    'Total Unique Customers' AS return_rate_category
FROM customer c
WHERE c.c_preferred_cust_flag = 'Y';
