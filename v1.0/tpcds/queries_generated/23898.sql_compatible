
WITH CustomerSales AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_net_profit) AS total_profit,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        AVG(ws.ws_quantity) AS avg_quantity,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_id ORDER BY SUM(ws.ws_net_profit) DESC) AS rn
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_id
),
Returns AS (
    SELECT 
        wr.returned_date AS return_date,
        wr.wr_returning_customer_sk,
        SUM(wr.wr_return_amt) AS total_return_amt,
        COUNT(wr.wr_order_number) AS total_return_count
    FROM web_returns wr
    GROUP BY wr.returned_date, wr.wr_returning_customer_sk
),
HighestReturns AS (
    SELECT 
        r.return_date,
        r.wr_returning_customer_sk,
        r.total_return_amt,
        RANK() OVER (ORDER BY r.total_return_amt DESC) AS rank
    FROM Returns r
    WHERE r.total_return_amt IS NOT NULL
),
FinalReport AS (
    SELECT 
        cs.c_customer_id,
        cs.total_profit,
        cs.order_count,
        cs.avg_quantity,
        hr.total_return_amt,
        hr.total_return_count,
        CASE 
            WHEN (hr.total_return_amt IS NULL OR hr.total_return_count IS NULL) THEN 'No Returns'
            WHEN hr.rank <= 5 THEN 'Top 5 Returners'
            ELSE 'Other Returners'
        END AS return_category
    FROM CustomerSales cs
    LEFT JOIN HighestReturns hr ON cs.c_customer_id = hr.wr_returning_customer_sk
    WHERE cs.total_profit > 10000
)
SELECT 
    f.c_customer_id,
    f.total_profit,
    f.order_count,
    f.avg_quantity,
    COALESCE(f.total_return_amt, 0) AS total_return_amt,
    COALESCE(f.total_return_count, 0) AS total_return_count,
    f.return_category
FROM FinalReport f
ORDER BY f.total_profit DESC, f.order_count DESC
LIMIT 100 OFFSET (SELECT COUNT(*) FROM FinalReport) / 2;
