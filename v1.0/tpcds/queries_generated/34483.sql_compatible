
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        ss.store_sk, 
        ss.ticket_number, 
        ss.item_sk, 
        ss.quantity, 
        ss.sales_price, 
        1 AS level
    FROM 
        store_sales ss
    WHERE 
        ss.sold_date_sk = (SELECT MAX(ss2.sold_date_sk) FROM store_sales ss2)

    UNION ALL

    SELECT 
        sh.store_sk, 
        sh.ticket_number, 
        sh.item_sk, 
        sh.quantity + COALESCE(sr.return_quantity, 0) AS quantity, 
        (sh.sales_price - (sh.sales_price * COALESCE(SUM(sr.return_quantity), 0) / NULLIF(sh.quantity, 0))) AS sales_price, 
        level + 1
    FROM 
        SalesHierarchy sh
    LEFT JOIN 
        store_returns sr ON sh.ticket_number = sr.ticket_number AND sh.store_sk = sr.store_sk
    WHERE 
        level < 5
    GROUP BY 
        sh.store_sk, 
        sh.ticket_number, 
        sh.item_sk, 
        sh.quantity, 
        sh.sales_price, 
        level
), RankedSales AS (
    SELECT 
        s.store_sk, 
        SUM(s.quantity) AS total_quantity, 
        SUM(s.sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY s.store_sk ORDER BY SUM(s.sales_price) DESC) AS rank
    FROM 
        SalesHierarchy s
    GROUP BY 
        s.store_sk
), CustomerAnalytics AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_buy_potential,
        SUM(COALESCE(ws.ws_quantity, 0)) AS total_purchases,
        COUNT(DISTINCT ws.ws_order_number) AS unique_orders
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_id, cd.cd_gender, cd.cd_marital_status, cd.cd_buy_potential
), CombinedResults AS (
    SELECT 
        r.store_sk,
        r.total_quantity,
        r.total_sales,
        ca.c_customer_id,
        ca.total_purchases,
        ca.unique_orders
    FROM 
        RankedSales r
    JOIN 
        CustomerAnalytics ca ON r.store_sk IN (
            SELECT s.s_store_sk 
            FROM store s 
            WHERE s.s_state = 'CA' AND s.s_closed_date_sk IS NULL
        )
)
SELECT 
    cr.store_sk,
    cr.total_quantity,
    cr.total_sales,
    cr.c_customer_id,
    COALESCE(cr.total_purchases, 0) AS total_purchases,
    COALESCE(cr.unique_orders, 0) AS unique_orders
FROM 
    CombinedResults cr
WHERE 
    cr.total_sales > (SELECT AVG(total_sales) FROM RankedSales)
ORDER BY 
    cr.total_sales DESC;
