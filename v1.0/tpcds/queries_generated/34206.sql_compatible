
WITH RECURSIVE sales_rank AS (
    SELECT ws_item_sk, 
           SUM(ws_sales_price) AS total_sales,
           RANK() OVER (ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM web_sales
    GROUP BY ws_item_sk
),
customer_info AS (
    SELECT c.c_customer_sk,
           c.c_first_name,
           c.c_last_name,
           cd.cd_gender,
           cd.cd_marital_status,
           cd.cd_purchase_estimate,
           cd.cd_credit_rating,
           CASE 
               WHEN cd.cd_purchase_estimate IS NULL THEN 'Estimate Unknown'
               ELSE CAST(cd.cd_purchase_estimate AS CHAR)
           END AS purchase_estimate_str,
           ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS gender_rank
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
store_details AS (
    SELECT s.s_store_id, 
           SUM(ss.ss_net_paid_inc_tax) AS total_paid
    FROM store s
    LEFT JOIN store_sales ss ON s.s_store_sk = ss.ss_store_sk
    WHERE ss.ss_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY s.s_store_id
),
max_sales AS (
    SELECT ws_item_sk,
           COUNT(ws_order_number) AS order_count
    FROM web_sales
    GROUP BY ws_item_sk
    HAVING COUNT(ws_order_number) > 5
)
SELECT ci.c_first_name, 
       ci.c_last_name, 
       ci.cd_gender, 
       ci.purchase_estimate_str,
       COALESCE(sd.total_paid, 0) AS store_total_paid,
       sr.sales_rank,
       ms.order_count
FROM customer_info ci
JOIN store_details sd ON ci.c_customer_sk = sd.s_store_id
LEFT JOIN sales_rank sr ON sr.ws_item_sk = ci.c_customer_sk
JOIN max_sales ms ON ms.ws_item_sk = ci.c_customer_sk
WHERE ci.gender_rank <= 10
AND (ci.cd_marital_status = 'M' OR (ci.cd_purchase_estimate > 100 AND ci.cd_credit_rating IS NOT NULL));
