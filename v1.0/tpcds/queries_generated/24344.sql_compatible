
WITH RECURSIVE price_growth AS (
    SELECT 
        i_item_sk,
        i_item_id,
        i_item_desc,
        i_current_price,
        ROW_NUMBER() OVER (PARTITION BY i_item_id ORDER BY i_rec_start_date DESC) AS rn
    FROM item
    WHERE i_rec_start_date <= '2002-10-01' AND (i_rec_end_date IS NULL OR i_rec_end_date > '2002-10-01')
),
sales_summary AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_sales_price) AS total_sales,
        DATE_TRUNC('month', d.d_date) AS sales_month,
        COUNT(DISTINCT ws.ws_customer_sk) AS unique_customers
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY ws.ws_item_sk, sales_month
),
top_customers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        SUM(ws.ws_net_profit) AS total_profit
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
    HAVING SUM(ws.ws_net_profit) > (SELECT AVG(ws.ws_net_profit) FROM web_sales ws)
)
SELECT 
    ca.ca_city,
    COUNT(DISTINCT c.c_customer_id) AS number_of_customers,
    AVG(s.total_sales) AS avg_sales,
    MAX(p.i_current_price) AS highest_item_price,
    MIN(p.i_current_price) AS lowest_item_price,
    (SELECT COUNT(*) FROM store_returns sr WHERE sr.sr_return_quantity > 0 AND sr.sr_returned_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_month_seq = EXTRACT(MONTH FROM '2002-10-01'))) AS return_count,
    STRING_AGG(tc.c_first_name || ' ' || tc.c_last_name, ', ') AS top_customers_list
FROM customer_address ca
JOIN customer c ON ca.ca_address_sk = c.c_current_addr_sk
JOIN sales_summary s ON c.c_customer_sk = s.ws_item_sk
JOIN price_growth p ON s.ws_item_sk = p.i_item_sk AND p.rn = 1
LEFT JOIN top_customers tc ON c.c_customer_sk = tc.c_customer_sk
WHERE ca.ca_state IS NOT NULL 
AND (ca.ca_zip NOT LIKE '00000%')
GROUP BY ca.ca_city
HAVING COUNT(DISTINCT c.c_customer_id) > 10
ORDER BY number_of_customers DESC, avg_sales DESC;
