
WITH RECURSIVE customer_hierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk,
           cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate,
           ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS rnk
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_purchase_estimate IS NOT NULL
    UNION ALL
    SELECT ch.c_customer_sk, ch.c_first_name, ch.c_last_name, ch.c_current_cdemo_sk,
           cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate,
           ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS rnk
    FROM customer_hierarchy ch
    JOIN customer_demographics cd ON ch.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_purchase_estimate < (
        SELECT MAX(cd_inner.cd_purchase_estimate) - 100
        FROM customer_demographics cd_inner
        WHERE cd_inner.cd_gender = ch.cd_gender
    )
), customer_info AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk, 
           cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), top_customers AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk,
           COUNT(rs.ss_ticket_number) AS total_returns,
           SUM(rs.ss_ext_sales_price) AS total_sales,
           SUM(rw.ws_ext_sales_price) AS total_web_sales
    FROM customer_info c
    LEFT JOIN store_sales rs ON rs.ss_customer_sk = c.c_customer_sk
    LEFT JOIN web_sales rw ON rw.ws_bill_customer_sk = c.c_customer_sk
    WHERE c.c_current_cdemo_sk IS NOT NULL
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk
), aggregated_stats AS (
    SELECT cd.cd_marital_status AS marital_status,
           AVG(tc.total_sales) AS avg_total_sales,
           AVG(tc.total_web_sales) AS avg_total_web_sales,
           COUNT(DISTINCT tc.c_customer_sk) AS customer_count
    FROM top_customers tc
    JOIN customer_demographics cd ON tc.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY cd.cd_marital_status
)
SELECT as.marital_status, as.avg_total_sales, as.avg_total_web_sales,
       CASE
           WHEN as.customer_count = 0 THEN 'No Customers'
           ELSE CAST(as.customer_count AS CHAR)
       END AS customer_count_description
FROM aggregated_stats as
WHERE as.avg_total_sales > (SELECT AVG(avg_total_sales) FROM aggregated_stats)
ORDER BY as.marital_status DESC
LIMIT 10;
