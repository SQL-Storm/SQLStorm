
WITH RECURSIVE sales_hierarchy AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        hd.hd_income_band_sk,
        COUNT(DISTINCT ss.ss_order_number) AS total_sales
    FROM
        customer AS c
    JOIN household_demographics AS hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
    LEFT JOIN store_sales AS ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY
        c.c_customer_sk, c.c_first_name, c.c_last_name, hd.hd_income_band_sk
    HAVING
        COUNT(DISTINCT ss.ss_order_number) > 0
),
top_sales AS (
    SELECT
        c.c_customer_sk AS customer_id,
        s.total_sales,
        RANK() OVER (ORDER BY s.total_sales DESC) AS sales_rank,
        CASE
            WHEN hd.hd_income_band_sk IS NULL THEN 'Unknown'
            ELSE CAST(hd.hd_income_band_sk AS VARCHAR(10))
        END AS income_band
    FROM
        sales_hierarchy AS s
    JOIN customer AS c ON s.c_customer_sk = c.c_customer_sk
    JOIN household_demographics AS hd ON s.hd_income_band_sk = hd.hd_income_band_sk
),
sales_overview AS (
    SELECT
        income_band,
        AVG(total_sales) AS avg_sales,
        COUNT(customer_id) AS customer_count
    FROM
        top_sales
    WHERE
        sales_rank <= 10
    GROUP BY
        income_band
)
SELECT
    a.ca_state,
    COALESCE(b.avg_sales, 0) AS average_sales,
    COALESCE(b.customer_count, 0) AS number_of_customers
FROM
    (SELECT DISTINCT ca_state FROM customer_address) AS a
LEFT JOIN sales_overview AS b ON a.ca_state = b.income_band
ORDER BY
    a.ca_state;
