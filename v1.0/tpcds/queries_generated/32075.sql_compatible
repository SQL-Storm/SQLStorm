
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_item_sk,
        ws.ws_quantity,
        ws.ws_sales_price,
        ws.ws_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_order_number ORDER BY ws.ws_item_sk) AS rn
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk >= (SELECT MIN(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023)
    UNION ALL
    SELECT 
        cs.cs_order_number,
        cs.cs_item_sk,
        cs.cs_quantity,
        cs.cs_sales_price,
        cs.cs_net_profit,
        ROW_NUMBER() OVER (PARTITION BY cs.cs_order_number ORDER BY cs.cs_item_sk) AS rn
    FROM 
        catalog_sales cs
    WHERE 
        cs.cs_sold_date_sk >= (SELECT MIN(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023)
),
FilteredSales AS (
    SELECT 
        c.c_customer_id,
        COALESCE(SUM(s.ws_net_profit), 0) AS total_web_profit,
        COALESCE(SUM(s.cs_net_profit), 0) AS total_catalog_profit,
        COUNT(DISTINCT s.ws_order_number) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        SalesCTE s ON c.c_customer_sk = s.ws_item_sk OR c.c_customer_sk = s.cs_item_sk
    GROUP BY 
        c.c_customer_id
),
TopCustomers AS (
    SELECT 
        f.c_customer_id,
        f.total_web_profit,
        f.total_catalog_profit,
        f.total_orders,
        RANK() OVER (ORDER BY f.total_web_profit + f.total_catalog_profit DESC) AS rank
    FROM 
        FilteredSales f
)
SELECT 
    t.c_customer_id,
    t.total_web_profit,
    t.total_catalog_profit,
    t.total_orders,
    t.rank,
    CASE 
        WHEN t.total_orders > 10 THEN 'High Engagement'
        WHEN t.total_orders BETWEEN 5 AND 10 THEN 'Medium Engagement'
        ELSE 'Low Engagement'
    END AS engagement_level
FROM 
    TopCustomers t
WHERE 
    t.rank <= 100;
