
WITH RankedSales AS (
    SELECT 
        ws_sold_date_sk, 
        ws_item_sk, 
        ws_quantity, 
        ws_sales_price, 
        RANK() OVER (PARTITION BY ws_item_sk ORDER BY ws_quantity DESC) AS rank_qty,
        RANK() OVER (PARTITION BY ws_item_sk ORDER BY ws_sales_price DESC) AS rank_price
    FROM web_sales
),
AggregateSales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        AVG(ws_sales_price) AS avg_sales_price
    FROM RankedSales
    WHERE rank_qty = 1 OR rank_price = 1
    GROUP BY ws_item_sk
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        cd.cd_gender,
        COALESCE(SUM(ws.ws_quantity), 0) AS total_quantity,
        COALESCE(SUM(ws.ws_sales_price), 0) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, cd.cd_gender
)
SELECT 
    cs.c_customer_sk, 
    cs.cd_gender, 
    cs.total_quantity AS customer_total_quantity,
    cs.total_sales AS customer_total_sales,
    as.total_quantity AS item_total_quantity,
    as.total_sales AS item_total_sales,
    CASE 
        WHEN as.total_sales IS NULL THEN 'No Sales'
        WHEN cs.total_sales IS NULL THEN 'No Customer Sales'
        ELSE 'Both Sales Exist'
    END AS sales_status,
    (SELECT SUM(total_sales) FROM AggregateSales) AS grand_total_sales,
    (SELECT COUNT(*) FROM customer WHERE c_birth_year > 2000) AS young_customers,
    (SELECT COUNT(*) FROM customer WHERE c_birth_year IS NULL) AS unknown_birth_years
FROM CustomerStats cs
LEFT JOIN AggregateSales as ON cs.c_customer_sk = as.ws_item_sk
WHERE cs.total_sales > (SELECT AVG(total_sales) FROM CustomerStats) 
    OR as.total_quantity > (SELECT MAX(total_quantity) FROM AggregateSales)
ORDER BY cs.c_customer_sk, item_total_sales DESC
LIMIT 100 OFFSET 10;
