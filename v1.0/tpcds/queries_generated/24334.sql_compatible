
WITH RECURSIVE date_ranges AS (
    SELECT d_date_sk, d_date, d_year
    FROM date_dim
    WHERE d_year BETWEEN 2020 AND 2023
    UNION ALL
    SELECT d_date_sk + 1, d_date + INTERVAL '1 DAY', d_year
    FROM date_ranges
    WHERE d_date_sk < (SELECT MAX(d_date_sk) FROM date_dim)
), 
customer_data AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name || ' ' || c.c_last_name AS full_name,
        cd.cd_gender,
        cd.cd_marital_status,
        COALESCE(cd.cd_purchase_estimate, 0) AS purchase_estimate,
        cd.cd_credit_rating,
        COALESCE(cd.cd_dep_count, 0) AS dependent_count
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
sales_data AS (
    SELECT 
        ws.ws_sold_date_sk,
        ws.ws_item_sk,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(ws.ws_order_number) AS order_count
    FROM web_sales ws
    INNER JOIN item i ON ws.ws_item_sk = i.i_item_sk
    GROUP BY ws.ws_sold_date_sk, ws.ws_item_sk
), 
summary AS (
    SELECT 
        dr.d_date,
        SUM(sd.total_sales) AS daily_sales,
        COUNT(DISTINCT cd.c_customer_sk) AS customer_count,
        AVG(cd.purchase_estimate) AS average_purchase_estimate,
        MAX(cd.dependent_count) AS max_dependents
    FROM date_ranges dr
    LEFT JOIN sales_data sd ON dr.d_date_sk = sd.ws_sold_date_sk
    LEFT JOIN customer_data cd ON dr.d_date_sk = cd.c_customer_sk
    GROUP BY dr.d_date, dr.d_date_sk
),
ranked_sales AS (
    SELECT 
        s.*,
        RANK() OVER (ORDER BY s.daily_sales DESC) AS sales_rank
    FROM summary s
)
SELECT 
    r.d_date,
    r.daily_sales,
    r.customer_count,
    r.average_purchase_estimate,
    r.max_dependents,
    CASE 
        WHEN r.daily_sales IS NULL THEN 'No Sales'
        WHEN r.daily_sales = 0 THEN 'Zero Sales'
        ELSE 'Sales Exist'
    END AS sales_status,
    COALESCE((SELECT SUM(sr.sr_return_amount) 
              FROM store_returns sr 
              WHERE sr.sr_returned_date_sk = r.d_date_sk), 0) AS total_store_returns,
    EXISTS (SELECT 1 
            FROM catalog_returns cr 
            WHERE cr.cr_returned_date_sk = r.d_date_sk 
            AND cr.cr_return_quantity > 0) AS has_catalog_returns
FROM ranked_sales r
ORDER BY r.sales_rank
LIMIT 10;
