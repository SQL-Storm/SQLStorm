
WITH RECURSIVE item_hierarchy AS (
    SELECT 
        i_item_sk, 
        i_item_desc, 
        i_current_price, 
        i_class_id, 
        i_category_id,
        0 AS level
    FROM 
        item
    WHERE 
        i_item_sk IS NOT NULL
    UNION ALL
    SELECT 
        i.i_item_sk, 
        CONCAT(ih.i_item_desc, ' > ', i.i_item_desc), 
        i.i_current_price, 
        i.i_class_id, 
        i.i_category_id,
        ih.level + 1
    FROM 
        item_hierarchy ih
    INNER JOIN 
        item i ON i.i_item_sk = ih.i_item_sk + 1  
)
SELECT 
    c.c_customer_id,
    SUM(COALESCE(ws.ws_sales_price, ss.ss_sales_price, cs.cs_sales_price, 0)) AS total_spent,
    COUNT(DISTINCT ws.ws_order_number) AS total_orders,
    AVG(ws.ws_sales_price) AS avg_sales_price,
    MAX(ws.ws_sales_price) AS max_sales_price,
    STRING_AGG(DISTINCT CONCAT(i.i_item_desc, ' (', i.i_current_price, ')'), '; ') AS purchased_items,
    CASE 
        WHEN SUM(ws.ws_sales_price) > 1000 THEN 'Gold' 
        WHEN SUM(ws.ws_sales_price) BETWEEN 500 AND 1000 THEN 'Silver' 
        ELSE 'Bronze' 
    END AS customer_tier
FROM 
    customer c
LEFT JOIN 
    web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN 
    store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
LEFT JOIN 
    catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
LEFT JOIN 
    item_hierarchy i ON ws.ws_item_sk = i.i_item_sk OR ss.ss_item_sk = i.i_item_sk OR cs.cs_item_sk = i.i_item_sk
WHERE 
    YEAR(CAST('2002-10-01' AS DATE)) - c.c_birth_year >= 18
    AND (c.c_preferred_cust_flag = 'Y' OR c.c_email_address IS NOT NULL)
GROUP BY 
    c.c_customer_id
HAVING 
    SUM(COALESCE(ws.ws_sales_price, ss.ss_sales_price, cs.cs_sales_price, 0)) > 0
ORDER BY 
    total_spent DESC
FETCH FIRST 100 ROWS ONLY;
