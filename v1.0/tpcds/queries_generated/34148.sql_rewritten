WITH RECURSIVE sales_data AS (
    SELECT 
        ws_order_number,
        ws_item_sk,
        ws_sales_price,
        ws_quantity,
        COALESCE(ws_discount_amt, 0) AS discount_amt,
        ws_net_paid,
        1 AS level
    FROM 
        web_sales
    WHERE 
        ws_sales_price > 100

    UNION ALL

    SELECT 
        cs_order_number,
        cs_item_sk,
        cs_sales_price,
        cs_quantity,
        COALESCE(cs_discount_amt, 0),
        cs_net_paid,
        level + 1
    FROM 
        catalog_sales
    WHERE 
        cs_sales_price > 100
        AND level < 5
)

SELECT 
    sa.c_customer_sk,
    SUM(sd.ws_quantity) AS total_items_sold,
    SUM(sd.ws_net_paid) AS total_sales,
    AVG(sd.ws_sales_price) AS average_price,
    COUNT(DISTINCT cs_item_sk) AS distinct_items_sold,
    MAX(sd.discount_amt) AS max_discount,
    CASE 
        WHEN AVG(sd.ws_sales_price) >= 50 THEN 'High Value'
        WHEN AVG(sd.ws_sales_price) < 20 THEN 'Low Value'
        ELSE 'Medium Value'
    END AS sales_category,
    RANK() OVER (PARTITION BY sa.c_customer_sk ORDER BY SUM(sd.ws_net_paid) DESC) AS customer_rank
FROM 
    sales_data sd
JOIN 
    customer_address ca ON ca.ca_address_sk = sd.ws_item_sk
JOIN 
    customer sa ON sa.c_customer_sk = sd.ws_order_number
LEFT JOIN 
    customer_demographics cd ON cd.cd_demo_sk = sa.c_current_cdemo_sk
LEFT JOIN 
    store s ON s.s_store_sk = sd.ws_item_sk % 1000  
WHERE 
    sa.c_birth_year BETWEEN 1980 AND 2000
    AND (cd.cd_marital_status = 'M' OR cd.cd_gender = 'F')
GROUP BY 
    sa.c_customer_sk
HAVING 
    SUM(sd.ws_net_paid) > 1000
ORDER BY 
    total_sales DESC
LIMIT 100;