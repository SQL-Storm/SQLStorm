
WITH RECURSIVE date_series AS (
    SELECT d_date_sk, d_date, d_month_seq
    FROM date_dim
    WHERE d_date >= '2001-01-01' AND d_date <= '2001-12-31'
    UNION ALL
    SELECT d_date_sk + 1, d_date + INTERVAL '1 DAY', d_month_seq
    FROM date_series
    WHERE d_date < '2001-12-31'
), 
customer_summary AS (
    SELECT c.c_customer_sk,
           COUNT(DISTINCT wr.wr_order_number) AS total_web_returns,
           SUM(COALESCE(wr.wr_return_amt, 0)) AS total_return_value,
           SUM(COALESCE(wr.wr_return_quantity, 0)) AS total_return_quantity,
           cd.cd_gender,
           cd.cd_income_band_sk
    FROM customer c
    LEFT JOIN web_returns wr ON c.c_customer_sk = wr.wr_returning_customer_sk
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY c.c_customer_sk, cd.cd_gender, cd.cd_income_band_sk
),
return_analysis AS (
    SELECT cs.c_customer_sk,
           cs.total_web_returns,
           cs.total_return_value,
           cs.total_return_quantity,
           ib.ib_income_band_sk,
           CASE
               WHEN cs.total_return_value > 1000 THEN 'High Return'
               WHEN cs.total_return_value BETWEEN 500 AND 1000 THEN 'Medium Return'
               ELSE 'Low Return'
           END AS return_category
    FROM customer_summary cs
    JOIN household_demographics hd ON cs.c_customer_sk = hd.hd_demo_sk
    JOIN income_band ib ON hd.hd_income_band_sk = ib.ib_income_band_sk
),
sales_data AS (
    SELECT d.d_date AS sale_date,
           SUM(ws.ws_ext_sales_price) AS total_sales,
           SUM(ws.ws_net_profit) AS total_profit
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY d.d_date
),
final_analysis AS (
    SELECT ra.c_customer_sk,
           ra.total_web_returns,
           ra.total_return_value,
           ra.total_return_quantity,
           sd.sale_date,
           sd.total_sales,
           sd.total_profit
    FROM return_analysis ra
    LEFT JOIN sales_data sd ON sd.sale_date = DATE '2002-10-01'
)
SELECT fa.c_customer_sk,
       fa.total_web_returns,
       fa.total_return_value,
       fa.total_return_quantity,
       fa.total_sales,
       fa.total_profit,
       CASE
           WHEN fa.total_sales IS NULL THEN 'No Sales Data'
           ELSE 'Sales Data Available'
       END AS sales_data_status
FROM final_analysis fa
ORDER BY fa.total_return_value DESC
LIMIT 100;
