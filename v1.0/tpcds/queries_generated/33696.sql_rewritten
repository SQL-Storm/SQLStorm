WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        s_store_sk,
        s_store_name,
        1 AS level,
        ss_sales_price,
        ss_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY s_store_sk ORDER BY ss_sales_price DESC) AS sales_rank
    FROM 
        store_sales ss
    JOIN 
        store s ON ss.s_store_sk = s.s_store_sk
    WHERE 
        ss_sold_date_sk BETWEEN 20230101 AND 20231231
    UNION ALL
    SELECT 
        s.s_store_sk,
        s.s_store_name,
        h.level + 1,
        h.ss_sales_price * 1.05,   
        h.ss_ext_sales_price * 1.05  
    FROM 
        sales_hierarchy h
    JOIN 
        store s ON h.s_store_sk = s.s_store_sk
    WHERE 
        h.level < 10
),
sales_summary AS (
    SELECT 
        s.s_store_name,
        SUM(ss.ss_sales_price) AS total_sales,
        COUNT(DISTINCT ss.ss_ticket_number) AS total_transactions,
        AVG(ss.ss_sales_price) AS avg_sales_price
    FROM 
        store_sales ss
    JOIN 
        store s ON ss.s_store_sk = s.s_store_sk
    GROUP BY 
        s.s_store_name
)
SELECT 
    sh.s_store_name,
    sh.level,
    sh.ss_sales_price,
    ss.total_sales,
    ss.total_transactions,
    ss.avg_sales_price,
    CASE 
        WHEN ss.total_sales IS NULL THEN 'No Sales'
        ELSE 'Sales Available'
    END AS sales_status
FROM 
    sales_hierarchy sh
LEFT JOIN 
    sales_summary ss ON sh.s_store_name = ss.s_store_name
WHERE 
    sh.sales_rank <= 5
ORDER BY 
    sh.level, sh.ss_sales_price DESC;