
WITH RECURSIVE SalesCTE AS (
    SELECT
        ws_order_number,
        ws_sales_price,
        ws_net_profit,
        ws_sold_date_sk,
        1 AS level
    FROM
        web_sales
    WHERE
        ws_sold_date_sk = (SELECT MAX(ws_sold_date_sk) FROM web_sales)
    
    UNION ALL
    
    SELECT
        ws.order_number,
        ws.ws_sales_price,
        ws.ws_net_profit,
        ws.ws_sold_date_sk,
        cte.level + 1
    FROM
        web_sales ws
    INNER JOIN SalesCTE cte ON ws.ws_order_number = cte.ws_order_number
    WHERE
        cte.level < 5
),

CustomersWithReturns AS (
    SELECT 
        c.c_customer_id,
        COUNT(DISTINCT sr.sr_ticket_number) AS return_count
    FROM 
        customer c
    LEFT JOIN 
        store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    GROUP BY 
        c.c_customer_id
),

SalesEvents AS (
    SELECT 
        ws_sold_date_sk,
        SUM(ws_net_profit) AS total_net_profit,
        AVG(ws_sales_price) AS avg_sales_price,
        RANK() OVER (PARTITION BY ws_sold_date_sk ORDER BY SUM(ws_net_profit) DESC) AS profit_rank
    FROM 
        web_sales
    GROUP BY 
        ws_sold_date_sk
),

FinalResults AS (
    SELECT 
        cwr.c_customer_id,
        cwr.return_count,
        se.total_net_profit,
        se.avg_sales_price
    FROM 
        CustomersWithReturns cwr
    INNER JOIN
        SalesEvents se ON cwr.return_count > 5
    WHERE 
        se.profit_rank <= 10
)

SELECT 
    fr.c_customer_id,
    fr.return_count,
    COALESCE(fr.total_net_profit, 0) AS total_net_profit,
    COALESCE(fr.avg_sales_price, 0.00) AS avg_sales_price,
    CASE 
        WHEN fr.return_count IS NULL THEN 'No Returns'
        ELSE 'Returns Present'
    END AS return_status
FROM 
    FinalResults fr
ORDER BY 
    fr.return_count DESC, fr.total_net_profit DESC;
