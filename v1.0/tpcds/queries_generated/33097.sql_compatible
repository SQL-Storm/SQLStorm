
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        s.ss_sold_date_sk,
        s.ss_sales_price,
        s.ss_quantity,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY s.ss_sold_date_sk DESC) AS sales_rank
    FROM 
        customer c
    JOIN 
        store_sales s ON c.c_customer_sk = s.ss_customer_sk
    WHERE 
        s.ss_sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2022)
),
inventory_sales AS (
    SELECT 
        i.i_item_sk,
        SUM(COALESCE(ws.ws_sales_price, 0) + COALESCE(cs.cs_sales_price, 0)) AS total_sales,
        COUNT(DISTINCT COALESCE(ws.ws_order_number, 0) + COALESCE(cs.cs_order_number, 0)) AS unique_sales_count
    FROM 
        item i
    LEFT JOIN 
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    LEFT JOIN 
        catalog_sales cs ON i.i_item_sk = cs.cs_item_sk
    GROUP BY 
        i.i_item_sk
),
top_customers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(s.ss_sales_price * s.ss_quantity) AS total_spent
    FROM 
        customer c
    JOIN 
        store_sales s ON c.c_customer_sk = s.ss_customer_sk
    WHERE 
        s.ss_sold_date_sk > (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2021)
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
    ORDER BY 
        total_spent DESC
    LIMIT 10
)
SELECT 
    th.c_first_name,
    th.c_last_name,
    COALESCE(sh.sales_rank, 0) AS sales_rank,
    COALESCE(is.total_sales, 0) AS total_sales_value,
    COALESCE(th.total_spent, 0) AS total_spent
FROM 
    top_customers th
LEFT JOIN 
    sales_hierarchy sh ON th.c_customer_sk = sh.c_customer_sk
LEFT JOIN 
    inventory_sales is ON sh.ss_sales_price = is.total_sales
WHERE 
    th.total_spent > 1000
ORDER BY 
    total_spent DESC;
