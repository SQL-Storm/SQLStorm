WITH RECURSIVE sales_hierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           coalesce(ss_total.total_sales, 0) AS total_sales,
           1 AS level
    FROM customer c
    LEFT JOIN (
        SELECT ss_customer_sk, SUM(ss_net_profit) AS total_sales
        FROM store_sales
        GROUP BY ss_customer_sk
    ) ss_total ON c.c_customer_sk = ss_total.ss_customer_sk

    UNION ALL

    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           COALESCE(ss.total_sales, 0) + h.total_sales AS total_sales,
           h.level + 1
    FROM customer c
    JOIN sales_hierarchy h ON c.c_customer_sk = h.c_customer_sk
    LEFT JOIN (
        SELECT ss_customer_sk, SUM(ss_net_profit) AS total_sales
        FROM store_sales
        GROUP BY ss_customer_sk
    ) ss ON c.c_customer_sk = ss.ss_customer_sk
    WHERE h.level < 3  
),

customer_info AS (
    SELECT c.c_customer_id, c.c_first_name, c.c_last_name,
           COALESCE(SUM(ss_total.total_sales), 0) AS total_sales
    FROM customer c
    LEFT JOIN (
        SELECT ss_customer_sk, SUM(ss_net_profit) AS total_sales
        FROM store_sales
        GROUP BY ss_customer_sk
    ) ss_total ON c.c_customer_sk = ss_total.ss_customer_sk
    GROUP BY c.c_customer_id, c.c_first_name, c.c_last_name
),

avg_sales AS (
    SELECT AVG(total_sales) AS avg_total_sales
    FROM customer_info
),

promotions AS (
    SELECT p.p_promo_name, SUM(ws.ws_net_profit) AS total_profit
    FROM promotion p
    JOIN web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    GROUP BY p.p_promo_name
    HAVING total_profit > (SELECT avg_total_sales FROM avg_sales)  
)

SELECT DISTINCT ci.c_customer_id, ci.c_first_name, ci.c_last_name,
                ph.p_promo_name, ph.total_profit,
                RANK() OVER (PARTITION BY ci.c_customer_id ORDER BY ph.total_profit DESC) AS promo_rank,
                CASE 
                    WHEN ci.total_sales IS NULL THEN 'No Sales'
                    WHEN ci.total_sales > 1000 THEN 'High Roller'
                    ELSE 'Regular Customer'
                END AS customer_type
FROM customer_info ci
LEFT JOIN promotions ph ON ci.c_customer_id = ph.p_promo_name
WHERE ci.total_sales IS NOT NULL
ORDER BY ci.total_sales DESC, promo_rank
LIMIT 100;