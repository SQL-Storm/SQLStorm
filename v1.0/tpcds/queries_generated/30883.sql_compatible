
WITH RECURSIVE Sales_CTE AS (
    SELECT 
        ss_store_sk,
        SUM(ss_net_profit) AS total_net_profit,
        RANK() OVER (PARTITION BY ss_store_sk ORDER BY SUM(ss_net_profit) DESC) AS store_rank
    FROM 
        store_sales
    GROUP BY 
        ss_store_sk
), 
Customer_Stats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT sr_ticket_number) AS total_returns,
        SUM(COALESCE(sr_return_amt, 0) + COALESCE(sr_return_tax, 0)) AS total_return_amt,
        AVG(COALESCE(sr_return_quantity, 0)) AS avg_return_quantity
    FROM 
        customer c
    LEFT JOIN 
        store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    GROUP BY 
        c.c_customer_sk
),
Returning_Customers AS (
    SELECT 
        cs.c_customer_sk,
        cs.total_returns,
        CASE 
            WHEN cs.total_returns > 0 THEN 'Returning Customer'
            ELSE 'New Customer'
        END AS customer_type
    FROM 
        Customer_Stats cs
),
Top_Stores AS (
    SELECT 
        s.s_store_id,
        ss.total_net_profit
    FROM 
        store s
    JOIN 
        Sales_CTE ss ON s.s_store_sk = ss.ss_store_sk
    WHERE 
        ss.store_rank <= 10
)
SELECT 
    r.customer_type,
    COUNT(DISTINCT r.c_customer_sk) AS num_customers,
    SUM(COALESCE(r.total_returns, 0)) AS total_returns,
    SUM(COALESCE(T.total_net_profit, 0)) AS total_return_amt,
    T.s_store_id,
    T.total_net_profit
FROM 
    Returning_Customers r
FULL OUTER JOIN 
    Top_Stores T ON r.c_customer_sk = T.s_store_id
GROUP BY 
    r.customer_type, T.s_store_id, T.total_net_profit
ORDER BY 
    T.total_net_profit DESC, num_customers DESC;
