
WITH RECURSIVE CustomerReturns AS (
    SELECT 
        cr_returned_date_sk,
        cr_return_time_sk,
        cr_item_sk,
        cr_return_quantity,
        cr_return_amount,
        cr_order_number,
        1 AS recursion_level
    FROM 
        catalog_returns
    WHERE 
        cr_returning_customer_sk IS NOT NULL
    
    UNION ALL
    
    SELECT 
        cr.returned_date_sk,
        cr.returned_time_sk,
        cr.item_sk,
        cr.return_quantity,
        cr.return_amount,
        cr.order_number,
        cr_rec.recursion_level + 1
    FROM 
        catalog_returns cr
    JOIN 
        CustomerReturns cr_rec ON cr.returning_customer_sk = cr_rec.cr_returning_customer_sk
    WHERE 
        cr_rec.recursion_level < 10
)
SELECT 
    ca.ca_city,
    SUM(cr.cr_return_quantity) AS total_returned,
    COUNT(DISTINCT cr.cr_order_number) AS distinct_orders,
    AVG(cr.cr_return_amount) AS avg_return_amount,
    COUNT(CASE WHEN cr.cr_return_quantity > 5 THEN 1 END) AS large_returns
FROM 
    customer_address ca
LEFT JOIN 
    customer c ON ca.ca_address_sk = c.c_current_addr_sk
LEFT JOIN 
    CustomerReturns cr ON c.c_customer_sk = cr.cr_returning_customer_sk
WHERE 
    ca.ca_state = 'CA' 
    AND cr.cr_returned_date_sk BETWEEN (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2023) 
                               AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
GROUP BY 
    ca.ca_city
HAVING 
    SUM(cr.cr_return_quantity) > 10
ORDER BY 
    total_returned DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
