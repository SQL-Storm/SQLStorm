
WITH RECURSIVE CustomerReturns AS (
    SELECT cr_returning_customer_sk, SUM(cr_return_quantity) AS total_returned
    FROM catalog_returns
    GROUP BY cr_returning_customer_sk
    UNION ALL
    SELECT wr_returning_customer_sk, SUM(wr_return_quantity) AS total_returned
    FROM web_returns
    GROUP BY wr_returning_customer_sk
),
InventoryStats AS (
    SELECT inv.warehouse_sk, SUM(inv_quantity_on_hand) AS total_quantity,
           ROW_NUMBER() OVER (PARTITION BY inv.warehouse_sk ORDER BY SUM(inv_quantity_on_hand) DESC) AS inventory_rank
    FROM inventory inv
    GROUP BY inv.warehouse_sk
),
SalesData AS (
    SELECT ws.web_site_sk, SUM(ws_ext_sales_price) AS total_sales,
           COUNT(DISTINCT ws_order_number) AS order_count,
           ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY SUM(ws_ext_sales_price) DESC) AS sales_rank
    FROM web_sales ws
    GROUP BY ws.web_site_sk
)
SELECT ca.ca_address_id, ca.ca_city, ca.ca_state,
       COALESCE(CR.total_returned, 0) AS total_returns,
       COALESCE(S.total_sales, 'No Sales') AS total_sales,
       I.total_quantity AS total_inventory
FROM customer_address ca
LEFT JOIN (
    SELECT cr_returning_customer_sk, SUM(total_returned) AS total_returned
    FROM CustomerReturns
    GROUP BY cr_returning_customer_sk
) CR ON CR.cr_returning_customer_sk = ca.ca_address_id
LEFT JOIN (
    SELECT web_site_sk, total_sales
    FROM SalesData
    WHERE sales_rank = 1
) S ON S.web_site_sk = ca.ca_address_id
LEFT JOIN (
    SELECT warehouse_sk, total_quantity
    FROM InventoryStats
    WHERE inventory_rank <= 5
) I ON I.warehouse_sk = ca.ca_address_id
WHERE ca.ca_city IS NOT NULL
  AND (COALESCE(CR.total_returned, 0) > 10 OR COALESCE(S.total_sales, 0) > 1000)
ORDER BY total_inventory DESC, total_sales DESC;
