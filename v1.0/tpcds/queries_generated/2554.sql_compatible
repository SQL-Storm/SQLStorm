
WITH RecentSales AS (
    SELECT
        ws_order_number,
        ws_item_sk,
        ws_quantity,
        ws_net_paid,
        ROW_NUMBER() OVER (PARTITION BY ws_order_number ORDER BY ws_net_paid DESC) AS rn
    FROM web_sales
    WHERE ws_sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_date = DATE '2002-10-01' - INTERVAL '30 days')
),
TopItems AS (
    SELECT
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_paid) AS total_net_paid
    FROM web_sales
    GROUP BY ws_item_sk
    ORDER BY total_net_paid DESC
    LIMIT 10
),
ItemDetails AS (
    SELECT
        i.i_item_id,
        i.i_product_name,
        ci.c_email_address,
        ci.c_first_name,
        ci.c_last_name,
        ca.ca_city,
        ca.ca_state,
        SUM(ws.ws_quantity) AS total_quantity_sold,
        SUM(ws.ws_net_paid) AS total_net_sales
    FROM item i
    INNER JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    INNER JOIN customer ci ON ws.ws_bill_customer_sk = ci.c_customer_sk
    LEFT JOIN customer_address ca ON ci.c_current_addr_sk = ca.ca_address_sk
    WHERE i.i_rec_start_date <= DATE '2002-10-01' AND (i.i_rec_end_date IS NULL OR i.i_rec_end_date > DATE '2002-10-01')
    GROUP BY i.i_item_id, i.i_product_name, ci.c_email_address, ci.c_first_name, ci.c_last_name, ca.ca_city, ca.ca_state
),
Statistic AS (
    SELECT
        ws_item_sk,
        AVG(ws_net_paid) OVER (PARTITION BY ws_item_sk) AS avg_price,
        MAX(ws_net_paid) OVER (PARTITION BY ws_item_sk) AS max_price,
        MIN(ws_net_paid) OVER (PARTITION BY ws_item_sk) AS min_price
    FROM web_sales
)
SELECT 
    it.i_item_id,
    it.i_product_name,
    it.total_quantity_sold,
    it.total_net_sales,
    sd.avg_price,
    sd.max_price,
    sd.min_price,
    COUNT(DISTINCT rs.ws_order_number) AS unique_orders,
    STRING_AGG(DISTINCT ci.c_email_address) AS customer_emails
FROM ItemDetails it
JOIN Statistic sd ON it.i_item_id = sd.ws_item_sk
LEFT JOIN RecentSales rs ON it.i_item_id = rs.ws_item_sk AND rs.rn = 1
GROUP BY it.i_item_id, it.i_product_name, it.total_quantity_sold, it.total_net_sales, sd.avg_price, sd.max_price, sd.min_price
HAVING SUM(it.total_quantity_sold) > 100 
ORDER BY it.total_net_sales DESC;
