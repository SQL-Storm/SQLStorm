WITH RECURSIVE ProductHierarchy AS (
    SELECT i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category, 1 AS level
    FROM item
    WHERE i_current_price IS NOT NULL
    UNION ALL
    SELECT i.item_sk, i.i_item_id, i.i_item_desc, i.i_current_price, i.i_class, i.i_category, ph.level + 1
    FROM item i
    JOIN ProductHierarchy ph ON i.i_item_sk = ph.i_item_sk + 1 
),
SalesData AS (
    SELECT 
        ws.ws_sold_date_sk,
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_net_profit) AS total_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_net_profit) DESC) AS rn
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk IN (
        SELECT d_date_sk FROM date_dim WHERE d_year = 2001 AND d_dow = 1
    )
    GROUP BY ws.ws_sold_date_sk, ws.ws_item_sk
),
CustomerReturns AS (
    SELECT 
        cr_returning_customer_sk, 
        COUNT(cr_return_quantity) AS returns_count, 
        SUM(cr_return_amt) AS total_return_amount
    FROM catalog_returns
    GROUP BY cr_returning_customer_sk
)
SELECT 
    ca.ca_state,
    COUNT(DISTINCT c.c_customer_sk) AS number_of_customers,
    SUM(sd.total_quantity) AS total_sales_quantity,
    SUM(sd.total_net_profit) AS total_net_profit,
    COALESCE(SUM(cr.total_return_amount), 0) AS total_returned_amount,
    PH.level AS product_level
FROM customer c
JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN SalesData sd ON c.c_customer_sk = sd.ws_item_sk 
LEFT JOIN CustomerReturns cr ON c.c_customer_sk = cr.cr_returning_customer_sk
JOIN ProductHierarchy PH ON PH.i_item_sk = sd.ws_item_sk
GROUP BY ca.ca_state, PH.level
HAVING COUNT(DISTINCT c.c_customer_sk) > 10 AND SUM(sd.total_net_profit) > 0
ORDER BY total_net_profit DESC, total_sales_quantity DESC;