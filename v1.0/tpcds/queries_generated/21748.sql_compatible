
WITH RECURSIVE customer_hierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_preferred_cust_flag,
           cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status, cd.cd_credit_rating
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE c.c_preferred_cust_flag = 'Y'
    
    UNION ALL
    
    SELECT ch.c_customer_sk, ch.c_first_name, ch.c_last_name, ch.c_preferred_cust_flag,
           chd.cd_demo_sk, chd.cd_gender, chd.cd_marital_status, chd.cd_credit_rating
    FROM customer_hierarchy ch
    JOIN customer c ON c.c_current_cdemo_sk = ch.cd_demo_sk 
    JOIN customer_demographics chd ON c.c_current_cdemo_sk = chd.cd_demo_sk
)
SELECT ca.ca_city, 
       COUNT(*) AS customer_count, 
       AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate, 
       MAX(cd.cd_dep_count) AS max_dependencies,
       SUM(CASE WHEN cd.cd_gender = 'F' THEN 1 ELSE 0 END) AS female_count,
       SUM(CASE WHEN cd.cd_gender = 'M' THEN 1 ELSE 0 END) AS male_count
FROM customer_hierarchy ch
JOIN customer_address ca ON ch.c_customer_sk = ca.ca_address_sk
JOIN customer_demographics cd ON ch.cd_demo_sk = cd.cd_demo_sk
LEFT JOIN (
    SELECT sr_customer_sk, SUM(sr_return_qty) AS total_returns 
    FROM store_returns 
    WHERE sr_return_date_sk IS NOT NULL 
    GROUP BY sr_customer_sk
) sr ON sr.sr_customer_sk = ch.c_customer_sk
WHERE cd.cd_purchase_estimate > 1000
AND (cd.cd_gender IS NOT NULL OR cd.cd_marital_status IS NOT NULL)
GROUP BY ca.ca_city, cd.cd_purchase_estimate, cd.cd_dep_count
HAVING AVG(cd.cd_dep_count) >= 2
ORDER BY customer_count DESC, female_count DESC
FETCH FIRST 10 ROWS ONLY;
