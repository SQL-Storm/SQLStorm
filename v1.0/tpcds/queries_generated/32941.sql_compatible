
WITH RECURSIVE CategoryHierarchy AS (
    SELECT 
        i_item_sk, 
        i_item_desc, 
        i_category, 
        1 AS level
    FROM item
    WHERE i_category IS NOT NULL
    UNION ALL
    SELECT 
        i.i_item_sk, 
        i.i_item_desc, 
        i.i_category, 
        ch.level + 1
    FROM item i
    JOIN CategoryHierarchy ch ON i.i_category = ch.i_item_desc
),
SalesData AS (
    SELECT 
        ws_sold_date_sk, 
        ws_item_sk, 
        SUM(ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws_order_number) AS order_count,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN 2459935 AND 2459938 
    GROUP BY ws_sold_date_sk, ws_item_sk
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_ext_sales_price) AS total_spent,
        MAX(ws_sold_date_sk) AS last_purchase_date,
        MIN(ws_sold_date_sk) AS first_purchase_date
    FROM web_sales ws
    JOIN customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    GROUP BY c.c_customer_sk
)
SELECT 
    s.store_sk,
    s.s_store_id,
    s.s_store_name,
    COALESCE(cs.total_orders, 0) AS total_orders,
    COALESCE(cs.total_spent, 0) AS total_spent,
    ch.i_item_desc,
    ch.level AS category_level,
    SUM(sd.total_sales) AS category_sales
FROM store s
LEFT JOIN CustomerStats cs ON s.s_store_sk = cs.c_customer_sk
LEFT JOIN SalesData sd ON s.s_store_sk = sd.ws_sold_date_sk  -- Fixed join condition
JOIN CategoryHierarchy ch ON ch.i_item_sk = sd.ws_item_sk
GROUP BY 
    s.store_sk, 
    s.s_store_id, 
    s.s_store_name, 
    ch.i_item_desc, 
    ch.level
HAVING SUM(sd.total_sales) > 1000 
ORDER BY category_sales DESC
LIMIT 10;
