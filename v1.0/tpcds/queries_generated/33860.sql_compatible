
WITH RECURSIVE Sales_CTE AS (
    SELECT 
        ws_bill_customer_sk,
        SUM(ws_net_profit) AS total_profit,
        RANK() OVER (PARTITION BY ws_bill_customer_sk ORDER BY SUM(ws_net_profit) DESC) AS rank_profit
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN (SELECT d_date_sk FROM date_dim WHERE d_date = '2022-01-01')
        AND (SELECT d_date_sk FROM date_dim WHERE d_date = '2023-01-01')
    GROUP BY ws_bill_customer_sk
),
Top_Customers AS (
    SELECT 
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        sc.total_profit,
        ROW_NUMBER() OVER (ORDER BY sc.total_profit DESC) AS customer_rank
    FROM customer c
    JOIN Sales_CTE sc ON c.c_customer_sk = sc.ws_bill_customer_sk
    WHERE sc.rank_profit <= 5
),
Inventory_Stats AS (
    SELECT 
        i.i_item_id,
        SUM(inv.inv_quantity_on_hand) AS total_quantity,
        AVG(i.i_current_price) AS avg_price
    FROM inventory inv
    JOIN item i ON inv.inv_item_sk = i.i_item_sk
    GROUP BY i.i_item_id
),
Sales_Stats AS (
    SELECT 
        i.i_item_id,
        SUM(ws.ws_net_profit) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM web_sales ws
    JOIN item i ON ws.ws_item_sk = i.i_item_sk
    GROUP BY i.i_item_id
)
SELECT 
    tc.c_customer_id,
    tc.c_first_name,
    tc.c_last_name,
    is.total_quantity,
    is.avg_price,
    ss.total_sales,
    CASE 
        WHEN ss.total_sales IS NULL THEN 'No Sales'
        ELSE 'Sales Exist'
    END AS sales_status
FROM Top_Customers tc
LEFT JOIN Inventory_Stats is ON is.i_item_id = 'ITEM_ID'
LEFT JOIN Sales_Stats ss ON ss.i_item_id = 'ITEM_ID'
WHERE ss.total_sales > 5000 OR ss.total_sales IS NULL
ORDER BY tc.customer_rank;
