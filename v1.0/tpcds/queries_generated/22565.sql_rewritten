WITH RankedCustomers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        ROW_NUMBER() OVER(PARTITION BY cd.cd_gender ORDER BY c.c_birth_year DESC) AS rn
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_purchase_estimate IS NOT NULL
),
RecentReturns AS (
    SELECT 
        sr_refunded_customer_sk,
        SUM(sr_return_quantity) AS total_returned_quantity,
        COUNT(DISTINCT sr_ticket_number) AS return_count
    FROM store_returns
    WHERE sr_returned_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d_dow = 5)  
    GROUP BY sr_refunded_customer_sk
),
HighValueCustomers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        COALESCE(r.total_returned_quantity, 0) AS total_returned,
        COUNT(DISTINCT ws_order_number) AS order_count,
        SUM(ws_sales_price) AS total_spent
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN RecentReturns r ON c.c_customer_sk = r.sr_refunded_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, r.total_returned_quantity
    HAVING SUM(ws_sales_price) > (SELECT AVG(ws_sales_price) FROM web_sales)
),
FilteredStores AS (
    SELECT 
        s.s_store_sk,
        COUNT(DISTINCT ss.ticket_number) AS total_sales,
        SUM(ss.ss_ext_sales_price) AS total_revenue,
        MAX(ss.ss_sold_date_sk) AS last_sale_date
    FROM store s
    JOIN store_sales ss ON s.s_store_sk = ss.ss_store_sk
    WHERE s.s_number_employees > 0
    GROUP BY s.s_store_sk
    HAVING SUM(ss.ss_ext_sales_price) > 10000  
)
SELECT 
    rc.c_first_name,
    rc.c_last_name,
    rc.cd_gender,
    rc.cd_marital_status,
    hvc.total_spent,
    hvc.order_count,
    fs.total_sales,
    fs.total_revenue,
    CASE 
        WHEN hvc.total_spent IS NULL THEN 'No purchases'
        WHEN hvc.total_spent > 5000 THEN 'Premium customer' 
        ELSE 'Standard customer'
    END AS customer_segment,
    DENSE_RANK() OVER(ORDER BY hvc.total_spent DESC) AS spending_rank
FROM RankedCustomers rc
JOIN HighValueCustomers hvc ON rc.c_customer_sk = hvc.c_customer_sk
LEFT JOIN FilteredStores fs ON hvc.c_customer_sk = fs.s_store_sk  
WHERE fs.total_sales IS NOT NULL OR rc.rn <= 5  
ORDER BY spending_rank, rc.c_last_name;