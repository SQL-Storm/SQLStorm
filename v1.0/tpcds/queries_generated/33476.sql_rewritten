WITH RECURSIVE CustomerHierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        c.c_current_cdemo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        0 AS level
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE c.c_customer_sk IS NOT NULL

    UNION ALL

    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        c.c_current_cdemo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        ch.level + 1
    FROM CustomerHierarchy ch
    JOIN customer c ON ch.c_current_cdemo_sk = c.c_current_cdemo_sk
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE ch.level < 5
),
SalesSummary AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_net_paid) AS total_sales,
        SUM(ws.ws_net_paid_inc_tax) AS total_sales_tax
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk = (SELECT d_date_sk FROM date_dim WHERE d_date = cast('2002-10-01' as date))
    GROUP BY ws.ws_item_sk
),
TopItems AS (
    SELECT 
        item.i_item_id,
        item.i_item_desc,
        COALESCE(ss.total_quantity, 0) AS total_quantity,
        COALESCE(ss.total_sales, 0) AS total_sales
    FROM item
    LEFT JOIN SalesSummary ss ON item.i_item_sk = ss.ws_item_sk
),
CustomerEngagement AS (
    SELECT 
        ch.c_customer_sk,
        ch.c_first_name,
        ch.c_last_name,
        ch.cd_gender,
        ch.cd_marital_status,
        CASE 
            WHEN gea.total_sales > 1000 THEN 'High Engagement'
            WHEN gea.total_sales BETWEEN 500 AND 1000 THEN 'Medium Engagement'
            ELSE 'Low Engagement'
        END AS engagement_level
    FROM CustomerHierarchy ch
    LEFT JOIN (
        SELECT 
            sr_customer_sk,
            SUM(sr_return_amt) AS total_sales
        FROM store_returns
        GROUP BY sr_customer_sk
    ) gea ON ch.c_customer_sk = gea.sr_customer_sk
)
SELECT 
    ce.c_first_name,
    ce.c_last_name,
    COUNT(DISTINCT ti.i_item_id) AS items_purchased,
    SUM(ti.total_sales) AS total_spent,
    ce.engagement_level
FROM CustomerEngagement ce
JOIN TopItems ti ON ce.c_customer_sk IN (
    SELECT sr_customer_sk FROM store_returns
    UNION
    SELECT ws_ship_customer_sk FROM web_sales
)
GROUP BY ce.c_first_name, ce.c_last_name, ce.engagement_level
HAVING total_spent > 100
ORDER BY total_spent DESC;