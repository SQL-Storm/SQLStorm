
WITH aggregated_sales AS (
    SELECT 
        cs_item_sk,
        SUM(cs_quantity) AS total_quantity,
        SUM(cs_ext_sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY cs_item_sk ORDER BY SUM(cs_ext_sales_price) DESC) AS sales_rank
    FROM 
        catalog_sales
    GROUP BY 
        cs_item_sk
),
customer_metrics AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        d.d_year,
        CASE 
            WHEN cd.cd_credit_rating IS NULL THEN 'Unknown'
            ELSE cd.cd_credit_rating 
        END AS credit_rating,
        COALESCE(cd.cd_dep_count, 0) + COALESCE(cd.cd_dep_employed_count, 0) AS total_dependents
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN 
        date_dim d ON c.c_first_sales_date_sk = d.d_date_sk
),
returned_items AS (
    SELECT 
        sr_item_sk,
        COUNT(sr_ticket_number) AS return_count,
        SUM(sr_return_amt_inc_tax) AS total_return_value
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
),
featured_items AS (
    SELECT 
        ais.cs_item_sk,
        ais.item_desc,
        ais.total_quantity,
        ais.total_sales,
        COUNT(DISTINCT cm.c_customer_sk) AS customer_count,
        COALESCE(ri.return_count, 0) AS return_count,
        COALESCE(ri.total_return_value, 0) AS total_return_value
    FROM 
        aggregated_sales ais
    LEFT JOIN 
        returned_items ri ON ais.cs_item_sk = ri.sr_item_sk
    JOIN 
        customer_metrics cm ON ais.cs_item_sk IN (SELECT cs_item_sk FROM catalog_sales WHERE cs_quantity > 0)
    WHERE 
        ais.sales_rank = 1
    GROUP BY 
        ais.cs_item_sk, ais.item_desc, ais.total_quantity, ais.total_sales, ais.sales_rank
)
SELECT 
    fi.item_desc,
    fi.total_quantity,
    fi.total_sales,
    fi.customer_count,
    fi.return_count,
    fi.total_return_value
FROM 
    featured_items fi
WHERE 
    fi.total_sales > 1000
    OR (fi.return_count > 5 AND fi.total_return_value < 200)
ORDER BY 
    fi.total_sales DESC;
