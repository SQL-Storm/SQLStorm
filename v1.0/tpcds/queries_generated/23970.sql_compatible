
WITH RECURSIVE customer_info AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        d.d_date, 
        SUM(COALESCE(ws.ws_net_paid, 0)) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) OVER (PARTITION BY c.c_customer_sk ORDER BY d.d_date) AS order_count
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, d.d_date
),
promotional_sales AS (
    SELECT 
        ws.ws_bill_customer_sk, 
        SUM(ws.ws_net_paid_inc_tax) AS total_promotions
    FROM web_sales ws
    JOIN promotion p ON ws.ws_promo_sk = p.p_promo_sk
    WHERE p.p_discount_active = 'Y'
    GROUP BY ws.ws_bill_customer_sk
),
customer_performance AS (
    SELECT 
        ci.c_customer_sk,
        ci.c_first_name,
        ci.c_last_name,
        ci.total_spent,
        COALESCE(ps.total_promotions, 0) AS total_promotions,
        CASE 
            WHEN ci.total_spent > 1000 THEN 'High Value'
            WHEN ci.total_spent BETWEEN 500 AND 1000 THEN 'Medium Value'
            ELSE 'Low Value'
        END AS customer_value,
        ROW_NUMBER() OVER (PARTITION BY 
            CASE 
                WHEN ci.total_spent > 1000 THEN 'High Value'
                WHEN ci.total_spent BETWEEN 500 AND 1000 THEN 'Medium Value'
                ELSE 'Low Value' 
            END ORDER BY ci.total_spent DESC) AS value_rank
    FROM customer_info ci
    LEFT JOIN promotional_sales ps ON ci.c_customer_sk = ps.ws_bill_customer_sk
)
SELECT 
    cp.c_customer_sk,
    cp.c_first_name,
    cp.c_last_name,
    cp.total_spent,
    cp.total_promotions,
    cp.customer_value,
    cp.value_rank
FROM customer_performance cp
WHERE cp.value_rank <= 10
ORDER BY CASE 
            WHEN cp.customer_value = 'High Value' THEN 1
            WHEN cp.customer_value = 'Medium Value' THEN 2
            ELSE 3 
         END, cp.total_spent DESC
FETCH FIRST 50 ROWS ONLY;
