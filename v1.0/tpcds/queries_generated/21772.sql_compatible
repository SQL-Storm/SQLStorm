
WITH RECURSIVE item_revenue AS (
    SELECT 
        i.item_id,
        i.i_item_desc,
        COALESCE(SUM(ws.ws_sales_price), 0) AS total_sales,
        COALESCE(SUM(ws.ws_ext_discount_amt), 0) AS total_discount,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM 
        item i
    LEFT JOIN 
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY 
        i.item_id, i.i_item_desc
),
promotions AS (
    SELECT 
        p.promo_id,
        CASE 
            WHEN p.p_discount_active = 'Y' THEN 'Active'
            ELSE 'Inactive'
        END AS promo_status,
        COUNT(DISTINCT cs.cs_order_number) AS promo_order_count,
        SUM(cs.cs_ext_sales_price) AS promo_sales
    FROM 
        promotion p
    LEFT JOIN 
        catalog_sales cs ON p.p_promo_sk = cs.cs_promo_sk
    WHERE 
        p.p_start_date_sk < (SELECT MAX(d_date_sk) FROM date_dim WHERE d_current_year = 'Y')
    GROUP BY 
        p.promo_id, p.p_discount_active
),
customer_summary AS (
    SELECT 
        c.c_customer_id,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_ext_sales_price) AS total_spent,
        AVG(ws.ws_ext_sales_price) AS average_spent_per_order
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_id
),
warehouse_summary AS (
    SELECT 
        w.w_warehouse_id,
        COUNT(DISTINCT ws.ws_order_number) AS total_shipments,
        SUM(COALESCE(ws.ws_quantity, 0)) AS total_items_shipped,
        AVG(ws.ws_net_profit) AS avg_profit_per_shipment
    FROM 
        warehouse w
    LEFT JOIN 
        web_sales ws ON w.w_warehouse_sk = ws.ws_warehouse_sk
    GROUP BY 
        w.w_warehouse_id
),
ranked_customers AS (
    SELECT 
        cs.c_customer_id,
        cs.total_orders,
        cs.total_spent,
        RANK() OVER (ORDER BY cs.total_spent DESC) AS revenue_rank
    FROM 
        customer_summary cs
)
SELECT 
    ir.item_id,
    ir.i_item_desc,
    ir.total_sales,
    ir.total_discount,
    p.promo_id,
    p.promo_status,
    p.promo_order_count,
    p.promo_sales,
    w.w_warehouse_id,
    w.total_shipments,
    ck.c_customer_id,
    ck.total_orders,
    ck.total_spent,
    ck.revenue_rank
FROM 
    item_revenue ir
LEFT JOIN 
    promotions p ON ir.total_sales > p.promo_sales
JOIN 
    warehouse_summary w ON w.total_items_shipped > ir.total_sales
JOIN 
    ranked_customers ck ON ck.total_orders > (SELECT AVG(total_orders) FROM customer_summary)
WHERE 
    (ir.total_sales IS NOT NULL OR ir.total_discount > 0)
    AND p.promo_sales IS NOT NULL
ORDER BY 
    ir.total_sales DESC, 
    p.promo_order_count ASC;
