
WITH RECURSIVE SalesCTE AS (
    SELECT ss.sold_date_sk,
           ss.item_sk,
           SUM(ss.ext_sales_price) AS total_sales
    FROM store_sales ss
    GROUP BY ss.sold_date_sk, ss.item_sk
),
CustomerReturns AS (
    SELECT sr.returned_date_sk,
           sr.return_time_sk,
           SUM(sr.return_amt) AS total_returns,
           sr.item_sk
    FROM store_returns sr
    GROUP BY sr.returned_date_sk, sr.return_time_sk, sr.item_sk
),
SalesWithReturns AS (
    SELECT s.sold_date_sk,
           s.item_sk,
           s.total_sales,
           COALESCE(r.total_returns, 0) AS total_returns,
           (s.total_sales - COALESCE(r.total_returns, 0)) AS net_sales
    FROM SalesCTE s
    LEFT JOIN CustomerReturns r
    ON s.item_sk = r.item_sk
),
SalesStatistics AS (
    SELECT item_sk,
           SUM(net_sales) AS total_net_sales,
           COUNT(*) AS sales_count,
           AVG(net_sales) AS average_net_sales,
           RANK() OVER (ORDER BY SUM(net_sales) DESC) AS sales_rank
    FROM SalesWithReturns
    GROUP BY item_sk
)
SELECT i.item_id,
       ss.total_net_sales,
       ss.sales_count,
       ss.average_net_sales,
       ss.sales_rank,
       CASE 
           WHEN ss.average_net_sales > 100 THEN 'High Value'
           WHEN ss.average_net_sales BETWEEN 50 AND 100 THEN 'Medium Value'
           ELSE 'Low Value'
       END AS value_category
FROM SalesStatistics ss
JOIN item i ON ss.item_sk = i.i_item_sk
WHERE ss.total_net_sales IS NOT NULL
      AND ss.sales_count > 0
ORDER BY ss.sales_rank
FETCH FIRST 100 ROWS ONLY;
