
WITH RECURSIVE sales_cte AS (
    SELECT 
        ws_sold_date_sk, 
        ws_item_sk, 
        SUM(ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk DESC) AS sale_rank
    FROM 
        web_sales 
    WHERE 
        ws_sold_date_sk BETWEEN 20200101 AND 20201231
    GROUP BY 
        ws_sold_date_sk, ws_item_sk
),
top_sales AS (
    SELECT 
        ws_item_sk,
        total_sales,
        LAG(total_sales) OVER (ORDER BY total_sales DESC) AS previous_sales
    FROM 
        sales_cte
    WHERE 
        sale_rank <= 10
),
customer_info AS (
    SELECT 
        cu.c_customer_id,
        cu.c_first_name,
        cu.c_last_name,
        CASE 
            WHEN cd.cd_gender = 'M' THEN CONCAT('Mr. ', cu.c_first_name)
            WHEN cd.cd_gender = 'F' THEN CONCAT('Ms. ', cu.c_first_name)
            ELSE cu.c_first_name
        END AS full_name,
        cd.cd_marital_status,
        cd.cd_purchase_estimate
    FROM 
        customer cu
    JOIN 
        customer_demographics cd 
    ON 
        cu.c_current_cdemo_sk = cd.cd_demo_sk
),
returns AS (
    SELECT 
        sr_returned_date_sk,
        sr_item_sk,
        COUNT(*) AS return_count,
        SUM(sr_return_amt) AS total_return_amt
    FROM 
        store_returns
    GROUP BY 
        sr_returned_date_sk, sr_item_sk
),
sales_returns AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        COALESCE(sr.return_count, 0) AS return_count,
        COALESCE(sr.total_return_amt, 0) AS total_return_amt,
        ws.ws_ext_sales_price
    FROM 
        web_sales ws
    LEFT JOIN 
        returns sr 
    ON 
        ws.ws_item_sk = sr.sr_item_sk
)

SELECT 
    ci.full_name,
    ts.ws_item_sk,
    ts.total_sales,
    ts.previous_sales,
    SUM(sr.ws_ext_sales_price) AS successful_sales,
    AVG(CASE 
        WHEN ts.total_sales > 0 THEN sr.ws_ext_sales_price 
        ELSE NULL 
    END) AS average_sale_price,
    COUNT(DISTINCT sr.ws_order_number) AS total_orders,
    SUM(sr.return_count) AS total_returns
FROM 
    customer_info ci
JOIN 
    sales_returns sr 
ON 
    ci.c_customer_id = sr.ws_order_number
JOIN 
    top_sales ts 
ON 
    sr.ws_item_sk = ts.ws_item_sk
GROUP BY 
    ci.full_name, ts.ws_item_sk, ts.total_sales, ts.previous_sales
HAVING 
    SUM(sr.total_return_amt) < (0.1 * SUM(sr.ws_ext_sales_price)) 
    AND SUM(sr.ws_ext_sales_price) > 0
ORDER BY 
    ts.total_sales DESC;
