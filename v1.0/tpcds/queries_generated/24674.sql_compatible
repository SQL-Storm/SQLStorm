
WITH RankedSales AS (
  SELECT 
    ws.web_site_sk,
    ws.ws_item_sk,
    SUM(ws.ws_quantity) AS total_quantity,
    RANK() OVER (PARTITION BY ws.web_site_sk ORDER BY SUM(ws.ws_quantity) DESC) AS rank
  FROM web_sales ws
  JOIN web_site w ON ws.ws_web_site_sk = w.web_site_sk
  GROUP BY ws.web_site_sk, ws.ws_item_sk
),
CustomerDemographics AS (
  SELECT 
    cd.cd_demo_sk,
    cd.cd_gender,
    cd.cd_marital_status,
    COALESCE(SUM(ss.ss_net_profit), 0) AS total_net_profit,
    COUNT(DISTINCT c.c_customer_sk) AS customer_count
  FROM customer c
  LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
  LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
  GROUP BY cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status
),
ItemSales AS (
  SELECT 
    i.i_item_sk, 
    i.i_item_desc, 
    SUM(ws.ws_net_paid) AS total_sales,
    AVG(ws.ws_sales_price) AS avg_sales_price
  FROM item i
  LEFT JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
  WHERE i.i_current_price > 0
  GROUP BY i.i_item_sk, i.i_item_desc
)
SELECT 
  cd.cd_gender,
  cd.cd_marital_status,
  COUNT(DISTINCT cd.cd_demo_sk) AS total_customers,
  COALESCE(SUM(rs.total_quantity), 0) AS total_quantity_sold,
  MAX(i.total_sales) AS max_item_sales,
  MIN(i.avg_sales_price) AS min_avg_price,
  CASE 
    WHEN MAX(i.total_sales) > 10000 THEN 'High Roller'
    WHEN MAX(i.total_sales) BETWEEN 5000 AND 10000 THEN 'Mid Tier'
    ELSE 'Low Tier'
  END AS sales_category
FROM CustomerDemographics cd
LEFT JOIN RankedSales rs ON cd.customer_count > 10
LEFT JOIN ItemSales i ON rs.ws_item_sk = i.i_item_sk
GROUP BY cd.cd_gender, cd.cd_marital_status
HAVING COUNT(DISTINCT cd.cd_demo_sk) > 5
ORDER BY cd.cd_gender, cd.cd_marital_status;
