
WITH CustomerSales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_net_paid_inc_tax) AS total_sales,
        COUNT(ws.ws_order_number) AS total_orders,
        DENSE_RANK() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ws.ws_net_paid_inc_tax) DESC) AS sales_rank
    FROM
        customer c
    LEFT JOIN
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
HighSpenders AS (
    SELECT
        cs.c_customer_sk,
        cs.c_first_name,
        cs.c_last_name,
        cs.total_sales,
        cs.total_orders
    FROM 
        CustomerSales cs
    WHERE 
        cs.sales_rank <= 10
),
AverageIncome AS (
    SELECT
        h.hd_income_band_sk,
        AVG(h.hd_dep_count) AS avg_dependent_count
    FROM 
        household_demographics h
    GROUP BY 
        h.hd_income_band_sk
)
SELECT 
    hs.c_first_name,
    hs.c_last_name,
    hs.total_sales,
    hs.total_orders,
    ai.avg_dependent_count,
    CASE 
        WHEN hs.total_sales > 5000 THEN 'VIP'
        ELSE 'Regular'
    END AS customer_category,
    (SELECT COUNT(*) FROM store s WHERE s.s_open_date_sk < '2023-01-01') AS store_count,
    COALESCE((SELECT SUM(cr.cr_return_amount) FROM catalog_returns cr WHERE cr.cr_returning_customer_sk = hs.c_customer_sk), 0) AS total_catalog_returns
FROM 
    HighSpenders hs
LEFT JOIN 
    AverageIncome ai ON hs.c_customer_sk = ai.hd_income_band_sk
WHERE 
    EXISTS (
        SELECT 1 
        FROM web_sales ws 
        WHERE ws.ws_bill_customer_sk = hs.c_customer_sk 
        AND ws.ws_sales_price > (SELECT AVG(ws2.ws_sales_price) FROM web_sales ws2)
    )
ORDER BY 
    hs.total_sales DESC
LIMIT 20;
