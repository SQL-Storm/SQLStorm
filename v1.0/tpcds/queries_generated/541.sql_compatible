
WITH CustomerReturns AS (
    SELECT
        sr_customer_sk,
        SUM(sr_return_quantity) AS total_returned_quantity,
        SUM(sr_return_amt) AS total_returned_amt
    FROM
        store_returns
    GROUP BY
        sr_customer_sk
),
CustomerDemographics AS (
    SELECT
        cd_demo_sk,
        cd_gender,
        cd_marital_status,
        cd_income_band_sk,
        cd_purchase_estimate
    FROM
        customer_demographics
),
IncomeBand AS (
    SELECT
        ib_income_band_sk,
        ib_lower_bound,
        ib_upper_bound
    FROM
        income_band
),
SalesDetails AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        CASE
            WHEN cd.cd_marital_status = 'M' THEN 'Married'
            WHEN cd.cd_marital_status = 'S' THEN 'Single'
            ELSE 'Other'
        END AS marital_status,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_ext_sales_price) AS total_spent,
        SUM(ws_coupon_amt) AS total_discount
    FROM
        customer AS c
        JOIN web_sales AS ws ON c.c_customer_sk = ws.ws_bill_customer_sk
        JOIN CustomerDemographics AS cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY
        c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status
)
SELECT
    sd.c_customer_sk,
    sd.c_first_name,
    sd.c_last_name,
    sd.marital_status,
    COALESCE(cd.total_returned_quantity, 0) AS total_returned_quantity,
    COALESCE(cd.total_returned_amt, 0) AS total_returned_amt,
    CASE
        WHEN (sd.total_spent - COALESCE(cd.total_returned_amt, 0)) > 1000 THEN 'High Value Customer'
        WHEN (sd.total_spent - COALESCE(cd.total_returned_amt, 0)) > 500 THEN 'Medium Value Customer'
        ELSE 'Low Value Customer'
    END AS customer_value,
    ib.ib_lower_bound,
    ib.ib_upper_bound
FROM
    SalesDetails sd
LEFT JOIN CustomerReturns cd ON sd.c_customer_sk = cd.sr_customer_sk
LEFT JOIN IncomeBand ib ON sd.total_spent BETWEEN ib.ib_lower_bound AND ib.ib_upper_bound
WHERE
    (sd.total_orders > 10 OR COALESCE(cd.total_returned_quantity, 0) > 0)
ORDER BY
    sd.total_spent DESC;
