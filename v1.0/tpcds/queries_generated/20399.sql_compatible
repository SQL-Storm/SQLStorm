
WITH RECURSIVE CustomerHierarchy AS (
    SELECT 
        c_customer_sk,
        c_first_name,
        c_last_name,
        cd_marital_status,
        cd_gender,
        1 AS level
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd_marital_status = 'M'
    UNION ALL
    SELECT 
        ch.c_customer_sk,
        ch.c_first_name,
        ch.c_last_name,
        cd.cd_marital_status,
        cd.cd_gender,
        ch.level + 1
    FROM 
        CustomerHierarchy ch
    JOIN 
        customer c ON c.c_customer_sk = ch.c_customer_sk
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd_marital_status != 'M'
), 
ItemSales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),
SalesRank AS (
    SELECT 
        ws_item_sk,
        DENSE_RANK() OVER (ORDER BY total_sales DESC) AS sales_rank
    FROM 
        ItemSales
),
PreferredCustomers AS (
    SELECT 
        c.c_customer_sk,
        ROW_NUMBER() OVER (PARTITION BY sh.cd_gender ORDER BY cd_purchase_estimate DESC) AS purchase_rank
    FROM 
        customer c
    JOIN 
        customer_demographics sh ON c.c_current_cdemo_sk = sh.cd_demo_sk
    WHERE 
        c.c_preferred_cust_flag = 'Y'
)
SELECT 
    ca.ca_city,
    SUM(ss.ss_net_profit) AS total_net_profit,
    AVG(cd.cd_purchase_estimate) AS avg_purchase_estimation,
    COUNT(DISTINCT c.c_customer_sk) AS total_customers,
    COALESCE(MAX(sr.sales_rank), 'No Sales') AS max_sales_rank
FROM 
    store_sales ss
LEFT JOIN 
    customer c ON ss.ss_customer_sk = c.c_customer_sk
LEFT JOIN 
    customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN 
    SalesRank sr ON ss.ss_item_sk = sr.ws_item_sk
JOIN 
    PreferredCustomers pc ON c.c_customer_sk = pc.c_customer_sk
GROUP BY 
    ca.ca_city
HAVING 
    SUM(ss.ss_net_profit) > (SELECT AVG(ss_net_profit) FROM store_sales) 
    AND COUNT(DISTINCT c.c_customer_sk) > 1
ORDER BY 
    total_net_profit DESC
LIMIT 10;
