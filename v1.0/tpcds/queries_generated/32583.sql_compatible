
WITH RECURSIVE PriceTrend AS (
    SELECT 
        i_item_sk,
        i_item_desc,
        i_current_price,
        0 AS depth
    FROM item
    WHERE i_current_price IS NOT NULL
    UNION ALL
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        CASE 
            WHEN pt.i_current_price < i.i_current_price THEN i.i_current_price - pt.i_current_price 
            ELSE 0 
        END AS i_current_price,
        depth + 1
    FROM item i
    JOIN PriceTrend pt ON i.i_item_sk = pt.i_item_sk
    WHERE i.i_current_price IS NOT NULL AND depth < 5
),
CustomerReturns AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returned,
        SUM(sr_return_amt_inc_tax) AS total_returned_amt
    FROM store_returns
    GROUP BY sr_item_sk
),
SalesSummary AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_sold,
        SUM(ws_net_paid) AS total_sales
    FROM web_sales
    WHERE ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY ws_item_sk
)
SELECT 
    it.i_item_sk,
    it.i_item_desc,
    COALESCE(ps.total_sold, 0) AS total_sold,
    COALESCE(cr.total_returned, 0) AS total_returned,
    COALESCE(cr.total_returned_amt, 0) AS total_returned_amt,
    ROUND((COALESCE(ps.total_sales, 0) - COALESCE(cr.total_returned_amt, 0)) / NULLIF(COALESCE(ps.total_sold, 0), 0), 2) AS net_profit_per_item,
    STRING_AGG(DISTINCT dem.cd_gender || ': ' || dem.cd_marital_status, ', ') AS demographics
FROM item it
LEFT JOIN SalesSummary ps ON it.i_item_sk = ps.ws_item_sk
LEFT JOIN CustomerReturns cr ON it.i_item_sk = cr.sr_item_sk
LEFT JOIN customer_demographics dem ON dem.cd_demo_sk IN (
    SELECT c_current_cdemo_sk FROM customer 
    WHERE c_customer_sk IN (
        SELECT ws_ship_customer_sk FROM web_sales
        WHERE ws_item_sk = it.i_item_sk
    )
)
WHERE it.i_current_price > 10.00
GROUP BY it.i_item_sk, it.i_item_desc
ORDER BY net_profit_per_item DESC
LIMIT 50;
