
WITH RECURSIVE sales_data AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws_order_number) AS order_count,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_quantity) DESC) AS sales_rank
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
), 
customer_summary AS (
    SELECT 
        c.c_customer_sk,
        COALESCE(cd.cd_gender, 'U') AS gender,
        SUM(ws.net_profit) AS total_net_profit,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        AVG(ws.ws_ext_sales_price) AS avg_order_value
    FROM 
        customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk 
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk 
    WHERE 
        c.c_birth_year > 1960
    GROUP BY 
        c.c_customer_sk, cd.cd_gender
), 
return_stats AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS total_returned_amt
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
), 
final_stats AS (
    SELECT 
        sd.ws_item_sk,
        sd.total_quantity,
        sd.total_sales,
        cs.total_orders,
        cs.total_net_profit,
        cs.avg_order_value,
        COALESCE(rs.total_returns, 0) AS total_returns,
        COALESCE(rs.total_returned_amt, 0) AS total_returned_amt
    FROM 
        sales_data sd
    LEFT JOIN customer_summary cs ON cs.c_customer_sk IN (SELECT c.c_customer_sk FROM customer c WHERE c.c_current_addr_sk IS NOT NULL)
    LEFT JOIN return_stats rs ON sd.ws_item_sk = rs.sr_item_sk
)
SELECT 
    fs.ws_item_sk,
    fs.total_quantity,
    fs.total_sales,
    fs.total_orders,
    fs.total_net_profit,
    fs.avg_order_value,
    fs.total_returns,
    fs.total_returned_amt,
    CASE 
        WHEN fs.total_returns > 0 THEN 'Item Returned'
        WHEN fs.total_sales > fs.total_returns THEN 'Item Sold'
        ELSE 'Unsold Item'
    END AS item_status
FROM 
    final_stats fs
WHERE 
    fs.total_sales IS NOT NULL
    AND fs.total_net_profit IS NOT NULL
ORDER BY 
    fs.total_sales DESC, fs.total_quantity DESC
FETCH FIRST 100 ROWS ONLY;
