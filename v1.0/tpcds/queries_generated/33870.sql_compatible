
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws.bill_customer_sk,
        SUM(ws.ws_sales_price * ws.ws_quantity) AS total_sales,
        COUNT(ws.ws_order_number) AS order_count,
        RANK() OVER (PARTITION BY ws.bill_customer_sk ORDER BY SUM(ws.ws_sales_price * ws.ws_quantity) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        customer c ON ws.bill_customer_sk = c.c_customer_sk
    GROUP BY 
        ws.bill_customer_sk
), 
customer_info AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Other' 
        END AS gender,
        COALESCE(cd.cd_marital_status, 'Unknown') AS marital_status,
        COALESCE(cd.cd_purchase_estimate, 0) AS purchase_estimate
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), 
date_filter AS (
    SELECT 
        d.d_date_sk
    FROM 
        date_dim d
    WHERE 
        d.d_date BETWEEN DATE '2023-01-01' AND DATE '2023-12-31'
), 
item_sales AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_sales_price * ws.ws_quantity) AS item_total_sales
    FROM 
        web_sales ws
    JOIN 
        date_filter df ON ws.ws_sold_date_sk = df.d_date_sk
    GROUP BY 
        ws.ws_item_sk
)
SELECT 
    ci.c_first_name,
    ci.c_last_name,
    ci.gender,
    ci.marital_status,
    ss.total_sales,
    ss.order_count,
    it.item_total_sales,
    CASE 
        WHEN it.item_total_sales > 10000 THEN 'High'
        WHEN it.item_total_sales BETWEEN 5000 AND 10000 THEN 'Medium'
        ELSE 'Low' 
    END AS sales_category
FROM 
    sales_summary ss
JOIN 
    customer_info ci ON ss.bill_customer_sk = ci.c_customer_sk
LEFT JOIN 
    item_sales it ON it.ws_item_sk IN (
        SELECT ws.ws_item_sk FROM web_sales ws WHERE ws.bill_customer_sk = ss.bill_customer_sk
    )
WHERE 
    ss.sales_rank <= 10
ORDER BY 
    ss.total_sales DESC;
