
WITH RECURSIVE Sales_CTE AS (
    SELECT 
        ws_sold_date_sk, 
        ws_item_sk, 
        SUM(ws_quantity) AS total_sales, 
        COUNT(ws_order_number) AS order_count
    FROM 
        web_sales
    GROUP BY 
        ws_sold_date_sk, ws_item_sk
    UNION ALL
    SELECT 
        ws_sold_date_sk, 
        ws_item_sk, 
        total_sales * 1.05, 
        order_count + 1
    FROM 
        Sales_CTE
    WHERE 
        order_count < 5
), 
Customer_Info AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        cd.cd_gender, 
        cd.cd_income_band_sk, 
        (SELECT 
            COUNT(*) 
         FROM 
            store_sales 
         WHERE 
            ss_customer_sk = c.c_customer_sk) AS total_store_purchases
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
Sales_Summary AS (
    SELECT 
        ci.c_customer_sk, 
        ci.c_first_name, 
        ci.c_last_name, 
        ci.cd_gender, 
        ci.cd_income_band_sk,
        COALESCE(SUM(ct.total_sales), 0) AS web_sales_total,
        SUM(CASE WHEN ss.ss_item_sk IS NOT NULL THEN ss.ss_net_paid ELSE 0 END) AS store_sales_total
    FROM 
        Customer_Info ci
    LEFT JOIN 
        Sales_CTE ct ON ci.c_customer_sk = ct.ws_item_sk
    LEFT JOIN 
        store_sales ss ON ci.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        ci.c_customer_sk, ci.c_first_name, ci.c_last_name, ci.cd_gender, ci.cd_income_band_sk
)
SELECT 
    css.c_customer_sk,
    css.c_first_name,
    css.c_last_name,
    css.cd_gender,
    css.cd_income_band_sk,
    css.web_sales_total,
    css.store_sales_total,
    CASE 
        WHEN css.web_sales_total > css.store_sales_total THEN 'More web sales'
        ELSE 'More store sales'
    END AS sales_type
FROM 
    Sales_Summary css
WHERE 
    css.web_sales_total > 1000
    OR css.store_sales_total > 1000
ORDER BY 
    css.web_sales_total DESC, css.store_sales_total DESC
FETCH FIRST 50 ROWS ONLY;
