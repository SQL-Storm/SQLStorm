
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           NULL AS parent_id, 0 AS level
    FROM customer c
    WHERE c.c_customer_sk IS NOT NULL

    UNION ALL
    
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           ch.c_customer_sk AS parent_id, ch.level + 1
    FROM customer c
    JOIN CustomerHierarchy ch ON ch.c_customer_sk = c.c_current_cdemo_sk
), 
CustomerStats AS (
    SELECT 
        ch.c_customer_sk,
        ch.c_first_name,
        ch.c_last_name,
        COUNT(ss.ticket_number) AS total_sales,
        SUM(ss.ss_net_profit) AS total_profit,
        SUM(ss.ss_ext_sales_price) AS total_sales_value
    FROM CustomerHierarchy ch
    LEFT JOIN store_sales ss ON ch.c_customer_sk = ss.ss_customer_sk
    GROUP BY ch.c_customer_sk, ch.c_first_name, ch.c_last_name
),
DemographicStats AS (
    SELECT 
        cd.cd_gender,
        COUNT(DISTINCT cs.c_customer_sk) AS customer_count,
        AVG(cs.total_sales_value) AS avg_sales_value,
        AVG(cs.total_profit) AS avg_profit
    FROM CustomerStats cs
    JOIN customer_demographics cd ON cs.c_customer_sk = cd.cd_demo_sk
    WHERE cd.cd_marital_status = 'M'
    GROUP BY cd.cd_gender
),
DateStats AS (
    SELECT 
        d.d_year,
        SUM(ws.ws_net_profit) AS yearly_profit,
        SUM(ws.ws_quantity) AS total_quantity_sold
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY d.d_year
)
SELECT 
    ds.d_year,
    ds.yearly_profit,
    ds.total_quantity_sold,
    ds.yearly_profit / NULLIF(ds.total_quantity_sold, 0) AS avg_profit_per_item,
    ds.yearly_profit * 0.1 AS projected_growth_profit,
    ds.total_quantity_sold - COALESCE(
        (SELECT SUM(COALESCE(q.ss_quantity, 0))
         FROM store_sales q
         JOIN CustomerStats cs ON cs.c_customer_sk = q.ss_customer_sk
         WHERE cs.total_sales_value > 10000), 0
    ) AS net_sales_quantity
FROM DateStats ds
WHERE ds.yearly_profit > (
    SELECT AVG(yearly_profit) 
    FROM DateStats 
)
ORDER BY ds.d_year DESC
LIMIT 100;
