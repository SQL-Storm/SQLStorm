
WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
),
SalesSummary AS (
    SELECT 
        r.ws_item_sk,
        COUNT(r.ws_order_number) AS total_orders,
        SUM(r.ws_sales_price) AS total_sales
    FROM 
        RankedSales r
    WHERE 
        r.rank = 1
    GROUP BY 
        r.ws_item_sk
),
CustomerInfo AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_income_band_sk,
        cd.cd_credit_rating
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
InventoryCheck AS (
    SELECT 
        inv.inv_item_sk,
        inv.inv_quantity_on_hand,
        CASE
            WHEN inv.inv_quantity_on_hand IS NULL THEN 'Out of Stock'
            WHEN inv.inv_quantity_on_hand < 10 THEN 'Low Stock'
            ELSE 'In Stock'
        END AS stock_status
    FROM 
        inventory inv
),
SalesByLocation AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_net_profit) AS total_net_profit,
        SUM(ws.ws_ext_discount_amt) AS total_discount,
        CASE 
            WHEN SUM(ws.ws_net_profit) > 10000 THEN 'High Profit'
            WHEN SUM(ws.ws_net_profit) BETWEEN 5000 AND 10000 THEN 'Moderate Profit'
            ELSE 'Low Profit'
        END AS profit_category
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_item_sk
)
SELECT 
    ci.c_first_name,
    ci.c_last_name,
    ss.total_orders,
    ss.total_sales,
    ic.stock_status,
    sb.total_net_profit,
    sb.profit_category
FROM 
    CustomerInfo ci
JOIN 
    SalesSummary ss ON ci.c_customer_sk = ss.ws_item_sk
JOIN 
    InventoryCheck ic ON ss.ws_item_sk = ic.inv_item_sk
JOIN 
    SalesByLocation sb ON ss.ws_item_sk = sb.ws_item_sk
WHERE 
    ci.cd_income_band_sk IS NOT NULL AND
    ci.cd_credit_rating IS NOT NULL
ORDER BY 
    ss.total_sales DESC
FETCH FIRST 100 ROWS ONLY;
