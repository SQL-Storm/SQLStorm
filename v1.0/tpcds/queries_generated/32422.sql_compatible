
WITH RECURSIVE customer_hierarchy AS (
    SELECT c_customer_sk, c_current_cdemo_sk, c_first_name, c_last_name, 0 AS level
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_current_cdemo_sk, c.c_first_name, c.c_last_name, ch.level + 1
    FROM customer c
    JOIN customer_hierarchy ch ON c.c_current_cdemo_sk = ch.c_current_cdemo_sk
    WHERE ch.level < 3
), sales_summary AS (
    SELECT 
        ws_bill_customer_sk AS customer_id,
        SUM(ws_sales_price) AS total_sales,
        COUNT(ws_order_number) AS order_count,
        RANK() OVER (PARTITION BY ws_bill_customer_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM web_sales
    GROUP BY ws_bill_customer_sk
), demographics_summary AS (
    SELECT 
        cd_demo_sk,
        COUNT(c.c_customer_sk) AS customer_count,
        AVG(cd_buy_potential) AS avg_buy_potential
    FROM customer_demographics cd
    LEFT JOIN household_demographics hd ON cd.cd_demo_sk = hd.hd_demo_sk
    LEFT JOIN customer c ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY cd_demo_sk
) 
SELECT 
    ch.c_first_name,
    ch.c_last_name,
    ss.total_sales,
    ss.order_count,
    ds.customer_count,
    ds.avg_buy_potential,
    COALESCE(ch.level, -1) AS customer_level,
    CASE 
        WHEN ss.total_sales > 1000 THEN 'High Value Customer'
        WHEN ss.total_sales BETWEEN 500 AND 1000 THEN 'Medium Value Customer'
        ELSE 'Low Value Customer'
    END AS customer_value_segment
FROM customer_hierarchy ch
LEFT JOIN sales_summary ss ON ch.c_customer_sk = ss.customer_id
JOIN demographics_summary ds ON ch.c_current_cdemo_sk = ds.cd_demo_sk
WHERE (ch.level IS NULL OR ch.level < 3)
AND (ss.total_sales IS NOT NULL OR ds.customer_count > 0)
ORDER BY ss.order_count DESC, ds.avg_buy_potential DESC
FETCH FIRST 100 ROWS ONLY;
