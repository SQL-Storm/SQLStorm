WITH RECURSIVE SalesSummary AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_profit) AS total_profit,
        1 AS level
    FROM 
        web_sales
    GROUP BY 
        ws_sold_date_sk, ws_item_sk

    UNION ALL

    SELECT 
        ss.ss_sold_date_sk,
        ss.ss_item_sk,
        SUM(ss.ss_quantity) + ss.total_quantity,
        SUM(ss.ss_net_profit) + ss.total_profit,
        ss.level + 1
    FROM 
        store_sales ss
    JOIN SalesSummary s ON s.ws_item_sk = ss.ss_item_sk
    WHERE 
        s.level < 2 
    GROUP BY 
        ss.ss_sold_date_sk, ss.ss_item_sk
)

SELECT 
    d.d_date AS sale_date,
    i.i_item_desc,
    COALESCE(SUM(ss.total_quantity), 0) AS total_quantity,
    COALESCE(SUM(ss.total_profit), 0) AS total_profit,
    COUNT(DISTINCT c.c_customer_sk) AS customer_count,
    RANK() OVER (ORDER BY COALESCE(SUM(ss.total_profit), 0) DESC) AS profit_rank
FROM 
    date_dim d
LEFT OUTER JOIN 
    SalesSummary ss ON d.d_date_sk = ss.ws_sold_date_sk
LEFT OUTER JOIN 
    item i ON ss.ws_item_sk = i.i_item_sk
LEFT JOIN 
    web_sales ws ON ws.ws_item_sk = i.i_item_sk
LEFT JOIN 
    customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
WHERE 
    d.d_year = 2001 
    AND (i.i_current_price IS NOT NULL AND i.i_current_price > 0)
GROUP BY 
    d.d_date, i.i_item_desc
HAVING 
    SUM(ss.total_quantity) >= (SELECT AVG(total_quantity) FROM SalesSummary) 
ORDER BY 
    sale_date, total_profit DESC
LIMIT 100;