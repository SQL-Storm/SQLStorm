
WITH RECURSIVE SalesData AS (
    SELECT 
        ws.order_number,
        ws.item_sk,
        ws.quantity,
        ws.ext_sales_price,
        ws.ext_discount_amt,
        ws.net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.order_number ORDER BY ws.net_profit DESC) AS rn
    FROM 
        web_sales ws
    WHERE 
        ws.sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
),
TopSales AS (
    SELECT 
        order_number,
        SUM(quantity) AS total_quantity,
        SUM(ext_sales_price) AS total_sales,
        SUM(ext_discount_amt) AS total_discount,
        SUM(net_profit) AS total_profit
    FROM 
        SalesData 
    WHERE 
        rn <= 10 
    GROUP BY 
        order_number
),
CustomerReturns AS (
    SELECT 
        sr.ret_value,
        cr.return_quantity,
        cr.order_number,
        COALESCE(SUM(cr.return_quantity), 0) AS total_returns
    FROM 
        store_returns cr
    LEFT JOIN store_sales sr ON cr.order_number = sr.order_number
    GROUP BY 
        sr.ret_value, cr.order_number
)
SELECT 
    ts.order_number,
    ts.total_quantity,
    ts.total_sales,
    ts.total_discount,
    ts.total_profit,
    COALESCE(cr.total_returns, 0) AS total_returns,
    (ts.total_sales - COALESCE(cr.total_returns, 0)) AS net_revenue
FROM 
    TopSales ts
LEFT JOIN 
    CustomerReturns cr ON ts.order_number = cr.order_number
WHERE 
    ts.total_sales > (SELECT AVG(total_sales) FROM TopSales)
ORDER BY 
    net_revenue DESC
LIMIT 100;
