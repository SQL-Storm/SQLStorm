
WITH RECURSIVE product_hierarchy AS (
    SELECT i_item_sk, i_item_desc, i_brand, 0 AS level
    FROM item
    WHERE i_current_price > 50
    UNION ALL
    SELECT p.i_item_sk, p.i_item_desc, p.i_brand, ph.level + 1
    FROM item p
    JOIN product_hierarchy ph ON p.i_brand = ph.i_brand
    WHERE ph.level < 5
),
sales_data AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_sold_date_sk,
        ws.ws_ext_sales_price,
        ws.ws_quantity,
        CAST(d.d_date AS DATE) AS sales_date,
        RANK() OVER (PARTITION BY ws.ws_order_number ORDER BY ws.ws_ext_sales_price DESC) AS sales_rank
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE d.d_year = 2023
),
top_sales AS (
    SELECT 
        sd.ws_order_number,
        SUM(sd.ws_ext_sales_price) AS total_sales,
        COUNT(*) AS item_count
    FROM sales_data sd
    WHERE sd.sales_rank <= 5
    GROUP BY sd.ws_order_number
    HAVING COUNT(*) > 3
),
debt_combined AS (
    SELECT 
        CASE 
            WHEN cd_credit_rating IS NULL THEN 'UNKNOWN'
            ELSE cd_credit_rating 
        END AS credit_status,
        COUNT(DISTINCT c.c_customer_id) AS customer_count
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY cd_credit_rating
)
SELECT 
    ph.i_item_desc,
    ph.i_brand,
    COALESCE(tc.total_sales, 0) AS total_sales,
    db.credit_status,
    db.customer_count
FROM product_hierarchy ph
LEFT JOIN top_sales tc ON ph.i_item_sk = tc.ws_order_number
CROSS JOIN debt_combined db
WHERE ph.level <= 2
ORDER BY total_sales DESC, db.customer_count DESC
LIMIT 100;
