
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws.ws_order_number, 
        ws.ws_item_sk, 
        ws.ws_quantity, 
        ws.ws_sales_price, 
        ws.ws_net_paid, 
        ROW_NUMBER() OVER (PARTITION BY ws.ws_order_number ORDER BY ws.ws_item_sk) AS item_rank
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk IN (
        SELECT d.d_date_sk
        FROM date_dim d
        WHERE d.d_year = 2023 AND d.d_moy IN (1, 2, 3)
    )
),
customer_rating AS (
    SELECT 
        c.c_customer_sk, 
        cd.cd_credit_rating,
        COALESCE(cd.cd_purchase_estimate, 0) AS purchase_est
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
inventory_check AS (
    SELECT 
        inv.inv_item_sk,
        SUM(inv.inv_quantity_on_hand) AS total_quantity
    FROM inventory inv
    WHERE inv.inv_date_sk = (SELECT MAX(inv2.inv_date_sk) FROM inventory inv2)
    GROUP BY inv.inv_item_sk
)
SELECT 
    c.c_customer_id,
    COUNT(DISTINCT ss.ws_order_number) AS total_orders,
    SUM(ss.ws_quantity * ss.ws_sales_price) AS total_revenue,
    SUM(COALESCE(ci.total_quantity, 0)) AS total_inventory,
    sr.reason_desc,
    ROW_NUMBER() OVER (PARTITION BY c.c_customer_id ORDER BY SUM(ss.ws_net_paid) DESC) AS customer_rank
FROM customer c
JOIN customer_rating c_r ON c.c_customer_sk = c_r.c_customer_sk
JOIN sales_summary ss ON c.c_customer_id = ss.ws_order_number
LEFT JOIN inventory_check ci ON ss.ws_item_sk = ci.inv_item_sk
LEFT JOIN reason sr ON ss.ws_order_number % 10 = sr.r_reason_sk
WHERE 
    c_r.cd_credit_rating IS NOT NULL
    AND c_r.purchase_est > 1000
    AND (c_r.purchase_est IS NOT NULL OR c_r.cd_credit_rating != 'Poor')
GROUP BY c.c_customer_id, sr.reason_desc
HAVING 
    SUM(ss.ws_net_paid) > 5000
    AND MAX(ss.item_rank) > 3
ORDER BY customer_rank;
