
WITH RankedReturns AS (
    SELECT 
        sr_returned_date_sk, 
        sr_store_sk,
        COUNT(sr_item_sk) AS total_returns,
        SUM(sr_return_quantity) AS total_returned_quantity,
        ROW_NUMBER() OVER (PARTITION BY sr_store_sk ORDER BY SUM(sr_return_quantity) DESC) AS rank
    FROM 
        store_returns 
    GROUP BY 
        sr_returned_date_sk, sr_store_sk
), 
HighReturnStores AS (
    SELECT 
        sr.store_sk,
        s.cs_store_name,
        SUM(COALESCE(total_returns, 0)) AS total_return_count
    FROM 
        (SELECT DISTINCT sr_store_sk AS store_sk FROM RankedReturns WHERE rank <= 5) sr
    JOIN 
        store s ON sr.store_sk = s.s_store_sk
    LEFT JOIN 
        RankedReturns r ON sr.store_sk = r.sr_store_sk
    GROUP BY 
        sr.store_sk, s.cs_store_name
), 
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(COALESCE(ss.net_paid, 0)) AS total_spent,
        COUNT(DISTINCT ss.ss_ticket_number) AS sales_count
    FROM 
        customer c
    LEFT JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
)
SELECT 
    h.store_sk,
    h.cs_store_name,
    COUNT(DISTINCT c.c_customer_sk) AS unique_customers,
    SUM(c.total_spent) AS total_revenue,
    AVG(c.sales_count) AS avg_sales_per_customer,
    CASE 
        WHEN SUM(c.total_spent) IS NULL THEN 'NO SALES'
        ELSE CAST(SUM(c.total_spent) AS VARCHAR)
    END AS revenue_message
FROM 
    HighReturnStores h
JOIN 
    CustomerStats c ON h.store_sk = c.c_customer_sk
GROUP BY 
    h.store_sk, h.cs_store_name
HAVING 
    SUM(c.total_spent) > 1000 OR SUM(h.total_return_count) IS NOT NULL 
ORDER BY 
    total_revenue DESC, unique_customers ASC
LIMIT 10;
