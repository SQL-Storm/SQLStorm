
WITH RECURSIVE SalesHier AS (
    SELECT 
        ss_item_sk,
        SUM(ss_quantity) AS total_sold_quantity,
        SUM(ss_ext_sales_price) AS total_sales_amount,
        1 AS level
    FROM store_sales
    WHERE ss_sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim) - 30
    GROUP BY ss_item_sk

    UNION ALL

    SELECT 
        ss.ss_item_sk,
        SUM(ss.ss_quantity) + sh.total_sold_quantity AS total_sold_quantity,
        SUM(ss.ss_ext_sales_price) + sh.total_sales_amount AS total_sales_amount,
        sh.level + 1
    FROM store_sales ss
    JOIN SalesHier sh ON ss.ss_item_sk = sh.ss_item_sk
    WHERE sh.level < 5
    GROUP BY ss.ss_item_sk, sh.total_sold_quantity, sh.total_sales_amount, sh.level
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT cs.cs_order_number) AS total_orders,
        SUM(COALESCE(cs.cs_ext_sales_price, 0)) AS total_spent,
        MAX(COALESCE(cs.cs_net_profit, 0)) AS max_order_profit
    FROM customer c
    LEFT JOIN store_sales cs ON c.c_customer_sk = cs.ss_customer_sk
    GROUP BY c.c_customer_sk
),
RankedCustomers AS (
    SELECT 
        cs.c_customer_sk,
        cs.total_orders,
        cs.total_spent,
        cs.max_order_profit,
        RANK() OVER (ORDER BY cs.total_spent DESC) AS rank
    FROM CustomerStats cs
)
SELECT 
    a.w_warehouse_name,
    r.c_customer_sk,
    r.total_orders,
    r.total_spent,
    r.max_order_profit,
    sh.total_sold_quantity,
    sh.total_sales_amount
FROM RankedCustomers r
JOIN warehouse a ON r.total_orders > 10
LEFT JOIN SalesHier sh ON r.c_customer_sk = sh.ss_item_sk
WHERE a.w_warehouse_sq_ft > 10000
ORDER BY r.total_spent DESC, r.max_order_profit DESC;
