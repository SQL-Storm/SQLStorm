
WITH SalesSummary AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023) - 30 
        AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        ws.ws_item_sk
),
TopItems AS (
    SELECT 
        item.i_item_id,
        COALESCE(item.i_item_desc, 'Description Not Available') AS item_description,
        sales.total_quantity,
        sales.total_sales,
        sales.order_count,
        sales.sales_rank
    FROM 
        SalesSummary sales
    JOIN 
        item 
    ON 
        sales.ws_item_sk = item.i_item_sk
    WHERE 
        sales.sales_rank <= 10
),
ItemDetails AS (
    SELECT 
        ti.i_item_id AS item_id,
        ti.item_description,
        RANK() OVER (ORDER BY ti.total_sales DESC) AS overall_rank,
        (SELECT AVG(cd_purchase_estimate) FROM customer_demographics 
         WHERE cd_credit_rating IS NOT NULL) AS average_purchase_estimate
    FROM 
        TopItems ti
)
SELECT 
    id.item_id,
    id.item_description,
    id.overall_rank,
    id.average_purchase_estimate,
    CASE 
        WHEN id.average_purchase_estimate < 500 THEN 'Low Value Item'
        WHEN id.average_purchase_estimate BETWEEN 500 AND 1500 THEN 'Medium Value Item'
        ELSE 'High Value Item'
    END AS value_category,
    CONCAT('Item: ', id.item_id, ' Description: ', id.item_description, 
           ' Estimated Value: ', 
           CASE 
               WHEN id.average_purchase_estimate IS NULL THEN 'Estimate Not Available'
               ELSE CAST(id.average_purchase_estimate AS VARCHAR)
           END) AS detailed_info
FROM 
    ItemDetails id
LEFT JOIN 
    catalog_sales cs ON id.item_id = cs.cs_item_sk
WHERE 
    cs.cs_sold_date_sk = (SELECT MAX(cs1.cs_sold_date_sk) FROM catalog_sales cs1)
ORDER BY 
    id.overall_rank;
