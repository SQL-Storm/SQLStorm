
WITH ranked_sales AS (
    SELECT 
        cs.cs_order_number,
        cs.cs_sales_price,
        cs.cs_net_paid,
        cs.cs_ship_mode_sk,
        ROW_NUMBER() OVER (PARTITION BY cs.cs_order_number ORDER BY cs.cs_sales_price DESC) AS sales_rank
    FROM 
        catalog_sales cs
    WHERE 
        cs.cs_sold_date_sk >= (SELECT MAX(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023)
),
customer_info AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_income_band_sk,
        ib.ib_lower_bound,
        ib.ib_upper_bound
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        household_demographics hd ON hd.hd_demo_sk = cd.cd_demo_sk
    LEFT JOIN 
        income_band ib ON hd.hd_income_band_sk = ib.ib_income_band_sk
),
shipping_modes AS (
    SELECT 
        sm.sm_ship_mode_id,
        sm.sm_type,
        COUNT(ws.ws_order_number) AS order_count
    FROM 
        ship_mode sm
    JOIN 
        web_sales ws ON sm.sm_ship_mode_sk = ws.ws_ship_mode_sk
    GROUP BY 
        sm.sm_ship_mode_id, sm.sm_type
)
SELECT 
    ci.c_first_name || ' ' || ci.c_last_name AS customer_name,
    ci.cd_gender,
    ci.cd_marital_status,
    CASE 
        WHEN ci.cd_income_band_sk IS NULL THEN 'Unknown'
        WHEN ci.ib_lower_bound IS NOT NULL AND ci.ib_upper_bound IS NOT NULL THEN 
            'Income between ' || ci.ib_lower_bound || ' and ' || ci.ib_upper_bound 
        ELSE 
            'Unknown Income'
    END AS income_band,
    ss.ss_ticket_number,
    ss.ss_sales_price,
    ss.ss_net_paid,
    sm.sm_type AS shipping_method,
    sm.order_count AS total_orders
FROM 
    store_sales ss
JOIN 
    ranked_sales rs ON ss.ss_order_number = rs.cs_order_number
JOIN 
    customer_info ci ON ss.ss_customer_sk = ci.c_customer_sk
JOIN 
    shipping_modes sm ON rs.cs_ship_mode_sk = sm.sm_ship_mode_id
WHERE 
    ss.ss_net_profit > 0 
    AND ci.cd_gender = 'F'
    AND sm.order_count > 100
    AND EXISTS (SELECT 1 FROM store_returns sr WHERE sr.sr_ticket_number = ss.ss_ticket_number AND sr.sr_return_quantity > 0)
ORDER BY 
    ss.ss_net_paid DESC
LIMIT 50;
