
WITH item_summary AS (
    SELECT 
        i.i_item_sk,
        i.i_item_id,
        i.i_product_name,
        SUM(ws.ws_quantity) AS total_sales_quantity,
        SUM(ws.ws_ext_sales_price) AS total_sales_revenue,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM item i
    LEFT JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY i.i_item_sk, i.i_item_id, i.i_product_name
),
customer_returns AS (
    SELECT 
        sr_item_sk,
        COUNT(DISTINCT sr_ticket_number) AS total_returns,
        SUM(sr_return_amt) AS total_return_amount
    FROM store_returns
    GROUP BY sr_item_sk
),
combined_sales AS (
    SELECT 
        is.i_item_id,
        is.i_product_name,
        is.total_sales_quantity,
        is.total_sales_revenue,
        COALESCE(cr.total_returns, 0) AS total_returns,
        COALESCE(cr.total_return_amount, 0) AS total_return_amount,
        (is.total_sales_revenue - COALESCE(cr.total_return_amount, 0)) AS net_revenue
    FROM item_summary is
    LEFT JOIN customer_returns cr ON is.i_item_sk = cr.sr_item_sk
),
final_output AS (
    SELECT 
        item_id,
        product_name,
        total_sales_quantity,
        total_sales_revenue,
        total_returns,
        net_revenue,
        RANK() OVER (ORDER BY net_revenue DESC) AS revenue_rank
    FROM combined_sales
    WHERE net_revenue > 0
)
SELECT 
    fo.item_id,
    fo.product_name,
    fo.total_sales_quantity,
    fo.total_sales_revenue,
    fo.total_returns,
    fo.net_revenue,
    CASE 
        WHEN fo.total_returns = 0 THEN 'No Returns'
        WHEN fo.total_returns > (SELECT AVG(total_returns) FROM customer_returns) THEN 'High Return'
        ELSE 'Normal Return'
    END AS return_category
FROM final_output fo
ORDER BY fo.revenue_rank
FETCH FIRST 10 ROWS ONLY;
