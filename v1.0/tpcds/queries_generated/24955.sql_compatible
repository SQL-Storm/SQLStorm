
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.ws_sales_price DESC) AS rn
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price > (SELECT AVG(ws2.ws_sales_price) 
                              FROM web_sales ws2 
                              WHERE ws2.ws_sold_date_sk > (SELECT MAX(d.d_date_sk) 
                                                             FROM date_dim d 
                                                             WHERE d.d_year = 2001))
),
ROI AS (
    SELECT 
        ws.web_site_sk,
        SUM(ws.ws_net_profit) AS total_net_profit,
        SUM(ws.ws_sales_price) AS total_sales,
        CASE 
            WHEN SUM(ws.ws_sales_price) = 0 THEN NULL
            ELSE SUM(ws.ws_net_profit) / NULLIF(SUM(ws.ws_sales_price), 0) 
        END AS roi
    FROM 
        web_sales ws
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    WHERE 
        c.c_birth_year < (EXTRACT(YEAR FROM DATE '2002-10-01') - 18)
    GROUP BY 
        ws.web_site_sk
    HAVING 
        MAX(roi) IS NOT NULL
),
SalesReturn AS (
    SELECT 
        sr.returning_customer_sk,
        COUNT(*) AS total_returns,
        SUM(sr.return_qty) AS total_return_quantity,
        SUM(sr.return_amt_inc_tax) AS total_returned_amt
    FROM 
        store_returns sr
    GROUP BY 
        sr.returning_customer_sk
    HAVING 
        COUNT(*) > 0
),
FinalResults AS (
    SELECT 
        ws.web_site_sk,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        AVG(ws.ws_sales_price) AS avg_sales_price,
        COALESCE(SUM(sr.total_return_quantity), 0) AS total_return_quantity,
        COALESCE(roi.roi, 0) AS roi
    FROM 
        web_sales ws
    LEFT JOIN 
        SalesReturn sr ON ws.ws_ship_customer_sk = sr.returning_customer_sk
    LEFT JOIN 
        ROI roi ON ws.web_site_sk = roi.web_site_sk
    GROUP BY 
        ws.web_site_sk
)
SELECT 
    f.web_site_sk,
    f.total_orders,
    f.avg_sales_price,
    f.total_return_quantity,
    f.roi,
    CASE 
        WHEN f.roi > 0.5 THEN 'Excellent'
        WHEN f.roi BETWEEN 0.2 AND 0.5 THEN 'Good'
        ELSE 'Needs Improvement'
    END AS performance_category
FROM 
    FinalResults f
WHERE 
    f.total_orders > 10
ORDER BY 
    f.roi DESC, f.total_orders DESC
LIMIT 20;
