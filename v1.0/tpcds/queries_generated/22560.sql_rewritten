WITH RECURSIVE price_analysis AS (
    SELECT 
        i.i_item_sk,
        i.i_item_id,
        i.i_current_price,
        i.i_brand,
        i_class_id,
        i_class,
        CAST(NULL AS DECIMAL(7,2)) AS historical_price,
        ROW_NUMBER() OVER (PARTITION BY i.i_item_sk ORDER BY i.i_rec_start_date DESC) AS price_rank
    FROM
        item i
    WHERE
        i.i_rec_start_date <= cast('2002-10-01' as date)
        AND (i.i_rec_end_date IS NULL OR i.i_rec_end_date > cast('2002-10-01' as date))

    UNION ALL

    SELECT 
        pa.i_item_sk,
        pa.i_item_id,
        pa.i_current_price,
        pa.i_brand,
        pa.i_class_id,
        pa.i_class,
        pa.historical_price * 0.95 AS historical_price, 
        ROW_NUMBER() OVER (PARTITION BY pa.i_item_sk ORDER BY pa.i_rec_start_date DESC) + 1 AS price_rank
    FROM
        item pa
    INNER JOIN price_analysis p ON pa.i_item_sk = p.i_item_sk
    WHERE
        pa.i_rec_start_date < p.i_rec_start_date
)
SELECT 
    c.c_customer_id,
    c.c_first_name,
    c.c_last_name,
    ca.ca_city,
    MAX(COALESCE(p.i_current_price, 0) - COALESCE(pa.historical_price, 0)) AS price_change,
    SUM(ws.ws_quantity) AS total_quantity,
    COUNT(DISTINCT ws.ws_order_number) AS total_orders,
    AVG(ws.ws_net_profit) AS avg_net_profit
FROM 
    customer c
LEFT JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN price_analysis pa ON ws.ws_item_sk = pa.i_item_sk
LEFT JOIN item p ON pa.i_item_sk = p.i_item_sk
WHERE
    (c.c_birth_month = EXTRACT(MONTH FROM cast('2002-10-01' as date)) AND 
     c.c_birth_day <= EXTRACT(DAY FROM cast('2002-10-01' as date)))
    OR (c.c_birth_year = EXTRACT(YEAR FROM cast('2002-10-01' as date)) - 1 AND 
    (c.c_birth_month = EXTRACT(MONTH FROM cast('2002-10-01' as date)) AND c.c_birth_day > EXTRACT(DAY FROM cast('2002-10-01' as date))))
GROUP BY 
    c.c_customer_id, c.c_first_name, c.c_last_name, ca.ca_city
HAVING 
    SUM(ws.ws_quantity) > 10
    AND MAX(COALESCE(p.i_current_price, 0) - COALESCE(pa.historical_price, 0)) > 0
ORDER BY 
    price_change DESC 
LIMIT 100;