
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_id, 
        c.c_first_name, 
        c.c_last_name, 
        s.ss_sales_price, 
        s.ss_net_profit,
        1 AS level
    FROM 
        customer c
    JOIN 
        store_sales s ON c.c_customer_sk = s.ss_customer_sk
    WHERE 
        s.ss_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    
    UNION ALL
    
    SELECT 
        sh.c_customer_id, 
        sh.c_first_name, 
        sh.c_last_name, 
        s.ss_sales_price,
        s.ss_net_profit,
        sh.level + 1
    FROM 
        sales_hierarchy sh
    JOIN 
        customer c ON sh.c_customer_id = c.c_customer_id
    JOIN 
        store_sales s ON c.c_customer_sk = s.ss_customer_sk    
    WHERE 
        sh.ss_sales_price < s.ss_sales_price
)

SELECT 
    sh.c_customer_id, 
    sh.c_first_name, 
    sh.c_last_name,
    COUNT(DISTINCT s.ss_ticket_number) AS total_transactions,
    SUM(s.ss_net_paid) AS total_net_paid,
    AVG(s.ss_sales_price) AS avg_sales_price,
    STRING_AGG(DISTINCT CONCAT(s.ss_ticket_number, ': ', s.ss_sales_price), '; ') AS transactions_detail
FROM 
    sales_hierarchy sh
LEFT JOIN 
    store_sales s ON sh.c_customer_id = s.ss_customer_sk
GROUP BY 
    sh.c_customer_id, sh.c_first_name, sh.c_last_name
HAVING 
    SUM(s.ss_net_paid) > 1000
ORDER BY 
    total_net_paid DESC
FETCH FIRST 10 ROWS ONLY;
