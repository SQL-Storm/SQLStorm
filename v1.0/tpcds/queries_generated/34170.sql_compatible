
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ss.ss_sold_date_sk,
        ss.ss_item_sk,
        ss.ss_quantity,
        ss.ss_sales_price,
        ss.ss_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ss.ss_item_sk ORDER BY ss.ss_sold_date_sk DESC) AS rn
    FROM 
        store_sales ss
    WHERE 
        ss.ss_sold_date_sk >= (SELECT MAX(d.d_date_sk) 
                                FROM date_dim d 
                                WHERE d.d_year = 2023)
),
PromotionDetails AS (
    SELECT 
        p.p_promo_id,
        SUM(p.p_cost) AS total_cost,
        COUNT(DISTINCT p.p_item_sk) AS effective_items
    FROM 
        promotion p
    WHERE 
        p.p_start_date_sk < (SELECT MAX(d.d_date_sk) 
                              FROM date_dim d 
                              WHERE d.d_year = 2023)
        AND p.p_end_date_sk >= (SELECT MIN(d.d_date_sk) 
                                 FROM date_dim d 
                                 WHERE d.d_year = 2023)
    GROUP BY 
        p.p_promo_id
),
CustomerReturns AS (
    SELECT 
        CASE 
            WHEN wr_returned_date_sk IS NOT NULL THEN 'Web Return'
            WHEN cr_returned_date_sk IS NOT NULL THEN 'Catalog Return'
            ELSE 'No Return'
        END AS Return_Type,
        COALESCE(wr_return_ship_cost, cr_return_ship_cost, 0) AS total_ship_cost,
        COUNT(*) AS return_count
    FROM 
        web_returns wr
    FULL OUTER JOIN 
        catalog_returns cr ON wr.wr_item_sk = cr.cr_item_sk
    GROUP BY 
        CASE 
            WHEN wr_returned_date_sk IS NOT NULL THEN 'Web Return'
            WHEN cr_returned_date_sk IS NOT NULL THEN 'Catalog Return'
            ELSE 'No Return'
        END
)
SELECT 
    C.c_customer_id,
    SUM(SC.ss_sales_price * SC.ss_quantity) AS total_sales,
    SUM(COALESCE(CR.total_ship_cost, 0)) AS total_return_ship_cost,
    P.promo_name,
    DUM.total_cost,
    DUM.effective_items,
    AVG(SC.ss_sales_price) OVER () AS avg_sales_price
FROM 
    (
        SELECT DISTINCT 
            c.c_customer_id, 
            s.ss_item_sk 
        FROM 
            customer c
        INNER JOIN 
            store_sales s ON c.c_customer_sk = s.ss_customer_sk
    ) C
LEFT JOIN 
    SalesCTE SC ON C.ss_item_sk = SC.ss_item_sk
LEFT JOIN 
    PromotionDetails DUM ON SC.ss_item_sk = DUM.p_promo_id
LEFT JOIN 
    CustomerReturns CR ON CR.Return_Type = 'Web Return' OR CR.Return_Type = 'Catalog Return'
WHERE 
    C.c_customer_id IS NOT NULL
GROUP BY 
    C.c_customer_id, P.promo_name, DUM.total_cost, DUM.effective_items
ORDER BY 
    total_sales DESC;
