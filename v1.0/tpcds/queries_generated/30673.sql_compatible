
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        c.customer_id,
        SUM(ss.net_paid_inc_tax) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY c.customer_id ORDER BY SUM(ss.net_paid_inc_tax) DESC) AS sales_rank
    FROM 
        customer c
    JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.customer_id
    HAVING 
        SUM(ss.net_paid_inc_tax) > 
        (SELECT AVG(total_sales)
         FROM (
            SELECT SUM(ss_inner.net_paid_inc_tax) AS total_sales
            FROM customer c_inner
            JOIN store_sales ss_inner ON c_inner.c_customer_sk = ss_inner.ss_customer_sk
            GROUP BY c_inner.customer_id
         ) AS avg_sales_table)
),
HighValueCustomers AS (
    SELECT 
        customer_id,
        total_sales,
        ROW_NUMBER() OVER (ORDER BY total_sales DESC) AS value_rank
    FROM 
        SalesHierarchy
    WHERE 
        sales_rank = 1
),
TopStores AS (
    SELECT 
        s.s_store_id,
        SUM(ss.net_paid_inc_tax) AS store_sales
    FROM 
        store s
    JOIN 
        store_sales ss ON s.s_store_sk = ss.ss_store_sk
    GROUP BY 
        s.s_store_id
    HAVING 
        SUM(ss.net_paid_inc_tax) > 
        (SELECT AVG(store_sales)
         FROM (
            SELECT SUM(ss_inner.net_paid_inc_tax) AS store_sales
            FROM store s_inner
            JOIN store_sales ss_inner ON s_inner.s_store_sk = ss_inner.ss_store_sk
            GROUP BY s_inner.s_store_id
         ) AS avg_store_sales_table)
)
SELECT 
    hvc.customer_id,
    hvc.total_sales,
    ts.s_store_id,
    ts.store_sales
FROM 
    HighValueCustomers hvc
FULL OUTER JOIN 
    TopStores ts ON hvc.total_sales > 1000 AND ts.store_sales > 50000
WHERE 
    hvc.total_sales IS NOT NULL OR ts.store_sales IS NOT NULL
ORDER BY 
    hvc.total_sales DESC, ts.store_sales DESC;
