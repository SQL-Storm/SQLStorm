
WITH RECURSIVE address_cte AS (
    SELECT ca_address_sk, ca_city, ca_state
    FROM customer_address
    WHERE ca_state IS NOT NULL
    UNION ALL
    SELECT a.ca_address_sk, a.ca_city, a.ca_state
    FROM customer_address a
    JOIN address_cte c ON a.ca_city = c.ca_city AND a.ca_state <> c.ca_state
),
demo_stats AS (
    SELECT 
        cd_gender,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count,
        SUM(cd_dep_count) AS total_dependents,
        AVG(cd_purchase_estimate) AS avg_purchase_estimate
    FROM customer_demographics cd
    LEFT JOIN customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    GROUP BY cd_gender
),
sales_analysis AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_sale_price) AS total_sales,
        COUNT(ws.ws_order_number) AS order_count,
        AVG(ws.ws_net_profit) OVER (PARTITION BY ws.ws_item_sk) AS avg_profit
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk BETWEEN (SELECT MIN(d_date_sk) FROM date_dim) 
                                  AND (SELECT MAX(d_date_sk) FROM date_dim)
    GROUP BY ws.ws_item_sk
)
SELECT
    a.ca_city,
    a.ca_state,
    ds.cd_gender,
    ds.customer_count,
    ds.total_dependents,
    sa.total_sales,
    sa.order_count,
    sa.avg_profit
FROM address_cte a
JOIN demo_stats ds ON ds.customer_count > 10 
LEFT JOIN sales_analysis sa ON sa.total_sales IS NOT NULL
GROUP BY 
    a.ca_city, 
    a.ca_state,
    ds.cd_gender,
    ds.customer_count,
    ds.total_dependents,
    sa.total_sales,
    sa.order_count,
    sa.avg_profit
HAVING COUNT(sa.ws_item_sk) > 5
AND ds.total_dependents IS NOT NULL
AND (ds.avg_purchase_estimate IS NULL OR ds.avg_purchase_estimate > 200)
     OR (a.ca_state IN (SELECT DISTINCT ca_state FROM customer_address WHERE ca_city LIKE 'A%' AND ca_state IS NOT NULL) 
           AND COUNT(ds.customer_count) > 5)
OPTION (RECOMPILE);
