WITH RECURSIVE customer_hierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_addr_sk,
           CAST(c_first_name || ' ' || c_last_name AS varchar) AS full_name,
           1 AS depth
    FROM customer
    WHERE c_current_addr_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_addr_sk,
           CAST(ch.full_name || ' | ' || c.c_first_name || ' ' || c.c_last_name AS varchar) AS full_name,
           ch.depth + 1
    FROM customer_hierarchy ch
    JOIN customer c ON c.c_current_addr_sk = ch.c_current_addr_sk
    WHERE ch.depth < 5
),
sales_data AS (
    SELECT
        ws.ws_item_sk,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        AVG(ws.ws_net_profit) AS avg_profit
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk >= DATEADD(year, -1, cast('2002-10-01' as date))
    GROUP BY ws.ws_item_sk
),
sales_summary AS (
    SELECT
        sd.ws_item_sk,
        sd.total_sales,
        sd.order_count,
        sd.avg_profit,
        DENSE_RANK() OVER (ORDER BY sd.total_sales DESC) AS sales_rank
    FROM sales_data sd
),
customer_with_sales AS (
    SELECT
        ch.full_name,
        ch.c_customer_sk,
        coalesce(ss.total_sales, 0) AS total_sales,
        ss.order_count,
        ss.avg_profit
    FROM customer_hierarchy ch
    LEFT JOIN sales_summary ss ON ch.c_current_addr_sk = ss.ws_item_sk
)
SELECT
    cws.full_name,
    cws.total_sales,
    cws.order_count,
    cws.avg_profit,
    CASE 
        WHEN cws.order_count > 0 THEN ROUND(cws.total_sales / cws.order_count, 2) 
        ELSE NULL 
    END AS avg_sales_per_order,
    CASE 
        WHEN cws.total_sales IS NULL THEN 'No Sales'
        WHEN cws.total_sales > 10000 THEN 'High Value Customer'
        ELSE 'Regular Customer' 
    END AS customer_type
FROM customer_with_sales cws
ORDER BY cws.avg_profit DESC, cws.total_sales DESC;