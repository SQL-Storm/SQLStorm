
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_sold_date_sk, 
        ws_item_sk, 
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_profit) AS total_profit,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_profit) DESC) AS rank
    FROM web_sales
    GROUP BY ws_sold_date_sk, ws_item_sk
),
customer_info AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name,
        cd.cd_gender,
        hd.hd_income_band_sk,
        hd.hd_buy_potential
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN household_demographics hd ON c.c_customer_sk = hd.hd_demo_sk
),
address_info AS (
    SELECT 
        ca.ca_address_sk, 
        ca.ca_city, 
        ca.ca_state,
        (CASE 
            WHEN ca.ca_state IS NULL THEN 'Unknown State' 
            ELSE ca.ca_state 
         END) AS state_display
    FROM customer_address ca
    WHERE ca.ca_city IS NOT NULL
),
most_profitable_items AS (
    SELECT 
        item.i_item_sk,
        item.i_item_desc,
        SUM(store_sales.ss_ext_sales_price) AS total_sales
    FROM store_sales
    JOIN item ON store_sales.ss_item_sk = item.i_item_sk
    WHERE store_sales.ss_sales_price > 0
    GROUP BY item.i_item_sk, item.i_item_desc
    HAVING SUM(store_sales.ss_ext_sales_price) > 1000.00
)
SELECT 
    ci.c_first_name,
    ci.c_last_name,
    ai.ca_city,
    ai.state_display,
    s.total_quantity,
    s.total_profit,
    mpi.i_item_desc,
    mpi.total_sales
FROM customer_info ci
JOIN address_info ai ON ci.c_customer_sk = ai.ca_address_sk
INNER JOIN sales_summary s ON ci.c_customer_sk = s.ws_bill_customer_sk
LEFT JOIN most_profitable_items mpi ON s.ws_item_sk = mpi.i_item_sk
WHERE s.rank <= 5 AND (ci.hd_income_band_sk IS NOT NULL OR ci.cd_gender IS NULL)
ORDER BY s.total_profit DESC
FETCH FIRST 100 ROWS ONLY;
