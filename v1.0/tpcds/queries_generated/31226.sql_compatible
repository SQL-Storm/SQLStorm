
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        ss.customer_sk,
        ss.item_sk,
        ss.store_sk,
        ss.sold_date_sk,
        ss.quantity AS ss_quantity,
        ss.net_profit AS ss_net_profit,
        1 AS level
    FROM store_sales ss
    WHERE ss.sold_date_sk >= (SELECT MAX(d_date_sk) - 30 FROM date_dim)
    
    UNION ALL
    
    SELECT 
        sh.customer_sk,
        sh.item_sk,
        sh.store_sk,
        sh.sold_date_sk,
        sh.quantity,
        sh.net_profit,
        sh.level + 1
    FROM sales_hierarchy sh
    JOIN store_sales ss ON sh.customer_sk = ss.customer_sk AND sh.item_sk = ss.item_sk
    WHERE ss.sold_date_sk < sh.sold_date_sk
),
customer_profiles AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        SUM(ss.net_profit) AS total_profit,
        COUNT(ss.item_sk) AS total_items_sold
    FROM customer c
    JOIN customer_demographics cd ON c.c_customer_sk = cd.cd_demo_sk
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status
),
top_customers AS (
    SELECT 
        cp.c_customer_sk,
        cp.c_first_name,
        cp.c_last_name,
        cp.total_profit,
        cp.total_items_sold,
        RANK() OVER (ORDER BY cp.total_profit DESC) AS profit_rank
    FROM customer_profiles cp
)
SELECT 
    th.c_customer_sk AS customer_sk,
    th.total_profit,
    th.total_items_sold,
    th.c_first_name,
    th.c_last_name,
    CASE 
        WHEN th.total_profit > 1000 THEN 'High Value'
        WHEN th.total_profit BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value_segment,
    (SELECT AVG(total_profit) FROM top_customers WHERE profit_rank <= 10) AS avg_top_customer_profit
FROM top_customers th
WHERE th.profit_rank <= 100
ORDER BY th.total_profit DESC;
