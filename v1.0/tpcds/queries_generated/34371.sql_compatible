
WITH RECURSIVE sales_report AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity_sold,
        SUM(ws_sales_price * ws_quantity) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk) AS row_num
    FROM 
        web_sales 
    WHERE 
        ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        ws_item_sk
),

customer_analysis AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        SUM(COALESCE(sr.sr_return_quantity, 0)) AS total_returns
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status
),

qualified_products AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        total_quantity_sold,
        total_sales,
        ROW_NUMBER() OVER (ORDER BY total_sales DESC) AS rank
    FROM 
        item i
    JOIN 
        sales_report sr ON i.i_item_sk = sr.ws_item_sk
    WHERE 
        sr.total_quantity_sold > 100
)

SELECT 
    ca.c_first_name,
    ca.c_last_name,
    ca.cd_gender,
    qa.i_item_desc,
    qa.rank,
    sr.total_quantity_sold,
    sr.total_sales,
    COALESCE(SUM(ca.total_returns), 0) AS total_returns
FROM 
    customer_analysis ca
JOIN 
    qualified_products qa ON ca.c_customer_sk = (SELECT sr.sr_customer_sk FROM store_returns sr WHERE sr.sr_item_sk = qa.i_item_sk LIMIT 1)
JOIN 
    sales_report sr ON qa.i_item_sk = sr.ws_item_sk
WHERE 
    ca.cd_marital_status = 'M' 
    AND qa.rank <= 10 
GROUP BY 
    ca.c_first_name, ca.c_last_name, ca.cd_gender, qa.i_item_desc, qa.rank, sr.total_quantity_sold, sr.total_sales
ORDER BY 
    sr.total_sales DESC;
