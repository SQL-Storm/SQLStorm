
WITH ranked_sales AS (
    SELECT 
        customer.c_customer_id,
        SUM(web_sales.ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY customer.c_customer_id ORDER BY SUM(web_sales.ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales 
    JOIN 
        customer ON web_sales.ws_bill_customer_sk = customer.c_customer_sk
    GROUP BY 
        customer.c_customer_id
), 
total_returns AS (
    SELECT 
        wr_refunded_customer_sk,
        COUNT(*) AS return_count,
        SUM(wr_return_amt) AS total_return_amt
    FROM 
        web_returns
    GROUP BY 
        wr_refunded_customer_sk
),
filtered_sales AS (
    SELECT 
        rs.c_customer_id,
        rs.total_sales,
        COALESCE(tr.return_count, 0) AS return_count,
        COALESCE(tr.total_return_amt, 0.00) AS total_return_amt,
        CASE 
            WHEN tr.total_return_amt IS NULL THEN 'No Returns' 
            ELSE 'Has Returns' 
        END AS return_status
    FROM 
        ranked_sales rs
    LEFT JOIN 
        total_returns tr ON rs.c_customer_id = tr.wr_refunded_customer_sk
    WHERE 
        rs.sales_rank = 1 
        AND rs.total_sales > (
            SELECT AVG(total_sales) * 0.5 
            FROM ranked_sales
        )
)
SELECT 
    customer.c_first_name,
    customer.c_last_name,
    sales.total_sales,
    sales.return_count,
    sales.total_return_amt,
    (sales.total_sales - sales.total_return_amt) AS net_revenue,
    CASE 
        WHEN (sales.return_count > 0) THEN 'High Risk' 
        ELSE 'Low Risk' 
    END AS customer_risk
FROM 
    filtered_sales sales
JOIN 
    customer ON customer.c_customer_id = sales.c_customer_id
ORDER BY 
    net_revenue DESC
FETCH FIRST 10 ROWS ONLY;
