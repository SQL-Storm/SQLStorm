
WITH RECURSIVE ItemHierarchy AS (
    SELECT i_item_sk, i_item_id, i_product_name, i_brand_id, 1 AS level
    FROM item
    WHERE i_item_sk IS NOT NULL

    UNION ALL

    SELECT i.i_item_sk, i.i_item_id, i.i_product_name, i.i_brand_id, ih.level + 1
    FROM item i
    JOIN ItemHierarchy ih ON i.i_brand_id = ih.i_brand_id
    WHERE ih.level < 5
), 
SalesData AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_sales_price) AS total_sales_price,
        COUNT(ws.ws_order_number) AS total_orders,
        COUNT(DISTINCT ws.ws_ship_customer_sk) AS unique_customers
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk BETWEEN 2400 AND 2450
    GROUP BY ws.ws_item_sk
), 
OverlappingSales AS (
    SELECT 
        cs.cs_item_sk,
        SUM(cs.cs_sales_price) AS total_catalog_sales
    FROM catalog_sales cs
    JOIN SalesData sd ON cs.cs_item_sk = sd.ws_item_sk
    WHERE cs.cs_sold_date_sk BETWEEN 2400 AND 2450
    GROUP BY cs.cs_item_sk
)
SELECT 
    ih.i_item_id, 
    ih.i_product_name,
    ih.level,
    COALESCE(sd.total_sales_price, 0) AS total_sales_price,
    COALESCE(os.total_catalog_sales, 0) AS total_catalog_sales,
    COALESCE(sd.total_sales_price - os.total_catalog_sales, sd.total_sales_price) AS net_sales_difference,
    CASE 
        WHEN sd.unique_customers > 0 THEN sd.total_sales_price / sd.unique_customers
        ELSE 0 
    END AS avg_sales_per_customer
FROM ItemHierarchy ih
LEFT JOIN SalesData sd ON ih.i_item_sk = sd.ws_item_sk
LEFT JOIN OverlappingSales os ON ih.i_item_sk = os.cs_item_sk
WHERE ih.level = 1 
ORDER BY net_sales_difference DESC
LIMIT 100;
