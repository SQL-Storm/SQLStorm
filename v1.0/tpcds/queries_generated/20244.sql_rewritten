WITH RankedSales AS (
    SELECT ws.ws_item_sk,
           ws.ws_order_number,
           ws.ws_sales_price,
           RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS rank_sales,
           SUM(ws.ws_quantity) OVER (PARTITION BY ws.ws_web_site_sk) AS total_quantity_per_site
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2000) - 30 AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2000)
),
HighVolume AS (
    SELECT i.i_item_id,
           i.i_item_desc,
           COALESCE(SUM(ss.ss_quantity), 0) AS store_quantity,
           COALESCE(SUM(cs.cs_quantity), 0) AS catalog_quantity
    FROM item i
    LEFT JOIN store_sales ss ON i.i_item_sk = ss.ss_item_sk
    LEFT JOIN catalog_sales cs ON i.i_item_sk = cs.cs_item_sk
    WHERE i.i_rec_start_date <= cast('2002-10-01' as date) 
      AND (i.i_rec_end_date IS NULL OR i.i_rec_end_date > cast('2002-10-01' as date))
    GROUP BY i.i_item_id, i.i_item_desc
    HAVING COALESCE(SUM(ss.ss_quantity), 0) + COALESCE(SUM(cs.cs_quantity), 0) > 100
),
FilteredSales AS (
    SELECT rhs.ws_item_sk,
           rhs.ws_order_number,
           rhs.ws_sales_price,
           hvi.i_item_desc,
           hvi.store_quantity,
           hvi.catalog_quantity
    FROM RankedSales rhs
    JOIN HighVolume hvi ON rhs.ws_item_sk = hvi.i_item_id
    WHERE rhs.rank_sales = 1
)
SELECT f.ws_item_sk,
       f.ws_order_number,
       f.ws_sales_price,
       f.i_item_desc,
       f.store_quantity,
       f.catalog_quantity,
       CASE 
           WHEN f.store_quantity > f.catalog_quantity THEN 'More Sold in Store'
           WHEN f.store_quantity < f.catalog_quantity THEN 'More Sold in Catalog'
           ELSE 'Equal Sales Volume'
       END AS sale_comparison,
       COALESCEROUND(f.ws_sales_price * 0.05 + f.ws_sales_price, 2) AS adjusted_price,
       COUNT(DISTINCT f.ws_order_number) OVER (PARTITION BY f.i_item_desc) AS unique_order_count
FROM FilteredSales f
ORDER BY f.store_quantity DESC, f.catalog_quantity ASC;