
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws.sold_date_sk,
        ws.item_sk,
        SUM(ws.ws_net_profit) AS total_profit,
        COUNT(ws.order_number) AS total_orders,
        ROW_NUMBER() OVER (PARTITION BY ws.item_sk ORDER BY SUM(ws.ws_net_profit) DESC) AS rank
    FROM web_sales ws
    WHERE ws.sold_date_sk IS NOT NULL
    GROUP BY ws.sold_date_sk, ws.item_sk
), customer_summary AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (ORDER BY cd.cd_purchase_estimate DESC) AS purchase_rank
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), popular_items AS (
    SELECT 
        i.i_item_sk, 
        i.i_item_id, 
        SUM(ws.ws_quantity) AS total_quantity
    FROM item i
    JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    WHERE i.i_rec_start_date <= DATE '2002-10-01' AND (i.i_rec_end_date IS NULL OR i.i_rec_end_date > DATE '2002-10-01')
    GROUP BY i.i_item_sk, i.i_item_id
    HAVING SUM(ws.ws_quantity) > 50
)
SELECT 
    cust.c_first_name,
    cust.c_last_name,
    cust.cd_gender,
    cust.cd_marital_status,
    sales.total_profit,
    sales.total_orders,
    items.i_item_id,
    items.total_quantity,
    CASE 
        WHEN sales.rank <= 5 THEN 'Top Performer'
        ELSE 'Regular Performer'
    END AS performance_category
FROM customer_summary cust
LEFT JOIN sales_summary sales ON cust.c_customer_sk = sales.item_sk
LEFT JOIN popular_items items ON sales.item_sk = items.i_item_sk
WHERE cust.purchase_rank <= 10
ORDER BY sales.total_profit DESC, cust.c_last_name ASC;
