
WITH CustomerSales AS (
    SELECT 
        c.c_customer_id,
        SUM(COALESCE(ws.ws_net_paid_inc_tax, 0) + COALESCE(ss.ss_net_paid_inc_tax, 0) + COALESCE(cs.cs_net_paid_inc_tax, 0)) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS web_order_count,
        COUNT(DISTINCT ss.ss_ticket_number) AS store_order_count
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    LEFT JOIN 
        catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    GROUP BY 
        c.c_customer_id
),
RankedCustomers AS (
    SELECT 
        c.c_customer_id,
        cs.total_spent,
        RANK() OVER (ORDER BY cs.total_spent DESC) AS spending_rank
    FROM 
        CustomerSales cs
    JOIN 
        customer c ON cs.c_customer_id = c.c_customer_id
)
SELECT 
    rc.c_customer_id,
    rc.total_spent,
    CASE 
        WHEN rc.spending_rank <= 10 THEN 'Top 10'
        WHEN rc.spending_rank <= 100 THEN 'Top 100'
        ELSE 'Others'
    END AS spending_category,
    COALESCE(return_info.r_reason_desc, 'No reason provided') AS return_reason
FROM 
    RankedCustomers rc
LEFT JOIN 
    (SELECT sr.sr_customer_sk, r.r_reason_desc 
     FROM store_returns sr 
     JOIN reason r ON sr.sr_reason_sk = r.r_reason_sk 
     WHERE sr.sr_return_quantity > 0) AS return_info 
ON rc.c_customer_id = return_info.sr_customer_sk
WHERE 
    rc.total_spent IS NOT NULL
ORDER BY 
    rc.total_spent DESC;
