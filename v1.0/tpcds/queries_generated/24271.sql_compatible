
WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        ws.ws_net_profit,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS price_rank,
        COUNT(*) OVER (PARTITION BY ws.ws_item_sk) AS total_sales_count
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk >= (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2023)
        AND ws.ws_sold_date_sk <= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
),
HighProfitSales AS (
    SELECT 
        rs.ws_item_sk, 
        rs.ws_order_number,
        rs.ws_net_profit
    FROM 
        RankedSales rs 
    WHERE 
        rs.price_rank = 1 AND rs.ws_net_profit > 1000
),
CustomerDemographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status,
        COUNT(DISTINCT cs.cs_order_number) AS orders_count
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        store_sales cs ON c.c_customer_sk = cs.ss_customer_sk
    WHERE 
        c.c_birth_year BETWEEN 1950 AND 1970
    GROUP BY 
        cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status, cd.cd_education_status
),
PurchaseAggregates AS (
    SELECT 
        cd.cd_gender,
        cd.cd_marital_status,
        SUM(CASE 
                WHEN hd.hd_income_band_sk IS NOT NULL THEN 1 
                ELSE 0 
            END) AS income_band_count,
        SUM(cd.orders_count) AS total_orders,
        AVG(ws.ws_sales_price) AS average_sale_price
    FROM 
        CustomerDemographics cd
    LEFT JOIN 
        household_demographics hd ON cd.cd_demo_sk = hd.hd_demo_sk
    LEFT JOIN 
        web_sales ws ON cd.cd_demo_sk = ws.ws_bill_cdemo_sk
    GROUP BY 
        cd.cd_gender, cd.cd_marital_status
)
SELECT 
    p.cd_gender,
    p.cd_marital_status,
    COALESCE(p.income_band_count, 0) AS income_band_count,
    COALESCE(p.total_orders, 0) AS total_orders,
    p.average_sale_price,
    CASE 
        WHEN p.total_orders > 100 THEN 'High Volume Customer'
        WHEN p.average_sale_price > 50 THEN 'Premium Products Customer'
        ELSE 'General Customer'
    END AS customer_type
FROM 
    PurchaseAggregates p
LEFT JOIN 
    HighProfitSales hps ON p.cd_gender = hps.ws_item_sk
WHERE 
    (p.average_sale_price IS NOT NULL AND p.total_orders > 0)
    OR (p.cd_marital_status IS NULL AND p.cd_gender IS NOT NULL)
ORDER BY 
    p.cd_gender, p.cd_marital_status
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
