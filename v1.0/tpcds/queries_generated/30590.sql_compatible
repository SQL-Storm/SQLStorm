
WITH RECURSIVE customer_returns AS (
    SELECT sr_customer_sk, 
           SUM(sr_return_quantity) AS total_returns,
           SUM(sr_return_amt_inc_tax) AS total_return_amt
    FROM store_returns
    GROUP BY sr_customer_sk
),
sales_summary AS (
    SELECT ws_bill_customer_sk,
           SUM(ws_quantity) AS total_quantity_sold,
           SUM(ws_net_paid_inc_tax) AS total_sales_amt
    FROM web_sales
    GROUP BY ws_bill_customer_sk
),
promotions AS (
    SELECT p.p_promo_sk, 
           p.p_promo_name,
           CASE 
               WHEN SUM(ws_ext_discount_amt) > 0 THEN 'Active'
               ELSE 'Inactive'
           END AS promo_status
    FROM promotion p
    LEFT JOIN web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    GROUP BY p.p_promo_sk, p.p_promo_name
),
customer_analysis AS (
    SELECT c.c_first_name, 
           c.c_last_name, 
           cd.cd_gender,
           cd.cd_marital_status,
           COALESCE(cr.total_returns, 0) AS total_returns,
           COALESCE(cr.total_return_amt, 0) AS total_return_amt,
           COALESCE(ss.total_quantity_sold, 0) AS total_quantity_sold,
           COALESCE(ss.total_sales_amt, 0) AS total_sales_amt,
           ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY COALESCE(ss.total_sales_amt, 0) DESC) AS sales_rank
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN customer_returns cr ON c.c_customer_sk = cr.sr_customer_sk
    LEFT JOIN sales_summary ss ON c.c_customer_sk = ss.ws_bill_customer_sk
)
SELECT ca.ca_city, 
       COUNT(DISTINCT ca.ca_address_sk) AS total_addresses,
       SUM(ca.ca_gmt_offset) AS total_gmt_offset,
       STRING_AGG(DISTINCT p.promo_name || ' (' || p.promo_status || ')', ', ') AS active_promotions
FROM customer_analysis ca
JOIN customer_address ca_address ON ca.ca_address_sk = ca_address.ca_address_sk
JOIN promotions p ON ca.total_sales_amt > 0 
GROUP BY ca.ca_city
HAVING COUNT(DISTINCT ca.ca_address_sk) > 5
ORDER BY total_addresses DESC;
