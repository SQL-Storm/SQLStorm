WITH RECURSIVE sales_data AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales_price,
        AVG(ws_net_profit) AS avg_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),
customer_data AS (
    SELECT 
        c_customer_sk,
        c_first_name,
        c_last_name,
        cd_gender,
        cd_marital_status,
        cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd_gender ORDER BY cd_purchase_estimate DESC) AS gender_rank
    FROM 
        customer
    JOIN 
        customer_demographics ON c_current_cdemo_sk = cd_demo_sk
    WHERE 
        cd_purchase_estimate IS NOT NULL
),
store_info AS (
    SELECT 
        s_store_sk,
        COUNT(ss_ticket_number) AS total_sales_count,
        SUM(ss_net_profit) AS total_net_profit,
        SUM(ss_ext_discount_amt) AS total_discount,
        MAX(ss_sold_date_sk) AS latest_sales_date,
        MIN(ss_sold_date_sk) AS earliest_sales_date
    FROM 
        store_sales
    GROUP BY 
        s_store_sk
),
inventory_stats AS (
    SELECT 
        inv_item_sk,
        AVG(inv_quantity_on_hand) AS avg_inventory_level,
        COUNT(inv_warehouse_sk) AS warehouse_count
    FROM 
        inventory
    GROUP BY 
        inv_item_sk
)
SELECT 
    c.c_first_name,
    c.c_last_name,
    COALESCE(sd.total_quantity, 0) AS total_quantity_sold,
    COALESCE(sd.total_sales_price, 0) AS total_sales_value,
    COALESCE(ci.avg_inventory_level, 0) AS avg_inventory,
    COALESCE(si.total_sales_count, 0) AS total_sales_transactions,
    COALESCE(si.latest_sales_date, '2099-12-31') AS last_sale,
    (CASE 
        WHEN COALESCE(sd.total_sales_price, 0) > 10000 THEN 'High Roller'
        WHEN COALESCE(sd.total_sales_price, 0) BETWEEN 5000 AND 10000 THEN 'Mid Tier'
        ELSE 'Low Tier'
    END) AS customer_tier,
    ROW_NUMBER() OVER(PARTITION BY c.cd_gender ORDER BY c.cd_purchase_estimate DESC) AS gender_position
FROM 
    customer_data c
LEFT JOIN 
    sales_data sd ON sd.ws_item_sk = c.c_customer_sk  
LEFT JOIN 
    inventory_stats ci ON ci.inv_item_sk = c.c_customer_sk
LEFT JOIN 
    store_info si ON si.s_store_sk = c.c_current_addr_sk
WHERE 
    c.gender_rank <= 3 AND 
    (c.cd_marital_status IS NOT NULL OR c.cd_purchase_estimate > 100) 
ORDER BY 
    customer_tier DESC, 
    c.c_last_name ASC;