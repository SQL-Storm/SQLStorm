
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales,
        COUNT(ws_order_number) AS order_count
    FROM web_sales
    GROUP BY ws_sold_date_sk, ws_item_sk
    HAVING SUM(ws_sales_price) > 1000

    UNION ALL

    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        total_sales + ws_sales_price,
        order_count + 1
    FROM SalesCTE
    JOIN web_sales ON SalesCTE.ws_item_sk = web_sales.ws_item_sk 
    WHERE SalesCTE.ws_sold_date_sk < web_sales.ws_sold_date_sk
),
DateSales AS (
    SELECT
        d.d_date,
        COALESCE(SUM(s.total_sales), 0) AS total_sales,
        COALESCE(SUM(s.order_count), 0) AS total_orders
    FROM date_dim d
    LEFT JOIN SalesCTE s ON d.d_date_sk = s.ws_sold_date_sk
    GROUP BY d.d_date
),
StoreSales AS (
    SELECT 
        s.s_store_name,
        SUM(ws.ws_sales_price) AS store_total_sales,
        COUNT(ws.ws_order_number) AS store_order_count
    FROM store s
    JOIN web_sales ws ON s.s_store_sk = ws.ws_store_sk
    GROUP BY s.s_store_name
),
CustomerDemographics AS (
    SELECT 
        cd.cd_gender,
        AVG(c.c_birth_year) AS avg_birth_year,
        SUM(hd.hd_dep_count) AS total_dependents,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
    GROUP BY cd.cd_gender
)
SELECT
    ds.d_date,
    ds.total_sales,
    ds.total_orders,
    ss.s_store_name,
    ss.store_total_sales,
    ss.store_order_count,
    cd.cd_gender,
    cd.avg_birth_year,
    cd.total_dependents,
    cd.customer_count
FROM DateSales ds
FULL OUTER JOIN StoreSales ss ON ds.d_date = DATE '2002-10-01'
LEFT JOIN CustomerDemographics cd ON cd.customer_count > 0
WHERE ds.total_sales IS NOT NULL OR ss.store_total_sales IS NOT NULL
ORDER BY ds.d_date, ss.s_store_name, cd.cd_gender;
