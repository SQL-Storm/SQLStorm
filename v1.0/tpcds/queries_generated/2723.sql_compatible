
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        ws.ws_quantity,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.ws_ext_sales_price DESC) AS rank_sales
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
),
CustomerDetails AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        SUM(COALESCE(ss.ss_net_profit, 0)) AS total_net_profit
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate
),
ReturnsSummary AS (
    SELECT 
        sr_customer_sk,
        COUNT(DISTINCT sr_ticket_number) AS return_count,
        SUM(sr_return_amt) AS total_return_amount
    FROM 
        store_returns
    GROUP BY 
        sr_customer_sk
),
FinalReport AS (
    SELECT 
        cus.c_customer_sk,
        cus.c_first_name,
        cus.c_last_name,
        cus.cd_gender,
        cus.cd_marital_status,
        cus.cd_purchase_estimate,
        COALESCE(ret.return_count, 0) AS return_count,
        COALESCE(ret.total_return_amount, 0) AS total_return_amount,
        SUM(sales.ws_sales_price * sales.ws_quantity) AS total_sales
    FROM 
        CustomerDetails cus
    LEFT JOIN 
        ReturnsSummary ret ON cus.c_customer_sk = ret.sr_customer_sk
    LEFT JOIN 
        web_sales sales ON cus.c_customer_sk = sales.ws_bill_customer_sk
    GROUP BY 
        cus.c_customer_sk, cus.c_first_name, cus.c_last_name, cus.cd_gender, 
        cus.cd_marital_status, cus.cd_purchase_estimate
    HAVING 
        SUM(sales.ws_sales_price * sales.ws_quantity) > 1000
)
SELECT 
    fr.c_customer_sk,
    fr.c_first_name,
    fr.c_last_name,
    fr.cd_gender,
    fr.cd_marital_status,
    fr.cd_purchase_estimate,
    fr.return_count,
    fr.total_return_amount,
    RANK() OVER (ORDER BY fr.total_sales DESC) AS sales_rank
FROM 
    FinalReport fr
ORDER BY 
    fr.total_sales DESC
FETCH FIRST 50 ROWS ONLY;
