
WITH RECURSIVE customer_sales AS (
    SELECT c.c_customer_sk, c.c_customer_id, 
           SUM(ws.ws_net_paid) AS total_sales, 
           COUNT(ws.ws_order_number) AS order_count, 
           ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ws.ws_net_paid) DESC) AS sales_rank
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_customer_id
),
high_value_customers AS (
    SELECT * 
    FROM customer_sales 
    WHERE total_sales > (
        SELECT AVG(total_sales) 
        FROM customer_sales
    )
),
sales_by_state AS (
    SELECT ca.ca_state, 
           SUM(ws.ws_net_paid) AS state_sales,
           COUNT(DISTINCT ws.ws_order_number) AS state_order_count
    FROM customer c
    JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY ca.ca_state
),
risky_states AS (
    SELECT DISTINCT ca.ca_state 
    FROM customer_address ca
    JOIN store s ON s.s_state = ca.ca_state
    WHERE s.s_store_id LIKE 'S%' AND s.s_number_employees < 5
),
final_result AS (
    SELECT hvc.c_customer_id,
           hvc.total_sales,
           b.state_sales,
           COALESCE(b.state_order_count, 0) AS state_order_count,
           CASE 
               WHEN b.state_sales IS NULL THEN 'No Sales'
               WHEN b.state_sales < 1000 THEN 'Low Sales'
               ELSE 'High Sales'
           END AS sales_category
    FROM high_value_customers hvc
    LEFT JOIN sales_by_state b ON b.ca_state = (
        SELECT ca.ca_state 
        FROM customer_address ca 
        WHERE ca.ca_address_sk = (
            SELECT c.c_current_addr_sk FROM customer c WHERE c.c_customer_sk = hvc.c_customer_sk
            LIMIT 1
        )
        LIMIT 1
    )
    WHERE hvc.sales_rank <= 10
)
SELECT f.c_customer_id, 
       f.total_sales, 
       f.state_sales, 
       f.state_order_count, 
       f.sales_category,
       CASE 
           WHEN f.state_sales IS NOT NULL THEN
               (SELECT COUNT(*) FROM risky_states rs WHERE rs.ca_state = (
                   SELECT ca.ca_state 
                   FROM customer_address ca 
                   WHERE ca.ca_address_sk = (
                       SELECT c.c_current_addr_sk FROM customer c WHERE c.c_customer_sk = f.c_customer_sk
                       LIMIT 1
                   )
                   LIMIT 1
               ))
           ELSE NULL 
       END AS risky_state_count
FROM final_result f
ORDER BY f.total_sales DESC
FETCH FIRST 20 ROWS ONLY;
