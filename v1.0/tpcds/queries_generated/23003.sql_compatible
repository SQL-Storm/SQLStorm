
WITH RankedReturns AS (
    SELECT 
        cr_returning_customer_sk, 
        cr_item_sk, 
        cr_return_quantity, 
        cr_return_amount,
        ROW_NUMBER() OVER (PARTITION BY cr_returning_customer_sk ORDER BY cr_return_amount DESC) AS rn
    FROM 
        catalog_returns 
    WHERE 
        cr_return_quantity > 0
),
TopReturns AS (
    SELECT 
        r.cr_returning_customer_sk,
        r.cr_item_sk,
        r.cr_return_quantity,
        r.cr_return_amount
    FROM 
        RankedReturns r
    WHERE 
        r.rn = 1
),
CustomerStats AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        SUM(ws.ws_net_profit) AS total_profit,
        COUNT(DISTINCT tr.cr_item_sk) AS unique_items_returned
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_ship_customer_sk
    LEFT JOIN 
        TopReturns tr ON c.c_customer_sk = tr.cr_returning_customer_sk
    GROUP BY 
        c.c_customer_id, cd.cd_gender
),
IncomeBands AS (
    SELECT 
        cd.cd_demo_sk, 
        ib.ib_income_band_sk,
        CASE 
            WHEN ib.ib_lower_bound < 20000 THEN 'Low Income'
            WHEN ib.ib_upper_bound BETWEEN 20000 AND 50000 THEN 'Middle Income'
            ELSE 'High Income'
        END AS income_band
    FROM 
        customer_demographics cd
    LEFT JOIN 
        household_demographics hd ON cd.cd_demo_sk = hd.hd_demo_sk
    LEFT JOIN 
        income_band ib ON hd.hd_income_band_sk = ib.ib_income_band_sk
),
FinalStats AS (
    SELECT 
        cs.c_customer_id,
        cs.cd_gender,
        cs.total_profit,
        cs.unique_items_returned,
        ib.income_band
    FROM 
        CustomerStats cs
    LEFT JOIN 
        IncomeBands ib ON cs.c_customer_id = ib.cd_demo_sk
)
SELECT 
    f.c_customer_id, 
    f.cd_gender,
    f.total_profit,
    f.unique_items_returned,
    COALESCE(f.income_band, 'Unknown') AS income_band_category
FROM 
    FinalStats f
WHERE 
    f.total_profit > (
        SELECT AVG(total_profit) FROM CustomerStats
    )
ORDER BY 
    f.total_profit DESC;
