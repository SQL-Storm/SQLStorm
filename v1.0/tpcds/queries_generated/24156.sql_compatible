
WITH sales_data AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        AVG(ws.ws_net_profit) AS avg_net_profit
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN (SELECT MAX(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023) - 30 AND 
                                    (SELECT MAX(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023)
    GROUP BY 
        ws.ws_item_sk
),
return_data AS (
    SELECT 
        sr_item_sk,
        COUNT(sr_ticket_number) AS total_returns,
        SUM(sr_return_amt) AS total_return_amt
    FROM 
        store_returns
    WHERE 
        sr_return_quantity > 0 
    GROUP BY 
        sr_item_sk
),
combined_data AS (
    SELECT 
        sd.ws_item_sk,
        sd.total_sales,
        sd.total_orders,
        sd.avg_net_profit,
        COALESCE(rd.total_returns, 0) AS total_returns,
        COALESCE(rd.total_return_amt, 0) AS total_return_amt,
        CASE 
            WHEN sd.total_sales IS NOT NULL AND rd.total_return_amt IS NOT NULL THEN 
                sd.total_sales - rd.total_return_amt
            ELSE 
                NULL 
        END AS net_revenue
    FROM 
        sales_data sd
    LEFT JOIN 
        return_data rd ON sd.ws_item_sk = rd.sr_item_sk
)
SELECT 
    c.c_customer_id,
    c.c_first_name,
    c.c_last_name,
    COUNT(DISTINCT wd.wp_web_page_id) AS unique_web_pages,
    SUM(cd.total_sales) AS total_sales,
    AVG(cd.avg_net_profit) AS avg_profit,
    MAX(cd.net_revenue) AS max_revenue
FROM 
    customer c
JOIN 
    customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
LEFT JOIN 
    web_page wd ON c.c_customer_sk = wd.wp_customer_sk
JOIN 
    combined_data cd ON cd.ws_item_sk IN (SELECT DISTINCT ws_item_sk FROM web_sales WHERE ws_bill_customer_sk = c.c_customer_sk)
WHERE 
    cd.total_orders > 10
AND 
    cd.avg_net_profit IS NOT NULL
GROUP BY 
    c.c_customer_id, c.c_first_name, c.c_last_name
HAVING 
    SUM(cd.total_sales) > (SELECT AVG(sd.total_sales) FROM combined_data sd WHERE sd.total_returns < 3)
ORDER BY 
    max_revenue DESC
FETCH FIRST 10 ROWS ONLY;
