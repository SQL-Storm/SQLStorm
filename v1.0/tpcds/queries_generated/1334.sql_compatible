
WITH RankedSales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales,
        RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),
HighValueCustomers AS (
    SELECT 
        c_customer_sk,
        c_first_name,
        c_last_name,
        cd_income_band_sk,
        ROW_NUMBER() OVER (PARTITION BY cd_income_band_sk ORDER BY cd_purchase_estimate DESC) AS income_rank
    FROM 
        customer 
    JOIN 
        customer_demographics ON c_current_cdemo_sk = cd_demo_sk
    WHERE 
        cd_purchase_estimate > 1000
),
DailyReturns AS (
    SELECT 
        d_date,
        COUNT(sr_ticket_number) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS total_return_amt
    FROM 
        store_returns
    JOIN 
        date_dim ON sr_returned_date_sk = d_date_sk
    GROUP BY 
        d_date
),
WarehouseInventory AS (
    SELECT 
        inv_warehouse_sk,
        SUM(inv_quantity_on_hand) AS total_inventory
    FROM 
        inventory
    GROUP BY 
        inv_warehouse_sk
)
SELECT 
    w.warehouse_id,
    w.warehouse_name,
    COALESCE(SUM(DISTINCT rv.total_sales), 0) AS total_web_sales,
    COALESCE(SUM(rv.total_sales * CASE WHEN (r.total_returns IS NULL) THEN 1 ELSE 0 END), 0) AS sales_with_no_returns,
    wi.total_inventory,
    hvc.c_first_name,
    hvc.c_last_name
FROM 
    warehouse w
LEFT JOIN 
    RankedSales rv ON w.warehouse_sk = rv.ws_item_sk
LEFT JOIN 
    DailyReturns r ON r.d_date BETWEEN '2023-01-01' AND '2023-10-31'
LEFT JOIN 
    WarehouseInventory wi ON wi.inv_warehouse_sk = w.warehouse_sk
LEFT JOIN 
    HighValueCustomers hvc ON hvc.c_customer_sk = rv.ws_item_sk
GROUP BY 
    w.warehouse_id, w.warehouse_name, wi.total_inventory, hvc.c_first_name, hvc.c_last_name
HAVING 
    wi.total_inventory > 1000 AND COUNT(rv.ws_item_sk) > 3
ORDER BY 
    total_web_sales DESC, w.warehouse_name;
