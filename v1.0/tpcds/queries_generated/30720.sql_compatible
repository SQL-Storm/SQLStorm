
WITH RECURSIVE sales_data AS (
    SELECT 
        ws.web_site_sk, 
        ws.ws_order_number, 
        ws.ws_ext_sales_price,
        DENSE_RANK() OVER (PARTITION BY ws.ws_order_number ORDER BY ws.ws_ext_sales_price DESC) AS price_rank
    FROM web_sales ws
    WHERE ws.ws_ext_sales_price IS NOT NULL
),
top_sales AS (
    SELECT 
        web_site_sk, 
        ws_order_number, 
        ws_ext_sales_price
    FROM sales_data
    WHERE price_rank <= 5
),
customer_orders AS (
    SELECT 
        c.c_customer_id,
        COUNT(DISTINCT s.ss_ticket_number) AS total_tickets,
        SUM(s.ss_net_profit) AS total_profit
    FROM customer c
    LEFT JOIN store_sales s ON c.c_customer_sk = s.ss_customer_sk
    GROUP BY c.c_customer_id
),
return_stats AS (
    SELECT 
        sr_returning_customer_sk,
        COUNT(*) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS total_return_amount
    FROM store_returns
    GROUP BY sr_returning_customer_sk
)
SELECT 
    c.c_customer_id,
    COALESCE(so.total_tickets, 0) AS total_tickets,
    COALESCE(so.total_profit, 0) AS total_profit,
    COALESCE(rs.total_returns, 0) AS total_returns,
    COALESCE(rs.total_return_amount, 0) AS total_return_amount,
    CASE 
        WHEN COALESCE(rs.total_returns, 0) > 0 THEN 'Has Returns' 
        ELSE 'No Returns' 
    END AS return_status
FROM customer c
LEFT JOIN customer_orders so ON c.c_customer_id = so.c_customer_id
LEFT JOIN return_stats rs ON c.c_customer_sk = rs.sr_returning_customer_sk
WHERE c.c_birth_year < 1980
ORDER BY total_profit DESC;
