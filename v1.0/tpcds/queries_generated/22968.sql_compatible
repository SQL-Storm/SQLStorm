
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_sales_price) DESC) AS sales_rank
    FROM web_sales ws
    JOIN item i ON ws.ws_item_sk = i.i_item_sk
    WHERE i.i_current_price IS NOT NULL
    GROUP BY ws.ws_item_sk
    HAVING SUM(ws.ws_sales_price) > 10000
),
top_items AS (
    SELECT 
        item.sales_rank,
        item.total_quantity,
        item.total_sales,
        i.i_item_desc
    FROM sales_summary item
    JOIN item i ON item.ws_item_sk = i.i_item_sk
    WHERE item.sales_rank <= 10
),
customer_info AS (
    SELECT 
        c.c_customer_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        COALESCE(hd.hd_income_band_sk, -1) AS income_band,
        COUNT(DISTINCT c.c_customer_id) OVER (PARTITION BY cd.cd_gender) AS gender_count
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
)
SELECT 
    ci.c_customer_sk,
    ci.cd_gender,
    ci.cd_marital_status,
    CASE 
        WHEN ci.income_band IS NULL THEN 'Unknown'
        WHEN ci.income_band = -1 THEN 'No Band'
        ELSE CAST(ci.income_band AS VARCHAR)
    END AS income_band,
    ti.i_item_desc,
    ti.total_sales
FROM customer_info ci
INNER JOIN top_items ti ON ci.c_customer_sk IN (
    SELECT ws.ws_bill_customer_sk FROM web_sales ws WHERE ws.ws_item_sk = ti.ws_item_sk
)
ORDER BY ti.total_sales DESC, ci.cd_gender, ci.cd_marital_status;
