
WITH RankedReturns AS (
    SELECT
        sr_item_sk,
        sr_return_quantity,
        sr_return_amt,
        sr_returned_date_sk,
        ROW_NUMBER() OVER (PARTITION BY sr_item_sk ORDER BY sr_returned_date_sk DESC) AS rn
    FROM store_returns
    WHERE sr_returned_date_sk IS NOT NULL
),
HighValueCustomers AS (
    SELECT 
        c.c_customer_sk,
        SUM(COALESCE(ws.net_paid, 0)) AS total_spent
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk
    HAVING SUM(COALESCE(ws.net_paid, 0)) > (
        SELECT AVG(total_spent) 
        FROM (
            SELECT SUM(ws.net_paid) AS total_spent 
            FROM web_sales ws 
            GROUP BY ws.bill_customer_sk
        ) AS sub
    )
),
ItemStats AS (
    SELECT
        i.i_item_sk, 
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_quantity) AS total_quantity,
        AVG(ws.ws_sales_price) AS avg_price,
        CASE 
            WHEN COUNT(DISTINCT ws.ws_order_number) > 50 THEN 'HIGH'
            WHEN COUNT(DISTINCT ws.ws_order_number) BETWEEN 20 AND 50 THEN 'MEDIUM'
            ELSE 'LOW' 
        END AS order_category
    FROM item i
    LEFT JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY i.i_item_sk
)
SELECT 
    c.c_customer_id,
    COALESCE(rr.sr_return_quantity, 0) AS last_return_quantity,
    COALESCE(rr.sr_return_amt, 0) AS last_return_amount,
    is.i_item_sk,
    is.order_category,
    is.total_orders,
    is.total_quantity,
    fanout.c_customer_sk AS high_value_customer_sk
FROM customer c
LEFT JOIN RankedReturns rr ON c.c_customer_sk = rr.sr_returning_customer_sk AND rr.rn = 1
JOIN ItemStats is ON is.total_orders > 0
LEFT JOIN HighValueCustomers fanout ON c.c_customer_sk = fanout.c_customer_sk
WHERE c.c_preferred_cust_flag = 'Y' AND
      (rr.sr_return_quantity IS NOT NULL OR c.c_birth_month = 12)
GROUP BY 
    c.c_customer_id,
    rr.sr_return_quantity,
    rr.sr_return_amt,
    is.i_item_sk,
    is.order_category,
    is.total_orders,
    is.total_quantity,
    fanout.c_customer_sk
ORDER BY last_return_amount DESC NULLS LAST;
