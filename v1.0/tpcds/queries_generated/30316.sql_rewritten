WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        s_store_sk,
        s_store_name,
        ss_item_sk,
        SUM(ss_quantity) AS total_sales,
        SUM(ss_net_paid_inc_tax) AS total_revenue
    FROM 
        store_sales 
    JOIN 
        store ON store_sales.ss_store_sk = store.s_store_sk
    WHERE 
        ss_sold_date_sk BETWEEN (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2001) AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2001)
    GROUP BY 
        s_store_sk, s_store_name, ss_item_sk
    UNION ALL
    SELECT 
        s_store_sk,
        s_store_name,
        ss_item_sk,
        total_sales,
        total_revenue * 0.90 
    FROM 
        SalesHierarchy 
    WHERE 
        total_sales > 100 
),
RecentReturns AS (
    SELECT 
        wr_item_sk,
        SUM(wr_return_quantity) AS total_returns,
        SUM(wr_return_amt_inc_tax) AS total_returned
    FROM 
        web_returns 
    WHERE 
        wr_returned_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2001)
    GROUP BY 
        wr_item_sk
),
RankedSales AS (
    SELECT 
        sh.s_store_name,
        sh.ss_item_sk,
        sh.total_sales,
        sh.total_revenue,
        COALESCE(rr.total_returns, 0) AS total_returns,
        RANK() OVER (PARTITION BY sh.s_store_name ORDER BY sh.total_revenue DESC) AS revenue_rank
    FROM 
        SalesHierarchy sh
    LEFT JOIN 
        RecentReturns rr ON sh.ss_item_sk = rr.wr_item_sk
    WHERE 
        sh.total_revenue > 0
)
SELECT 
    store_name,
    ss_item_sk,
    total_sales,
    total_revenue,
    total_returns,
    CASE 
        WHEN total_revenue > 1000 THEN 'High Revenue'
        WHEN total_revenue BETWEEN 500 AND 1000 THEN 'Medium Revenue'
        ELSE 'Low Revenue'
    END AS revenue_category
FROM 
    RankedSales
WHERE 
    revenue_rank <= 10
ORDER BY 
    store_name, total_revenue DESC;