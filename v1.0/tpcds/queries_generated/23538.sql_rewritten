WITH RECURSIVE income_summary AS (
    SELECT
        hd_income_band_sk,
        MIN(ib_lower_bound) AS min_income,
        MAX(ib_upper_bound) AS max_income,
        COUNT(DISTINCT c_customer_sk) AS customer_count
    FROM household_demographics hd
    JOIN income_band ib ON hd.hd_income_band_sk = ib.ib_income_band_sk
    GROUP BY hd_income_band_sk
),
customer_spending AS (
    SELECT
        c.c_customer_sk,
        COALESCE(SUM(ws_ext_sales_price), 0) AS total_web_sales,
        COALESCE(SUM(cs_ext_sales_price), 0) AS total_catalog_sales,
        COALESCE(SUM(ss_ext_sales_price), 0) AS total_store_sales
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY c.c_customer_sk
),
total_sales AS (
    SELECT
        cs.c_customer_sk,
        (cs.total_web_sales + cs.total_catalog_sales + cs.total_store_sales) AS grand_total
    FROM customer_spending cs
),
ranked_customers AS (
    SELECT
        cs.c_customer_sk,
        cs.grand_total,
        RANK() OVER (ORDER BY cs.grand_total DESC) AS sales_rank
    FROM total_sales cs
),
customer_ranks AS (
    SELECT 
        rc.c_customer_sk,
        rc.grand_total,
        rc.sales_rank,
        CASE 
            WHEN rc.sales_rank <= 10 THEN 'Top 10'
            WHEN rc.sales_rank > 10 AND rc.sales_rank <= 100 THEN 'Top 100'
            ELSE 'Others'
        END AS customer_category
    FROM ranked_customers rc
)
SELECT 
    cat.customer_category,
    SUM(is.customer_count) AS total_customers,
    AVG(cs.grand_total) AS average_spending
FROM customer_ranks cs
JOIN income_summary is ON cs.sales_rank = (SELECT MAX(sales_rank) FROM customer_ranks)  
LEFT JOIN income_band ib ON is.hd_income_band_sk = ib.ib_income_band_sk
WHERE cat.customer_category IS NOT NULL
GROUP BY cat.customer_category
HAVING average_spending IS NOT NULL
ORDER BY total_customers DESC
FETCH FIRST 5 ROWS ONLY;