
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        s_store_sk, 
        s_store_name, 
        NULL AS parent_store_sk,
        s_sales AS total_sales,
        0 AS level
    FROM store
    UNION ALL
    SELECT 
        ss_store_sk,
        CONCAT('Child of ', sh.s_store_name),
        sh.s_store_sk,
        ss_ext_sales_price AS total_sales,
        sh.level + 1
    FROM store_sales 
    INNER JOIN sales_hierarchy sh ON store_sales.ss_store_sk = sh.s_store_sk
    WHERE store_sales.ss_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = EXTRACT(YEAR FROM CURRENT_DATE))
), 
sales_performance AS (
    SELECT 
        s_store_sk, 
        s_store_name, 
        SUM(ss_ext_sales_price) AS total_sales,
        COUNT(ss_ticket_number) AS total_transactions
    FROM store_sales
    JOIN store ON store_sales.ss_store_sk = store.s_store_sk
    WHERE ss_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim) 
    GROUP BY s_store_sk, s_store_name
),
demographic_sales AS (
    SELECT 
        cd_demo_sk, 
        SUM(ws_ext_sales_price) AS online_sales,
        SUM(cs_ext_sales_price) AS catalog_sales,
        SUM(ss_ext_sales_price) AS store_sales
    FROM customer c
    LEFT OUTER JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT OUTER JOIN catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    LEFT OUTER JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY cd_demo_sk
)
SELECT
    ds.cd_demo_sk,
    ds.online_sales,
    ds.catalog_sales,
    ds.store_sales,
    COALESCE(ds.online_sales, 0) + COALESCE(ds.catalog_sales, 0) + COALESCE(ds.store_sales, 0) AS total_sales,
    DENSE_RANK() OVER (ORDER BY COALESCE(ds.online_sales, 0) + COALESCE(ds.catalog_sales, 0) + COALESCE(ds.store_sales, 0) DESC) AS sales_rank
FROM demographic_sales ds
JOIN sales_performance sp ON ds.cd_demo_sk = sp.s_store_sk
WHERE (ds.online_sales IS NOT NULL OR ds.catalog_sales IS NOT NULL OR ds.store_sales IS NOT NULL)
ORDER BY total_sales DESC
LIMIT 10
