
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_item_sk, 
        ws_order_number, 
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_paid) AS total_net_paid,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_paid) DESC) AS rank
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk, 
        ws_order_number
),
top_items AS (
    SELECT 
        ws_item_sk,
        total_quantity,
        total_net_paid
    FROM 
        sales_summary
    WHERE 
        rank <= 10
),
item_details AS (
    SELECT 
        i.i_item_id,
        i.i_product_name,
        i.i_current_price,
        item_summary.total_quantity,
        item_summary.total_net_paid,
        CASE 
            WHEN item_summary.total_net_paid > 1000 
            THEN 'High Value'
            WHEN item_summary.total_net_paid BETWEEN 500 AND 1000 
            THEN 'Medium Value'
            ELSE 'Low Value' 
        END AS value_category
    FROM 
        top_items AS item_summary
    JOIN 
        item AS i ON item_summary.ws_item_sk = i.i_item_sk
),
customer_sales AS (
    SELECT 
        c.c_customer_id,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_net_paid_inc_ship_tax) AS total_spent
    FROM 
        web_sales AS ws 
    JOIN 
        customer AS c ON ws.ws_bill_customer_sk = c.c_customer_sk
    GROUP BY 
        c.c_customer_id
),
account_benchmark AS (
    SELECT 
        cs.c_customer_id,
        cs.total_orders,
        cs.total_spent,
        CASE 
            WHEN cs.total_spent IS NOT NULL AND cs.total_orders IS NOT NULL 
            THEN cs.total_spent / NULLIF(cs.total_orders, 0) 
            ELSE 0 
        END AS average_spend_per_order,
        COALESCE(cd.cd_marital_status, 'Unknown') AS marital_status,
        ROW_NUMBER() OVER (ORDER BY cs.total_spent DESC) AS order_rank
    FROM 
        customer_sales AS cs 
    LEFT JOIN 
        customer_demographics AS cd ON cs.c_customer_id = cd.cd_demo_sk
)
SELECT 
    ib.ib_lower_bound,
    ib.ib_upper_bound,
    AVG(average_spend_per_order) AS avg_spend,
    COUNT(DISTINCT cs.c_customer_id) AS customer_count
FROM 
    income_band AS ib 
LEFT JOIN 
    account_benchmark AS cs ON cs.total_spent BETWEEN ib.ib_lower_bound AND ib.ib_upper_bound
GROUP BY 
    ib.ib_lower_bound, 
    ib.ib_upper_bound
HAVING 
    COUNT(DISTINCT cs.c_customer_id) > 1
ORDER BY 
    ib.ib_lower_bound;
