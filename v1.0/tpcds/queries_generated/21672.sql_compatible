
WITH RankedReturns AS (
    SELECT 
        COALESCE(sr_returned_date_sk, cr_returned_date_sk, wr_returned_date_sk) AS return_date,
        COALESCE(sr_item_sk, cr_item_sk, wr_item_sk) AS item_sk,
        COALESCE(sr_return_quantity, cr_return_quantity, wr_return_quantity) AS return_quantity,
        CTE_r.cus_count,
        ROW_NUMBER() OVER (PARTITION BY COALESCE(sr_item_sk, cr_item_sk, wr_item_sk) ORDER BY COALESCE(sr_returned_date_sk, cr_returned_date_sk, wr_returned_date_sk) DESC) AS rn
    FROM 
        store_returns sr
    FULL OUTER JOIN 
        catalog_returns cr ON sr_item_sk = cr_item_sk AND sr_return_quantity IS NOT NULL
    FULL OUTER JOIN 
        web_returns wr ON sr_item_sk = wr_item_sk AND cr_return_quantity IS NOT NULL
    CROSS JOIN (
        SELECT COUNT(DISTINCT c_customer_sk) AS cus_count
        FROM customer
    ) AS CTE_r
    WHERE COALESCE(sr_return_date, cr_returned_date_sk, wr_returned_date_sk) IS NOT NULL
),
AggregatedReturns AS (
    SELECT
        item_sk,
        SUM(return_quantity) AS total_returned,
        COUNT(DISTINCT return_date) AS unique_return_dates
    FROM RankedReturns
    WHERE rn = 1
    GROUP BY item_sk
)
SELECT 
    i.i_item_id,
    i.i_item_desc,
    ar.total_returned,
    ar.unique_return_dates,
    CASE 
        WHEN ar.total_returned > 100 THEN 'High Return'
        WHEN ar.total_returned BETWEEN 50 AND 100 THEN 'Medium Return'
        ELSE 'Low Return'
    END AS return_category,
    CONCAT('Item ', CAST(i.i_item_id AS VARCHAR), ' has ', 
        CASE 
            WHEN ar.unique_return_dates > 0 THEN 
                CONCAT(' ', CAST(ar.unique_return_dates AS VARCHAR), ' unique return dates.')
            ELSE 
                ' no unique return dates.'
        END
    ) AS return_info
FROM AggregatedReturns ar
JOIN item i ON ar.item_sk = i.i_item_sk
WHERE i.i_current_price IS NOT NULL 
AND ar.total_returned IS NOT NULL
ORDER BY ar.total_returned DESC, return_category DESC;
