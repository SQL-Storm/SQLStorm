
WITH ranked_sales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS price_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
        AND (ws.ws_net_profit IS NULL OR ws.ws_net_profit > 0)
),
customer_info AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        CASE 
            WHEN cd.cd_marital_status = 'M' THEN 'Married'
            WHEN cd.cd_marital_status = 'S' THEN 'Single'
            ELSE 'Other'
        END AS marital_status,
        COALESCE(hd.hd_vehicle_count, 0) AS vehicle_count
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        household_demographics hd ON c.c_customer_sk = hd.hd_demo_sk
),
sales_summary AS (
    SELECT 
        ci.c_customer_sk,
        ci.c_first_name,
        ci.c_last_name,
        ci.marital_status,
        SUM(COALESCE(rws.ws_net_paid, 0)) AS total_spent,
        COUNT(DISTINCT rws.ws_order_number) AS total_orders,
        COUNT(DISTINCT rws.ws_item_sk) AS unique_items_purchased,
        AVG(rws.ws_sales_price) AS avg_sales_price
    FROM 
        customer_info ci
    LEFT JOIN 
        ranked_sales rws ON ci.c_customer_sk = rws.ws_order_number  
    GROUP BY 
        ci.c_customer_sk, ci.c_first_name, ci.c_last_name, ci.marital_status
)
SELECT 
    ss.c_customer_sk,
    ss.c_first_name,
    ss.c_last_name,
    ss.marital_status,
    ss.total_spent,
    ss.total_orders,
    ss.unique_items_purchased,
    CASE 
        WHEN ss.total_spent IS NULL THEN 'No Purchases'
        WHEN ss.total_spent < 100 THEN 'Low Spender'
        WHEN ss.total_spent >= 100 AND ss.total_spent <= 500 THEN 'Mid Spender'
        ELSE 'High Spender'
    END AS spending_category,
    ROW_NUMBER() OVER (ORDER BY ss.total_spent DESC) AS rank
FROM 
    sales_summary ss
WHERE 
    ss.total_orders > 0
    AND ss.unique_items_purchased < (SELECT COUNT(*) FROM item) * 0.1  
ORDER BY 
    ss.total_spent DESC;
