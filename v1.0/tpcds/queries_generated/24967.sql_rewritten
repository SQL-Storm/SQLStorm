WITH RecursiveSales AS (
    SELECT ws_bill_customer_sk,
           SUM(ws_quantity) AS total_quantity,
           SUM(ws_ext_sales_price) AS total_sales,
           ROW_NUMBER() OVER (PARTITION BY ws_bill_customer_sk ORDER BY SUM(ws_ext_sales_price) DESC) AS rank
    FROM web_sales
    GROUP BY ws_bill_customer_sk
),
CustomerAddress AS (
    SELECT ca_address_sk,
           ca_city,
           ca_state,
           COALESCE(ca_zip, 'UNKNOWN') AS postal_code
    FROM customer_address
),
HighValueCustomers AS (
    SELECT cs.c_customer_sk,
           cs.c_first_name,
           cs.c_last_name,
           cs.c_email_address,
           COALESCE(sa.total_quantity, 0) AS recent_quantity,
           COALESCE(s.total_sales, 0) AS recent_sales
    FROM customer cs
    LEFT JOIN RecursiveSales sa ON cs.c_customer_sk = sa.ws_bill_customer_sk AND sa.rank = 1
    LEFT JOIN (
        SELECT ws_bill_customer_sk,
               SUM(ws_ext_sales_price) AS total_sales
        FROM web_sales
        WHERE ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2001 AND d_moy = 10)
        GROUP BY ws_bill_customer_sk
    ) s ON cs.c_customer_sk = s.ws_bill_customer_sk
    WHERE cs.c_first_name IS NOT NULL
),
CityStatistics AS (
    SELECT ca_city,
           COUNT(DISTINCT c_customer_sk) AS customer_count,
           MAX(hvc.recent_sales) AS max_sales
    FROM CustomerAddress ca
    LEFT JOIN HighValueCustomers hvc ON hvc.c_customer_sk IS NOT NULL AND hvc.recent_quantity > 10
    GROUP BY ca_city
)
SELECT cs.ca_city,
       cs.customer_count,
       COALESCE(cs.max_sales, 0) AS max_recent_sales,
       CASE 
           WHEN cs.max_sales IS NULL THEN 'No Sales Recorded'
           ELSE CONCAT('Max sales: $', FORMAT(cs.max_sales, 2))
       END AS sales_message
FROM CityStatistics cs
LEFT JOIN reason r ON r.r_reason_sk = (SELECT MIN(r_reason_sk) FROM reason) 
WHERE cs.customer_count > (
    SELECT AVG(customer_count) FROM CityStatistics
)
ORDER BY cs.customer_count DESC, cs.ca_city
LIMIT 10;