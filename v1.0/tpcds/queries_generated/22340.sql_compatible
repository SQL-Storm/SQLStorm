
WITH customer_info AS (
    SELECT 
        c.c_customer_id, 
        c.c_first_name, 
        c.c_last_name, 
        cd.cd_gender,
        cd.cd_marital_status,
        CASE
            WHEN cd.cd_purchase_estimate > 1000 THEN 'High'
            WHEN cd.cd_purchase_estimate BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS purchase_estimate_category
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), 
sales_summary AS (
    SELECT 
        ws_bill_customer_sk AS customer_sk,
        SUM(ws_sales_price) AS total_sales,
        COUNT(ws_order_number) AS order_count
    FROM 
        web_sales
    GROUP BY 
        ws_bill_customer_sk
),
return_summary AS (
    SELECT 
        wr_returning_customer_sk AS customer_sk, 
        COUNT(DISTINCT wr_order_number) AS return_count,
        SUM(wr_return_amt) AS total_return_amt
    FROM 
        web_returns
    GROUP BY 
        wr_returning_customer_sk
),
final_summary AS (
    SELECT 
        ci.c_customer_id,
        ci.c_first_name,
        ci.c_last_name,
        ci.cd_gender,
        ci.cd_marital_status,
        COALESCE(ss.total_sales, 0) AS total_sales,
        COALESCE(rs.return_count, 0) AS return_count,
        COALESCE(rs.total_return_amt, 0) AS total_return_amt,
        COALESCE(ss.total_sales, 0) - COALESCE(rs.total_return_amt, 0) AS net_spending
    FROM 
        customer_info ci
    LEFT JOIN 
        sales_summary ss ON ci.c_customer_id = ss.customer_sk
    LEFT JOIN 
        return_summary rs ON ci.c_customer_id = rs.customer_sk
)
SELECT 
    f.c_customer_id,
    f.c_first_name,
    f.c_last_name,
    f.cd_gender,
    f.cd_marital_status,
    f.total_sales,
    f.return_count,
    f.total_return_amt,
    f.net_spending,
    CASE 
        WHEN f.net_spending > 0 THEN 'Positive'
        WHEN f.net_spending < 0 THEN 'Negative'
        ELSE 'No Spending'
    END AS spending_status,
    NTILE(4) OVER (ORDER BY f.net_spending DESC) AS spending_quartile
FROM 
    final_summary f
WHERE 
    f.return_count IS NOT NULL AND 
    f.total_sales IS NOT NULL
ORDER BY 
    f.net_spending DESC
LIMIT 100;
