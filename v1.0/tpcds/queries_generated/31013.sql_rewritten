WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_cdemo_sk
    FROM customer
    WHERE c_customer_sk = (SELECT MIN(c_customer_sk) FROM customer) 

    UNION ALL

    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk
    FROM customer c
    JOIN CustomerHierarchy ch ON c.c_current_cdemo_sk = ch.c_current_cdemo_sk 
),
SalesSummary AS (
    SELECT 
        ws_bill_customer_sk,
        SUM(ws_net_paid) AS total_sales,
        COUNT(ws_order_number) AS total_orders
    FROM web_sales
    GROUP BY ws_bill_customer_sk
),
StoreSalesSummary AS (
    SELECT 
        ss_customer_sk,
        SUM(ss_net_paid) AS total_store_sales,
        COUNT(ss_ticket_number) AS total_store_orders
    FROM store_sales
    GROUP BY ss_customer_sk
),
AllSales AS (
    SELECT
        ch.c_customer_sk,
        ch.c_first_name,
        ch.c_last_name,
        COALESCE(ss.total_sales, 0) AS total_web_sales,
        COALESCE(sss.total_store_sales, 0) AS total_store_sales,
        (COALESCE(ss.total_sales, 0) + COALESCE(sss.total_store_sales, 0)) AS grand_total_sales
    FROM CustomerHierarchy ch
    LEFT JOIN SalesSummary ss ON ch.c_customer_sk = ss.ws_bill_customer_sk
    LEFT JOIN StoreSalesSummary sss ON ch.c_customer_sk = sss.ss_customer_sk
)
SELECT 
    c.c_customer_sk,
    c.c_first_name,
    c.c_last_name,
    COALESCE(c.total_web_sales, 0) AS total_web_sales,
    COALESCE(c.total_store_sales, 0) AS total_store_sales,
    c.grand_total_sales,
    CASE 
        WHEN c.grand_total_sales = 0 THEN 'No Purchases'
        WHEN c.grand_total_sales < 100 THEN 'Low Value Customer'
        ELSE 'Valued Customer'
    END AS customer_category,
    DENSE_RANK() OVER (ORDER BY grand_total_sales DESC) AS sales_rank,
    CONCAT('Customer: ', c.c_first_name, ' ', c.c_last_name) AS customer_label
FROM AllSales c
WHERE c.grand_total_sales > 50
ORDER BY c.grand_total_sales DESC;