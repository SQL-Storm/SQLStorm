
WITH RankedSales AS (
    SELECT 
        ws_item_sk,
        ws_order_number,
        ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_ext_sales_price DESC) AS rn
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk BETWEEN (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2023) AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
),
HighValueSales AS (
    SELECT 
        ws_item_sk, 
        ws_order_number, 
        ws_ext_sales_price
    FROM 
        RankedSales 
    WHERE 
        rn <= 5
),
CustomerDetails AS (
    SELECT 
        c_customer_sk,
        c_first_name,
        c_last_name,
        cd_gender,
        cd_marital_status,
        cd_purchase_estimate,
        cd_credit_rating,
        ROW_NUMBER() OVER (PARTITION BY cd_credit_rating ORDER BY cd_purchase_estimate DESC) AS customer_rank
    FROM 
        customer 
    JOIN 
        customer_demographics ON c_current_cdemo_sk = cd_demo_sk
),
CustomerSales AS (
    SELECT 
        cs_bill_customer_sk,
        SUM(ws_ext_sales_price) AS total_sales
    FROM 
        web_sales 
    GROUP BY 
        cs_bill_customer_sk
    HAVING 
        SUM(ws_ext_sales_price) > 1000
),
FinalSales AS (
    SELECT 
        cd.c_first_name,
        cd.c_last_name,
        cs.total_sales,
        dv.d_year,
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Unknown'
        END AS Gender,
        ROW_NUMBER() OVER (PARTITION BY cs.cs_bill_customer_sk ORDER BY cs.total_sales DESC) AS billing_rank
    FROM 
        CustomerDetails cd
    JOIN 
        CustomerSales cs ON cd.c_customer_sk = cs.cs_bill_customer_sk
    JOIN 
        date_dim dv ON dv.d_date_sk IN (SELECT ws_sold_date_sk FROM web_sales WHERE ws_bill_customer_sk = cs.cs_bill_customer_sk)
    WHERE 
        cd.customer_rank <= 10
),
FinalReport AS (
    SELECT 
        fs.c_first_name,
        fs.c_last_name,
        fs.total_sales,
        fs.Gender,
        fs.d_year,
        COUNT(*) OVER (PARTITION BY fs.Gender ORDER BY fs.total_sales DESC) AS rank_by_gender,
        RANK() OVER (PARTITION BY fs.Gender ORDER BY fs.total_sales) AS sales_rank,
        COALESCE(NULLIF(fs.total_sales, 0), -1) AS sales_or_default
    FROM 
        FinalSales fs
)

SELECT 
    fr.c_first_name,
    fr.c_last_name,
    fr.total_sales,
    fr.Gender,
    fr.d_year,
    fr.rank_by_gender,
    fr.sales_rank,
    CASE 
        WHEN fr.sales_or_default = -1 THEN 'No Sales'
        ELSE 'Sales Recorded'
    END AS sales_status
FROM 
    FinalReport fr
WHERE 
    fr.sales_rank <= 5
ORDER BY 
    fr.Gender, fr.total_sales DESC;
