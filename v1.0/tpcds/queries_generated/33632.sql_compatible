
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, 1 AS level
    FROM customer
    WHERE c_customer_sk IN (SELECT DISTINCT sr_returning_customer_sk FROM store_returns)
    
    UNION ALL
    
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, ch.level + 1
    FROM customer c
    JOIN CustomerHierarchy ch ON c.c_customer_sk = ch.c_customer_sk
),
RecentSales AS (
    SELECT
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        ws.ws_quantity,
        d.d_date
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE d.d_date >= DATE '2002-10-01' - INTERVAL '30 days'
),
SalesSummary AS (
    SELECT
        rs.ws_item_sk,
        SUM(ws.ws_sales_price * ws.ws_quantity) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM RecentSales rs
    JOIN web_sales ws ON rs.ws_order_number = ws.ws_order_number
    GROUP BY rs.ws_item_sk
),
TopItems AS (
    SELECT i.i_item_id, i.i_item_desc, ss.total_sales, ss.order_count,
           RANK() OVER (ORDER BY ss.total_sales DESC) AS rank
    FROM SalesSummary ss
    JOIN item i ON ss.ws_item_sk = i.i_item_sk
),
CustomerCounts AS (
    SELECT ch.level, COUNT(*) AS customer_count
    FROM CustomerHierarchy ch
    GROUP BY ch.level
)
SELECT 
    ti.i_item_id,
    ti.i_item_desc,
    ti.total_sales,
    ti.order_count,
    COALESCE(cc.customer_count, 0) AS customer_count,
    CASE 
        WHEN ti.rank <= 10 THEN 'Top 10 Items'
        ELSE 'Other Items'
    END AS item_category
FROM TopItems ti
LEFT JOIN CustomerCounts cc ON cc.level = 1
WHERE ti.order_count > 0
ORDER BY ti.total_sales DESC;
