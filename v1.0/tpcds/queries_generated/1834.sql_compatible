
WITH ranked_sales AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_item_sk,
        ws.ws_sales_price,
        ws.ws_quantity,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS price_rank,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_quantity DESC) AS quantity_rank
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2022) - 30 
    AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2022)
),
top_sellers AS (
    SELECT 
        item.i_item_sk,
        item.i_item_id,
        COALESCE(MAX(ranked_sales.ws_sales_price), 0) AS max_sales_price,
        COALESCE(SUM(ranked_sales.ws_quantity), 0) AS total_quantity_sold
    FROM item
    LEFT JOIN ranked_sales ON item.i_item_sk = ranked_sales.ws_item_sk AND ranked_sales.price_rank = 1
    GROUP BY item.i_item_sk, item.i_item_id
    HAVING COALESCE(SUM(ranked_sales.ws_quantity), 0) > 0
),
customer_stats AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        hd.hd_income_band_sk,
        COUNT(DISTINCT CASE WHEN (ss.ss_item_sk IN (SELECT i.i_item_sk FROM top_sellers)) THEN ss.ss_ticket_number END) AS total_sales,
        COUNT(DISTINCT CASE WHEN ss.ss_item_sk IS NULL THEN ss.ss_ticket_number END) AS returns
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    LEFT JOIN household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
    GROUP BY c.c_customer_id, cd.cd_gender, hd.hd_income_band_sk
)
SELECT 
    cs.c_customer_id,
    cs.cd_gender,
    cs.hd_income_band_sk,
    cs.total_sales,
    cs.returns,
    CASE 
        WHEN cs.total_sales > 0 THEN 'Active'
        ELSE 'Inactive'
    END AS customer_status
FROM customer_stats cs
WHERE cs.total_sales - cs.returns > 0
ORDER BY customer_status DESC, cs.total_sales DESC;
