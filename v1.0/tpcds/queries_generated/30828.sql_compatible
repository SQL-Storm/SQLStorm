
WITH RECURSIVE Sales_CTE AS (
    SELECT ws_item_sk, SUM(ws_quantity) AS total_quantity, 
           SUM(ws_sales_price) AS total_sales, 
           ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS rank
    FROM web_sales
    WHERE ws_sold_date_sk IN (SELECT d_date_sk 
                               FROM date_dim 
                               WHERE d_year = 2023)
    GROUP BY ws_item_sk
), 
Sales_Analysis AS (
    SELECT s.ws_item_sk, 
           s.total_quantity, 
           s.total_sales, 
           i.i_product_name,
           CASE 
               WHEN s.total_sales > (SELECT AVG(total_sales) FROM Sales_CTE) THEN 'Above Average' 
               ELSE 'Below Average' 
           END AS sales_performance,
           COUNT(ws_order_number) OVER (PARTITION BY s.ws_item_sk) AS order_count
    FROM Sales_CTE s
    JOIN item i ON s.ws_item_sk = i.i_item_sk
)

SELECT 
    a.ws_item_sk, 
    a.i_product_name, 
    a.total_quantity,
    a.total_sales,
    a.sales_performance,
    a.order_count
FROM Sales_Analysis a
LEFT JOIN store_sales ss ON a.ws_item_sk = ss.ss_item_sk 
WHERE ss.ss_sold_date_sk IN (SELECT d_date_sk 
                              FROM date_dim 
                              WHERE d_year = 2023)
UNION ALL
SELECT 
    a.ws_item_sk, 
    a.i_product_name, 
    a.total_quantity,
    a.total_sales,
    a.sales_performance,
    a.order_count
FROM Sales_Analysis a
RIGHT JOIN store_returns sr ON a.ws_item_sk = sr.sr_item_sk 
WHERE sr.sr_returned_date_sk IS NOT NULL
ORDER BY a.total_sales DESC
LIMIT 100;
