
WITH RECURSIVE Sales_CTE AS (
    SELECT 
        ws_item_sk,
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(ws_order_number) AS total_orders,
        1 AS level
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim)
    GROUP BY 
        ws_item_sk

    UNION ALL

    SELECT 
        cs_item_sk,
        SUM(cs_ext_sales_price) AS total_sales,
        COUNT(cs_order_number) AS total_orders,
        level + 1
    FROM 
        catalog_sales
    WHERE 
        cs_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim) 
    GROUP BY 
        cs_item_sk
)

SELECT 
    ca.city,
    ca.state,
    SUM(S.total_sales) AS total_revenue,
    COUNT(DISTINCT c.c_customer_id) AS unique_customers,
    MAX(sm.sm_sales_price) AS highest_sales_price,
    AVG(COALESCE(i.i_current_price, 0)) AS average_item_price,
    CASE 
        WHEN MAX(i.i_current_price) IS NULL THEN 'No Items' 
        ELSE 'Items Available' 
    END AS item_availability,
    ROW_NUMBER() OVER (PARTITION BY ca.state ORDER BY SUM(S.total_sales) DESC) AS revenue_rank
FROM 
    Sales_CTE S
JOIN 
    item i ON S.ws_item_sk = i.i_item_sk
LEFT JOIN 
    store s ON s.s_store_sk = i.i_item_sk
LEFT JOIN 
    customer c ON c.c_customer_sk = S.ws_item_sk
LEFT JOIN 
    customer_address ca ON ca.ca_address_sk = c.c_current_addr_sk
LEFT JOIN 
    ship_mode sm ON sm.sm_ship_mode_sk = S.total_orders
WHERE 
    ca.city IS NOT NULL
    AND S.total_sales > 1000
GROUP BY 
    ca.city, ca.state
HAVING 
    SUM(S.total_sales) > (SELECT AVG(total_sales) FROM Sales_CTE)
ORDER BY 
    total_revenue DESC;
