
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_order_number,
        ws_item_sk,
        ws_ship_date_sk,
        ws_quantity,
        ws_sales_price,
        ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_order_number ORDER BY ws_sales_price DESC) AS rank
    FROM 
        web_sales
    WHERE 
        ws_ship_date_sk BETWEEN 1000 AND 2000
    UNION ALL
    SELECT 
        cs_order_number,
        cs_item_sk,
        cs_ship_date_sk,
        cs_quantity,
        cs_sales_price,
        cs_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY cs_order_number ORDER BY cs_sales_price DESC)
    FROM 
        catalog_sales
    WHERE 
        cs_ship_date_sk BETWEEN 1000 AND 2000
),
return_summary AS (
    SELECT 
        wr_order_number,
        SUM(wr_return_quantity) AS total_returned,
        SUM(wr_return_amt_inc_tax) AS total_return_amt
    FROM 
        web_returns
    GROUP BY 
        wr_order_number
),
customer_data AS (
    SELECT 
        c_customer_sk,
        cd_gender,
        cd_marital_status,
        CASE 
            WHEN cd_purchase_estimate IS NULL THEN 'UNKNOWN'
            WHEN cd_purchase_estimate < 1000 THEN 'LOW'
            ELSE 'HIGH'
        END AS purchase_level
    FROM 
        customer 
    LEFT JOIN 
        customer_demographics 
    ON 
        c_current_cdemo_sk = cd_demo_sk
),
inventory_status AS (
    SELECT 
        inv_item_sk,
        SUM(inv_quantity_on_hand) AS total_inventory
    FROM 
        inventory
    WHERE 
        inv_date_sk = 1000
    GROUP BY 
        inv_item_sk
)
SELECT 
    s.order_number,
    COUNT(DISTINCT c.c_customer_sk) AS unique_customers,
    SUM(r.total_returned) AS total_items_returned,
    SUM(r.total_return_amt) AS total_return_value,
    i.total_inventory,
    c.purchase_level,
    CASE 
        WHEN SUM(r.total_returned) > 0 THEN 'Returned'
        ELSE 'Not Returned'
    END AS return_status
FROM 
    (SELECT ws_order_number AS order_number, ws_item_sk FROM sales_summary WHERE rank = 1 
     UNION 
     SELECT cs_order_number, cs_item_sk FROM sales_summary WHERE rank = 1) s
JOIN 
    return_summary r ON s.order_number = r.wr_order_number
JOIN 
    customer_data c ON s.ws_item_sk = c.c_customer_sk
JOIN 
    inventory_status i ON s.ws_item_sk = i.inv_item_sk
GROUP BY 
    s.order_number, c.purchase_level, i.total_inventory
HAVING 
    COUNT(DISTINCT c.c_customer_sk) > 1 
    AND MAX(i.total_inventory) IS NOT NULL
ORDER BY 
    return_status, total_return_value DESC;
