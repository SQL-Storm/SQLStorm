
WITH RecursiveSales AS (
    SELECT 
        ss_store_sk,
        ss_item_sk,
        ss_quantity,
        ss_net_paid,
        ROW_NUMBER() OVER (PARTITION BY ss_store_sk ORDER BY ss_net_paid DESC) AS rank
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023) - 30 AND (SELECT MAX(d_date_sk) FROM date_dim)
),
CustomerStats AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender AS c_gender,
        COALESCE(hd.hd_buy_potential, 'Low') AS potential,
        COUNT(DISTINCT c.c_customer_sk) OVER () AS total_customers,
        SUM(CASE WHEN cd.cd_gender = 'F' THEN 1 ELSE 0 END) OVER () AS female_count
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        household_demographics hd ON c.c_customer_sk = hd.hd_demo_sk
    WHERE 
        c.c_birth_year IS NOT NULL AND 
        (c.c_birth_month IS NULL OR c.c_birth_month > 0)
),
SalesAggregates AS (
    SELECT
        ss.ss_store_sk,
        SUM(ss.ss_quantity) AS total_quantity,
        SUM(ss.ss_net_paid) AS total_net_paid,
        AVG(ss.ss_net_paid) AS avg_net_paid
    FROM 
        store_sales ss
    GROUP BY 
        ss.ss_store_sk
)
SELECT 
    COALESCE(s.store_sales_id, 'UNKNOWN') AS sales_id,
    cs.c_gender AS customer_gender,
    ROUND(SUM(CASE WHEN cs.potential = 'High' THEN sa.total_net_paid END), 2) AS high_potential_sales,
    MAX(sa.total_quantity * 1.1) AS adjusted_total_quantity,
    COUNT(DISTINCT cs.c_customer_id) FILTER (WHERE cs.potential = 'Medium') AS medium_potential_customers,
    CASE 
        WHEN MAX(sa.total_net_paid) IS NULL THEN 'No Sales'
        ELSE 'Sales Available'
    END AS sales_availability
FROM 
    RecursiveSales r
LEFT JOIN 
    SalesAggregates sa ON r.ss_store_sk = sa.ss_store_sk
LEFT JOIN 
    CustomerStats cs ON cs.total_customers > 0
LEFT JOIN 
    (SELECT DISTINCT ss_store_sk AS store_sales_id FROM store_sales) s ON r.ss_store_sk = s.store_sales_id
GROUP BY 
    cs.c_gender, s.store_sales_id
ORDER BY 
    high_potential_sales DESC,
    adjusted_total_quantity
LIMIT 100 OFFSET (SELECT COUNT(*) FROM CustomerStats) / 10;
