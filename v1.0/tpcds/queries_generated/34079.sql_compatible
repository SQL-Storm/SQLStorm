
WITH RECURSIVE sales_data AS (
    SELECT 
        ws.sold_date_sk,
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.sold_date_sk DESC) AS rn
    FROM 
        web_sales ws
    JOIN 
        item i ON ws.ws_item_sk = i.i_item_sk
    WHERE 
        i.i_current_price > 0
    GROUP BY 
        ws.sold_date_sk, ws.ws_item_sk
), ranked_sales AS (
    SELECT 
        sd.sold_date_sk,
        sd.ws_item_sk,
        sd.total_quantity,
        sd.total_sales,
        RANK() OVER (ORDER BY sd.total_sales DESC) AS sales_rank
    FROM 
        sales_data sd
)
SELECT 
    r.sales_rank,
    i.i_item_id,
    i.i_item_desc,
    COALESCE(NULLIF(SUM(ws.ws_ext_discount_amt), 0), 0) AS total_discount,
    COALESCE(SUM(ws.ws_net_paid), 0) AS net_paid,
    COUNT(DISTINCT ws.ws_order_number) AS unique_orders
FROM 
    ranked_sales r
LEFT JOIN 
    web_sales ws ON r.sold_date_sk = ws.sold_date_sk AND r.ws_item_sk = ws.ws_item_sk
JOIN 
    item i ON r.ws_item_sk = i.i_item_sk
WHERE 
    r.sales_rank <= 10
GROUP BY 
    r.sales_rank, i.i_item_id, i.i_item_desc
ORDER BY 
    r.sales_rank, net_paid DESC;
