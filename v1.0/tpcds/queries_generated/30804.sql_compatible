
WITH RECURSIVE InventoryCTE AS (
    SELECT inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand
    FROM inventory
    WHERE inv_quantity_on_hand IS NOT NULL

    UNION ALL

    SELECT i.inv_date_sk, i.inv_item_sk, i.inv_warehouse_sk, 
           i.inv_quantity_on_hand + cte.inv_quantity_on_hand
    FROM inventory i
    JOIN InventoryCTE cte ON i.inv_item_sk = cte.inv_item_sk
    WHERE i.inv_date_sk = cte.inv_date_sk + INTERVAL '1 DAY'
)
SELECT
    c.c_customer_id,
    c.c_first_name,
    c.c_last_name,
    COALESCE(d.d_date, 'No Date') AS last_purchase_date,
    SUM(ws.ws_net_profit) AS total_net_profit,
    RANK() OVER (PARTITION BY ca.ca_state ORDER BY SUM(ws.ws_net_profit) DESC) AS state_rank,
    STRING_AGG(DISTINCT CONCAT(m.i_brand, ' - ', i.i_product_name), '; ') AS purchased_products
FROM customer c
LEFT JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
LEFT JOIN item i ON ws.ws_item_sk = i.i_item_sk
LEFT JOIN (
    SELECT DISTINCT i_item_sk, i_brand
    FROM item 
    WHERE i_current_price BETWEEN 10 AND 100
) m ON i.i_item_sk = m.i_item_sk
WHERE 
    c.c_birth_year BETWEEN 1970 AND 1980
    AND d.d_current_year = '1'
    AND (d.d_holiday IS NULL OR d.d_holiday = 'N')
GROUP BY 
    c.c_customer_id, c.c_first_name, c.c_last_name, 
    d.d_date, ca.ca_state
HAVING SUM(ws.ws_net_profit) > 0
ORDER BY total_net_profit DESC
LIMIT 100;
