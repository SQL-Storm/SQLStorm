
WITH RankedSales AS (
    SELECT
        ws_item_sk,
        ws_order_number,
        ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sales_price DESC) AS rank,
        COALESCE(ws_discount_amt, 0) AS discount,
        CASE
            WHEN ws_sales_price IS NULL THEN 'No Price'
            WHEN ws_sales_price < 10 THEN 'Cheap'
            WHEN ws_sales_price BETWEEN 10 AND 50 THEN 'Affordable'
            ELSE 'Expensive'
        END AS price_category
    FROM web_sales
),
AggregatedReturns AS (
    SELECT
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returns,
        SUM(sr_return_amt) AS total_return_amount
    FROM store_returns
    GROUP BY sr_item_sk
),
ItemDetails AS (
    SELECT
        i.i_item_sk,
        i.i_product_name,
        i.i_category,
        i.i_brand,
        COALESCE(ar.total_returns, 0) AS total_returns,
        COALESCE(ar.total_return_amount, 0) AS total_return_amount
    FROM item i
    LEFT JOIN AggregatedReturns ar ON i.i_item_sk = ar.sr_item_sk
),
FinalReport AS (
    SELECT
        d.d_date,
        COUNT(DISTINCT s.ss_ticket_number) AS total_sales,
        SUM(s.ss_sales_price) AS total_sales_amount,
        COUNT(DISTINCT s.ss_item_sk) AS unique_items_sold,
        SUM(CASE WHEN id.total_returns > 0 THEN id.total_returns ELSE 0 END) AS items_returned,
        SUM(id.total_return_amount) AS total_return_amount,
        MAX(r.rank) AS highest_ranked_item,
        STRING_AGG(DISTINCT id.price_category, ', ') AS price_categories
    FROM store_sales s
    JOIN ItemDetails id ON s.ss_item_sk = id.i_item_sk
    JOIN date_dim d ON s.ss_sold_date_sk = d.d_date_sk
    WHERE d.d_year = 2023
    GROUP BY d.d_date
)
SELECT
    d.d_date,
    fr.total_sales,
    fr.total_sales_amount,
    fr.unique_items_sold,
    fr.items_returned,
    fr.total_return_amount,
    fr.highest_ranked_item,
    fr.price_categories
FROM date_dim d
RIGHT JOIN FinalReport fr ON d.d_date = fr.d_date
WHERE d.d_date IS NULL OR fr.total_sales > 0
ORDER BY d.d_date DESC NULLS LAST;
