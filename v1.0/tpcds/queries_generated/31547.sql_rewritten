WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_customer_sk, 
           c.c_first_name || ' ' || c.c_last_name AS full_name, 
           cd.cd_marital_status, 
           cd.cd_gender, 
           cd.cd_purchase_estimate,
           cd.cd_dep_count,
           cd.cd_credit_rating
    FROM customer c 
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE c.c_customer_sk IS NOT NULL
    
    UNION ALL
    
    SELECT ch.c_customer_sk, 
           ch.full_name || ' (Child)' AS full_name,
           cd.cd_marital_status, 
           cd.cd_gender, 
           cd.cd_purchase_estimate,
           cd.cd_dep_count,
           cd.cd_credit_rating
    FROM CustomerHierarchy ch
    JOIN customer c ON c.c_customer_sk = ch.c_customer_sk + 1
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
)

SELECT ca.ca_state, 
       COUNT(DISTINCT ch.c_customer_sk) AS total_customers,
       AVG(ch.cd_purchase_estimate) AS avg_purchase_estimate,
       SUM(CASE WHEN ch.cd_gender = 'M' THEN 1 ELSE 0 END) AS male_count,
       SUM(CASE WHEN ch.cd_gender = 'F' THEN 1 ELSE 0 END) AS female_count,
       MAX(ch.cd_dep_count) AS max_dependents
FROM CustomerHierarchy ch
JOIN customer_address ca ON ch.c_customer_sk = ca.ca_address_sk
LEFT JOIN date_dim d ON d.d_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d.d_year = EXTRACT(YEAR FROM cast('2002-10-01' as date)))
WHERE ca.ca_state IS NOT NULL
GROUP BY ca.ca_state
HAVING AVG(ch.cd_purchase_estimate) > (SELECT AVG(cd_purchase_estimate) FROM customer_demographics)
ORDER BY total_customers DESC;