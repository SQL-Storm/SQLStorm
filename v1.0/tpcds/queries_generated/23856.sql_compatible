
WITH RankedReturns AS (
    SELECT 
        cr_returning_customer_sk, 
        SUM(cr_return_quantity) AS total_returned_items,
        DENSE_RANK() OVER (PARTITION BY cr_returning_customer_sk ORDER BY SUM(cr_return_quantity) DESC) AS rank
    FROM 
        catalog_returns
    GROUP BY 
        cr_returning_customer_sk
),
TopCustomers AS (
    SELECT 
        rr.cr_returning_customer_sk AS returning_customer_sk,
        rc.*, 
        cs.*, 
        ROW_NUMBER() OVER (PARTITION BY rr.cr_returning_customer_sk ORDER BY cs.cs_ext_sales_price DESC) AS item_rank
    FROM 
        RankedReturns rr
    JOIN 
        web_sales ws ON rr.cr_returning_customer_sk = ws.ws_ship_customer_sk
    JOIN 
        item cs ON ws.ws_item_sk = cs.i_item_sk
    WHERE 
        rr.total_returned_items > 5
),
CustomerDemographics AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
IncomeAnalysis AS (
    SELECT 
        c.c_customer_sk, 
        CASE 
            WHEN hd.hd_income_band_sk IS NULL THEN 'Unknown'
            WHEN hd.hd_income_band_sk BETWEEN 1 AND 5 THEN 'Low Income'
            ELSE 'High Income' 
        END AS income_band,
        hd.hd_buy_potential
    FROM 
        household_demographics hd
    RIGHT JOIN 
        CustomerDemographics c ON hd.hd_demo_sk = c.c_customer_sk
)
SELECT 
    ca.ca_city, 
    COUNT(DISTINCT tc.returning_customer_sk) AS total_customers,
    AVG(COALESCE(cd.cd_purchase_estimate, 0)) AS avg_purchase_estimate,
    ARRAY_AGG(DISTINCT CASE WHEN cd.cd_marital_status = 'M' THEN 'Married' ELSE 'Single' END) AS marital_status_distribution
FROM 
    customer_address ca
LEFT JOIN 
    TopCustomers tc ON ca.ca_address_sk = tc.returning_customer_sk
LEFT JOIN 
    CustomerDemographics cd ON tc.returning_customer_sk = cd.c_customer_sk
JOIN 
    IncomeAnalysis ia ON cd.c_customer_sk = ia.c_customer_sk
WHERE 
    ca.ca_city IS NOT NULL AND 
    (cd.cd_gender = 'F' OR cd.cd_gender IS NULL)
GROUP BY 
    ca.ca_city
HAVING 
    COUNT(DISTINCT tc.returning_customer_sk) > 10 OR AVG(cd.cd_purchase_estimate) > 1000
ORDER BY 
    total_customers DESC, 
    avg_purchase_estimate DESC
LIMIT 10;
