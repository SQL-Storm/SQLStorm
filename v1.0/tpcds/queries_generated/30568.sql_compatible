
WITH RECURSIVE sales_over_time AS (
    SELECT 
        d.d_date_id,
        SUM(COALESCE(ws.ws_net_paid, 0)) AS total_sales,
        ROW_NUMBER() OVER (ORDER BY d.d_date_id) AS rn
    FROM date_dim d
    LEFT JOIN web_sales ws ON d.d_date_sk = ws.ws_sold_date_sk
    GROUP BY d.d_date_id
    UNION ALL
    SELECT 
        d.d_date_id,
        SUM(COALESCE(cs.cs_net_paid, 0)) + COALESCE(total_sales, 0) AS total_sales,
        ROW_NUMBER() OVER (ORDER BY d.d_date_id) AS rn
    FROM date_dim d
    JOIN catalog_sales cs ON d.d_date_sk = cs.cs_sold_date_sk
    INNER JOIN sales_over_time s ON d.d_date_id > s.d_date_id
    GROUP BY d.d_date_id, total_sales
)
SELECT 
    d.d_year,
    d.d_month_seq,
    COUNT(DISTINCT c.c_customer_sk) AS unique_customers,
    COUNT(DISTINCT s.ss_ticket_number) AS total_transactions,
    SUM(s.ss_net_paid) AS total_revenue,
    SUM(s.ss_ext_discount_amt) AS total_discounts,
    SUM(s.ss_ext_tax) AS total_tax,
    RANK() OVER (ORDER BY SUM(s.ss_net_paid) DESC) AS revenue_rank,
    COALESCE((SELECT AVG(sr.sr_return_amt) FROM store_returns sr WHERE sr.sr_returned_date_sk = d.d_date_sk), 0) AS avg_returnamt
FROM date_dim d
LEFT JOIN store_sales s ON d.d_date_sk = s.ss_sold_date_sk
LEFT JOIN customer c ON s.ss_customer_sk = c.c_customer_sk
WHERE d.d_year = 2023
GROUP BY d.d_year, d.d_month_seq
HAVING SUM(s.ss_net_paid) > 1000
ORDER BY d.d_year, d.d_month_seq DESC;
