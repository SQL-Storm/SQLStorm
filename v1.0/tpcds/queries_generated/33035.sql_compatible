
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales 
    GROUP BY 
        ws_item_sk
    UNION ALL
    SELECT 
        cs_item_sk,
        SUM(cs_quantity) + sc.total_quantity AS total_quantity,
        SUM(cs_sales_price) + sc.total_sales AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY cs_item_sk ORDER BY (SUM(cs_sales_price) + sc.total_sales) DESC) AS sales_rank
    FROM 
        catalog_sales cs
    JOIN 
        SalesCTE sc ON cs_item_sk = sc.ws_item_sk
    GROUP BY 
        cs_item_sk, sc.total_quantity, sc.total_sales
),
SalesSummary AS (
    SELECT 
        item.i_item_id,
        item.i_item_desc,
        COALESCE(s.total_quantity, 0) AS total_quantity,
        COALESCE(s.total_sales, 0.00) AS total_sales,
        COALESCE(s.sales_rank, 0) AS sales_rank
    FROM 
        item 
    LEFT JOIN 
        (SELECT 
             ws_item_sk,
             total_quantity,
             total_sales,
             sales_rank
         FROM 
             SalesCTE
         WHERE 
             sales_rank <= 10) s ON item.i_item_sk = s.ws_item_sk
)
SELECT 
    ss.i_item_id,
    ss.i_item_desc,
    ss.total_quantity,
    ss.total_sales,
    (SELECT SUM(sss.total_sales) 
     FROM SalesSummary sss 
     WHERE sss.total_sales IS NOT NULL) AS total_of_all_sales,
    ROUND(100.0 * ss.total_sales / NULLIF((SELECT SUM(total_sales) FROM SalesSummary), 0), 2) AS sales_percentage
FROM 
    SalesSummary ss
WHERE 
    ss.total_sales > (
        SELECT AVG(total_sales) 
        FROM SalesSummary 
        WHERE total_sales IS NOT NULL
    )
ORDER BY 
    ss.total_sales DESC
LIMIT 100;
