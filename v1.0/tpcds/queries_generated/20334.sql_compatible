
WITH RECURSIVE customer_hierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, 
           c_current_cdemo_sk, 1 AS level 
    FROM customer 
    WHERE c_customer_sk IS NOT NULL 
    
    UNION ALL 
    
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           c.c_current_cdemo_sk, ch.level + 1 
    FROM customer c 
    JOIN customer_hierarchy ch ON c.c_current_cdemo_sk = ch.c_current_cdemo_sk 
    WHERE ch.level < 3
),
sales_summary AS (
    SELECT 
        ws.web_site_id,
        SUM(ws.ws_sales_price) AS total_sales,
        AVG(ws.ws_net_profit) AS avg_profit,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM web_sales ws 
    WHERE ws.ws_sold_date_sk BETWEEN (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2023)
                                  AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY ws.web_site_id
),
returns_summary AS (
    SELECT 
        wr.web_page_sk,
        SUM(wr.wr_return_amt) AS total_returns,
        COUNT(DISTINCT wr.wr_order_number) AS return_count
    FROM web_returns wr
    GROUP BY wr.web_page_sk
),
final_data AS (
    SELECT 
        COALESCE(CONCAT(c.c_first_name, ' ', c.c_last_name), 'Unknown Customer') AS customer_name,
        ss.web_site_id,
        ss.total_sales,
        ss.avg_profit,
        rs.total_returns,
        rs.return_count,
        CASE 
            WHEN ss.total_sales IS NOT NULL AND ss.total_sales > 0 THEN ROUND((rs.total_returns / ss.total_sales) * 100, 2)
            ELSE NULL 
        END AS return_rate,
        ROW_NUMBER() OVER (PARTITION BY ss.web_site_id ORDER BY ss.total_sales DESC) AS rank
    FROM sales_summary ss
    LEFT JOIN returns_summary rs ON ss.web_site_id = rs.web_page_sk
    LEFT JOIN customer_hierarchy c ON c.c_current_cdemo_sk = (SELECT cd_demo_sk FROM customer_demographics WHERE cd_demo_sk = c.c_current_cdemo_sk LIMIT 1)
)
SELECT *
FROM final_data
WHERE return_rate IS NOT NULL AND rank <= 5
ORDER BY web_site_id, return_rate DESC;
