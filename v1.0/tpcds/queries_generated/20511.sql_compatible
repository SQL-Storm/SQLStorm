
WITH RankedSales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_profit) AS total_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_profit) DESC) AS rn
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT cs_order_number) AS total_orders,
        SUM(CASE WHEN cd_gender = 'F' THEN 1 ELSE 0 END) AS female_orders,
        SUM(CASE WHEN cd_marital_status = 'M' THEN 1 ELSE 0 END) AS married_orders,
        COUNT(DISTINCT CASE WHEN cd_credit_rating IS NOT NULL THEN c.c_customer_sk END) AS rated_customers
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.c_customer_sk
),
SeasonalReturns AS (
    SELECT 
        sr.refunded_customer_sk, 
        COUNT(sr.return_quantity) AS total_returns,
        SUM(sr.return_amt) AS total_return_amount,
        COUNT(CASE WHEN sr_reason_sk IS NULL THEN 1 END) AS null_reason_count
    FROM 
        store_returns sr
    WHERE 
        sr.returned_date_sk IN (
            SELECT d_date_sk FROM date_dim WHERE d_date BETWEEN '2023-06-01' AND '2023-08-31'
        )
    GROUP BY 
        sr.refunded_customer_sk
)
SELECT 
    cs.c_customer_sk,
    cs.total_orders,
    cs.female_orders,
    cs.married_orders,
    cs.rated_customers,
    sr.total_returns,
    sr.total_return_amount,
    COALESCE(rs.total_net_profit, 0) AS net_profit,
    CASE 
        WHEN sr.total_return_amount > 500 THEN 'High Return'
        WHEN sr.total_return_amount BETWEEN 200 AND 500 THEN 'Medium Return'
        ELSE 'Low Return'
    END AS return_category
FROM 
    CustomerStats cs
LEFT JOIN 
    SeasonalReturns sr ON cs.c_customer_sk = sr.refunded_customer_sk
LEFT JOIN 
    RankedSales rs ON cs.c_customer_sk = (
        SELECT rs2.ws_item_sk
        FROM RankedSales rs2
        WHERE rs2.total_quantity > 10
        ORDER BY rs2.total_net_profit DESC
        OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY
    )
ORDER BY 
    return_category ASC, 
    cs.total_orders DESC, 
    net_profit DESC
FETCH FIRST 100 ROWS ONLY;
