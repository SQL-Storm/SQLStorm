
WITH RECURSIVE category_sales AS (
    SELECT 
        i_category_id,
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws_order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY i_category_id ORDER BY SUM(ws_ext_sales_price) DESC) AS rn
    FROM 
        web_sales
    JOIN 
        item ON ws_item_sk = i_item_sk
    GROUP BY 
        i_category_id
    HAVING 
        SUM(ws_ext_sales_price) > 10000
),
sales_data AS (
    SELECT 
        ca_state,
        SUM(ws_ext_sales_price) AS state_sales,
        COUNT(DISTINCT ws_order_number) AS state_orders,
        COUNT(DISTINCT ws_bill_customer_sk) AS unique_customers
    FROM 
        web_sales
    JOIN 
        customer ON ws_bill_customer_sk = c_customer_sk
    JOIN 
        customer_address ON c_current_addr_sk = ca_address_sk
    WHERE 
        ws_sold_date_sk BETWEEN 20220101 AND 20221231
    GROUP BY 
        ca_state
),
top_states AS (
    SELECT 
        ca_state, 
        state_sales,
        RANK() OVER (ORDER BY state_sales DESC) AS sales_rank
    FROM 
        sales_data
),
final_sales AS (
    SELECT 
        cs.i_category_id,
        cs.total_sales,
        ts.ca_state,
        ts.state_sales,
        ts.unique_customers
    FROM 
        category_sales cs
    JOIN 
        top_states ts ON cs.rn = 1
    WHERE 
        cs.total_sales > 50000
    ORDER BY 
        ts.state_sales DESC
)
SELECT 
    f.i_category_id AS category_id,
    f.total_sales,
    f.ca_state AS state,
    f.state_sales,
    COALESCE(SUM(ws.ws_quantity), 0) AS total_quantity,
    AVG(f.total_sales) OVER (PARTITION BY f.i_category_id) AS avg_sales,
    COUNT(DISTINCT f.unique_customers) AS unique_customers
FROM 
    final_sales f
LEFT JOIN 
    web_sales ws ON f.i_category_id = ws.ws_item_sk
GROUP BY 
    f.i_category_id, f.ca_state, f.total_sales, f.state_sales
ORDER BY 
    f.state_sales DESC, f.total_sales DESC;
