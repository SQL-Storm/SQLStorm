
WITH RECURSIVE TimeFrames AS (
    SELECT d_date_sk, d_date, d_year, d_month_seq
    FROM date_dim
    WHERE d_date = (SELECT MAX(d_date) FROM date_dim)

    UNION ALL

    SELECT d.d_date_sk, d.d_date, d.d_year, d.d_month_seq
    FROM date_dim d
    JOIN TimeFrames tf ON d.d_date_sk = tf.d_date_sk - 1
    WHERE tf.d_year = d.d_year
),
SalesSummary AS (
    SELECT 
        ws.web_site_id,
        SUM(ws.ws_net_profit) AS total_net_profit,
        COUNT(ws.ws_order_number) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_id ORDER BY SUM(ws.ws_net_profit) DESC) AS rank
    FROM web_sales ws
    JOIN web_site w ON ws.ws_web_site_sk = w.web_site_sk
    JOIN TimeFrames tf ON ws.ws_sold_date_sk = tf.d_date_sk
    GROUP BY ws.web_site_id
),
TopSales AS (
    SELECT 
        ss.web_site_id,
        ss.total_net_profit,
        ss.total_sales,
        (s.c_first_name || ' ' || s.c_last_name) AS top_customer,
        s.c_email_address
    FROM SalesSummary ss
    JOIN customer s ON ss.total_sales = (SELECT COUNT(*)
                                          FROM web_sales ws_inner
                                          WHERE ws_inner.ws_bill_customer_sk = s.c_customer_sk
                                          AND ws_inner.ws_web_site_sk = (
                                              SELECT ws.web_site_sk FROM web_sales ws
                                              WHERE ws.web_site_id = ss.web_site_id
                                              LIMIT 1
                                          ))
    WHERE ss.rank = 1
),
CustomerDemographics AS (
    SELECT 
        cd.cd_gender,
        hd.hd_buy_potential,
        COUNT(*) AS demographic_count
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
    GROUP BY cd.cd_gender, hd.hd_buy_potential
)
SELECT 
    ts.web_site_id,
    ts.total_net_profit,
    ts.total_sales,
    ts.top_customer,
    ts.c_email_address,
    cd.cd_gender,
    cd.hd_buy_potential,
    cd.demographic_count
FROM TopSales ts
LEFT JOIN CustomerDemographics cd ON cd.demographic_count > 0
ORDER BY ts.total_net_profit DESC, cd.demographic_count DESC
FETCH FIRST 10 ROWS ONLY;
