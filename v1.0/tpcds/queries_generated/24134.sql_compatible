
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        c.c_preferred_cust_flag,
        ss.ss_sold_date_sk,
        ss.ss_net_paid,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY ss.ss_sold_date_sk DESC) AS recent_sales_rank
    FROM 
        customer c
    LEFT JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    WHERE 
        c.c_preferred_cust_flag = 'Y'
), 
eligible_customers AS (
    SELECT 
        sh.c_customer_sk,
        sh.c_first_name,
        sh.c_last_name,
        SUM(sh.ss_net_paid) AS total_spent
    FROM 
        sales_hierarchy sh
    WHERE 
        sh.recent_sales_rank <= 5
    GROUP BY 
        sh.c_customer_sk, sh.c_first_name, sh.c_last_name
    HAVING 
        SUM(sh.ss_net_paid) > (
            SELECT 
                AVG(total_spent) 
            FROM 
                (SELECT 
                    SUM(ss_net_paid) AS total_spent 
                FROM 
                    store_sales 
                GROUP BY 
                    ss_customer_sk) AS avg_sales
        )
)
SELECT 
    c.c_customer_sk AS c_customer_id,
    c.c_first_name,
    c.c_last_name,
    ca.ca_city,
    COALESCE(SUM(ss.ss_net_paid), 0) AS total_store_spent,
    FIRST_VALUE(ss.ss_net_paid) OVER (PARTITION BY c.c_customer_sk ORDER BY ss.ss_sold_date_sk DESC) AS latest_purchase
FROM 
    customer c
LEFT JOIN 
    customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN 
    store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
INNER JOIN 
    eligible_customers ec ON c.c_customer_sk = ec.c_customer_sk
GROUP BY 
    c.c_customer_sk, c.c_first_name, c.c_last_name, ca.ca_city
HAVING 
    COALESCE(SUM(ss.ss_net_paid), 0) IS NOT NULL AND MAX(ss.ss_sold_date_sk) < (SELECT MAX(d_date) FROM date_dim)
ORDER BY 
    total_store_spent DESC, c.c_last_name ASC;
