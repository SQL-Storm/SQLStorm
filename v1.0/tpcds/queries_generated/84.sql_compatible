
WITH regional_sales AS (
    SELECT 
        c.c_customer_id, 
        s.s_store_name, 
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    JOIN 
        store s ON s.s_store_sk = ws.ws_store_sk
    WHERE 
        ws.ws_sold_date_sk BETWEEN 5000 AND 5365
    GROUP BY 
        c.c_customer_id, s.s_store_name
),
average_sales AS (
    SELECT 
        rs.c_customer_id, 
        rs.s_store_name, 
        AVG(rs.total_sales) OVER (PARTITION BY rs.s_store_name) AS avg_sales
    FROM 
        regional_sales rs
),
customer_demographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender, 
        cd.cd_marital_status, 
        cd.cd_purchase_estimate
    FROM 
        customer_demographics cd
    WHERE 
        cd.cd_purchase_estimate IS NOT NULL
),
final_report AS (
    SELECT 
        ads.c_customer_id,
        ads.s_store_name,
        ads.total_sales,
        ads.total_orders,
        as.avg_sales,
        cd.cd_gender,
        cd.cd_marital_status
    FROM 
        regional_sales ads
    JOIN 
        average_sales as ON ads.c_customer_id = as.c_customer_id AND ads.s_store_name = as.s_store_name
    LEFT JOIN 
        customer_demographics cd ON cd.cd_demo_sk = ads.c_customer_id -- Corrected join condition
)
SELECT 
    f.c_customer_id,
    f.s_store_name,
    f.total_sales,
    f.total_orders,
    f.avg_sales,
    COALESCE(NULLIF(f.total_sales, f.avg_sales), 'Sales equal to average') AS sales_status,
    ROW_NUMBER() OVER (PARTITION BY f.s_store_name ORDER BY f.total_sales DESC) AS sales_rank
FROM 
    final_report f
WHERE 
    f.total_sales > 0
ORDER BY 
    f.s_store_name, f.total_sales DESC;
