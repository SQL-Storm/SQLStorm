
WITH RECURSIVE sales_data AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_profit) AS total_profit,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_profit) DESC) AS profit_rank
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk

    UNION ALL
    
    SELECT 
        cs_item_sk, 
        SUM(cs_quantity) AS total_quantity,
        SUM(cs_net_profit) AS total_profit,
        DENSE_RANK() OVER (PARTITION BY cs_item_sk ORDER BY SUM(cs_net_profit) DESC) AS profit_rank
    FROM 
        catalog_sales
    GROUP BY 
        cs_item_sk
),
customer_activity AS (
    SELECT 
        c.c_customer_sk,
        ca.ca_address_sk,
        COUNT(DISTINCT CASE WHEN ws.web_site_sk IS NOT NULL THEN ws.ws_order_number END) AS web_orders,
        COUNT(DISTINCT CASE WHEN cs.cs_item_sk IS NOT NULL THEN cs.cs_order_number END) AS catalog_orders
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN 
        catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    LEFT JOIN 
        customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    GROUP BY 
        c.c_customer_sk, ca.ca_address_sk
),
return_data AS (
    SELECT 
        sr_customer_sk,
        SUM(sr_return_quantity) AS total_returns,
        COALESCE(SUM(sr_return_amt_inc_tax), 0) AS total_return_amt,
        COUNT(DISTINCT sr_ticket_number) AS return_count
    FROM 
        store_returns
    GROUP BY 
        sr_customer_sk
),
final_report AS (
    SELECT 
        ca.c_customer_sk, 
        COALESCE(ca.web_orders, 0) AS web_orders_count, 
        COALESCE(ca.catalog_orders, 0) AS catalog_orders_count,
        COALESCE(rd.total_returns, 0) AS total_returns,
        COALESCE(rd.total_return_amt, 0) AS total_return_amt,
        sd.total_quantity AS sold_quantity,
        sd.total_profit AS sold_profit,
        sd.profit_rank
    FROM 
        customer_activity ca
    LEFT JOIN 
        return_data rd ON ca.c_customer_sk = rd.sr_customer_sk
    LEFT JOIN 
        sales_data sd ON ca.c_customer_sk = sd.ws_item_sk
)
SELECT 
    f.c_customer_sk,
    f.web_orders_count,
    f.catalog_orders_count,
    f.total_returns,
    f.total_return_amt,
    f.sold_quantity,
    f.sold_profit,
    f.profit_rank,
    CASE 
        WHEN f.total_return_amt IS NULL OR f.total_returns = 0 THEN 'No returns' 
        ELSE 'With returns' 
    END AS return_status,
    CASE 
        WHEN f.sold_profit IS NULL OR f.sold_profit = 0 THEN 'No sales' 
        ELSE 'Sales made' 
    END AS sales_status
FROM 
    final_report f
WHERE 
    f.web_orders_count > 0 OR f.catalog_orders_count > 0
ORDER BY 
    f.profit_rank NULLS LAST;
