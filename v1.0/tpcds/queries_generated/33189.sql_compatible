
WITH RECURSIVE DateHierarchy AS (
    SELECT d_date_sk, d_date, d_year, d_month_seq, d_week_seq, d_quarter_seq,
           ROW_NUMBER() OVER (PARTITION BY d_year ORDER BY d_date) AS rn
    FROM date_dim
    WHERE d_date >= '2022-01-01' AND d_date <= '2022-12-31'
),
TopStores AS (
    SELECT s_store_sk, s_store_name, SUM(ss_net_profit) AS total_profit
    FROM store
    JOIN store_sales ON store.s_store_sk = store_sales.ss_store_sk
    WHERE ss_sold_date_sk IN (SELECT d_date_sk FROM DateHierarchy)
    GROUP BY s_store_sk, s_store_name
    HAVING SUM(ss_net_profit) > 10000
),
CustomerStats AS (
    SELECT c.c_customer_sk, 
           COUNT(DISTINCT ws_order_number) AS total_orders,
           SUM(ws_net_profit) AS total_spent,
           CD.cd_gender,
           ROW_NUMBER() OVER (PARTITION BY CD.cd_gender ORDER BY SUM(ws_net_profit) DESC) AS gender_order
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_ship_customer_sk
    LEFT JOIN customer_demographics CD ON c.c_current_cdemo_sk = CD.cd_demo_sk
    GROUP BY c.c_customer_sk, CD.cd_gender
),
CombinedData AS (
    SELECT s.s_store_name, cs.total_orders, cs.total_spent
    FROM TopStores s
    LEFT JOIN CustomerStats cs ON cs.total_orders > 5
)
SELECT store_name, 
       COALESCE(total_orders, 0) AS total_orders, 
       COALESCE(total_spent, 0) AS total_spent,
       CASE 
           WHEN COALESCE(total_spent, 0) > 10000 THEN 'High Value' 
           WHEN COALESCE(total_spent, 0) BETWEEN 5000 AND 10000 THEN 'Medium Value'
           ELSE 'Low Value'
       END AS customer_value_category
FROM CombinedData
ORDER BY total_spent DESC
LIMIT 10;
