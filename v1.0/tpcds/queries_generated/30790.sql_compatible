
WITH RECURSIVE sales_cte AS (
    SELECT 
        ss_store_sk,
        SUM(ss_net_paid) AS total_sales,
        COUNT(ss_ticket_number) AS sales_count,
        ROW_NUMBER() OVER (PARTITION BY ss_store_sk ORDER BY SUM(ss_net_paid) DESC) AS sales_rank
    FROM store_sales
    GROUP BY ss_store_sk
),
average_sales AS (
    SELECT 
        AVG(total_sales) AS avg_sales,
        AVG(sales_count) AS avg_count
    FROM sales_cte
),
sales_analysis AS (
    SELECT 
        s.s_store_name,
        c.cd_gender,
        SUM(ss.ss_net_paid) AS total_store_sales,
        CASE 
            WHEN SUM(ss.ss_net_paid) > (SELECT avg_sales FROM average_sales) THEN 'Above Average'
            WHEN SUM(ss.ss_net_paid) < (SELECT avg_sales FROM average_sales) THEN 'Below Average'
            ELSE 'Average'
        END AS sales_performance
    FROM store s
    JOIN store_sales ss ON s.s_store_sk = ss.ss_store_sk
    JOIN customer c ON ss.ss_customer_sk = c.c_customer_sk
    GROUP BY s.s_store_name, c.cd_gender
),
returned_sales AS (
    SELECT 
        sr_store_sk,
        SUM(sr_return_amt_inc_tax) AS total_returned
    FROM store_returns
    GROUP BY sr_store_sk
)
SELECT 
    sa.s_store_name,
    sa.cd_gender,
    sa.total_store_sales,
    sa.sales_performance,
    COALESCE(rs.total_returned, 0) AS total_returns,
    (sa.total_store_sales - COALESCE(rs.total_returned, 0)) AS net_sales
FROM sales_analysis sa
LEFT JOIN returned_sales rs ON sa.s_store_name = rs.sr_store_sk
ORDER BY net_sales DESC
OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;
