
WITH ranked_sales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        ws.ws_ext_discount_amt,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS price_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
),
sales_summary AS (
    SELECT 
        item.i_item_id,
        COUNT(DISTINCT rs.ws_order_number) AS num_sales,
        SUM(rs.ws_sales_price) AS total_sales,
        AVG(rs.ws_sales_price) AS avg_sales_price,
        MAX(CASE WHEN rs.price_rank = 1 THEN rs.ws_sales_price ELSE NULL END) AS max_price
    FROM 
        ranked_sales rs
    JOIN 
        item ON item.i_item_sk = rs.ws_item_sk
    GROUP BY 
        item.i_item_id
),
category_summary AS (
    SELECT 
        i_category,
        SUM(num_sales) AS total_items_sold,
        SUM(total_sales) AS total_sales_value,
        AVG(avg_sales_price) AS avg_price_per_item,
        COUNT(DISTINCT i_item_id) AS unique_items
    FROM 
        sales_summary
    JOIN 
        item ON item.i_item_sk = sales_summary.i_item_id
    GROUP BY 
        i_category
),
final_summary AS (
    SELECT 
        cs.i_category AS category,
        cs.total_items_sold,
        cs.total_sales_value,
        cs.avg_price_per_item,
        COALESCE(NULLIF(cs.unique_items, 0), 1) AS unique_items
    FROM 
        category_summary cs
    WHERE 
        cs.total_sales_value > (
            SELECT 
                AVG(total_sales_value) 
            FROM 
                category_summary
        )
)
SELECT 
    f.category,
    f.total_items_sold,
    f.total_sales_value,
    f.avg_price_per_item,
    f.unique_items,
    CASE 
        WHEN f.unique_items < 10 THEN 'Low Inventory'
        WHEN f.unique_items >= 10 AND f.unique_items <= 50 THEN 'Moderate Inventory'
        ELSE 'High Inventory'
    END AS inventory_status
FROM 
    final_summary f
LEFT JOIN 
    promotion p ON f.category = p.p_promo_name
WHERE 
    (p.p_start_date_sk <= '2002-10-01' OR p.p_start_date_sk IS NULL)
    AND (p.p_end_date_sk >= '2002-10-01' OR p.p_end_date_sk IS NULL)
ORDER BY 
    f.total_sales_value DESC
LIMIT 100;
