
WITH RECURSIVE sales_data AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        ws_quantity,
        ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk) AS rn
    FROM 
        web_sales
    UNION ALL
    SELECT 
        cs_sold_date_sk,
        cs_item_sk,
        cs_quantity,
        cs_sales_price,
        ROW_NUMBER() OVER (PARTITION BY cs_item_sk ORDER BY cs_sold_date_sk) AS rn
    FROM 
        catalog_sales
    WHERE 
        cs_item_sk IS NOT NULL
),
customer_summary AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        COUNT(ws_quantity) AS total_orders,
        SUM(ws_sales_price) AS total_spent,
        CASE 
            WHEN SUM(ws_sales_price) IS NULL THEN 'No Purchases'
            ELSE 'Purchased'
        END AS purchase_status
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_id, cd.cd_gender, cd.cd_marital_status
),
item_returns AS (
    SELECT 
        cr_item_sk,
        SUM(cr_return_quantity) AS total_returns,
        SUM(cr_return_amt) AS total_return_amount
    FROM 
        catalog_returns
    GROUP BY 
        cr_item_sk
)
SELECT 
    cs.c_customer_id,
    cs.total_orders,
    cs.total_spent,
    COALESCE(ir.total_returns, 0) AS total_returns,
    COALESCE(ir.total_return_amount, 0) AS total_return_amount,
    COUNT(DISTINCT sd.ws_item_sk) AS unique_items_sold
FROM 
    customer_summary cs
LEFT JOIN 
    item_returns ir ON cs.total_orders = ir.total_returns
LEFT JOIN 
    sales_data sd ON cs.total_orders = sd.ws_quantity
WHERE 
    cs.total_spent > (SELECT AVG(total_spent) FROM customer_summary)
    OR cs.total_orders > 10
GROUP BY 
    cs.c_customer_id, cs.total_orders, cs.total_spent, ir.total_returns, ir.total_return_amount
ORDER BY 
    cs.total_spent DESC
LIMIT 100;
