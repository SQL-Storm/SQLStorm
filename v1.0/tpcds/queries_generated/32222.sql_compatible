
WITH RECURSIVE sales_cte AS (
    SELECT 
        ws_item_sk, 
        ws_order_number, 
        ws_quantity, 
        ws_sales_price, 
        ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_order_number) AS rn
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN 2457879 AND 2457885
),
missing_sales AS (
    SELECT 
        item.i_item_id,
        COALESCE(NULLIF(AVG(sales_cte.ws_sales_price), 0), 0) AS avg_sales_price,
        COUNT(sales_cte.ws_quantity) AS total_quantity_sold
    FROM item
    LEFT JOIN sales_cte ON item.i_item_sk = sales_cte.ws_item_sk
    WHERE item.i_current_price IS NOT NULL
    GROUP BY item.i_item_id
    HAVING COUNT(sales_cte.ws_quantity) < 5
),
total_returns AS (
    SELECT 
        cr_item_sk,
        SUM(cr_return_quantity) AS total_return_quantity,
        SUM(cr_return_amt) AS total_return_amount
    FROM catalog_returns
    WHERE cr_returned_date_sk BETWEEN 2457879 AND 2457885
    GROUP BY cr_item_sk
)
SELECT 
    item.i_item_id AS item_id,
    missing_sales.avg_sales_price,
    COALESCE(total_returns.total_return_quantity, 0) AS return_quantity,
    COALESCE(total_returns.total_return_amount, 0) AS return_amount,
    CASE
        WHEN missing_sales.avg_sales_price > 0 
        THEN (COALESCE(total_returns.total_return_amount, 0) / NULLIF(missing_sales.avg_sales_price, 0))
        ELSE NULL
    END AS return_ratio
FROM missing_sales
LEFT JOIN total_returns ON missing_sales.i_item_id = (SELECT i_item_id FROM item WHERE i_item_sk = total_returns.cr_item_sk)
JOIN item ON missing_sales.i_item_id = item.i_item_id
ORDER BY return_ratio DESC
LIMIT 10;
