
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ss_store_sk,
        SUM(ss_quantity) AS total_quantity,
        SUM(ss_net_paid) AS total_sales,
        1 AS level
    FROM store_sales
    WHERE ss_sold_date_sk = (SELECT MAX(ss_sold_date_sk) FROM store_sales)
    GROUP BY ss_store_sk
    
    UNION ALL
    
    SELECT 
        ss_store_sk,
        SUM(ss_quantity) AS total_quantity,
        SUM(ss_net_paid) AS total_sales,
        level + 1
    FROM store_sales
    JOIN SalesCTE ON store_sales.ss_store_sk = SalesCTE.ss_store_sk
    WHERE level < 5
    GROUP BY ss_store_sk, level
),
CustomerDetails AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        ca.ca_city,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY c.c_last_name) AS gender_rank
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
)
SELECT 
    sd.ss_store_sk,
    sd.total_quantity,
    sd.total_sales,
    cd.c_first_name,
    cd.c_last_name,
    cd.cd_gender,
    COALESCE(cd.ca_city, 'Unknown') AS city,
    CASE 
        WHEN sd.total_sales > 1000 THEN 'High'
        WHEN sd.total_sales BETWEEN 500 AND 1000 THEN 'Medium'
        ELSE 'Low'
    END AS sales_category
FROM SalesCTE sd
LEFT JOIN CustomerDetails cd ON cd.gender_rank = (SELECT MAX(gender_rank) FROM CustomerDetails)
WHERE sd.total_quantity > 50
ORDER BY sd.total_sales DESC;
