
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws_order_number,
        ws_sales_price,
        RANK() OVER (PARTITION BY ws.web_site_sk ORDER BY ws_sales_price DESC) AS SalesRank
    FROM 
        web_sales ws
    WHERE 
        ws_sales_price IS NOT NULL
        AND ws_sales_price > COALESCE((SELECT AVG(ws_ext_sales_price) FROM web_sales WHERE ws_sold_date_sk >= 20210101), 0)
),
HighValueReturns AS (
    SELECT 
        wr.returning_customer_sk,
        SUM(wr.return_amt) AS TotalReturnAmt
    FROM 
        web_returns wr
    WHERE 
        wr_return_quantity > 0
        AND wr_return_amt IS NOT NULL
    GROUP BY 
        wr.returning_customer_sk
    HAVING 
        SUM(wr.return_amt) > 100
),
FinalResults AS (
    SELECT 
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        COALESCE(s.SalesRank, 0) AS Rank,
        COALESCE(r.TotalReturnAmt, 0) AS ReturnAmount
    FROM 
        customer c
    LEFT JOIN 
        RankedSales s ON c.c_customer_sk = s.web_site_sk
    LEFT JOIN 
        HighValueReturns r ON c.c_customer_sk = r.returning_customer_sk
)
SELECT 
    fr.c_customer_id,
    fr.c_first_name,
    fr.c_last_name,
    fr.Rank AS SalesRank,
    fr.ReturnAmount,
    CASE 
        WHEN fr.ReturnAmount > 0 THEN 'High Return'
        ELSE 'Low Return'
    END AS ReturnCategory
FROM 
    FinalResults fr
WHERE 
    fr.Rank IS NULL OR fr.ReturnAmount > 50
ORDER BY 
    fr.ReturnAmount DESC;
