
WITH RECURSIVE daily_sales AS (
    SELECT 
        d.d_date AS sales_date,
        SUM(ws.ws_ext_sales_price) AS total_sales
    FROM 
        date_dim d
    LEFT JOIN 
        web_sales ws ON d.d_date_sk = ws.ws_sold_date_sk
    GROUP BY 
        d.d_date
    UNION ALL
    SELECT 
        sales_date + INTERVAL '1 DAY',
        (SELECT SUM(ws.ws_ext_sales_price) FROM web_sales ws WHERE ws.ws_sold_date_sk = sales_date + INTERVAL '1 DAY')
    FROM 
        daily_sales
    WHERE 
        sales_date < LAST_DAY(CURRENT_DATE)
),
customer_income AS (
    SELECT 
        c.c_customer_sk,
        hd.hd_income_band_sk,
        CASE 
            WHEN hd.hd_buy_potential = 'High' THEN 1
            WHEN hd.hd_buy_potential = 'Medium' THEN 0.5
            ELSE 0
        END AS buy_potential_score
    FROM 
        customer c
    JOIN 
        household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
),
sales_summary AS (
    SELECT 
        ds.sales_date,
        ci.hd_income_band_sk,
        SUM(ci.buy_potential_score) AS total_buy_potential,
        COALESCE(SUM(ds.total_sales), 0) AS total_sales
    FROM 
        daily_sales ds
    LEFT JOIN 
        customer_income ci ON ds.sales_date = ci.hd_income_band_sk
    GROUP BY 
        ds.sales_date, ci.hd_income_band_sk
)
SELECT 
    s.sales_date,
    s.hd_income_band_sk,
    s.total_buy_potential,
    s.total_sales,
    CASE 
        WHEN s.total_sales > 0 THEN s.total_sales / NULLIF(s.total_buy_potential, 0)
        ELSE NULL
    END AS sales_per_buy_potential
FROM 
    sales_summary s
ORDER BY 
    s.sales_date;
