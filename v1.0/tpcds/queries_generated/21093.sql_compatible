
WITH SalesData AS (
    SELECT 
        ws.web_site_id,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        AVG(ws.ws_net_profit) AS avg_net_profit,
        MAX(ws.ws_sales_price) AS max_sale,
        MIN(ws.ws_sales_price) AS min_sale,
        DENSE_RANK() OVER (PARTITION BY ws.web_site_id ORDER BY SUM(ws.ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    INNER JOIN 
        date_dim dd ON ws.ws_sold_date_sk = dd.d_date_sk
    WHERE 
        dd.d_year = 2023
    GROUP BY 
        ws.web_site_id
),
TopSales AS (
    SELECT 
        web_site_id,
        total_sales,
        total_orders,
        avg_net_profit,
        sales_rank
    FROM 
        SalesData
    WHERE 
        sales_rank = 1
),
CustomerInfo AS (
    SELECT 
        c.c_customer_id,
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Undefined'
        END AS gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        COALESCE(hd.hd_buy_potential, 'Unknown') AS buy_potential,
        DENSE_RANK() OVER (PARTITION BY hd.hd_income_band_sk ORDER BY cd.cd_purchase_estimate DESC) AS income_rank
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        household_demographics hd ON hd.hd_demo_sk = cd.cd_demo_sk
),
FinalReport AS (
    SELECT 
        ci.c_customer_id,
        ci.gender,
        ci.cd_marital_status,
        ci.cd_purchase_estimate,
        ci.buy_potential,
        ts.total_sales,
        ts.total_orders,
        ts.avg_net_profit
    FROM 
        CustomerInfo ci
    JOIN 
        TopSales ts ON ci.cd_purchase_estimate > 1000
    WHERE 
        ci.income_rank <= 3
)
SELECT 
    freport.c_customer_id,
    freport.gender,
    freport.cd_marital_status,
    freport.buy_potential,
    CASE 
        WHEN freport.total_sales IS NULL THEN 'No Sales Yet'
        ELSE 'Sales Exist'
    END AS sales_status,
    freport.avg_net_profit,
    CONCAT('Customer has ', COALESCE(freport.total_orders, 0), ' order(s)') AS order_summary
FROM 
    FinalReport freport
LEFT JOIN 
    customer_address ca ON ca.ca_address_sk = freport.c_current_addr_sk
WHERE 
    ca.ca_city IS NOT NULL
    AND (ca.ca_state = 'CA' OR ca.ca_state IS NULL)
ORDER BY 
    freport.avg_net_profit DESC;
