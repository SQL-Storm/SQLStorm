
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_ext_sales_price) AS total_sales
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk > 20200101
    GROUP BY 
        ws_item_sk
    UNION ALL
    SELECT 
        cs_item_sk,
        SUM(cs_quantity) AS total_quantity,
        SUM(cs_ext_sales_price) AS total_sales
    FROM 
        catalog_sales
    WHERE 
        cs_sold_date_sk > 20200101
    GROUP BY 
        cs_item_sk
),
RankedSales AS (
    SELECT 
        item.i_item_id,
        item.i_item_desc,
        COALESCE(ws.total_quantity, 0) AS web_qty,
        COALESCE(cs.total_quantity, 0) AS catalog_qty,
        COALESCE(ws.total_sales, 0) AS web_sales,
        COALESCE(cs.total_sales, 0) AS catalog_sales,
        ROW_NUMBER() OVER (ORDER BY COALESCE(ws.total_sales, 0) + COALESCE(cs.total_sales, 0) DESC) AS sales_rank
    FROM 
        item
    LEFT JOIN 
        (SELECT 
            ws_item_sk,
            SUM(ws_quantity) AS total_quantity,
            SUM(ws_ext_sales_price) AS total_sales
         FROM 
            web_sales
         WHERE 
            ws_sold_date_sk > 20200101
         GROUP BY 
            ws_item_sk) ws ON item.i_item_sk = ws.ws_item_sk
    LEFT JOIN 
        (SELECT 
            cs_item_sk,
            SUM(cs_quantity) AS total_quantity,
            SUM(cs_ext_sales_price) AS total_sales
         FROM 
            catalog_sales
         WHERE 
            cs_sold_date_sk > 20200101
         GROUP BY 
            cs_item_sk) cs ON item.i_item_sk = cs.cs_item_sk
),
TopItems AS (
    SELECT
        *,
        CASE 
            WHEN web_qty + catalog_qty > 100 THEN 'High Demand'
            WHEN (web_qty + catalog_qty) BETWEEN 50 AND 100 THEN 'Moderate Demand'
            ELSE 'Low Demand'
        END AS demand_category
    FROM 
        RankedSales
    WHERE 
        sales_rank <= 10
)
SELECT 
    ti.i_item_id,
    ti.i_item_desc,
    ti.web_qty,
    ti.catalog_qty,
    ti.web_sales,
    ti.catalog_sales,
    ti.demand_category,
    COALESCE((
        SELECT 
            AVG(hd_income_band_sk) 
        FROM 
            household_demographics 
        WHERE 
            hd_demo_sk IN (
                SELECT c_current_hdemo_sk 
                FROM customer 
                WHERE c_customer_sk IN (
                    SELECT DISTINCT ws_bill_customer_sk 
                    FROM web_sales 
                    WHERE ws_item_sk = ti.i_item_sk
                )
            )
    ), 0) AS avg_income_band
FROM 
    TopItems ti
ORDER BY 
    ti.sales_rank;
