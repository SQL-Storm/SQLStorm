
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.web_sales_price,
        ws.ws_order_number,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.net_profit DESC) AS rank
    FROM 
        web_sales ws 
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    WHERE 
        c.c_birth_year IS NOT NULL AND 
        (c.c_birth_month IS NULL OR c.c_birth_day IS NULL OR c.c_birth_month < 6)
),
AggregateReturns AS (
    SELECT 
        wr.wr_item_sk,
        SUM(wr.wr_return_quantity) AS total_returned,
        COUNT(DISTINCT wr.wr_order_number) AS return_count
    FROM 
        web_returns wr
    JOIN 
        web_sales ws ON wr.wr_item_sk = ws.ws_item_sk
    WHERE 
        ws.ws_ship_date_sk IS NOT NULL
    GROUP BY 
        wr.wr_item_sk
),
SalesVersusReturns AS (
    SELECT 
        rwr.total_returned, 
        (COUNT(ws.ws_order_number) - COALESCE(rwr.return_count, 0)) AS net_sales,
        rwr.total_returned / NULLIF(COUNT(ws.ws_order_number) - COALESCE(rwr.return_count, 0), 0) AS return_ratio
    FROM 
        RankedSales rs
    LEFT JOIN 
        AggregateReturns rwr ON rs.ws_order_number = rwr.wr_order_number
    JOIN 
        web_sales ws ON rs.ws_order_number = ws.ws_order_number
    GROUP BY 
        rwr.total_returned, rs.ws_order_number
)
SELECT 
    rs.web_site_sk,
    SUM(net_sales) AS total_net_sales,
    AVG(return_ratio) AS avg_return_ratio
FROM 
    SalesVersusReturns AS sv
JOIN 
    RankedSales AS rs ON sv.net_sales IS NOT NULL -- Ensuring a join 
GROUP BY 
    rs.web_site_sk
HAVING 
    COUNT(rs.web_site_sk) > 2
ORDER BY 
    total_net_sales DESC
LIMIT 10;
