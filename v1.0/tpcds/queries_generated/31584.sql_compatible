
WITH RECURSIVE date_hierarchy AS (
    SELECT 
        d_date_sk,
        d_date,
        d_year,
        d_month_seq,
        d_week_seq,
        d_quarter_seq,
        d_dow,
        d_moy,
        d_dom,
        d_qoy,
        d_fy_year
    FROM date_dim
    WHERE d_date >= '2022-01-01'
    
    UNION ALL
    
    SELECT 
        d.date_sk,
        d.d_date,
        d.d_year,
        d.d_month_seq,
        d.d_week_seq,
        d.d_quarter_seq,
        d.d_dow,
        d.d_moy,
        d.d_dom,
        d.d_qoy,
        d.d_fy_year
    FROM date_dim d
    JOIN date_hierarchy dh ON dh.d_date_sk + 1 = d.d_date_sk
),
customer_stats AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Unknown'
        END AS gender,
        SUM(COALESCE(ws.ws_net_profit, 0)) AS total_profit,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender
),
daily_sales AS (
    SELECT 
        dh.d_year,
        dh.d_quarter_seq,
        SUM(ws.ws_sales_price * ws.ws_quantity) AS total_sales,
        AVG(ws.ws_sales_price) AS avg_price
    FROM web_sales ws
    JOIN date_hierarchy dh ON ws.ws_sold_date_sk = dh.d_date_sk
    GROUP BY dh.d_year, dh.d_quarter_seq
)
SELECT 
    cs.c_first_name,
    cs.c_last_name,
    cs.gender,
    r.reason_desc,
    ds.total_sales,
    ds.avg_price,
    ROW_NUMBER() OVER (PARTITION BY cs.gender ORDER BY cs.total_profit DESC) AS sales_rank
FROM customer_stats cs
JOIN (
    SELECT 
        wr.wr_returning_customer_sk,
        rr.r_reason_desc,
        COUNT(rr.r_reason_sk) AS return_count
    FROM web_returns wr
    JOIN reason rr ON wr.wr_reason_sk = rr.r_reason_sk
    GROUP BY wr.wr_returning_customer_sk, rr.r_reason_desc
) AS r ON cs.c_customer_sk = r.wr_returning_customer_sk
JOIN daily_sales ds ON ds.total_sales > 1000
ORDER BY cs.total_profit DESC, ds.avg_price ASC;
