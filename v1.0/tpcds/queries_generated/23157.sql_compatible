
WITH RecursiveSales AS (
    SELECT 
        ss_item_sk,
        SUM(ss_sales_price) AS total_sales,
        COUNT(ss_ticket_number) AS sales_count,
        ROW_NUMBER() OVER (PARTITION BY ss_item_sk ORDER BY SUM(ss_sales_price) DESC) AS sales_rank
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk > (SELECT MAX(d_date_sk) - 365 FROM date_dim) 
    GROUP BY 
        ss_item_sk
),
CustomerReturns AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returns,
        COUNT(sr_ticket_number) AS return_count,
        CASE 
            WHEN SUM(sr_return_quantity) > 0 THEN 'Returned'
            ELSE 'Not Returned'
        END AS return_status
    FROM 
        store_returns
    WHERE 
        sr_returned_date_sk >= (SELECT MAX(d_date_sk) - 365 FROM date_dim)
    GROUP BY 
        sr_item_sk
),
SalesWithReturns AS (
    SELECT 
        r.ss_item_sk,
        r.total_sales,
        COALESCE(c.total_returns, 0) AS total_returns,
        r.sales_count,
        c.return_count,
        r.sales_rank,
        CASE 
            WHEN r.sales_rank = 1 THEN 'Top Selling'
            ELSE NULL
        END AS sales_category
    FROM 
        RecursiveSales r
    LEFT JOIN 
        CustomerReturns c ON r.ss_item_sk = c.sr_item_sk
    WHERE 
        r.total_sales > 5000
),
FinalReport AS (
    SELECT 
        s.ss_item_sk,
        s.total_sales,
        s.total_returns,
        s.sales_category,
        (s.total_sales - s.total_returns) AS net_sales
    FROM 
        SalesWithReturns s
    WHERE 
        s.sales_category IS NOT NULL
    ORDER BY 
        net_sales DESC
)
SELECT 
    a.ca_city,
    a.ca_state,
    COUNT(f.ss_item_sk) AS items_sold_count,
    SUM(f.net_sales) AS total_net_sales,
    AVG(f.total_sales) AS avg_sales_per_item
FROM 
    FinalReport f
JOIN 
    customer c ON f.ss_item_sk = c.c_customer_sk
JOIN 
    customer_address a ON c.c_current_addr_sk = a.ca_address_sk
WHERE 
    a.ca_country IS NOT NULL 
    AND (f.total_net_sales < (SELECT AVG(net_sales) FROM FinalReport) OR a.ca_state IN ('NY', 'CA'))
GROUP BY 
    a.ca_city, a.ca_state
HAVING 
    SUM(f.net_sales) IS NOT NULL
ORDER BY 
    total_net_sales DESC
LIMIT 10 OFFSET 5;
