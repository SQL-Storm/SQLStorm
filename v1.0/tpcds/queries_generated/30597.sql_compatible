
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        s_store_sk,
        s_store_name,
        s_number_employees,
        s_floor_space,
        s_sales_price,
        1 AS level
    FROM store
    WHERE s_floor_space > 1000
    
    UNION ALL
    
    SELECT 
        sh.s_store_sk,
        sh.s_store_name,
        sh.s_number_employees,
        sh.s_floor_space,
        sh.s_sales_price,
        sh.level + 1
    FROM store sh
    JOIN sales_hierarchy sh_parent ON sh.s_market_id = sh_parent.s_market_id
),
customer_sales AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        AVG(ws.ws_net_profit) AS avg_profit
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_id
),
sales_stats AS (
    SELECT 
        cs.c_customer_id,
        cs.total_sales,
        cs.avg_profit,
        RANK() OVER (ORDER BY cs.total_sales DESC) AS sales_rank,
        COUNT(*) OVER () AS total_customers
    FROM customer_sales cs
)
SELECT 
    sh.s_store_name,
    COALESCE(cs.total_sales, 0) AS customer_sales_total,
    COALESCE(sh.s_number_employees, 0) AS number_of_employees,
    CASE 
        WHEN cs.total_sales > (SELECT AVG(total_sales) FROM customer_sales) THEN 'Above Average'
        ELSE 'Below Average' 
    END AS sales_category
FROM sales_hierarchy sh
LEFT JOIN sales_stats cs ON sh.s_store_sk = cs.c_customer_id
WHERE sh.level <= 3 
GROUP BY sh.s_store_name, cs.total_sales, sh.s_number_employees
ORDER BY sh.s_store_name ASC, cs.total_sales DESC;
