
WITH RankedReturns AS (
    SELECT 
        sr_returned_date_sk,
        sr_item_sk,
        sr_store_sk,
        COUNT(sr_ticket_number) AS return_count,
        SUM(sr_return_amt_inc_tax) AS total_return_amt,
        DENSE_RANK() OVER (PARTITION BY sr_item_sk ORDER BY SUM(sr_return_amt_inc_tax) DESC) AS rank
    FROM 
        store_returns
    GROUP BY 
        sr_returned_date_sk, sr_item_sk, sr_store_sk
),
CustomerInfo AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_marital_status ORDER BY cd.cd_purchase_estimate DESC) AS customer_rank
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
ItemSummary AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        SUM(ws_quantity) AS total_quantity_sold,
        AVG(ws_sales_price) AS avg_sales_price,
        i.i_current_price,
        CASE WHEN i.i_current_price IS NULL THEN 0 ELSE i.i_current_price * SUM(ws_quantity) END AS total_sales_value
    FROM 
        item i
    JOIN 
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY 
        i.i_item_sk, i.i_item_desc, i.i_current_price
)
SELECT 
    ci.c_first_name,
    ci.c_last_name,
    ci.cd_gender,
    ri.return_count,
    ri.total_return_amt,
    isum.total_quantity_sold,
    isum.avg_sales_price,
    isum.total_sales_value
FROM 
    CustomerInfo ci
LEFT JOIN 
    RankedReturns ri ON ci.c_customer_sk = ri.sr_customer_sk
LEFT JOIN 
    ItemSummary isum ON ri.sr_item_sk = isum.i_item_sk
WHERE 
    ci.customer_rank <= 5
ORDER BY 
    ri.return_count DESC, isum.total_sales_value DESC;
