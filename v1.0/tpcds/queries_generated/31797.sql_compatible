
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        ss.store_sk,
        ss.sold_date_sk,
        ss.net_profit,
        1 AS level
    FROM store_sales ss
    WHERE ss.sold_date_sk = (SELECT MAX(sold_date_sk) FROM store_sales)

    UNION ALL
    
    SELECT 
        ss.store_sk,
        ss.sold_date_sk,
        sh.net_profit + ss.net_profit AS net_profit,
        sh.level + 1
    FROM store_sales ss
    JOIN SalesHierarchy sh ON ss.store_sk = sh.store_sk 
    WHERE sh.level < 3
),
CustomerReturns AS (
    SELECT 
        sr_returning_customer_sk,
        COUNT(*) AS return_count,
        SUM(sr_return_amt) AS total_return_amt
    FROM store_returns
    GROUP BY sr_returning_customer_sk
),
CustomerDemographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        COUNT(c.c_customer_sk) AS customer_count
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY cd.cd_demo_sk, cd.cd_gender
),
ProfitAnalysis AS (
    SELECT 
        s.s_store_id,
        SUM(ss.ss_net_profit) AS total_net_profit,
        AVG(ss.ss_net_profit) AS avg_net_profit
    FROM store_sales ss
    JOIN store s ON ss.ss_store_sk = s.s_store_sk
    WHERE ss.ss_sold_date_sk BETWEEN 2450032 AND 2450080
    GROUP BY s.s_store_id
)
SELECT 
    c.c_customer_id,
    cd.cd_gender,
    ph.store_sk,
    ph.total_net_profit,
    cr.return_count,
    cr.total_return_amt,
    ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY ph.total_net_profit DESC) AS gender_rank,
    CASE 
        WHEN cr.return_count IS NULL THEN 'No Returns'
        ELSE 'Returned Customer'
    END AS return_status
FROM ProfitAnalysis ph
JOIN CustomerDemographics cd ON ph.store_sk = cd.cd_demo_sk
LEFT JOIN CustomerReturns cr ON cd.cd_demo_sk = cr.sr_returning_customer_sk
WHERE 
    ph.total_net_profit > 1000 OR 
    (cd.cd_gender = 'F' AND cr.return_count > 10)
ORDER BY ph.total_net_profit DESC, cd.cd_gender;
