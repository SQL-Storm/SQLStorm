
WITH RECURSIVE DateSequence AS (
    SELECT d_date_sk, d_date
    FROM date_dim
    WHERE d_date >= '2023-01-01'
    UNION ALL
    SELECT d.d_date_sk, d.d_date + INTERVAL '1 day'
    FROM DateSequence seq
    JOIN date_dim d ON d.d_date = seq.d_date + INTERVAL '1 day'
    WHERE seq.d_date < '2023-12-31'
),
CustomerStatistics AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_net_profit) AS total_net_profit,
        SUM(CASE WHEN cd_gender = 'F' THEN 1 ELSE 0 END) AS female_count,
        MAX(CASE WHEN cd_gender = 'M' THEN 1 ELSE 0 END) AS male_indicator,
        FIRST_VALUE(d.d_date) OVER (PARTITION BY c.c_customer_sk ORDER BY d.d_date_sk ASC) AS first_order_date,
        MAX(d.d_date) AS last_order_date
    FROM customer c
    LEFT JOIN web_sales w ON c.c_customer_sk = w.ws_bill_customer_sk
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN DateSequence d ON d.d_date_sk = w.ws_sold_date_sk
    GROUP BY c.c_customer_sk
),
WarehousePerformance AS (
    SELECT 
        w.w_warehouse_sk,
        SUM(ws_quantity) AS total_quantity_sold,
        AVG(ws_ext_sales_price) AS avg_sales_price,
        COUNT(DISTINCT ws_order_number) AS order_count,
        COUNT(DISTINCT CASE WHEN ws_ship_date_sk IS NOT NULL THEN ws_order_number END) AS shipped_orders
    FROM warehouse w
    LEFT JOIN web_sales ws ON w.w_warehouse_sk = ws.ws_warehouse_sk
    GROUP BY w.w_warehouse_sk
),
AggregatedReturns AS (
    SELECT
        sr_returning_customer_sk,
        SUM(sr_return_quantity) AS total_returned,
        AVG(sr_return_amt) AS avg_return_amount,
        COUNT(sr_return_number) AS total_return_count
    FROM store_returns
    GROUP BY sr_returning_customer_sk
    HAVING SUM(sr_return_quantity) > 0
)
SELECT 
    cs.c_customer_sk,
    cs.total_orders,
    cs.total_net_profit,
    COALESCE(ws.total_quantity_sold, 0) AS total_quantity_sold,
    COALESCE(ws.avg_sales_price, 0) AS avg_sales_price,
    COALESCE(ar.total_returned, 0) AS total_returned,
    COALESCE(ar.avg_return_amount, 0) AS avg_return_amount,
    CASE 
        WHEN cs.total_orders > 10 AND cs.total_net_profit > 5000 THEN 'High Value Customer'
        ELSE 'Regular Customer'
    END AS customer_value_category
FROM CustomerStatistics cs
LEFT JOIN WarehousePerformance ws ON cs.c_customer_sk = ws.w_warehouse_sk
LEFT JOIN AggregatedReturns ar ON cs.c_customer_sk = ar.sr_returning_customer_sk
WHERE cs.last_order_date IS NOT NULL
  AND (cs.total_orders > 0 OR ar.total_returned > 0)
ORDER BY cs.total_net_profit DESC, cs.total_orders DESC
LIMIT 100;
