
WITH RECURSIVE CustomerPurchases AS (
    SELECT 
        c.c_customer_sk,
        c.c_customer_id,
        ws.ws_sales_price,
        ws.ws_order_number,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_id ORDER BY ws.ws_order_number DESC) AS purchase_rank
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE ws.ws_sold_date_sk >= (SELECT MIN(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023)
), 
MaxPurchases AS (
    SELECT 
        c.c_customer_id,
        AVG(ws.ws_sales_price) AS avg_sales_price,
        COUNT(*) AS total_orders
    FROM CustomerPurchases c
    WHERE purchase_rank <= 5
    GROUP BY c.c_customer_id
),
HighValueCustomers AS (
    SELECT 
        mp.c_customer_id,
        mp.avg_sales_price,
        mp.total_orders,
        CASE 
            WHEN mp.avg_sales_price > 100 THEN 'High'
            WHEN mp.avg_sales_price BETWEEN 50 AND 100 THEN 'Medium'
            ELSE 'Low' 
        END AS customer_value
    FROM MaxPurchases mp
    WHERE mp.total_orders > 3
),
SalesSummary AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_net_paid_inc_tax) AS total_spent
    FROM web_sales ws
    JOIN customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    GROUP BY c.c_customer_id
)
SELECT 
    hvc.c_customer_id,
    hvc.avg_sales_price,
    hvc.total_orders,
    hvc.customer_value,
    COALESCE(ss.total_spent, 0) AS total_spent
FROM HighValueCustomers hvc
LEFT JOIN SalesSummary ss ON hvc.c_customer_id = ss.c_customer_id
ORDER BY hvc.total_orders DESC;
