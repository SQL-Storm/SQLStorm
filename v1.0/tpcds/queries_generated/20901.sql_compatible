
WITH RecursiveSales AS (
    SELECT ws_item_sk, 
           SUM(ws_quantity) AS total_quantity, 
           SUM(ws_net_profit) AS total_net_profit
    FROM web_sales
    WHERE ws_sold_date_sk >= (SELECT d_date_sk FROM date_dim WHERE d_date = '2023-01-01')
    GROUP BY ws_item_sk
), 

RankedSales AS (
    SELECT *, 
           RANK() OVER (ORDER BY total_net_profit DESC) AS rank
    FROM RecursiveSales
), 

CustomerAnalytics AS (
    SELECT c.c_customer_id, 
           cd.cd_gender, 
           cd.cd_marital_status,
           COUNT(DISTINCT ws.ws_order_number) AS total_orders,
           (SELECT COUNT(*)
            FROM store_sales ss 
            WHERE ss.ss_customer_sk = c.c_customer_sk) AS store_order_count,
           (SELECT COUNT(*)
            FROM web_returns wr 
            WHERE wr.wr_returning_customer_sk = c.c_customer_sk) AS online_return_count
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_id, cd.cd_gender, cd.cd_marital_status
), 

FinalResults AS (
    SELECT ca.*, 
           rs.total_quantity, 
           rs.total_net_profit
    FROM CustomerAnalytics ca
    LEFT JOIN RankedSales rs ON ca.total_orders = rs.rank
    WHERE ca.total_orders IS NOT NULL
)

SELECT *,
       CASE 
           WHEN total_net_profit IS NULL THEN 'No Profit'
           WHEN total_net_profit < 0 THEN 'Loss'
           ELSE 'Profit'
       END AS profit_status,
       COALESCE((SELECT COUNT(*) 
                 FROM store_returns sr 
                 WHERE sr.sr_customer_sk = c.c_customer_id 
                 AND sr.sr_return_quantity > (SELECT AVG(sr_return_quantity) 
                     FROM store_returns sr2 
                     WHERE sr2.sr_customer_sk IS NOT NULL)), 0) AS excess_returns
FROM FinalResults
ORDER BY total_net_profit DESC
LIMIT 100;
