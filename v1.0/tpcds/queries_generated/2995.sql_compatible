
WITH RankedSales AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_item_sk,
        ws.ws_quantity,
        ws.ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sold_date_sk DESC) AS rn
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN 20210101 AND 20211231
    UNION ALL
    SELECT 
        cs.cs_order_number,
        cs.cs_item_sk,
        cs.cs_quantity,
        cs.cs_sales_price,
        ROW_NUMBER() OVER (PARTITION BY cs.cs_item_sk ORDER BY cs.cs_sold_date_sk DESC) AS rn
    FROM 
        catalog_sales cs
    WHERE 
        cs.cs_sold_date_sk BETWEEN 20210101 AND 20211231
),
CustomerReturns AS (
    SELECT 
        wr.wr_order_number,
        wr.wr_item_sk,
        SUM(wr.wr_return_qty) AS total_returned_qty,
        SUM(wr.wr_return_amt) AS total_return_amt
    FROM 
        web_returns wr
    GROUP BY 
        wr.wr_order_number, wr.wr_item_sk
),
SalesSummary AS (
    SELECT 
        rs.ws_order_number,
        rs.ws_item_sk,
        SUM(rs.ws_quantity) AS total_quantity_sold,
        SUM(rs.ws_sales_price * rs.ws_quantity) AS total_sales,
        COALESCE(cr.total_returned_qty, 0) AS total_returned_qty,
        COALESCE(cr.total_return_amt, 0) AS total_return_amt,
        (SUM(rs.ws_sales_price * rs.ws_quantity) - COALESCE(cr.total_return_amt, 0)) AS net_sales
    FROM 
        RankedSales rs
    LEFT JOIN 
        CustomerReturns cr ON rs.ws_order_number = cr.wr_order_number AND rs.ws_item_sk = cr.wr_item_sk
    GROUP BY 
        rs.ws_order_number, rs.ws_item_sk
)
SELECT 
    ss.ws_order_number,
    ss.ws_item_sk,
    ss.total_quantity_sold,
    ss.total_sales,
    ss.total_returned_qty,
    ss.total_return_amt,
    ss.net_sales,
    (CASE 
        WHEN ss.net_sales < 0 THEN 'Loss'
        WHEN ss.net_sales = 0 THEN 'Break-even'
        ELSE 'Profit' 
    END) AS sales_status
FROM 
    SalesSummary ss
WHERE 
    ss.total_quantity_sold > (
        SELECT AVG(total_quantity_sold) FROM SalesSummary
    )
ORDER BY 
    ss.net_sales DESC
LIMIT 100;
