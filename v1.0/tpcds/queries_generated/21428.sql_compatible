
WITH RecursiveSales AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN (SELECT MIN(d_date_sk) FROM date_dim) AND (SELECT MAX(d_date_sk) FROM date_dim) 
        AND ws.ws_quantity > 0
    GROUP BY 
        ws.ws_item_sk
),
MaxSales AS (
    SELECT 
        rs.ws_item_sk,
        MAX(rs.total_sales) AS max_total_sales
    FROM 
        RecursiveSales rs
    GROUP BY 
        rs.ws_item_sk
),
CustomerData AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        COALESCE(hd.hd_income_band_sk, -1) AS income_band
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk 
    LEFT JOIN 
        household_demographics hd ON c.c_customer_sk = hd.hd_demo_sk
),
ItemSales AS (
    SELECT 
        item.i_item_sk,
        SUM(ss.ss_ext_sales_price) AS total_store_sales,
        AVG(ss.ss_sales_price) AS avg_sales_price
    FROM 
        store_sales ss
    JOIN 
        item ON ss.ss_item_sk = item.i_item_sk
    WHERE 
        ss.ss_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        item.i_item_sk
)
SELECT 
    cd.c_first_name,
    cd.c_last_name,
    cd.cd_gender,
    cd.cd_marital_status,
    cd.income_band,
    MAX(CASE WHEN rs.total_sales > 0 THEN rs.total_sales ELSE NULL END) AS max_web_sales,
    COALESCE(is.total_store_sales, 0) AS store_sales,
    DENSE_RANK() OVER (PARTITION BY cd.income_band ORDER BY MAX(rs.total_sales) DESC) AS web_sales_rank,
    CASE 
        WHEN MAX(rs.total_sales) IS NULL THEN 'No Sales'
        WHEN MAX(rs.total_sales) > COALESCE(is.total_store_sales, 0) THEN 'Web Dominant'
        ELSE 'Store Dominant'
    END AS sales_dominance
FROM 
    CustomerData cd
LEFT JOIN 
    RecursiveSales rs ON cd.c_customer_sk = (SELECT ws_ship_customer_sk FROM web_sales WHERE ws_item_sk = rs.ws_item_sk LIMIT 1)
LEFT JOIN 
    ItemSales is ON rs.ws_item_sk = is.i_item_sk
GROUP BY 
    cd.c_first_name, cd.c_last_name, cd.cd_gender, cd.cd_marital_status, cd.income_band
HAVING 
    MAX(rs.total_sales) IS NOT NULL
ORDER BY 
    web_sales_rank, cd.c_last_name;
