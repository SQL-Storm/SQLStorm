
WITH RECURSIVE sales_cte AS (
    SELECT 
        ss_sold_date_sk,
        ss_item_sk,
        SUM(ss_net_paid) AS total_sales
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023) - 30 AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        ss_sold_date_sk, ss_item_sk
    
    UNION ALL
    
    SELECT 
        ss_sold_date_sk,
        ss_item_sk,
        SUM(ss_net_paid) AS total_sales
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk = (SELECT MAX(ss_sold_date_sk) FROM store_sales) - 1
    GROUP BY 
        ss_sold_date_sk, ss_item_sk
),
item_sales AS (
    SELECT 
        i.i_item_id,
        i.i_item_desc,
        COALESCE(SUM(s.total_sales), 0) AS total_sales
    FROM 
        item i
    LEFT JOIN 
        sales_cte s ON i.i_item_sk = s.ss_item_sk
    GROUP BY 
        i.i_item_id, i.i_item_desc
),
customer_info AS (
    SELECT 
        c.c_customer_id,
        CONCAT(c.c_first_name, ' ', c.c_last_name) AS full_name,
        cd.cd_gender,
        cd.cd_credit_rating,
        cd.cd_marital_status,
        DENSE_RANK() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS gender_rank
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
top_customers AS (
    SELECT 
        ci.full_name,
        SUM(CASE 
            WHEN ci.gender_rank IS NULL THEN 0 
            ELSE 1 
        END) AS rank_count
    FROM 
        customer_info ci
    GROUP BY 
        ci.full_name
    HAVING 
        COUNT(ci.full_name) > 5
)
SELECT 
    i.i_item_id,
    i.i_item_desc,
    is.total_sales,
    tc.full_name,
    tc.rank_count
FROM 
    item_sales is
JOIN 
    top_customers tc ON is.total_sales > (SELECT AVG(total_sales) FROM item_sales)
ORDER BY 
    is.total_sales DESC
FETCH FIRST 10 ROWS ONLY;
