
WITH sales_summary AS (
    SELECT 
        cs_item_sk,
        SUM(cs_sales_price) AS total_sales,
        COUNT(DISTINCT cs_order_number) AS order_count,
        AVG(cs_sales_price) AS avg_sales_price
    FROM 
        catalog_sales
    WHERE 
        cs_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) - 30 FROM date_dim)
                           AND (SELECT MAX(d_date_sk) FROM date_dim)
    GROUP BY 
        cs_item_sk
),
customer_info AS (
    SELECT 
        c.c_customer_sk,
        DEMO.cd_gender,
        DEMO.cd_marital_status,
        ADDR.ca_city,
        ADDR.ca_state,
        COUNT(*) OVER (PARTITION BY DEMO.cd_gender) AS gender_count,
        COUNT(*) OVER (PARTITION BY DEMO.cd_marital_status) AS marital_count
    FROM 
        customer c
    JOIN 
        customer_demographics DEMO ON c.c_current_cdemo_sk = DEMO.cd_demo_sk
    JOIN 
        customer_address ADDR ON c.c_current_addr_sk = ADDR.ca_address_sk
),
ranked_sales AS (
    SELECT 
        ss.cs_item_sk,
        ss.total_sales,
        RANK() OVER (ORDER BY ss.total_sales DESC) AS sales_rank
    FROM 
        sales_summary ss
)
SELECT 
    c.c_customer_id,
    SUM(r.total_sales) AS total_spent,
    C.ca_city AS city,
    C.ca_state AS state,
    CASE 
        WHEN SUM(r.total_sales) IS NULL THEN 'No Purchases'
        WHEN SUM(r.total_sales) > 1000 THEN 'High Value Customer'
        ELSE 'Regular Customer' 
    END AS customer_category,
    DENSE_RANK() OVER (ORDER BY SUM(r.total_sales) DESC) AS customer_ranking
FROM 
    customer_info C
LEFT JOIN 
    ranked_sales r ON C.c_customer_sk = r.cs_item_sk
GROUP BY 
    C.c_customer_id, C.ca_city, C.ca_state
HAVING 
    COUNT(DISTINCT r.cs_item_sk) > 1
ORDER BY 
    customer_ranking;
