
WITH RECURSIVE sales_data AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales_price,
        ws_ship_mode_sk,
        1 AS level
    FROM web_sales
    GROUP BY ws_item_sk, ws_ship_mode_sk
    UNION ALL
    SELECT 
        sd.ws_item_sk,
        sd.total_quantity + ws.ws_quantity,
        sd.total_sales_price + ws.ws_sales_price,
        ws.ws_ship_mode_sk,
        sd.level + 1
    FROM sales_data sd
    JOIN web_sales ws ON sd.ws_item_sk = ws.ws_item_sk 
    WHERE sd.level < 10
),
avg_sales AS (
    SELECT 
        sd.ws_item_sk,
        AVG(NULLIF(sd.total_sales_price, 0) / NULLIF(sd.total_quantity, 0)) AS avg_price_per_unit
    FROM sales_data sd
    GROUP BY sd.ws_item_sk
),
total_sales AS (
    SELECT 
        sd.ws_item_sk,
        sd.total_quantity,
        sd.total_sales_price,
        r.r_reason_desc,
        COALESCE(av.avg_price_per_unit, 0) AS avg_price_per_unit
    FROM sales_data sd
    LEFT JOIN reason r ON r.r_reason_sk = (sd.ws_ship_mode_sk % 5) + 1
    LEFT JOIN avg_sales av ON av.ws_item_sk = sd.ws_item_sk
    WHERE sd.total_sales_price > 1000
)
SELECT 
    t.ws_item_sk,
    t.total_quantity,
    t.total_sales_price,
    t.avg_price_per_unit,
    CASE 
        WHEN t.total_quantity >= 100 THEN 'High Volume'
        ELSE 'Low Volume' 
    END AS sales_volume_category
FROM total_sales t
ORDER BY t.total_sales_price DESC
FETCH FIRST 10 ROWS ONLY;
