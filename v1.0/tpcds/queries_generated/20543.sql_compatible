
WITH RECURSIVE item_hierarchy AS (
    SELECT i_item_sk, i_item_id, i_rec_start_date, i_rec_end_date, i_item_desc, i_current_price, 1 AS hierarchy_level
    FROM item
    WHERE i_rec_start_date < DATE '2002-10-01' AND (i_rec_end_date IS NULL OR i_rec_end_date > DATE '2002-10-01')

    UNION ALL

    SELECT ih.i_item_sk, ih.i_item_id, ih.i_rec_start_date, ih.i_rec_end_date, CONCAT(i.i_item_desc, ' - ', ih.i_item_desc), 
           i.i_current_price * ih.i_current_price AS calculated_price, ih.hierarchy_level + 1
    FROM item_hierarchy ih
    JOIN item i ON ih.i_item_sk = i.i_item_sk
    WHERE ih.hierarchy_level < 3
),
sales_summary AS (
    SELECT 
        ws_bill_customer_sk,
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        AVG(ws_net_profit) AS avg_profit
    FROM web_sales
    WHERE ws_sold_date_sk >= (
        SELECT d_date_sk FROM date_dim WHERE d_date = DATEADD(month, -3, DATE '2002-10-01')
    )
    GROUP BY ws_bill_customer_sk
),
returns_summary AS (
    SELECT 
        sr_customer_sk,
        SUM(sr_return_amt_inc_tax) AS total_returns,
        COUNT(sr_item_sk) AS return_count
    FROM store_returns
    GROUP BY sr_customer_sk
),
final_summary AS (
    SELECT 
        cs.c_customer_sk,
        cs.c_first_name,
        cs.c_last_name,
        COALESCE(ss.total_sales, 0) AS total_sales,
        COALESCE(rs.total_returns, 0) AS total_returns,
        CASE
            WHEN COALESCE(ss.total_sales, 0) > 0 THEN (COALESCE(rs.total_returns, 0) / COALESCE(ss.total_sales, 0)) * 100
            ELSE NULL
        END AS return_percentage,
        ROW_NUMBER() OVER (ORDER BY (COALESCE(ss.total_sales, 0) - COALESCE(rs.total_returns, 0)) DESC) AS customer_rank
    FROM customer cs
    LEFT JOIN sales_summary ss ON cs.c_customer_sk = ss.ws_bill_customer_sk
    LEFT JOIN returns_summary rs ON cs.c_customer_sk = rs.sr_customer_sk
)
SELECT 
    customer_rank,
    c_first_name,
    c_last_name,
    total_sales,
    total_returns,
    return_percentage,
    (CASE 
         WHEN return_percentage IS NULL THEN 'No Sales' 
         WHEN return_percentage > 50 THEN 'High Return' 
         ELSE 'Regular Return' 
     END) AS return_category
FROM final_summary
WHERE (total_sales > 1000 OR return_percentage IS NOT NULL)
ORDER BY customer_rank;
