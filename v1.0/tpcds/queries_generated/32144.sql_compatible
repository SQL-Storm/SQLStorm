
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_cdemo_sk, 1 AS level
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk, h.level + 1
    FROM customer c
    JOIN CustomerHierarchy h ON c.c_current_cdemo_sk = h.c_customer_sk
),
SalesSummary AS (
    SELECT 
        w.warehouse_id,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM web_sales ws
    JOIN warehouse w ON ws.ws_warehouse_sk = w.warehouse_sk
    WHERE ws.ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY w.warehouse_id
),
ReturnAnalysis AS (
    SELECT 
        sr.store_sk,
        SUM(sr_return_quantity) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS return_amount
    FROM store_returns sr
    GROUP BY sr.store_sk
)
SELECT
    c.c_first_name,
    c.c_last_name,
    ch.level,
    ss.total_quantity,
    ss.total_sales,
    COALESCE(ra.total_returns, 0) AS total_returns,
    COALESCE(ra.return_amount, 0) AS return_amount,
    CASE 
        WHEN ss.total_sales > 10000 THEN 'High Value'
        WHEN ss.total_sales BETWEEN 5000 AND 10000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS sales_value_category
FROM CustomerHierarchy ch
JOIN customer c ON c.c_customer_sk = ch.c_customer_sk
LEFT JOIN SalesSummary ss ON ss.warehouse_id = (SELECT w.warehouse_id FROM warehouse w LIMIT 1)
LEFT JOIN ReturnAnalysis ra ON ra.store_sk = (SELECT s.store_sk FROM store s LIMIT 1)
WHERE c.c_current_cdemo_sk IS NOT NULL
AND (c.c_birth_year IS NULL OR c.c_birth_year > (EXTRACT(YEAR FROM CURRENT_DATE) - 40))
ORDER BY ss.total_sales DESC, c.c_last_name ASC;
