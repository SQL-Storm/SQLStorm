
WITH RankedSales AS (
    SELECT 
        ws.web_site_id,
        ws_sold_date_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_id ORDER BY SUM(ws_sales_price) DESC) AS rnk
    FROM 
        web_sales ws
    JOIN 
        web_site w ON ws.ws_web_site_sk = w.web_site_sk
    GROUP BY 
        ws.web_site_id, ws_sold_date_sk
),
FilteredSales AS (
    SELECT 
        web_site_id,
        total_quantity,
        total_sales,
        CASE 
            WHEN total_sales IS NULL THEN 0 
            ELSE total_sales / NULLIF(total_quantity, 0) 
        END AS avg_sales_per_item
    FROM 
        RankedSales
    WHERE 
        rnk <= 5
),
AggregateSales AS (
    SELECT 
        fs.web_site_id,
        SUM(fs.total_sales) AS sum_sales,
        AVG(fs.avg_sales_per_item) AS avg_sales_per_item
    FROM 
        FilteredSales fs
    GROUP BY 
        fs.web_site_id
    HAVING 
        SUM(fs.total_sales) > (
            SELECT 
                AVG(total_sales) 
            FROM 
                FilteredSales 
            WHERE 
                web_site_id IS NOT NULL
        )
)
SELECT 
    a.web_site_id,
    a.sum_sales,
    a.avg_sales_per_item,
    COALESCE(b.total_quantity, 0) AS total_quantity_from_previous,
    CASE 
        WHEN a.avg_sales_per_item > (
            SELECT 
                MIN(avg_sales_per_item) 
            FROM 
                AggregateSales
        ) THEN 'Above Average'
        ELSE 'Below Average'
    END AS performance_category
FROM 
    AggregateSales a
LEFT JOIN (
    SELECT 
        web_site_id,
        SUM(total_quantity) AS total_quantity 
    FROM 
        FilteredSales 
    GROUP BY 
        web_site_id
) b ON a.web_site_id = b.web_site_id
ORDER BY 
    a.sum_sales DESC, 
    a.avg_sales_per_item DESC;
