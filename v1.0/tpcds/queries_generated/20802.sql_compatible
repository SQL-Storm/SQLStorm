
WITH RECURSIVE customer_hierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_cdemo_sk, 1 AS level
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk, ch.level + 1 
    FROM customer_hierarchy ch
    JOIN customer c ON ch.c_current_cdemo_sk = c.c_current_cdemo_sk 
    WHERE ch.level < 5
),
inventory_summary AS (
    SELECT inv_date_sk, inv_item_sk, SUM(inv_quantity_on_hand) AS total_quantity
    FROM inventory
    GROUP BY inv_date_sk, inv_item_sk
),
sales_summary AS (
    SELECT ws_item_sk, SUM(ws_quantity) AS total_sales, AVG(ws_sales_price) AS avg_sales_price
    FROM web_sales
    WHERE (ws_sold_date_sk, ws_item_sk) IN (SELECT inv_date_sk, inv_item_sk FROM inventory)
    GROUP BY ws_item_sk
)
SELECT ca.city, COUNT(DISTINCT c.c_customer_sk) AS total_customers, 
       COALESCE(SUM(i.total_quantity), 0) AS total_inventory,
       COALESCE(SUM(s.total_sales), 0) AS total_sales,
       AVG(s.avg_sales_price) AS avg_sales_price,
       CASE
           WHEN SUM(s.total_sales) > 10000 THEN 'High Performer'
           WHEN SUM(s.total_sales) BETWEEN 5000 AND 10000 THEN 'Moderate Performer'
           ELSE 'Low Performer'
       END AS performance_category
FROM customer c
LEFT OUTER JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN inventory_summary i ON i.inv_item_sk IN (SELECT i_item_sk FROM item ORDER BY RANDOM() LIMIT 1) 
LEFT JOIN sales_summary s ON s.ws_item_sk IN (SELECT i_item_sk FROM item ORDER BY RANDOM() LIMIT 1)
GROUP BY ca.city, c.c_customer_sk
HAVING COUNT(DISTINCT c.c_customer_sk) > 0 
   AND AVG(CASE WHEN s.avg_sales_price IS NOT NULL THEN s.avg_sales_price END) > 10
ORDER BY total_sales DESC
LIMIT 10;
