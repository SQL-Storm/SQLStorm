
WITH RECURSIVE sales_data AS (
    SELECT
        ws_order_number,
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM web_sales
    WHERE
        ws_shipped_date_sk IS NOT NULL
    GROUP BY ws_order_number, ws_item_sk
),
item_analysis AS (
    SELECT
        i.i_item_sk,
        i.i_product_name,
        COALESCE(SUM(sd.total_sales), 0) AS total_sales_value,
        COUNT(DISTINCT sd.ws_order_number) AS order_count,
        CASE
            WHEN COUNT(DISTINCT sd.ws_order_number) = 0 THEN 'No Sales'
            WHEN SUM(sd.total_sales) IS NULL THEN 'Undefined'
            ELSE 'Sales Exist'
        END AS sales_status
    FROM item i
    LEFT JOIN sales_data sd ON i.i_item_sk = sd.ws_item_sk
    GROUP BY i.i_item_sk, i.i_product_name
),
customer_data AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        MAX(d.d_date) AS last_purchase_date,
        COUNT(DISTINCT CASE WHEN d.d_dow IN (1, 2, 3, 4, 5) THEN d.d_date END) AS weekdays_purchases,
        COUNT(DISTINCT CASE WHEN d.d_dow IN (6, 0) THEN d.d_date END) AS weekend_purchases
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
),
final_analysis AS (
    SELECT
        ia.i_item_sk,
        ia.i_product_name,
        ia.total_sales_value,
        ia.order_count,
        ia.sales_status,
        cd.c_customer_sk,
        cd.c_first_name,
        cd.c_last_name,
        cd.last_purchase_date,
        cd.weekdays_purchases,
        cd.weekend_purchases,
        ROW_NUMBER() OVER (PARTITION BY ia.sales_status ORDER BY ia.total_sales_value DESC) AS item_rank
    FROM item_analysis ia
    JOIN customer_data cd ON ia.total_sales_value > 0
)

SELECT
    fa.i_item_sk,
    fa.i_product_name,
    fa.total_sales_value,
    fa.order_count,
    fa.sales_status,
    fa.c_customer_sk,
    fa.c_first_name,
    fa.c_last_name,
    fa.last_purchase_date,
    fa.weekdays_purchases,
    fa.weekend_purchases
FROM final_analysis fa
WHERE 
    fa.order_count > 1
    AND (fa.total_sales_value IS NOT NULL OR fa.sales_status = 'No Sales')
ORDER BY fa.sales_status, fa.total_sales_value DESC
FETCH FIRST 100 ROWS ONLY;
