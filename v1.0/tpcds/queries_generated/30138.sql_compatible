
WITH RECURSIVE customer_tree AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_cdemo_sk, 1 AS level
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    
    UNION ALL
    
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk, ct.level + 1
    FROM customer c
    JOIN customer_tree ct ON c.c_current_cdemo_sk = ct.c_current_cdemo_sk
),
sale_summary AS (
    SELECT 
        d.d_year,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_net_profit) AS total_net_profit
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY d.d_year
),
customer_demographics AS (
    SELECT 
        cd.cd_demo_sk,
        COUNT(DISTINCT c.c_customer_sk) AS num_customers,
        AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate,
        STRING_AGG(DISTINCT cd.cd_gender, ', ') AS genders
    FROM customer c 
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY cd.cd_demo_sk
)
SELECT 
    ct.level,
    ss.d_year,
    ss.total_quantity,
    ss.total_net_profit,
    cd.num_customers,
    cd.avg_purchase_estimate,
    cd.genders
FROM customer_tree ct
LEFT JOIN sale_summary ss ON ss.total_quantity > 1000 
LEFT JOIN customer_demographics cd ON cd.cd_demo_sk = ct.c_current_cdemo_sk 
WHERE ct.c_first_name IS NOT NULL
AND EXISTS (
    SELECT 1 
    FROM customer_demographics cd2 
    WHERE cd2.num_customers > 10 
    AND cd2.avg_purchase_estimate > 500
)
ORDER BY ss.d_year DESC, ct.level, cd.avg_purchase_estimate DESC;
