
WITH RankedSales AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        ws_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_net_profit DESC) AS profit_rank
    FROM 
        web_sales
    WHERE 
        ws_net_profit IS NOT NULL
),
AggregateSales AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_net_profit) AS total_profit,
        COUNT(*) AS sales_count
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
    HAVING 
        SUM(ws_net_profit) > 1000
),
CustomerReturns AS (
    SELECT 
        wr_returning_customer_sk,
        COUNT(wr_return_number) AS return_count,
        SUM(wr_return_amt_inc_tax) AS total_return_amt
    FROM 
        web_returns
    WHERE 
        wr_return_qty > 0
    GROUP BY 
        wr_returning_customer_sk
    HAVING 
        COUNT(wr_return_number) > 2
)
SELECT 
    ca.city,
    ca.state,
    SUM(CASE WHEN rs.profit_rank = 1 THEN rs.ws_net_profit ELSE 0 END) AS top_profit,
    COUNT(DISTINCT cr.wr_returning_customer_sk) AS frequent_returners,
    ARRAY_AGG(DISTINCT cd.cd_marital_status) AS unique_marital_statuses
FROM 
    customer_address ca
LEFT JOIN 
    RankedSales rs ON ca.ca_address_sk = (
        SELECT 
            c.c_current_addr_sk 
        FROM 
            customer c 
        WHERE 
            c.c_customer_sk = rs.ws_item_sk
        LIMIT 1
    )
LEFT JOIN 
    CustomerReturns cr ON cr.wr_returning_customer_sk = (
        SELECT 
            c.c_customer_sk 
        FROM 
            customer c 
        JOIN 
            web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
        WHERE 
            ws.ws_item_sk = rs.ws_item_sk
        LIMIT 1
    )
JOIN 
    AggregateSales ag ON ag.ws_item_sk = rs.ws_item_sk
WHERE 
    ca.state IS NOT NULL
GROUP BY 
    ca.city, ca.state
ORDER BY 
    top_profit DESC
LIMIT 10;
