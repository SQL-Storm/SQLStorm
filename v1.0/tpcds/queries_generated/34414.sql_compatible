
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        s_item_sk,
        SUM(ss_sales_price) AS total_sales,
        COUNT(ss_ticket_number) AS total_transactions,
        ROW_NUMBER() OVER (PARTITION BY s_item_sk ORDER BY SUM(ss_sales_price) DESC) AS rank
    FROM 
        store_sales
    GROUP BY 
        s_item_sk
    HAVING 
        SUM(ss_sales_price) > 1000
    UNION ALL
    SELECT 
        ss.s_item_sk,
        sh.total_sales + ss.ss_sales_price AS total_sales,
        sh.total_transactions + 1 AS total_transactions,
        sh.rank
    FROM 
        store_sales ss
    JOIN 
        sales_hierarchy sh ON ss.s_item_sk = sh.s_item_sk
    WHERE 
        ss.ss_ticket_number > 100 
)
SELECT 
    i.i_item_id,
    ROUND(AVG(sh.total_sales), 2) AS avg_sales,
    MAX(sh.total_transactions) AS max_transactions,
    COALESCE(SUM(sr_return_quantity), 0) AS total_returns,
    CASE 
        WHEN COUNT(DISTINCT wr_refunded_customer_sk) > 0 THEN 'Returns Exist'
        ELSE 'No Returns'
    END AS return_status
FROM 
    item i
LEFT JOIN 
    sales_hierarchy sh ON i.i_item_sk = sh.s_item_sk
LEFT JOIN 
    store_returns sr ON sr.sr_item_sk = i.i_item_id
LEFT JOIN 
    web_returns wr ON wr.wr_item_sk = i.i_item_id
WHERE 
    i.i_current_price > 20.00 AND
    (i.i_brand LIKE 'Brand%' OR i.i_category = 'CategoryX')
GROUP BY 
    i.i_item_id
HAVING 
    COUNT(DISTINCT sh.rank) <= 5
ORDER BY 
    avg_sales DESC
FETCH FIRST 10 ROWS ONLY;
