
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        s_store_sk,
        s_store_name,
        SUM(ss_ext_sales_price) AS total_sales,
        COUNT(ss_ticket_number) AS total_transactions
    FROM 
        store_sales 
    JOIN 
        store ON store_sales.ss_store_sk = store.s_store_sk
    GROUP BY 
        s_store_sk, s_store_name
    UNION ALL
    SELECT 
        sh.s_store_sk,
        sh.s_store_name,
        SUM(ss_ext_sales_price) + sh.total_sales AS total_sales,
        COUNT(ss_ticket_number) + sh.total_transactions AS total_transactions
    FROM 
        SalesHierarchy sh
    JOIN 
        store_sales ss ON sh.s_store_sk = ss.ss_store_sk
    GROUP BY 
        sh.s_store_sk, sh.s_store_name, sh.total_sales, sh.total_transactions
),
CustomerReturns AS (
    SELECT 
        sr_customer_sk,
        SUM(sr_return_amt) AS total_returned,
        COUNT(sr_ticket_number) AS return_count
    FROM 
        store_returns
    GROUP BY 
        sr_customer_sk
),
MaxReturns AS (
    SELECT 
        MAX(total_returned) AS max_returned
    FROM 
        CustomerReturns
),
FilteredCustomers AS (
    SELECT 
        c.c_customer_sk,
        SUM(CASE WHEN ca.ca_location_type = 'home' THEN 1 ELSE 0 END) AS home_address_count,
        COUNT(DISTINCT sr_ticket_number) AS distinct_returns
    FROM 
        customer c
    LEFT JOIN 
        CustomerReturns cr ON c.c_customer_sk = cr.sr_customer_sk
    LEFT JOIN 
        customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    WHERE 
        (cr.total_returned IS NULL OR cr.total_returned < (SELECT max_returned FROM MaxReturns))
    GROUP BY 
        c.c_customer_sk
)
SELECT 
    sh.s_store_name,
    sh.total_sales,
    sh.total_transactions,
    fc.home_address_count,
    fc.distinct_returns
FROM 
    SalesHierarchy sh
LEFT JOIN 
    FilteredCustomers fc ON fc.home_address_count > 0
WHERE 
    sh.total_sales > (SELECT AVG(total_sales) FROM SalesHierarchy)
ORDER BY 
    sh.total_sales DESC;
