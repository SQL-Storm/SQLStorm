
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        s_store_sk,
        s_store_id,
        s_store_name,
        s_manager,
        s_number_employees,
        1 AS level
    FROM store
    WHERE s_closed_date_sk IS NULL
    UNION ALL
    SELECT 
        s.s_store_sk,
        s.s_store_id,
        s.s_store_name,
        s.s_manager,
        s.s_number_employees,
        sh.level + 1
    FROM store s
    JOIN sales_hierarchy sh ON s.s_manager = sh.s_store_sk
),
demographic_analysis AS (
    SELECT 
        cd_gender,
        cd_marital_status,
        AVG(cd_purchase_estimate) AS avg_purchase_estimate,
        COUNT(DISTINCT c_customer_sk) AS customer_count
    FROM customer_demographics cd
    JOIN customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    GROUP BY 
        cd_gender, 
        cd_marital_status
),
store_sales_summary AS (
    SELECT 
        ss_store_sk,
        SUM(ss_net_paid) AS total_sales,
        COUNT(ss_ticket_number) AS total_transactions
    FROM store_sales
    GROUP BY ss_store_sk
),
sales_performance AS (
    SELECT 
        sh.s_store_id,
        sh.s_store_name,
        sh.s_manager,
        sh.level,
        COALESCE(ss.total_sales, 0) AS total_sales,
        COALESCE(ss.total_transactions, 0) AS total_transactions
    FROM sales_hierarchy sh
    LEFT JOIN store_sales_summary ss ON sh.s_store_sk = ss.ss_store_sk
)
SELECT 
    sp.s_store_id,
    sp.s_store_name,
    sp.s_manager,
    sp.level,
    sp.total_sales,
    sp.total_transactions,
    da.cd_gender,
    da.cd_marital_status,
    da.avg_purchase_estimate,
    da.customer_count,
    CASE 
        WHEN sp.total_sales > 10000 THEN 'High'
        WHEN sp.total_sales BETWEEN 5000 AND 10000 THEN 'Medium'
        ELSE 'Low' 
    END AS sales_category
FROM sales_performance sp
FULL OUTER JOIN demographic_analysis da ON sp.level = da.customer_count
WHERE sp.total_sales IS NOT NULL
ORDER BY sp.total_sales DESC, sp.s_store_name ASC
FETCH FIRST 50 ROWS ONLY;
