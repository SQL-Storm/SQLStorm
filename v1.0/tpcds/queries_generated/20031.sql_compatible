
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.preferred_cust_flag,
           cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate, 
           ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY c.c_first_name) AS rn
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE c.c_first_name IS NOT NULL OR c.c_last_name IS NOT NULL

    UNION ALL
    
    SELECT ch.c_customer_sk, ch.c_first_name, ch.c_last_name, 'Y' AS preferred_cust_flag,
           ch.cd_gender, ch.cd_marital_status, ch.cd_purchase_estimate, 
           ROW_NUMBER() OVER (PARTITION BY ch.c_customer_sk ORDER BY ch.c_first_name) AS rn
    FROM CustomerHierarchy ch
    INNER JOIN store_sales ss ON ch.c_customer_sk = ss.ss_customer_sk
    WHERE ss.ss_quantity > (SELECT AVG(ss_inner.ss_quantity) FROM store_sales ss_inner
                             WHERE ss_inner.ss_customer_sk = ch.c_customer_sk)
)

SELECT ch.c_customer_sk, ch.c_first_name, ch.c_last_name, ch.preferred_cust_flag,
       COUNT(ss.ss_item_sk) AS total_items_sold,
       SUM(ss.ss_sales_price - ss.ss_ext_discount_amt) AS total_sales,
       MAX(ss.ss_sold_date_sk) AS last_purchase_date,
       CASE 
           WHEN ch.cd_gender = 'F' THEN 'Female Customer'
           WHEN ch.cd_gender = 'M' THEN 'Male Customer'
           ELSE 'Other Gender'
       END AS customer_gender,
       COALESCE(AVG(cd.cd_purchase_estimate), 0) AS avg_purchase_estimate
FROM CustomerHierarchy ch
LEFT JOIN store_sales ss ON ch.c_customer_sk = ss.ss_customer_sk
LEFT JOIN customer_demographics cd ON ch.c_customer_sk = cd.cd_demo_sk
WHERE ch.preferred_cust_flag = 'Y' 
AND (ss.ss_sales_price - ss.ss_ext_discount_amt) > 0 
AND (DATEDIFF(CURRENT_DATE, (SELECT MIN(d.d_date) FROM date_dim d WHERE d.d_date_sk = ss.ss_sold_date_sk)) <= 365)
GROUP BY ch.c_customer_sk, ch.c_first_name, ch.c_last_name, ch.preferred_cust_flag, ch.cd_gender, ch.cd_marital_status
HAVING COUNT(DISTINCT ss.ss_item_sk) > 3
ORDER BY total_sales DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
