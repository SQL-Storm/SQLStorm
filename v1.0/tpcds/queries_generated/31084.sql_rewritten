WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_preferred_cust_flag, 
           cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate, 
           cd.cd_dep_count, cd.cd_dep_employed_count,
           0 AS level
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE c.c_preferred_cust_flag = 'Y'

    UNION ALL

    SELECT ch.c_customer_sk, ch.c_first_name, ch.c_last_name, ch.c_preferred_cust_flag,
           cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate,
           cd.cd_dep_count, cd.cd_dep_employed_count,
           ch.level + 1
    FROM CustomerHierarchy ch
    JOIN customer c ON c.c_current_cdemo_sk = ch.c_customer_sk
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE ch.level < 3 
),
TotalReturns AS (
    SELECT 
        sr.sr_customer_sk,
        COUNT(*) AS total_returns,
        SUM(sr.sr_return_amt_inc_tax) AS total_return_amount
    FROM store_returns sr
    GROUP BY sr.sr_customer_sk
),
CombinedData AS (
    SELECT 
        ch.c_customer_sk,
        ch.c_first_name,
        ch.c_last_name,
        ch.cd_gender,
        ch.cd_marital_status,
        NVL(tr.total_returns, 0) AS total_returns,
        NVL(tr.total_return_amount, 0) AS total_return_amount
    FROM CustomerHierarchy ch
    LEFT JOIN TotalReturns tr ON ch.c_customer_sk = tr.sr_customer_sk
)
SELECT 
    c.c_customer_sk,
    c.c_first_name,
    c.c_last_name,
    cd.cd_gender,
    cd.cd_marital_status,
    CASE 
        WHEN c.c_birth_year IS NULL THEN 'Unknown'
        WHEN (2001 - c.c_birth_year) < 30 THEN 'Young'
        WHEN (2001 - c.c_birth_year) BETWEEN 30 AND 60 THEN 'Middle Age'
        ELSE 'Senior'
    END AS age_group,
    ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY total_return_amount DESC) AS rank_within_gender,
    COALESCE(total_return_amount, 0) AS return_in_usd
FROM CombinedData c
JOIN customer_demographics cd ON c.c_customer_sk = cd.cd_demo_sk
WHERE cd.cd_purchase_estimate > 1000 
    AND (ch.cd_gender = 'F' OR ch.cd_marital_status = 'M')
ORDER BY return_in_usd DESC, c.c_last_name ASC
LIMIT 100;