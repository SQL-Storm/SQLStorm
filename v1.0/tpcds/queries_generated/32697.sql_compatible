
WITH RECURSIVE sales_summary AS (
    SELECT 
        ss_sold_date_sk,
        ss_item_sk,
        SUM(ss_quantity) AS total_quantity,
        SUM(ss_ext_sales_price) AS total_sales
    FROM 
        store_sales
    GROUP BY 
        ss_sold_date_sk, ss_item_sk

    UNION ALL

    SELECT 
        ss.sold_date_sk,
        ss.item_sk,
        COUNT(ss.ss_ticket_number) AS total_quantity,
        SUM(ss.ss_ext_sales_price) AS total_sales
    FROM 
        store_sales ss
    JOIN 
        sales_summary s ON ss.ss_sold_date_sk = s.ss_sold_date_sk 
        AND ss.ss_item_sk = s.ss_item_sk
    GROUP BY 
        ss.sold_date_sk, ss.item_sk
    HAVING 
        COUNT(ss.ss_ticket_number) > 10
),
top_items AS (
    SELECT 
        item.i_item_id,
        item.i_item_desc,
        SUM(ss.total_sales) AS total_sales
    FROM 
        sales_summary ss
    JOIN 
        item ON ss.ss_item_sk = item.i_item_sk
    GROUP BY 
        item.i_item_id, item.i_item_desc
    ORDER BY 
        total_sales DESC
    LIMIT 10
)
SELECT 
    ti.i_item_id,
    ti.i_item_desc,
    ti.total_sales,
    COALESCE(ROUND(ti.total_sales / NULLIF(SUM(ti.total_sales) OVER (), 0) * 100, 2), 0) AS percentage_of_total_sales,
    ca.ca_city,
    ca.ca_state
FROM 
    top_items ti
LEFT JOIN 
    customer_address ca ON ca.ca_address_sk = (
        SELECT 
            c.c_current_addr_sk 
        FROM 
            customer c 
        ORDER BY 
            RANDOM() 
        LIMIT 1
    )
WHERE 
    ti.total_sales > 1000
ORDER BY 
    ti.total_sales DESC;
