WITH RECURSIVE SalesContribution AS (
    SELECT
        ws_bill_customer_sk AS customer_sk,
        SUM(ws_net_paid) AS total_sales,
        DENSE_RANK() OVER (ORDER BY SUM(ws_net_paid) DESC) AS sales_rank
    FROM
        web_sales
    WHERE
        ws_sold_date_sk BETWEEN 2458857 AND 2459155 
    GROUP BY
        ws_bill_customer_sk
),
TopCustomers AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        sc.total_sales
    FROM
        customer c
    JOIN
        SalesContribution sc ON c.c_customer_sk = sc.customer_sk
    WHERE
        sc.sales_rank <= 10 
),
CustomerDemographics AS (
    SELECT
        cd.cd_gender,
        cd.cd_marital_status,
        hc.hd_income_band_sk,
        hc.hd_buy_potential
    FROM
        customer_demographics cd
    JOIN
        household_demographics hc ON cd.cd_demo_sk = hc.hd_demo_sk
),
SalesDetails AS (
    SELECT
        t.d_date,
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        AVG(ws.ws_net_paid) AS avg_net_sales
    FROM
        web_sales ws
    JOIN
        date_dim t ON ws.ws_sold_date_sk = t.d_date_sk
    WHERE
        ws.ws_sold_date_sk BETWEEN 2458857 AND 2459155 
    GROUP BY
        t.d_date, ws.ws_item_sk
),
SalesContributionDetail AS (
    SELECT
        tc.c_customer_sk,
        tc.c_first_name,
        tc.c_last_name,
        scd.total_quantity,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.hd_income_band_sk
    FROM
        TopCustomers tc
    LEFT JOIN
        SalesDetails scd ON tc.c_customer_sk = scd.ws_item_sk 
    JOIN
        CustomerDemographics cd ON 1=1 
)
SELECT 
    scd.c_customer_sk,
    scd.c_first_name || ' ' || scd.c_last_name AS customer_full_name,
    COALESCE(scd.total_quantity, 0) AS total_quantity,
    cd.cd_gender,
    cd.cd_marital_status,
    ib.ib_lower_bound,
    ib.ib_upper_bound
FROM
    SalesContributionDetail scd
LEFT JOIN
    income_band ib ON scd.hd_income_band_sk = ib.ib_income_band_sk
WHERE
    (scd.total_quantity IS NULL OR scd.total_quantity > 0) 
ORDER BY
    scd.total_quantity DESC, scd.c_customer_sk;