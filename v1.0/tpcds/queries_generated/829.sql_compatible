
WITH ranked_sales AS (
    SELECT 
        cs_item_sk,
        cs_order_number,
        cs_quantity,
        cs_sales_price,
        RANK() OVER (PARTITION BY cs_item_sk ORDER BY cs_sales_price DESC) AS price_rank,
        SUM(cs_quantity) OVER (PARTITION BY cs_item_sk) AS total_quantity
    FROM catalog_sales
    WHERE cs_shipping_date_sk IS NOT NULL
),
sales_summary AS (
    SELECT
        rs.cs_item_sk,
        COUNT(rs.cs_order_number) AS total_orders,
        AVG(rs.cs_sales_price) AS avg_sales_price,
        SUM(rs.cs_quantity) AS total_sold,
        MAX(rs.cs_sales_price) AS max_sales_price
    FROM ranked_sales rs
    WHERE rs.price_rank = 1
    GROUP BY rs.cs_item_sk
),
customer_returns AS (
    SELECT 
        cr_returning_customer_sk,
        SUM(cr_return_quantity) AS total_returned,
        COUNT(DISTINCT cr_order_number) AS unique_returns
    FROM catalog_returns
    GROUP BY cr_returning_customer_sk
)
SELECT 
    c.c_customer_id,
    SUM(ss.total_sold) AS overall_total_sales,
    SUM(COALESCE(cr.total_returned, 0)) AS overall_total_returns,
    (SUM(ss.total_sold) - SUM(COALESCE(cr.total_returned, 0))) AS net_sales
FROM customer c
LEFT JOIN sales_summary ss ON c.c_customer_sk = ss.cs_item_sk
LEFT JOIN customer_returns cr ON c.c_customer_sk = cr.cr_returning_customer_sk
GROUP BY c.c_customer_id
HAVING (SUM(ss.total_sold) - SUM(COALESCE(cr.total_returned, 0))) > 0
ORDER BY net_sales DESC
FETCH FIRST 100 ROWS ONLY;
