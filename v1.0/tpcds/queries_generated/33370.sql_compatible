
WITH RECURSIVE sales_cte AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(ws_order_number) AS num_orders,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_ext_sales_price) DESC) AS rank
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023) - 30 AND 
                                   (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY ws_item_sk
),
customer_summary AS (
    SELECT 
        c_customer_sk,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_net_paid) AS total_spent
    FROM customer 
    LEFT JOIN web_sales ON c_customer_sk = ws_bill_customer_sk
    GROUP BY c_customer_sk
),
store_summary AS (
    SELECT 
        ss_store_sk,
        SUM(ss_ext_sales_price) AS total_store_sales,
        COUNT(ss_ticket_number) AS total_store_transactions
    FROM store_sales
    GROUP BY ss_store_sk
)
SELECT 
    ca.ca_city,
    ca.ca_state,
    s.total_store_sales,
    cs.total_orders,
    cs.total_spent,
    CASE 
        WHEN cs.total_spent IS NULL THEN 'No Orders'
        WHEN cs.total_spent > 1000 THEN 'High Value'
        ELSE 'Regular'
    END AS customer_value_segment,
    s.total_store_sales * COALESCE((SELECT AVG(total_sales) FROM sales_cte WHERE rank <= 10), 1) AS avg_sales_multiplier
FROM customer_address ca
LEFT JOIN customer_summary cs ON cs.c_customer_sk = ca.ca_address_sk
JOIN store_summary s ON s.ss_store_sk = (SELECT s_store_sk FROM store WHERE s_city = ca.ca_city)
WHERE ca.ca_country IS NOT NULL
ORDER BY customer_value_segment DESC, s.total_store_sales DESC;
