
WITH RECURSIVE SalesData AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_paid) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_paid) DESC) AS sales_rank
    FROM web_sales
    GROUP BY ws_sold_date_sk, ws_item_sk
),
RankedSales AS (
    SELECT
        sd.ws_item_sk,
        sd.total_quantity,
        sd.total_sales,
        COALESCE(sd.sales_rank, 0) AS sales_rank,
        CASE 
            WHEN sd.total_sales > 1000 THEN 'High Value'
            WHEN sd.total_sales BETWEEN 500 AND 1000 THEN 'Medium Value'
            ELSE 'Low Value'
        END AS sales_category,
        DATEADD(day, -1 * (DENSE_RANK() OVER (ORDER BY sd.total_sales DESC)), dd.d_date) AS sales_ceiling,
        DENSE_RANK() OVER (ORDER BY sd.total_sales DESC) AS sales_position
    FROM SalesData sd
    JOIN date_dim dd ON sd.ws_sold_date_sk = dd.d_date_sk
    WHERE sd.total_quantity IS NOT NULL
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        SUM(ws.ws_net_paid) AS total_spent,
        AVG(LENGTH(SUBSTRING(c.c_email_address, POSITION('@' IN c.c_email_address) + 1))) AS avg_email_length
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk
)
SELECT 
    r.ws_item_sk,
    r.total_quantity,
    r.total_sales,
    r.sales_category,
    cs.order_count,
    cs.total_spent,
    cs.avg_email_length,
    CASE 
        WHEN r.sales_position <= 10 THEN 'Top Seller'
        ELSE 'Regular Seller'
    END AS seller_status
FROM RankedSales r
LEFT JOIN CustomerStats cs ON r.ws_item_sk = cs.c_customer_sk
WHERE r.sales_ceiling IS NOT NULL
AND r.total_sales - COALESCE(cs.total_spent, 0) > 0
ORDER BY r.sales_rank DESC, r.total_sales DESC
LIMIT 100;
