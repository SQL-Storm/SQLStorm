
WITH RECURSIVE customer_hierarchy AS (
    SELECT 
        c.c_customer_sk, 
        c.c_customer_id,
        cd.cd_gender, 
        cd.cd_marital_status, 
        cd.cd_purchase_estimate, 
        cd.cd_credit_rating,
        1 AS level
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_marital_status = 'M'
    UNION ALL
    SELECT 
        c.c_customer_sk, 
        c.c_customer_id,
        cd.cd_gender, 
        cd.cd_marital_status, 
        cd.cd_purchase_estimate, 
        cd.cd_credit_rating,
        ch.level + 1
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN customer_hierarchy ch ON c.c_customer_sk = ch.c_customer_sk
    WHERE ch.level < 3
),
sales_summary AS (
    SELECT 
        ws.ws_ship_date_sk,
        SUM(ws.ws_sales_price - ws.ws_ext_discount_amt) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM web_sales ws
    WHERE ws.ws_ship_date_sk BETWEEN 20210101 AND 20211231
    GROUP BY ws.ws_ship_date_sk
),
income_bands AS (
    SELECT 
        ib.ib_income_band_sk,
        CASE 
            WHEN (ibu.lower_bound IS NOT NULL AND ib.ib_lower_bound > ibu.lower_bound) THEN 'Higher'
            ELSE 'Lower'
        END AS income_level
    FROM income_band ib
    LEFT JOIN income_band ibu ON ib.ib_upper_bound = ibu.ib_lower_bound
)
SELECT 
    ch.c_customer_id,
    ch.cd_gender,
    ch.cd_marital_status,
    SUM(ss.total_sales) AS annual_sales,
    COUNT(ss.order_count) AS total_orders,
    CASE 
        WHEN ib.income_level IS NULL THEN 'Unknown Income Level'
        ELSE ib.income_level
    END AS income_category,
    d.d_month_seq * 100 + SUM(ss.total_sales) AS additional_computation
FROM customer_hierarchy ch
LEFT JOIN sales_summary ss ON ch.c_customer_sk = ss.ws_ship_date_sk
LEFT JOIN income_bands ib ON ch.c_customer_sk = ib.ib_income_band_sk
JOIN date_dim d ON ss.ws_ship_date_sk = d.d_date_sk
GROUP BY 
    ch.c_customer_id, 
    ch.cd_gender, 
    ch.cd_marital_status, 
    ib.income_level,
    d.d_month_seq
HAVING 
    AVG(ss.total_sales) > 100 AND 
    COALESCE(MAX(ss.order_count), 0) < 10
ORDER BY 
    ch.c_customer_id,
    income_category DESC NULLS LAST
LIMIT 50 OFFSET (SELECT COUNT(*) FROM customer) / 100;
