
WITH CustomerAggregates AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        SUM(COALESCE(ws.ws_net_profit, 0)) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        MAX(d.d_date) AS last_purchase_date,
        RANK() OVER (PARTITION BY cd.cd_gender ORDER BY SUM(ws.ws_net_profit) DESC) AS gender_rank
    FROM customer AS c
    LEFT JOIN customer_demographics AS cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales AS ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN date_dim AS d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender
),

TopCustomers AS (
    SELECT
        ca.c_customer_sk,
        ca.c_first_name,
        ca.c_last_name,
        ca.total_spent,
        ca.order_count,
        ca.last_purchase_date
    FROM CustomerAggregates AS ca
    WHERE ca.gender_rank = 1 AND ca.total_spent > (SELECT AVG(total_spent) FROM CustomerAggregates)
),

WarehouseStats AS (
    SELECT
        w.w_warehouse_sk,
        SUM(COALESCE(inv.inv_quantity_on_hand, 0)) AS total_inventory,
        AVG(sm.sm_code) AS avg_shipping_code
    FROM warehouse AS w
    LEFT JOIN inventory AS inv ON w.w_warehouse_sk = inv.inv_warehouse_sk
    LEFT JOIN ship_mode AS sm ON sm.sm_ship_mode_sk = (SELECT MIN(sm_ship_mode_sk) FROM ship_mode)
    GROUP BY w.w_warehouse_sk
)

SELECT 
    tc.c_first_name,
    tc.c_last_name,
    tc.total_spent,
    ws.total_inventory,
    ws.avg_shipping_code,
    COUNT(*) FILTER (WHERE wr_returning_customer_sk = tc.c_customer_sk) AS returns_count,
    CASE
        WHEN ws.total_inventory IS NULL THEN 'No Inventory'
        WHEN ws.total_inventory < 100 THEN 'Low Stock'
        ELSE 'In Stock'
    END AS stock_status
FROM TopCustomers AS tc
JOIN WarehouseStats AS ws ON ws.total_inventory > 0
LEFT JOIN web_returns AS wr ON wr.wr_returning_customer_sk = tc.c_customer_sk
GROUP BY tc.c_first_name, tc.c_last_name, tc.total_spent, ws.total_inventory, ws.avg_shipping_code
ORDER BY tc.total_spent DESC, tc.c_last_name ASC;
