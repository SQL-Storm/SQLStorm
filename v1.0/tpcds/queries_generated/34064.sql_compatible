
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws_order_number,
        ws_item_sk,
        ws_quantity,
        ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_order_number ORDER BY ws_item_sk) AS rn
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN (SELECT d_date_sk FROM date_dim WHERE d_date = '2023-01-01') 
                              AND (SELECT d_date_sk FROM date_dim WHERE d_date = '2023-12-31')
),
InventoryData AS (
    SELECT 
        inv.item_sk, 
        SUM(inv.inv_quantity_on_hand) AS total_inventory
    FROM inventory inv
    JOIN warehouse w ON inv.inv_warehouse_sk = w.w_warehouse_sk
    WHERE w.w_state = 'CA'
    GROUP BY inv.item_sk
),
CustomerSales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_net_paid_inc_tax) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
    HAVING SUM(ws.ws_net_paid_inc_tax) > 500
),
SalesSummary AS (
    SELECT 
        s.rn,
        c.c_first_name || ' ' || c.c_last_name AS customer_name,
        s.ws_quantity,
        s.ws_sales_price,
        inv.total_inventory,
        cs.total_spent
    FROM SalesCTE s
    LEFT JOIN CustomerSales cs ON s.ws_order_number = cs.order_count
    JOIN customer c ON c.c_customer_sk = s.ws_item_sk
    LEFT JOIN InventoryData inv ON inv.item_sk = s.ws_item_sk
)
SELECT 
    ss.rn,
    ss.customer_name,
    ss.ws_quantity * ss.ws_sales_price AS total_price,
    COALESCE(ss.total_inventory, 0) AS inventory_available,
    ss.total_spent 
FROM SalesSummary ss
WHERE ss.ws_quantity * ss.ws_sales_price > 100
ORDER BY total_price DESC
LIMIT 10;
