
WITH CustomerAggregate AS (
    SELECT 
        c.c_customer_sk,
        SUM(ws.ws_net_paid) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        MAX(ws.ws_sold_date_sk) AS last_purchase_date,
        DENSE_RANK() OVER (ORDER BY SUM(ws.ws_net_paid) DESC) AS spending_rank
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE 
        c.c_birth_year BETWEEN 1970 AND 1990
    GROUP BY 
        c.c_customer_sk
),
RecentReturns AS (
    SELECT 
        sr_returning_customer_sk,
        COUNT(*) AS recent_return_count,
        SUM(sr_return_amt_inc_tax) AS total_returned_amt
    FROM 
        store_returns 
    WHERE 
        sr_returned_date_sk = (SELECT MAX(sr_returned_date_sk) FROM store_returns)
    GROUP BY 
        sr_returning_customer_sk
),
HighSpenders AS (
    SELECT 
        ca.ca_address_sk, 
        ca.ca_city,
        ca.ca_state, 
        ca.ca_country,
        ca.ca_county,
        SUM(ca.total_spent) AS aggregate_spending
    FROM 
        CustomerAggregate ca
    INNER JOIN 
        customer_address ca_addr ON ca.c_customer_sk = ca_addr.c_customer_sk
    WHERE 
        ca.ca_county IS NOT NULL
    GROUP BY 
        ca.ca_address_sk, ca.ca_city, ca.ca_state, ca.ca_country, ca.ca_county
    HAVING 
        SUM(ca.total_spent) > 1000
)
SELECT 
    hs.ca_city,
    hs.ca_state,
    hs.aggregate_spending,
    rr.recent_return_count,
    rr.total_returned_amt
FROM 
    HighSpenders hs
LEFT JOIN 
    RecentReturns rr ON hs.ca_address_sk = rr.sr_returning_customer_sk
WHERE 
    rr.recent_return_count IS NULL OR rr.recent_return_count < 3
ORDER BY 
    hs.aggregate_spending DESC
FETCH FIRST 10 ROWS ONLY;
