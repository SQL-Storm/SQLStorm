
WITH RECURSIVE address_cte AS (
    SELECT ca_address_sk, ca_city, ca_state, ROW_NUMBER() OVER (PARTITION BY ca_state ORDER BY ca_city) AS rn
    FROM customer_address
    WHERE ca_state IS NOT NULL
), sales_summary AS (
    SELECT 
        ws.ws_web_site_sk,
        SUM(ws.ws_net_profit) AS total_net_profit,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM web_sales ws
    JOIN customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    WHERE c.c_birth_month = 12
    GROUP BY ws.ws_web_site_sk
), detailed_sales AS (
    SELECT 
        cs.cs_order_number,
        cs.cs_net_paid_inc_tax,
        cs.cs_shipping_cost,
        s.s_store_name,
        CASE 
            WHEN cs.cs_net_paid_inc_tax IS NULL THEN 'Unknown'
            WHEN cs.cs_net_paid_inc_tax < 50 THEN 'Low'
            WHEN cs.cs_net_paid_inc_tax BETWEEN 50 AND 200 THEN 'Medium'
            ELSE 'High'
        END AS purchase_category
    FROM catalog_sales cs
    JOIN store s ON cs.cs_ship_addr_sk = s.s_addr_sk
), unusual_stats AS (
    SELECT 
        d.d_date,
        SUM(COALESCE(ws.ws_sales_price, 0)) AS total_sales_price,
        COALESCE(NULLIF(MAX(inv.inv_quantity_on_hand), 0), -1) AS max_inventory
    FROM date_dim d
    LEFT JOIN web_sales ws ON d.d_date_sk = ws.ws_sold_date_sk
    LEFT JOIN inventory inv ON inv.inv_date_sk = d.d_date_sk
    GROUP BY d.d_date
)
SELECT 
    a.ca_city,
    a.ca_state,
    ss.total_net_profit,
    ds.s_store_name,
    ds.purchase_category,
    us.total_sales_price,
    us.max_inventory
FROM address_cte a
FULL OUTER JOIN sales_summary ss ON a.rn = ss.ws_web_site_sk
LEFT JOIN detailed_sales ds ON ds.cs_order_number = (SELECT MIN(cs.cs_order_number) FROM catalog_sales cs)
JOIN unusual_stats us ON us.total_sales_price > 100
WHERE a.ca_city IS NOT NULL OR ds.s_store_name IS NOT NULL
ORDER BY a.ca_state, us.total_sales_price DESC;
