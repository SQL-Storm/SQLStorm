
WITH sales_data AS (
    SELECT 
        cs.cs_sold_date_sk,
        cs.cs_item_sk,
        cs.cs_quantity,
        cs.cs_net_paid,
        cs.cs_net_profit,
        it.i_category,
        cu.c_birth_year,
        DENSE_RANK() OVER (PARTITION BY it.i_category ORDER BY SUM(cs.cs_net_profit) DESC) AS category_rank
    FROM 
        catalog_sales cs
    JOIN 
        item it ON cs.cs_item_sk = it.i_item_sk
    LEFT JOIN 
        customer cu ON cs.cs_bill_customer_sk = cu.c_customer_sk
    GROUP BY
        cs.cs_sold_date_sk, cs.cs_item_sk, it.i_category, cu.c_birth_year
),
top_categories AS (
    SELECT
        sd.cs_item_sk,
        SUM(sd.cs_net_profit) AS total_net_profit,
        AVG(sd.cs_quantity) AS avg_quantity,
        COUNT(DISTINCT sd.c_birth_year) AS unique_birth_years,
        sd.category_rank
    FROM sales_data sd 
    WHERE sd.category_rank <= 3
    GROUP BY sd.cs_item_sk, sd.category_rank
)
SELECT 
    I.i_item_id,
    T.total_net_profit,
    T.avg_quantity,
    COALESCE(T.unique_birth_years, 0) AS unique_birth_years,
    CASE 
        WHEN T.total_net_profit > 1000 THEN 'High Performer'
        WHEN T.total_net_profit BETWEEN 500 AND 1000 THEN 'Moderate Performer'
        ELSE 'Low Performer'
    END AS performance_category
FROM 
    top_categories T
JOIN 
    item I ON T.cs_item_sk = I.i_item_sk
WHERE 
    I.i_current_price IS NOT NULL
ORDER BY 
    T.total_net_profit DESC;
