
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        ss_store_sk,
        SUM(ss_net_paid) AS total_sales,
        COUNT(DISTINCT ss_ticket_number) AS transaction_count,
        1 AS level
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk = (SELECT MAX(ss_sold_date_sk) FROM store_sales)
    GROUP BY 
        ss_store_sk

    UNION ALL

    SELECT 
        sh.ss_store_sk,
        SUM(s.ss_net_paid) AS total_sales,
        COUNT(DISTINCT s.ss_ticket_number) AS transaction_count,
        sh.level + 1
    FROM 
        store_sales s
    JOIN 
        sales_hierarchy sh ON s.ss_store_sk = sh.ss_store_sk
    WHERE 
        s.ss_sold_date_sk = (SELECT MAX(ss_sold_date_sk)
                             FROM store_sales 
                             WHERE ss_sold_date_sk < 
                               (SELECT MAX(ss_sold_date_sk) 
                                FROM store_sales))
    GROUP BY 
        sh.ss_store_sk
)
SELECT 
    a.ca_country,
    SUM(sh.total_sales) AS total_sales,
    AVG(sh.transaction_count) AS average_transactions,
    COUNT(DISTINCT c.c_customer_sk) AS unique_customers,
    DENSE_RANK() OVER (PARTITION BY a.ca_country ORDER BY SUM(sh.total_sales) DESC) AS sales_rank,
    CASE 
        WHEN AVG(sh.transaction_count) IS NULL THEN 'No transactions'
        ELSE 'Transactions available'
    END AS transaction_status
FROM 
    sales_hierarchy sh
JOIN 
    store s ON sh.ss_store_sk = s.s_store_sk
JOIN 
    customer c ON c.c_customer_sk = sh.ss_customer_sk
JOIN 
    customer_address a ON c.c_current_addr_sk = a.ca_address_sk
GROUP BY 
    a.ca_country, sh.total_sales, sh.transaction_count
HAVING 
    SUM(sh.total_sales) > 0
ORDER BY 
    total_sales DESC
LIMIT 10;
