
WITH RECURSIVE RevenueCTE AS (
    SELECT 
        s_store_sk, 
        SUM(ss_net_profit) AS total_revenue, 
        1 AS level
    FROM 
        store_sales
    GROUP BY 
        s_store_sk
    UNION ALL
    SELECT 
        s.s_store_sk, 
        SUM(ws.ws_net_profit) + r.total_revenue AS total_revenue, 
        level + 1
    FROM 
        store s
    JOIN 
        web_sales ws ON ws.ws_ship_addr_sk = s.s_addr_sk
    JOIN 
        RevenueCTE r ON s.s_store_sk = r.s_store_sk
    WHERE 
        level < 2
    GROUP BY 
        s.s_store_sk, r.total_revenue, level
),
SalesSummary AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_net_paid) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        ROW_NUMBER() OVER (ORDER BY SUM(ws.ws_net_paid) DESC) AS rank
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_id
),
Promotions AS (
    SELECT 
        p.p_promo_id,
        SUM(ws.ws_net_paid) AS promo_revenue
    FROM 
        promotion p
    JOIN 
        web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    GROUP BY 
        p.p_promo_id
)
SELECT 
    r.s_store_sk,
    r.total_revenue AS revenue_from_stores,
    s.c_customer_id,
    s.total_spent,
    s.total_orders,
    COALESCE(p.promo_revenue, 0) AS promo_revenue,
    CASE 
        WHEN s.total_spent IS NULL THEN 'No Spending'
        WHEN s.total_orders = 0 THEN 'No Orders'
        ELSE 'Active Customer'
    END AS customer_status
FROM 
    RevenueCTE r
FULL OUTER JOIN 
    SalesSummary s ON r.s_store_sk = (SELECT max(s_store_sk) FROM store)
LEFT JOIN 
    Promotions p ON p.promo_revenue > (SELECT AVG(promo_revenue) FROM Promotions)
WHERE 
    r.total_revenue > (SELECT AVG(total_revenue) FROM RevenueCTE)
ORDER BY 
    r.total_revenue DESC, s.total_spent DESC;
