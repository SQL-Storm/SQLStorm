WITH RECURSIVE income_distribution AS (
    SELECT ib_income_band_sk, ib_lower_bound, ib_upper_bound
    FROM income_band
    UNION ALL
    SELECT ib.ib_income_band_sk, ib.ib_lower_bound, ib.ib_upper_bound
    FROM income_band ib
    JOIN income_distribution id ON id.ib_income_band_sk = ib.ib_income_band_sk
    WHERE ib.ib_lower_bound < id.ib_upper_bound
), 
sales_info AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_quantity,
        ws.ws_sales_price,
        CTE.avg_sales,
        s.s_store_name,
        CASE WHEN c.c_birth_year IS NULL THEN 'Unknown' ELSE CAST(c.c_birth_year AS VARCHAR) END AS birth_year,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_order_number ORDER BY ws.ws_sales_price DESC) AS sales_rank
    FROM web_sales ws
    JOIN customer c ON ws.ws_ship_customer_sk = c.c_customer_sk
    JOIN (
        SELECT 
            ws_ship_customer_sk, 
            AVG(ws_sales_price) AS avg_sales
        FROM web_sales
        GROUP BY ws_ship_customer_sk
    ) AS CTE ON CTE.ws_ship_customer_sk = ws.ws_ship_customer_sk
    INNER JOIN store s ON ws.ws_ship_addr_sk = s.s_addr_sk
), 
returns AS (
    SELECT 
        wr_returned_date_sk,
        SUM(wr_return_quantity) AS total_returns,
        COUNT(DISTINCT wr_returning_customer_sk) AS unique_returning_customers
    FROM web_returns 
    GROUP BY wr_returned_date_sk
    HAVING SUM(wr_return_quantity) > 0
)
SELECT 
    ci.c_customer_id,
    ci.total_spent,
    si.sales_rank,
    rd.total_returns,
    rd.unique_returning_customers,
    COALESCE(CAST(SUM(si.ws_quantity * si.ws_sales_price) OVER (PARTITION BY ci.c_customer_id) / NULLIF(SUM(si.ws_quantity), 0) AS DECIMAL(10,2)), 0) AS avg_spent_per_order
FROM (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_net_paid) AS total_spent
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_id
) ci
LEFT JOIN sales_info si ON ci.c_customer_id = si.ws_order_number
LEFT JOIN returns rd ON rd.wr_returned_date_sk = cast('2002-10-01' as date)
WHERE (si.sales_rank <= 10 OR si.sales_rank IS NULL)
AND (ci.total_spent BETWEEN 100 AND 500 OR ci.total_spent IS NULL)
ORDER BY ci.total_spent DESC, si.sales_rank ASC;