
WITH ranked_sales AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_sales_price) AS total_sales_price,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales 
    WHERE 
        ws_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        ws_item_sk
),
top_items AS (
    SELECT 
        ri.ws_item_sk, 
        ri.total_sales_price,
        i.i_product_name,
        COALESCE(NULLIF(i.i_color, ''), 'Unknown') AS item_color,
        COALESCE(i.i_size, 'Not Specified') AS item_size
    FROM 
        ranked_sales ri
    JOIN 
        item i ON ri.ws_item_sk = i.i_item_sk
    WHERE 
        ri.sales_rank <= 10
),
customer_demographics AS (
    SELECT 
        cd_demo_sk, 
        cd_gender,
        CASE 
            WHEN cd_marital_status = 'M' THEN 'Married'
            WHEN cd_marital_status = 'S' THEN 'Single'
            ELSE 'Unknown' 
        END AS marital_status
    FROM 
        customer_demographics
),
returns_summary AS (
    SELECT 
        sr_item_sk, 
        SUM(sr_return_quantity) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS total_return_value
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
)
SELECT 
    ti.ws_item_sk,
    ti.total_sales_price,
    ti.i_product_name,
    ti.item_color,
    ti.item_size,
    cd.cd_gender,
    cd.marital_status,
    COALESCE(rs.total_returns, 0) AS total_returns,
    COALESCE(rs.total_return_value, 0.00) AS total_return_value,
    CASE 
        WHEN ti.total_sales_price > 5000 THEN 'High Value'
        WHEN ti.total_sales_price BETWEEN 1000 AND 5000 THEN 'Mid Value'
        ELSE 'Low Value'
    END AS sales_value_category
FROM 
    top_items ti
LEFT JOIN 
    returns_summary rs ON ti.ws_item_sk = rs.sr_item_sk
JOIN 
    customer c ON c.c_current_cdemo_sk IN (SELECT cd_demo_sk FROM customer_demographics) 
JOIN 
    customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
WHERE 
    cd.cd_gender IS NOT NULL 
    AND ti.total_sales_price IS NOT NULL
ORDER BY 
    ti.total_sales_price DESC, ti.i_product_name
FETCH FIRST 100 ROWS ONLY;
