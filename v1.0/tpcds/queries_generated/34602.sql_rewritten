WITH RECURSIVE customer_hierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate, cd.cd_dep_count,
           0 AS level
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_dep_count IS NOT NULL

    UNION ALL

    SELECT ch.c_customer_sk, ch.c_first_name, ch.c_last_name, cd.cd_gender, cd.cd_marital_status, cd.cd_purchase_estimate, cd.cd_dep_count,
           level + 1
    FROM customer_hierarchy ch
    JOIN customer_demographics cd ON ch.c_customer_sk = cd.cd_demo_sk
    WHERE cd.cd_dep_count IS NOT NULL AND level < 5
),
recent_sales AS (
    SELECT ws.ws_ship_date_sk, ws.ws_item_sk, SUM(ws.ws_quantity) AS total_quantity, SUM(ws.ws_sales_price) AS total_sales
    FROM web_sales ws
    JOIN date_dim dd ON ws.ws_sold_date_sk = dd.d_date_sk
    WHERE dd.d_year = 2001
    GROUP BY ws.ws_ship_date_sk, ws.ws_item_sk
),
sales_statistics AS (
    SELECT item.i_item_id, item.i_product_name, 
           COALESCE(rs.total_quantity, 0) AS total_quantity,
           COALESCE(rs.total_sales, 0) AS total_sales,
           COALESCE(rs.total_sales, 0) / NULLIF(SUM(rs.total_quantity), 0) AS avg_sales_price
    FROM item
    LEFT JOIN recent_sales rs ON item.i_item_sk = rs.ws_item_sk
    GROUP BY item.i_item_id, item.i_product_name
)
SELECT ch.c_first_name, ch.c_last_name, ch.cd_gender, ch.cd_marital_status, ss.i_item_id, ss.i_product_name, ss.total_quantity, ss.total_sales,
       ss.avg_sales_price,
       CASE 
           WHEN ss.total_quantity > 100 THEN 'High Performer'
           WHEN ss.total_quantity BETWEEN 50 AND 100 THEN 'Moderate Performer'
           ELSE 'Low Performer'
       END AS performance_category
FROM customer_hierarchy ch
JOIN sales_statistics ss ON ss.i_item_id = 'ITEM1234'  
WHERE ch.cd_gender = 'M' 
  AND ch.cd_marital_status = 'S' 
ORDER BY ch.c_last_name, ch.c_first_name, ss.total_sales DESC;