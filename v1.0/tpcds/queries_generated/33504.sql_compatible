
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_quantity) AS total_quantity, 
        SUM(ws_net_profit) AS total_profit,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_profit) DESC) AS rank
    FROM 
        web_sales 
    GROUP BY 
        ws_item_sk 
    HAVING 
        SUM(ws_net_profit) > 1000
),
TopSales AS (
    SELECT 
        item.i_item_id, 
        item.i_item_desc, 
        COALESCE(SalesCTE.total_quantity, 0) AS total_quantity,
        COALESCE(SalesCTE.total_profit, 0) AS total_profit
    FROM 
        item 
    LEFT JOIN SalesCTE ON item.i_item_sk = SalesCTE.ws_item_sk
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        cd.cd_gender,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_net_profit) AS total_spent
    FROM 
        customer c 
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY 
        c.c_customer_sk, cd.cd_gender
),
AggregatedData AS (
    SELECT 
        cs.c_customer_sk,
        CASE 
            WHEN cs.total_spent IS NULL THEN 'No Purchases'
            WHEN cs.total_spent < 100 THEN 'Low Spender'
            WHEN cs.total_spent BETWEEN 100 AND 500 THEN 'Medium Spender'
            ELSE 'High Spender' 
        END AS spending_category,
        cs.total_orders,
        T.total_quantity,
        T.total_profit
    FROM 
        CustomerStats cs 
    LEFT JOIN TopSales T ON cs.c_customer_sk = T.i_item_id
)

SELECT 
    agg.spending_category, 
    COUNT(*) AS num_customers,
    AVG(agg.total_orders) AS avg_orders,
    SUM(agg.total_profit) AS total_profit
FROM 
    AggregatedData agg
GROUP BY 
    agg.spending_category
ORDER BY 
    CASE 
        WHEN agg.spending_category = 'No Purchases' THEN 1
        WHEN agg.spending_category = 'Low Spender' THEN 2
        WHEN agg.spending_category = 'Medium Spender' THEN 3
        WHEN agg.spending_category = 'High Spender' THEN 4
    END;
