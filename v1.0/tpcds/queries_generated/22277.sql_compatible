
WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        item i ON ws.ws_item_sk = i.i_item_sk
    INNER JOIN 
        customer_address ca ON ca.ca_address_sk = ws.ws_ship_addr_sk
    WHERE 
        ca.ca_state IN ('CA', 'NY')
        AND i.i_current_price IS NOT NULL
    GROUP BY 
        ws.ws_item_sk
),
TopSellingItems AS (
    SELECT 
        r.ws_item_sk,
        r.total_quantity,
        r.total_sales
    FROM 
        RankedSales r
    WHERE 
        r.sales_rank = 1
),
DateRange AS (
    SELECT 
        MIN(d.d_date) AS start_date,
        MAX(d.d_date) AS end_date
    FROM 
        date_dim d
    WHERE 
        d.d_holiday = 'Y'
),
ReturnStats AS (
    SELECT 
        sr.returned_date_sk,
        COUNT(*) AS total_returns,
        SUM(sr.return_amt) AS total_returned_amount
    FROM 
        store_returns sr
    JOIN 
        DateRange dr ON dr.start_date <= sr.sr_returned_date_sk 
        AND sr.sr_returned_date_sk <= dr.end_date
    GROUP BY 
        sr.returned_date_sk
)
SELECT 
    tsi.ws_item_sk,
    tsi.total_quantity,
    tsi.total_sales,
    COALESCE(rs.total_returns, 0) AS total_returns,
    COALESCE(rs.total_returned_amount, 0.00) AS total_returned_amount,
    CASE 
        WHEN tsi.total_sales > 0 THEN ROUND((COALESCE(rs.total_returned_amount, 0) / tsi.total_sales), 4)
        ELSE NULL
    END AS return_rate
FROM 
    TopSellingItems tsi
LEFT JOIN 
    ReturnStats rs ON rs.returned_date_sk = tsi.ws_item_sk
WHERE 
    tsi.total_sales IS NOT NULL
ORDER BY 
    return_rate DESC
FETCH FIRST 10 ROWS ONLY;
