
WITH RECURSIVE customer_tree AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_cdemo_sk, 0 AS level
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk, ct.level + 1
    FROM customer c
    JOIN customer_tree ct ON c.c_current_cdemo_sk = ct.c_customer_sk
),
sales_summary AS (
    SELECT 
        cs.cs_item_sk,
        SUM(cs.cs_quantity) AS total_quantity,
        SUM(cs.cs_ext_sales_price) AS total_sales,
        COUNT(DISTINCT cs.cs_order_number) AS order_count
    FROM catalog_sales cs
    JOIN date_dim dd ON cs.cs_sold_date_sk = dd.d_date_sk
    WHERE dd.d_year = 2023 AND cs.cs_item_sk IS NOT NULL
    GROUP BY cs.cs_item_sk
),
top_items AS (
    SELECT 
        item.i_item_id,
        item.i_item_desc,
        ss.total_quantity,
        ss.total_sales,
        RANK() OVER (ORDER BY ss.total_sales DESC) AS sales_rank
    FROM item
    JOIN sales_summary ss ON item.i_item_sk = ss.cs_item_sk
),
addresses AS (
    SELECT 
        ca.ca_address_sk,
        ca.ca_city,
        ca.ca_state,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count
    FROM customer_address ca
    LEFT JOIN customer c ON c.c_current_addr_sk = ca.ca_address_sk
    GROUP BY ca.ca_address_sk, ca.ca_city, ca.ca_state
)
SELECT 
    ct.c_first_name, 
    ct.c_last_name, 
    ti.i_item_id, 
    ti.total_sales, 
    a.ca_city, 
    a.ca_state,
    CASE 
        WHEN a.customer_count IS NULL THEN 'No customers'
        ELSE 'Customers present'
    END AS customer_status,
    DENSE_RANK() OVER (PARTITION BY a.ca_state ORDER BY ti.total_sales DESC) AS state_sales_rank
FROM customer_tree ct
JOIN top_items ti ON ct.c_current_cdemo_sk = ti.i_item_id
JOIN addresses a ON ct.c_current_addr_sk = a.ca_address_sk
WHERE ti.total_sales > 1000
ORDER BY a.ca_state, ti.total_sales DESC;
