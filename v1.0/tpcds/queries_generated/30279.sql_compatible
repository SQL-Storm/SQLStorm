
WITH RECURSIVE sales_summary AS (
    SELECT
        ws_item_sk,
        ws_order_number,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_order_number DESC) AS rn
    FROM
        web_sales
    GROUP BY
        ws_item_sk, ws_order_number
),
customer_rank AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        DENSE_RANK() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS purchase_rank
    FROM
        customer c
    JOIN
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
return_analysis AS (
    SELECT
        cr.cr_item_sk,
        SUM(cr.cr_return_quantity) AS total_returns,
        COUNT(DISTINCT cr.cr_order_number) AS return_count
    FROM
        catalog_returns cr
    GROUP BY
        cr.cr_item_sk
)
SELECT
    cs.ws_item_sk,
    i.i_product_name,
    cs.total_quantity - COALESCE(ra.total_returns, 0) AS net_quantity,
    cs.total_sales,
    c.c_first_name,
    c.c_last_name,
    cr.purchase_rank,
    CASE
        WHEN cs.total_sales IS NULL THEN 'No Sales'
        WHEN (cs.total_sales - COALESCE(ra.total_returns, 0)) > 1000 THEN 'High Volume'
        ELSE 'Low Volume'
    END AS sales_category
FROM
    sales_summary cs
JOIN
    item i ON cs.ws_item_sk = i.i_item_sk
LEFT JOIN
    return_analysis ra ON cs.ws_item_sk = ra.cr_item_sk
JOIN
    customer_rank cr ON cr.c_customer_sk = cs.ws_bill_customer_sk
WHERE
    (cr.purchase_rank <= 10 OR cr.purchase_rank IS NULL)
    AND (i.i_current_price > 20.00 OR i.i_brand = 'Brand A')
ORDER BY
    net_quantity DESC, cs.total_sales DESC;
