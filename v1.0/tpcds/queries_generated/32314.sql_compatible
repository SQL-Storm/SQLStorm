
WITH RECURSIVE sale_summary AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_ext_sales_price) AS total_sales
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk BETWEEN 1000 AND 2000 
    GROUP BY 
        ws_item_sk
    UNION ALL
    SELECT 
        cs_item_sk,
        SUM(cs_quantity) AS total_quantity,
        SUM(cs_ext_sales_price) AS total_sales
    FROM 
        catalog_sales
    WHERE 
        cs_sold_date_sk BETWEEN 1000 AND 2000 
    GROUP BY 
        cs_item_sk
),
active_items AS (
    SELECT 
        i_item_sk,
        i_item_desc,
        i_current_price
    FROM 
        item
    WHERE 
        i_rec_start_date <= DATE '2002-10-01' 
        AND (i_rec_end_date IS NULL OR i_rec_end_date > DATE '2002-10-01')
),
final_summary AS (
    SELECT 
        ai.i_item_sk,
        ai.i_item_desc,
        COALESCE(ss.total_quantity, 0) AS total_quantity,
        COALESCE(ss.total_sales, 0) AS total_sales,
        (COALESCE(ss.total_sales, 0) - (ai.i_current_price * COALESCE(ss.total_quantity, 0))) AS net_profit_loss
    FROM 
        active_items ai
    LEFT JOIN 
        sale_summary ss ON ai.i_item_sk = ss.ws_item_sk OR ai.i_item_sk = ss.cs_item_sk
),
promotion_analysis AS (
    SELECT 
        p.p_promo_name,
        SUM(fs.total_sales) AS promo_sales
    FROM 
        final_summary fs
    JOIN 
        promotion p ON fs.i_item_sk = p.p_item_sk
    GROUP BY 
        p.p_promo_name
)
SELECT 
    fa.i_item_desc,
    fa.total_quantity,
    fa.total_sales,
    fa.net_profit_loss,
    pa.promo_sales
FROM 
    final_summary fa
LEFT JOIN 
    promotion_analysis pa ON fa.total_sales > 10000 
ORDER BY 
    fa.net_profit_loss DESC, fa.total_sales DESC;
