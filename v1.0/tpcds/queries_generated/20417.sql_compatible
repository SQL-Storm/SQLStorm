
WITH CustomerSales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_net_paid) AS total_net_paid,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        DENSE_RANK() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ws.ws_net_paid) DESC) AS purchase_rank
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
),
TopCustomers AS (
    SELECT 
        cs.c_customer_sk,
        cs.c_first_name,
        cs.c_last_name,
        cs.total_net_paid,
        cs.total_orders
    FROM CustomerSales cs
    WHERE cs.purchase_rank <= 10
),
InventoryMetrics AS (
    SELECT 
        i.i_item_sk,
        SUM(i.inv_quantity_on_hand) AS total_quantity,
        COUNT(DISTINCT i.inv_date_sk) AS total_days_available
    FROM inventory i
    GROUP BY i.i_item_sk
),
HighValueItems AS (
    SELECT 
        inv.i_item_sk,
        inv.total_quantity,
        inv.total_days_available,
        wm.warehouse_name
    FROM InventoryMetrics inv
    JOIN warehouse wm ON inv.i_item_sk = wm.w_warehouse_sk
    WHERE inv.total_quantity > 100 AND inv.total_days_available BETWEEN 10 AND 30
),
CustomerReturns AS (
    SELECT 
        cr.returning_customer_sk,
        cr.return_item_sk,
        SUM(cr.return_quantity) AS total_returns
    FROM (
        SELECT
            wr_returning_customer_sk AS returning_customer_sk,
            wr_item_sk AS return_item_sk,
            wr_return_quantity AS return_quantity
        FROM web_returns
        UNION ALL
        SELECT
            sr_customer_sk AS returning_customer_sk,
            sr_item_sk AS return_item_sk,
            sr_return_quantity AS return_quantity
        FROM store_returns
    ) cr
    GROUP BY cr.returning_customer_sk, cr.return_item_sk
)
SELECT 
    tc.c_first_name,
    tc.c_last_name,
    tc.total_net_paid,
    ti.i_item_sk,
    COUNT(cr.total_returns) AS number_of_returns,
    CASE 
        WHEN COUNT(cr.total_returns) > 0 THEN 'Has Returns' 
        ELSE 'No Returns' 
    END AS return_status,
    CASE 
        WHEN tc.total_net_paid > 1000 THEN 'Premium Customer'
        ELSE 'Regular Customer'
    END AS customer_category
FROM TopCustomers tc
LEFT JOIN HighValueItems ti ON tc.c_customer_sk = ti.i_item_sk
LEFT JOIN CustomerReturns cr ON tc.c_customer_sk = cr.returning_customer_sk
GROUP BY tc.c_first_name, tc.c_last_name, tc.total_net_paid, ti.i_item_sk
HAVING COALESCE(SUM(cr.total_returns), 0) < 5
ORDER BY tc.total_net_paid DESC, return_status ASC;
