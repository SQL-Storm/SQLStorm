WITH SalesData AS (
    SELECT 
        ws.ws_sold_date_sk,
        ws.ws_ship_mode_sk,
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        RANK() OVER (PARTITION BY ws.ws_ship_mode_sk ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM web_sales ws
    JOIN item i ON ws.ws_item_sk = i.i_item_sk
    WHERE i.i_current_price IS NOT NULL AND i.i_current_price > 0
    GROUP BY ws.ws_sold_date_sk, ws.ws_ship_mode_sk, ws.ws_item_sk
),

MaxSales AS (
    SELECT 
        sd.ws_ship_mode_sk,
        MAX(sd.total_sales) AS max_sales
    FROM SalesData sd
    GROUP BY sd.ws_ship_mode_sk
),

CustomerRefunds AS (
    SELECT 
        sr.sr_customer_sk,
        SUM(sr.sr_return_quantity) AS total_returns,
        COUNT(DISTINCT sr.sr_ticket_number) AS return_tickets,
        COALESCE(SUM(sr.sr_return_amt), 0) AS total_refund
    FROM store_returns sr
    LEFT JOIN customer c ON sr.sr_customer_sk = c.c_customer_sk
    WHERE c.c_customer_sk IS NOT NULL
    GROUP BY sr.sr_customer_sk
    HAVING SUM(sr.sr_return_quantity) > 0
),

FinalResults AS (
    SELECT 
        cs.c_customer_id,
        cm.total_returns,
        mm.max_sales,
        cs.return_tickets
    FROM CustomerRefunds cm
    JOIN customer cs ON cm.sr_customer_sk = cs.c_customer_sk
    LEFT JOIN MaxSales mm ON 1=1
    WHERE cm.total_returns > 0
    AND mm.max_sales IS NOT NULL
)

SELECT 
    fr.c_customer_id,
    fr.total_returns,
    CASE 
        WHEN fr.total_returns IS NULL THEN 'No Returns'
        WHEN fr.total_returns BETWEEN 1 AND 5 THEN 'Few Returns'
        WHEN fr.total_returns BETWEEN 6 AND 15 THEN 'Moderate Returns'
        ELSE 'High Returns'
    END AS return_category,
    COALESCE(fr.return_tickets, 0) AS return_ticket_count
FROM FinalResults fr
WHERE EXISTS (
    SELECT 1
    FROM date_dim dd
    WHERE dd.d_date_id = (SELECT MAX(d_date_id) FROM date_dim)
      AND dd.d_year = EXTRACT(YEAR FROM cast('2002-10-01' as date))
) OR (fr.total_returns IS NOT NULL AND fr.total_returns > 10)
ORDER BY fr.total_returns DESC, fr.c_customer_id
OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY;