
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        sd.s_store_sk, 
        sd.ss_sold_date_sk, 
        SUM(sd.ss_quantity) AS total_quantity 
    FROM 
        customer c 
    JOIN 
        store_sales sd ON c.c_customer_sk = sd.ss_customer_sk 
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, sd.s_store_sk, sd.ss_sold_date_sk 
    UNION ALL 
    SELECT 
        sh.c_customer_sk, 
        sh.c_first_name, 
        sh.c_last_name, 
        sd.s_store_sk, 
        sd.ss_sold_date_sk, 
        SUM(sd.ss_quantity) AS total_quantity 
    FROM 
        sales_hierarchy sh 
    JOIN 
        store_sales sd ON sh.s_store_sk = sd.s_store_sk 
    GROUP BY 
        sh.c_customer_sk, sh.c_first_name, sh.c_last_name, sd.s_store_sk, sd.ss_sold_date_sk 
), total_sales AS (
    SELECT 
        s.c_customer_sk, 
        COALESCE(SUM(s.total_quantity), 0) AS total_sales_quantity 
    FROM 
        sales_hierarchy s 
    GROUP BY 
        s.c_customer_sk 
), average_sales AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        ts.total_sales_quantity,
        COUNT(DISTINCT ts.total_sales_quantity) OVER (ORDER BY ts.total_sales_quantity DESC) AS rank
    FROM 
        customer c 
    LEFT JOIN 
        total_sales ts ON c.c_customer_sk = ts.c_customer_sk
)
SELECT 
    CONCAT(a.c_first_name, ' ', a.c_last_name) AS full_name,
    a.total_sales_quantity,
    CASE 
        WHEN a.total_sales_quantity IS NULL THEN 'No Sales'
        WHEN a.total_sales_quantity > 0 AND a.total_sales_quantity < 50 THEN 'Low Sales'
        WHEN a.total_sales_quantity BETWEEN 50 AND 100 THEN 'Moderate Sales'
        ELSE 'High Sales'
    END AS sales_category,
    DENSE_RANK() OVER (ORDER BY a.total_sales_quantity DESC) AS sales_rank
FROM 
    average_sales a
WHERE 
    a.total_sales_quantity IS NOT NULL
ORDER BY 
    a.total_sales_quantity DESC
FETCH FIRST 10 ROWS ONLY;
