
WITH CustomerReturns AS (
    SELECT 
        c.c_customer_id,
        COUNT(DISTINCT cr.cr_order_number) AS total_catalog_returns,
        SUM(cr.cr_return_amount) AS total_catalog_return_amount
    FROM 
        customer c
    LEFT JOIN 
        catalog_returns cr ON c.c_customer_sk = cr.cr_returning_customer_sk
    GROUP BY 
        c.c_customer_id
),
SalesData AS (
    SELECT 
        ws.ws_bill_customer_sk AS customer_sk,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        ws.ws_bill_customer_sk
),
AggregateData AS (
    SELECT 
        COALESCE(cr.c_customer_id, sd.customer_sk) AS customer_id,
        COALESCE(sd.total_sales, 0) AS total_sales,
        COALESCE(cr.total_catalog_returns, 0) AS total_catalog_returns,
        COALESCE(cr.total_catalog_return_amount, 0) AS total_catalog_return_amount
    FROM 
        CustomerReturns cr
    FULL OUTER JOIN 
        SalesData sd ON cr.c_customer_id = sd.customer_sk
)
SELECT 
    ad.customer_id,
    ad.total_sales,
    ad.total_catalog_returns,
    ad.total_catalog_return_amount,
    DENSE_RANK() OVER (ORDER BY ad.total_sales DESC) AS sales_rank,
    CASE 
        WHEN ad.total_sales > 1000 THEN 'High Value'
        WHEN ad.total_sales > 500 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value_category
FROM 
    AggregateData ad
WHERE 
    ad.total_sales > 0 OR ad.total_catalog_returns > 0
ORDER BY 
    ad.total_sales DESC;
