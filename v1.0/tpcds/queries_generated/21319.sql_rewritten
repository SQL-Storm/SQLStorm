WITH RecursiveCustomer AS (
    SELECT c.c_customer_sk, 
           c_cust_pref_flag,
           cd.cd_income_band_sk,
           ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY cd.cd_dep_count DESC) AS rn
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_marital_status IS NOT NULL OR cd.cd_gender IS NOT NULL
),
DateAggregate AS (
    SELECT d.d_year, 
           COUNT(DISTINCT wr.wr_order_number) AS total_web_returns,
           SUM(COALESCE(wr.wr_return_amt, 0)) as total_return_amt
    FROM date_dim d
    LEFT JOIN web_returns wr ON d.d_date_sk = wr.wr_returned_date_sk
    WHERE d.d_year >= 1998
    GROUP BY d.d_year
),
CustomerMetrics AS (
    SELECT c.c_customer_sk,
           COUNT(DISTINCT ws.ws_order_number) AS total_orders,
           SUM(ws.ws_ext_sales_price) AS total_spent,
           AVG(ws.ws_net_profit) AS avg_profit_per_order
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk
)
SELECT 
    cc.c_customer_sk,
    COALESCE(cm.total_orders, 0) AS total_orders,
    DENSE_RANK() OVER (ORDER BY COALESCE(cm.total_orders, 0) DESC) AS order_rank,
    da.total_web_returns,
    da.total_return_amt,
    CASE 
        WHEN da.total_web_returns IS NOT NULL AND da.total_web_returns > 0 THEN 'Has Returns'
        ELSE 'No Returns'
    END AS return_status,
    COALESCE(CASE 
        WHEN (rc.cd_income_band_sk IS NOT NULL AND rc.rn = 1 AND cm.avg_profit_per_order > 1000) THEN 'High Potential'
        ELSE 'Regular Customer'
    END, 'Unknown') AS customer_segment    
FROM RecursiveCustomer rc
LEFT JOIN CustomerMetrics cm ON rc.c_customer_sk = cm.c_customer_sk
LEFT JOIN DateAggregate da ON EXTRACT(YEAR FROM cast('2002-10-01' as date)) = da.d_year
WHERE rc.cust_pref_flag = 'Y' 
  AND da.total_return_amt > (SELECT AVG(total_return_amt) FROM DateAggregate)
ORDER BY rc.c_customer_sk DESC NULLS LAST;