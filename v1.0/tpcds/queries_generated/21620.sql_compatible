
WITH RecursiveInventory AS (
    SELECT 
        inv_item_sk, 
        inv_warehouse_sk, 
        inv_quantity_on_hand,
        ROW_NUMBER() OVER (PARTITION BY inv_item_sk ORDER BY inv_quantity_on_hand DESC) AS rn
    FROM inventory
    WHERE inv_quantity_on_hand IS NOT NULL
),
HighSellingItems AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity_sold
    FROM web_sales
    GROUP BY ws_item_sk
    HAVING SUM(ws_quantity) > 1000
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT s.ss_ticket_number) AS sales_count,
        COUNT(DISTINCT sr.ticket_number) AS returns_count,
        COALESCE(SUM(s.ss_net_profit), 0) AS total_profit,
        COALESCE(SUM(sr.sr_return_amt), 0) AS total_returns
    FROM customer c
    LEFT JOIN store_sales s ON c.c_customer_sk = s.ss_customer_sk
    LEFT JOIN store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    WHERE c.c_birth_year < 1990
    GROUP BY c.c_customer_sk
),
PromotionalImpact AS (
    SELECT 
        p.p_promo_name,
        COUNT(DISTINCT ws.ws_order_number) AS promo_sales_count,
        SUM(ws.ws_ext_sales_price) AS total_promo_sales,
        AVG(ws.ws_coupon_amt) AS avg_coupon_used,
        COUNT(DISTINCT hd.hd_demo_sk) AS customer_count
    FROM promotion p
    JOIN web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    LEFT JOIN household_demographics hd ON ws.ws_bill_cdemo_sk = hd.hd_demo_sk
    GROUP BY p.p_promo_name
)
SELECT 
    ci.inv_item_sk,
    ci.inv_warehouse_sk,
    ci.inv_quantity_on_hand,
    hs.total_quantity_sold,
    cs.c_customer_sk,
    cs.sales_count,
    cs.returns_count,
    cs.total_profit,
    cs.total_returns,
    pi.promo_sales_count,
    pi.total_promo_sales,
    pi.avg_coupon_used,
    pi.customer_count
FROM RecursiveInventory ci
FULL OUTER JOIN HighSellingItems hs ON ci.inv_item_sk = hs.ws_item_sk
LEFT JOIN CustomerStats cs ON ci.inv_item_sk = (
    SELECT ws_item_sk
    FROM web_sales
    WHERE ws_sold_date_sk IN (
        SELECT d_date_sk 
        FROM date_dim 
        WHERE d_year = 2023 AND d_dow = 5
    )
    LIMIT 1
)
LEFT JOIN PromotionalImpact pi ON pi.total_promo_sales > (SELECT AVG(total_profit) FROM CustomerStats)
WHERE ci.rn = 1 OR hs.total_quantity_sold IS NOT NULL
ORDER BY FIRST_VALUE(ci.inv_quantity_on_hand) OVER (PARTITION BY ci.inv_item_sk ORDER BY ci.inv_quantity_on_hand DESC NULLS LAST);
