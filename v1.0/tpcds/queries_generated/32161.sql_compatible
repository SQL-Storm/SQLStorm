
WITH RECURSIVE SalesCTE AS (
    SELECT ss_item_sk, ss_quantity, ss_net_paid, ss_sold_date_sk
    FROM store_sales
    WHERE ss_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2001 AND d_month_seq = (SELECT d_month_seq FROM date_dim WHERE d_date = '2002-10-01'))
    
    UNION ALL
    
    SELECT s.ss_item_sk, s.ss_quantity + c.ss_quantity, s.ss_net_paid + c.ss_net_paid, s.ss_sold_date_sk
    FROM store_sales s
    INNER JOIN SalesCTE c ON s.ss_item_sk = c.ss_item_sk
    WHERE s.ss_sold_date_sk < c.ss_sold_date_sk
),
AggregatedSales AS (
    SELECT 
        s.ss_item_sk,
        SUM(s.ss_quantity) AS total_quantity,
        SUM(s.ss_net_paid) AS total_net_paid,
        AVG(s.ss_net_paid) AS avg_net_paid,
        ROW_NUMBER() OVER (PARTITION BY s.ss_item_sk ORDER BY SUM(s.ss_net_paid) DESC) AS rank
    FROM SalesCTE s
    GROUP BY s.ss_item_sk
    HAVING SUM(s.ss_quantity) > (
        SELECT AVG(ss_quantity) FROM store_sales
        WHERE ss_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2000)
    )
)
SELECT 
    i.i_item_id,
    i.i_item_desc,
    a.total_quantity,
    a.total_net_paid,
    a.avg_net_paid
FROM AggregatedSales a
JOIN item i ON a.ss_item_sk = i.i_item_sk
LEFT JOIN store s ON a.ss_item_sk = s.ss_item_sk
WHERE i.i_current_price IS NOT NULL
ORDER BY a.total_net_paid DESC
LIMIT 10;
