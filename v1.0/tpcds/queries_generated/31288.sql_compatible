
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, 1 AS level
    FROM customer
    WHERE c_customer_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, ch.level + 1
    FROM customer c
    JOIN CustomerHierarchy ch ON c.c_current_cdemo_sk = ch.c_customer_sk
),
SalesSummary AS (
    SELECT 
        ws_bill_customer_sk,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_net_paid_inc_tax) AS total_revenue,
        AVG(ws_net_paid_inc_tax) AS avg_order_value
    FROM web_sales
    WHERE ws_sold_date_sk >= (SELECT MAX(d_date_sk) - 30 FROM date_dim)
    GROUP BY ws_bill_customer_sk
),
HighValueCustomers AS (
    SELECT 
        cs.c_customer_sk, 
        CONCAT(cs.c_first_name, ' ', cs.c_last_name) AS customer_name,
        ss.total_orders,
        ss.total_revenue 
    FROM customer cs
    JOIN SalesSummary ss ON cs.c_customer_sk = ss.ws_bill_customer_sk
    WHERE ss.total_revenue > 1000
),
States AS (
    SELECT DISTINCT ca_state 
    FROM customer_address
),
ReturnStats AS (
    SELECT 
        sr.returning_customer_sk,
        COUNT(sr.returning_customer_sk) AS return_count,
        SUM(sr.return_amt_inc_tax) AS total_returns
    FROM store_returns sr
    GROUP BY sr.returning_customer_sk
),
FinalReport AS (
    SELECT 
        hvc.customer_name,
        hvc.total_orders,
        hvc.total_revenue,
        COALESCE(rs.return_count, 0) AS return_count,
        COALESCE(rs.total_returns, 0) AS total_returns,
        CASE 
            WHEN hvc.total_revenue > 5000 THEN 'VIP Customer'
            WHEN hvc.total_revenue BETWEEN 1000 AND 5000 THEN 'Regular Customer'
            ELSE 'Low Value Customer' 
        END AS customer_classification
    FROM HighValueCustomers hvc
    LEFT JOIN ReturnStats rs ON hvc.c_customer_sk = rs.returning_customer_sk
)
SELECT 
    fr.customer_name,
    fr.total_orders,
    fr.total_revenue,
    fr.return_count,
    fr.total_returns,
    fr.customer_classification,
    (SELECT COUNT(*) FROM States) AS total_states,
    ROW_NUMBER() OVER (PARTITION BY fr.customer_classification ORDER BY fr.total_revenue DESC) AS classification_rank
FROM FinalReport fr
WHERE fr.total_orders > 0
ORDER BY fr.total_revenue DESC;
