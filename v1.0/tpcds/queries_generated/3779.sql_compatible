
WITH RankedSales AS (
    SELECT 
        ws_bill_customer_sk,
        SUM(ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_bill_customer_sk ORDER BY SUM(ws_ext_sales_price) DESC) AS sales_rank
    FROM web_sales
    GROUP BY ws_bill_customer_sk
),
TopCustomers AS (
    SELECT 
        r.ws_bill_customer_sk,
        r.total_sales,
        c.c_first_name,
        c.c_last_name,
        ca.ca_city,
        ca.ca_state
    FROM RankedSales r
    JOIN customer c ON r.ws_bill_customer_sk = c.c_customer_sk
    LEFT JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    WHERE r.sales_rank <= 10
),
SalesWithPromotions AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_item_sk,
        ws.ws_ext_sales_price,
        p.promo_name,
        COALESCE(p.p_cost, 0) AS promo_cost,
        (ws.ws_sales_price - COALESCE(p.p_cost, 0)) AS effective_sales_price
    FROM web_sales ws
    LEFT JOIN promotion p ON ws.ws_promo_sk = p.p_promo_sk
),
SalesSummary AS (
    SELECT 
        t.ws_bill_customer_sk,
        SUM(t.effective_sales_price) AS effective_sales_total,
        COUNT(t.ws_order_number) AS total_orders
    FROM SalesWithPromotions t
    GROUP BY t.ws_bill_customer_sk
)
SELECT 
    tc.ws_bill_customer_sk,
    tc.total_sales,
    ss.effective_sales_total,
    ss.total_orders,
    (CASE 
        WHEN ss.effective_sales_total IS NULL THEN 'No Sales'
        WHEN ss.effective_sales_total >= tc.total_sales THEN 'High Value'
        ELSE 'Returning'
    END) AS customer_category
FROM TopCustomers tc
FULL OUTER JOIN SalesSummary ss ON tc.ws_bill_customer_sk = ss.ws_bill_customer_sk
WHERE tc.ca_state = 'CA' OR (ss.effective_sales_total IS NOT NULL AND ss.total_orders > 0)
ORDER BY tc.total_sales DESC, ss.total_orders ASC;
