
WITH RankedReturns AS (
    SELECT 
        sr_customer_sk,
        SUM(sr_return_quantity) AS total_return_quantity,
        SUM(sr_return_amt) AS total_return_amt,
        ROW_NUMBER() OVER (PARTITION BY sr_customer_sk ORDER BY SUM(sr_return_amt) DESC) AS rn
    FROM
        store_returns
    GROUP BY 
        sr_customer_sk
),
CustomerInfo AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_income_band_sk,
        cd.cd_credit_rating,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY cd.cd_purchase_estimate DESC) AS rn
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
StoreSalesSummary AS (
    SELECT 
        ss_store_sk,
        COUNT(DISTINCT ss_customer_sk) AS total_customers,
        SUM(ss_ext_sales_price) AS total_sales_value
    FROM 
        store_sales
    GROUP BY 
        ss_store_sk
),
QueriedStores AS (
    SELECT
        s.s_store_sk,
        s.s_store_name,
        s.s_city,
        s.s_state,
        s.s_country,
        COALESCE(ss.total_customers, 0) AS total_customers,
        COALESCE(ss.total_sales_value, 0) AS total_sales_value
    FROM 
        store s
    LEFT JOIN 
        StoreSalesSummary ss ON s.s_store_sk = ss.ss_store_sk
),
FinalReport AS (
    SELECT 
        ci.c_customer_sk,
        ci.c_first_name,
        ci.c_last_name,
        ci.cd_gender,
        ci.cd_marital_status,
        qr.s_store_sk,
        qr.s_store_name,
        qr.total_customers,
        qr.total_sales_value,
        rr.total_return_quantity,
        rr.total_return_amt
    FROM 
        CustomerInfo ci
    INNER JOIN 
        QueriedStores qr ON ci.c_customer_sk = qr.s_store_sk
    LEFT JOIN 
        RankedReturns rr ON ci.c_customer_sk = rr.sr_customer_sk AND rr.rn = 1
)
SELECT 
    *,
    CASE 
        WHEN total_sales_value > 0 THEN (total_return_amt / total_sales_value) * 100 
        ELSE NULL 
    END AS return_percentage
FROM 
    FinalReport
WHERE 
    total_return_quantity > 0
ORDER BY 
    return_percentage DESC
FETCH FIRST 100 ROWS ONLY;
