WITH RankedSales AS (
    SELECT 
        ws.web_site_id,
        ws.ws_order_number,
        ws.ws_sales_price,
        SUM(ws.ws_sales_price) OVER (PARTITION BY ws.web_site_id ORDER BY ws.ws_order_number) AS cumulative_sales,
        DENSE_RANK() OVER (PARTITION BY ws.web_site_id ORDER BY ws.ws_sales_price DESC) AS sales_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
        AND ws.ws_sales_price >= 0.01
),
FilteredSales AS (
    SELECT 
        web_site_id,
        ws_order_number,
        ws_sales_price,
        cumulative_sales,
        sales_rank,
        CASE 
            WHEN sales_rank = 1 THEN 'Top Sale'
            WHEN sales_rank BETWEEN 2 AND 5 THEN 'High Sale'
            ELSE 'Other'
        END AS sale_category
    FROM 
        RankedSales
    WHERE 
        cumulative_sales < (SELECT AVG(cumulative_sales) FROM RankedSales)
),
FinalResults AS (
    SELECT 
        fs.web_site_id,
        fs.sale_category,
        COUNT(*) AS total_sales,
        AVG(fs.ws_sales_price) AS avg_sales_price,
        SUM(fs.ws_sales_price) AS total_sales_value
    FROM 
        FilteredSales fs
    LEFT JOIN 
        customer c ON fs.ws_order_number = c.c_customer_id
    WHERE 
        c.c_customer_id IS NOT NULL
        AND coalesce(c.c_birth_month, 0) = (SELECT MAX(c_birth_month) FROM customer) 
    GROUP BY 
        fs.web_site_id, fs.sale_category
)
SELECT 
    f.web_site_id,
    f.sale_category,
    f.total_sales,
    f.avg_sales_price,
    f.total_sales_value,
    ROW_NUMBER() OVER (ORDER BY f.total_sales_value DESC) AS ranking
FROM 
    FinalResults f
FULL OUTER JOIN 
    store s ON f.web_site_id = CONVERT(CHAR(16), s.s_store_id) 
WHERE 
    f.total_sales IS NOT NULL 
    OR s.s_store_id IS NULL
    AND (SELECT COUNT(*) FROM store_returns sr WHERE sr.sr_return_quantity > 0) > 10 
ORDER BY 
    f.total_sales_value DESC, 
    f.web_site_id ASC;