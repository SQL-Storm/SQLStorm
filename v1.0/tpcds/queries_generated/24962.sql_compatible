
WITH RankedSales AS (
    SELECT
        ws.web_site_sk,
        ws.sold_date_sk,
        ws.item_sk,
        ws.net_paid,
        RANK() OVER (PARTITION BY ws.sold_date_sk ORDER BY ws.net_paid DESC) AS sales_rank
    FROM
        web_sales ws
    WHERE
        ws.net_paid > 0
),
TopSales AS (
    SELECT
        r.web_site_sk,
        r.sold_date_sk,
        r.item_sk,
        r.net_paid
    FROM
        RankedSales r
    WHERE
        r.sales_rank <= 5
),
CustomerInfo AS (
    SELECT
        c.c_customer_sk,
        c.c_current_cdemo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        cd.cd_credit_rating
    FROM
        customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
StoreSalesSummary AS (
    SELECT
        s.s_store_sk,
        SUM(ss.net_paid) AS total_sales,
        COUNT(ss.ticket_number) AS transaction_count,
        COUNT(DISTINCT ss.customer_sk) AS unique_customers
    FROM
        store_sales ss
    JOIN store s ON ss.s_store_sk = s.s_store_sk
    WHERE
        ss.ss_sold_date_sk IN (SELECT DISTINCT sold_date_sk FROM TopSales)
    GROUP BY
        s.s_store_sk
)
SELECT
    cs.c_customer_sk,
    cs.cd_gender,
    cs.cd_marital_status,
    cs.cd_purchase_estimate,
    ss.total_sales,
    (CASE 
        WHEN cs.cd_credit_rating IS NULL THEN 'Unknown'
        WHEN cs.cd_credit_rating IN ('Good', 'Excellent') THEN 'Premium'
        ELSE 'Standard'
    END) AS customer_classification,
    COALESCE(ss.transaction_count, 0) AS transaction_count,
    COALESCE(ss.unique_customers, 0) AS unique_customers
FROM
    CustomerInfo cs
LEFT JOIN StoreSalesSummary ss ON cs.c_current_cdemo_sk = ss.s_store_sk
WHERE
    (cs.cd_purchase_estimate > 5000 OR cs.cd_gender IS NULL)
    AND NOT EXISTS (
        SELECT 1
        FROM store s
        WHERE s.s_closed_date_sk IS NOT NULL AND s.s_store_sk = ss.s_store_sk
    )
ORDER BY
    total_sales DESC NULLS LAST;
