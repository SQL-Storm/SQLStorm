
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        s.s_store_id,
        SUM(ss.ss_net_profit) AS total_profit
    FROM 
        store s
    JOIN 
        store_sales ss ON s.s_store_sk = ss.ss_store_sk
    GROUP BY 
        s.s_store_id
    UNION ALL
    SELECT 
        NULL,
        SUM(total_profit) 
    FROM 
        SalesHierarchy
), 
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        d.d_year,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_net_profit) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN 
        date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE 
        d.d_year IS NOT NULL
    GROUP BY 
        c.c_customer_sk, d.d_year
),
PromotionStats AS (
    SELECT 
        p.p_promo_id,
        COUNT(DISTINCT ws.ws_order_number) AS promo_order_count,
        SUM(ws.ws_net_profit) AS promo_net_profit
    FROM 
        promotion p
    LEFT JOIN 
        web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    GROUP BY 
        p.p_promo_id
)
SELECT 
    c.first_name,
    c.last_name,
    cs.total_orders,
    cs.total_spent,
    ph.total_profit,
    ps.promo_order_count,
    ps.promo_net_profit
FROM 
    customer c
JOIN 
    CustomerStats cs ON c.c_customer_sk = cs.c_customer_sk
LEFT JOIN 
    SalesHierarchy ph ON cs.total_spent > 10000
LEFT JOIN 
    PromotionStats ps ON cs.total_orders > 5
WHERE 
    cs.total_spent > (SELECT AVG(total_spent) FROM CustomerStats) 
    AND cs.total_orders IS NOT NULL;
