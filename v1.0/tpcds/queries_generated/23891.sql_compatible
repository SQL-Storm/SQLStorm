
WITH RankedSales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS rn
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) - 30 FROM date_dim) 
        AND (SELECT MAX(d_date_sk) FROM date_dim)
    GROUP BY 
        ws_item_sk
),
HighValueCustomers AS (
    SELECT 
        c_customer_sk, 
        c_first_name, 
        c_last_name, 
        cd_purchase_estimate
    FROM 
        customer 
    JOIN 
        customer_demographics ON c_current_cdemo_sk = cd_demo_sk
    WHERE 
        cd_purchase_estimate > (SELECT AVG(cd_purchase_estimate) FROM customer_demographics)
),
ReturnAnalysis AS (
    SELECT 
        sr_item_sk, 
        COUNT(DISTINCT sr_ticket_number) AS total_returns, 
        SUM(sr_return_amt_inc_tax) AS total_return_value
    FROM 
        store_returns 
    GROUP BY 
        sr_item_sk
)
SELECT 
    items.i_item_id,
    items.total_quantity,
    hvc.c_customer_sk,
    hvc.c_first_name,
    hvc.c_last_name,
    COALESCE(ran.total_returns, 0) AS total_returns,
    COALESCE(ran.total_return_value, 0) AS total_return_value,
    CASE 
        WHEN hvc.cd_purchase_estimate > 5000 THEN 'High Value'
        ELSE 'Standard Value'
    END AS customer_value_category
FROM 
    RankedSales AS items
LEFT JOIN 
    HighValueCustomers AS hvc ON items.ws_item_sk = hvc.c_customer_sk
LEFT JOIN 
    ReturnAnalysis AS ran ON items.ws_item_sk = ran.sr_item_sk
WHERE 
    items.rn = 1
AND 
    (items.total_quantity IS NOT NULL OR hvc.cd_purchase_estimate IS NOT NULL)
ORDER BY 
    items.total_quantity DESC, 
    hvc.c_last_name ASC;
