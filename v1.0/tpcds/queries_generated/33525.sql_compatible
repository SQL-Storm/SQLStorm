
WITH RECURSIVE sales_data AS (
    SELECT
        ss_sold_date_sk,
        ss_item_sk,
        ss_quantity,
        ss_net_paid,
        1 AS level
    FROM store_sales
    WHERE ss_sold_date_sk = (
        SELECT MAX(ss_sold_date_sk)
        FROM store_sales
    )
    UNION ALL
    SELECT
        ss.sold_date_sk,
        ss.item_sk,
        ss.quantity,
        ss.net_paid,
        sd.level + 1
    FROM store_sales ss
    JOIN sales_data sd ON ss.sold_date_sk = sd.ss_sold_date_sk - INTERVAL '1 DAY'
    WHERE sd.level < 10
),
customer_data AS (
    SELECT
        c.c_customer_sk,
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Unknown'
        END AS gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        SUM(ws.ws_net_paid) AS total_spent
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, cd.cd_marital_status, cd.cd_purchase_estimate, gender
),
top_customers AS (
    SELECT
        customer_sk,
        ROW_NUMBER() OVER (ORDER BY total_spent DESC) AS rank
    FROM (
        SELECT 
            c.c_customer_sk,
            SUM(ws.ws_net_paid) AS total_spent
        FROM customer c
        JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
        GROUP BY c.c_customer_sk
    ) AS customer_totals
)
SELECT
    cd.*, 
    CASE
        WHEN cd.total_spent IS NULL THEN 'No purchases'
        WHEN cd.total_spent < 100 THEN 'Low spender'
        ELSE 'High spender'
    END AS spending_category
FROM customer_data cd
LEFT JOIN top_customers tc ON cd.c_customer_sk = tc.customer_sk
WHERE cd.cd_marital_status = 'M'
AND EXISTS (
    SELECT 1
    FROM sales_data sd
    WHERE sd.ss_item_sk = (
        SELECT MAX(ss_item_sk)
        FROM store_sales
        WHERE ss_quantity > 5
    )
)
ORDER BY cd.total_spent DESC
LIMIT 50;
