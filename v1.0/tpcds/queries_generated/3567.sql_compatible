
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.ws_order_number,
        SUM(ws.ws_sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY ws.web_site_sk ORDER BY SUM(ws.ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE 
        d.d_year = 2023
    GROUP BY 
        ws.web_site_sk, ws.ws_order_number
),
CustomerReturns AS (
    SELECT 
        wr_returning_customer_sk,
        SUM(wr_return_amt) AS total_return_amt,
        COUNT(DISTINCT wr_order_number) AS return_count
    FROM 
        web_returns
    WHERE 
        wr_returned_date_sk IS NOT NULL
    GROUP BY 
        wr_returning_customer_sk
),
SalesSummary AS (
    SELECT 
        ca.ca_city,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_sales_price) AS total_sales,
        COALESCE(cr.total_return_amt, 0) AS total_returns,
        (SUM(ws.ws_sales_price) - COALESCE(cr.total_return_amt, 0)) AS net_sales
    FROM 
        web_sales ws
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    LEFT JOIN 
        customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    LEFT JOIN 
        CustomerReturns cr ON cr.wr_returning_customer_sk = c.c_customer_sk
    GROUP BY 
        ca.ca_city
)
SELECT 
    ca.ca_city AS city,
    total_orders,
    total_sales,
    total_returns,
    net_sales,
    CASE 
        WHEN net_sales > 10000 THEN 'High Performer'
        WHEN net_sales BETWEEN 5000 AND 10000 THEN 'Medium Performer'
        ELSE 'Low Performer'
    END AS performance_category
FROM 
    SalesSummary
WHERE 
    total_orders > 10
ORDER BY 
    net_sales DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
