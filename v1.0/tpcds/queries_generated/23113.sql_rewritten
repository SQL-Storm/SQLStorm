WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_sales_price) AS total_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_item_sk
),
EligibleItems AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        COALESCE(SUM(ws.ws_sales_price), 0) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS sales_orders
    FROM 
        item i
    LEFT JOIN 
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    WHERE 
        i.i_rec_start_date <= cast('2002-10-01' as date) AND 
        (i.i_rec_end_date IS NULL OR i.i_rec_end_date > cast('2002-10-01' as date))
    GROUP BY 
        i.i_item_sk, i.i_item_desc
    HAVING 
        COUNT(DISTINCT ws.ws_order_number) > 5
),
CustomerStats AS (
    SELECT 
        c.c_customer_id,
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Other'
        END AS gender,
        SUM(COALESCE(cs.cs_net_profit, 0)) AS total_net_profit,
        COUNT(DISTINCT cs.cs_order_number) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    GROUP BY 
        c.c_customer_id, cd.cd_gender
),
ComplexReturns AS (
    SELECT 
        r.r_reason_desc,
        COUNT(cr.cr_order_number) AS total_returns,
        SUM(cr.cr_return_amount) AS total_return_amount,
        SUM(cr.cr_fee) AS total_fees,
        SUM(CASE WHEN cr.cr_return_quantity > 0 THEN cr.cr_return_quantity ELSE 0 END) AS total_return_quantity
    FROM 
        reason r
    LEFT JOIN 
        catalog_returns cr ON r.r_reason_sk = cr.cr_reason_sk
    GROUP BY 
        r.r_reason_desc
)
SELECT 
    ei.i_item_desc,
    ei.total_sales,
    cs.gender,
    cs.total_net_profit,
    cs.order_count,
    cr.r_reason_desc,
    cr.total_returns,
    cr.total_return_amount,
    cr.total_fees,
    cr.total_return_quantity
FROM 
    EligibleItems ei
JOIN 
    CustomerStats cs ON cs.order_count > 0
LEFT JOIN 
    ComplexReturns cr ON cr.total_returns IS NOT NULL
WHERE 
    ei.total_sales > (SELECT AVG(total_sales) FROM EligibleItems)
ORDER BY 
    ei.total_sales DESC, cs.total_net_profit DESC
FETCH FIRST 100 ROWS ONLY;