WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        s_store_sk,
        s_store_name,
        s_number_employees,
        s_floor_space,
        CAST(0 AS INTEGER) AS level
    FROM store
    WHERE s_store_sk = 1  
    UNION ALL
    SELECT 
        s.store_sk,
        s.s_store_name,
        s.s_number_employees,
        s.s_floor_space,
        sh.level + 1
    FROM store s
    JOIN sales_hierarchy sh ON s.s_manager = sh.s_store_sk  
)
SELECT 
    c.c_customer_id,
    SUM(ss.ss_ext_sales_price) AS total_sales,
    COUNT(DISTINCT ss.ss_order_number) AS order_count,
    AVG(ss.ss_net_profit) AS avg_profit,
    DENSE_RANK() OVER (PARTITION BY c.c_customer_id ORDER BY SUM(ss.ss_ext_sales_price) DESC) AS sales_rank,
    CASE 
        WHEN AVG(ss.ss_net_profit) IS NULL THEN 'No Profit'
        WHEN AVG(ss.ss_net_profit) > 300 THEN 'High Profit'
        WHEN AVG(ss.ss_net_profit) BETWEEN 100 AND 300 THEN 'Medium Profit'
        ELSE 'Low Profit'
    END AS profit_category,
    COALESCE(
        (
            SELECT 
                wg.wg_zip 
            FROM warehouse wg 
            WHERE wg.w_warehouse_sq_ft > 
                (SELECT AVG(w.w_warehouse_sq_ft) FROM warehouse w)
            LIMIT 1
        ), 
        'Not Available'
    ) AS warehouse_zip,
    cast('2002-10-01' as date) - MAX(DISTINCT ss.ss_sold_date_sk) AS days_since_last_sale
FROM 
    customer c
LEFT JOIN 
    store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
INNER JOIN 
    sales_hierarchy sh ON ss.ss_store_sk = sh.s_store_sk
GROUP BY 
    c.c_customer_id
HAVING 
    COUNT(DISTINCT ss.ss_order_number) > 3 AND 
    total_sales > 1000
ORDER BY 
    total_sales DESC;