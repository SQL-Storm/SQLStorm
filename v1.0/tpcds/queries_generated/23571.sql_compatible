
WITH RankedReturns AS (
    SELECT
        sr_returned_date_sk,
        sr_return_time_sk,
        sr_item_sk,
        sr_customer_sk,
        sr_return_quantity,
        sr_return_amt,
        ROW_NUMBER() OVER (PARTITION BY sr_item_sk ORDER BY sr_returned_date_sk DESC) AS rn
    FROM store_returns
    WHERE sr_return_quantity > 0
),
TopReturns AS (
    SELECT
        rr.sr_item_sk,
        rr.sr_return_quantity,
        rr.sr_return_amt,
        COALESCE((SELECT SUM(ws.quantity) FROM web_sales ws WHERE ws.ws_item_sk = rr.sr_item_sk), 0) AS total_web_sales
    FROM RankedReturns rr
    WHERE rr.rn = 1
),
CustomerDemographics AS (
    SELECT
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        ib.ib_upper_bound,
        ib.ib_lower_bound,
        CASE
            WHEN cd.cd_purchase_estimate IS NULL THEN 'Unknown'
            WHEN cd.cd_purchase_estimate BETWEEN 0 AND 1000 THEN 'Low'
            WHEN cd.cd_purchase_estimate BETWEEN 1001 AND 5000 THEN 'Medium'
            ELSE 'High'
        END AS purchase_category
    FROM customer_demographics cd
    LEFT JOIN income_band ib ON cd.cd_purchase_estimate BETWEEN ib.ib_lower_bound AND ib.ib_upper_bound
),
ReturnMetrics AS (
    SELECT
        tr.sr_item_sk,
        tr.sr_return_quantity,
        tr.sr_return_amt,
        cd.purchase_category,
        cd.cd_gender,
        cd.cd_marital_status,
        CASE 
            WHEN cd.cd_gender IS NULL THEN 'Not Provided'
            ELSE cd.cd_gender
        END AS gender_status
    FROM TopReturns tr
    LEFT JOIN CustomerDemographics cd ON cd.cd_demo_sk = (
        SELECT c.c_current_cdemo_sk 
        FROM customer c 
        JOIN store_returns sr ON c.c_customer_sk = sr.sr_customer_sk 
        WHERE sr.sr_item_sk = tr.sr_item_sk 
        ORDER BY sr.sr_returned_date_sk DESC
        LIMIT 1
    )
)
SELECT
    rm.sr_item_sk,
    SUM(rm.sr_return_quantity) AS total_returned_quantity,
    SUM(rm.sr_return_amt) AS total_returned_amount,
    COUNT(rm.gender_status) AS count_of_customers,
    AVG(rm.sr_return_amt) OVER (PARTITION BY rm.purchase_category) AS avg_return_by_category,
    STRING_AGG(DISTINCT rm.cd_marital_status, ', ') AS marital_status_distribution
FROM ReturnMetrics rm
GROUP BY
    rm.sr_item_sk, 
    rm.purchase_category
HAVING SUM(rm.sr_return_quantity) > 5
ORDER BY total_returned_quantity DESC
LIMIT 10;
