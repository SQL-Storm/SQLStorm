
WITH RECURSIVE SalesCTE AS (
    SELECT
        ss.sold_date_sk,
        ss.ss_item_sk,
        SUM(ss.ext_sales_price) AS total_sales,
        COUNT(ss.ticket_number) AS transaction_count,
        ROW_NUMBER() OVER (PARTITION BY ss.ss_item_sk ORDER BY SUM(ss.ext_sales_price) DESC) AS sales_rank
    FROM
        store_sales ss
    WHERE
        ss.sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim) - 30
    GROUP BY
        ss.sold_date_sk, ss.ss_item_sk
    HAVING 
        SUM(ss.ext_sales_price) > 1000
),
PopularItems AS (
    SELECT
        item.i_item_id,
        item.i_item_desc,
        cs.total_sales,
        cs.transaction_count,
        cs.sales_rank
    FROM
        SalesCTE cs
    JOIN item
        ON cs.ss_item_sk = item.i_item_sk
    WHERE
        cs.sales_rank <= 10
),
CustomerReturns AS (
    SELECT
        wr_returning_customer_sk,
        SUM(wr_return_amt_inc_tax) AS total_return_amount
    FROM
        web_returns
    GROUP BY
        wr_returning_customer_sk
),
CustomerDetails AS (
    SELECT
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        COALESCE(r.total_return_amount, 0) AS total_returns
    FROM
        customer c
    JOIN customer_demographics cd
        ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN CustomerReturns r
        ON c.c_customer_sk = r.wr_returning_customer_sk
)
SELECT
    ci.c_customer_id,
    ci.total_returns,
    pi.i_item_id,
    pi.i_item_desc,
    pi.total_sales,
    pi.transaction_count
FROM
    CustomerDetails ci
LEFT JOIN PopularItems pi
    ON ci.total_returns > 0
WHERE
    ci.cd_purchase_estimate > 100
ORDER BY
    pi.total_sales DESC, ci.total_returns DESC;
