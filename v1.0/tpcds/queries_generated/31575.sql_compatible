
WITH RECURSIVE sales_data AS (
    SELECT 
        cs_item_sk, 
        SUM(cs_ext_sales_price) AS total_sales,
        COUNT(cs_order_number) AS order_count
    FROM 
        catalog_sales 
    WHERE 
        cs_sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023) - 30 
    GROUP BY 
        cs_item_sk
),
customer_sales AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name,
        COALESCE(SUM(ws.ws_ext_sales_price), 0) AS web_total_sales,
        COALESCE(SUM(ss.ss_ext_sales_price), 0) AS store_total_sales,
        COALESCE(SUM(ws.ws_ext_sales_price), 0) + COALESCE(SUM(ss.ss_ext_sales_price), 0) AS total_sales
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
high_value_customers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cs.total_sales,
        ROW_NUMBER() OVER (ORDER BY cs.total_sales DESC) AS rank
    FROM 
        customer_sales cs
    JOIN 
        customer c ON cs.c_customer_sk = c.c_customer_sk
    WHERE 
        cs.total_sales > (SELECT AVG(total_sales) FROM customer_sales)
),
sales_per_item AS (
    SELECT 
        i.i_item_id,
        i.i_item_desc,
        sd.total_sales,
        RANK() OVER (ORDER BY sd.total_sales DESC) AS sales_rank
    FROM 
        item i
    JOIN 
        sales_data sd ON i.i_item_sk = sd.cs_item_sk
)
SELECT 
    CONCAT(c.c_first_name, ' ', c.c_last_name) AS customer_name,
    ci.i_item_desc AS item_description,
    ci.total_sales AS item_sales,
    hvc.rank AS customer_rank
FROM 
    high_value_customers hvc
JOIN 
    sales_per_item ci ON hvc.c_customer_sk = ci.i_item_id
WHERE 
    ci.sales_rank <= 10
ORDER BY 
    hvc.rank, item_sales DESC;
