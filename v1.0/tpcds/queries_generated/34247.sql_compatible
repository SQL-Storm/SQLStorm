
WITH RECURSIVE InventoryTrend AS (
    SELECT inv_date_sk, inv_item_sk, inv_quantity_on_hand, 1 AS level
    FROM inventory
    WHERE inv_quantity_on_hand > 0
    UNION ALL
    SELECT inv.inv_date_sk, inv.inv_item_sk, 
           inv.inv_quantity_on_hand + it.inv_quantity_on_hand AS inv_quantity_on_hand,
           it.level + 1
    FROM inventory inv
    JOIN InventoryTrend it ON inv.inv_item_sk = it.inv_item_sk
    WHERE inv.inv_date_sk = it.inv_date_sk + INTERVAL '1 day' 
    AND inv.inv_quantity_on_hand > 0
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        cd.cd_gender,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        AVG(ws.ws_ext_sales_price) AS avg_order_value,
        DENSE_RANK() OVER (PARTITION BY cd.cd_gender ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE ws.ws_sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2022)
    GROUP BY c.c_customer_sk, cd.cd_gender
),
SalesReport AS (
    SELECT 
        s.s_store_sk,
        SUM(ss.ss_net_paid) AS store_sales,
        SUM(COALESCE(cr.cr_return_amount, 0)) AS total_returns,
        COUNT(DISTINCT ss.ss_ticket_number) AS transaction_count
    FROM store s
    LEFT JOIN store_sales ss ON s.s_store_sk = ss.ss_store_sk
    LEFT JOIN catalog_returns cr ON s.s_store_sk = cr.cr_call_center_sk
    GROUP BY s.s_store_sk
)
SELECT 
    cs.c_customer_sk,
    cs.cd_gender,
    COALESCE(it.inv_quantity_on_hand, 0) AS inventory_on_hand,
    sr.store_sales,
    sr.total_returns,
    sr.transaction_count
FROM CustomerStats cs
LEFT JOIN InventoryTrend it ON cs.c_customer_sk = it.inv_item_sk
JOIN SalesReport sr ON sr.store_sales > 1000
WHERE cs.sales_rank <= 10
ORDER BY cs.cd_gender, cs.total_sales DESC;
