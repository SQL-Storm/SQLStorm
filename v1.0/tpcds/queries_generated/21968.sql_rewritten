WITH RECURSIVE income_bracket AS (
    SELECT 
        ib_income_band_sk, 
        ib_lower_bound, 
        ib_upper_bound, 
        1 AS level
    FROM 
        income_band
    WHERE 
        ib_lower_bound IS NOT NULL AND 
        ib_upper_bound IS NOT NULL
    UNION ALL
    SELECT 
        ib.ib_income_band_sk, 
        ib.ib_lower_bound, 
        ib.ib_upper_bound, 
        level + 1
    FROM 
        income_band ib
    JOIN income_bracket ibr ON ibr.ib_income_band_sk = ib.ib_income_band_sk
    WHERE 
        ib.ib_lower_bound > ibr.ib_lower_bound AND 
        level < 5
), 
demographic_summary AS (
    SELECT 
        cd.cd_gender,
        COUNT(DISTINCT c.c_customer_sk) AS total_customers,
        AVG(cd.cd_purchase_estimate) AS average_estimate,
        MAX(cd.cd_credit_rating) AS highest_credit,
        SUM(COALESCE(cd.cd_dep_count, 0)) AS total_dependents
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY 
        cd.cd_gender
),
sales_data AS (
    SELECT 
        ws.ws_sold_date_sk,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        SUM(ws.ws_ext_tax) AS total_tax,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        COUNT(DISTINCT ws.ws_item_sk) AS item_count
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_sold_date_sk
)
SELECT 
    da.d_date AS sales_date,
    ds.total_sales,
    ds.total_tax,
    ds.order_count,
    ds.item_count,
    ds.total_sales - ds.total_tax AS net_sales,
    CASE 
        WHEN dd.cd_gender = 'M' THEN 'Male'
        WHEN dd.cd_gender = 'F' THEN 'Female'
        ELSE 'Other'
    END AS gender_category,
    ib.ib_lower_bound,
    ib.ib_upper_bound
FROM 
    sales_data ds
JOIN 
    date_dim da ON ds.ws_sold_date_sk = da.d_date_sk
LEFT JOIN 
    demographic_summary dd ON da.d_date = cast('2002-10-01' as date) 
LEFT JOIN 
    income_bracket ib ON dd.total_dependents BETWEEN ib.ib_lower_bound AND ib.ib_upper_bound
WHERE 
    (ds.total_sales IS NOT NULL OR ds.total_tax IS NULL)
    AND NOT EXISTS (
        SELECT 1
        FROM store_sales ss
        WHERE ss.ss_sold_date_sk = ds.ws_sold_date_sk
        AND ss.ss_sales_price > 0
    )
ORDER BY 
    sales_date DESC, net_sales DESC
LIMIT 100 OFFSET 0