
WITH RECURSIVE CustomerHierarchy AS (
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        cd.cd_gender, 
        0 AS level
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_gender = 'M'
    
    UNION ALL
    
    SELECT 
        c.c_customer_sk, 
        c.c_first_name, 
        c.c_last_name, 
        cd.cd_gender, 
        ch.level + 1
    FROM 
        CustomerHierarchy ch
    JOIN 
        customer c ON c.c_customer_sk = ch.c_customer_sk
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_dep_count IS NOT NULL
),
AggregatedReturns AS (
    SELECT
        sr_item_sk,
        SUM(sr_return_qty) AS total_return_qty,
        SUM(sr_return_amt_inc_tax) AS total_return_amt,
        COUNT(sr_ticket_number) AS return_count
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
),
SalesData AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_sold_qty,
        SUM(ws_ext_sales_price) AS total_sales_amt
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
)
SELECT 
    ch.level,
    ch.c_first_name,
    ch.c_last_name,
    COALESCE(agg.total_return_qty, 0) AS total_return_qty,
    COALESCE(agg.total_return_amt, 0) AS total_return_amt,
    COALESCE(sales.total_sold_qty, 0) AS total_sold_qty,
    COALESCE(sales.total_sales_amt, 0) AS total_sales_amt
FROM 
    CustomerHierarchy ch
LEFT JOIN 
    AggregatedReturns agg ON ch.c_customer_sk = agg.sr_item_sk
FULL OUTER JOIN 
    SalesData sales ON sales.ws_item_sk = agg.sr_item_sk
WHERE 
    ch.level > 0 AND
    (COALESCE(agg.total_return_qty, 0) > 10 OR COALESCE(sales.total_sold_qty, 0) < 5)
ORDER BY 
    ch.level, ch.c_first_name;
