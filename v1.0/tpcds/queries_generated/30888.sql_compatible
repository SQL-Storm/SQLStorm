
WITH RECURSIVE item_hierarchy AS (
    SELECT i_item_sk, i_item_id, i_product_name, i_brand, i_category, 
           ROW_NUMBER() OVER (PARTITION BY i_category ORDER BY i_item_sk) AS level
    FROM item
    WHERE i_item_sk IS NOT NULL
    
    UNION ALL
    
    SELECT ih.i_item_sk, ih.i_item_id, ih.i_product_name, ih.i_brand, ih.i_category,
           ROW_NUMBER() OVER (PARTITION BY ih.i_category ORDER BY ih.i_item_sk) AS level
    FROM item_hierarchy ih
    JOIN item i ON ih.i_item_sk = i.i_item_sk
    WHERE i.i_current_price IS NOT NULL
), 
sales_summary AS (
    SELECT 
        ds.d_year, 
        SUM(ws.ws_sales_price) AS total_sales_price, 
        COUNT(DISTINCT ws.ws_order_number) AS total_orders, 
        COUNT(DISTINCT ws.ws_bill_customer_sk) AS unique_customers,
        AVG(ws.ws_net_profit) AS avg_profit
    FROM web_sales ws
    JOIN date_dim ds ON ws.ws_sold_date_sk = ds.d_date_sk
    GROUP BY ds.d_year
), 
customer_details AS (
    SELECT 
        cd.cd_demo_sk, 
        cd.cd_gender, 
        cd.cd_marital_status, 
        MAX(cd.cd_purchase_estimate) AS purchase_estimate,
        COUNT(DISTINCT cs.cs_order_number) AS catalog_orders,
        SUM(cs.cs_net_profit) AS total_catalog_profit,
        AVG(cs.cs_sales_price) AS avg_catalog_sales
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    GROUP BY cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status
)
SELECT 
    chd.cd_gender,
    chd.cd_marital_status,
    SUM(ss.total_sales_price) AS total_web_sales,
    SUM(chd.total_catalog_profit) AS total_catalog_profit,
    COUNT(DISTINCT chd.cd_demo_sk) AS unique_customers,
    (SELECT COUNT(*) FROM item_hierarchy) AS total_items,
    SUM(CASE WHEN chd.cd_marital_status = 'M' THEN 1 ELSE 0 END) AS married_customers,
    AVG(chd.purchase_estimate) AS avg_purchase_estimate
FROM customer_details chd
JOIN sales_summary ss ON chd.cd_demo_sk = ss.d_year
GROUP BY chd.cd_gender, chd.cd_marital_status
HAVING SUM(ss.total_sales_price) > 10000
ORDER BY total_web_sales DESC;
