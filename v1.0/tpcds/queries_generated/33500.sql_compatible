
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        s_store_sk,
        ss_sold_date_sk,
        SUM(ss_net_profit) AS total_net_profit,
        1 AS level
    FROM 
        store_sales
    GROUP BY 
        s_store_sk, ss_sold_date_sk
    UNION ALL
    SELECT 
        sh.s_store_sk,
        sh.ss_sold_date_sk,
        sh.total_net_profit + COALESCE(sh.parent_total_net_profit, 0) AS total_net_profit,
        level + 1
    FROM 
        SalesHierarchy AS sh
    JOIN 
        store_sales AS ss 
        ON sh.s_store_sk = ss.s_store_sk AND sh.ss_sold_date_sk = ss.ss_sold_date_sk
)
SELECT 
    ca.ca_state,
    COUNT(DISTINCT c.c_customer_sk) AS total_customers,
    AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate,
    SUM(sh.total_net_profit) AS total_net_profit,
    SUM(CASE WHEN cc.cc_call_center_sk IS NOT NULL THEN 1 ELSE 0 END) AS call_center_sales
FROM 
    customer_address AS ca
JOIN 
    customer AS c ON c.c_current_addr_sk = ca.ca_address_sk
JOIN 
    customer_demographics AS cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
LEFT JOIN 
    store_sales AS ss ON c.c_customer_sk = ss.ss_customer_sk 
LEFT JOIN 
    call_center AS cc ON ss.ss_store_sk = cc.cc_call_center_sk
LEFT JOIN 
    SalesHierarchy AS sh ON ss.s_store_sk = sh.s_store_sk AND ss.ss_sold_date_sk = sh.ss_sold_date_sk
GROUP BY 
    ca.ca_state
HAVING 
    COUNT(DISTINCT c.c_customer_sk) > 10 AND 
    AVG(cd.cd_purchase_estimate) IS NOT NULL AND
    SUM(sh.total_net_profit) > (SELECT AVG(total_net_profit) FROM SalesHierarchy)
ORDER BY 
    total_net_profit DESC
LIMIT 10;
