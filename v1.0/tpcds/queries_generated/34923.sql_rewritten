WITH RECURSIVE SalesData AS (
    SELECT ws_item_sk, ws_order_number, 
           SUM(ws_quantity) AS total_quantity, 
           SUM(ws_sales_price) AS total_sales
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN 2459105 AND 2459107  
    GROUP BY ws_item_sk, ws_order_number
),
LatestPromotions AS (
    SELECT p.p_promo_sk, p.p_promo_id, p.p_promo_name, 
           p.p_start_date_sk, p.p_end_date_sk,
           DENSE_RANK() OVER (PARTITION BY p.p_item_sk ORDER BY p.p_start_date_sk DESC) AS rank
    FROM promotion p
    WHERE p.p_discount_active = 'Y'
),
ItemDetails AS (
    SELECT i.i_item_sk, i.i_item_desc, i.i_current_price,
           COALESCE(SUM(inv.inv_quantity_on_hand), 0) AS total_inventory
    FROM item i
    LEFT JOIN inventory inv ON i.i_item_sk = inv.inv_item_sk
    GROUP BY i.i_item_sk, i.i_item_desc, i.i_current_price
)
SELECT 
    id.i_item_sk,
    id.i_item_desc,
    id.i_current_price,
    sd.total_quantity,
    sd.total_sales,
    COALESCE(lp.p_promo_name, 'No Promotion') AS promotion_name,
    id.total_inventory,
    CASE 
        WHEN sd.total_sales > 1000 THEN 'High Sales'
        WHEN sd.total_sales BETWEEN 500 AND 1000 THEN 'Medium Sales'
        ELSE 'Low Sales'
    END AS sales_category,
    CONCAT('Total Quantity: ', sd.total_quantity) AS quantity_info
FROM ItemDetails id
LEFT JOIN SalesData sd ON id.i_item_sk = sd.ws_item_sk
LEFT JOIN LatestPromotions lp ON id.i_item_sk = lp.p_item_sk AND lp.rank = 1
WHERE (id.total_inventory IS NULL OR id.total_inventory > 0)
OR sd.total_quantity IS NOT NULL
ORDER BY sd.total_sales DESC NULLS LAST
LIMIT 50;