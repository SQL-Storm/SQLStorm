
WITH RECURSIVE customer_hierarchy AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year,
           COALESCE(SUM(ss.ss_quantity), 0) AS total_purchases
    FROM customer c
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year
    
    UNION ALL
    
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year,
           COALESCE(SUM(ss.ss_quantity), 0) AS total_purchases
    FROM customer c
    INNER JOIN customer_hierarchy ch ON c.c_current_cdemo_sk = ch.c_customer_sk
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year
),
item_sales AS (
    SELECT ws.ws_item_sk, SUM(ws.ws_quantity) AS total_quantity_sold,
           SUM(ws.ws_ext_sales_price) AS total_sales,
           DENSE_RANK() OVER (ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM web_sales ws
    GROUP BY ws.ws_item_sk
),
top_items AS (
    SELECT i.i_item_id, i.i_item_desc, is.total_quantity_sold, is.total_sales
    FROM item i
    JOIN item_sales is ON i.i_item_sk = is.ws_item_sk
    WHERE is.sales_rank <= 10
),
sales_trends AS (
    SELECT 
        dd.d_year, 
        SUM(ws.ws_ext_sales_price) AS yearly_sales,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        AVG(ws.ws_net_profit) AS avg_net_profit
    FROM web_sales ws
    JOIN date_dim dd ON ws.ws_sold_date_sk = dd.d_date_sk
    GROUP BY dd.d_year
),
customer_sales AS (
    SELECT ch.c_customer_sk, ch.c_first_name, ch.c_last_name,
           COALESCE(st.yearly_sales, 0) AS yearly_sales,
           COALESCE(st.total_orders, 0) AS total_orders
    FROM customer_hierarchy ch
    LEFT JOIN sales_trends st ON st.d_year = EXTRACT(YEAR FROM DATE '2002-10-01')
)

SELECT
    cs.c_first_name,
    cs.c_last_name,
    cs.yearly_sales,
    cs.total_orders,
    ti.i_item_id,
    ti.i_item_desc,
    ti.total_sales
FROM customer_sales cs
JOIN top_items ti ON ti.total_sales > 500
WHERE cs.total_orders > 0
ORDER BY cs.yearly_sales DESC, ti.total_sales DESC
FETCH FIRST 100 ROWS ONLY;
