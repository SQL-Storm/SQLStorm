
WITH RECURSIVE sales_trend AS (
    SELECT 
        ws_sold_date_sk,
        SUM(ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_sold_date_sk ORDER BY ws_sold_date_sk) AS row_num
    FROM web_sales
    WHERE ws_sold_date_sk >= (SELECT MIN(d_date_sk) FROM date_dim)
    GROUP BY ws_sold_date_sk
),
customer_details AS (
    SELECT 
        c_customer_sk,
        c_first_name,
        c_last_name,
        cd_gender,
        cd_marital_status,
        cd_income_band_sk,
        ROW_NUMBER() OVER (PARTITION BY cd_income_band_sk ORDER BY c_last_name) AS rank
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
income_summary AS (
    SELECT 
        ib_income_band_sk,
        COUNT(*) AS customer_count,
        AVG(cd_purchase_estimate) AS avg_purchase_estimate
    FROM household_demographics hd
    JOIN customer_details cd ON hd.hd_demo_sk = cd.c_customer_sk
    GROUP BY ib_income_band_sk
),
daily_sales AS (
    SELECT 
        d.d_date,
        SUM(ws_ext_sales_price) AS daily_revenue
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY d.d_date
),
final_report AS (
    SELECT 
        d.d_date,
        ds.total_sales,
        COALESCE(is.customer_count, 0) AS customer_count,
        COALESCE(is.avg_purchase_estimate, 0) AS avg_purchase
    FROM daily_sales d
    LEFT JOIN sales_trend ds ON d.d_date = ds.ws_sold_date_sk
    LEFT JOIN income_summary is ON ds.row_num = is.rank
)
SELECT 
    CASE 
        WHEN customer_count > 0 THEN 'Active Customers'
        ELSE 'No Customers'
    END AS customer_status,
    d_date,
    total_sales,
    customer_count,
    avg_purchase
FROM final_report
ORDER BY d_date DESC
LIMIT 10;
