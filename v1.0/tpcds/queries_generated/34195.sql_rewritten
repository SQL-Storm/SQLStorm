WITH RECURSIVE SalesRank AS (
    SELECT 
        s_store_sk,
        SUM(ss_net_paid) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY s_store_sk ORDER BY SUM(ss_net_paid) DESC) AS rank
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk BETWEEN 2451006 AND 2451285  
    GROUP BY 
        s_store_sk
),
CustomerAnalysis AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        COUNT(DISTINCT ws_order_number) AS order_count,
        SUM(ws_net_paid) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE 
        cd.cd_marital_status = 'M' AND 
        cd.cd_purchase_estimate > 1000
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender
    HAVING 
        COUNT(DISTINCT ws_order_number) > 0
),
PopularItems AS (
    SELECT 
        i.i_item_id,
        i.i_item_desc,
        SUM(ws_ext_sales_price) AS total_sales_amount,
        ROW_NUMBER() OVER (ORDER BY SUM(ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        item i ON ws.ws_item_sk = i.i_item_sk
    GROUP BY 
        i.i_item_id, i.i_item_desc
),
TotalReturns AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS total_return_value
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
)
SELECT 
    s.s_store_sk,
    COALESCE(sa.total_sales, 0) AS total_sales,
    ca.order_count,
    ca.total_spent,
    pi.total_sales_amount AS popular_item_amount,
    tr.total_returns,
    tr.total_return_value
FROM 
    (SELECT DISTINCT s_store_sk FROM store) s
LEFT JOIN 
    SalesRank sa ON s.s_store_sk = sa.s_store_sk
LEFT JOIN 
    CustomerAnalysis ca ON ca.c_customer_sk IN (SELECT c_customer_sk FROM customer WHERE c_current_addr_sk IS NOT NULL)
LEFT JOIN 
    PopularItems pi ON pi.sales_rank = 1
LEFT JOIN 
    TotalReturns tr ON tr.sr_item_sk = pi.i_item_id
WHERE 
    sa.rank <= 10 OR ca.order_count IS NOT NULL
ORDER BY 
    total_sales DESC, ca.total_spent DESC;