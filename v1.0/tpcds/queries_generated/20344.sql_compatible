
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.order_number,
        ws.sales_price,
        ws.net_paid,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.sales_price DESC) AS rank
    FROM 
        web_sales ws
    WHERE 
        ws.sold_date_sk >= (
            SELECT MAX(d_date_sk) 
            FROM date_dim 
            WHERE d_year = (
                SELECT MAX(d_year) 
                FROM date_dim 
                WHERE d_current_year = 'Y'
            )
        )
),
HighValueOrders AS (
    SELECT 
        ws.web_site_sk,
        SUM(ws.net_paid) AS total_net_paid,
        COUNT(*) AS order_count
    FROM 
        web_sales ws
    INNER JOIN 
        RankedSales r ON ws.order_number = r.order_number
    WHERE 
        r.rank <= 5
    GROUP BY 
        ws.web_site_sk
)
SELECT 
    c.c_customer_id,
    COALESCE(hv.total_net_paid, 0) AS total_spent,
    COUNT(DISTINCT ws.order_number) AS total_orders,
    AVG(ws.net_paid) AS avg_order_value,
    CASE 
        WHEN hv.order_count IS NULL THEN 'No Orders'
        WHEN hv.total_net_paid > 1000 THEN 'High Value'
        WHEN hv.total_net_paid BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value' 
    END AS customer_value_category,
    (SELECT COUNT(*) FROM store_sales ss WHERE ss.customer_sk = c.c_customer_sk) AS in_store_visits
FROM 
    customer c
LEFT JOIN 
    HighValueOrders hv ON c.c_customer_sk = hv.web_site_sk
LEFT JOIN 
    web_sales ws ON c.c_customer_sk = ws.bill_customer_sk
GROUP BY 
    c.c_customer_id, hv.total_net_paid, hv.order_count, total_orders
HAVING 
    COUNT(DISTINCT ws.order_number) > 5 OR COALESCE(hv.total_net_paid, 0) > 500
ORDER BY 
    total_spent DESC
LIMIT 10;
