
WITH RECURSIVE sales_data AS (
    SELECT 
        sd.ss_item_sk,
        sd.ss_customer_sk,
        sd.ss_ticket_number,
        sd.ss_sold_date_sk,
        SUM(sd.ss_sales_price) AS total_sales,
        COUNT(*) AS transaction_count,
        ROW_NUMBER() OVER (PARTITION BY sd.ss_item_sk ORDER BY SUM(sd.ss_sales_price) DESC) AS sales_rank
    FROM store_sales sd
    LEFT JOIN customer c ON sd.ss_customer_sk = c.c_customer_sk
    WHERE c.c_current_cdemo_sk IS NOT NULL
    GROUP BY sd.ss_item_sk, sd.ss_customer_sk, sd.ss_ticket_number, sd.ss_sold_date_sk
    UNION ALL
    SELECT 
        sd.cs_item_sk,
        sd.cs_bill_customer_sk,
        sd.cs_order_number,
        sd.cs_sold_date_sk,
        SUM(sd.cs_sales_price) AS total_sales,
        COUNT(*) AS transaction_count,
        ROW_NUMBER() OVER (PARTITION BY sd.cs_item_sk ORDER BY SUM(sd.cs_sales_price) DESC) AS sales_rank
    FROM catalog_sales sd
    INNER JOIN customer c ON sd.cs_bill_customer_sk = c.c_customer_sk
    WHERE c.c_current_hdemo_sk IS NOT NULL
    GROUP BY sd.cs_item_sk, sd.cs_bill_customer_sk, sd.cs_order_number, sd.cs_sold_date_sk
),
enhanced_sales AS (
    SELECT 
        sd.ss_item_sk,
        sd.ss_customer_sk,
        sd.ss_ticket_number,
        sd.ss_sold_date_sk,
        E.total_sales,
        COALESCE(amount_to_refund.total_refund, 0) AS total_refund,
        sd.transaction_count,
        sd.sales_rank
    FROM sales_data sd
    LEFT JOIN (
        SELECT 
            sr_item_sk,
            SUM(sr_return_amt) AS total_refund
        FROM store_returns
        GROUP BY sr_item_sk
    ) AS amount_to_refund ON sd.ss_item_sk = amount_to_refund.sr_item_sk
)
SELECT 
    es.ss_item_sk,
    es.total_sales,
    es.total_refund,
    es.transaction_count,
    (es.total_sales - es.total_refund) AS net_revenue,
    DATEADD(day, 1, d.d_date) AS sales_date,
    COUNT(*) OVER (PARTITION BY es.ss_item_sk) AS daily_transactions
FROM enhanced_sales es
JOIN date_dim d ON es.ss_sold_date_sk = d.d_date_sk
WHERE d.d_year = 2023 
AND (d.d_weekend = 'Y' OR es.transaction_count > 5)
ORDER BY net_revenue DESC
FETCH FIRST 10 ROWS ONLY;
