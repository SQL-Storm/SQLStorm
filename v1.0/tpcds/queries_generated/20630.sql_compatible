
WITH RankedSales AS (
    SELECT
        ws_order_number,
        ws_item_sk,
        ws_quantity,
        ws_net_paid,
        ROW_NUMBER() OVER (PARTITION BY ws_order_number ORDER BY ws_net_paid DESC) AS rnk
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN 2458963 AND 2459325
),
CustomerReturns AS (
    SELECT
        cr.returning_customer_sk,
        COUNT(cr.returning_customer_sk) AS return_count,
        SUM(cr.return_amount) AS total_return_amount
    FROM catalog_returns cr
    WHERE cr.return_quantity >= 1
    GROUP BY cr.returning_customer_sk
),
StoreSales AS (
    SELECT
        ss_store_sk,
        SUM(ss_net_paid) AS total_store_sales,
        COUNT(DISTINCT ss_customer_sk) AS unique_customers,
        AVG(ss_list_price) AS avg_price
    FROM store_sales
    WHERE ss_sold_date_sk IN (SELECT DISTINCT sr_returned_date_sk FROM store_returns)
    GROUP BY ss_store_sk
),
AddressInfo AS (
    SELECT 
        ca_address_sk,
        ca_city,
        ca_state,
        STRING_AGG(DISTINCT ca_street_name || ' ' || ca_street_number) AS full_address
    FROM customer_address
    WHERE ca_country IS NOT NULL
    GROUP BY ca_address_sk, ca_city, ca_state
)
SELECT
    cs.c_customer_id,
    COUNT(DISTINCT cs.cs_order_number) AS total_orders,
    MAX(ss.total_store_sales) AS max_store_sales,
    STRING_AGG(DISTINCT ai.full_address) AS unique_addresses,
    SUM(cr.return_count) AS total_returns,
    SUM(RS.ws_quantity) AS total_quantity_sold,
    SUM(COALESCE(ws_ext_sales_price,0) + COALESCE(cr.total_return_amount,0)) AS revenue
FROM customer cs
LEFT JOIN StoreSales ss ON cs.c_customer_sk = ss.ss_store_sk
LEFT JOIN CustomerReturns cr ON cs.c_customer_sk = cr.returning_customer_sk
LEFT JOIN RankedSales RS ON cs.c_customer_id = RS.ws_item_sk
JOIN AddressInfo ai ON cs.c_current_addr_sk = ai.ca_address_sk
WHERE cs.c_birth_year IS NOT NULL
AND cs.c_preferred_cust_flag IS NOT NULL
GROUP BY cs.c_customer_id
HAVING SUM(RS.ws_net_paid) > (SELECT AVG(ws_net_paid) FROM web_sales)
ORDER BY total_orders DESC, total_quantity_sold DESC
LIMIT 10;
