
WITH customer_stats AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_credit_rating,
        cd.cd_purchase_estimate,
        DENSE_RANK() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS gender_rank
    FROM
        customer c
    JOIN
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
store_ship_sales AS (
    SELECT 
        ss.s_store_sk,
        ss.ss_sold_date_sk,
        SUM(ss.ss_net_paid) AS total_net_paid,
        COUNT(DISTINCT ss.ss_ticket_number) AS total_sales
    FROM 
        store_sales ss
    INNER JOIN
        store s ON ss.s_store_sk = s.s_store_sk
    GROUP BY 
        ss.s_store_sk, ss.ss_sold_date_sk
),
top_stores AS (
    SELECT 
        s_store_sk, 
        SUM(total_net_paid) AS store_revenue
    FROM 
        store_ship_sales
    GROUP BY 
        s_store_sk
    HAVING 
        SUM(total_net_paid) > 100000
)
SELECT 
    cs.c_first_name,
    cs.c_last_name,
    cs.cd_gender,
    cs.cd_purchase_estimate,
    COALESCE(ts.store_revenue, 0) AS store_revenue,
    CASE 
        WHEN ts.store_revenue IS NOT NULL THEN 'Top Store'
        ELSE 'Regular Customer'
    END AS customer_status
FROM 
    customer_stats cs
LEFT JOIN 
    top_stores ts ON cs.c_customer_sk IN (
        SELECT 
            ss.ss_customer_sk 
        FROM 
            store_sales ss
        WHERE 
            ss.ss_sold_date_sk = (
                SELECT 
                    MAX(d_date_sk) 
                FROM 
                    date_dim 
                WHERE 
                    d_date > DATEADD(DAY, -30, '2002-10-01')
            )
    )
WHERE 
    cs.gender_rank <= 5
ORDER BY 
    cs.cd_purchase_estimate DESC;
