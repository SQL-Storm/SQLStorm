
WITH RankedSales AS (
    SELECT
        c.c_customer_id,
        SUM(ws.ws_net_paid) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_id ORDER BY SUM(ws.ws_net_paid) DESC) AS sales_rank
    FROM
        customer c
    JOIN
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE
        ws.ws_sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim WHERE d_date = DATE '2002-10-01')
    GROUP BY
        c.c_customer_id
),
CustomerDemographics AS (
    SELECT
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status,
        COUNT(c.c_customer_sk) AS customer_count
    FROM
        customer_demographics cd
    JOIN
        customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    GROUP BY
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status
),
ItemStatistics AS (
    SELECT
        i.i_item_id,
        AVG(ws.ws_sales_price) AS avg_sales_price,
        SUM(ws.ws_quantity) AS total_sold
    FROM
        item i
    JOIN
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY
        i.i_item_id
)
SELECT
    r.c_customer_id,
    r.total_sales,
    CASE 
        WHEN r.total_sales > (SELECT AVG(total_sales) FROM RankedSales) THEN 'Above Average'
        ELSE 'Below Average'
    END AS sales_category,
    cd.customer_count,
    i.i_item_id,
    i.avg_sales_price,
    i.total_sold
FROM
    RankedSales r
LEFT JOIN
    CustomerDemographics cd ON r.c_customer_id = cd.c_customer_id
JOIN
    ItemStatistics i ON i.total_sold > 100
WHERE
    r.sales_rank <= 10
ORDER BY
    r.total_sales DESC,
    cd.customer_count DESC;
