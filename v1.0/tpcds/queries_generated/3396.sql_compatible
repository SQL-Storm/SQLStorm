
WITH RankedSales AS (
    SELECT 
        cs_item_sk,
        cs_order_number,
        cs_sales_price,
        cs_quantity,
        DENSE_RANK() OVER (PARTITION BY cs_item_sk ORDER BY cs_sales_price DESC) AS price_rank
    FROM 
        catalog_sales
    WHERE 
        cs_item_sk IS NOT NULL
),
AggregateSales AS (
    SELECT 
        rs.cs_item_sk,
        SUM(rs.cs_quantity) AS total_quantity,
        AVG(rs.cs_sales_price) AS avg_sales_price
    FROM 
        RankedSales rs
    WHERE 
        rs.price_rank <= 3
    GROUP BY 
        rs.cs_item_sk
),
CustomerIncome AS (
    SELECT 
        c.c_customer_sk,
        h.hd_income_band_sk,
        COUNT(*) AS customer_count
    FROM 
        customer c
    JOIN 
        household_demographics h ON c.c_current_hdemo_sk = h.hd_demo_sk
    GROUP BY 
        c.c_customer_sk, h.hd_income_band_sk
),
SalesWithIncome AS (
    SELECT 
        asales.cs_item_sk,
        ci.hd_income_band_sk,
        asales.total_quantity,
        asales.avg_sales_price
    FROM 
        AggregateSales asales
    LEFT JOIN 
        CustomerIncome ci ON asales.cs_item_sk = ci.c_customer_sk
)
SELECT 
    si.hd_income_band_sk,
    SUM(ws.ws_sales) AS total_sales,
    COUNT(DISTINCT si.cs_item_sk) AS distinct_items,
    AVG(si.avg_sales_price) AS avg_price,
    MAX(si.total_quantity) AS max_quantity
FROM 
    SalesWithIncome si
JOIN 
    web_sales ws ON si.cs_item_sk = ws.ws_item_sk
WHERE 
    ws.ws_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
GROUP BY 
    si.hd_income_band_sk
HAVING 
    SUM(ws.ws_sales) > 1000
ORDER BY 
    total_sales DESC;
