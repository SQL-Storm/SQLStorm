
WITH RECURSIVE SalesAggregate AS (
    SELECT ws_sold_date_sk, ws_item_sk, SUM(ws_quantity) AS total_quantity, 
           SUM(ws_sales_price) AS total_sales, 
           ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS rank
    FROM web_sales
    GROUP BY ws_sold_date_sk, ws_item_sk
),
AddressRank AS (
    SELECT ca_address_sk, ca_city, ca_state, 
           ROW_NUMBER() OVER (PARTITION BY ca_state ORDER BY ca_city) AS city_rank
    FROM customer_address
),
IncomeStats AS (
    SELECT hd_income_band_sk, COUNT(*) AS num_households, 
           AVG(hd_dep_count) AS avg_dependents
    FROM household_demographics
    GROUP BY hd_income_band_sk
),
HighPerformance AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.total_sales) AS Total_Sales,
        STRING_AGG(CASE WHEN ws.rank = 1 THEN i.i_product_name END, ', ') AS Top_Product,
        AVG(COALESCE(ic.avg_dependents, 0)) AS Avg_Dependency
    FROM customer c
    LEFT JOIN SalesAggregate ws ON c.c_customer_sk = ws.ws_item_sk
    LEFT JOIN IncomeStats ic ON c.c_current_hdemo_sk = ic.hd_income_band_sk
    LEFT JOIN AddressRank ca ON c.c_current_addr_sk = ca.ca_address_sk
    WHERE ca.city_rank <= 5 AND c.c_birth_year < 1990
    GROUP BY c.c_customer_id
)
SELECT * 
FROM HighPerformance 
WHERE Total_Sales IS NOT NULL 
ORDER BY Total_Sales DESC
FETCH FIRST 10 ROWS ONLY;
