WITH RECURSIVE sales_data AS (
    SELECT 
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales,
        COUNT(ws_order_number) AS total_orders,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS rank
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),
top_items AS (
    SELECT 
        item.i_item_id,
        item.i_item_desc,
        item.i_current_price,
        COALESCE(sd.total_sales, 0) as total_sales,
        sd.total_orders
    FROM 
        item
    LEFT JOIN 
        sales_data sd ON item.i_item_sk = sd.ws_item_sk
    WHERE 
        item.i_rec_start_date <= cast('2002-10-01' as date) AND 
        (item.i_rec_end_date IS NULL OR item.i_rec_end_date >= cast('2002-10-01' as date))
)
SELECT 
    ti.i_item_id,
    ti.i_item_desc,
    ti.i_current_price,
    CASE 
        WHEN ti.total_sales > 0 THEN 'Top Seller'
        ELSE 'Not Sold'
    END AS sales_status,
    ti.total_orders,
    date_part('month', cast('2002-10-01' as date)) AS current_month,
    COUNT(DISTINCT cs.cs_order_number) OVER (PARTITION BY ti.i_item_sk) AS total_catalog_sales,
    SUM(NULLIF(cs.cs_ext_sales_price, 0)) OVER (PARTITION BY ti.i_item_sk) AS catalog_sales_amount
FROM 
    top_items ti
LEFT JOIN 
    catalog_sales cs ON ti.i_item_sk = cs.cs_item_sk AND cs.cs_sold_date_sk = (
        SELECT MAX(cs_sub.cs_sold_date_sk) 
        FROM catalog_sales cs_sub 
        WHERE cs_sub.cs_item_sk = ti.i_item_sk
    )
WHERE 
    ti.total_sales IS NOT NULL
ORDER BY 
    ti.total_sales DESC
LIMIT 10;