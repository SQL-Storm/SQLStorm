
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(ws.ws_order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY SUM(ws.ws_sales_price) DESC) AS rank
    FROM 
        web_sales ws
    JOIN 
        date_dim dd ON ws.ws_sold_date_sk = dd.d_date_sk
    WHERE 
        dd.d_year = 2023 
        AND dd.d_month_seq IN (4, 5)
    GROUP BY 
        ws.web_site_sk
),
TopWebSites AS (
    SELECT 
        w.w_warehouse_id, 
        w.w_warehouse_name, 
        COALESCE(r.total_sales, 0) AS total_sales, 
        COALESCE(r.order_count, 0) AS order_count
    FROM 
        warehouse w
    LEFT JOIN 
        RankedSales r ON w.w_warehouse_sk = r.web_site_sk
    WHERE 
        COALESCE(r.order_count, 0) > 0
)
SELECT 
    ts.w_warehouse_name,
    CASE 
        WHEN ts.order_count > 1000 THEN 'High'
        WHEN ts.order_count BETWEEN 500 AND 1000 THEN 'Medium'
        ELSE 'Low'
    END AS sales_category,
    COUNT(DISTINCT c.c_customer_sk) AS unique_customers,
    SUM(COALESCE(cr.cr_return_amount, 0)) AS total_returns
FROM 
    TopWebSites ts
LEFT JOIN 
    store_sales ss ON ts.w_warehouse_id = ss.ss_store_sk
LEFT JOIN 
    customer c ON ss.ss_customer_sk = c.c_customer_sk
LEFT JOIN 
    catalog_returns cr ON ss.ss_order_number = cr.cr_order_number
GROUP BY 
    ts.w_warehouse_name, ts.total_sales, ts.order_count
ORDER BY 
    total_returns DESC, ts.total_sales DESC;
