
WITH RECURSIVE date_range AS (
    SELECT MIN(d_date_sk) AS start_date, MAX(d_date_sk) AS end_date
    FROM date_dim
),
sales_data AS (
    SELECT ws_item_sk, 
           SUM(ws_quantity) AS total_quantity,
           SUM(ws_sales_price) AS total_sales,
           DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank,
           DATEADD(day, ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY d_date) - 1, MIN(d_date)) AS sale_date
    FROM web_sales
    JOIN date_dim ON ws_sold_date_sk = d_date_sk
    WHERE d_date BETWEEN (SELECT start_date FROM date_range) AND (SELECT end_date FROM date_range)
    GROUP BY ws_item_sk
),
item_info AS (
    SELECT i_item_sk,
           i_product_name,
           CASE 
               WHEN i_current_price IS NULL THEN 'Price not available'
               ELSE CAST(i_current_price AS VARCHAR)
           END AS current_price,
           COALESCE(i_category, 'Uncategorized') AS item_category
    FROM item
),
customer_sales AS (
    SELECT wr_returning_customer_sk AS customer_sk,
           COUNT(DISTINCT wr_return_number) AS return_count,
           SUM(wr_return_amount) AS total_return_amt
    FROM web_returns
    GROUP BY wr_returning_customer_sk
),
combined_data AS (
    SELECT 
        ii.i_item_sk, 
        ii.i_product_name,
        ii.current_price,
        ii.item_category,
        sd.total_quantity,
        sd.total_sales,
        cs.return_count,
        cs.total_return_amt
    FROM item_info ii
    LEFT JOIN sales_data sd ON ii.i_item_sk = sd.ws_item_sk
    LEFT JOIN customer_sales cs ON cs.customer_sk = sd.ws_bill_customer_sk
)
SELECT 
    c.customer_id,
    ci.i_product_name,
    COALESCE(cd.cd_gender, 'Unknown') AS gender,
    SUM(COALESCE(cd.cd_credit_rating, 'No Rating')) AS total_sales,
    RANK() OVER (PARTITION BY ci.i_product_name ORDER BY SUM(cd.cd_dep_count) DESC) AS product_rank,
    SUM(CASE WHEN cs.total_return_amt IS NULL THEN 0 ELSE cs.total_return_amt END) AS total_returns,
    COUNT(*) FILTER (WHERE cs.return_count IS NOT NULL) AS effective_returns
FROM combined_data ci
LEFT JOIN customer c ON ci.customer_sk = c.c_customer_sk
LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
GROUP BY c.customer_id, ci.i_product_name, cd.cd_gender
HAVING SUM(ci.total_sales) > 1000 AND RANK() OVER (PARTITION BY ci.i_product_name ORDER BY SUM(cd.cd_dep_count) DESC) <= 10
ORDER BY total_sales DESC;
