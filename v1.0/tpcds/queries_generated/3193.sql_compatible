
WITH CustomerReturns AS (
    SELECT 
        cr_returning_customer_sk,
        COUNT(cr_order_number) AS total_returns,
        SUM(cr_return_amt) AS total_return_amt,
        SUM(cr_return_ship_cost) AS total_return_ship_cost,
        SUM(cr_net_loss) AS total_net_loss
    FROM
        catalog_returns
    GROUP BY 
        cr_returning_customer_sk
),
StoreSales AS (
    SELECT 
        ss_store_sk,
        SUM(ss_net_paid) AS total_sales,
        SUM(ss_quantity) AS total_quantity
    FROM 
        store_sales
    WHERE 
        ss_sold_date_sk IN (SELECT d_date_sk 
                             FROM date_dim 
                             WHERE d_year = 2023 AND d_moy <= 6)
    GROUP BY 
        ss_store_sk
),
ReturnProcessing AS (
    SELECT 
        cr.cr_returning_customer_sk,
        cr.total_returns,
        cr.total_return_amt,
        cr.total_return_ship_cost,
        cr.total_net_loss,
        ss.total_sales,
        ss.total_quantity,
        COALESCE(ss.total_sales, 0) AS adjusted_sales,
        (COALESCE(ss.total_sales, 0) - cr.total_return_amt) AS net_adjusted_sales
    FROM 
        CustomerReturns cr
    LEFT JOIN 
        StoreSales ss ON cr.cr_returning_customer_sk = ss.ss_store_sk
)

SELECT 
    s.s_store_id,
    s.s_store_name,
    r.total_returns,
    r.total_return_amt,
    r.total_return_ship_cost,
    r.total_net_loss,
    r.total_sales,
    r.total_quantity,
    r.net_adjusted_sales,
    CASE 
        WHEN r.total_returns > 0 THEN (r.net_adjusted_sales / r.total_returns)
        ELSE NULL 
    END AS avg_sales_per_return
FROM 
    ReturnProcessing r
JOIN 
    store s ON r.cr_returning_customer_sk = s.s_store_sk
WHERE 
    r.net_adjusted_sales > 0
ORDER BY 
    avg_sales_per_return DESC
LIMIT 10;
