
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_sk, 
        c.c_customer_id, 
        cd.cd_gender, 
        cd.cd_marital_status, 
        cd.cd_income_band_sk, 
        1 AS level
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_marital_status = 'M'
    
    UNION ALL

    SELECT 
        sh.c_customer_sk, 
        sh.c_customer_id, 
        cd.cd_gender, 
        cd.cd_marital_status, 
        cd.cd_income_band_sk, 
        sh.level + 1
    FROM 
        sales_hierarchy sh
    JOIN 
        customer c ON sh.c_customer_sk = c.c_current_hdemo_sk
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        sh.level < 3
),
sales_summary AS (
    SELECT 
        s.ss_store_sk,
        SUM(s.ss_net_paid) AS total_sales,
        COUNT(DISTINCT s.ss_ticket_number) AS transaction_count
    FROM 
        store_sales s
    GROUP BY 
        s.ss_store_sk
),
customer_summary AS (
    SELECT 
        sh.c_customer_sk, 
        sh.c_customer_id, 
        COUNT(DISTINCT ss.ss_ticket_number) AS purchase_count,
        SUM(ss.ss_net_paid) AS total_spent,
        ROW_NUMBER() OVER(PARTITION BY sh.c_customer_sk ORDER BY SUM(ss.ss_net_paid) DESC) AS rn
    FROM 
        sales_hierarchy sh
    LEFT JOIN 
        store_sales ss ON sh.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        sh.c_customer_sk, sh.c_customer_id
)
SELECT 
    cs.c_customer_id,
    CASE 
        WHEN cs.total_spent > 1000 THEN 'High Value'
        WHEN cs.total_spent BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value_segment,
    sa.total_sales AS store_total_sales,
    sa.transaction_count AS store_transaction_count,
    COUNT(DISTINCT wr.wr_order_number) AS total_web_returns
FROM 
    customer_summary cs
JOIN 
    sales_summary sa ON cs.c_customer_sk = sa.ss_store_sk
LEFT JOIN 
    web_returns wr ON wr.wr_returning_customer_sk = cs.c_customer_sk
WHERE 
    cs.rn = 1
GROUP BY 
    cs.c_customer_id, cs.total_spent, sa.total_sales, sa.transaction_count
HAVING 
    SUM(wr.wr_return_amt) IS NULL OR SUM(wr.wr_return_amt) < 50
ORDER BY 
    customer_value_segment DESC, cs.total_spent DESC;
