
WITH CustomerSales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        COALESCE(SUM(ws.ws_net_paid), 0) AS total_spent,
        DENSE_RANK() OVER (PARTITION BY c.c_city ORDER BY SUM(ws.ws_net_paid) DESC) AS city_rank
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_marital_status = 'S'
        AND cd.cd_purchase_estimate IS NOT NULL
        AND (cd.cd_gender = 'M' OR cd.cd_gender IS NULL)
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_city
),
TopSpenders AS (
    SELECT 
        cs.c_customer_sk,
        cs.c_first_name,
        cs.c_last_name,
        cs.total_orders,
        cs.total_spent
    FROM 
        CustomerSales cs
    INNER JOIN (
        SELECT 
            c_customer_sk 
        FROM 
            CustomerSales 
        WHERE 
            total_spent > (SELECT AVG(total_spent) FROM CustomerSales)
    ) AS high_spenders ON cs.c_customer_sk = high_spenders.c_customer_sk
),
StoreSalesAnalysis AS (
    SELECT 
        ss.ss_store_sk,
        SUM(ss.ss_net_profit) AS total_profit,
        COUNT(ss.ss_ticket_number) AS total_transactions,
        AVG(ss.ss_net_paid) AS avg_net_paid
    FROM 
        store_sales ss
    WHERE 
        ss.ss_sold_date_sk IN (SELECT d.d_date_sk FROM date_dim d WHERE d.d_year = 2023)
    GROUP BY 
        ss.ss_store_sk
)
SELECT 
    s.ss_store_sk,
    COALESCE(ts.total_orders, 0) AS total_orders,
    ts.total_spent,
    s.total_profit,
    s.total_transactions,
    s.avg_net_paid,
    CASE 
        WHEN s.avg_net_paid IS NULL THEN 'Data not available'
        WHEN s.avg_net_paid < 100 THEN 'Low Spending Store'
        ELSE 'Norm'
    END AS store_status
FROM 
    StoreSalesAnalysis s
LEFT JOIN 
    TopSpenders ts ON s.ss_store_sk = ts.c_customer_sk
WHERE 
    (s.total_profit > 1000 OR s.total_transactions > 50)
ORDER BY 
    s.total_profit DESC, ts.total_spent ASC
LIMIT 100;
