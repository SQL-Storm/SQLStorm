
WITH RECURSIVE sales_data AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk DESC) AS rn
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),
customer_stats AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        MAX(cd.cd_dep_count) AS max_dependents,
        AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender
),
inventory_summary AS (
    SELECT 
        inv_item_sk,
        SUM(inv_quantity_on_hand) AS total_inventory
    FROM 
        inventory
    GROUP BY 
        inv_item_sk
)
SELECT 
    cs.c_customer_sk,
    cs.c_first_name,
    cs.c_last_name,
    cs.cd_gender,
    s.total_quantity,
    s.total_sales,
    i.total_inventory,
    CASE 
        WHEN cs.avg_purchase_estimate IS NULL THEN 'Unknown'
        ELSE CASE
            WHEN cs.avg_purchase_estimate > 1000 THEN 'High Value'
            WHEN cs.avg_purchase_estimate BETWEEN 500 AND 1000 THEN 'Medium Value'
            ELSE 'Low Value'
        END
    END AS customer_value_segment
FROM 
    customer_stats cs
JOIN 
    sales_data s ON cs.c_customer_sk = s.ws_item_sk
LEFT JOIN 
    inventory_summary i ON s.ws_item_sk = i.inv_item_sk
WHERE 
    cs.max_dependents IS NOT NULL 
    AND (cs.cd_gender = 'M' OR cs.cd_gender = 'F')
    AND i.total_inventory IS NOT NULL
ORDER BY 
    s.total_sales DESC
LIMIT 100;
