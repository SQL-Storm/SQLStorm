
WITH ranked_sales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_sales_price,
        ws.ws_quantity,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS price_rank,
        SUM(ws.ws_quantity) OVER (PARTITION BY ws.ws_item_sk) AS total_quantity
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023) - 90 
        AND (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
), item_details AS (
    SELECT 
        i.i_item_sk,
        i.i_item_desc,
        COALESCE(AVG(i.i_current_price), 0) AS avg_price,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM 
        item i
    LEFT JOIN 
        ranked_sales rs ON i.i_item_sk = rs.ws_item_sk
    GROUP BY 
        i.i_item_sk, i.i_item_desc
), customer_metrics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        SUM(ws.ws_net_paid) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS total_purchases,
        CASE 
            WHEN SUM(ws.ws_net_paid) IS NULL THEN 'Unknown'
            WHEN SUM(ws.ws_net_paid) > 1000 THEN 'High Value'
            ELSE 'Regular'
        END AS customer_status
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        cd.cd_demo_sk, cd.cd_gender
)
SELECT 
    id.i_item_desc,
    id.avg_price,
    cm.customer_status,
    cm.total_spent,
    cm.total_purchases,
    COALESCE(
        (SELECT COUNT(*) 
         FROM store_sales ss 
         WHERE ss.ss_item_sk = id.i_item_sk AND ss.ss_net_paid > 0),
        0
    ) AS total_store_sales,
    COUNT(DISTINCT rs.ws_item_sk) OVER (PARTITION BY cm.customer_status) AS items_per_status
FROM 
    item_details id
JOIN 
    customer_metrics cm ON id.total_orders > 0 
WHERE 
    id.avg_price > (SELECT AVG(avg_price) FROM item_details) 
    AND cm.total_spent > 500
ORDER BY 
    id.avg_price DESC, cm.total_spent DESC
FETCH FIRST 10 ROWS ONLY;
