
WITH RECURSIVE CustomerReturns AS (
    SELECT 
        c.c_customer_sk,
        COUNT(sr.returned_date_sk) AS total_returns,
        SUM(COALESCE(sr.return_amt, 0)) AS total_return_amt,
        SUM(COALESCE(sr.return_tax, 0)) AS total_return_tax
    FROM 
        customer AS c
    LEFT JOIN 
        store_returns AS sr ON c.c_customer_sk = sr.sr_customer_sk
    GROUP BY 
        c.c_customer_sk

    UNION ALL

    SELECT 
        c.c_customer_sk,
        cr.total_returns + COUNT(sr.returned_date_sk) AS total_returns,
        cr.total_return_amt + SUM(COALESCE(sr.return_amt, 0)) AS total_return_amt,
        cr.total_return_tax + SUM(COALESCE(sr.return_tax, 0)) AS total_return_tax
    FROM 
        CustomerReturns AS cr
    JOIN 
        customer AS c ON c.c_customer_sk = cr.c_customer_sk
    LEFT JOIN 
        store_returns AS sr ON c.c_customer_sk = sr.sr_customer_sk
    WHERE 
        cr.total_returns < 20 
    GROUP BY 
        c.c_customer_sk, cr.total_returns, cr.total_return_amt, cr.total_return_tax
)
SELECT 
    c.c_first_name, 
    c.c_last_name, 
    cr.total_returns, 
    cr.total_return_amt, 
    cr.total_return_tax,
    DENSE_RANK() OVER (ORDER BY cr.total_return_amt DESC) AS rank_by_return_amt
FROM 
    customer AS c
JOIN 
    CustomerReturns AS cr ON c.c_customer_sk = cr.c_customer_sk
WHERE 
    cr.total_return_amt > 1000 
    AND c.c_email_address IS NOT NULL
ORDER BY 
    rank_by_return_amt
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
