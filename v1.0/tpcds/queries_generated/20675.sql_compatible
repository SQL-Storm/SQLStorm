
WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_sales_price,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS SalesRank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
),
CustomerStats AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        SUM(ws.ws_quantity) AS total_quantity,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_marital_status IS NOT NULL
    GROUP BY 
        c.c_customer_id, cd.cd_gender, cd.cd_marital_status
),
ReturnStats AS (
    SELECT 
        sr_returning_customer_sk,
        SUM(COALESCE(sr_return_quantity, 0)) AS total_returned,
        SUM(COALESCE(sr_return_amt, 0)) AS total_return_amount
    FROM 
        store_returns sr
    GROUP BY 
        sr_returning_customer_sk
)
SELECT 
    cs.c_customer_id,
    cs.cd_gender,
    cs.cd_marital_status,
    cs.total_quantity,
    cs.total_orders,
    COALESCE(rs.total_returned, 0) AS total_returned,
    COALESCE(rs.total_return_amount, 0) AS total_return_amount,
    COUNT(DISTINCT CASE WHEN rs.total_returned > 0 THEN rs.total_returned END) AS number_of_returns,
    STRING_AGG(DISTINCT CONCAT('Item: ', CAST(rs.total_returned AS VARCHAR), ' (ReturnAmount: ', CAST(rs.total_return_amount AS DECIMAL(10,2)), ')'), '; ') AS return_details
FROM 
    CustomerStats cs
LEFT JOIN 
    ReturnStats rs ON cs.c_customer_id = rs.sr_returning_customer_sk
JOIN 
    RankedSales r ON cs.total_orders > 0 AND r.SalesRank = 1
WHERE 
    (cs.total_quantity > 100 OR cs.total_orders > 10)
    AND (cs.cd_gender IS NOT NULL AND cs.cd_marital_status IS NOT NULL)
GROUP BY 
    cs.c_customer_id, cs.cd_gender, cs.cd_marital_status, cs.total_quantity, cs.total_orders
HAVING 
    COUNT(rs.total_returned) > 0
ORDER BY 
    cs.total_quantity DESC, cs.total_orders DESC;
