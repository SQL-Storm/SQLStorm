
WITH RevenueData AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        DENSE_RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank,
        EXTRACT(YEAR FROM d.d_date) AS sales_year
    FROM 
        web_sales ws
    JOIN 
        date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE 
        d.d_year >= 2021
    GROUP BY 
        ws.ws_item_sk, EXTRACT(YEAR FROM d.d_date)
),
TopItems AS (
    SELECT 
        rd.ws_item_sk,
        rd.total_sales,
        rd.order_count,
        rd.sales_year
    FROM 
        RevenueData rd
    WHERE 
        rd.sales_rank <= 10
),
ItemDetails AS (
    SELECT 
        i.i_item_id,
        i.i_item_desc,
        i.i_current_price,
        COALESCE(p.p_discount_active, 'N') AS discount_active
    FROM 
        item i
    LEFT JOIN 
        promotion p ON i.i_item_sk = p.p_item_sk AND 
                     (p.p_start_date_sk <= (SELECT MAX(ws.ws_sold_date_sk) FROM web_sales ws) AND 
                      p.p_end_date_sk >= (SELECT MIN(ws.ws_sold_date_sk) FROM web_sales ws))
),
FinalReport AS (
    SELECT 
        ti.ws_item_sk,
        id.i_item_id,
        id.i_item_desc,
        id.i_current_price,
        ti.total_sales,
        ti.order_count,
        ti.sales_year,
        CASE 
            WHEN ti.order_count > 0 THEN ROUND(ti.total_sales / ti.order_count, 2)
            ELSE 0
        END AS avg_order_value,
        CASE 
            WHEN id.discount_active = 'Y' THEN 'Applicable'
            ELSE 'Not Applicable'
        END AS discount_status
    FROM 
        TopItems ti
    JOIN 
        ItemDetails id ON ti.ws_item_sk = id.i_item_sk
)
SELECT 
    fr.ws_item_sk,
    fr.i_item_id,
    fr.i_item_desc,
    fr.i_current_price,
    fr.total_sales,
    fr.order_count,
    fr.avg_order_value,
    fr.discount_status,
    CASE 
        WHEN fr.total_sales IS NULL THEN 'Sales data unavailable'
        WHEN fr.total_sales > 1000 THEN 'High Revenue Item'
        ELSE 'Low Revenue Item'
    END AS revenue_category
FROM 
    FinalReport fr
WHERE 
    fr.total_sales IS NOT NULL
ORDER BY 
    fr.total_sales DESC;
