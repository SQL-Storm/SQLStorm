
WITH RankedSales AS (
    SELECT 
        ws_item_sk,
        ws_sales_price,
        RANK() OVER (PARTITION BY ws_item_sk ORDER BY ws_sales_price DESC) AS sales_rank
    FROM 
        web_sales
    WHERE 
        ws_sales_price IS NOT NULL
),
CustomerStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_net_paid) AS total_spent
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_sk
),
HighSpenders AS (
    SELECT 
        cs.c_customer_sk,
        cs.total_orders,
        cs.total_spent,
        RANK() OVER (ORDER BY cs.total_spent DESC) AS spend_rank
    FROM 
        CustomerStats cs
    WHERE 
        cs.total_spent > (SELECT AVG(total_spent) FROM CustomerStats)
),
ReturnAnalysis AS (
    SELECT 
        sr_customer_sk,
        COUNT(*) AS total_returns,
        SUM(sr_return_amt) AS total_return_amount
    FROM 
        store_returns
    GROUP BY 
        sr_customer_sk
)
SELECT 
    c.c_customer_sk,
    c.c_first_name,
    c.c_last_name,
    hs.ws_item_sk,
    hs.ws_sales_price,
    COALESCE(ra.total_returns, 0) AS total_returns,
    COALESCE(ra.total_return_amount, 0) AS total_return_amount,
    hs.sales_rank
FROM 
    customer c
LEFT JOIN 
    HighSpenders hs ON c.c_customer_sk = hs.c_customer_sk
LEFT JOIN 
    ReturnAnalysis ra ON c.c_customer_sk = ra.sr_customer_sk
WHERE 
    EXISTS (
        SELECT 1
        FROM RankedSales r
        WHERE r.ws_item_sk = hs.ws_item_sk
        AND r.sales_rank = 1
    )
ORDER BY 
    hs.total_spent DESC,
    total_returns DESC
FETCH FIRST 50 ROWS ONLY;
