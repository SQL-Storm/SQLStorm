
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_item_sk,
        ws_sales_price,
        ws_quantity,
        ws_net_paid,
        ws_net_profit,
        1 AS level
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk = (SELECT MAX(ws_sold_date_sk) FROM web_sales)
    
    UNION ALL
    
    SELECT 
        ws_item_sk,
        ws_sales_price,
        ws_quantity,
        ws_net_paid,
        ws_net_profit,
        level + 1
    FROM 
        web_sales
    JOIN 
        sales_summary 
    ON 
        sales_summary.ws_item_sk = web_sales.ws_item_sk
    WHERE 
        web_sales.ws_sold_date_sk < (SELECT MAX(ws_sold_date_sk) FROM web_sales) - (level * 30)  
)
SELECT 
    ca_state,
    COUNT(DISTINCT c_customer_id) AS total_customers,
    SUM(ws_net_paid) AS total_net_paid,
    AVG(ws_sales_price) AS avg_sales_price,
    MAX(ws_net_profit) AS max_net_profit,
    JSON_AGG(DISTINCT JSON_BUILD_OBJECT('item_sk', ws_item_sk, 'total_net_paid', ws_net_paid)) AS item_sales
FROM 
    web_sales
JOIN 
    customer ON ws_bill_customer_sk = c_customer_sk
JOIN 
    customer_address ON c_current_addr_sk = ca_address_sk
LEFT JOIN 
    sales_summary ss ON ss.ws_item_sk = web_sales.ws_item_sk
GROUP BY 
    ca_state, ws_item_sk
HAVING 
    SUM(ws_net_paid) IS NOT NULL AND COUNT(DISTINCT c_customer_id) > 0
ORDER BY 
    total_net_paid DESC
LIMIT 10;
