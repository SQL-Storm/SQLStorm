
WITH RecursiveSales AS (
    SELECT ws.order_number, 
           ws.item_sk, 
           ws.sales_price, 
           ws.quantity, 
           ws.ship_mode_sk, 
           1 AS level
    FROM web_sales ws
    WHERE ws.sold_date_sk = (SELECT MAX(d_date_sk) FROM date_dim)
    
    UNION ALL
    
    SELECT ws.order_number, 
           ws.item_sk, 
           ws.sales_price, 
           ws.quantity, 
           ws.ship_mode_sk, 
           rs.level + 1
    FROM web_sales ws
    JOIN RecursiveSales rs ON ws.order_number = rs.order_number AND ws.item_sk != rs.item_sk
    WHERE rs.level < 5
),
AggregateSales AS (
    SELECT sm.sm_type,
           COUNT(DISTINCT rs.order_number) AS total_orders,
           SUM(rs.sales_price * rs.quantity) AS total_revenue,
           AVG(rs.sales_price) AS avg_sales_price
    FROM RecursiveSales rs
    JOIN ship_mode sm ON rs.ship_mode_sk = sm.sm_ship_mode_sk
    GROUP BY sm.sm_type
),
CustomerIncome AS (
    SELECT cd.cd_demo_sk,
           COUNT(DISTINCT c.c_customer_sk) AS customer_count,
           SUM(CASE WHEN h.hd_income_band_sk IS NOT NULL THEN 1 ELSE 0 END) AS income_customers
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN household_demographics h ON cd.cd_demo_sk = h.hd_demo_sk
    GROUP BY cd.cd_demo_sk
)
SELECT cs.sm_type, 
       cs.total_orders, 
       cs.total_revenue, 
       cs.avg_sales_price,
       ci.customer_count,
       ci.income_customers
FROM AggregateSales cs
LEFT JOIN CustomerIncome ci ON 1=1  
WHERE ci.customer_count > 100
ORDER BY cs.total_revenue DESC
FETCH FIRST 10 ROWS ONLY;
