
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_customer_sk, CONCAT(c_first_name, ' ', c_last_name) AS full_name, c_current_cdemo_sk
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, CONCAT(ch.full_name, ' -> ', cn.c_first_name, ' ', cn.c_last_name), cn.c_current_cdemo_sk
    FROM CustomerHierarchy ch
    JOIN customer AS cn ON ch.c_current_cdemo_sk = cn.c_current_cdemo_sk
    WHERE cn.c_current_cdemo_sk IS NOT NULL
),
SalesData AS (
    SELECT ws_bill_customer_sk, SUM(ws_net_paid) AS total_sales, COUNT(DISTINCT ws_order_number) AS order_count
    FROM web_sales
    GROUP BY ws_bill_customer_sk
),
StoreSalesData AS (
    SELECT ss_customer_sk, SUM(ss_net_paid) AS total_store_sales, COUNT(DISTINCT ss_ticket_number) AS store_order_count
    FROM store_sales
    GROUP BY ss_customer_sk
),
ConsolidatedSales AS (
    SELECT 
        COALESCE(sd.ws_bill_customer_sk, ssd.ss_customer_sk) AS customer_sk,
        COALESCE(sd.total_sales, 0) AS web_sales,
        COALESCE(ssd.total_store_sales, 0) AS store_sales,
        COALESCE(sd.order_count, 0) + COALESCE(ssd.store_order_count, 0) AS total_orders
    FROM SalesData sd
    FULL OUTER JOIN StoreSalesData ssd ON sd.ws_bill_customer_sk = ssd.ss_customer_sk
),
CustomerPerformance AS (
    SELECT ch.full_name, cs.web_sales, cs.store_sales, cs.total_orders,
           ROW_NUMBER() OVER (ORDER BY cs.total_orders DESC) AS sales_ranking
    FROM CustomerHierarchy ch
    JOIN ConsolidatedSales cs ON ch.c_customer_sk = cs.customer_sk
)
SELECT 
    c.full_name,
    COALESCE(c.web_sales, 0) AS web_sales,
    COALESCE(c.store_sales, 0) AS store_sales,
    c.total_orders,
    CASE 
        WHEN c.total_orders > 10 THEN 'High Performer'
        WHEN c.total_orders BETWEEN 5 AND 10 THEN 'Moderate Performer'
        ELSE 'Low Performer'
    END AS performance_category
FROM CustomerPerformance c
WHERE c.web_sales > 500 OR c.store_sales > 500
ORDER BY performance_category, c.total_orders DESC
LIMIT 100;
