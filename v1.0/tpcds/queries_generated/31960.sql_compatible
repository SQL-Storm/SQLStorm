
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        cs_item_sk,
        cs_order_number,
        cs_quantity,
        cs_sales_price,
        cs_ext_sales_price,
        1 AS level
    FROM catalog_sales 
    WHERE cs_item_sk IN (SELECT DISTINCT sr_item_sk FROM store_returns)
    
    UNION ALL
    
    SELECT 
        cs.cs_item_sk,
        cs.cs_order_number,
        cs.cs_quantity,
        cs.cs_sales_price,
        cs.cs_ext_sales_price,
        sh.level + 1
    FROM catalog_sales cs
    JOIN sales_hierarchy sh ON cs.cs_order_number = sh.cs_order_number AND sh.level < 5
    WHERE cs.cs_item_sk IN (SELECT DISTINCT wr_item_sk FROM web_returns)
),
total_sales AS (
    SELECT 
        cs.cs_item_sk,
        SUM(cs.cs_ext_sales_price) AS total_sales_price
    FROM catalog_sales cs
    LEFT JOIN web_sales ws ON cs.cs_item_sk = ws.ws_item_sk
    GROUP BY cs.cs_item_sk
),
avg_discount AS (
    SELECT 
        ws.ws_item_sk,
        AVG(ws.ws_ext_discount_amt) AS avg_discount
    FROM web_sales ws
    WHERE ws.ws_sold_date_sk >= (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY ws.ws_item_sk
),
return_summary AS (
    SELECT 
        sr_item_sk,
        COUNT(DISTINCT sr_ticket_number) AS total_returns,
        SUM(sr_return_amt) AS total_return_amount,
        SUM(sr_return_tax) AS total_return_tax
    FROM store_returns
    GROUP BY sr_item_sk
)
SELECT 
    item.i_item_id,
    total_sales.total_sales_price,
    AVG(sales_hierarchy.cs_sales_price) AS avg_sales_price,
    COALESCE(return_summary.total_returns, 0) AS total_returns,
    COALESCE(return_summary.total_return_amount, 0) AS total_return_amount,
    COALESCE(return_summary.total_return_tax, 0) AS total_return_tax,
    avg_discount.avg_discount,
    CASE 
        WHEN COUNT(DISTINCT sh.cs_order_number) > 5 THEN 'High Activity'
        ELSE 'Low Activity' 
    END AS activity_level
FROM item
LEFT JOIN total_sales ON item.i_item_sk = total_sales.cs_item_sk
LEFT JOIN return_summary ON item.i_item_sk = return_summary.sr_item_sk
LEFT JOIN avg_discount ON item.i_item_sk = avg_discount.ws_item_sk
LEFT JOIN sales_hierarchy sh ON item.i_item_sk = sh.cs_item_sk
GROUP BY 
    item.i_item_id, 
    total_sales.total_sales_price, 
    avg_discount.avg_discount, 
    return_summary.total_returns, 
    return_summary.total_return_amount, 
    return_summary.total_return_tax
ORDER BY 
    total_sales.total_sales_price DESC, 
    item.i_item_id;
