
WITH RankedSales AS (
    SELECT 
        ws.item_sk,
        ws_sales_price,
        ws_net_paid,
        DENSE_RANK() OVER (PARTITION BY ws.item_sk ORDER BY ws_sales_price DESC) AS SalesRank
    FROM 
        web_sales ws
    WHERE 
        ws_sold_date_sk = (SELECT MAX(ws2.ws_sold_date_sk) FROM web_sales ws2)
),
HighValueCustomers AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        SUM(ws.ws_net_paid) AS TotalSpent
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE 
        cd.cd_purchase_estimate > 
            (SELECT AVG(cd2.cd_purchase_estimate) FROM customer_demographics cd2)
    GROUP BY 
        c.c_customer_id, cd.cd_gender
),
CustomerTrends AS (
    SELECT 
        hd.hd_income_band_sk,
        COUNT(c.c_customer_sk) AS CustomerCount,
        SUM(ws.ws_net_paid_inc_tax) AS TotalNetPaid
    FROM 
        household_demographics hd
    JOIN 
        customer c ON hd.hd_demo_sk = c.c_current_hdemo_sk
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        hd.hd_income_band_sk
),
FinalResults AS (
    SELECT 
        r.CustomerCount,
        r.TotalNetPaid,
        rs.item_sk,
        rs.ws_sales_price
    FROM 
        CustomerTrends r
    JOIN 
        RankedSales rs ON r.TotalNetPaid > 1000
    LEFT JOIN 
        HighValueCustomers hc ON hc.TotalSpent > r.TotalNetPaid
    WHERE 
        COALESCE(hc.c_customer_id, 'Unknown') IS NOT NULL
)
SELECT 
    COALESCE(wr_total.CustomerCount, 0) AS CustomerCount,
    COALESCE(wr_total.TotalNetPaid, 0) AS TotalNetPaid,
    i.i_item_desc,
    COUNT(DISTINCT wr_total.item_sk) AS UniqueItemsSold
FROM 
    FinalResults wr_total
JOIN 
    item i ON wr_total.item_sk = i.i_item_sk
GROUP BY 
    wr_total.CustomerCount, wr_total.TotalNetPaid, i.i_item_desc
HAVING 
    MAX(wr_total.TotalNetPaid) < 50000 OR MIN(wr_total.TotalNetPaid) = 0
ORDER BY 
    wr_total.CustomerCount DESC;
