
WITH item_data AS (
    SELECT 
        i_item_sk,
        i_item_desc,
        i_brand,
        i_category,
        CHAR_LENGTH(i_item_desc) AS desc_length,
        UPPER(i_item_desc) AS upper_desc,
        LOWER(i_item_desc) AS lower_desc
    FROM 
        item
),

customer_data AS (
    SELECT 
        c_customer_sk,
        CONCAT(c_first_name, ' ', c_last_name) AS full_name,
        cd_gender,
        cd_marital_status,
        cd_education_status
    FROM 
        customer
    JOIN customer_demographics ON c_current_cdemo_sk = cd_demo_sk
),

sales_data AS (
    SELECT 
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),

benchmark_data AS (
    SELECT 
        id.i_item_sk, 
        id.i_item_desc,
        id.i_brand,
        id.i_category,
        cd.full_name,
        cd.cd_gender,
        cd.cd_marital_status,
        sd.total_quantity,
        sd.total_sales,
        (sd.total_sales / NULLIF(sd.total_quantity, 0)) AS avg_price,
        id.desc_length,
        id.upper_desc,
        id.lower_desc
    FROM 
        item_data id
    JOIN 
        customer_data cd ON RANDOM() < 0.1 
    JOIN 
        sales_data sd ON id.i_item_sk = sd.ws_item_sk
)

SELECT 
    b.i_item_sk,
    b.i_item_desc,
    b.i_brand,
    b.i_category,
    b.full_name,
    b.cd_gender,
    b.cd_marital_status,
    b.total_quantity,
    b.total_sales,
    b.avg_price,
    b.desc_length,
    b.upper_desc,
    b.lower_desc
FROM 
    benchmark_data b
WHERE 
    b.total_sales > 1000
ORDER BY 
    b.total_sales DESC
FETCH FIRST 100 ROWS ONLY;
