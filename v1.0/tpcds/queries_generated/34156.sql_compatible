
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        ss_customer_sk,
        COUNT(ss_ticket_number) AS total_tickets,
        SUM(ss_net_paid_inc_tax) AS total_revenue,
        1 AS level
    FROM 
        store_sales
    GROUP BY 
        ss_customer_sk

    UNION ALL

    SELECT 
        ss.ss_customer_sk,
        sh.total_tickets + COUNT(ss.ss_ticket_number),
        sh.total_revenue + SUM(ss.ss_net_paid_inc_tax),
        sh.level + 1
    FROM 
        store_sales ss
    JOIN 
        SalesHierarchy sh ON ss.ss_customer_sk = sh.ss_customer_sk
    WHERE 
        sh.total_tickets < 10  
    GROUP BY 
        ss.ss_customer_sk, sh.total_tickets, sh.total_revenue, sh.level
),
MostProfitableCustomers AS (
    SELECT 
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        sh.total_tickets,
        sh.total_revenue,
        RANK() OVER (ORDER BY sh.total_revenue DESC) AS revenue_rank
    FROM 
        customer c
    JOIN 
        SalesHierarchy sh ON c.c_customer_sk = sh.ss_customer_sk
    WHERE 
        sh.total_revenue > (SELECT AVG(total_revenue) FROM SalesHierarchy)
),
CustomerDemographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS rank
    FROM 
        customer_demographics cd
)
SELECT 
    mc.c_customer_id,
    mc.c_first_name,
    mc.c_last_name,
    mc.total_tickets,
    mc.total_revenue,
    cd.cd_gender,
    cd.cd_marital_status,
    cd.cd_education_status,
    CASE 
        WHEN mc.revenue_rank <= 10 THEN 'High Value'
        ELSE 'Regular'
    END AS customer_segment
FROM 
    MostProfitableCustomers mc
LEFT JOIN 
    CustomerDemographics cd ON mc.c_customer_id = cd.cd_demo_sk
WHERE 
    cd.rank <= 5
ORDER BY 
    mc.total_revenue DESC
FETCH FIRST 100 ROWS ONLY;
