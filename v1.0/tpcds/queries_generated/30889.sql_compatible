
WITH RECURSIVE order_hierarchy AS (
    SELECT s_store_sk, ss_ticket_number, ss_item_sk, ss_quantity, ss_ext_sales_price,
           ROW_NUMBER() OVER (PARTITION BY s_store_sk ORDER BY ss_ext_sales_price DESC) AS rn
    FROM store_sales
    WHERE ss_sold_date_sk BETWEEN 2452300 AND 2452305
), aggregated_sales AS (
    SELECT s_store_sk, COUNT(DISTINCT ss_ticket_number) AS total_orders, 
           SUM(ss_ext_sales_price) AS total_revenue,
           AVG(ss_ext_sales_price) AS avg_sale_price
    FROM order_hierarchy
    GROUP BY s_store_sk
), customer_analysis AS (
    SELECT ca_state, COUNT(DISTINCT c_customer_sk) AS total_customers, 
           SUM(CASE WHEN cd_gender = 'M' THEN 1 ELSE 0 END) AS male_customers,
           SUM(CASE WHEN cd_gender = 'F' THEN 1 ELSE 0 END) AS female_customers
    FROM customer
    JOIN customer_demographics ON c_current_cdemo_sk = cd_demo_sk
    GROUP BY ca_state
), monthly_performance AS (
    SELECT d_month_seq, SUM(cs_ext_sales_price) AS total_catalog_sales, 
           AVG(cs_sales_price) AS avg_catalog_price
    FROM catalog_sales
    JOIN date_dim ON cs_sold_date_sk = d_date_sk
    WHERE d_year = 2023
    GROUP BY d_month_seq
), performance_summary AS (
    SELECT a.s_store_sk, a.total_orders, a.total_revenue, a.avg_sale_price,
           b.total_customers, b.male_customers, b.female_customers,
           c.total_catalog_sales, c.avg_catalog_price
    FROM aggregated_sales a
    LEFT JOIN customer_analysis b ON a.s_store_sk = b.ca_state
    LEFT JOIN monthly_performance c ON a.s_store_sk = c.d_month_seq
)
SELECT ps.*, 
       CASE 
           WHEN ps.total_revenue > 10000 THEN 'High Revenue' 
           ELSE 'Low Revenue' 
       END AS revenue_category,
       COALESCE(ps.avg_catalog_price, 0) AS catalog_price_or_zero
FROM performance_summary ps
WHERE ps.total_orders > 50
ORDER BY ps.total_revenue DESC;
