
WITH RECURSIVE Sales_CTE AS (
    SELECT 
        ss_sold_date_sk,
        ss_item_sk,
        ss_quantity,
        ss_net_paid,
        1 AS level
    FROM 
        store_sales
    WHERE 
        ss_net_paid > 1000
    
    UNION ALL
    
    SELECT 
        ss.sold_date_sk,
        ss.item_sk,
        ss.quantity,
        ss.net_paid,
        cte.level + 1
    FROM 
        store_sales ss
    JOIN 
        Sales_CTE cte ON ss.ss_item_sk = cte.ss_item_sk 
    WHERE 
        cte.level < 5
),
Total_Sales AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_ext_sales_price) AS total_sales_price,
        COUNT(ws.ws_order_number) AS total_orders,
        COUNT(DISTINCT ws.ws_customer_sk) AS unique_customers
    FROM 
        web_sales ws
    LEFT JOIN 
        web_site w ON ws.ws_web_site_sk = w.web_site_sk
    WHERE 
        w.web_country = 'USA' AND 
        ws.ws_ext_sales_price > 0
    GROUP BY 
        ws.ws_item_sk
),
Customer_Demographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        hd.hd_income_band_sk,
        hd.hd_buy_potential,
        COUNT(c.c_customer_sk) AS customer_count
    FROM 
        customer_demographics cd
    LEFT JOIN 
        household_demographics hd ON cd.cd_demo_sk = hd.hd_demo_sk
    LEFT JOIN 
        customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    WHERE 
        cd.cd_gender = 'F'
    GROUP BY 
        cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status, hd.hd_income_band_sk, hd.hd_buy_potential
),
Final_Results AS (
    SELECT 
        a.ws_item_sk,
        a.total_sales_price,
        a.total_orders,
        b.customer_count,
        RANK() OVER (ORDER BY a.total_sales_price DESC) AS sales_rank
    FROM 
        Total_Sales a
    JOIN 
        Customer_Demographics b ON a.ws_item_sk = b.hd_income_band_sk
    WHERE 
        b.customer_count > 0
)
SELECT 
    fr.ws_item_sk,
    fr.total_sales_price,
    fr.total_orders,
    fr.customer_count,
    CASE 
        WHEN fr.sales_rank <= 10 THEN 'Top 10'
        WHEN fr.sales_rank <= 50 THEN 'Top 50'
        ELSE 'Other'
    END AS sales_category
FROM 
    Final_Results fr
WHERE 
    fr.total_sales_price IS NOT NULL
ORDER BY 
    fr.sales_rank;
