
WITH RecursiveCTE AS (
    SELECT
        c.c_customer_sk,
        c.c_email_address,
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS purchase_rank
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE (cd.cd_purchase_estimate IS NOT NULL OR cd.cd_purchase_estimate < 1000)
    AND c.c_birth_year > (SELECT AVG(c_birth_year) FROM customer)
),
TopPurchasers AS (
    SELECT
        r.c_customer_sk,
        r.c_email_address,
        r.cd_demo_sk,
        r.cd_gender,
        r.cd_marital_status,
        r.cd_purchase_estimate
    FROM RecursiveCTE r
    WHERE r.purchase_rank <= 5
),
DateFilteredSales AS (
    SELECT
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity
    FROM web_sales ws
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE d.d_date BETWEEN '2023-01-01' AND '2023-12-31'
    GROUP BY ws.ws_item_sk
)
SELECT
    c.c_first_name,
    c.c_last_name,
    SUM(COALESCE(ws.ws_sales_price, 0) * ds.total_quantity) AS total_spent,
    COUNT(DISTINCT s.s_store_sk) AS store_count,
    COUNT(DISTINCT CASE WHEN w.w_country IS NULL THEN 'International' ELSE w.w_country END) AS international_orders,
    DENSE_RANK() OVER (ORDER BY SUM(COALESCE(ws.ws_sales_price, 0) * ds.total_quantity) DESC) AS spending_rank
FROM customer c
LEFT JOIN TopPurchasers tp ON c.c_customer_sk = tp.c_customer_sk
LEFT JOIN web_sales ws ON tp.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN inventory inv ON ws.ws_item_sk = inv.inv_item_sk
LEFT JOIN warehouse w ON inv.inv_warehouse_sk = w.w_warehouse_sk
LEFT JOIN DateFilteredSales ds ON ws.ws_item_sk = ds.ws_item_sk
WHERE c.c_first_name IS NOT NULL 
AND (tp.cd_marital_status = 'M' OR tp.cd_gender = 'F')
GROUP BY c.c_first_name, c.c_last_name, tp.cd_marital_status, tp.cd_gender
HAVING SUM(COALESCE(ws.ws_sales_price, 0) * ds.total_quantity) > 1000
ORDER BY spending_rank
LIMIT 10 OFFSET 5
UNION ALL
SELECT
    'Aggregate' AS c_first_name,
    'Records' AS c_last_name,
    COUNT(DISTINCT c.c_customer_sk) AS total_spent,
    NULL AS store_count,
    NULL AS international_orders,
    NULL AS spending_rank
FROM customer c
WHERE c.c_birth_country IS NULL
GROUP BY c.c_birth_country
HAVING COUNT(DISTINCT c.c_customer_sk) > 100
ORDER BY spending_rank DESC;
