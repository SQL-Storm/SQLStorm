
WITH CustomerSales AS (
    SELECT 
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        SUM(ss.ss_net_paid) AS total_sales,
        COUNT(DISTINCT ss.ss_ticket_number) AS purchase_count,
        AVG(ss.ss_net_paid) AS avg_order_value
    FROM 
        customer c
    JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    WHERE 
        ss.ss_sold_date_sk >= (SELECT MAX(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023) - 365
    GROUP BY 
        c.c_customer_id, c.c_first_name, c.c_last_name
),
HighValueCustomers AS (
    SELECT 
        cs.c_customer_id,
        cs.c_first_name,
        cs.c_last_name,
        cs.total_sales,
        cs.purchase_count,
        cs.avg_order_value,
        CASE 
            WHEN cs.total_sales > 1000 THEN 'High Value'
            ELSE 'Low Value'
        END AS customer_segment
    FROM 
        CustomerSales cs
),
CustomerDemographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        h.hd_income_band_sk,
        h.hd_buy_potential
    FROM 
        customer_demographics cd
    LEFT JOIN 
        household_demographics h ON cd.cd_demo_sk = h.hd_demo_sk
)
SELECT 
    hvc.c_first_name,
    hvc.c_last_name,
    hvc.total_sales,
    hvc.avg_order_value,
    hvc.customer_segment,
    cd.cd_gender,
    cd.cd_marital_status,
    CASE 
        WHEN cd.hd_income_band_sk IS NULL THEN 'Unknown'
        ELSE CAST(cd.hd_income_band_sk AS VARCHAR)
    END AS income_band
FROM 
    HighValueCustomers hvc
LEFT JOIN 
    CustomerDemographics cd ON hvc.c_customer_id = cd.cd_demo_sk
WHERE 
    hvc.total_sales > (SELECT AVG(total_sales) FROM CustomerSales)
ORDER BY 
    hvc.total_sales DESC
LIMIT 10;
