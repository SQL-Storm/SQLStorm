
WITH RECURSIVE CustomerHierarchy AS (
    SELECT 
        c_customer_sk,
        c_first_name,
        c_last_name,
        c_current_cdemo_sk,
        0 AS level
    FROM 
        customer
    WHERE 
        c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        c.c_current_cdemo_sk,
        ch.level + 1
    FROM 
        customer c
    JOIN 
        CustomerHierarchy ch ON c.c_customer_sk = ch.c_current_cdemo_sk
),
ItemSales AS (
    SELECT 
        i.i_item_sk,
        i.i_product_name,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_net_profit) AS total_profit,
        DENSE_RANK() OVER (PARTITION BY i.i_item_sk ORDER BY SUM(ws.ws_net_profit) DESC) AS item_rank
    FROM 
        item i
    JOIN 
        web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY 
        i.i_item_sk, i.i_product_name
    HAVING 
        SUM(ws.ws_quantity) > 100
),
CustomerDemographics AS (
    SELECT 
        cd.cd_gender,
        cd.cd_marital_status,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count,
        AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY 
        cd.cd_gender, cd.cd_marital_status
)
SELECT 
    ch.c_first_name,
    ch.c_last_name,
    cd.cd_gender,
    cd.cd_marital_status,
    cs.customer_count,
    cs.avg_purchase_estimate,
    is.item_rank,
    is.total_profit
FROM 
    CustomerHierarchy ch
LEFT JOIN 
    CustomerDemographics cd ON ch.c_current_cdemo_sk = cd.cd_demo_sk
JOIN 
    ItemSales is ON is.total_quantity > (SELECT AVG(total_quantity) FROM ItemSales)
JOIN 
    CustomerDemographics cs ON cd.cd_gender = cd.cd_gender AND cd.cd_marital_status = cd.cd_marital_status
WHERE 
    ch.level < 3
ORDER BY 
    ch.c_last_name ASC,
    is.total_profit DESC
LIMIT 50;
