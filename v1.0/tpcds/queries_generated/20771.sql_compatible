
WITH RECURSIVE sales_trends AS (
    SELECT ws_sold_date_sk, 
           SUM(ws_sales_price) AS total_sales,
           ROW_NUMBER() OVER (PARTITION BY ws_sold_date_sk ORDER BY ws_sales_price DESC) AS sales_rank
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN (SELECT MAX(d_date_sk) FROM date_dim) - 365 AND (SELECT MAX(d_date_sk) FROM date_dim)
    GROUP BY ws_sold_date_sk
), sales_summary AS (
    SELECT d.d_year,
           SUM(COALESCE(total_sales, 0)) AS annual_sales,
           COUNT(DISTINCT CASE WHEN total_sales IS NULL THEN NULL ELSE ws_ship_customer_sk END) AS distinct_customers
    FROM date_dim d
    LEFT JOIN sales_trends st ON d.d_date_sk = st.ws_sold_date_sk
    GROUP BY d.d_year
), store_analysis AS (
    SELECT s.s_store_id,
           COALESCE(SUM(ss_net_profit), 0) AS store_profit,
           COUNT(DISTINCT ws_item_sk) AS unique_items_sold
    FROM store s
    LEFT JOIN store_sales ss ON s.s_store_sk = ss.ss_store_sk
    GROUP BY s.s_store_id
), top_customers AS (
    SELECT c.c_customer_id,
           SUM(ws_net_paid_inc_tax) AS total_spent
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_id
    HAVING SUM(ws_net_paid_inc_tax) > (SELECT AVG(total_spent) FROM (
        SELECT SUM(ws_net_paid_inc_tax) AS total_spent
        FROM web_sales
        GROUP BY ws_bill_customer_sk
    ) AS customer_totals)
), item_performance AS (
    SELECT i.i_item_id,
           SUM(ws_quantity) AS total_quantity_sold,
           COUNT(DISTINCT ws_order_number) AS unique_sales
    FROM item i
    JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY i.i_item_id
)

SELECT a.d_year,
       COALESCE(a.annual_sales, 0) AS total_annual_sales,
       COALESCE(b.store_profit, 0) AS top_store_profit,
       c.total_spent AS top_customer_spent,
       d.total_quantity_sold,
       d.unique_sales,
       CASE 
           WHEN c.total_spent IS NULL OR b.store_profit IS NULL THEN 'Data Insufficient'
           ELSE 'Data Available'
       END AS data_status
FROM sales_summary a
LEFT JOIN (SELECT s.s_store_id, MAX(store_profit) AS store_profit FROM store_analysis s GROUP BY s.s_store_id) b ON a.d_year = (SELECT MAX(d_year) FROM date_dim)
LEFT JOIN (SELECT c_customer_id, MAX(total_spent) AS total_spent FROM top_customers GROUP BY c_customer_id ORDER BY total_spent DESC LIMIT 1) c ON 1=1
LEFT JOIN (SELECT i_item_id, SUM(total_quantity_sold) AS total_quantity_sold, SUM(unique_sales) AS unique_sales FROM item_performance GROUP BY i_item_id) d ON d.total_quantity_sold > 1000
ORDER BY a.d_year DESC, b.store_profit DESC
FETCH FIRST 10 ROWS ONLY;
