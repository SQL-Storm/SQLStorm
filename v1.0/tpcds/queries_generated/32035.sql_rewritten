WITH RECURSIVE top_customers AS (
    SELECT c_customer_sk, c_first_name, c_last_name, COUNT(ws_order_number) AS total_orders
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c_customer_sk, c_first_name, c_last_name
    HAVING COUNT(ws_order_number) > 0
    ORDER BY total_orders DESC
    LIMIT 10
),
sales_summary AS (
    SELECT
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity_sold,
        SUM(ws.ws_net_profit) AS total_net_profit,
        SUM(ws.ws_discount_amt) AS total_discount
    FROM web_sales ws
    INNER JOIN time_dim td ON ws.ws_sold_date_sk = td.d_date_sk
    WHERE td.d_year = 2001
    GROUP BY ws.ws_item_sk
),
item_details AS (
    SELECT i.i_item_sk, i.i_item_desc, i.i_current_price, 
        COALESCE((SELECT AVG(ai.total_net_profit)
                  FROM sales_summary ai
                  WHERE ai.ws_item_sk = i.i_item_sk), 0.00) AS avg_net_profit
    FROM item i
)
SELECT
    tc.c_first_name,
    tc.c_last_name,
    id.i_item_desc,
    id.i_current_price,
    id.avg_net_profit,
    COALESCE(ss.total_quantity_sold, 0) AS total_quantity_sold,
    COALESCE(ss.total_net_profit, 0) AS total_net_profit,
    CASE 
        WHEN ss.total_net_profit IS NULL THEN 'No sales'
        WHEN ss.total_net_profit < 1000 THEN 'Low Profit'
        ELSE 'High Profit'
    END AS profit_category
FROM top_customers tc
JOIN item_details id ON tc.c_customer_sk = id.i_item_sk  
LEFT JOIN sales_summary ss ON id.i_item_sk = ss.ws_item_sk
ORDER BY tc.total_orders DESC, id.avg_net_profit DESC;