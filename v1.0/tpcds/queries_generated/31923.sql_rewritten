WITH RECURSIVE sales_summary AS (
    SELECT
        ws_sold_date_sk,
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_ext_sales_price) AS total_sales
    FROM web_sales
    GROUP BY ws_sold_date_sk, ws_item_sk
),
customer_sales AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ss.total_quantity) AS customer_total_quantity,
        SUM(ss.total_sales) AS customer_total_sales
    FROM customer c
    JOIN sales_summary ss ON c.c_customer_sk = ss.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
),
ranked_sales AS (
    SELECT
        cs.c_customer_sk,
        cs.c_first_name,
        cs.c_last_name,
        cs.customer_total_quantity,
        cs.customer_total_sales,
        DENSE_RANK() OVER (ORDER BY cs.customer_total_sales DESC) AS sales_rank
    FROM customer_sales cs
),
target_dates AS (
    SELECT d_date_sk
    FROM date_dim
    WHERE d_year = 2001 AND d_dow IN (2, 3, 4, 5)  
)
SELECT
    w.w_warehouse_id,
    w.w_warehouse_name,
    COALESCE(r.sales_rank, 0) AS warehouse_sales_rank,
    SUM(ws.ws_quantity) AS total_sold_quantity,
    SUM(ws.ws_sales_price) AS total_sold_value,
    (EARLIEST(d.d_date) OVER (PARTITION BY w.w_warehouse_id)) AS earliest_sale_date
FROM warehouse w
LEFT JOIN web_sales ws ON w.w_warehouse_sk = ws.ws_warehouse_sk
LEFT JOIN ranked_sales r ON r.c_customer_sk = ws.ws_bill_customer_sk
INNER JOIN target_dates d ON ws.ws_sold_date_sk = d.d_date_sk
GROUP BY w.w_warehouse_id, w.w_warehouse_name, r.sales_rank
HAVING SUM(ws.ws_sales_price) > 1000.00
ORDER BY total_sold_value DESC
LIMIT 100;