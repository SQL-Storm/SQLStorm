
WITH RECURSIVE sales_cte AS (
    SELECT
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales,
        COUNT(ws_order_number) AS order_count,
        RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM
        web_sales
    GROUP BY
        ws_item_sk
), zero_sales AS (
    SELECT 
        i_item_sk,
        i_item_desc
    FROM 
        item
    WHERE 
        i_item_sk NOT IN (SELECT ws_item_sk FROM web_sales)
), top_sales AS (
    SELECT 
        i.i_item_id,
        i.i_item_desc,
        COALESCE(s.total_sales, 0) AS total_sales,
        COALESCE(s.order_count, 0) AS order_count,
        s.sales_rank
    FROM 
        item i
    LEFT JOIN sales_cte s ON i.i_item_sk = s.ws_item_sk
    WHERE 
        s.sales_rank <= 10 OR s.sales_rank IS NULL
    ORDER BY 
        total_sales DESC
), customer_info AS (
    SELECT 
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        c.c_birth_year,
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Other'
        END AS gender,
        d.d_date AS birth_date
    FROM 
        customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN date_dim d ON c.c_birth_month = d.d_moy AND c.c_birth_day = d.d_dom
), summary AS (
    SELECT 
        ci.c_customer_id,
        ci.c_first_name,
        ci.c_last_name,
        SUM(ss.ss_net_profit) AS total_profit,
        COUNT(DISTINCT ss.ss_ticket_number) AS total_orders,
        COUNT(DISTINCT ss.ss_item_sk) AS unique_items_purchased
    FROM 
        customer_info ci
    LEFT JOIN store_sales ss ON ci.c_customer_id = ss.ss_customer_sk
    GROUP BY 
        ci.c_customer_id,
        ci.c_first_name,
        ci.c_last_name
)
SELECT 
    ts.i_item_id,
    ts.i_item_desc,
    ts.total_sales,
    ts.order_count,
    cs.total_profit,
    cs.total_orders,
    cs.unique_items_purchased,
    CASE 
        WHEN cs.total_profit IS NULL THEN 'No Profits Yet'
        ELSE 'Profitable'
    END AS profit_status
FROM 
    top_sales ts
LEFT JOIN summary cs ON ts.i_item_id = cs.c_customer_id
UNION ALL
SELECT 
    za.i_item_sk AS i_item_id,
    za.i_item_desc,
    0 AS total_sales,
    0 AS order_count,
    NULL AS total_profit,
    NULL AS total_orders,
    NULL AS unique_items_purchased,
    'No Sales' AS profit_status
FROM 
    zero_sales za
ORDER BY 
    total_sales DESC, 
    profit_status;
