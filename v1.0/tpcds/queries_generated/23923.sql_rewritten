WITH RECURSIVE customer_data AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status, 
           cd.cd_purchase_estimate, cd.cd_credit_rating 
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk 
    WHERE cd.cd_gender IS NOT NULL
    
    UNION ALL
    
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender, cd.cd_marital_status, 
           cd.cd_purchase_estimate, cd.cd_credit_rating 
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_hdemo_sk = cd.cd_demo_sk 
    WHERE cd.cd_marital_status = 'M' AND cd.cd_purchase_estimate > (
        SELECT AVG(cd_purchase_estimate) 
        FROM customer_demographics 
        WHERE cd_marital_status = 'M'
    )
),

sales_summary AS (
    SELECT 
        ws.web_site_id,
        COUNT(ws_order_number) AS total_orders,
        SUM(ws_ext_sales_price) AS total_sales,
        AVG(ws_net_profit) AS avg_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_id ORDER BY SUM(ws_ext_sales_price) DESC) AS rnk
    FROM web_sales ws
    JOIN customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    WHERE c.c_birth_year IS NOT NULL AND c.c_birth_month IS NOT NULL
    GROUP BY ws.web_site_id
),

inventory_status AS (
    SELECT 
        i.i_item_sk,
        SUM(CASE WHEN inv_quantity_on_hand IS NULL THEN 0 ELSE inv_quantity_on_hand END) AS total_inventory,
        COUNT(DISTINCT inv_warehouse_sk) AS total_warehouses
    FROM inventory i
    LEFT JOIN inventory inv ON i.inv_item_sk = inv.inv_item_sk
    GROUP BY i.i_item_sk
)

SELECT 
    cd.c_first_name,
    cd.c_last_name,
    ss.total_orders,
    ss.total_sales,
    ss.avg_net_profit,
    inv.total_inventory,
    inv.total_warehouses
FROM customer_data cd
LEFT JOIN sales_summary ss ON cd.c_customer_sk = ss.web_site_id
LEFT JOIN inventory_status inv ON inv.i_item_sk = ss.total_orders 
WHERE (cd.cd_gender = 'M' AND ss.total_sales > 1000) OR (cd.cd_marital_status IS NULL AND inv.total_inventory = 0)
ORDER BY cd.c_last_name DESC, cd.c_first_name ASC
LIMIT 10;