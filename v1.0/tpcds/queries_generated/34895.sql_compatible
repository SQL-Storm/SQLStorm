
WITH RECURSIVE SalesCTE AS (
    SELECT ws_sold_date_sk, ws_item_sk, SUM(ws_net_paid) AS total_sales
    FROM web_sales
    WHERE ws_sold_date_sk IS NOT NULL
    GROUP BY ws_sold_date_sk, ws_item_sk
    UNION ALL
    SELECT cs_sold_date_sk, cs_item_sk, SUM(cs_net_paid) AS total_sales
    FROM catalog_sales
    WHERE cs_sold_date_sk IS NOT NULL
    GROUP BY cs_sold_date_sk, cs_item_sk
),
PromoSales AS (
    SELECT p.p_promo_name, SUM(ws_ext_sales_price) AS promo_sales
    FROM web_sales ws
    JOIN promotion p ON ws.ws_promo_sk = p.p_promo_sk
    WHERE ws.ws_sold_date_sk BETWEEN 1000 AND 2000
    GROUP BY p.p_promo_name
),
CustomerStats AS (
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, 
           COUNT(DISTINCT ws.ws_order_number) AS total_orders,
           AVG(ws.ws_net_profit) AS average_profit
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_ship_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
),
ItemSales AS (
    SELECT i.i_item_sk, i.i_product_name,
           SUM(COALESCE(ws.ws_net_paid, 0) + COALESCE(cs.cs_net_paid, 0)) AS total_sales
    FROM item i
    LEFT JOIN web_sales ws ON i.i_item_sk = ws.ws_item_sk
    LEFT JOIN catalog_sales cs ON i.i_item_sk = cs.cs_item_sk
    GROUP BY i.i_item_sk, i.i_product_name
)
SELECT c.c_first_name, c.c_last_name, cs.total_orders, cs.average_profit,
       ps.promo_sales, is.total_sales
FROM CustomerStats cs
JOIN customer c ON cs.c_customer_sk = c.c_customer_sk
LEFT JOIN PromoSales ps ON cs.total_orders > 2
LEFT JOIN ItemSales is ON cs.total_orders = 0
WHERE cs.average_profit > (SELECT AVG(average_profit) FROM CustomerStats)
ORDER BY cs.average_profit DESC
FETCH FIRST 10 ROWS ONLY;
