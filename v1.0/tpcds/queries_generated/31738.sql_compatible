
WITH RECURSIVE CategoryHierarchy AS (
    SELECT i_category_id, i_category, CAST(i_category AS CHAR(255)) AS FullPath
    FROM item
    WHERE i_category_id IS NOT NULL
    UNION ALL
    SELECT i_category_id, i_category, CAST(CONCAT(c.FullPath, ' > ', i_category) AS CHAR(255))
    FROM item i
    JOIN CategoryHierarchy c ON i_category_id = i.category_id
), 
SalesSummary AS (
    SELECT 
        COALESCE(ws.ws_ship_date_sk, cs.cs_ship_date_sk, ss.ss_sold_date_sk) AS sold_date_sk,
        COALESCE(ws.ws_item_sk, cs.cs_item_sk, ss.ss_item_sk) AS item_sk,
        SUM(COALESCE(ws.ws_sales_price, cs.cs_sales_price, ss.ss_sales_price)) AS total_sales,
        SUM(COALESCE(ws.ws_ext_discount_amt, cs.cs_ext_discount_amt, ss.ss_ext_discount_amt)) AS total_discount
    FROM web_sales ws
    FULL OUTER JOIN catalog_sales cs ON ws.ws_item_sk = cs.cs_item_sk AND ws.ws_sold_date_sk = cs.cs_sold_date_sk
    FULL OUTER JOIN store_sales ss ON ws.ws_item_sk = ss.ss_item_sk AND ws.ws_sold_date_sk = ss.ss_sold_date_sk
    GROUP BY 
        COALESCE(ws.ws_ship_date_sk, cs.cs_ship_date_sk, ss.ss_sold_date_sk), 
        COALESCE(ws.ws_item_sk, cs.cs_item_sk, ss.ss_item_sk)
)
SELECT 
    ch.FullPath AS CategoryPath,
    ss.sold_date_sk,
    ss.total_sales,
    ss.total_discount,
    (ss.total_sales - ss.total_discount) AS net_sales
FROM SalesSummary ss
JOIN CategoryHierarchy ch ON ss.item_sk = ch.i_category_id
WHERE (ss.total_sales - ss.total_discount) > 500
  AND ss.sold_date_sk IS NOT NULL
  AND NOT EXISTS (
      SELECT 1 
      FROM store_returns sr 
      WHERE sr.sr_item_sk = ss.item_sk 
      AND sr.sr_returned_date_sk = ss.sold_date_sk
  )
ORDER BY net_sales DESC
LIMIT 100;
