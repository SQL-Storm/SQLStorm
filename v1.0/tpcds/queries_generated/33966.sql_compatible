
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        ss_store_sk,
        ss_item_sk,
        ss_quantity,
        ss_sales_price,
        ss_ext_sales_price,
        ss_ext_tax,
        ss_net_paid,
        1 AS level
    FROM store_sales
    WHERE ss_sold_date_sk = (SELECT MAX(ss_sold_date_sk) FROM store_sales)
    
    UNION ALL
    
    SELECT 
        ss_store_sk,
        ss_item_sk,
        ss_quantity,
        ss_sales_price * 0.9 AS sales_price, 
        ss_ext_sales_price * 0.9 AS ext_sales_price,
        ss_ext_tax * 0.9 AS ext_tax,
        ss_net_paid * 0.9 AS net_paid,
        level + 1
    FROM sales_hierarchy
    WHERE level < 2
), categorized_sales AS (
    SELECT 
        sh.ss_store_sk,
        sh.ss_item_sk,
        sh.ss_quantity,
        sh.ss_sales_price,
        sh.ss_ext_sales_price,
        sh.ss_ext_tax,
        sh.ss_net_paid,
        CASE 
            WHEN sh.ss_sales_price > 100 THEN 'Premium'
            WHEN sh.ss_sales_price BETWEEN 50 AND 100 THEN 'Midrange'
            ELSE 'Budget'
        END AS price_category
    FROM sales_hierarchy sh
), total_sales AS (
    SELECT 
        cs.ss_store_sk,
        SUM(cs.ss_net_paid) AS total_net_paid,
        COUNT(DISTINCT cs.ss_item_sk) AS unique_items_sold,
        AVG(cs.ss_ext_sales_price) AS avg_ext_sales_price,
        MAX(cs.ss_ext_tax) AS max_tax
    FROM categorized_sales cs
    GROUP BY cs.ss_store_sk
), customer_info AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        d.d_year,
        cd.cd_gender,
        cd.cd_marital_status
    FROM customer c
    LEFT JOIN customer_demographics cd ON cd.cd_demo_sk = c.c_current_cdemo_sk
    JOIN date_dim d ON d.d_date_sk = c.c_first_sales_date_sk
    WHERE d.d_year = 2023
), sales_summary AS (
    SELECT 
        ti.ss_store_sk,
        ci.c_customer_sk,
        ci.c_first_name,
        ci.c_last_name,
        ts.total_net_paid,
        ts.unique_items_sold,
        ts.avg_ext_sales_price,
        ts.max_tax
    FROM total_sales ts
    CROSS JOIN customer_info ci
    LEFT JOIN store ti ON ti.s_store_sk = ts.ss_store_sk
), rank_sales AS (
    SELECT 
        ss.*,
        RANK() OVER (PARTITION BY ss.ss_store_sk ORDER BY ss.total_net_paid DESC) AS rank
    FROM sales_summary ss
)
SELECT 
    rs.ss_store_sk, 
    rs.c_customer_sk, 
    rs.c_first_name, 
    rs.c_last_name, 
    rs.total_net_paid, 
    rs.unique_items_sold, 
    rs.avg_ext_sales_price,
    rs.max_tax,
    CASE 
        WHEN rs.rank = 1 THEN 'Top Customer'
        ELSE 'Regular Customer'
    END AS customer_category
FROM rank_sales rs
WHERE rs.rank <= 5
ORDER BY rs.ss_store_sk, rs.total_net_paid DESC;
