WITH RECURSIVE demographic_summary AS (
    SELECT 
        cd_demo_sk,
        cd_gender,
        cd_marital_status,
        cd_purchase_estimate,
        cd_credit_rating,
        cd_dep_count,
        cd_dep_employed_count,
        cd_dep_college_count,
        ROW_NUMBER() OVER (PARTITION BY cd_gender ORDER BY cd_purchase_estimate DESC) as rank
    FROM 
        customer_demographics
    WHERE 
        cd_purchase_estimate IS NOT NULL
),
warehouse_stats AS (
    SELECT 
        w_warehouse_sk,
        w_warehouse_name,
        AVG(w_warehouse_sq_ft) AS avg_sq_ft,
        COUNT(*) AS total_items
    FROM 
        warehouse 
    GROUP BY 
        w_warehouse_sk, w_warehouse_name
),
sales_info AS (
    SELECT 
        ws.bill_customer_sk,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(ws.ws_order_number) AS total_orders
    FROM 
        web_sales ws
    GROUP BY 
        ws.bill_customer_sk
),
item_returns AS (
    SELECT 
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returned
    FROM 
        store_returns 
    GROUP BY 
        sr_item_sk
)
SELECT 
    c.c_customer_id,
    SUM(COALESCE(ws.ws_ext_sales_price, 0)) AS total_sales,
    SUM(COALESCE(sr_return_quantity, 0)) AS total_returns,
    SUM(CASE WHEN c.c_birth_month = EXTRACT(MONTH FROM cast('2002-10-01' as date)) THEN 1 ELSE 0 END) AS birthday_count,
    DENSE_RANK() OVER (ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
FROM 
    customer c
LEFT JOIN 
    sales_info si ON c.c_customer_sk = si.bill_customer_sk
LEFT JOIN 
    item_returns ir ON ir.sr_item_sk = si.total_orders
LEFT JOIN 
    demographic_summary ds ON c.c_current_cdemo_sk = ds.cd_demo_sk
LEFT JOIN 
    warehouse_stats ws ON ds.cd_demo_sk % 10 = ws.w_warehouse_sk % 10
WHERE 
    ds.rank <= 5 AND (ds.cd_marital_status IS NOT NULL OR ds.cd_gender = 'M')
GROUP BY 
    c.c_customer_id
HAVING 
    SUM(COALESCE(ws.ws_ext_sales_price, 0)) > 5000 
    OR COUNT(DISTINCT c.c_current_addr_sk) > 3
ORDER BY 
    total_sales DESC, c.c_customer_id;