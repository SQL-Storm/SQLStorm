
WITH RankedWebSales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_bill_customer_sk,
        ws.ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sold_date_sk DESC) AS rank
    FROM web_sales ws
    INNER JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE d.d_year = 2001 AND d.d_moy IN (3, 4)  
),
CustomerSales AS (
    SELECT 
        c.c_customer_sk,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count
    FROM customer c
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY c.c_customer_sk
),
HighValueReturns AS (
    SELECT 
        sr_customer_sk,
        SUM(sr_return_amt_inc_tax) AS total_return_amount,
        COUNT(sr_ticket_number) AS return_count
    FROM store_returns
    WHERE sr_return_amt_inc_tax IS NOT NULL
    GROUP BY sr_customer_sk
),
ActiveCustomers AS (
    SELECT 
        c.c_customer_sk,
        COALESCE(cs.total_sales, 0) AS total_sales,
        COALESCE(cv.total_return_amount, 0) AS total_return_amount,
        DENSE_RANK() OVER (ORDER BY COALESCE(cs.total_sales, 0) - COALESCE(cv.total_return_amount, 0) DESC) AS value_rank
    FROM customer c
    LEFT JOIN CustomerSales cs ON c.c_customer_sk = cs.c_customer_sk
    LEFT JOIN HighValueReturns cv ON c.c_customer_sk = cv.sr_customer_sk
)
SELECT 
    ac.c_customer_sk,
    ac.total_sales,
    ac.total_return_amount,
    ac.value_rank,
    rw.ws_ext_sales_price
FROM ActiveCustomers ac
JOIN RankedWebSales rw ON ac.c_customer_sk = rw.ws_bill_customer_sk
WHERE rw.rank = 1 
AND (ac.total_sales - ac.total_return_amount) > 0
AND EXISTS (
    SELECT 1 
    FROM customer_demographics cd 
    WHERE cd.cd_demo_sk = c.c_current_cdemo_sk 
    AND cd.cd_gender = 'F' 
    AND cd.cd_marital_status IS NOT NULL
)
ORDER BY ac.value_rank DESC, ac.total_sales DESC
FETCH FIRST 100 ROWS ONLY;
