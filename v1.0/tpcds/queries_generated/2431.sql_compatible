
WITH CustomerReturns AS (
    SELECT 
        c.c_customer_id,
        SUM(COALESCE(sr.sr_return_quantity, 0)) AS total_store_returns,
        SUM(COALESCE(wr.wr_return_quantity, 0)) AS total_web_returns
    FROM customer c
    LEFT JOIN store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    LEFT JOIN web_returns wr ON c.c_customer_sk = wr.wr_returning_customer_sk
    GROUP BY c.c_customer_id
),
ReturnStatistics AS (
    SELECT 
        c.c_customer_id,
        cr.total_store_returns,
        cr.total_web_returns,
        (cr.total_store_returns + cr.total_web_returns) AS total_returns,
        DENSE_RANK() OVER (ORDER BY (cr.total_store_returns + cr.total_web_returns) DESC) AS return_rank
    FROM CustomerReturns cr
    JOIN customer c ON c.c_customer_id = cr.c_customer_id
),
TopReturns AS (
    SELECT 
        r.c_customer_id AS customer_id,
        r.total_returns,
        r.return_rank
    FROM ReturnStatistics r
    WHERE r.return_rank <= 10
)
SELECT 
    r.customer_id,
    r.total_returns,
    CASE 
        WHEN r.total_returns > 10 THEN 'High'
        WHEN r.total_returns BETWEEN 5 AND 10 THEN 'Medium'
        ELSE 'Low'
    END AS return_category,
    COALESCE(cd.cd_gender, 'U') AS gender,
    COALESCE(cd.cd_marital_status, 'Unknown') AS marital_status,
    STRING_AGG(DISTINCT i.i_item_desc, ', ') AS purchased_items
FROM TopReturns r
LEFT JOIN customer_demographics cd ON cd.cd_demo_sk = (SELECT c.c_current_cdemo_sk FROM customer c WHERE c.c_customer_id = r.customer_id LIMIT 1)
LEFT JOIN web_sales ws ON ws.ws_bill_customer_sk = r.customer_id
LEFT JOIN item i ON ws.ws_item_sk = i.i_item_sk
GROUP BY r.customer_id, r.total_returns, r.return_rank, cd.cd_gender, cd.cd_marital_status
ORDER BY r.total_returns DESC;
