
WITH ranked_sales AS (
    SELECT 
        ws.ws_item_sk, 
        ws.ws_order_number, 
        ws.ws_sales_price,
        RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_sales_price DESC) AS price_rank,
        SUM(ws.ws_quantity) OVER (PARTITION BY ws.ws_item_sk) AS total_quantity,
        DENSE_RANK() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_order_number) AS order_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
),
inventory_summary AS (
    SELECT 
        inv.inv_item_sk,
        SUM(inv.inv_quantity_on_hand) AS total_inventory,
        COUNT(CASE WHEN inv.inv_quantity_on_hand < 10 THEN 1 END) AS low_stock_count
    FROM 
        inventory inv
    GROUP BY 
        inv.inv_item_sk
),
customer_data AS (
    SELECT 
        c.c_customer_sk,
        cd.cd_gender,
        hd.hd_income_band_sk,
        COALESCE(cd.cd_marital_status, 'U') AS marital_status,
        COALESCE(cd.cd_purchase_estimate, 0) AS purchase_estimate
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
)
SELECT 
    cs.c_customer_sk,
    cs.cd_gender AS gender,
    cs.hd_income_band_sk AS income_band_sk,
    rs.price_rank,
    is.total_inventory,
    COALESCE(CASE WHEN rs.total_quantity > is.low_stock_count THEN 'Exceeds Stock' ELSE 'Below Stock' END, 'Unknown') AS stock_status
FROM 
    customer_data cs
JOIN 
    ranked_sales rs ON cs.c_customer_sk = rs.ws_item_sk
JOIN 
    inventory_summary is ON rs.ws_item_sk = is.inv_item_sk
WHERE 
    rs.price_rank = 1 AND
    (cs.marital_status LIKE 'M%' OR cs.marital_status IS NULL)
UNION ALL
SELECT 
    c.c_customer_sk,
    'Gender Not Available' AS gender,
    NULL AS income_band_sk,
    NULL AS price_rank,
    NULL AS total_inventory,
    'Unknown' AS stock_status
FROM 
    customer c
WHERE 
    c.c_customer_sk NOT IN (SELECT c_customer_sk FROM customer_data)
ORDER BY 
    c.c_customer_sk DESC;
