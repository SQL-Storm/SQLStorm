
WITH RankedSales AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_sold_date_sk,
        ws.ws_quantity,
        ws.ws_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_net_profit DESC) AS SalesRank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_net_profit IS NOT NULL
),
FrequentItems AS (
    SELECT 
        sr_item_sk,
        COUNT(*) AS return_count,
        SUM(sr_return_quantity) AS total_returned
    FROM 
        store_returns
    GROUP BY 
        sr_item_sk
    HAVING 
        COUNT(*) > 10
),
TotalSales AS (
    SELECT 
        cs.cs_item_sk,
        SUM(cs.cs_ext_sales_price) AS total_sales
    FROM 
        catalog_sales cs
    GROUP BY 
        cs.cs_item_sk
),
CoreMetrics AS (
    SELECT 
        i.i_item_id,
        COALESCE(rs.total_sales, 0) AS total_sales,
        COALESCE(fi.return_count, 0) AS return_count,
        COALESCE(rs.SalesRank, 1000) AS sales_rank
    FROM 
        item i
    LEFT JOIN 
        TotalSales rs ON i.i_item_sk = rs.cs_item_sk
    LEFT JOIN 
        FrequentItems fi ON i.i_item_sk = fi.sr_item_sk
),
FinalMetrics AS (
    SELECT 
        item_id,
        total_sales,
        return_count,
        CASE 
            WHEN return_count > 5 AND sales_rank < 5 THEN 'High Concern'
            WHEN sales_rank < 10 THEN 'High Performer'
            ELSE 'Regular'
        END AS performance_category
    FROM 
        CoreMetrics
)
SELECT 
    fm.item_id,
    fm.total_sales,
    fm.return_count,
    fm.performance_category,
    CASE 
        WHEN fm.return_count IS NULL OR fm.total_sales IS NULL THEN 'Data Inconclusive' 
        ELSE 'Data Validated' 
    END AS validation_status
FROM 
    FinalMetrics fm
WHERE 
    (fm.return_count > 0 OR fm.total_sales > 1000)
ORDER BY 
    fm.performance_category DESC, 
    fm.total_sales DESC;
