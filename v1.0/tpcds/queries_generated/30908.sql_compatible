
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_addr_sk, 0 AS hierarchy_level
    FROM customer
    WHERE c_current_addr_sk IS NOT NULL

    UNION ALL

    SELECT c.customer_sk, c.c_first_name, c.c_last_name, ca.ca_address_sk, ch.hierarchy_level + 1
    FROM customer c
    JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    JOIN CustomerHierarchy ch ON ca.ca_address_sk = ch.c_current_addr_sk
),
SalesSummary AS (
    SELECT
        ws_sold_date_sk,
        SUM(ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT ws_order_number) AS order_count
    FROM web_sales
    WHERE ws_sold_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY ws_sold_date_sk
),
CustomerReturns AS (
    SELECT
        sr_customer_sk,
        SUM(sr_return_amt) AS total_return_amt,
        COUNT(*) AS return_count
    FROM store_returns
    WHERE sr_returned_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY sr_customer_sk
)

SELECT
    ch.c_first_name,
    ch.c_last_name,
    ch.hierarchy_level,
    COALESCE(ss.total_sales, 0) AS total_sales,
    COALESCE(cr.total_return_amt, 0) AS total_return_amt,
    (COALESCE(ss.total_sales, 0) - COALESCE(cr.total_return_amt, 0)) AS net_sales,
    CASE
        WHEN COALESCE(cr.return_count, 0) > 0 THEN 'Returned'
        ELSE 'Not Returned'
    END AS return_status
FROM CustomerHierarchy ch
LEFT JOIN SalesSummary ss ON ss.ws_sold_date_sk = ch.c_current_addr_sk
LEFT JOIN CustomerReturns cr ON cr.sr_customer_sk = ch.c_customer_sk
ORDER BY net_sales DESC
LIMIT 100;
