WITH CustomerReturns AS (
    SELECT 
        sr_customer_sk,
        COUNT(DISTINCT sr_ticket_number) AS total_returns,
        SUM(sr_return_amt) AS total_return_amount
    FROM store_returns
    GROUP BY sr_customer_sk
    HAVING COUNT(DISTINCT sr_ticket_number) > 3
), 
CustomerInfo AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        COALESCE(cd.cd_purchase_estimate, 0) AS purchase_estimate,
        COALESCE(cd.cd_dep_count, 0) AS dependent_count
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), 
SalesSummary AS (
    SELECT 
        ws_bill_customer_sk,
        SUM(ws_sales_price) AS total_sales,
        SUM(ws_quantity) AS total_items_sold
    FROM web_sales 
    WHERE ws_sold_date_sk BETWEEN 2450000 AND 2450300 
    GROUP BY ws_bill_customer_sk
),
FilteredCustomers AS (
    SELECT 
        ci.c_customer_sk,
        ci.c_first_name,
        ci.c_last_name,
        ci.cd_gender,
        ci.purchase_estimate,
        ci.dependent_count,
        COALESCE(cr.total_returns, 0) AS recent_returns,
        COALESCE(cr.total_return_amount, 0) AS recent_return_amount,
        COALESCE(ss.total_sales, 0) AS total_web_sales,
        COALESCE(ss.total_items_sold, 0) AS total_items_web_sold
    FROM CustomerInfo ci
    LEFT JOIN CustomerReturns cr ON ci.c_customer_sk = cr.sr_customer_sk
    LEFT JOIN SalesSummary ss ON ci.c_customer_sk = ss.ws_bill_customer_sk
)
SELECT 
    f.c_customer_sk,
    CONCAT(f.c_first_name, ' ', f.c_last_name) AS full_name,
    f.cd_gender,
    f.purchase_estimate,
    f.dependent_count,
    f.recent_returns,
    f.recent_return_amount,
    f.total_web_sales,
    f.total_items_web_sold,
    COUNT(DISTINCT CASE WHEN f.cd_gender = 'F' THEN f.c_customer_sk END) OVER(PARTITION BY f.cd_gender) AS female_customers_count,
    COUNT(DISTINCT CASE WHEN f.recent_returns > 0 THEN f.c_customer_sk END) OVER() AS customers_with_returns,
    MAX(CASE WHEN f.purchase_estimate IS NULL THEN 1 ELSE 0 END) OVER() AS null_purchase_estimate_indicator
FROM FilteredCustomers f
WHERE (f.purchase_estimate < 5000 OR f.recent_return_amount > 100) 
AND (f.dependent_count IS NULL OR f.dependent_count > 1)
ORDER BY f.purchase_estimate DESC, f.recent_returns DESC 
LIMIT 10;