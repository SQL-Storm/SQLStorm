WITH RECURSIVE sales_data AS (
    SELECT 
        ws_item_sk,
        SUM(ws_sales_price * ws_quantity) AS total_sales,
        COUNT(ws_order_number) AS total_orders,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price * ws_quantity) DESC) AS sales_rank
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk BETWEEN 2451545 AND 2451581  
    GROUP BY 
        ws_item_sk
),
customer_rankings AS (
    SELECT 
        c_customer_sk,
        c_first_name,
        c_last_name,
        cd_gender,
        cd_marital_status,
        cd_purchase_estimate,
        DENSE_RANK() OVER (ORDER BY cd_purchase_estimate DESC) AS purchase_rank
    FROM 
        customer
    JOIN 
        customer_demographics ON c_current_cdemo_sk = cd_demo_sk
),
item_summary AS (
    SELECT 
        i_item_sk,
        i_item_desc,
        i_brand,
        COUNT(*) AS sales_count,
        AVG(i_current_price) AS avg_price
    FROM 
        item
    LEFT JOIN 
        (SELECT 
            ws_item_sk 
         FROM 
            web_sales) ws ON i_item_sk = ws.ws_item_sk
    GROUP BY 
        i_item_sk, i_item_desc, i_brand
)
SELECT 
    c.c_first_name,
    c.c_last_name,
    ir.total_sales,
    cr.total_orders,
    is.avg_price,
    is.sales_count
FROM 
    customer_rankings cr
JOIN 
    customer c ON cr.c_customer_sk = c.c_customer_sk
LEFT JOIN 
    sales_data ir ON ir.ws_item_sk = cr.purchase_rank
JOIN 
    item_summary is ON ir.ws_item_sk = is.i_item_sk
WHERE 
    cr.purchase_rank <= 10
    AND ir.total_sales IS NOT NULL
ORDER BY 
    ir.total_sales DESC, 
    cr.purchase_rank;