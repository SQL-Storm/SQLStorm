WITH RankedReturns AS (
    SELECT 
        sr.returning_customer_sk, 
        COUNT(*) AS return_count,
        SUM(sr.return_amt) AS total_return_amt,
        AVG(sr.return_quantity) AS avg_return_quantity,
        ROW_NUMBER() OVER (PARTITION BY sr.returning_customer_sk ORDER BY SUM(sr.return_amt) DESC) AS rn
    FROM 
        store_returns sr
    GROUP BY 
        sr.returning_customer_sk
    HAVING 
        SUM(sr.return_amt) > 50
),
HighValueCustomers AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        c.c_email_address
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_purchase_estimate > 1000
),
StoreSalesAggregates AS (
    SELECT 
        ss.ss_store_sk,
        SUM(ss.ss_sales_price) AS total_store_sales,
        COUNT(*) AS total_sales_count,
        MAX(ss.ss_sales_price) AS max_single_sale_price
    FROM 
        store_sales ss
    WHERE 
        ss.ss_sold_date_sk = (
            SELECT MAX(d.d_date_sk)
            FROM date_dim d
            WHERE d.d_date = cast('2002-10-01' as date)
        )
    GROUP BY 
        ss.ss_store_sk
),
HighPerformanceStores AS (
    SELECT 
        sa.ss_store_sk,
        sa.total_store_sales,
        CASE 
            WHEN sa.total_store_sales > 10000 THEN 'High'
            WHEN sa.total_store_sales BETWEEN 5000 AND 10000 THEN 'Medium'
            ELSE 'Low'
        END AS performance_category
    FROM 
        StoreSalesAggregates sa
)
SELECT 
    hvc.c_customer_id,
    hvc.c_first_name,
    hvc.c_last_name,
    hvc.c_email_address,
    hvc.cd_gender,
    hvc.cd_marital_status,
    hvc.cd_purchase_estimate,
    r.return_count,
    r.total_return_amt,
    r.avg_return_quantity,
    hps.ss_store_sk,
    hps.total_store_sales,
    hps.performance_category
FROM 
    HighValueCustomers hvc
JOIN 
    RankedReturns r ON hvc.c_customer_id = r.returning_customer_sk
LEFT JOIN 
    HighPerformanceStores hps ON r.returning_customer_sk = hps.ss_store_sk
WHERE 
    (hvc.cd_gender = 'F' OR hvc.cd_marital_status = 'M')
    AND (r.return_count IS NOT NULL OR hps.performance_category IS NOT NULL)
ORDER BY 
    hvc.cd_purchase_estimate DESC, r.total_return_amt DESC;