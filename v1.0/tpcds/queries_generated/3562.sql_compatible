
WITH sales_summary AS (
    SELECT 
        ws.ws_sold_date_sk,
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_net_paid) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_net_paid) DESC) AS item_rank
    FROM 
        web_sales ws
    JOIN 
        item i ON ws.ws_item_sk = i.i_item_sk
    WHERE 
        i.i_current_price > 0 
        AND ws.ws_sold_date_sk >= (SELECT MAX(d.d_date_sk) - 30 FROM date_dim d WHERE d.d_current_month = '1')
    GROUP BY 
        ws.ws_sold_date_sk, ws.ws_item_sk
),
top_sales AS (
    SELECT 
        ws.ws_item_sk AS s_item_sk,
        total_quantity,
        total_sales
    FROM 
        sales_summary
    WHERE 
        item_rank = 1
),
customer_revenue AS (
    SELECT 
        c.c_customer_sk,
        SUM(ws.ws_net_paid) AS customer_revenue
    FROM 
        web_sales ws
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    GROUP BY 
        c.c_customer_sk
),
avg_customer_revenue AS (
    SELECT 
        AVG(customer_revenue) AS avg_revenue
    FROM 
        customer_revenue
)

SELECT 
    ta.s_item_sk,
    ta.total_quantity,
    ta.total_sales,
    COALESCE(cr.customer_revenue, 0) AS customer_revenue,
    ac.avg_revenue,
    CASE 
        WHEN cr.customer_revenue IS NULL THEN 'No Revenue'
        WHEN cr.customer_revenue > ac.avg_revenue THEN 'Above Average'
        ELSE 'Below Average' 
    END AS revenue_comparison
FROM 
    top_sales ta
LEFT JOIN 
    customer_revenue cr ON ta.s_item_sk = cr.c_customer_sk
CROSS JOIN 
    avg_customer_revenue ac
ORDER BY 
    ta.total_sales DESC;
