
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_current_cdemo_sk, 1 AS level
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_current_cdemo_sk, ch.level + 1
    FROM customer c
    INNER JOIN CustomerHierarchy ch ON ch.c_current_cdemo_sk = c.c_current_cdemo_sk
),
AggregatedSales AS (
    SELECT 
        ws_bill_cdemo_sk,
        SUM(ws_net_paid) AS total_sales,
        COUNT(ws_order_number) AS order_count
    FROM web_sales
    WHERE ws_sold_date_sk >= (SELECT MIN(d_date_sk) FROM date_dim WHERE d_year = 2023)
    GROUP BY ws_bill_cdemo_sk
),
CustomerPerformance AS (
    SELECT 
        cd.cd_gender,
        cd.cd_marital_status,
        COALESCE(c.level, 0) AS hierarchy_level,
        COALESCE(as.total_sales, 0) AS total_sales,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count
    FROM customer_demographics cd
    LEFT JOIN CustomerHierarchy c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    LEFT JOIN AggregatedSales as ON as.ws_bill_cdemo_sk = cd.cd_demo_sk
    GROUP BY cd.cd_gender, cd.cd_marital_status, c.level
),
SalesRank AS (
    SELECT 
        cd_gender, 
        cd_marital_status, 
        hierarchy_level,
        total_sales,
        RANK() OVER (PARTITION BY hierarchy_level ORDER BY total_sales DESC) AS sales_rank
    FROM CustomerPerformance
)

SELECT 
    sr.cd_gender,
    sr.cd_marital_status,
    sr.hierarchy_level,
    sr.total_sales,
    sr.sales_rank,
    CASE 
        WHEN sr.sales_rank <= 10 THEN 'Top Performer'
        ELSE 'Regular Performer'
    END AS performance_category 
FROM SalesRank sr
WHERE sr.total_sales > 0
ORDER BY sr.hierarchy_level, sr.sales_rank;
