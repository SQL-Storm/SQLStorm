
WITH RECURSIVE SalesCTE AS (
    SELECT ws_sold_date_sk, ws_item_sk, ws_quantity, 
           ROW_NUMBER() OVER(PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk) AS rn
    FROM web_sales
    WHERE ws_sales_price > 50
),
ItemReturns AS (
    SELECT wr_item_sk, SUM(wr_return_quantity) AS total_returns
    FROM web_returns
    WHERE wr_returned_date_sk > (SELECT MAX(d_date_sk) FROM date_dim WHERE d_year = 2022)
    GROUP BY wr_item_sk
),
TopSellingItems AS (
    SELECT i.i_item_sk, i.i_item_desc, SUM(wn_quantity) AS total_sales, 
           CASE 
               WHEN i.i_current_price > 0 THEN SUM(ws_net_paid) / NULLIF(SUM(ws_quantity), 0) 
               ELSE NULL 
           END AS avg_price
    FROM item i
    JOIN web_sales wn ON i.i_item_sk = wn.ws_item_sk
    WHERE wn.ws_sold_date_sk BETWEEN 20220101 AND 20221231
    GROUP BY i.i_item_sk, i.i_item_desc 
    ORDER BY total_sales DESC
    LIMIT 10
),
CustomerDemographics AS (
    SELECT cd.cd_gender, cd.cd_marital_status, COUNT(DISTINCT c.c_customer_sk) AS customer_count
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE cd.cd_credit_rating IS NOT NULL
    GROUP BY cd.cd_gender, cd.cd_marital_status
)
SELECT tsi.i_item_desc, tsi.total_sales, ir.total_returns, 
       cd.cd_gender, cd.cd_marital_status, cd.customer_count
FROM TopSellingItems tsi
LEFT JOIN ItemReturns ir ON tsi.i_item_sk = ir.wr_item_sk
JOIN CustomerDemographics cd ON cd.customer_count > 100
WHERE ir.total_returns IS NULL OR ir.total_returns < 10
ORDER BY tsi.total_sales DESC, cd.customer_count DESC;
