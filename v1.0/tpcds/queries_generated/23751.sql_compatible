
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.ws_order_number,
        ws.ws_item_sk,
        ws.ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.ws_ext_sales_price DESC) AS sales_rank
    FROM 
        web_sales ws
    INNER JOIN 
        date_dim dd ON ws.ws_sold_date_sk = dd.d_date_sk
    WHERE 
        dd.d_year = 2023
        AND dd.d_week_seq BETWEEN 10 AND 20
),
CustomerDetails AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        cd.cd_credit_rating,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY cd.cd_purchase_estimate DESC) AS gender_rank
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
InventoryDetails AS (
    SELECT 
        inv.inv_item_sk,
        SUM(inv.inv_quantity_on_hand) AS total_inventory
    FROM 
        inventory inv
    JOIN 
        warehouse w ON inv.inv_warehouse_sk = w.w_warehouse_sk
    GROUP BY 
        inv.inv_item_sk
),
SalesSummary AS (
    SELECT 
        rs.web_site_sk,
        SUM(rs.ws_ext_sales_price) AS total_sales,
        COUNT(DISTINCT rs.ws_order_number) AS total_orders
    FROM 
        RankedSales rs
    GROUP BY 
        rs.web_site_sk
)
SELECT 
    cd.c_first_name,
    cd.c_last_name,
    cd.cd_gender,
    ss.total_sales,
    ss.total_orders,
    CASE 
        WHEN ss.total_sales IS NULL THEN 'No Sales'
        ELSE 'Has Sales'
    END AS sales_status,
    COALESCE(id.total_inventory, 0) AS inventory_count,
    pd.promo_name
FROM 
    CustomerDetails cd
LEFT JOIN 
    SalesSummary ss ON cd.c_customer_sk = ss.web_site_sk
LEFT JOIN 
    InventoryDetails id ON cd.cd_purchase_estimate = id.inv_item_sk
LEFT JOIN 
    (SELECT 
        p.p_promo_id, 
        p.promo_name 
     FROM 
        promotion p 
     WHERE 
        p.p_discount_active = 'Y') pd ON ss.total_sales > 10000
WHERE 
    cd.gender_rank <= 5
    AND cd.cd_marital_status IS NOT NULL
ORDER BY 
    ss.total_sales DESC, 
    cd.c_last_name ASC
FETCH FIRST 50 ROWS ONLY;
