
WITH RECURSIVE sales_hierarchy AS (
    SELECT
        ss_store_sk,
        SUM(ss_net_profit) AS total_profit,
        COUNT(ss_ticket_number) AS total_sales
    FROM
        store_sales
    GROUP BY
        ss_store_sk
    HAVING
        SUM(ss_net_profit) > 1000
    UNION ALL
    SELECT
        s.s_store_sk,
        sh.total_profit * 1.1 AS total_profit,
        sh.total_sales + 1 AS total_sales
    FROM
        sales_hierarchy sh
    JOIN
        store s ON sh.ss_store_sk = s.s_store_sk
    WHERE
        sh.total_profit * 1.1 < 5000
),
ranked_sales AS (
    SELECT
        s.s_store_name,
        sh.total_profit,
        sh.total_sales,
        RANK() OVER (ORDER BY sh.total_profit DESC) AS sales_rank
    FROM
        sales_hierarchy sh
    JOIN
        store s ON sh.ss_store_sk = s.s_store_sk
),
customer_sales AS (
    SELECT
        c.c_customer_id,
        COUNT(ss.ticket_number) AS purchases,
        SUM(ss.net_profit) AS total_spent
    FROM
        customer c
    LEFT JOIN
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    WHERE
        c.c_birth_year < 1990
    GROUP BY
        c.c_customer_id
),
best_customers AS (
    SELECT
        c.c_customer_id,
        cs.total_spent,
        DENSE_RANK() OVER (ORDER BY cs.total_spent DESC) AS customer_rank
    FROM
        customer_sales cs
    JOIN 
        customer c ON cs.c_customer_id = c.c_customer_id
    WHERE 
        cs.purchases > 5
)
SELECT
    r.s_store_name,
    r.total_profit,
    r.total_sales,
    bc.c_customer_id,
    bc.total_spent
FROM
    ranked_sales r
LEFT JOIN 
    best_customers bc ON r.sales_rank = bc.customer_rank
WHERE
    r.total_profit IS NOT NULL
ORDER BY
    r.total_sales DESC,
    bc.total_spent DESC;
