
WITH CustomerAddressDetails AS (
    SELECT
        ca.ca_street_name,
        CONCAT(ca.ca_street_number, ' ', ca.ca_street_type) AS full_street,
        ca.ca_city,
        ca.ca_state,
        ca.ca_zip,
        ca.ca_country,
        ROW_NUMBER() OVER (PARTITION BY ca.ca_city, ca.ca_state ORDER BY ca.ca_address_sk) AS addr_rank
    FROM customer_address ca
),
CustomerInfo AS (
    SELECT
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        ca.full_street,
        ca.ca_city,
        ca.ca_state,
        ca.ca_country,
        ca.addr_rank
    FROM customer c
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN CustomerAddressDetails ca ON c.c_current_addr_sk = ca.ca_address_sk
),
SalesDetails AS (
    SELECT
        ws.ws_order_number,
        ws.ws_sales_price,
        ws.ws_quantity,
        ci.c_customer_id,
        ci.c_first_name,
        ci.c_last_name,
        ci.ca_city,
        ci.ca_state
    FROM web_sales ws
    JOIN CustomerInfo ci ON ws.ws_bill_customer_sk = ci.c_customer_id
),
AggregatedSales AS (
    SELECT
        ci.c_customer_id,
        ci.c_first_name,
        ci.c_last_name,
        ci.ca_city,
        ci.ca_state,
        SUM(sd.ws_sales_price * sd.ws_quantity) AS total_spent,
        COUNT(sd.ws_order_number) AS order_count
    FROM SalesDetails sd
    JOIN CustomerInfo ci ON sd.c_customer_id = ci.c_customer_id
    GROUP BY 
        ci.c_customer_id, 
        ci.c_first_name, 
        ci.c_last_name, 
        ci.ca_city, 
        ci.ca_state
)
SELECT
    c_customer_id AS customer_id,
    c_first_name AS first_name,
    c_last_name AS last_name,
    ca_city,
    ca_state,
    total_spent,
    order_count,
    CASE
        WHEN total_spent > 1000 THEN 'High Value'
        WHEN total_spent BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_segment
FROM AggregatedSales
ORDER BY total_spent DESC;
