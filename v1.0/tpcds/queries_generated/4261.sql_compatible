
WITH RankedSales AS (
    SELECT 
        ws.web_site_id,
        ws.ws_order_number,
        ws.ws_sold_date_sk,
        ws.ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_id ORDER BY ws.ws_sales_price DESC) AS sales_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sales_price IS NOT NULL
        AND ws.ws_quantity > 0
),
CustomerReturns AS (
    SELECT 
        sr_returned_date_sk,
        sr_item_sk,
        COUNT(*) AS total_returns,
        SUM(sr_return_amt_inc_tax) AS total_return_amount
    FROM 
        store_returns
    GROUP BY 
        sr_returned_date_sk, sr_item_sk
),
TopSales AS (
    SELECT 
        r.web_site_id,
        r.ws_order_number,
        r.ws_sales_price
    FROM 
        RankedSales r
    WHERE 
        r.sales_rank <= 10
),
ReturnsWithSales AS (
    SELECT 
        t.web_site_id,
        t.ws_order_number,
        t.ws_sales_price,
        COALESCE(c.total_returns, 0) AS total_returns,
        COALESCE(c.total_return_amount, 0) AS total_return_amount
    FROM 
        TopSales t
    LEFT JOIN 
        CustomerReturns c ON t.ws_order_number = c.sr_item_sk
)
SELECT 
    r.web_site_id,
    COUNT(*) AS orders_count,
    SUM(r.ws_sales_price) AS total_sales,
    SUM(r.total_returns) AS total_returns,
    SUM(r.total_return_amount) AS total_return_amount,
    AVG(CASE WHEN SUM(r.total_return_amount) > 0 THEN (SUM(r.total_return_amount) / SUM(r.ws_sales_price) * 100) ELSE 0 END) AS return_percentage
FROM 
    ReturnsWithSales r
GROUP BY 
    r.web_site_id
HAVING 
    SUM(r.ws_sales_price) > 1000
ORDER BY 
    total_sales DESC;
