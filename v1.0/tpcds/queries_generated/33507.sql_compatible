
WITH RECURSIVE ProductHierarchy AS (
    SELECT i.i_item_sk, i.i_item_desc, i.i_current_price, 1 AS Level
    FROM item i
    WHERE i.i_current_price IS NOT NULL
    UNION ALL
    SELECT ph.i_item_sk, ph.i_item_desc, ph.i_current_price, ph.Level + 1
    FROM ProductHierarchy ph
    JOIN item i ON ph.i_item_sk = i.i_item_sk
    WHERE ph.Level < 5
), 
CustomerReturns AS (
    SELECT 
        sr_store_sk, 
        SUM(sr_return_qty) AS total_returned_qty,
        SUM(sr_return_amt_inc_tax) AS total_returned_amt_inc_tax
    FROM store_returns 
    GROUP BY sr_store_sk
),
SalesData AS (
    SELECT 
        ws.web_site_sk,
        SUM(ws.ws_net_profit) AS total_net_profit,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        DENSE_RANK() OVER (ORDER BY SUM(ws.ws_net_profit) DESC) AS sales_rank
    FROM web_sales ws
    JOIN web_site w ON ws.ws_web_site_sk = w.web_site_sk
    WHERE ws.ws_sold_date_sk BETWEEN 1 AND 366
    GROUP BY ws.web_site_sk
)
SELECT 
    c.c_first_name || ' ' || c.c_last_name AS customer_name,
    COALESCE(SUM(sub_requests.total_returned_qty), 0) AS customer_total_returns,
    COALESCE(sales.total_net_profit, 0) AS total_net_profit,
    ph.i_item_desc,
    ph.i_current_price
FROM customer c 
LEFT JOIN CustomerReturns sub_requests ON c.c_customer_sk = sub_requests.sr_store_sk
LEFT JOIN SalesData sales ON c.c_customer_sk = sales.web_site_sk
LEFT JOIN ProductHierarchy ph ON ph.i_item_sk = c.c_customer_sk
GROUP BY c.c_first_name, c.c_last_name, sales.total_net_profit, ph.i_item_desc, ph.i_current_price
HAVING COALESCE(sales.total_net_profit, 0) > 10000
ORDER BY customer_total_returns DESC, total_net_profit DESC;
