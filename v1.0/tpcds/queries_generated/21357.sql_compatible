
WITH top_customers AS (
    SELECT c.c_customer_id, SUM(ws.ws_net_paid) AS total_spent
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE ws.ws_sold_date_sk IN (
        SELECT d.d_date_sk
        FROM date_dim d
        WHERE d.d_year = 2023 AND d.d_curr_day = 'Y'
    )
    GROUP BY c.c_customer_id
    HAVING SUM(ws.ws_net_paid) > (
        SELECT AVG(total)
        FROM (
            SELECT SUM(ws_internal.ws_net_paid) AS total
            FROM web_sales ws_internal
            GROUP BY ws_internal.ws_bill_customer_sk
        ) AS subquery
    )
),
promotions AS (
    SELECT p.p_promo_id, COUNT(DISTINCT ws.ws_order_number) AS orders_count
    FROM promotion p
    JOIN web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    WHERE p.p_start_date_sk <= ANY (
        SELECT d.d_date_sk
        FROM date_dim d
        WHERE d.d_year = 2023 AND d.d_month_seq IN (11, 12)
    ) AND p.p_discount_active = 'Y'
    GROUP BY p.p_promo_id
    HAVING COUNT(DISTINCT ws.ws_order_number) > 5
),
warehouse_stats AS (
    SELECT w.w_warehouse_id, SUM(COALESCE(inv.inv_quantity_on_hand, 0)) AS total_inventory
    FROM warehouse w
    LEFT JOIN inventory inv ON w.w_warehouse_sk = inv.inv_warehouse_sk
    GROUP BY w.w_warehouse_id
    HAVING SUM(COALESCE(inv.inv_quantity_on_hand, 0)) > 1000
)
SELECT tc.c_customer_id,
       COALESCE(ps.orders_count, 0) AS promo_orders,
       ws.w_warehouse_id,
       ws.total_inventory,
       ROW_NUMBER() OVER (PARTITION BY tc.c_customer_id ORDER BY ws.total_inventory DESC) AS rank
FROM top_customers tc
FULL OUTER JOIN promotions ps ON tc.c_customer_id = ps.p_promo_id
FULL OUTER JOIN warehouse_stats ws ON ws.total_inventory IS NOT NULL
WHERE (tc.total_spent BETWEEN 100 AND 1000 OR ps.orders_count IS NOT NULL)
ORDER BY tc.c_customer_id ASC, ws.w_warehouse_id DESC;
