
WITH RECURSIVE sales_hierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, 
           SUM(ws_sales_price) AS total_sales,
           ROW_NUMBER() OVER (PARTITION BY ca_state ORDER BY SUM(ws_sales_price) DESC) AS rank
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    GROUP BY c_customer_sk, c_first_name, c_last_name, ca_state
    HAVING SUM(ws_sales_price) > 1000  
),
geo_data AS (
    SELECT ca_state, COUNT(DISTINCT c_customer_sk) AS customer_count,
           AVG(total_sales) AS avg_sales
    FROM sales_hierarchy
    GROUP BY ca_state
),
sales_data AS (
    SELECT ca_state, customer_count, avg_sales, 
           CASE 
               WHEN avg_sales > 5000 THEN 'High' 
               WHEN avg_sales BETWEEN 1000 AND 5000 THEN 'Medium' 
               ELSE 'Low' 
           END AS income_band
    FROM geo_data
)
SELECT g.ca_state, g.customer_count, g.avg_sales, g.income_band, 
       COALESCE(p.p_promo_name, 'No Promotion') AS promotion_name, 
       SUM(s.ws_ext_sales_price) AS total_revenue,
       COUNT(DISTINCT s.s_store_sk) AS store_count
FROM sales_data g
LEFT JOIN promotion p ON g.income_band = 
    CASE 
        WHEN g.avg_sales > 5000 THEN 'High' 
        WHEN g.avg_sales BETWEEN 1000 AND 5000 THEN 'Medium' 
        ELSE 'Low' 
    END
LEFT JOIN store_sales s ON g.ca_state = s.ss_store_sk
JOIN date_dim d ON d.d_date_sk = s.ss_sold_date_sk
GROUP BY g.ca_state, g.customer_count, g.avg_sales, g.income_band, p.p_promo_name
ORDER BY total_revenue DESC
LIMIT 10;
