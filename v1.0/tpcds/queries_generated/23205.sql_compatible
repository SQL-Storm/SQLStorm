
WITH RECURSIVE address_with_rank AS (
    SELECT ca_address_sk, ca_city, ca_state, ROW_NUMBER() OVER (PARTITION BY ca_state ORDER BY ca_city) AS rn
    FROM customer_address
    WHERE ca_state IS NOT NULL
),
item_sales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws_order_number) AS order_count
    FROM web_sales
    GROUP BY ws_item_sk
),
sales_summary AS (
    SELECT 
        s_store_sk,
        SUM(ss_net_paid) AS total_store_sales,
        AVG(ss_net_profit) AS average_net_profit,
        COUNT(DISTINCT ss_ticket_number) AS total_transactions
    FROM store_sales
    GROUP BY s_store_sk
),
correlated_suppliers AS (
    SELECT 
        hw.hd_demo_sk,
        SUM(ws.net_profit) AS total_supplier_profit
    FROM household_demographics hw
    JOIN web_sales ws ON hw.hd_demo_sk = ws.ws_bill_cdemo_sk
    GROUP BY hw.hd_demo_sk
)
SELECT 
    a.ca_city,
    a.ca_state,
    COALESCE(s.total_store_sales, 0) AS store_sales,
    COALESCE(i.total_sales, 0) AS web_sales,
    COALESCE(ss.average_net_profit, 0) AS average_store_profit,
    SUM(CASE WHEN r.r_reason_id IS NOT NULL THEN 1 ELSE 0 END) AS return_count,
    SUM(CASE WHEN r.r_reason_id IS NULL THEN 1 ELSE 0 END) AS non_return_count,
    (SELECT AVG(total_supplier_profit) FROM correlated_suppliers) AS avg_supplier_profit
FROM address_with_rank a
LEFT JOIN item_sales i ON a.rn = i.ws_item_sk
LEFT JOIN sales_summary s ON a.ca_address_sk = s.s_store_sk
LEFT JOIN (
    SELECT cr_returning_addr_sk, r_reason_id
    FROM catalog_returns
    LEFT JOIN reason r ON cr_reason_sk = r.r_reason_sk
    WHERE cr_return_quantity > 0
) r ON a.ca_address_sk = r.cr_returning_addr_sk
GROUP BY a.ca_city, a.ca_state, i.total_sales, s.total_transactions
HAVING SUM(i.total_sales) > (
    SELECT AVG(total_sales)
    FROM item_sales
) OR COUNT(DISTINCT s.total_transactions) > 100
ORDER BY a.ca_state, a.ca_city
LIMIT 50;
