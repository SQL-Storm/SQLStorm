
WITH RECURSIVE customer_hierarchy AS (
    SELECT c_customer_sk, c_first_name, c_last_name, c_birth_year, 0 AS level
    FROM customer
    WHERE c_demo_sk IS NOT NULL

    UNION ALL

    SELECT c.c_customer_sk, c.c_first_name, c.c_last_name, c.c_birth_year, ch.level + 1
    FROM customer c
    JOIN customer_hierarchy ch ON c.c_current_cdemo_sk = ch.c_customer_sk
),
discounted_orders AS (
    SELECT ws_order_number, 
           COALESCE(SUM(ws_ext_discount_amt), 0) AS total_discount
    FROM web_sales 
    GROUP BY ws_order_number
),
high_value_customers AS (
    SELECT cd.cd_gender
    FROM customer_demographics cd 
    JOIN customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    WHERE cd.cd_purchase_estimate > 10000
      AND cd.cd_marital_status = 'M'
    GROUP BY cd.cd_gender 
)
SELECT ca.ca_city,
       AVG(pp.total_profit) AS average_profit,
       COUNT(DISTINCT cs.cs_order_number) AS total_orders,
       STRING_AGG(DISTINCT CONCAT(c.c_first_name, ' ', c.c_last_name), ', ') AS customer_names
FROM customer_address ca
LEFT JOIN (
    SELECT ws.ws_ship_mode_sk,
           (ws.ws_ext_sales_price - ws.ws_ext_discount_amt) AS total_profit
    FROM web_sales ws
    JOIN discounted_orders do ON ws.ws_order_number = do.ws_order_number
    WHERE do.total_discount > 0
) pp ON pp.ws_ship_mode_sk = (SELECT sm.sm_ship_mode_sk FROM ship_mode sm WHERE sm.sm_code = 'GND')
JOIN catalog_sales cs ON cs.cs_order_number = pp.ws_ship_mode_sk
JOIN high_value_customers hvc ON hvc.cd_gender = (SELECT cd.cd_gender FROM customer_demographics cd WHERE cd.cd_demo_sk = c.c_current_cdemo_sk)
JOIN customer c ON c.c_current_addr_sk = ca.ca_address_sk
WHERE ca.ca_city IS NOT NULL
  AND EXISTS (SELECT 1 FROM store_sales ss WHERE ss.ss_item_sk = cs.cs_item_sk AND ss.ss_quantity > 10)
GROUP BY ca.ca_city
HAVING AVG(pp.total_profit) > (SELECT AVG(ws_ext_sales_price) FROM web_sales)
ORDER BY average_profit DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
