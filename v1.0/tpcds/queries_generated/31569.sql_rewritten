WITH RECURSIVE customer_wallet AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        COALESCE(SUM(ws.ws_net_paid), 0) AS total_spent,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY COALESCE(SUM(ws.ws_net_paid), 0) DESC) AS rnk
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
high_value_customers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cw.total_spent,
        cw.total_orders
    FROM 
        customer_wallet cw
    JOIN 
        customer c ON cw.c_customer_sk = c.c_customer_sk
    WHERE 
        cw.total_spent > (SELECT AVG(total_spent) FROM customer_wallet)
),
promoted_items AS (
    SELECT 
        p.p_item_sk,
        SUM(ws.ws_quantity) AS total_sales
    FROM 
        promotion p
    JOIN 
        web_sales ws ON p.p_item_sk = ws.ws_item_sk
    WHERE 
        p.p_start_date_sk < cast('2002-10-01' as date)
        AND (p.p_end_date_sk IS NULL OR p.p_end_date_sk > cast('2002-10-01' as date))
    GROUP BY 
        p.p_item_sk
),
top_selling_items AS (
    SELECT 
        i.i_item_id,
        i.i_item_desc,
        pi.total_sales,
        ROW_NUMBER() OVER (ORDER BY pi.total_sales DESC) as rank
    FROM 
        item i
    JOIN 
        promoted_items pi ON i.i_item_sk = pi.p_item_sk
)
SELECT 
    c.first_last_name,
    t.i_item_desc,
    t.total_sales,
    CASE 
        WHEN t.rank <= 10 THEN 'Top Seller'
        ELSE 'Average Seller'
    END AS sales_category
FROM 
    high_value_customers c
JOIN 
    top_selling_items t ON c.c_customer_sk = t.i_item_sk
ORDER BY 
    c.total_spent DESC, t.total_sales DESC;