
WITH RankedReturns AS (
    SELECT 
        cr_item_sk,
        COUNT(cr_return_quantity) AS total_returns,
        SUM(cr_return_amt_inc_tax) AS total_return_amount,
        ROW_NUMBER() OVER (PARTITION BY cr_item_sk ORDER BY SUM(cr_return_amt_inc_tax) DESC) AS rn
    FROM 
        catalog_returns
    GROUP BY 
        cr_item_sk
),
CustomerDemographics AS (
    SELECT 
        cd_demo_sk,
        cd_gender,
        cd_marital_status,
        COUNT(c.c_customer_sk) AS customer_count,
        MAX(c.c_birth_year) AS highest_birth_year
    FROM 
        customer_demographics cd
    LEFT JOIN 
        customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    GROUP BY 
        cd_demo_sk, cd_gender, cd_marital_status
),
SalesSummary AS (
    SELECT 
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales_price,
        COUNT(DISTINCT ws_order_number) AS order_count,
        AVG(ws_discount_amt) AS average_discount
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
),
JoinSalesReturns AS (
    SELECT 
        r.cr_item_sk,
        r.total_returns,
        r.total_return_amount,
        s.total_sales_price,
        s.order_count,
        s.average_discount
    FROM 
        RankedReturns r
    LEFT JOIN 
        SalesSummary s ON r.cr_item_sk = s.ws_item_sk
)
SELECT 
    COALESCE(cd.cd_gender, 'Unknown') AS gender,
    COALESCE(cd.cd_marital_status, 'Single') AS marital_status,
    js.total_returns,
    js.total_return_amount,
    js.total_sales_price,
    js.order_count,
    js.average_discount,
    CASE 
        WHEN js.total_return_amount IS NULL THEN 'No Returns'
        WHEN js.total_return_amount > 1000 THEN 'High Return Amount'
        ELSE 'Moderate Return Amount' 
    END AS return_amount_category
FROM 
    JoinSalesReturns js
LEFT JOIN 
    CustomerDemographics cd ON js.cr_item_sk = cd.cd_demo_sk
WHERE 
    (cd.customer_count > 5 OR cd.highest_birth_year < 1980)
ORDER BY 
    return_amount_category, js.total_return_amount DESC NULLS LAST;
