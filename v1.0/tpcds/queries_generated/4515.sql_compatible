
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.sales_price DESC) AS rank_sales
    FROM 
        web_sales ws
    JOIN 
        web_site w ON ws.web_site_sk = w.web_site_sk
    WHERE 
        w.web_rec_start_date <= DATE '2002-10-01' AND 
        (w.web_rec_end_date IS NULL OR w.web_rec_end_date > DATE '2002-10-01')
),
CustomerShipments AS (
    SELECT 
        c.c_customer_sk,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_net_paid) AS total_revenue
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_ship_customer_sk
    GROUP BY 
        c.c_customer_sk
),
SalesSummary AS (
    SELECT 
        cs.c_customer_sk,
        COALESCE(cs.total_orders, 0) AS total_orders,
        COALESCE(cs.total_quantity, 0) AS total_quantity,
        COALESCE(cs.total_revenue, 0.00) AS total_revenue,
        CASE 
            WHEN ib.ib_income_band_sk IS NOT NULL THEN 'Within income band'
            ELSE 'Out of income band'
        END AS income_status
    FROM 
        CustomerShipments cs
    LEFT JOIN 
        household_demographics hd ON cs.c_customer_sk = hd.hd_demo_sk
    LEFT JOIN 
        income_band ib ON hd.hd_income_band_sk = ib.ib_income_band_sk
),
JoinInventory AS (
    SELECT 
        s.s_store_sk,
        SUM(i.inv_quantity_on_hand) AS total_inventory
    FROM 
        store s
    JOIN 
        inventory i ON s.s_store_sk = i.inv_warehouse_sk
    GROUP BY 
        s.s_store_sk
)
SELECT 
    rss.web_site_sk,
    SUM(ss.total_revenue) AS total_revenue,
    AVG(ss.total_orders) AS avg_orders,
    SUM(i.total_inventory) AS total_inventory,
    MIN(ss.total_quantity) AS min_quantity,
    MAX(ss.total_quantity) AS max_quantity
FROM 
    RankedSales rss
JOIN 
    SalesSummary ss ON rss.web_site_sk = ss.c_customer_sk
LEFT JOIN 
    JoinInventory i ON ss.c_customer_sk = i.s_store_sk
GROUP BY 
    rss.web_site_sk
HAVING 
    AVG(ss.total_revenue) > 1000
ORDER BY 
    total_revenue DESC;
