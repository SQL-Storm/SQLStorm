
WITH Customer_Sales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_net_paid) AS total_spent,
        COUNT(ws.ws_order_number) AS total_orders,
        ROW_NUMBER() OVER(PARTITION BY c.c_customer_sk ORDER BY SUM(ws.ws_net_paid) DESC) AS rn
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE 
        ws.ws_sold_date_sk >= (SELECT MIN(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023) 
        AND ws.ws_sold_date_sk <= (SELECT MAX(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2023)
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
Top_Customers AS (
    SELECT 
        cs.c_customer_sk, 
        cs.c_first_name, 
        cs.c_last_name, 
        cs.total_spent,
        cs.total_orders
    FROM 
        Customer_Sales cs
    WHERE 
        cs.rn <= 10
),
Average_Spend AS (
    SELECT 
        AVG(total_spent) AS avg_spent
    FROM 
        Top_Customers
),
Customer_Demographics AS (
    SELECT 
        cd.cd_gender,
        cd.cd_marital_status,
        COALESCE(cd.cd_purchase_estimate, 0) AS purchase_estimate
    FROM 
        customer_demographics cd
)
SELECT 
    tc.c_first_name, 
    tc.c_last_name,
    tc.total_spent,
    tc.total_orders,
    cd.cd_gender,
    cd.cd_marital_status,
    ABS(tc.total_spent - avg.avg_spent) AS spend_difference,
    CASE 
        WHEN tc.total_spent > avg.avg_spent THEN 'Above Average' 
        ELSE 'Below Average' 
    END AS spending_category,
    COALESCE(i.i_item_desc, 'No Item Description') AS item_description,
    RANK() OVER (ORDER BY tc.total_spent DESC) AS rank_position
FROM 
    Top_Customers tc
LEFT JOIN 
    item i ON i.i_item_sk = (SELECT ws.ws_item_sk FROM web_sales ws WHERE ws.ws_bill_customer_sk = tc.c_customer_sk ORDER BY ws.ws_net_paid DESC LIMIT 1)
CROSS JOIN 
    Average_Spend avg
JOIN 
    Customer_Demographics cd ON tc.c_customer_sk = cd.cd_demo_sk
WHERE 
    tc.total_orders > (SELECT AVG(total_orders) FROM Customer_Sales)
    AND (cd.cd_marital_status IS NULL OR cd.cd_marital_status != 'S')
ORDER BY 
    tc.total_spent DESC, 
    tc.c_last_name ASC;
