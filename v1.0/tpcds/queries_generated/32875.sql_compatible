
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        c.c_email_address,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        0 AS level
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE 
        cd.cd_purchase_estimate > 5000
        
    UNION ALL
    
    SELECT 
        sr.sr_customer_sk,
        c.c_first_name,
        c.c_last_name,
        c.c_email_address,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        level + 1
    FROM 
        store_returns sr
    JOIN 
        customer c ON sr.sr_customer_sk = c.c_customer_sk
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN 
        sales_hierarchy sh ON sr.sr_customer_sk = sh.c_customer_sk
)
SELECT 
    sh.c_customer_sk,
    CONCAT(sh.c_first_name, ' ', sh.c_last_name) AS customer_name,
    sh.c_email_address,
    sh.cd_gender,
    sh.cd_marital_status,
    sh.cd_purchase_estimate,
    SUM(ss.ss_net_profit) AS total_profit,
    DENSE_RANK() OVER (PARTITION BY sh.level ORDER BY SUM(ss.ss_net_profit) DESC) AS profit_rank
FROM 
    sales_hierarchy sh
LEFT JOIN 
    store_sales ss ON sh.c_customer_sk = ss.ss_customer_sk
GROUP BY 
    sh.c_customer_sk, sh.c_first_name, sh.c_last_name, sh.c_email_address, sh.cd_gender, 
    sh.cd_marital_status, sh.cd_purchase_estimate, sh.level
HAVING 
    SUM(ss.ss_net_profit) > 1000
ORDER BY 
    sh.level, profit_rank;
