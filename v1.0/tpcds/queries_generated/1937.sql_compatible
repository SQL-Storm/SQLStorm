
WITH RankedReturns AS (
    SELECT 
        wr_returning_customer_sk,
        SUM(wr_return_quantity) AS total_returned_quantity,
        SUM(wr_return_amt) AS total_return_amount,
        RANK() OVER (PARTITION BY wr_returning_customer_sk ORDER BY SUM(wr_return_amt) DESC) AS rank
    FROM 
        web_returns
    GROUP BY 
        wr_returning_customer_sk
),
CustomerDemographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status,
        ca.ca_country,
        COALESCE(CALEVENTS.total_returned_quantity, 0) AS total_returned_quantity
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    JOIN 
        customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    LEFT JOIN 
        RankedReturns CALEVENTS ON c.c_customer_sk = CALEVENTS.wr_returning_customer_sk
),
HighValueCustomers AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status,
        COUNT(*) AS purchase_count,
        AVG(cal.total_return_amount) AS avg_return_amount
    FROM 
        CustomerDemographics cd
    JOIN 
        web_sales ws ON cd.cd_demo_sk = ws.ws_bill_cdemo_sk
    GROUP BY 
        cd.cd_demo_sk, cd.cd_gender, cd.cd_marital_status, cd.cd_education_status
    HAVING 
        AVG(cal.total_return_amount) > 500 
)
SELECT 
    c.c_customer_id,
    c.c_first_name,
    c.c_last_name,
    cd.cd_gender,
    cd.cd_marital_status,
    cd.cd_education_status,
    CASE 
        WHEN COALESCE(sub.total_returned_quantity, 0) = 0 THEN 'No Returns'
        ELSE CAST(sub.total_returned_quantity AS VARCHAR)
    END AS return_info,
    CASE 
        WHEN cd.cd_gender = 'F' THEN 'Female'
        WHEN cd.cd_gender = 'M' THEN 'Male'
        ELSE 'Other'
    END AS gender_desc,
    CONCAT(cd.cd_marital_status, ' - ', cd.cd_education_status) AS demographic_summary
FROM 
    customer c
JOIN 
    CustomerDemographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
LEFT JOIN 
    RankedReturns sub ON c.c_customer_sk = sub.wr_returning_customer_sk
WHERE 
    EXISTS (SELECT 1 FROM HighValueCustomers hvc WHERE hvc.cd_demo_sk = cd.cd_demo_sk)
ORDER BY 
    c.c_last_name, c.c_first_name;
