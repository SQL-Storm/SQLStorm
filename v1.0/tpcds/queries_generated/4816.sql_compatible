
WITH CustomerSales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(COALESCE(ss.ss_net_paid, 0) + COALESCE(ws.ws_net_paid, 0) + COALESCE(cs.cs_net_paid, 0)) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    LEFT JOIN 
        catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
RankedCustomers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name, 
        c.c_last_name, 
        c.total_spent,
        RANK() OVER (ORDER BY c.total_spent DESC) AS sales_rank
    FROM 
        CustomerSales c
)
SELECT 
    r.c_first_name, 
    r.c_last_name, 
    r.total_spent,
    COALESCE(d.d_year, 0) AS d_year,
    CASE 
        WHEN r.sales_rank <= 10 THEN 'Top Customer' 
        ELSE 'Regular Customer' 
    END AS customer_status,
    (SELECT 
        COUNT(*) 
     FROM 
        store_returns 
     WHERE 
        sr_customer_sk = r.c_customer_sk
        AND sr_return_date_sk >= (SELECT MAX(d_date_sk) FROM date_dim WHERE d_current_year = 'Y')
    ) AS recent_returns
FROM 
    RankedCustomers r
LEFT JOIN 
    date_dim d ON d.d_date_sk = r.c_customer_sk  -- Corrected join condition
WHERE 
    r.total_spent > (SELECT AVG(total_spent) FROM CustomerSales)
ORDER BY 
    r.sales_rank;
