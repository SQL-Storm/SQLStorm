
WITH RECURSIVE SalesHierarchy AS (
    SELECT 
        s_store_sk,
        s_store_name,
        s_sales_price,
        ROW_NUMBER() OVER (PARTITION BY s_store_id ORDER BY ss_net_profit DESC) AS profit_rank
    FROM 
        store_sales
    JOIN 
        store ON store_sales.ss_store_sk = store.s_store_sk
),
AggregatedSales AS (
    SELECT 
        sh.s_store_sk,
        sh.s_store_name,
        SUM(sh.ss_sales_price) AS total_sales,
        AVG(sh.ss_sales_price) AS avg_sales,
        COUNT(sh.ss_ticket_number) AS total_transactions,
        SUM(sh.ss_ext_discount_amt) AS total_discounts
    FROM 
        store_sales sh
    GROUP BY 
        sh.s_store_sk, sh.s_store_name
)
SELECT 
    a.s_store_name,
    a.total_sales,
    a.avg_sales,
    a.total_transactions,
    a.total_discounts,
    CASE 
        WHEN a.total_sales > 100000 THEN 'High Sales'
        WHEN a.total_sales BETWEEN 50000 AND 100000 THEN 'Moderate Sales'
        ELSE 'Low Sales'
    END AS sales_category,
    COALESCE((SELECT 
                   COUNT(DISTINCT sr_returned_date_sk) 
               FROM 
                   store_returns sr 
               WHERE 
                   sr_store_sk = a.s_store_sk), 0) AS total_returns
FROM 
    AggregatedSales a
LEFT JOIN 
    SalesHierarchy h ON a.s_store_sk = h.s_store_sk AND h.profit_rank = 1
WHERE 
    a.total_sales IS NOT NULL
ORDER BY 
    a.total_sales DESC
FETCH FIRST 10 ROWS ONLY;
