
WITH RankedSales AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_sales_price,
        ws.ws_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_order_number ORDER BY ws.ws_net_profit DESC) AS rank
    FROM 
        web_sales ws
    JOIN 
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    WHERE 
        c.c_birth_year BETWEEN 1980 AND 1990
), 
CustomerReturns AS (
    SELECT 
        sr.ticket_number,
        SUM(sr.return_quantity) AS total_returned,
        SUM(sr.return_amt_inc_tax) AS total_return_amount
    FROM 
        store_returns sr
    WHERE 
        sr.returned_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        sr.ticket_number
    HAVING 
        SUM(sr.return_quantity) > 0
), 
TotalPromotions AS (
    SELECT 
        p.p_promo_sk,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_net_profit) AS promo_profit
    FROM 
        promotion p
    LEFT JOIN 
        web_sales ws ON p.p_promo_sk = ws.ws_promo_sk
    WHERE 
        p.p_discount_active = 'Y'
    GROUP BY 
        p.p_promo_sk
)
SELECT 
    cr.ticket_number,
    cr.total_returned,
    cr.total_return_amount,
    rs.ws_sales_price,
    COALESCE(tp.promo_profit, 0) AS total_promo_profit,
    CASE 
        WHEN cr.total_returned > 10 THEN 'High Returns'
        ELSE 'Normal Returns'
    END AS return_category
FROM 
    CustomerReturns cr
LEFT JOIN 
    RankedSales rs ON cr.ticket_number = rs.ws_order_number
LEFT JOIN 
    TotalPromotions tp ON tp.total_orders > 10
WHERE 
    (rs.rank = 1 OR rs.ws_sales_price IS NULL)
    AND (cr.total_return_amount IS NOT NULL OR cr.total_return_amount = 0)
ORDER BY 
    cr.total_returned DESC, total_promo_profit DESC
FETCH FIRST 50 ROWS ONLY;
