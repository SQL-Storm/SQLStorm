
WITH CustomerReturnStats AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        COUNT(DISTINCT wr.wr_order_number) AS total_web_returns,
        SUM(wr.wr_return_amt) AS total_web_return_amt,
        SUM(wr.wr_return_tax) AS total_web_return_tax
    FROM
        web_returns wr
    JOIN
        customer c ON wr.returning_customer_sk = c.c_customer_sk
    GROUP BY
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
TopReturnCustomers AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cr.total_web_returns,
        cr.total_web_return_amt,
        cr.total_web_return_tax,
        RANK() OVER (ORDER BY cr.total_web_return_amt DESC) AS rank
    FROM
        customer c
    LEFT JOIN
        CustomerReturnStats cr ON c.c_customer_sk = cr.c_customer_sk
    WHERE
        cr.total_web_returns IS NOT NULL
)
SELECT
    c.c_customer_id,
    c.c_first_name,
    c.c_last_name,
    c.c_email_address,
    COALESCE(SUM(ws.ws_net_profit), 0) AS total_net_profit,
    COALESCE(SUM(cs.cs_net_profit), 0) AS catalog_net_profit,
    CASE
        WHEN COUNT(DISTINCT ws.ws_order_number) > 10 THEN 'Frequent Buyer'
        ELSE 'Occasional Buyer'
    END AS customer_type,
    ROW_NUMBER() OVER (PARTITION BY c.c_state ORDER BY COALESCE(SUM(ws.ws_net_profit), 0) DESC) AS state_rank
FROM
    customer c
LEFT JOIN
    web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN
    catalog_sales cs ON c.c_customer_sk = cs.cs_bill_customer_sk
WHERE
    c.c_current_cdemo_sk IS NOT NULL
    AND EXISTS (SELECT 1 FROM TopReturnCustomers tr WHERE tr.c_customer_sk = c.c_customer_sk AND tr.rank <= 10)
GROUP BY
    c.c_customer_id, c.c_first_name, c.c_last_name, c.c_email_address, c.c_state
HAVING
    COALESCE(SUM(ws.ws_net_profit), 0) > 1000
ORDER BY
    total_net_profit DESC;
