
WITH RECURSIVE CustomerReturns AS (
    SELECT 
        sr_customer_sk,
        COUNT(*) AS total_returns,
        SUM(sr_return_quantity) AS total_return_qty,
        SUM(sr_return_amt_inc_tax) AS total_return_amt
    FROM 
        store_returns
    GROUP BY 
        sr_customer_sk
    HAVING 
        COUNT(*) > 1
),
SalesData AS (
    SELECT 
        ws.web_site_sk,
        SUM(ws.ws_net_paid) AS total_sales,
        COUNT(ws.ws_order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY SUM(ws.ws_net_profit) DESC) AS rank
    FROM 
        web_sales ws
    GROUP BY 
        ws.web_site_sk
),
HighReturningCustomers AS (
    SELECT 
        c.c_customer_id,
        cr.total_returns,
        cr.total_return_qty,
        cr.total_return_amt
    FROM 
        customer c
    INNER JOIN 
        CustomerReturns cr ON c.c_customer_sk = cr.sr_customer_sk
    WHERE 
        cr.total_return_amt > (SELECT AVG(total_return_amt) FROM CustomerReturns)
),
TopSales AS (
    SELECT 
        sd.web_site_sk,
        sd.total_sales,
        CASE 
            WHEN sd.total_sales > 100000 THEN 'High Performer'
            WHEN sd.total_sales BETWEEN 50000 AND 100000 THEN 'Moderate Performer'
            ELSE 'Low Performer'
        END AS performance_category
    FROM 
        SalesData sd
    WHERE 
        sd.rank <= 5
)
SELECT 
    hrc.c_customer_id,
    ts.web_site_sk,
    ts.performance_category,
    COALESCE(hrc.total_returns, 0) AS total_returns,
    COALESCE(hrc.total_return_qty, 0) AS total_return_qty,
    COALESCE(hrc.total_return_amt, 0) AS total_return_amt,
    (SELECT 
        SUM(p.p_cost) 
     FROM 
        promotion p 
     WHERE 
        EXISTS (SELECT 1 FROM HighReturningCustomers hrc2 WHERE hrc2.c_customer_id = hrc.c_customer_id)) AS total_promotions_spent
FROM 
    HighReturningCustomers hrc
LEFT JOIN 
    TopSales ts ON 1 = 1
WHERE 
    hrc.total_returns IS NOT NULL
ORDER BY 
    hrc.total_return_amt DESC 
FETCH FIRST 10 ROWS ONLY;
