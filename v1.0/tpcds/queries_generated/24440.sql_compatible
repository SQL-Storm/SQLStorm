
WITH RankedSales AS (
    SELECT
        ws.ws_item_sk,
        ws.ws_order_number,
        ws.ws_quantity,
        ws.ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY ws.ws_ext_sales_price DESC) AS rn
    FROM
        web_sales ws
    WHERE
        ws.ws_sales_price IS NOT NULL
        AND ws.ws_ext_sales_price > 0
),
TopWebSales AS (
    SELECT
        r.ws_item_sk,
        r.ws_order_number,
        r.ws_quantity,
        r.ws_ext_sales_price
    FROM
        RankedSales r
    WHERE
        r.rn = 1
),
CustomerReturns AS (
    SELECT
        cr.cr_item_sk,
        SUM(cr.cr_return_quantity) AS total_returned
    FROM
        catalog_returns cr
    GROUP BY
        cr.cr_item_sk
),
SalesWithReturns AS (
    SELECT
        w.ws_item_sk,
        w.ws_order_number,
        w.ws_quantity,
        w.ws_ext_sales_price,
        COALESCE(r.total_returned, 0) AS total_returned
    FROM
        TopWebSales w
    LEFT JOIN
        CustomerReturns r ON w.ws_item_sk = r.cr_item_sk
),
FilteredSales AS (
    SELECT
        s.ws_item_sk,
        s.ws_order_number,
        s.ws_quantity,
        s.ws_ext_sales_price,
        CASE
            WHEN s.total_returned > 0 THEN 'Returned'
            ELSE 'Not Returned'
        END AS return_status,
        ROW_NUMBER() OVER (PARTITION BY s.ws_item_sk ORDER BY s.ws_quantity DESC) AS rn_sales
    FROM
        SalesWithReturns s
    WHERE
        s.ws_quantity > (SELECT AVG(s2.ws_quantity) FROM SalesWithReturns s2)
)
SELECT
    f.ws_item_sk,
    f.ws_order_number,
    f.ws_quantity,
    f.ws_ext_sales_price,
    f.return_status,
    CASE
        WHEN f.rn_sales <= 5 THEN 'Top 5 Sales'
        ELSE 'Other'
    END AS sales_category
FROM
    FilteredSales f
WHERE
    f.ws_ext_sales_price IS NOT NULL
    AND f.return_status IS NOT NULL
ORDER BY
    f.ws_item_sk, f.sales_category DESC, f.ws_ext_sales_price DESC;
