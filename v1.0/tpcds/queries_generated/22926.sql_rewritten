WITH RankedSales AS (
    SELECT 
        ws_item_sk,
        ws_order_number,
        ws_bill_customer_sk,
        ws_ext_sales_price,
        RANK() OVER (PARTITION BY ws_item_sk ORDER BY ws_ext_sales_price DESC) AS price_rank,
        COUNT(*) OVER (PARTITION BY ws_item_sk) AS sales_count
    FROM 
        web_sales
    WHERE 
        ws_sold_date_sk BETWEEN 1 AND 100
),
CustomerReturns AS (
    SELECT 
        wr_returning_customer_sk,
        SUM(wr_return_quantity) AS total_returns,
        COUNT(DISTINCT wr_order_number) AS return_count
    FROM 
        web_returns
    WHERE 
        wr_returned_date_sk IS NOT NULL
    GROUP BY 
        wr_returning_customer_sk
),
HighValueCustomers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_ext_sales_price) AS total_spent
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
    HAVING 
        total_spent > (SELECT AVG(SUM(ws_ext_sales_price))
                        FROM web_sales
                        GROUP BY ws_bill_customer_sk) 
),
FinalReport AS (
    SELECT 
        hvc.c_customer_sk,
        hvc.c_first_name,
        hvc.c_last_name,
        hvc.total_orders,
        hvc.total_spent,
        COALESCE(cr.total_returns, 0) AS total_returns,
        CASE 
            WHEN cr.total_returns IS NOT NULL THEN 
                ROUND((hvc.total_spent / NULLIF(cr.total_returns, 0)), 2) 
            ELSE 
                NULL 
        END AS returned_spending_ratio,
        s.ws_item_sk,
        r.price_rank
    FROM 
        HighValueCustomers hvc
    LEFT JOIN 
        CustomerReturns cr ON hvc.c_customer_sk = cr.wr_returning_customer_sk
    JOIN 
        RankedSales s ON s.ws_bill_customer_sk = hvc.c_customer_sk
    WHERE 
        r.price_rank = 1
)
SELECT 
    *,
    CASE 
        WHEN total_returns > 0 THEN 'Positive'
        ELSE 'Neutral'
    END AS return_status
FROM 
    FinalReport
WHERE 
    returned_spending_ratio > 100 OR returned_spending_ratio IS NULL
ORDER BY 
    total_spent DESC, c_last_name ASC NULLS LAST;