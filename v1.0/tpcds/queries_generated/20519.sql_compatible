
WITH RankedReturns AS (
    SELECT 
        sr_returned_date_sk, 
        sr_item_sk, 
        sr_customer_sk, 
        RANK() OVER (PARTITION BY sr_item_sk ORDER BY sr_return_quantity DESC) AS return_rank
    FROM 
        store_returns
    WHERE 
        sr_return_quantity IS NOT NULL
), CTE_CustomerDemographics AS (
    SELECT 
        cd_demo_sk, 
        cd_gender, 
        cd_marital_status,
        cd_birth_year, 
        CASE WHEN cd_gender = 'F' THEN 'Female' ELSE 'Male' END AS gender_full
    FROM 
        customer_demographics
    WHERE 
        cd_birth_year IS NOT NULL
), CTE_CustomerAddress AS (
    SELECT 
        ca_address_sk, 
        ca_country,
        ROW_NUMBER() OVER (PARTITION BY ca_country ORDER BY ca_city) AS country_rank
    FROM 
        customer_address
    WHERE 
        ca_state IS NOT NULL
), ItemSales AS (
    SELECT 
        ws_item_sk, 
        SUM(ws_sales_price) AS total_sales, 
        COUNT(ws_order_number) AS total_orders
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
    HAVING 
        SUM(ws_sales_price) > 1000
), UnusualPromotions AS (
    SELECT 
        p_promo_sk, 
        p_promo_name,
        CASE 
            WHEN p_discount_active = 'Y' THEN 'Active'
            ELSE 'Inactive'
        END AS promotion_status
    FROM 
        promotion
    WHERE 
        p_start_date_sk < p_end_date_sk
), CustomerReturnStats AS (
    SELECT 
        r.return_rank, 
        c.c_customer_id, 
        c.c_first_name, 
        c.c_last_name, 
        SUM(r.return_rank) AS total_return_rank,
        COUNT(r.return_rank) AS return_count,
        COALESCE(ca.country_rank, 0) AS address_rank
    FROM 
        RankedReturns r
    JOIN 
        customer c ON r.sr_customer_sk = c.c_customer_sk
    LEFT JOIN 
        CTE_CustomerAddress ca ON c.c_current_addr_sk = ca.ca_address_sk
    GROUP BY 
        r.return_rank, c.c_customer_id, c.c_first_name, c.c_last_name, ca.country_rank
)
SELECT 
    cs.c_customer_id, 
    cs.c_first_name, 
    cs.c_last_name, 
    cs.total_return_rank,
    cs.return_count,
    COALESCE(i.total_sales, 0) AS total_item_sales,
    COALESCE(p.promotion_status, 'No Promotion') AS promotion_status
FROM 
    CustomerReturnStats cs
LEFT JOIN 
    ItemSales i ON cs.return_count > 0 AND cs.return_count = i.ws_item_sk
LEFT JOIN 
    UnusualPromotions p ON cs.return_count = p.p_promo_sk
WHERE 
    cs.total_return_rank IS NOT NULL
ORDER BY 
    cs.total_return_rank DESC, 
    cs.c_last_name ASC;
