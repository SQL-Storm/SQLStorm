
WITH RankedReturns AS (
    SELECT 
        sr_customer_sk,
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returns,
        ROW_NUMBER() OVER (PARTITION BY sr_customer_sk ORDER BY SUM(sr_return_quantity) DESC) AS rn
    FROM store_returns
    WHERE sr_return_quantity IS NOT NULL
    GROUP BY sr_customer_sk, sr_item_sk
),
HighReturnCustomers AS (
    SELECT 
        rr.sr_customer_sk,
        rr.sr_item_sk,
        rr.total_returns,
        CASE 
            WHEN rr.total_returns > 5 THEN 'High Return Customer' 
            ELSE 'Moderate Return Customer' 
        END AS return_classification
    FROM RankedReturns rr
    WHERE rr.rn = 1
),
ItemSales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws_order_number) AS sales_count
    FROM web_sales
    GROUP BY ws_item_sk
),
ItemDetails AS (
    SELECT 
        i.i_item_sk,
        MAX(i.i_product_name) AS product_name,
        MAX(i.i_current_price) AS current_price,
        COALESCE(SUM(CASE WHEN hr.return_classification = 'High Return Customer' THEN 1 ELSE 0 END), 0) AS high_return_count
    FROM item i
    LEFT JOIN HighReturnCustomers hr ON i.i_item_sk = hr.sr_item_sk
    GROUP BY i.i_item_sk
)
SELECT 
    id.product_name,
    id.current_price,
    COALESCE(is.total_sales, 0) AS web_sales_total,
    id.high_return_count,
    CASE 
        WHEN id.high_return_count > 0 THEN 'Noticeable Returns'
        ELSE 'Stable Sales'
    END AS sales_stability,
    CURRENT_DATE AS query_execution_date
FROM ItemDetails id
LEFT JOIN ItemSales is ON id.i_item_sk = is.ws_item_sk
WHERE id.current_price > (SELECT AVG(i.current_price) FROM item i) 
AND id.high_return_count > 0
ORDER BY id.high_return_count DESC, id.current_price DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
