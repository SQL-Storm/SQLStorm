
WITH RecursiveIncome AS (
    SELECT ib_income_band_sk,
           ib_lower_bound,
           ib_upper_bound
    FROM income_band
    WHERE ib_income_band_sk IS NOT NULL
    UNION ALL
    SELECT ib.ib_income_band_sk,
           ib.ib_lower_bound,
           ib.ib_upper_bound
    FROM income_band ib
    JOIN RecursiveIncome ri ON ib.ib_lower_bound > ri.ib_upper_bound
),
StoreSummary AS (
    SELECT s_store_sk,
           COUNT(ss_item_sk) AS total_sales,
           SUM(ss_net_profit) AS total_profit
    FROM store_sales
    WHERE ss_sold_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_week_seq = (SELECT MAX(d_week_seq) FROM date_dim))
    GROUP BY s_store_sk
),
CustomerDemographic AS (
    SELECT cd_demo_sk,
           SUM(cd_purchase_estimate) AS total_purchase_estimate,
           COUNT(c_customer_sk) AS total_customers
    FROM customer_demographics cd
    JOIN customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    WHERE cd_marital_status = 'M'
    GROUP BY cd_demo_sk
),
TopStores AS (
    SELECT s_store_sk,
           RANK() OVER (ORDER BY total_profit DESC) AS rank
    FROM StoreSummary
    WHERE total_sales > (
        SELECT AVG(total_sales) FROM StoreSummary
    )
)
SELECT ca.ca_city,
       SUM(ws.ws_ext_sales_price) AS total_sales,
       COUNT(DISTINCT c.c_customer_sk) AS unique_customers,
       COALESCE(SUM(cd.total_purchase_estimate), 0) AS total_purchase_estimate,
       SUM(CASE WHEN c.c_birth_month IS NULL THEN 1 ELSE 0 END) AS null_birth_month_count,
       COUNT(DISTINCT i.i_item_sk) AS unique_items_sold
FROM web_sales ws
JOIN customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
JOIN web_site w ON ws.ws_web_site_sk = w.web_site_sk
LEFT JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
JOIN item i ON ws.ws_item_sk = i.i_item_sk
LEFT JOIN CustomerDemographic cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
WHERE i.i_current_price > 0
  AND c.c_preferred_cust_flag = 'Y'
  AND EXISTS (SELECT 1
              FROM TopStores ts
              WHERE ts.s_store_sk = ws.ws_warehouse_sk AND ts.rank <= 5)
GROUP BY ca.ca_city
HAVING SUM(ws.ws_ext_sales_price) > 1000
ORDER BY total_sales DESC, ca.ca_city ASC;
