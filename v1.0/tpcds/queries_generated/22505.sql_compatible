
WITH RecursiveSales AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        ws_quantity,
        ws_sales_price,
        ws_net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sold_date_sk DESC) AS rn
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN 2450000 AND 2450400 
),
AddressDetail AS (
    SELECT 
        ca_state, 
        COUNT(DISTINCT c_customer_sk) AS customer_count
    FROM customer_address
    LEFT JOIN customer ON ca_address_sk = c_current_addr_sk
    GROUP BY ca_state
),
GeneralStats AS (
    SELECT
        w.w_zip AS ca_state,
        COALESCE(s.total_sales, 0) AS total_sales,
        COALESCE(cd.customer_count, 0) AS customer_count,
        SUM(CASE WHEN ws_sales_price > 100 THEN 1 ELSE 0 END) AS high_value_sales
    FROM warehouse w
    INNER JOIN AddressDetail cd ON w.w_zip = cd.ca_state 
    LEFT JOIN (
        SELECT 
            ws_ship_date_sk,
            SUM(ws_sales_price * ws_quantity) AS total_sales
        FROM web_sales
        WHERE ws_sales_price IS NOT NULL
        GROUP BY ws_ship_date_sk
    ) s ON w.w_warehouse_sk = s.ws_ship_date_sk
    GROUP BY w.w_zip, s.total_sales, cd.customer_count
)
SELECT 
    gs.ca_state,
    gs.total_sales,
    gs.customer_count,
    RANK() OVER (ORDER BY gs.total_sales DESC) AS sales_rank,
    CASE 
        WHEN gs.customer_count IS NULL THEN 'No Customers'
        WHEN gs.customer_count = 0 THEN 'No Activity'
        ELSE 'Active'
    END AS activity_status,
    (SELECT AVG(ws_net_profit) FROM RecursiveSales rs WHERE rs.ws_item_sk = (SELECT MAX(i_item_sk) FROM item)) AS avg_profit_for_most_sold_item
FROM GeneralStats gs
WHERE (CASE 
            WHEN gs.customer_count IS NULL THEN 'No Customers'
            WHEN gs.customer_count = 0 THEN 'No Activity'
            ELSE 'Active'
        END) = 'Active'
AND gs.total_sales > (
    SELECT AVG(total_sales) 
    FROM (
        SELECT SUM(ws_sales_price * ws_quantity) AS total_sales 
        FROM web_sales 
        GROUP BY ws_ship_date_sk
    ) avg_sales
)
ORDER BY gs.total_sales DESC;
