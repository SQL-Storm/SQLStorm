
WITH RECURSIVE SalesCTE AS (
    SELECT 
        ws_order_number,
        ws_item_sk,
        ws_sales_price,
        ws_quantity,
        ROW_NUMBER() OVER (PARTITION BY ws_order_number ORDER BY ws_item_sk) AS item_rank
    FROM 
        web_sales
    WHERE 
        ws_order_number IN (
            SELECT cs_order_number 
            FROM catalog_sales 
            WHERE cs_sold_date_sk IN (
                SELECT d_date_sk 
                FROM date_dim 
                WHERE d_year = 2023
            )
        )
    UNION ALL
    SELECT 
        cs_order_number,
        cs_item_sk,
        cs_sales_price,
        cs_quantity,
        ROW_NUMBER() OVER (PARTITION BY cs_order_number ORDER BY cs_item_sk) AS item_rank
    FROM 
        catalog_sales
    WHERE 
        cs_order_number IN (
            SELECT ss_ticket_number 
            FROM store_sales 
            WHERE ss_sold_date_sk IN (
                SELECT d_date_sk 
                FROM date_dim 
                WHERE d_year = 2023
            )
        )
)
SELECT 
    s.ws_order_number,
    SUM(s.ws_sales_price * s.ws_quantity) AS total_sales,
    AVG(s.ws_sales_price) AS average_price,
    COUNT(DISTINCT s.ws_item_sk) AS unique_items_sold,
    COALESCE(NULLIF(SUM(s.ws_sales_price * s.ws_quantity), 0), 'No Sales') AS sales_amount
FROM 
    SalesCTE s
LEFT JOIN 
    customer c ON c.c_customer_sk IN (
        SELECT cs_bill_customer_sk 
        FROM catalog_sales 
        WHERE cs_order_number = s.ws_order_number
    )
LEFT JOIN 
    customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
WHERE 
    cd.cd_gender = 'F' AND 
    cd.cd_marital_status = 'M'
GROUP BY 
    s.ws_order_number
HAVING 
    SUM(s.ws_sales_price * s.ws_quantity) > 1000
ORDER BY 
    total_sales DESC
LIMIT 10;
