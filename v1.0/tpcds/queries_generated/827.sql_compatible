
WITH RankedSales AS (
    SELECT 
        ws.web_site_id, 
        SUM(ws_ext_sales_price) AS total_sales, 
        RANK() OVER (PARTITION BY ws.ws_web_site_sk ORDER BY SUM(ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    JOIN 
        web_site w ON ws.ws_web_site_sk = w.web_site_sk
    WHERE 
        ws.ws_sold_date_sk >= (SELECT MAX(d_date_sk) - 30 FROM date_dim)
    GROUP BY 
        ws.web_site_id, ws.ws_web_site_sk
),
PromotionalReturns AS (
    SELECT 
        wr.web_site_sk, 
        SUM(wr_return_amt_inc_tax) AS total_returns
    FROM 
        web_returns wr
    WHERE 
        wr_returned_date_sk IN (SELECT d_date_sk FROM date_dim WHERE d_year = 2023)
    GROUP BY 
        wr.web_site_sk
),
SalesAndReturns AS (
    SELECT 
        r.web_site_id,
        r.total_sales,
        COALESCE(p.total_returns, 0) AS total_returns,
        (r.total_sales - COALESCE(p.total_returns, 0)) AS net_sales
    FROM 
        RankedSales r
    LEFT JOIN 
        PromotionalReturns p ON r.web_site_id = p.web_site_sk
)
SELECT 
    sa.web_site_id,
    sa.total_sales,
    sa.total_returns,
    sa.net_sales,
    CASE 
        WHEN sa.total_sales > 0 THEN ROUND((sa.total_returns / CAST(sa.total_sales AS decimal)) * 100, 2)
        ELSE 0 
    END AS return_percentage
FROM 
    SalesAndReturns sa
WHERE 
    sa.net_sales > 0
ORDER BY 
    return_percentage DESC;
