
WITH RECURSIVE customer_hierarchy AS (
    SELECT c_customer_sk, c_current_cdemo_sk, c_first_name, c_last_name, 
           1 AS level
    FROM customer
    WHERE c_current_cdemo_sk IS NOT NULL
    UNION ALL
    SELECT c.c_customer_sk, c.c_current_cdemo_sk, c.c_first_name, c.c_last_name, 
           ch.level + 1
    FROM customer c
    JOIN customer_hierarchy ch ON c.c_current_cdemo_sk = ch.c_customer_sk
),
sales_summary AS (
    SELECT ws_bill_customer_sk AS customer_sk,
           SUM(ws_ext_sales_price) AS total_sales,
           COUNT(ws_order_number) AS total_orders
    FROM web_sales
    GROUP BY ws_bill_customer_sk
),
return_summary AS (
    SELECT sr_customer_sk AS customer_sk,
           SUM(sr_return_amt) AS total_returns
    FROM store_returns
    GROUP BY sr_customer_sk
),
customer_stats AS (
    SELECT ch.c_customer_sk,
           ch.c_first_name,
           ch.c_last_name,
           COALESCE(ss.total_sales, 0) AS total_sales,
           COALESCE(rs.total_returns, 0) AS total_returns,
           CASE 
               WHEN COALESCE(ss.total_sales, 0) > COALESCE(rs.total_returns, 0) 
               THEN 'Profitable' 
               ELSE 'Unprofitable' 
           END AS profitability
    FROM customer_hierarchy ch
    LEFT JOIN sales_summary ss ON ch.c_customer_sk = ss.customer_sk
    LEFT JOIN return_summary rs ON ch.c_customer_sk = rs.customer_sk
)
SELECT c.c_first_name, c.c_last_name, c.total_sales, c.total_returns, c.profitability,
       CEIL(AVG(NULLIF(c.total_sales, 0))) OVER (PARTITION BY c.profitability) AS avg_sales_per_customer
FROM customer_stats c
WHERE c.total_sales > 1000 OR c.total_returns > 100
GROUP BY c.c_first_name, c.c_last_name, c.total_sales, c.total_returns, c.profitability
ORDER BY c.profitability DESC, c.total_sales DESC;
