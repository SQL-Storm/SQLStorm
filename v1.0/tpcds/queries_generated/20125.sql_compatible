
WITH RankedReturns AS (
    SELECT 
        sr_returned_date_sk,
        sr_item_sk,
        COUNT(*) AS total_returns,
        SUM(sr_return_amt) AS total_return_amt,
        RANK() OVER (PARTITION BY sr_item_sk ORDER BY SUM(sr_return_amt) DESC) AS return_rank
    FROM 
        store_returns
    GROUP BY 
        sr_returned_date_sk, sr_item_sk
),
CustomerStats AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        COALESCE(SUM(ws.ws_quantity), 0) AS total_quantity,
        COALESCE(SUM(ws.ws_net_profit), 0) AS total_net_profit,
        COUNT(DISTINCT CASE WHEN ws.ws_sales_price > 100 THEN ws.ws_order_number END) AS high_value_orders
    FROM 
        customer c
        LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
        LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_id, cd.cd_gender
),
AddressStats AS (
    SELECT 
        ca.ca_city,
        COUNT(DISTINCT c.c_customer_id) AS customer_count,
        AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate
    FROM 
        customer_address ca
        JOIN customer c ON ca.ca_address_sk = c.c_current_addr_sk
        JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    GROUP BY 
        ca.ca_city
),
AggregateReturns AS (
    SELECT 
        rr.sr_item_sk,
        SUM(rr.total_return_amt) AS total_return_amt,
        AVG(rr.total_returns) AS avg_return_per_item
    FROM 
        RankedReturns rr
    GROUP BY 
        rr.sr_item_sk
),
FinalReport AS (
    SELECT 
        cs.c_customer_id,
        COALESCE(AS.avg_purchase_estimate, 'N/A') AS avg_purchase_estimate,
        COALESCE(AR.avg_return_per_item, 0) AS avg_return_per_item
    FROM 
        CustomerStats cs
        LEFT JOIN AddressStats AS ON cs.total_quantity > 0
        LEFT JOIN AggregateReturns AR ON cs.high_value_orders > 0
)
SELECT 
    fr.c_customer_id,
    fr.avg_purchase_estimate,
    fr.avg_return_per_item,
    CASE 
        WHEN fr.avg_purchase_estimate = 'N/A' AND fr.avg_return_per_item = 0 THEN 'No data available'
        ELSE 'Data available'
    END AS data_availability_status
FROM 
    FinalReport fr
WHERE 
    fr.avg_return_per_item IS NOT NULL
ORDER BY 
    fr.avg_return_per_item DESC;
