
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws_sold_date_sk,
        ws_item_sk,
        SUM(ws_quantity) AS total_sold,
        SUM(ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_quantity) DESC) AS rn
    FROM 
        web_sales
    GROUP BY 
        ws_sold_date_sk, 
        ws_item_sk
),
inventory_status AS (
    SELECT 
        inv.inv_item_sk,
        SUM(inv.inv_quantity_on_hand) AS total_inventory,
        DENSE_RANK() OVER (ORDER BY SUM(inv.inv_quantity_on_hand) DESC) AS inventory_rank
    FROM 
        inventory AS inv
    GROUP BY 
        inv.inv_item_sk
),
detailed_sales AS (
    SELECT 
        ss.ws_item_sk,
        ss.total_sold,
        ss.total_sales,
        CASE 
            WHEN ss.total_sales = 0 THEN NULL
            ELSE ss.total_sales / NULLIF(ss.total_sold, 0) 
        END AS average_price,
        is.total_inventory,
        is.inventory_rank
    FROM 
        sales_summary ss
    LEFT JOIN 
        inventory_status is ON ss.ws_item_sk = is.inv_item_sk
)
SELECT 
    ds.ws_item_sk,
    ds.total_sold,
    ds.total_sales,
    COALESCE(ds.average_price, 0) AS adjusted_average_price,
    COALESCE(ds.total_inventory, 0) AS on_hand_inventory,
    CASE 
        WHEN ds.total_sold > 100 THEN 'High Demand'
        WHEN ds.total_sold BETWEEN 50 AND 100 THEN 'Moderate Demand'
        ELSE 'Low Demand'
    END AS demand_category
FROM 
    detailed_sales ds
WHERE 
    (ds.average_price IS NOT NULL OR ds.total_inventory IS NOT NULL)
    AND ds.total_sold > (
        SELECT 
            AVG(total_sold) FROM sales_summary
    ) 
UNION ALL
SELECT 
    'TOTAL' AS ws_item_sk,
    SUM(total_sold) AS total_sold,
    SUM(total_sales) AS total_sales,
    AVG(average_price) AS avg_price,
    SUM(total_inventory) AS total_inventory,
    'Aggregate' AS demand_category
FROM 
    detailed_sales
HAVING 
    COUNT(*) > 0
ORDER BY 
    total_sales DESC;
