
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.ws_sales_price,
        ws.ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.ws_ext_sales_price DESC) AS SalesRank
    FROM 
        web_sales ws
    JOIN 
        web_site w ON ws.ws_web_site_sk = w.web_site_sk
    WHERE 
        ws.ws_sold_date_sk > (
            SELECT MAX(d_date_sk) 
            FROM date_dim 
            WHERE d_year = (SELECT MAX(d_year) FROM date_dim)
        ) - 30
),
CustomerReturns AS (
    SELECT 
        sr_returning_customer_sk,
        SUM(sr_return_quantity) AS TotalReturns,
        COUNT(DISTINCT sr_ticket_number) AS ReturnCount
    FROM 
        store_returns
    WHERE 
        sr_returned_date_sk IN (
            SELECT d_date_sk 
            FROM date_dim 
            WHERE d_month_seq = (SELECT MAX(d_month_seq) FROM date_dim WHERE d_year = 2023)
        )
    GROUP BY 
        sr_returning_customer_sk
),
PromotionalSales AS (
    SELECT 
        cs_bill_customer_sk,
        COUNT(DISTINCT cs_order_number) AS TotalPromotions
    FROM 
        catalog_sales cs
    JOIN 
        promotion p ON cs.cs_promo_sk = p.p_promo_sk
    WHERE 
        p.p_discount_active = 'Y'
    GROUP BY 
        cs_bill_customer_sk
)
SELECT 
    c.c_customer_id,
    COALESCE(pr.TotalPromotions, 0) AS TotalPromotions,
    COALESCE(r.TotalReturns, 0) AS TotalReturns,
    AVG(COALESCE(r.TotalReturns, 0)) OVER () AS AvgReturns,
    SUM(rs.ws_ext_sales_price) AS TotalWebSales,
    MAX(rs.ws_ext_sales_price) AS MaxWebSales,
    COUNT(DISTINCT rs.ws_order_number) AS TotalWebOrders,
    CASE 
        WHEN COALESCE(r.TotalReturns, 0) = 0 
        THEN 'No Returns' 
        ELSE 'Returned' 
    END AS ReturnStatus
FROM 
    customer c
LEFT JOIN 
    CustomerReturns r ON c.c_customer_sk = r.sr_returning_customer_sk
LEFT JOIN 
    PromotionalSales pr ON c.c_customer_sk = pr.cs_bill_customer_sk
JOIN 
    RankedSales rs ON c.c_customer_sk = rs.web_site_sk
GROUP BY 
    c.c_customer_id, 
    r.TotalReturns, 
    pr.TotalPromotions
HAVING 
    SUM(rs.ws_ext_sales_price) > (
        SELECT AVG(ws_ext_sales_price) FROM web_sales
    )
ORDER BY 
    TotalWebSales DESC NULLS LAST;
