
WITH CTE_Customer_Summary AS (
    SELECT c.c_customer_sk, 
           c.c_first_name, 
           c.c_last_name, 
           cd.cd_gender, 
           SUM(COALESCE(ss.ss_net_profit, 0)) AS total_store_profit,
           ROW_NUMBER() OVER (PARTITION BY cd.cd_gender ORDER BY SUM(COALESCE(ss.ss_net_profit, 0)) DESC) AS rank
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name, cd.cd_gender
),
CTE_Returns AS (
    SELECT cr.returning_customer_sk, 
           SUM(cr.cr_return_quantity) AS total_returned_quantity
    FROM catalog_returns cr
    GROUP BY cr.returning_customer_sk
),
Filtered_Customers AS (
    SELECT cus.c_customer_sk,
           cus.c_first_name,
           cus.c_last_name,
           cus.total_store_profit,
           COALESCE(ret.total_returned_quantity, 0) AS total_returned_quantity,
           CASE 
               WHEN cus.total_store_profit > 0 AND COALESCE(ret.total_returned_quantity, 0) > 0 
               THEN (cus.total_store_profit - (ret.total_returned_quantity * 10)) 
               ELSE cus.total_store_profit
           END AS adjusted_profit
    FROM CTE_Customer_Summary cus
    LEFT JOIN CTE_Returns ret ON cus.c_customer_sk = ret.returning_customer_sk
    WHERE cus.rank <= 10 OR COALESCE(ret.total_returned_quantity, 0) > 5
)
SELECT f.c_first_name, 
       f.c_last_name, 
       f.adjusted_profit,
       CASE 
           WHEN f.adjusted_profit IS NULL THEN 'Not Available'
           WHEN f.adjusted_profit > 1000 THEN 'High Value Customer'
           ELSE 'Regular Customer'
       END AS customer_value_status
FROM Filtered_Customers f
ORDER BY f.adjusted_profit DESC
FETCH FIRST 20 ROWS ONLY;
