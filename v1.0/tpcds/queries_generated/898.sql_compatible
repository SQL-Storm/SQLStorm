
WITH CustomerSales AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(ws.ws_order_number) AS order_count,
        MAX(d.d_date) AS last_purchase_date
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    JOIN 
        date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY 
        c.c_customer_sk, c.c_first_name, c.c_last_name
),
ReturnStats AS (
    SELECT 
        sr_customer_sk,
        COUNT(sr_ticket_number) AS return_count,
        SUM(sr_return_amt) AS total_return_amt
    FROM 
        store_returns
    GROUP BY 
        sr_customer_sk
),
AggregatedStats AS (
    SELECT 
        cs.c_customer_sk,
        cs.c_first_name,
        cs.c_last_name,
        COALESCE(cs.total_sales, 0) AS total_sales,
        COALESCE(cs.order_count, 0) AS order_count,
        COALESCE(rs.return_count, 0) AS return_count,
        COALESCE(rs.total_return_amt, 0) AS total_return_amt,
        CASE 
            WHEN COALESCE(cs.total_sales, 0) > 0 THEN 
                (COALESCE(rs.total_return_amt, 0) / NULLIF(COALESCE(cs.total_sales, 0), 0)) * 100
            ELSE 0 
        END AS return_rate_percentage,
        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COALESCE(cs.total_sales, 0)) OVER () AS median_sales
    FROM 
        CustomerSales cs
    LEFT JOIN 
        ReturnStats rs ON cs.c_customer_sk = rs.sr_customer_sk
)
SELECT 
    a.c_first_name,
    a.c_last_name,
    a.total_sales,
    a.order_count,
    a.return_count,
    a.total_return_amt,
    a.return_rate_percentage,
    CASE 
        WHEN a.total_sales > a.median_sales THEN 'Above Median'
        ELSE 'Below Median'
    END AS sales_position
FROM 
    AggregatedStats a
WHERE 
    a.total_sales > (SELECT AVG(total_sales) FROM CustomerSales)
ORDER BY 
    a.total_sales DESC;
