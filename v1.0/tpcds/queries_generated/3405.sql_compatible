
WITH SalesData AS (
    SELECT 
        ws.ws_item_sk,
        ws.ws_sales_price,
        ws.ws_quantity,
        ws.ws_net_paid,
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        ca.ca_city,
        d.d_year AS sales_year
    FROM web_sales ws
    JOIN customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
    JOIN date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    WHERE d.d_year BETWEEN 2022 AND 2023
),
AggregateSales AS (
    SELECT 
        sd.c_customer_id,
        COUNT(*) AS total_orders,
        SUM(sd.ws_net_paid) AS total_spent,
        AVG(sd.ws_sales_price) AS avg_sale_price,
        ROW_NUMBER() OVER (PARTITION BY sd.c_customer_id ORDER BY SUM(sd.ws_net_paid) DESC) AS rank
    FROM SalesData sd
    GROUP BY sd.c_customer_id
),
ReturnData AS (
    SELECT 
        wr.wr_returning_customer_sk,
        SUM(wr.wr_return_amt) AS total_returned,
        COUNT(*) AS return_count
    FROM web_returns wr
    GROUP BY wr.wr_returning_customer_sk
),
CustomerSummary AS (
    SELECT 
        as.c_customer_id,
        as.total_orders,
        as.total_spent,
        COALESCE(rd.total_returned, 0) AS total_returned,
        (as.total_spent - COALESCE(rd.total_returned, 0)) AS net_spending,
        CASE 
            WHEN as.total_spent > 1000 THEN 'High'
            WHEN as.total_spent BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS spending_category
    FROM AggregateSales as
    LEFT JOIN ReturnData rd ON as.c_customer_id = rd.wr_returning_customer_sk
)
SELECT 
    cs.c_customer_id,
    cs.total_orders,
    cs.total_spent,
    cs.total_returned,
    cs.net_spending,
    cs.spending_category,
    ROW_NUMBER() OVER (ORDER BY cs.net_spending DESC) AS customer_rank
FROM CustomerSummary cs
WHERE cs.net_spending > 0
ORDER BY cs.customer_rank
FETCH FIRST 100 ROWS ONLY;
