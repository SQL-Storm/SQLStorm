
WITH
  RankedSales AS (
    SELECT
      ws.web_site_sk,
      ws.web_name,
      SUM(ws.ws_net_paid_inc_tax) AS total_sales,
      ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY SUM(ws.ws_net_paid_inc_tax) DESC) AS sales_rank
    FROM
      web_sales ws
    JOIN
      customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    WHERE
      c.c_birth_year IS NOT NULL AND
      (c.c_birth_month IS NULL OR c.c_birth_month BETWEEN 1 AND 6)
    GROUP BY
      ws.web_site_sk, ws.web_name
  ), 
  TopWebsites AS (
    SELECT
      web_site_sk,
      web_name
    FROM
      RankedSales
    WHERE
      sales_rank <= 5
  ),
  ItemSales AS (
    SELECT
      i.i_item_id,
      COALESCE(SUM(ws.ws_quantity), 0) AS total_quantity_sold,
      COUNT(DISTINCT ws.ws_order_number) AS total_orders,
      MAX(ws.ws_sales_price) AS max_sales_price
    FROM
      item i
    LEFT JOIN
      web_sales ws ON i.i_item_sk = ws.ws_item_sk
    GROUP BY
      i.i_item_id
  ),
  CustomerReturns AS (
    SELECT
      sr.customer_sk,
      COUNT(sr.sr_ticket_number) AS total_returns,
      SUM(sr.sr_return_amt_inc_tax) AS total_returned_amount
    FROM
      store_returns sr
    GROUP BY
      sr.customer_sk
  )
SELECT
  t.web_name,
  COUNT(DISTINCT it.i_item_id) AS unique_items_sold,
  SUM(its.total_quantity_sold) AS total_units_sold,
  SUM(cr.total_returns) AS total_returns,
  CASE
    WHEN SUM(its.total_orders) = 0 THEN NULL
    ELSE SUM(cr.total_returned_amount) / NULLIF(SUM(its.total_orders), 0)
  END AS avg_return_value_per_order,
  MAX(CASE WHEN its.total_quantity_sold > 100 THEN its.max_sales_price END) AS highest_price_high_volume_item
FROM
  TopWebsites t
JOIN
  ItemSales its ON its.total_quantity_sold > 0
LEFT JOIN
  CustomerReturns cr ON cr.customer_sk = t.web_site_sk
GROUP BY
  t.web_name
HAVING
  SUM(its.total_quantity_sold) > (SELECT AVG(total_quantity_sold) FROM ItemSales WHERE total_orders > 0)
ORDER BY
  total_units_sold DESC
FETCH FIRST 10 ROWS ONLY;
