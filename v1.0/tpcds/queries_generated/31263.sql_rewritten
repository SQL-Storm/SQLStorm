WITH RECURSIVE item_hierarchy AS (
    SELECT 
        i.i_item_sk,
        i.i_item_id,
        i.i_current_price,
        1 as level
    FROM item i
    WHERE i.i_rec_start_date <= cast('2002-10-01' as date) AND (i.i_rec_end_date IS NULL OR i.i_rec_end_date > cast('2002-10-01' as date))

    UNION ALL

    SELECT 
        ih.i_item_sk,
        ih.i_item_id,
        ih.i_current_price,
        ih.level + 1
    FROM item_hierarchy ih
    JOIN item i ON ih.i_item_sk = i.i_item_sk
    WHERE i.i_rec_start_date <= cast('2002-10-01' as date) AND (i.i_rec_end_date IS NULL OR i.i_rec_end_date > cast('2002-10-01' as date))
),

customer_analysis AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        COUNT(DISTINCT sr_ticket_number) AS total_returns,
        AVG(ws.ws_net_paid_inc_tax) AS avg_spend
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    LEFT JOIN web_sales ws ON c.c_customer_sk = ws.ws_ship_customer_sk
    GROUP BY 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status
),

final_analysis AS (
    SELECT
        ca.c_customer_sk,
        ca.c_first_name,
        ca.c_last_name,
        ca.cd_gender,
        ca.cd_marital_status,
        COALESCE(ca.total_returns, 0) AS total_returns,
        COALESCE(ca.avg_spend, 0) AS avg_spend,
        ih.i_item_id,
        ih.i_current_price,
        RANK() OVER (PARTITION BY ca.c_customer_sk ORDER BY COALESCE(ca.avg_spend, 0) DESC) AS spend_rank
    FROM customer_analysis ca
    JOIN item_hierarchy ih ON ih.i_item_sk IN (SELECT cs_item_sk FROM catalog_sales WHERE cs_order_number IN (SELECT ss_ticket_number FROM store_sales))
)

SELECT 
    f.c_customer_sk,
    f.c_first_name,
    f.c_last_name,
    f.cd_gender,
    f.cd_marital_status,
    f.total_returns,
    f.avg_spend,
    f.i_item_id,
    f.i_current_price,
    CASE 
        WHEN f.spend_rank = 1 THEN 'Top Spender'
        ELSE 'Regular Spender' 
    END AS spender_category
FROM final_analysis f
WHERE f.total_returns > 0 
  AND f.avg_spend > (SELECT AVG(avg_spend) FROM customer_analysis)
ORDER BY f.total_returns DESC, f.avg_spend DESC;