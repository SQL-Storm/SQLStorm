
WITH customer_orders AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS order_count,
        MAX(ws.ws_ship_date_sk) AS last_order_date,
        AVG(COALESCE(ws.ws_sales_price, 0)) AS avg_order_value
    FROM customer c
    INNER JOIN web_sales ws ON c.c_customer_sk = ws.ws_ship_customer_sk
    GROUP BY c.c_customer_sk, c.c_first_name, c.c_last_name
),
top_customers AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        co.total_sales,
        co.order_count,
        co.last_order_date,
        co.avg_order_value,
        ROW_NUMBER() OVER (ORDER BY co.total_sales DESC) AS rn
    FROM customer_orders co
    INNER JOIN customer c ON c.c_customer_sk = co.c_customer_sk
),
return_summary AS (
    SELECT
        sr.s_store_sk,
        COUNT(*) AS total_returns,
        SUM(sr.sr_return_amt) AS total_returned_amount,
        AVG(sr.sr_return_quantity) AS avg_return_qty
    FROM store_returns sr
    GROUP BY sr.s_store_sk
)
SELECT 
    tc.c_first_name || ' ' || tc.c_last_name AS full_name,
    tc.total_sales,
    tc.order_count,
    tc.last_order_date,
    CASE 
        WHEN tr.total_returns IS NULL THEN 'No Returns'
        ELSE CAST(tr.total_returns AS VARCHAR) 
    END AS total_returns,
    COALESCE(tr.total_returned_amount, 0) AS total_returned_amount,
    COALESCE(tr.avg_return_qty, 0) AS avg_return_quantity,
    CASE 
        WHEN tc.last_order_date IS NOT NULL AND tc.last_order_date < (
            SELECT MAX(d.d_date) 
            FROM date_dim d 
            WHERE d.d_current_year = 1
        ) THEN 'Inactive'
        ELSE 'Active'
    END AS customer_status
FROM top_customers tc
LEFT JOIN return_summary tr ON tr.s_store_sk = (SELECT MAX(s.s_store_sk) FROM store s)
WHERE tc.rn <= 10;
