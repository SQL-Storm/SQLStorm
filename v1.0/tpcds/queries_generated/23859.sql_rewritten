WITH CustomerReturns AS (
    SELECT 
        sr_customer_sk,
        COUNT(DISTINCT sr_ticket_number) AS total_returns,
        SUM(sr_return_quantity) AS total_returned_quantity,
        SUM(sr_return_amt_inc_tax) AS total_returned_amt
    FROM store_returns
    GROUP BY sr_customer_sk
),
CustomerDemographics AS (
    SELECT 
        c.c_customer_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        COALESCE(hd.hd_buy_potential, 'UNKNOWN') AS buy_potential,
        cd.cd_dep_count
    FROM customer c
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
),
RecentDates AS (
    SELECT 
        d.d_date AS recent_date,
        d.d_month_seq,
        DENSE_RANK() OVER (ORDER BY d.d_date DESC) AS rank
    FROM date_dim d 
    WHERE d.d_date >= cast('2002-10-01' as date) - INTERVAL '1' YEAR
),
SalesData AS (
    SELECT 
        ws.ws_bill_customer_sk,
        SUM(ws.ws_net_profit) AS total_net_profit,
        AVG(ws.ws_net_paid_inc_tax) AS avg_net_paid_inc_tax
    FROM web_sales ws
    JOIN RecentDates rd ON ws.ws_sold_date_sk = rd.d_date_sk
    GROUP BY ws.ws_bill_customer_sk
)
SELECT 
    cd.c_customer_sk,
    cd.cd_gender,
    cd.cd_marital_status,
    cr.total_returns,
    cr.total_returned_quantity,
    cr.total_returned_amt,
    sd.total_net_profit,
    sd.avg_net_paid_inc_tax,
    CASE 
        WHEN cr.total_returned_amt IS NULL THEN 'No Returns'
        WHEN cr.total_returns = 0 THEN 'No Returns'
        ELSE 'Returned'
    END AS return_status,
    CASE 
        WHEN cd.cd_purchase_estimate > 1000 THEN 'High Value'
        WHEN cd.cd_purchase_estimate BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value_segment
FROM CustomerDemographics cd
LEFT JOIN CustomerReturns cr ON cd.c_customer_sk = cr.sr_customer_sk
LEFT JOIN SalesData sd ON cd.c_customer_sk = sd.ws_bill_customer_sk
WHERE (cd.cd_gender = 'M' OR cd.cd_gender IS NULL)
AND (cd.cd_marital_status IS NOT NULL AND cd.cd_marital_status <> 'S')
AND (cr.total_returns > 0 OR cr.total_returns IS NULL)
ORDER BY cd.c_customer_sk, sd.total_net_profit DESC
FETCH FIRST 100 ROWS ONLY;