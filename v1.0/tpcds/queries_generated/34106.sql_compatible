
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        ss.store_sk,
        ss.item_sk,
        ss.ticket_number,
        ss.sales_price,
        ss.ext_discount_amt,
        ss.net_paid,
        1 AS level
    FROM 
        store_sales ss
    WHERE 
        ss.sold_date_sk = (SELECT MAX(sold_date_sk) FROM store_sales)

    UNION ALL

    SELECT 
        sh.store_sk,
        sh.item_sk,
        sh.ticket_number,
        sh.sales_price,
        sh.ext_discount_amt,
        sh.net_paid,
        sh_on.level + 1
    FROM 
        store_sales sh
    INNER JOIN sales_hierarchy sh_on ON sh.store_sk = sh_on.store_sk AND sh.item_sk = sh_on.item_sk
    WHERE 
        sh.ticket_number <> sh_on.ticket_number
)
SELECT 
    c.c_customer_id,
    SUM(CASE WHEN cd.cd_gender = 'F' THEN sh.sales_price ELSE 0 END) AS total_female_sales,
    SUM(CASE WHEN cd.cd_gender = 'M' THEN sh.sales_price ELSE 0 END) AS total_male_sales,
    COUNT(DISTINCT sh.ticket_number) AS distinct_sales,
    AVG(sh.net_paid) AS avg_net_paid,
    COUNT(COALESCE(sr.return_quantity, 0)) AS total_returns,
    COUNT(CASE WHEN cd.cd_marital_status = 'M' THEN 1 END) AS married_customers,
    COUNT(CASE WHEN cd.cd_marital_status IS NULL THEN 1 END) AS unknown_marital_status
FROM 
    sales_hierarchy sh
LEFT JOIN 
    customer c ON c.c_customer_sk = (SELECT MAX(c_customer_sk) FROM customer)
LEFT JOIN 
    customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
LEFT JOIN 
    store_returns sr ON sr.sr_ticket_number = sh.ticket_number
WHERE 
    sh.sales_price > 20 
    OR sh.ext_discount_amt > 5
GROUP BY 
    c.c_customer_id
ORDER BY 
    total_female_sales DESC, total_male_sales ASC
FETCH FIRST 100 ROWS ONLY;
