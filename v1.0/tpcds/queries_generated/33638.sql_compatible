
WITH RECURSIVE SalesCTE AS (
    SELECT
        cs.order_number,
        cs.item_sk,
        cs.sales_price,
        cs.net_profit,
        1 AS level
    FROM
        catalog_sales cs
    WHERE
        cs.sold_date_sk = (SELECT MAX(sold_date_sk) FROM catalog_sales)

    UNION ALL

    SELECT
        cs.order_number,
        cs.item_sk,
        cs.sales_price * 0.9 AS sales_price, 
        cs.net_profit * 0.95 AS net_profit, 
        s.level + 1
    FROM
        SalesCTE s
    JOIN
        catalog_sales cs ON s.item_sk = cs.item_sk AND s.order_number <> cs.order_number
    WHERE
        s.level < 5
), 
CustomerWebSales AS (
    SELECT
        c.c_customer_sk,
        c.c_first_name || ' ' || c.c_last_name AS customer_name,
        ws.ws_order_number,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(ws.ws_order_number) AS order_count
    FROM
        web_sales ws
    JOIN
        customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    GROUP BY
        c.c_customer_sk, c.c_first_name, c.c_last_name, ws.ws_order_number
    HAVING 
        SUM(ws.ws_ext_sales_price) > 1000
),
TopSales AS (
    SELECT
        customer_name,
        total_sales,
        RANK() OVER (ORDER BY total_sales DESC) AS sales_rank
    FROM
        CustomerWebSales
    WHERE 
        total_sales IS NOT NULL
),
ItemSales AS (
    SELECT 
        i.i_item_id,
        i.i_product_name,
        SUM(ss.ss_net_paid) AS total_sold
    FROM 
        item i
    LEFT JOIN 
        store_sales ss ON i.i_item_sk = ss.ss_item_sk 
    GROUP BY 
        i.i_item_id, i.i_product_name
)

SELECT
    ts.customer_name,
    ts.total_sales,
    ts.sales_rank,
    is.i_item_id AS item_id,
    is.i_product_name AS product_name,
    is.total_sold,
    COALESCE(salesCTE.sales_price, 0) AS expected_sales_price,
    COALESCE(salesCTE.net_profit, 0) AS expected_net_profit
FROM 
    TopSales ts
LEFT JOIN 
    ItemSales is ON ts.total_sales > 2000 
LEFT JOIN 
    SalesCTE salesCTE ON salesCTE.level = 2
WHERE 
    ts.sales_rank <= 10
ORDER BY 
    ts.total_sales DESC, is.total_sold ASC;
