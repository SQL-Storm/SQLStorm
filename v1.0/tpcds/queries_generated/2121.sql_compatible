
WITH ranked_sales AS (
    SELECT 
        ws_ship_date_sk,
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_paid) AS total_net_paid,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_paid) DESC) AS rnk
    FROM web_sales
    GROUP BY ws_ship_date_sk, ws_item_sk
),
customer_activity AS (
    SELECT 
        c.c_customer_id,
        COUNT(DISTINCT ws_order_number) AS total_orders,
        SUM(ws_net_paid) AS total_spent,
        MAX(ws_ship_date_sk) AS last_order_date
    FROM customer c
    JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    WHERE c.c_birth_year BETWEEN 1980 AND 1990
    GROUP BY c.c_customer_id
),
top_items AS (
    SELECT 
        item.i_item_id,
        item.i_product_name,
        item.i_current_price,
        rs.total_quantity,
        rs.total_net_paid
    FROM item
    JOIN ranked_sales rs ON item.i_item_sk = rs.ws_item_sk 
    WHERE rs.rnk <= 10
),
return_summary AS (
    SELECT 
        wr_item_sk,
        COUNT(*) AS returns_count,
        SUM(wr_return_quantity) AS total_returned_qty
    FROM web_returns
    GROUP BY wr_item_sk
)
SELECT 
    ca.c_customer_id,
    ta.i_item_id,
    ta.i_product_name,
    ta.total_quantity,
    ta.total_net_paid,
    COALESCE(re.returns_count, 0) AS returns_count,
    COALESCE(re.total_returned_qty, 0) AS total_returned_qty,
    CASE 
        WHEN ca.total_orders > 5 THEN 'Gold'
        WHEN ca.total_orders BETWEEN 3 AND 5 THEN 'Silver'
        ELSE 'Bronze'
    END AS customer_tier
FROM customer_activity ca
JOIN top_items ta ON ca.total_spent >= ta.total_net_paid
LEFT JOIN return_summary re ON ta.i_item_id = re.wr_item_sk
WHERE ca.last_order_date = (SELECT d_date FROM date_dim WHERE d_year = 2023 AND d_moy = 8 LIMIT 1)
ORDER BY ca.total_spent DESC, ta.total_quantity DESC;
