
WITH RECURSIVE income_ranges AS (
    SELECT 
        ib_income_band_sk, 
        ib_lower_bound, 
        ib_upper_bound, 
        ROW_NUMBER() OVER (ORDER BY ib_income_band_sk) AS row_num
    FROM 
        income_band
    WHERE 
        ib_lower_bound IS NOT NULL AND ib_upper_bound IS NOT NULL
),
daily_sales AS (
    SELECT 
        d.d_date AS sales_date,
        SUM(ws.ws_sales_price) AS total_sales,
        COUNT(DISTINCT ws.ws_order_number) AS unique_orders,
        AVG(ws.ws_net_profit) AS avg_profit
    FROM 
        web_sales ws
    JOIN 
        date_dim d ON ws.ws_sold_date_sk = d.d_date_sk
    GROUP BY 
        d.d_date
),
customer_stats AS (
    SELECT 
        c.c_customer_sk,
        CASE 
            WHEN cd.cd_gender = 'M' THEN 'Male'
            WHEN cd.cd_gender = 'F' THEN 'Female'
            ELSE 'Unknown'
        END AS gender,
        cd.cd_marital_status,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_net_profit) AS total_profit
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        web_sales ws ON ws.ws_bill_customer_sk = c.c_customer_sk
    GROUP BY 
        c.c_customer_sk, cd.cd_gender, cd.cd_marital_status
),
sales_summary AS (
    SELECT 
        c.c_customer_sk,
        SUM(ws.ws_sales_price) AS total_spent,
        SUM(COALESCE(sr.sr_return_amt, 0)) AS total_returns,
        (SUM(ws.ws_sales_price) - SUM(COALESCE(sr.sr_return_amt, 0))) AS net_spent,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY COUNT(ws.ws_order_number) DESC) AS order_rank
    FROM 
        customer c
    LEFT JOIN 
        web_sales ws ON ws.ws_bill_customer_sk = c.c_customer_sk
    LEFT JOIN 
        store_returns sr ON sr.sr_customer_sk = c.c_customer_sk
    GROUP BY 
        c.c_customer_sk
)
SELECT 
    c.c_customer_id,
    cs.total_orders,
    cs.total_profit,
    COALESCE(ir.ib_lower_bound, 0) AS income_lower_bound,
    COALESCE(ir.ib_upper_bound, 0) AS income_upper_bound,
    ds.sales_date,
    ds.total_sales,
    ds.unique_orders,
    ds.avg_profit,
    ss.total_spent,
    ss.total_returns,
    ss.net_spent,
    CASE 
        WHEN ss.net_spent > 1000 THEN 'High Value'
        WHEN ss.net_spent BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value
FROM 
    customer_stats cs
JOIN 
    sales_summary ss ON cs.c_customer_sk = ss.c_customer_sk
JOIN 
    daily_sales ds ON ds.sales_date = (SELECT MAX(sales_date) FROM daily_sales) 
LEFT JOIN 
    income_ranges ir ON ir.row_num = (SELECT MAX(row_num) FROM income_ranges WHERE ss.total_spent BETWEEN ir.ib_lower_bound AND ir.ib_upper_bound)
WHERE 
    cs.total_orders > 5
ORDER BY 
    customer_value DESC, cs.total_profit DESC
LIMIT 20;
