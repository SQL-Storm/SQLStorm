
WITH RankedSales AS (
    SELECT 
        ws.ws_order_number,
        ws.ws_item_sk,
        ws.ws_quantity,
        ws.ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_order_number ORDER BY ws.ws_net_profit DESC) AS sales_rank,
        c.c_first_name, 
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status
    FROM web_sales ws
    JOIN customer c ON ws.ws_bill_customer_sk = c.c_customer_sk
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE ws.ws_sales_price IS NOT NULL
),
SalesSummary AS (
    SELECT 
        rs.ws_order_number,
        SUM(rs.ws_quantity) AS total_quantity,
        SUM(rs.ws_sales_price) AS total_sales_price,
        AVG(CASE WHEN rs.cd_gender = 'M' THEN rs.ws_sales_price END) AS avg_male_sales,
        AVG(CASE WHEN rs.cd_gender = 'F' THEN rs.ws_sales_price END) AS avg_female_sales,
        COUNT(DISTINCT rs.c_first_name) AS unique_customers
    FROM RankedSales rs
    WHERE rs.sales_rank <= 5  
    GROUP BY rs.ws_order_number
)
SELECT 
    ss.ws_order_number,
    ss.total_quantity,
    ss.total_sales_price,
    ss.avg_male_sales,
    ss.avg_female_sales,
    ss.unique_customers,
    CASE 
        WHEN ss.total_sales_price >= 1000 THEN 'High Value Order'
        WHEN ss.total_sales_price >= 500 THEN 'Medium Value Order'
        ELSE 'Low Value Order'
    END AS order_value_category
FROM SalesSummary ss
LEFT JOIN store s ON s.s_store_sk = (
    SELECT MIN(sss.s_store_sk)
    FROM store_sales sss
    WHERE sss.ss_order_number = ss.ws_order_number
)
ORDER BY ss.total_sales_price DESC, ss.ws_order_number
LIMIT 10;
