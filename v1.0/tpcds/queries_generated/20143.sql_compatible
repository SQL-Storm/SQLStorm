
WITH RECURSIVE sales_summary AS (
    SELECT 
        ws.ws_item_sk,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN 2450810 AND 2450815 
    GROUP BY 
        ws.ws_item_sk
),
item_details AS (
    SELECT 
        i.i_item_id,
        i.i_item_desc,
        COALESCE(i.i_current_price, 0) AS current_price,
        (SELECT AVG(iss.total_sales) FROM sales_summary iss WHERE iss.ws_item_sk = i.i_item_sk) AS avg_sales
    FROM 
        item i
), 
filtered_items AS (
    SELECT 
        id.i_item_id,
        id.i_item_desc,
        id.current_price,
        CASE 
            WHEN id.current_price > (SELECT AVG(current_price) FROM item_details) THEN 'Premium' 
            ELSE 'Standard' 
        END AS price_category,
        id.avg_sales
    FROM 
        item_details id
    WHERE 
        id.avg_sales IS NOT NULL
        AND id.avg_sales <> 0
), 
warehouse_info AS (
    SELECT 
        w.w_warehouse_name, 
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_net_profit) AS total_profit
    FROM 
        warehouse w
    LEFT JOIN 
        web_sales ws ON w.w_warehouse_sk = ws.ws_warehouse_sk
    GROUP BY 
        w.w_warehouse_name
)
SELECT 
    fi.i_item_id,
    fi.i_item_desc,
    fi.price_category,
    wi.w_warehouse_name,
    wi.total_orders,
    wi.total_profit
FROM 
    filtered_items fi
FULL OUTER JOIN 
    warehouse_info wi ON fi.avg_sales > (SELECT AVG(avg_sales) FROM filtered_items) 
WHERE 
    fi.avg_sales IS NOT NULL OR wi.total_profit IS NOT NULL
ORDER BY 
    fi.i_item_id, 
    wi.w_warehouse_name;
