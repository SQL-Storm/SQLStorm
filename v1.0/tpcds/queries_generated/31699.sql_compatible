
WITH RECURSIVE ProductHierarchy AS (
    SELECT i_item_sk, i_item_id, i_item_desc, i_current_price, i_brand, 1 AS level
    FROM item
    WHERE i_current_price IS NOT NULL
    UNION ALL
    SELECT i.i_item_sk, i.i_item_id, i.i_item_desc, i.i_current_price, ph.i_brand, ph.level + 1
    FROM item i
    JOIN ProductHierarchy ph ON i.i_brand = ph.i_brand AND ph.level < 3
),
SalesData AS (
    SELECT 
        ws.ws_sold_date_sk,
        ws.ws_quantity,
        ws.ws_sales_price,
        ws.ws_ext_sales_price,
        c.c_customer_id,
        cd.cd_gender,
        SUM(ws.ws_ext_sales_price) OVER (PARTITION BY c.c_customer_id) AS total_spent
    FROM web_sales ws
    JOIN customer c ON ws.ws_ship_customer_sk = c.c_customer_sk
    JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE ws.ws_sold_date_sk > (SELECT MAX(d.d_date_sk) FROM date_dim d WHERE d.d_year = 2022)
),
ReturnData AS (
    SELECT 
        cr.cr_order_number,
        SUM(cr.cr_return_quantity) AS total_returns,
        COUNT(DISTINCT cr.cr_returning_customer_sk) AS unique_returners
    FROM catalog_returns cr
    GROUP BY cr.cr_order_number
),
PerformanceBenchmark AS (
    SELECT 
        ph.i_item_id,
        ph.i_item_desc,
        COUNT(sd.ws_quantity) AS total_sales,
        SUM(sd.ws_ext_sales_price) AS total_sales_value,
        COALESCE(ROUND(AVG(sd.total_spent), 2), 0) AS avg_customer_spent,
        COALESCE(SUM(rd.total_returns), 0) AS total_returns,
        COALESCE(ROUND(SUM(rd.unique_returners) / NULLIF(COUNT(sd.ws_quantity), 0), 2) * 100, 0) AS return_rate
    FROM ProductHierarchy ph
    LEFT JOIN SalesData sd ON ph.i_item_id = sd.c_customer_id
    LEFT JOIN ReturnData rd ON sd.ws_sold_date_sk = rd.cr_order_number
    GROUP BY ph.i_item_id, ph.i_item_desc
    HAVING COUNT(sd.ws_quantity) > 100
)
SELECT * 
FROM PerformanceBenchmark
ORDER BY return_rate DESC, total_sales_value DESC;
