
WITH RECURSIVE SalesCTE AS (
    SELECT
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_sales_price) DESC) AS sales_rank
    FROM
        web_sales
    GROUP BY
        ws_item_sk
),
CustomerCTE AS (
    SELECT
        c_customer_sk,
        COALESCE(cd_gender, 'U') AS gender,
        cd_purchase_estimate,
        CASE 
            WHEN cd_credit_rating IS NULL THEN 'Unknown'
            WHEN cd_credit_rating = 'Low' THEN 'Potential Risk'
            ELSE 'Good Standing'
        END AS credit_status
    FROM
        customer
    LEFT JOIN customer_demographics ON customer.c_current_cdemo_sk = customer_demographics.cd_demo_sk
),
ReturnStats AS (
    SELECT
        sr_item_sk,
        SUM(sr_return_quantity) AS total_returned,
        SUM(sr_return_amt_inc_tax) AS total_return_amount
    FROM
        store_returns
    GROUP BY
        sr_item_sk
)
SELECT 
    i.i_item_id,
    i.i_item_desc,
    COALESCE(s.total_quantity, 0) AS total_sold,
    COALESCE(s.total_sales, 0) AS total_sales,
    COALESCE(r.total_returned, 0) AS total_returns,
    COALESCE(r.total_return_amount, 0) AS total_return_amount,
    c.gender,
    c.credit_status
FROM 
    item i
LEFT JOIN SalesCTE s ON i.i_item_sk = s.ws_item_sk
LEFT JOIN ReturnStats r ON i.i_item_sk = r.sr_item_sk
LEFT JOIN CustomerCTE c ON c.c_customer_sk IN (
    SELECT 
        ws_bill_customer_sk 
    FROM 
        web_sales 
    WHERE 
        ws_item_sk = i.i_item_sk
)
WHERE 
    (COALESCE(s.total_sales, 0) > 1000 OR COALESCE(r.total_return_amount, 0) > 500)
    AND (c.credit_status IS NULL OR c.credit_status != 'Potential Risk')
ORDER BY 
    COALESCE(s.total_sales, 0) DESC, 
    COALESCE(r.total_returned, 0) ASC
FETCH FIRST 10 ROWS ONLY;
