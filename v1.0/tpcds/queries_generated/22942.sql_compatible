
WITH RECURSIVE IncomeDistribution AS (
    SELECT 
        c.c_customer_sk,
        c.c_first_name,
        c.c_last_name,
        hd.hd_income_band_sk,
        CASE 
            WHEN hd.hd_income_band_sk IS NULL THEN 'Unknown'
            WHEN hd.hd_income_band_sk IN (1, 2) THEN 'Low Income'
            WHEN hd.hd_income_band_sk IN (3, 4) THEN 'Middle Income'
            ELSE 'High Income'
        END AS income_band,
        ROW_NUMBER() OVER (PARTITION BY hd.hd_income_band_sk ORDER BY c.c_last_name) AS income_rank
    FROM customer c
    LEFT JOIN household_demographics hd ON c.c_current_hdemo_sk = hd.hd_demo_sk
),
CustomerReturnStats AS (
    SELECT 
        c.c_customer_sk,
        COUNT(CASE WHEN sr.sr_return_quantity > 0 THEN 1 END) AS total_returns,
        SUM(sr.sr_return_amt_inc_tax) AS total_return_value,
        AVG(sr.sr_return_quantity) AS average_return_quantity,
        RANK() OVER (ORDER BY SUM(sr.sr_return_amt_inc_tax) DESC) AS return_rank
    FROM customer c
    LEFT JOIN store_returns sr ON c.c_customer_sk = sr.sr_customer_sk
    GROUP BY c.c_customer_sk
),
HighReturnCustomers AS (
    SELECT 
        cr.c_customer_sk,
        cr.total_returns,
        cr.total_return_value,
        ir.income_band,
        COALESCE(ir.income_rank, 0) AS rank_with_income
    FROM CustomerReturnStats cr
    JOIN IncomeDistribution ir ON cr.c_customer_sk = ir.c_customer_sk
    WHERE cr.total_returns > 0
),
FinalStats AS (
    SELECT 
        hrc.c_customer_sk, 
        hrc.total_returns,
        hrc.total_return_value,
        hrc.income_band,
        hrc.rank_with_income,
        CASE 
            WHEN hrc.total_return_value > 500 THEN 'High Value'
            WHEN hrc.total_return_value BETWEEN 200 AND 500 THEN 'Medium Value'
            ELSE 'Low Value'
        END AS customer_value_category
    FROM HighReturnCustomers hrc
)
SELECT 
    f.c_customer_sk,
    f.total_returns,
    f.total_return_value,
    f.income_band,
    f.rank_with_income,
    f.customer_value_category
FROM FinalStats f
WHERE f.customer_value_category = 'High Value'
ORDER BY f.total_return_value DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY
UNION ALL
SELECT 
    NULL AS c_customer_sk,
    COUNT(*) AS total_returns,
    SUM(sr.sr_return_amt_inc_tax) AS total_return_value,
    NULL AS income_band,
    NULL AS rank_with_income,
    'Aggregate Value' AS customer_value_category
FROM store_returns sr
WHERE sr.sr_return_quantity < 0;
