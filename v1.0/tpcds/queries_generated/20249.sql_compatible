
WITH customer_data AS (
    SELECT 
        c.c_customer_sk,
        c.c_customer_id,
        COALESCE(cd.cd_gender, 'UNKNOWN') AS gender,
        cd.cd_marital_status,
        COALESCE(cd.cd_income_band_sk, 0) AS income_band,
        cd.cd_purchase_estimate,
        ROW_NUMBER() OVER (PARTITION BY cd.cd_marital_status ORDER BY cd.cd_purchase_estimate DESC) AS rank
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
top_customers AS (
    SELECT 
        c.c_customer_id,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        DENSE_RANK() OVER (ORDER BY SUM(ws.ws_ext_sales_price) DESC) AS sales_rank
    FROM 
        customer c
    JOIN 
        web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY 
        c.c_customer_id
),
returns_summary AS (
    SELECT
        sr.customer_sk,
        COUNT(sr.ticket_number) AS total_returns,
        SUM(sr.return_amt) AS total_return_amount
    FROM 
        store_returns sr
    GROUP BY 
        sr.customer_sk
)
SELECT 
    cd.c_customer_id,
    cd.gender,
    cd.marital_status,
    COALESCE(rb.total_returns, 0) AS total_returns,
    COALESCE(rb.total_return_amount, 0.00) AS total_return_amount,
    CASE 
        WHEN tc.total_sales IS NULL THEN 'NO SALES'
        WHEN tc.total_sales > 1000 THEN 'HIGH SPENDER'
        ELSE 'LOW SPENDER'
    END AS spending_category,
    cd.rank
FROM 
    customer_data cd
LEFT JOIN 
    top_customers tc ON cd.c_customer_id = tc.c_customer_id
LEFT JOIN 
    returns_summary rb ON cd.c_customer_sk = rb.customer_sk
WHERE 
    (cd.gender = 'F' OR cd.marital_status IS NULL)
    AND (cd.income_band BETWEEN 1 AND 5 OR cd.income_band IS NULL)
    AND EXISTS (
        SELECT 1
        FROM date_dim d
        WHERE d.d_year = (SELECT MAX(d_year) FROM date_dim)
        AND d.d_current_year = 'Y'
    )
ORDER BY 
    cd.rank ASC, tc.total_sales DESC;
