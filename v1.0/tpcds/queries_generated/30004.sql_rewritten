WITH RECURSIVE SalesHierarchy AS (
    SELECT cs_bill_customer_sk AS customer_sk, 
           SUM(cs_net_paid) AS total_sales,
           1 AS level
    FROM catalog_sales
    GROUP BY cs_bill_customer_sk
    UNION ALL
    SELECT c.c_customer_sk, 
           sh.total_sales * 1.15 AS total_sales,  
           h.level + 1
    FROM customer c
    JOIN SalesHierarchy sh ON c.c_current_cdemo_sk = sh.customer_sk
    WHERE h.level < 5
),
RankedSales AS (
    SELECT customer_sk, 
           total_sales,
           RANK() OVER (ORDER BY total_sales DESC) AS sales_rank
    FROM SalesHierarchy
),
FilteredSales AS (
    SELECT r.customer_sk, 
           r.total_sales,
           cd.cd_gender,
           cd.cd_marital_status,
           COALESCE(c.c_last_name, 'Unknown') AS customer_last_name,
           CASE 
               WHEN r.total_sales IS NULL THEN '0.00'
               ELSE ROUND(r.total_sales, 2)
           END AS formatted_sales
    FROM RankedSales r
    LEFT JOIN customer_demographics cd ON cd.cd_demo_sk = r.customer_sk
    LEFT JOIN customer c ON c.c_customer_sk = r.customer_sk
    WHERE r.sales_rank <= 100
)
SELECT f.customer_sk, 
       f.total_sales,
       f.cd_gender,
       f.cd_marital_status,
       f.customer_last_name,
       f.formatted_sales,
       d.d_year,
       d.d_quarter_seq,
       string_agg(CONCAT(i.i_item_desc, ': ', ROUND(cs.cs_sales_price, 2)) SEPARATOR ', ') AS purchased_items
FROM FilteredSales f
LEFT JOIN web_sales ws ON ws.ws_bill_customer_sk = f.customer_sk
LEFT JOIN item i ON i.i_item_sk = ws.ws_item_sk
LEFT JOIN date_dim d ON d.d_date_sk = ws.ws_sold_date_sk
LEFT JOIN catalog_sales cs ON cs.cs_bill_customer_sk = f.customer_sk
WHERE d.d_year = 2001
GROUP BY f.customer_sk, f.total_sales, f.cd_gender, f.cd_marital_status, f.customer_last_name, d.d_year, d.d_quarter_seq
HAVING SUM(ws.ws_quantity) > 0
ORDER BY f.total_sales DESC;