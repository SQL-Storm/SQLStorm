
WITH RankedSales AS (
    SELECT
        ws_order_number,
        ws_item_sk,
        ws_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY ws_sales_price DESC) AS rank_sales,
        SUM(ws_sales_price) OVER (PARTITION BY ws_item_sk) AS total_sales,
        COUNT(ws_order_number) OVER (PARTITION BY ws_item_sk) AS sales_count
    FROM web_sales
),
FilteredSales AS (
    SELECT
        rs.ws_order_number,
        rs.ws_item_sk,
        rs.ws_sales_price,
        rs.total_sales,
        rs.sales_count
    FROM RankedSales rs
    WHERE rs.rank_sales <= 3
),
CustomerReturns AS (
    SELECT
        cr.returning_customer_sk,
        SUM(cr.cr_return_amount) AS total_return,
        COUNT(cr.cr_order_number) AS return_count
    FROM catalog_returns cr
    GROUP BY cr.returning_customer_sk
),
FinalJoin AS (
    SELECT
        cs.c_customer_id,
        fs.ws_item_sk,
        fs.total_sales,
        fs.sales_count,
        COALESCE(cr.total_return, 0) AS total_return,
        CASE 
            WHEN cs.c_preferred_cust_flag = 'Y' THEN 'Preferred'
            ELSE 'Standard'
        END AS customer_type
    FROM customer cs
    LEFT JOIN FilteredSales fs ON cs.c_customer_sk = fs.ws_item_sk
    LEFT JOIN CustomerReturns cr ON cs.c_customer_sk = cr.returning_customer_sk
)
SELECT 
    fj.customer_type,
    fj.ws_item_sk,
    SUM(fj.total_sales) AS aggregated_sales,
    AVG(fj.total_return) AS avg_return,
    COUNT(DISTINCT fj.ws_order_number) AS unique_orders,
    COUNT(CASE WHEN fj.total_sales > 100 THEN 1 END) AS high_value_orders
FROM FinalJoin fj
WHERE fj.total_return IS NOT NULL AND fj.total_return != 0
GROUP BY 
    fj.customer_type, 
    fj.ws_item_sk
HAVING 
    SUM(fj.total_sales) > 500
ORDER BY 
    aggregated_sales DESC, 
    avg_return ASC
OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;
