
WITH ranked_sales AS (
    SELECT 
        ws.web_site_sk,
        ws.ws_order_number,
        ws.ws_quantity,
        ws.ws_ext_sales_price,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.ws_ext_sales_price DESC) AS rn
    FROM 
        web_sales ws
    WHERE 
        ws.ws_sold_date_sk BETWEEN 1000 AND 1500
), 
customer_details AS (
    SELECT 
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        cd.cd_credit_rating
    FROM 
        customer c
    JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), 
sales_totals AS (
    SELECT 
        ws.ws_web_page_sk,
        SUM(ws.ws_ext_sales_price) AS total_sales,
        COUNT(ws.ws_order_number) AS total_orders
    FROM 
        web_sales ws
    GROUP BY 
        ws.ws_web_page_sk
)
SELECT 
    cd.c_customer_id,
    cd.c_first_name,
    cd.c_last_name,
    cd.cd_gender,
    cd.cd_marital_status,
    COALESCE(rt.total_sales, 0) AS total_sales,
    COALESCE(rt.total_orders, 0) AS total_orders,
    CASE 
        WHEN cd.cd_purchase_estimate IS NULL THEN 'UNKNOWN'
        ELSE CASE 
            WHEN cd.cd_purchase_estimate < 100 THEN 'LOW'
            WHEN cd.cd_purchase_estimate BETWEEN 100 AND 500 THEN 'MEDIUM'
            ELSE 'HIGH'
        END 
    END AS purchase_category,
    STRING_AGG(CONCAT('Order ', rs.ws_order_number, ' with quantity ', rs.ws_quantity) ORDER BY rs.ws_order_number) AS order_summary
FROM 
    customer_details cd
LEFT JOIN 
    ranked_sales rs ON cd.c_customer_id = rs.ws_order_number
LEFT JOIN 
    sales_totals rt ON rt.ws_web_page_sk = rs.web_site_sk
WHERE 
    cd.cd_gender = 'M' 
    AND cd.cd_marital_status IN ('M', 'S')
    AND COALESCE(rt.total_sales, 0) > 1000
GROUP BY 
    cd.c_customer_id, cd.c_first_name, cd.c_last_name, 
    cd.cd_gender, cd.cd_marital_status, rt.total_sales, rt.total_orders
HAVING 
    COUNT(rs.ws_order_number) > 5
ORDER BY 
    total_sales DESC;
