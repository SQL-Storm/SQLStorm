WITH SalesData AS (
    SELECT
        ws.ws_item_sk,
        ws.ws_order_number,
        SUM(ws.ws_quantity) AS total_quantity,
        SUM(ws.ws_net_paid) AS total_revenue,
        COUNT(DISTINCT ws.ws_bill_customer_sk) AS unique_customers,
        ROW_NUMBER() OVER (PARTITION BY ws.ws_item_sk ORDER BY SUM(ws.ws_net_paid) DESC) AS item_rank
    FROM
        web_sales ws
    JOIN
        item i ON ws.ws_item_sk = i.i_item_sk
    WHERE
        ws.ws_sold_date_sk BETWEEN 2450809 AND 2450831  
        AND i.i_current_price IS NOT NULL
    GROUP BY
        ws.ws_item_sk, ws.ws_order_number
),
AggregateSales AS (
    SELECT
        sd.ws_item_sk,
        sd.total_quantity,
        sd.total_revenue,
        sd.unique_customers,
        CASE
            WHEN sd.total_revenue > 1000 THEN 'High Revenue'
            WHEN sd.total_revenue BETWEEN 500 AND 1000 THEN 'Medium Revenue'
            ELSE 'Low Revenue'
        END AS revenue_category
    FROM
        SalesData sd
    WHERE
        sd.item_rank = 1
),
CustomerDemographics AS (
    SELECT
        cd.cd_gender,
        COUNT(DISTINCT c.c_customer_sk) AS num_customers,
        AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate
    FROM
        customer c
    JOIN
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    WHERE
        c.c_birth_year IS NOT NULL
    GROUP BY
        cd.cd_gender
)
SELECT
    a.ws_item_sk,
    a.total_quantity,
    a.total_revenue,
    a.revenue_category,
    cd.cd_gender,
    cd.num_customers,
    cd.avg_purchase_estimate
FROM
    AggregateSales a
LEFT JOIN
    CustomerDemographics cd ON a.ws_item_sk = (SELECT cr_item_sk FROM catalog_returns WHERE cr_order_number = a.ws_order_number LIMIT 1)
WHERE
    a.total_revenue IS NOT NULL
ORDER BY
    a.total_revenue DESC
FETCH FIRST 10 ROWS ONLY;