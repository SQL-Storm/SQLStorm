
WITH RECURSIVE item_sales AS (
    SELECT 
        ws_item_sk,
        SUM(ws_net_paid) AS total_sales,
        COUNT(ws_order_number) AS total_orders,
        ROW_NUMBER() OVER (ORDER BY SUM(ws_net_paid) DESC) AS sales_rank
    FROM 
        web_sales
    GROUP BY 
        ws_item_sk
), top_items AS (
    SELECT 
        is.ws_item_sk,
        i.i_item_desc,
        i.i_current_price,
        is.total_sales,
        is.total_orders,
        ROW_NUMBER() OVER (ORDER BY is.total_sales DESC) AS item_rank
    FROM 
        item i
    JOIN 
        item_sales is ON i.i_item_sk = is.ws_item_sk
    WHERE 
        is.total_orders > 0
    LIMIT 10
), customer_return_stats AS (
    SELECT 
        cr_returning_customer_sk,
        COUNT(cr_returning_customer_sk) AS total_returns,
        SUM(COALESCE(cr_return_amount, 0)) AS total_return_amount,
        ROW_NUMBER() OVER (ORDER BY COUNT(cr_returning_customer_sk) DESC) AS return_rank
    FROM 
        catalog_returns
    GROUP BY 
        cr_returning_customer_sk
), customer_demographics AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status,
        c.c_customer_id
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
), final_report AS (
    SELECT 
        c.c_customer_id,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_education_status,
        ti.i_item_desc,
        ti.total_sales,
        crs.total_returns,
        crs.total_return_amount
    FROM 
        customer c
    LEFT JOIN 
        customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
    LEFT JOIN 
        top_items ti ON ti.ws_item_sk = (
            SELECT ws_item_sk
            FROM web_sales ws
            WHERE ws.ws_ship_customer_sk = c.c_customer_sk
            ORDER BY ws.ws_net_paid DESC
            LIMIT 1
        )
    LEFT JOIN 
        customer_return_stats crs ON crs.cr_returning_customer_sk = c.c_customer_sk
)
SELECT 
    f.c_customer_id,
    f.cd_gender,
    f.cd_marital_status,
    f.cd_education_status,
    f.i_item_desc,
    f.total_sales,
    f.total_returns,
    f.total_return_amount,
    CASE 
      WHEN f.total_returns IS NULL THEN 'No Returns'
      WHEN f.total_return_amount > f.total_sales THEN 'High Returns'
      ELSE 'Normal'
    END AS return_status
FROM 
    final_report f
WHERE 
    f.total_sales > 1000
ORDER BY 
    f.total_sales DESC, return_status;
