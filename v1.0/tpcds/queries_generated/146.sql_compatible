
WITH total_sales AS (
    SELECT
        ws_item_sk,
        SUM(ws_sales_price) AS total_sales_price,
        SUM(ws_quantity) AS total_quantity
    FROM
        web_sales
    WHERE
        ws_sold_date_sk BETWEEN 2459621 AND 2459641 
    GROUP BY
        ws_item_sk
),
item_summary AS (
    SELECT
        i.i_item_sk,
        i.i_item_desc,
        i.i_current_price,
        COALESCE(ts.total_sales_price, 0) AS total_sales_price,
        COALESCE(ts.total_quantity, 0) AS total_quantity,
        ROW_NUMBER() OVER (ORDER BY COALESCE(ts.total_sales_price, 0) DESC) AS sales_rank
    FROM
        item i
    LEFT JOIN total_sales ts ON i.i_item_sk = ts.ws_item_sk
),
customer_purchases AS (
    SELECT
        c.c_customer_sk,
        COUNT(DISTINCT ws.ws_order_number) AS total_orders,
        SUM(ws.ws_net_paid_inc_tax) AS total_spent
    FROM
        customer c
    INNER JOIN web_sales ws ON c.c_customer_sk = ws.ws_bill_customer_sk
    GROUP BY
        c.c_customer_sk
),
top_customers AS (
    SELECT
        cp.c_customer_sk,
        cp.total_orders,
        cp.total_spent,
        RANK() OVER (ORDER BY cp.total_spent DESC) AS customer_rank
    FROM
        customer_purchases cp
    WHERE
        cp.total_spent > 1000
)
SELECT
    is.sales_rank,
    is.i_item_desc,
    is.i_current_price,
    COALESCE(tc.total_orders, 0) AS total_orders,
    COALESCE(tc.total_spent, 0) AS total_spent,
    CASE 
        WHEN tc.customer_rank IS NOT NULL THEN 'Top Customer'
        ELSE 'Regular Customer'
    END AS customer_classification
FROM
    item_summary is
LEFT JOIN top_customers tc ON is.i_item_sk IN (
    SELECT wr_item_sk
    FROM web_returns
    WHERE wr_returned_date_sk BETWEEN 2459621 AND 2459641
) OR is.i_item_sk IN (
    SELECT sr_item_sk
    FROM store_returns
    WHERE sr_returned_date_sk BETWEEN 2459621 AND 2459641
)
WHERE
    is.sales_rank <= 10 
ORDER BY
    is.sales_rank;
