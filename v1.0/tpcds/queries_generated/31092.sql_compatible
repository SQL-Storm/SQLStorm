
WITH RECURSIVE sales_hierarchy AS (
    SELECT 
        c.c_customer_sk,
        c.c_customer_id,
        c.c_first_name,
        c.c_last_name,
        SUM(ss.ss_net_paid) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY c.c_customer_sk ORDER BY SUM(ss.ss_net_paid) DESC) AS sales_rank
    FROM customer c
    LEFT JOIN store_sales ss ON c.c_customer_sk = ss.ss_customer_sk
    GROUP BY 
        c.c_customer_sk, 
        c.c_customer_id, 
        c.c_first_name, 
        c.c_last_name
    HAVING SUM(ss.ss_net_paid) > 0

    UNION ALL

    SELECT 
        s.s_store_sk AS parent_customer_sk,
        NULL,
        NULL,
        NULL,
        SUM(ss.ss_net_paid) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY s.s_store_sk ORDER BY SUM(ss.ss_net_paid) DESC) AS sales_rank
    FROM store s
    JOIN store_sales ss ON s.s_store_sk = ss.ss_store_sk
    GROUP BY s.s_store_sk
),

sales_summary AS (
    SELECT 
        sh.c_customer_id,
        sh.c_first_name,
        sh.c_last_name,
        COALESCE(sh.total_sales, 0) AS total_sales,
        CASE 
            WHEN COALESCE(sh.total_sales, 0) > 1000 THEN 'Gold'
            WHEN COALESCE(sh.total_sales, 0) BETWEEN 500 AND 1000 THEN 'Silver'
            ELSE 'Bronze'
        END AS customer_tier,
        ROW_NUMBER() OVER (ORDER BY COALESCE(sh.total_sales, 0) DESC) AS tier_rank
    FROM sales_hierarchy sh
)

SELECT 
    CONCAT(ss.c_first_name, ' ', ss.c_last_name) AS full_name,
    ss.total_sales,
    ss.customer_tier,
    COALESCE(SUM(ws.ws_net_profit), 0) AS total_web_sales_profit,
    SUM(CASE WHEN ws.ws_ext_discount_amt IS NOT NULL THEN ws.ws_ext_discount_amt ELSE 0 END) AS total_discounts
FROM sales_summary ss
LEFT JOIN web_sales ws ON ss.c_customer_id = ws.ws_bill_customer_sk
GROUP BY 
    ss.c_first_name, 
    ss.c_last_name, 
    ss.total_sales, 
    ss.customer_tier
HAVING COALESCE(SUM(ws.ws_net_profit), 0) > 0
ORDER BY ss.total_sales DESC
LIMIT 100;
