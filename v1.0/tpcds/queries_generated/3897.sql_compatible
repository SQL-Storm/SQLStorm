
WITH SalesData AS (
    SELECT 
        COALESCE(ss.ss_sold_date_sk, cs.cs_sold_date_sk, ws.ws_sold_date_sk) AS sold_date,
        ss.ss_item_sk AS item_sk,
        ss.ss_quantity AS quantity,
        ss.ss_net_paid AS net_paid,
        cs.cs_net_paid AS catalog_net_paid,
        ws.ws_net_paid AS web_net_paid,
        ROW_NUMBER() OVER (PARTITION BY COALESCE(ss.ss_item_sk, cs.cs_item_sk, ws.ws_item_sk) ORDER BY COALESCE(ss.ss_sold_date_sk, cs.cs_sold_date_sk, ws.ws_sold_date_sk) DESC) AS rn
    FROM 
        store_sales ss
    FULL OUTER JOIN catalog_sales cs ON ss.ss_item_sk = cs.cs_item_sk
    FULL OUTER JOIN web_sales ws ON ss.ss_item_sk = ws.ws_item_sk
    WHERE
        COALESCE(ss.ss_net_paid, cs.cs_net_paid, ws.ws_net_paid) IS NOT NULL
),
TopItems AS (
    SELECT 
        item_sk, 
        SUM(quantity) AS total_quantity,
        SUM(net_paid) AS total_sales
    FROM SalesData
    WHERE rn = 1
    GROUP BY item_sk
),
CustomerDemographics AS (
    SELECT 
        c.c_customer_sk,
        c.c_current_cdemo_sk,
        d.cd_gender,
        d.cd_marital_status,
        (CASE
            WHEN d.cd_purchase_estimate > 1000 THEN 'High'
            WHEN d.cd_purchase_estimate BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low' 
        END) AS purchase_band
    FROM customer c
    JOIN customer_demographics d ON c.c_current_cdemo_sk = d.cd_demo_sk
)
SELECT 
    ci.item_sk,
    ti.total_quantity,
    ti.total_sales,
    cd.c_current_cdemo_sk,
    cd.cd_gender,
    cd.purchase_band
FROM TopItems ti
LEFT JOIN CustomerDemographics cd ON cd.c_current_cdemo_sk = cd.c_current_cdemo_sk
WHERE ti.total_sales > (
    SELECT AVG(total_sales)
    FROM TopItems
) 
ORDER BY ti.total_sales DESC
LIMIT 10;
