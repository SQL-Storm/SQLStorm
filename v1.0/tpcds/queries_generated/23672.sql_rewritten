WITH RECURSIVE addr_cte AS (
    SELECT ca_address_sk, ca_city, ca_state,
           ROW_NUMBER() OVER (PARTITION BY ca_state ORDER BY ca_city) AS city_rank
    FROM customer_address
    WHERE ca_state IS NOT NULL
),
hd_demo_income AS (
    SELECT hd_demo_sk, ib_income_band_sk, ib_lower_bound, ib_upper_bound,
           CASE 
               WHEN ib_lower_bound IS NULL OR ib_upper_bound IS NULL THEN 'Unknown Income'
               WHEN ib_lower_bound < 0 THEN 'Negative Income'
               ELSE 'Known Income'
           END AS income_status
    FROM household_demographics
    LEFT JOIN income_band ON hd_demo_sk = ib_income_band_sk
),
sales_summary AS (
    SELECT ws_bill_cdemo_sk, SUM(ws_net_profit) AS total_profit,
           COUNT(ws_order_number) AS total_orders,
           COUNT(DISTINCT ws_item_sk) AS distinct_items_sold
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN 1 AND 10000 
    GROUP BY ws_bill_cdemo_sk
),
customer_performance AS (
    SELECT c.c_customer_sk, c.c_last_name, c.c_first_name, 
           COALESCE(ss.total_profit, 0) AS total_profit,
           COALESCE(ss.total_orders, 0) AS total_orders,
           cd.cd_gender, cd.cd_marital_status, cd.cd_credit_rating,
           CASE 
               WHEN cd.cd_purchase_estimate IS NULL THEN 'Estimate Unavailable'
               ELSE 'Estimate Available'
           END AS purchase_estimate_status
    FROM customer c
    LEFT JOIN sales_summary ss ON c.c_customer_sk = ss.ws_bill_cdemo_sk
    LEFT JOIN customer_demographics cd ON c.c_current_cdemo_sk = cd.cd_demo_sk
),
city_performance AS (
    SELECT a.ca_city, a.ca_state, COUNT(DISTINCT c.c_customer_sk) AS customer_count,
           SUM(cp.total_profit) AS total_profit
    FROM addr_cte a
    JOIN customer_performance cp ON cp.c_last_name LIKE '%' || a.ca_city || '%'
    GROUP BY a.ca_city, a.ca_state
)
SELECT city.ca_city, city.ca_state, city.customer_count, 
       city.total_profit,
       CASE 
           WHEN city.total_profit > 10000 THEN 'High Performer'
           WHEN city.total_profit BETWEEN 1000 AND 10000 THEN 'Moderate Performer'
           ELSE 'Low Performer'
       END AS performance_category,
       DENSE_RANK() OVER (PARTITION BY city.ca_state ORDER BY city.total_profit DESC) AS state_rank,
       RANK() OVER (ORDER BY city.total_profit DESC) AS overall_rank
FROM city_performance city
WHERE city.customer_count > 0 AND city.total_profit IS NOT NULL
ORDER BY city.ca_state, city.customer_count DESC
LIMIT 100;