
WITH ranked_sales AS (
    SELECT 
        ws.bill_customer_sk,
        ws.song_id,
        SUM(ws.ext_sales_price) AS total_sales,
        DENSE_RANK() OVER (PARTITION BY ws.bill_customer_sk ORDER BY SUM(ws.ext_sales_price) DESC) AS rank
    FROM 
        web_sales ws
    GROUP BY 
        ws.bill_customer_sk, ws.song_id
),
high_spending_customers AS (
    SELECT 
        cd.cd_demo_sk,
        cd.cd_gender,
        cd.cd_marital_status,
        cd.cd_purchase_estimate,
        CASE 
            WHEN cd.cd_purchase_estimate IS NULL THEN 'Unknown'
            WHEN cd.cd_purchase_estimate > 1000 THEN 'High'
            WHEN cd.cd_purchase_estimate BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS purchase_level
    FROM 
        customer_demographics cd
    WHERE 
        cd.cd_purchase_estimate IS NOT NULL
),
monthly_sales_summary AS (
    SELECT 
        dd.d_year,
        dd.d_month_seq,
        SUM(ws.ext_sales_price) AS total_monthly_sales
    FROM 
        date_dim dd
    JOIN 
        web_sales ws ON dd.d_date_sk = ws.ws_sold_date_sk
    WHERE 
        dd.d_year >= 2020
    GROUP BY 
        dd.d_year, dd.d_month_seq
)
SELECT 
    cs.c_customer_id,
    cs.c_first_name,
    cs.c_last_name,
    r.total_sales,
    h.purchase_level,
    ms.total_monthly_sales
FROM 
    customer cs
LEFT JOIN 
    ranked_sales r ON cs.c_customer_sk = r.bill_customer_sk AND r.rank = 1
JOIN 
    high_spending_customers h ON cs.c_current_cdemo_sk = h.cd_demo_sk
FULL OUTER JOIN 
    monthly_sales_summary ms ON h.cd_demo_sk = ms.d_year AND h.cd_purchase_estimate = ms.total_monthly_sales
WHERE 
    (h.purchase_level = 'High' OR h.purchase_level IS NULL)
    AND (r.total_sales IS NOT NULL OR ms.total_monthly_sales IS NOT NULL)
ORDER BY 
    r.total_sales DESC, ms.total_monthly_sales ASC, cs.c_last_name;
