
WITH RECURSIVE SalesData AS (
    SELECT 
        ws_item_sk,
        SUM(ws_net_paid) AS total_sales,
        COUNT(ws_order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_paid) DESC) AS sales_rank
    FROM web_sales
    GROUP BY ws_item_sk
    UNION ALL
    SELECT 
        cs_item_sk,
        SUM(cs_net_paid) AS total_sales,
        COUNT(cs_order_number) AS order_count,
        ROW_NUMBER() OVER (PARTITION BY cs_item_sk ORDER BY SUM(cs_net_paid) DESC) AS sales_rank
    FROM catalog_sales
    GROUP BY cs_item_sk
),
RankedSales AS (
    SELECT 
        item.i_item_id,
        COALESCE(sd.total_sales, 0) AS total_sales,
        COALESCE(sd.order_count, 0) AS order_count,
        RANK() OVER (ORDER BY COALESCE(sd.total_sales, 0) DESC) AS total_rank
    FROM item
    LEFT JOIN SalesData sd ON item.i_item_sk = sd.ws_item_sk OR item.i_item_sk = sd.cs_item_sk
),
CustomerReturnStats AS (
    SELECT 
        customer.c_customer_sk,
        COUNT(DISTINCT wr_order_number) AS web_return_count,
        COUNT(DISTINCT cr_order_number) AS catalog_return_count,
        COALESCE(SUM(wr_return_amt), 0) AS total_web_return_amt,
        COALESCE(SUM(cr_return_amount), 0) AS total_catalog_return_amt
    FROM customer
    LEFT JOIN web_returns wr ON customer.c_customer_sk = wr.returning_customer_sk
    LEFT JOIN catalog_returns cr ON customer.c_customer_sk = cr.returning_customer_sk
    GROUP BY customer.c_customer_sk
)
SELECT 
    cs.c_customer_id,
    COALESCE(rs.total_sales, 0) AS total_item_sales,
    cr.web_return_count + cr.catalog_return_count AS total_returns,
    cr.total_web_return_amt + cr.total_catalog_return_amt AS total_return_amt,
    rs.total_rank
FROM CustomerReturnStats cr
JOIN customer cs ON cr.c_customer_sk = cs.c_customer_sk
LEFT JOIN RankedSales rs ON cs.c_current_addr_sk = rs.i_item_id
WHERE cr.web_return_count > 0 
  OR cr.catalog_return_count > 0
ORDER BY total_item_sales DESC, total_returns ASC;
