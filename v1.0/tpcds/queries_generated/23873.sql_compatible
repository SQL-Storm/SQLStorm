
WITH RECURSIVE sales_recursive AS (
    SELECT 
        ss_sold_date_sk,
        SUM(ss_ext_sales_price) AS total_sales,
        RANK() OVER (PARTITION BY ss_sold_date_sk ORDER BY SUM(ss_ext_sales_price) DESC) AS sales_rank
    FROM 
        store_sales
    GROUP BY 
        ss_sold_date_sk
),
null_handling AS (
    SELECT 
        d.d_date AS sales_date,
        COALESCE(s.total_sales, 0) AS total_sales,
        CASE
            WHEN s.sales_rank IS NULL THEN 'No Sales'
            WHEN s.total_sales = 0 THEN 'Zero Sales'
            ELSE 'Sales Recorded'
        END AS sales_status
    FROM 
        date_dim d
    LEFT JOIN 
        sales_recursive s ON d.d_date_sk = s.ss_sold_date_sk
),
aggregated_sales AS (
    SELECT 
        sales_date,
        SUM(total_sales) OVER (ORDER BY sales_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_sales
    FROM 
        null_handling
    WHERE 
        sales_status != 'No Sales'
)
SELECT 
    sales_date,
    total_sales,
    cumulative_sales,
    RANK() OVER (ORDER BY total_sales DESC) AS total_sales_rank,
    ROW_NUMBER() OVER (PARTITION BY sales_status ORDER BY sales_date) AS status_order
FROM 
    null_handling
ORDER BY 
    sales_date ASC
LIMIT 100
UNION ALL
SELECT 
    'Total Sales' AS sales_date,
    SUM(total_sales) AS total_sales,
    SUM(cumulative_sales) AS cumulative_sales,
    NULL AS total_sales_rank,
    NULL AS status_order
FROM 
    aggregated_sales
WHERE 
    cumulative_sales IS NOT NULL
GROUP BY 
    sales_date;
