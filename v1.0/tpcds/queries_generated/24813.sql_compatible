
WITH RECURSIVE sales_data AS (
    SELECT
        ws_sold_date_sk,
        ws_item_sk,
        SUM(ws_quantity) AS total_quantity,
        SUM(ws_net_profit) AS total_profit,
        RANK() OVER (PARTITION BY ws_item_sk ORDER BY SUM(ws_net_profit) DESC) AS rank_profit
    FROM web_sales
    WHERE ws_sold_date_sk BETWEEN 1 AND 365
    GROUP BY ws_sold_date_sk, ws_item_sk
),
customer_metrics AS (
    SELECT
        c.c_customer_sk,
        c.c_current_cdemo_sk,
        d.cd_gender,
        d.cd_marital_status,
        COALESCE(d.cd_dep_count, 0) AS dependent_count,
        COUNT(DISTINCT w.ws_order_number) AS total_orders
    FROM customer c
    LEFT JOIN customer_demographics d ON c.c_current_cdemo_sk = d.cd_demo_sk
    LEFT JOIN web_sales w ON c.c_customer_sk = w.ws_bill_customer_sk
    GROUP BY c.c_customer_sk, c.c_current_cdemo_sk, d.cd_gender, d.cd_marital_status
),
top_sales AS (
    SELECT
        sd.ws_item_sk,
        sd.total_quantity,
        sd.total_profit
    FROM sales_data sd
    WHERE sd.rank_profit <= 10
),
income_ranges AS (
    SELECT
        ib_income_band_sk,
        CASE
            WHEN ib_lower_bound IS NULL THEN 'Unknown'
            ELSE CONCAT('$', ib_lower_bound, ' - $', ib_upper_bound)
        END AS income_band
    FROM income_band
)
SELECT
    cu.c_customer_sk,
    cm.cd_gender,
    ir.income_band,
    COALESCE(ts.total_quantity, 0) AS top_item_quantity,
    COALESCE(ts.total_profit, 0) AS top_item_profit
FROM customer_metrics cm
JOIN customer cu ON cm.c_customer_sk = cu.c_customer_sk
LEFT JOIN (SELECT DISTINCT ws_bill_customer_sk, ws_item_sk FROM web_sales) ws ON cu.c_customer_sk = ws.ws_bill_customer_sk
LEFT JOIN top_sales ts ON ws.ws_item_sk = ts.ws_item_sk
JOIN household_demographics hd ON cu.c_customer_sk = hd.hd_demo_sk
LEFT JOIN income_ranges ir ON hd.hd_income_band_sk = ir.ib_income_band_sk
WHERE (cm.total_orders > 0 OR ir.income_band IS NOT NULL)
AND (cm.dependent_count > 2 OR cm.cd_marital_status = 'S')
AND (cm.cd_gender = 'M' OR cm.cd_gender IS NULL)
ORDER BY top_item_profit DESC, cu.c_customer_sk;
