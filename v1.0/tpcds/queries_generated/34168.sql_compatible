
WITH RECURSIVE item_hierarchy AS (
    SELECT i_item_sk, i_item_id, i_item_desc, i_current_price, i_brand
    FROM item
    WHERE i_current_price IS NOT NULL
    UNION ALL
    SELECT i.i_item_sk, i.i_item_id, i.i_item_desc, i.i_current_price, i.i_brand
    FROM item i
    INNER JOIN item_hierarchy ih ON i.i_item_sk = ih.i_item_sk 
    WHERE i.i_current_price < ih.i_current_price
),
customer_return_stats AS (
    SELECT sr_customer_sk, COUNT(DISTINCT sr_ticket_number) AS total_returns,
           SUM(sr_return_amt) AS total_return_amount,
           AVG(sr_return_quantity) AS average_return_quantity
    FROM store_returns
    GROUP BY sr_customer_sk
),
sales_summary AS (
    SELECT ws_bill_customer_sk AS customer_id, 
           SUM(ws_ext_sales_price) AS total_sales,
           COUNT(DISTINCT ws_order_number) AS total_orders,
           ROW_NUMBER() OVER (PARTITION BY ws_bill_customer_sk ORDER BY SUM(ws_ext_sales_price) DESC) AS sales_rank
    FROM web_sales
    GROUP BY ws_bill_customer_sk
)
SELECT c.c_customer_id, ca.ca_city, ca.ca_state, demo.cd_gender,
       COALESCE(s.total_sales, 0) AS total_sales, 
       COALESCE(r.total_returns, 0) AS total_returns,
       COALESCE(r.total_return_amount, 0) AS total_return_amount, 
       COALESCE(r.average_return_quantity, 0) AS average_return_quantity,
       i.i_item_id, i.i_item_desc, ih.i_current_price
FROM customer c
LEFT JOIN customer_address ca ON c.c_current_addr_sk = ca.ca_address_sk
LEFT JOIN customer_demographics demo ON c.c_current_cdemo_sk = demo.cd_demo_sk
LEFT JOIN sales_summary s ON c.c_customer_sk = s.customer_id
LEFT JOIN customer_return_stats r ON c.c_customer_sk = r.sr_customer_sk
LEFT JOIN item i ON i.i_item_sk IN (SELECT sr_item_sk FROM store_returns WHERE sr_customer_sk = c.c_customer_sk)
LEFT JOIN item_hierarchy ih ON i.i_item_sk = ih.i_item_sk
WHERE (SELECT NULL) IS NULL 
AND (demo.cd_marital_status = 'M' OR demo.cd_gender = 'F')
GROUP BY c.c_customer_id, ca.ca_city, ca.ca_state, demo.cd_gender,
         s.total_sales, r.total_returns, r.total_return_amount, r.average_return_quantity,
         i.i_item_id, i.i_item_desc, ih.i_current_price
ORDER BY total_sales DESC, r.total_returns;
