
WITH RankedSales AS (
    SELECT 
        ws.web_site_sk,
        ws.net_profit,
        ROW_NUMBER() OVER (PARTITION BY ws.web_site_sk ORDER BY ws.sold_date_sk DESC) AS rn,
        DENSE_RANK() OVER (ORDER BY ws.net_profit DESC) AS profit_rank
    FROM web_sales ws
    WHERE ws.net_profit IS NOT NULL
),

TotalReturns AS (
    SELECT 
        sr_returned_date_sk,
        SUM(sr_return_amount) AS total_return_amount,
        COUNT(sr_item_sk) AS total_items_returned
    FROM store_returns
    GROUP BY sr_returned_date_sk
),

DemographicCounts AS (
    SELECT 
        cd.cd_gender,
        COUNT(DISTINCT c.c_customer_sk) AS customer_count,
        AVG(cd.cd_purchase_estimate) AS avg_purchase_estimate
    FROM customer_demographics cd
    JOIN customer c ON cd.cd_demo_sk = c.c_current_cdemo_sk
    WHERE cd.cd_marital_status = 'M'
    GROUP BY cd.cd_gender
),

JoinSalesAndReturns AS (
    SELECT 
        rs.web_site_sk,
        ts.total_return_amount,
        rs.net_profit,
        (CASE 
            WHEN ts.total_return_amount IS NULL THEN 'No Returns'
            ELSE 'Returns Exist'
        END) AS returns_status
    FROM RankedSales rs
    LEFT JOIN TotalReturns ts ON rs.rn = ts.sr_returned_date_sk
),

FinalReport AS (
    SELECT
        js.web_site_sk,
        js.net_profit,
        js.returns_status,
        dc.customer_count,
        dc.avg_purchase_estimate
    FROM JoinSalesAndReturns js
    JOIN DemographicCounts dc ON js.web_site_sk = dc.cd_gender
    WHERE js.profit_rank <= 10
)

SELECT 
    fr.web_site_sk,
    fr.net_profit,
    fr.returns_status,
    fr.customer_count,
    fr.avg_purchase_estimate,
    (CASE 
        WHEN fr.net_profit > COALESCE(NULLIF(fr.customer_count, 0), 1) THEN 'Profitable'
        ELSE 'Unprofitable'
    END) AS profitability_status
FROM FinalReport fr
ORDER BY fr.net_profit DESC,
         fr.customer_count DESC,
         fr.returns_status ASC;
