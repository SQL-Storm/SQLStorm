
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        c.c_name,
        RANK() OVER (PARTITION BY o.o_orderdate ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
),
SupplierPartCosts AS (
    SELECT 
        ps.ps_partkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey
),
FilteredLineItems AS (
    SELECT 
        l.l_orderkey,
        l.l_partkey,
        l.l_quantity,
        l.l_extendedprice,
        l.l_discount,
        l.l_tax,
        CASE 
            WHEN l.l_returnflag = 'R' THEN 'Returned'
            ELSE 'Regular'
        END AS return_status
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate >= '1997-01-01'
),
AggregatedLineItems AS (
    SELECT 
        F.l_orderkey,
        SUM(F.l_extendedprice * (1 - F.l_discount)) AS total_price_after_discount,
        COUNT(*) AS total_items,
        AVG(F.l_quantity) AS avg_item_quantity
    FROM 
        FilteredLineItems F
    GROUP BY 
        F.l_orderkey
)

SELECT 
    R.o_orderkey,
    R.o_orderdate,
    R.c_name,
    A.total_price_after_discount,
    A.total_items,
    A.avg_item_quantity,
    COALESCE(S.total_supply_cost, 0) AS total_supply_cost,
    R.order_rank
FROM 
    RankedOrders R
LEFT JOIN 
    AggregatedLineItems A ON R.o_orderkey = A.l_orderkey
LEFT JOIN 
    SupplierPartCosts S ON S.ps_partkey IN (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey = R.o_orderkey)
WHERE 
    R.order_rank <= 10
ORDER BY 
    R.o_orderdate, 
    R.o_totalprice DESC;
