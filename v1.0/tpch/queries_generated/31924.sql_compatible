
WITH RECURSIVE order_totals AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_amount
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey

    UNION ALL

    SELECT ot.o_orderkey, 
           ot.total_amount + COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_amount
    FROM order_totals ot
    JOIN lineitem l ON ot.o_orderkey = l.l_orderkey
    GROUP BY ot.o_orderkey, ot.total_amount
),
supplier_stats AS (
    SELECT s.s_suppkey,
           COUNT(DISTINCT ps.ps_partkey) AS total_parts,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
),
region_summary AS (
    SELECT r.r_name,
           COUNT(DISTINCT n.n_nationkey) AS total_nations,
           SUM(s.s_acctbal) AS total_balance
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_name
)
SELECT r.r_name,
       COALESCE(s.total_parts, 0) AS total_parts,
       COALESCE(s.avg_supply_cost, 0) AS avg_supply_cost,
       os.total_amount,
       CASE 
           WHEN os.total_amount > 10000 THEN 'High Value'
           WHEN os.total_amount BETWEEN 5000 AND 10000 THEN 'Medium Value'
           ELSE 'Low Value'
       END AS order_value_category
FROM region_summary r
LEFT JOIN supplier_stats s ON r.total_nations > s.total_parts
LEFT JOIN order_totals os ON s.total_parts = (SELECT MAX(total_parts) FROM supplier_stats)
WHERE r.total_balance IS NOT NULL
ORDER BY r.r_name, order_value_category DESC;
