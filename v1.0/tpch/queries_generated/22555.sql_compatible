
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        ROW_NUMBER() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS rnk
    FROM 
        supplier s
),
FilteredParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available
    FROM 
        part p
    LEFT JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY 
        p.p_partkey, p.p_name
    HAVING 
        SUM(ps.ps_availqty) IS NOT NULL
        AND SUM(ps.ps_availqty) > 100
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        COUNT(o.o_orderkey) > 5
),
MaxOrderTotal AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        RANK() OVER (ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_totalprice IS NOT NULL
)
SELECT 
    r.s_name AS supplier_name,
    p.p_name AS part_name,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
    c.c_name AS customer_name,
    COUNT(DISTINCT l.l_orderkey) AS order_count,
    ROW_NUMBER() OVER (PARTITION BY r.s_suppkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank,
    COALESCE(r.s_acctbal, 0) AS adjusted_acctbal
FROM 
    RankedSuppliers r
JOIN 
    partsupp ps ON r.s_suppkey = ps.ps_suppkey
JOIN 
    FilteredParts p ON ps.ps_partkey = p.p_partkey
JOIN 
    lineitem l ON ps.ps_partkey = l.l_partkey
JOIN 
    CustomerOrders c ON l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = c.c_custkey)
LEFT JOIN 
    MaxOrderTotal mot ON l.l_orderkey = mot.o_orderkey
WHERE 
    l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    AND (p.total_available IS NOT NULL OR r.s_acctbal < 5000)
GROUP BY 
    r.s_name, p.p_name, c.c_name, r.s_suppkey, r.s_acctbal
HAVING 
    SUM(l.l_extendedprice * (1 - l.l_discount)) > 1000
ORDER BY 
    revenue DESC, customer_name ASC;
