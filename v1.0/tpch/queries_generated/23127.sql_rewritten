WITH RankedOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_custkey, 
        o.o_totalprice, 
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= DATE '1996-01-01'
        AND o.o_orderstatus IN ('F', 'O')
),
SupplierDetails AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_acctbal,
        COALESCE(s.s_comment, 'No comment') AS supplier_comment,
        CASE 
            WHEN s.s_acctbal < 500 THEN 'Low Balance' 
            WHEN s.s_acctbal BETWEEN 500 AND 2000 THEN 'Medium Balance' 
            ELSE 'High Balance' 
        END AS balance_category
    FROM 
        supplier s
    WHERE 
        s.s_acctbal IS NOT NULL
),
PartSums AS (
    SELECT 
        ps.ps_partkey, 
        SUM(ps.ps_supplycost) AS total_supply_cost
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey
    HAVING 
        SUM(ps.ps_availqty) > 0
),
CustomerOrders AS (
    SELECT 
        c.c_custkey, 
        COUNT(o.o_orderkey) AS order_count, 
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
    HAVING 
        COUNT(o.o_orderkey) > 0
)
SELECT 
    p.p_partkey,
    p.p_name,
    COALESCE(rd.order_rank, 0) AS order_rank, 
    s.s_name AS supplier_name,
    s.balance_category,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue,
    COUNT(DISTINCT c.c_custkey) AS distinct_customers
FROM 
    part p
LEFT JOIN 
    partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN 
    supplierDetails s ON s.s_suppkey = ps.ps_suppkey
LEFT JOIN 
    lineitem l ON ps.ps_partkey = l.l_partkey
LEFT JOIN 
    RankedOrders rd ON rd.o_orderkey = l.l_orderkey
LEFT JOIN 
    CustomerOrders c ON c.c_custkey = rd.o_custkey
WHERE 
    p.p_size IN (SELECT DISTINCT p2.p_size FROM part p2 WHERE p2.p_retailprice > 100)
GROUP BY 
    p.p_partkey, p.p_name, rd.order_rank, s.s_name, s.balance_category
HAVING 
    SUM(l.l_quantity) IS NOT NULL 
    AND SUM(l.l_extendedprice) > 1000
ORDER BY 
    net_revenue DESC 
    NULLS LAST;