
WITH RECURSIVE nation_hierarchy AS (
    SELECT n_nationkey, n_name, n_regionkey, 0 AS level
    FROM nation
    UNION ALL
    SELECT n.n_nationkey, n.n_name, n.n_regionkey, nh.level + 1
    FROM nation n
    JOIN nation_hierarchy nh ON n.n_regionkey = nh.n_nationkey
),
part_supplier_info AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, ps.ps_availqty,
           COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_revenue,
           COUNT(DISTINCT s.s_suppkey) AS supplier_count,
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY total_revenue DESC) AS rev_rank
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    LEFT JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, ps.ps_availqty
)
SELECT n.n_name AS nation_name, 
       COUNT(DISTINCT c.c_custkey) AS customer_count,
       SUM(CASE WHEN (c.c_acctbal IS NULL OR c.c_acctbal < 0) THEN 1 ELSE 0 END) AS negative_balances,
       AVG(pi.total_revenue) AS avg_revenue,
       SUM(pi.ps_availqty) AS total_avail_qty
FROM nation n
LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
JOIN part_supplier_info pi ON pi.supplier_count > 1 AND pi.rev_rank = 1
GROUP BY n.n_name
HAVING SUM(pi.total_revenue) IS NOT NULL
ORDER BY nation_name DESC 
OFFSET 3 ROWS FETCH NEXT 5 ROWS ONLY;
