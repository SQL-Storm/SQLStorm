
WITH RECURSIVE TopRegions AS (
    SELECT r.r_regionkey, r.r_name, COUNT(DISTINCT n.n_nationkey) AS nation_count
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY nation_count DESC
    LIMIT 5
),
CustomerOrderStats AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
SupplierPartInfo AS (
    SELECT s.s_suppkey, s.s_name, p.p_partkey, p.p_name, 
        SUM(ps.ps_availqty) AS total_available,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supplycost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    GROUP BY s.s_suppkey, s.s_name, p.p_partkey, p.p_name
)
SELECT 
    c.c_name AS Customer_Name,
    MAX(c.order_count) OVER (PARTITION BY c.c_custkey) AS Total_Orders,
    COALESCE(SUM(s.total_available), 0) AS Total_Available_Parts,
    SUM(COALESCE(s.total_supplycost, 0)) AS Total_Supply_Cost,
    r.r_name AS Region_Name
FROM CustomerOrderStats c
LEFT JOIN SupplierPartInfo s ON c.c_custkey = s.s_suppkey 
JOIN TopRegions r ON r.nation_count > 2
GROUP BY c.c_name, r.r_name, c.c_custkey
HAVING SUM(s.total_available) > 0
ORDER BY Customer_Name, Region_Name;
