
WITH RECURSIVE CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, 
           SUM(o.o_totalprice) AS total_spent,
           ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY SUM(o.o_totalprice) DESC) AS order_rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
SupplierParts AS (
    SELECT s.s_suppkey, s.s_name,
           SUM(ps.ps_availqty) AS total_availability,
           MAX(ps.ps_supplycost) AS max_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
)
SELECT DISTINCT 
       c.c_name AS customer_name,
       COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_revenue,
       CASE 
           WHEN SUM(l.l_extendedprice) IS NULL THEN 'No Orders'
           ELSE 'Active Customer'
       END AS customer_status,
       s.s_name AS supplier_name,
       rp.total_spent AS customer_total_spent,
       sp.total_availability AS supplier_total_availability,
       rp.order_rank
FROM CustomerOrders rp
LEFT JOIN lineitem l ON l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = rp.c_custkey)
LEFT JOIN SupplierParts sp ON sp.max_supply_cost IN (SELECT ps.ps_supplycost FROM partsupp ps JOIN part p ON ps.ps_partkey = p.p_partkey LIMIT 1)
LEFT JOIN supplier s ON s.s_suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey IN (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = rp.c_custkey)))
GROUP BY c.c_name, rp.total_spent, sp.total_availability, rp.order_rank, s.s_name
HAVING COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) > 1000
ORDER BY total_revenue DESC
LIMIT 10;
