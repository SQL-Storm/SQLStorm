
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
      AND s.s_suppkey <> sh.s_suppkey
)

SELECT 
    n.n_name AS nation_name,
    COUNT(DISTINCT s.s_suppkey) AS distinct_suppliers,
    SUM(COALESCE(s.s_acctbal, 0)) AS total_account_balance,
    AVG(CASE WHEN COUNT(DISTINCT ps.ps_partkey) > 0 THEN SUM(ps.ps_supplycost) END) AS avg_supply_cost,
    RANK() OVER (PARTITION BY n.n_name ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS price_rank,
    CASE 
        WHEN COUNT(DISTINCT o.o_orderkey) > 10 THEN 'High' 
        WHEN COUNT(DISTINCT o.o_orderkey) > 5 THEN 'Medium' 
        ELSE 'Low' 
    END AS order_volume_category
FROM nation n
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
LEFT JOIN lineitem l ON ps.ps_partkey = l.l_partkey
LEFT JOIN orders o ON l.l_orderkey = o.o_orderkey
WHERE n.n_name LIKE '%land%'
  AND EXISTS (SELECT 1 FROM supplier s2 WHERE s2.s_nationkey = n.n_nationkey AND s2.s_acctbal IS NOT NULL)
GROUP BY n.n_name
HAVING SUM(COALESCE(s.s_acctbal, 0)) > 10000
ORDER BY total_account_balance DESC, nation_name ASC;
