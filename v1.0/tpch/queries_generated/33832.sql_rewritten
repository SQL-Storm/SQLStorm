WITH RECURSIVE CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate >= '1997-01-01'
    
    UNION ALL

    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN CustomerOrders co ON co.o_orderkey = o.o_orderkey
)
, PartSupplierDetails AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, 
           SUM(ps.ps_availqty) AS total_available_quantity,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM partsupp ps
    GROUP BY ps.ps_partkey, ps.ps_suppkey
)
SELECT pt.p_name, pt.p_brand, pt.p_type, 
       SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue,
       AVG(CASE WHEN s.s_acctbal IS NULL THEN 0 ELSE s.s_acctbal END) AS avg_supplier_balance,
       COUNT(DISTINCT co.o_orderkey) AS order_count
FROM part pt
LEFT OUTER JOIN lineitem li ON pt.p_partkey = li.l_partkey
LEFT OUTER JOIN PartSupplierDetails psd ON pt.p_partkey = psd.ps_partkey
LEFT JOIN supplier s ON psd.ps_suppkey = s.s_suppkey
JOIN CustomerOrders co ON li.l_orderkey = co.o_orderkey
WHERE pt.p_size > 10 
  AND (pt.p_retailprice > 100 OR EXISTS (SELECT 1 FROM partsupp ps WHERE ps.ps_partkey = pt.p_partkey AND ps.ps_supplycost < 50))
GROUP BY pt.p_partkey, pt.p_name, pt.p_brand, pt.p_type
HAVING SUM(li.l_extendedprice) IS NOT NULL
ORDER BY total_revenue DESC
LIMIT 100;