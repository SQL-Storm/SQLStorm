
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 0 AS level 
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier WHERE s_nationkey = s.s_nationkey)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier WHERE s_nationkey = s.nationkey)
),
FilteredParts AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_retailprice,
           ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rnk
    FROM part p
    WHERE p.p_retailprice > 50
),
CustomerStats AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent,
           COUNT(o.o_orderkey) AS order_count,
           RANK() OVER (ORDER BY SUM(o.o_totalprice) DESC) AS spend_rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
EligibleSuppliers AS (
    SELECT s.s_suppkey, s.s_name, sh.level, COUNT(DISTINCT p.ps_partkey) AS parts_count
    FROM SupplierHierarchy sh
    JOIN partsupp p ON sh.s_suppkey = p.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, sh.level
)
SELECT DISTINCT cs.c_name,
       CASE 
           WHEN es.parts_count > 5 THEN 'Premium Supplier'
           ELSE 'Standard Supplier'
       END AS supplier_category,
       fs.p_name, fs.p_retailprice
FROM CustomerStats cs
JOIN EligibleSuppliers es ON cs.c_custkey = (SELECT o.o_custkey
                                              FROM orders o
                                              JOIN lineitem l ON o.o_orderkey = l.l_orderkey
                                              WHERE l.l_suppkey = es.s_suppkey
                                              LIMIT 1)
LEFT JOIN FilteredParts fs ON es.parts_count > 3 AND fs.rnk <= 10
WHERE cs.total_spent IS NOT NULL
ORDER BY cs.total_spent DESC, es.parts_count DESC;
