
WITH RECURSIVE nation_hierarchy AS (
    SELECT n_nationkey, n_name, n_regionkey, 0 AS level
    FROM nation
    WHERE n_regionkey IS NOT NULL
    UNION ALL
    SELECT n.n_nationkey, n.n_name, n.n_regionkey, nh.level + 1
    FROM nation n
    JOIN nation_hierarchy nh ON n.n_regionkey = nh.n_nationkey
),
supplier_stats AS (
    SELECT
        s.s_suppkey,
        COUNT(DISTINCT ps.ps_partkey) AS part_count,
        SUM(ps.ps_availqty) AS total_availability,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
),
price_analysis AS (
    SELECT
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        (SELECT COUNT(DISTINCT l.l_orderkey)
         FROM lineitem l
         WHERE l.l_partkey = p.p_partkey AND l.l_returnflag = 'R') AS return_count,
        (SELECT SUM(l.l_extendedprice * (1 - l.l_discount))
         FROM lineitem l
         WHERE l.l_partkey = p.p_partkey) AS total_revenue,
        CASE 
            WHEN p.p_retailprice IS NULL THEN 'No Price' 
            WHEN p.p_retailprice < 100 THEN 'Cheap' 
            WHEN p.p_retailprice BETWEEN 100 AND 500 THEN 'Moderate' 
            ELSE 'Expensive' 
        END AS price_category
    FROM part p
),
final_report AS (
    SELECT 
        nh.n_name AS nation_name,
        ss.s_suppkey,
        ss.part_count,
        ss.total_availability,
        pa.total_revenue,
        pa.price_category
    FROM nation_hierarchy nh
    LEFT JOIN supplier_stats ss ON nh.n_nationkey = ss.s_suppkey
    LEFT JOIN price_analysis pa ON ss.part_count > 0 AND pa.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = ss.s_suppkey)
    WHERE ss.total_availability IS NOT NULL OR ss.part_count IS NULL
)
SELECT 
    nation_name,
    s_suppkey,
    part_count,
    total_availability,
    total_revenue,
    price_category,
    LAG(total_revenue) OVER (PARTITION BY nation_name ORDER BY total_revenue DESC) AS previous_revenue,
    CASE 
        WHEN total_revenue IS NULL THEN 'No Revenue'
        WHEN previous_revenue IS NULL OR total_revenue > previous_revenue * 1.10 THEN 'Increased Revenue'
        WHEN total_revenue < previous_revenue * 0.90 THEN 'Decreased Revenue'
        ELSE 'Stable Revenue' 
    END AS revenue_trend
FROM final_report
WHERE price_category != 'Expensive'
ORDER BY nation_name, total_revenue DESC;
