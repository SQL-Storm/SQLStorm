
WITH RECURSIVE CTE_Supplier AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 0 AS hierarchy_level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal < 1000

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_acctbal, cte.hierarchy_level + 1
    FROM supplier s
    JOIN CTE_Supplier cte ON s.s_suppkey = cte.s_suppkey + 1
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal < 10010
),
CTE_Part AS (
    SELECT p.p_partkey, p.p_name, p.p_mfgr, 
           ROW_NUMBER() OVER (PARTITION BY p.p_mfgr ORDER BY p.p_retailprice DESC) AS mfgr_rank,
           COUNT(*) OVER (PARTITION BY p.p_mfgr) AS part_count
    FROM part p
    WHERE p.p_size IS NOT NULL AND p.p_size BETWEEN 1 AND 50
)
SELECT 
    n.n_name AS nation_name,
    SUM(CASE 
        WHEN li.l_discount > 0.05 THEN li.l_extendedprice * (1 - li.l_discount) 
        ELSE COALESCE(li.l_extendedprice, 0) END) AS discounted_sales,
    AVG(s.s_acctbal) AS average_supplier_balance,
    COUNT(DISTINCT c.c_custkey) FILTER (WHERE c.c_mktsegment = 'BUILDING') AS building_customers,
    MAX(p.p_retailprice) AS max_part_price,
    STRING_AGG(DISTINCT p.p_name, ', ') FILTER (WHERE p.p_container IS NOT NULL) AS part_names
FROM lineitem li
JOIN orders o ON li.l_orderkey = o.o_orderkey
JOIN customer c ON o.o_custkey = c.c_custkey
JOIN partsupp ps ON li.l_partkey = ps.ps_partkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
JOIN CTE_Part p ON li.l_partkey = p.p_partkey
JOIN nation n ON s.s_nationkey = n.n_nationkey
WHERE o.o_orderstatus = 'O'
GROUP BY n.n_name
HAVING COUNT(DISTINCT s.s_suppkey) > (SELECT COUNT(*) FROM supplier WHERE s_acctbal < 5000)
ORDER BY n.n_name;
