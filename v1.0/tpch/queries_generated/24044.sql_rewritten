WITH RECURSIVE recursive_suppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 0 AS depth
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT ps.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, r.depth + 1
    FROM partsupp ps
    JOIN recursive_suppliers r ON ps.ps_suppkey = r.s_suppkey
    JOIN supplier s ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal IS NOT NULL AND r.depth < 5
), ranked_orders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_totalprice, 
           RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank_order
    FROM orders o
    WHERE o.o_orderdate BETWEEN '1996-01-01' AND '1996-12-31'
), nation_summary AS (
    SELECT n.n_nationkey, n.n_name, SUM(s.s_acctbal) AS total_acctbal, COUNT(DISTINCT r.s_suppkey) AS supplier_count
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    LEFT JOIN recursive_suppliers r ON s.s_suppkey = r.s_suppkey
    GROUP BY n.n_nationkey, n.n_name
), high_value_customer AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > (SELECT AVG(o_totalprice) FROM orders)
), part_statistics AS (
    SELECT p.p_partkey, 
           COUNT(DISTINCT ps.ps_suppkey) AS supplier_count, 
           SUM(ps.ps_availqty) AS total_available, 
           AVG(p.p_retailprice) AS avg_price
    FROM part p 
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey
)
SELECT ns.n_name, 
       ns.total_acctbal, 
       ns.supplier_count,
       COALESCE(hvc.total_spent, 0) AS high_value_spent,
       ps.avg_price,
       CASE 
            WHEN ps.avg_price IS NULL THEN 'Price not available'
            WHEN ns.total_acctbal > 10000 THEN 'High account balance'
            ELSE 'Standard account'
       END AS balance_category
FROM nation_summary ns
LEFT JOIN high_value_customer hvc ON ns.n_nationkey = hvc.c_custkey 
LEFT JOIN part_statistics ps ON ns.supplier_count > 1
WHERE ns.total_acctbal IS NOT NULL
ORDER BY ns.total_acctbal DESC, supplier_count ASC
OFFSET 5 ROWS
FETCH NEXT 10 ROWS ONLY;