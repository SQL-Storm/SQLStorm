
WITH RECURSIVE OrderHierarchy AS (
    SELECT 
        o_orderkey,
        o_custkey,
        o_orderdate,
        o_totalprice,
        o_orderstatus,
        1 AS order_level
    FROM orders
    WHERE o_orderstatus = 'O' 
    UNION ALL
    SELECT 
        o.o_orderkey,
        o.o_custkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        oh.order_level + 1
    FROM orders o
    JOIN OrderHierarchy oh ON o.o_custkey = oh.o_custkey 
    WHERE o.o_orderdate > (DATE '1998-10-01' - INTERVAL '1 year')
),
CustomerSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
),
PartSupplier AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        p.p_retailprice AS expected_price,
        (ps.ps_supplycost + ps.ps_supplycost * 0.1) AS over_price,
        CASE 
            WHEN p.p_retailprice IS NULL THEN 'Unknown'
            WHEN p.p_retailprice < ps.ps_supplycost THEN 'Underpriced'
            ELSE 'Competitively priced'
        END AS price_category
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
)
SELECT 
    cs.c_name,
    cs.total_orders,
    cs.total_spent,
    ph.order_level,
    ps.p_name,
    ps.expected_price,
    ps.over_price,
    ps.price_category
FROM CustomerSummary cs
LEFT JOIN OrderHierarchy ph ON cs.c_custkey = ph.o_custkey
LEFT JOIN PartSupplier ps ON ps.ps_availqty > 100
WHERE cs.total_spent > (SELECT AVG(total_spent) FROM CustomerSummary)
ORDER BY cs.total_spent DESC, ph.order_level ASC
LIMIT 10;
