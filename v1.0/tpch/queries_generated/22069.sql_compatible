
WITH RecursiveCTE AS (
    SELECT
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        ps.ps_availqty,
        ps.ps_supplycost,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY ps.ps_supplycost DESC) AS rn
    FROM
        part p
    LEFT JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE
        p.p_retailprice BETWEEN 10.00 AND 100.00
        AND (ps.ps_availqty IS NULL OR ps.ps_availqty > 0)
),
FilteredCTE AS (
    SELECT 
        r.r_name,
        n.n_name,
        SUM(CASE WHEN o.o_orderstatus = 'O' THEN l.l_extendedprice ELSE 0 END) AS total_order_value,
        COUNT(DISTINCT c.c_custkey) AS customer_count,
        AVG(l.l_discount) AS avg_discount
    FROM 
        region r
    JOIN 
        nation n ON r.r_regionkey = n.n_regionkey
    JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        lineitem l ON ps.ps_partkey = l.l_partkey
    JOIN 
        orders o ON l.l_orderkey = o.o_orderkey
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        r.r_name LIKE '%West%'
        AND l.l_shipmode IN ('AIR', 'TRUCK')
    GROUP BY 
        r.r_name, n.n_name
    HAVING 
        SUM(CASE WHEN o.o_orderstatus = 'O' THEN l.l_extendedprice ELSE 0 END) > 1000000
),
FinalResult AS (
    SELECT 
        f.r_name,
        f.n_name,
        f.total_order_value,
        f.customer_count,
        COALESCE(NULLIF(f.avg_discount, 0), 1.00) AS effective_avg_discount,
        CASE 
            WHEN f.customer_count = 0 THEN 'No Customers'
            ELSE 'Customers Found'
        END AS customer_status
    FROM 
        FilteredCTE f
    WHERE 
        EXISTS (SELECT 1 FROM RecursiveCTE r WHERE r.p_partkey = ps.ps_partkey)
)
SELECT 
    fr.r_name,
    fr.n_name,
    fr.total_order_value,
    fr.customer_count,
    fr.effective_avg_discount,
    fr.customer_status,
    CONCAT('Region: ', fr.r_name, ' - Nation: ', fr.n_name) AS region_nation_info
FROM 
    FinalResult fr
ORDER BY 
    fr.total_order_value DESC
OFFSET 5 ROWS
FETCH NEXT 10 ROWS ONLY;
