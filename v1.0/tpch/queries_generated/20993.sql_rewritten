WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 
           CAST(s.s_name AS varchar(100)) AS hierarchy_path, 
           1 AS level
    FROM supplier s
    WHERE s.s_name IS NOT NULL
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 
           CAST(CONCAT(sh.hierarchy_path, ' > ', s.s_name) AS varchar(100)), 
           sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
statistic_orders AS (
    SELECT o_orderkey, o_custkey, 
           CASE 
                WHEN o_orderstatus = 'O' THEN 'Open' 
                WHEN o_orderstatus = 'F' THEN 'Filled' 
                ELSE 'Other' 
           END AS order_status,
           SUM(l_extendedprice * (1 - l_discount)) AS total_revenue,
           ROW_NUMBER() OVER (PARTITION BY o_custkey ORDER BY SUM(l_extendedprice * (1 - l_discount)) DESC) AS rn
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o_orderkey, o_custkey, o_orderstatus
),
filtered_orders AS (
    SELECT fo.o_orderkey, fo.o_custkey, fo.total_revenue
    FROM statistic_orders fo
    WHERE rn <= 5 AND fo.total_revenue IS NOT NULL
),
nation_customer_stats AS (
    SELECT n.n_nationkey, n.n_name,
           COUNT(DISTINCT c.c_custkey) AS customer_count,
           SUM(c.c_acctbal) AS total_account_balance,
           AVG(c.c_acctbal) AS avg_account_balance
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    GROUP BY n.n_nationkey, n.n_name
)
SELECT nh.n_name, nh.customer_count, nh.total_account_balance,
       f.total_revenue,
       CASE 
           WHEN f.total_revenue IS NULL THEN 'No Revenue Generated' 
           ELSE 'Revenue Recorded' 
       END AS revenue_status,
       sh.hierarchy_path,
       DATE_TRUNC('month', cast('1998-10-01' as date)) AS report_month
FROM nation_customer_stats nh
LEFT JOIN filtered_orders f ON nh.customer_count > 0
LEFT JOIN supplier_hierarchy sh ON nh.n_nationkey = sh.s_nationkey
WHERE nh.customer_count > 10
  AND (nh.total_account_balance / NULLIF(nh.customer_count, 0)) > 1000
ORDER BY nh.n_name ASC, f.total_revenue DESC
LIMIT 50;