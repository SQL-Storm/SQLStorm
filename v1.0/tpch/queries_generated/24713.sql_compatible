
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, s_comment, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier) 
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, s.s_comment, sh.level + 1
    FROM supplier_hierarchy sh
    JOIN partsupp ps ON sh.s_suppkey = ps.ps_suppkey
    JOIN supplier s ON ps.ps_partkey = s.s_suppkey
    WHERE s.s_acctbal < sh.s_acctbal 
),
region_info AS (
    SELECT r.r_regionkey, COUNT(DISTINCT n.n_nationkey) AS nation_count,
           STRING_AGG(DISTINCT n.n_name, ', ' ORDER BY n.n_name) AS nations,
           SUM(s.s_acctbal) AS total_acctbal
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey
),
order_summary AS (
    SELECT o.o_orderkey, o.o_orderdate,
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue, 
           COUNT(l.l_orderkey) AS line_count
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate
)
SELECT r.r_name, r.nation_count, r.total_acctbal, os.total_revenue, os.line_count,
       CASE 
           WHEN os.total_revenue > (SELECT AVG(total_revenue) FROM order_summary) THEN 'Above Average'
           ELSE 'Below Average'
       END AS revenue_performance,
       CASE 
           WHEN r.total_acctbal IS NULL THEN 'Insufficient Data'
           WHEN r.total_acctbal BETWEEN 0 AND 1000 THEN 'Low'
           WHEN r.total_acctbal BETWEEN 1001 AND 5000 THEN 'Medium'
           ELSE 'High'
       END AS acctbal_category
FROM region_info r
LEFT JOIN order_summary os ON r.nation_count = os.line_count
WHERE r.nation_count > (SELECT COUNT(DISTINCT n.n_nationkey) FROM nation) / 2 
ORDER BY r.r_name, os.total_revenue DESC
LIMIT 100;
