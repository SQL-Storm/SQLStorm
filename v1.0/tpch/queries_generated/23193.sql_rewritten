WITH RecursiveSupplierChain AS (
    SELECT s.s_suppkey, s.s_name, ps.ps_partkey, 1 AS level
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal > 5000

    UNION ALL

    SELECT s.s_suppkey, s.s_name, ps.ps_partkey, r.level + 1
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN RecursiveSupplierChain r ON s.s_suppkey = r.s_suppkey
    WHERE r.level < 5
),

AggregateLineItems AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
        COUNT(*) AS total_items,
        AVG(l.l_discount) AS avg_discount
    FROM lineitem l
    WHERE l.l_returnflag = 'N'
    AND l.l_shipdate >= '1997-01-01'
    GROUP BY l.l_orderkey
    HAVING COUNT(*) > 10
),

FilteredOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        COALESCE(ol.total_sales, 0) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY ol.total_sales DESC) AS rank_sales
    FROM orders o
    LEFT JOIN AggregateLineItems ol ON o.o_orderkey = ol.l_orderkey
    WHERE o.o_orderstatus = 'F'
)

SELECT 
    p.p_name,
    s.s_name,
    SUM(CASE WHEN ro.total_sales > 1000 THEN 1 ELSE 0 END) AS high_value_orders,
    AVG(ro.total_sales) AS avg_order_value,
    COUNT(DISTINCT ro.o_orderkey) AS distinct_order_count
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
JOIN FilteredOrders ro ON s.s_suppkey = ro.o_orderkey
LEFT JOIN nation n ON s.s_nationkey = n.n_nationkey
LEFT JOIN region r ON n.n_regionkey = r.r_regionkey
GROUP BY p.p_name, s.s_name
HAVING SUM(CASE WHEN p.p_retailprice IS NULL THEN 1 ELSE 0 END) < 5 
   OR COUNT(CASE WHEN ro.rank_sales = 1 THEN 1 END) > 5
ORDER BY high_value_orders DESC, avg_order_value ASC;