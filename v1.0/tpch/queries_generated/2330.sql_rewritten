WITH CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
SupplierParts AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey, s.s_name, p.p_partkey, p.p_name
),
LineItemStats AS (
    SELECT 
        l.l_partkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
        AVG(l.l_quantity) AS avg_quantity
    FROM 
        lineitem l
    WHERE 
        l.l_returnflag = 'N' AND 
        l.l_shipdate >= DATE '1997-01-01'
    GROUP BY 
        l.l_partkey
)
SELECT 
    c.c_name,
    co.total_orders,
    co.total_spent,
    sp.s_name AS supplier_name,
    sp.p_name AS part_name,
    ls.revenue,
    ls.avg_quantity,
    CASE 
        WHEN ls.revenue IS NULL THEN 'No Sales'
        ELSE 'Sales Exist'
    END AS sales_status
FROM 
    CustomerOrders co
JOIN 
    nation n ON n.n_nationkey = (SELECT c.c_nationkey FROM customer c WHERE c.c_custkey = co.c_custkey)
LEFT JOIN 
    SupplierParts sp ON sp.p_partkey IN (SELECT p.p_partkey FROM part p WHERE p.p_mfgr = 'Manufacturer1')
LEFT JOIN 
    LineItemStats ls ON ls.l_partkey = sp.p_partkey
WHERE 
    co.total_orders > 0 OR ls.revenue IS NOT NULL
ORDER BY 
    co.total_spent DESC, ls.revenue DESC
LIMIT 100;