
WITH RECURSIVE OrderHierarchy AS (
    SELECT o_orderkey, o_custkey, 1 AS level
    FROM orders
    WHERE o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_custkey, oh.level + 1
    FROM orders o
    JOIN OrderHierarchy oh ON o.o_custkey = oh.o_custkey
    WHERE o.o_orderstatus = 'O' AND oh.level < 5
), 
SupplierDetails AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, COUNT(DISTINCT ps.ps_partkey) AS supplied_parts
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, s.s_acctbal
), 
CustomerSegmentation AS (
    SELECT c.c_custkey, c.c_mktsegment, AVG(o.o_totalprice) AS avg_order_value
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate >= DATE '1997-01-01'
    GROUP BY c.c_custkey, c.c_mktsegment
)
SELECT 
    p.p_partkey,
    p.p_name,
    p.p_mfgr,
    p.p_brand,
    COALESCE(SUM(li.l_extendedprice * (1 - li.l_discount)), 0) AS total_revenue,
    COUNT(DISTINCT sd.s_suppkey) AS num_suppliers,
    AVG(cs.avg_order_value) AS avg_cust_order_value,
    ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY COALESCE(SUM(li.l_extendedprice * (1 - li.l_discount)), 0) DESC) AS revenue_rank,
    CASE 
        WHEN COUNT(DISTINCT sd.s_suppkey) > 5 THEN 'High Supply'
        WHEN COUNT(DISTINCT sd.s_suppkey) BETWEEN 1 AND 5 THEN 'Medium Supply'
        ELSE 'Low Supply'
    END AS supply_category
FROM part p
LEFT JOIN lineitem li ON p.p_partkey = li.l_partkey
LEFT JOIN SupplierDetails sd ON p.p_partkey = sd.ps_partkey
LEFT JOIN CustomerSegmentation cs ON li.l_orderkey IN (SELECT o_orderkey FROM orders WHERE o_custkey = cs.c_custkey)
GROUP BY p.p_partkey, p.p_name, p.p_mfgr, p.p_brand, sd.ps_partkey, cs.avg_order_value
HAVING SUM(li.l_extendedprice * (1 - li.l_discount)) IS NOT NULL
ORDER BY total_revenue DESC, revenue_rank;
