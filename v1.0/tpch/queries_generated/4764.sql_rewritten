WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
), 
SupplierPartInfo AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        s.s_name,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        ps.ps_availqty,
        LEAD(ps.ps_supplycost, 1, 0) OVER (PARTITION BY ps.ps_partkey ORDER BY ps.ps_supplycost) AS next_supplycost
    FROM 
        partsupp ps
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
), 
NationOrderStats AS (
    SELECT 
        n.n_name,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_revenue
    FROM 
        nation n
    LEFT JOIN 
        customer c ON n.n_nationkey = c.c_nationkey
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        n.n_name
)
SELECT 
    p.p_name,
    p.p_brand,
    sp.s_name,
    COALESCE(sp.ps_availqty, 0) AS available_quantity,
    COALESCE(sp.next_supplycost, sp.ps_supplycost) AS effective_supplycost,
    NO.order_count,
    NO.total_revenue,
    CASE 
        WHEN NO.total_revenue > 10000 THEN 'High'
        WHEN NO.total_revenue BETWEEN 5000 AND 10000 THEN 'Medium'
        ELSE 'Low'
    END AS revenue_category
FROM 
    SupplierPartInfo sp
JOIN 
    RankedOrders ro ON sp.ps_partkey = (
        SELECT l.l_partkey
        FROM lineitem l
        WHERE l.l_orderkey = ro.o_orderkey
        LIMIT 1
    )
LEFT JOIN 
    NationOrderStats NO ON sp.s_name = NO.n_name
WHERE 
    sp.ps_availqty >= 10
    AND sp.p_retailprice BETWEEN 20 AND 200
ORDER BY 
    ro.o_orderdate DESC, 
    p.p_name ASC;