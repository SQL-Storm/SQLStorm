
WITH RecursiveCustomerCTE AS (
    SELECT c_custkey, c_nationkey, c_acctbal, c_name
    FROM customer
    WHERE c_acctbal > 1000
    
    UNION ALL
    
    SELECT c.c_custkey, c.c_nationkey, c.c_acctbal, c.c_name
    FROM customer c
    INNER JOIN RecursiveCustomerCTE r ON c.c_nationkey = r.c_nationkey
    WHERE c.c_acctbal > r.c_acctbal
),
PartSupplierCTE AS (
    SELECT ps.ps_partkey, SUM(ps.ps_availqty) AS total_availqty, 
           AVG(ps.ps_supplycost) AS avg_supplycost
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
OrderResults AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price,
           RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS rank_price
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus IN ('O', 'F')
    GROUP BY o.o_orderkey
)
SELECT 
    r.r_name,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    SUM(pr.total_availqty) AS total_available_quantity,
    SUM(CASE WHEN o.rank_price = 1 THEN o.total_price ELSE 0 END) AS highest_order_value,
    MAX(COALESCE(s.s_acctbal, 0)) AS max_supplier_acctbal
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN RecursiveCustomerCTE c ON c.c_nationkey = n.n_nationkey
LEFT JOIN PartSupplierCTE pr ON pr.ps_partkey IN (
    SELECT p.p_partkey 
    FROM part p 
    WHERE p.p_size >= 10 AND p.p_retailprice < 50.00
)
LEFT JOIN OrderResults o ON o.o_orderkey IN (
    SELECT DISTINCT lo.l_orderkey 
    FROM lineitem lo 
    WHERE lo.l_returnflag = 'R'
)
GROUP BY r.r_name
HAVING COUNT(DISTINCT c.c_custkey) > 5
ORDER BY total_available_quantity DESC;
