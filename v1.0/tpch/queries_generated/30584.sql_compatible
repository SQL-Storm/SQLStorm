
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
nations_with_regions AS (
    SELECT n.n_nationkey, n.n_name, r.r_name, n.n_comment
    FROM nation n
    LEFT JOIN region r ON n.n_regionkey = r.r_regionkey
),
top_parts AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_supply_cost DESC
    LIMIT 10
),
customer_summary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 10000
)
SELECT 
    c.c_name AS customer_name,
    sh.s_name AS supplier_name,
    p.p_name AS part_name,
    COALESCE(ns.r_name, 'Unknown') AS region_name,
    sh.level AS supplier_level,
    cs.total_spent AS customer_total_spent,
    p.total_supply_cost AS part_total_cost
FROM customer_summary cs
JOIN supplier_hierarchy sh ON sh.s_nationkey = (SELECT c_nationkey FROM customer WHERE c_custkey = cs.c_custkey)
JOIN top_parts p ON p.p_partkey = (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = sh.s_suppkey LIMIT 1)
LEFT JOIN nations_with_regions ns ON ns.n_nationkey = sh.s_nationkey
WHERE p.total_supply_cost IS NOT NULL
ORDER BY cs.total_spent DESC, sh.level ASC;
