
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_address, s_acctbal, s_nationkey, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_address, s.s_acctbal, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
QualifiedParts AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice, ps.ps_availqty, p.p_container
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE ps.ps_availqty > (SELECT AVG(ps_availqty) FROM partsupp)
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate >= '1997-01-01'
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 10000
)
SELECT 
    n.n_name AS nation,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    SUM(co.total_spent) AS total_spending,
    AVG(sp.s_acctbal) AS avg_supplier_balance,
    STRING_AGG(DISTINCT p.p_name, ', ') AS parts_supplied,
    COUNT(DISTINCT sp.s_suppkey) AS supplier_count
FROM nation n
LEFT JOIN customer c ON c.c_nationkey = n.n_nationkey
LEFT JOIN CustomerOrders co ON co.c_custkey = c.c_custkey
LEFT JOIN SupplierHierarchy sp ON sp.s_nationkey = n.n_nationkey
LEFT JOIN QualifiedParts p ON p.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = sp.s_suppkey)
GROUP BY n.n_name
HAVING COUNT(DISTINCT c.c_custkey) > 0
ORDER BY total_spending DESC, nation ASC;
