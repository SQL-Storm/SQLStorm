
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_custkey ORDER BY o.o_orderdate DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate > '1996-01-01'
), SupplierStats AS (
    SELECT 
        ps.ps_partkey,
        SUM(ps.ps_availqty) AS total_availqty,
        AVG(ps.ps_supplycost) AS avg_supplycost
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey
), CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
), LineItemSummary AS (
    SELECT 
        li.l_orderkey,
        SUM(li.l_extendedprice * (1 - li.l_discount)) AS net_revenue
    FROM 
        lineitem li
    WHERE 
        li.l_shipdate >= '1996-01-01'
    GROUP BY 
        li.l_orderkey
)

SELECT 
    cs.c_custkey,
    cs.c_name,
    COALESCE(co.total_orders, 0) AS total_orders,
    COALESCE(co.total_spent, 0.00) AS total_spent,
    MAX(ro.o_orderdate) AS last_order_date,
    ss.total_availqty,
    ss.avg_supplycost,
    ROW_NUMBER() OVER (ORDER BY COALESCE(co.total_spent, 0) DESC) AS ranking
FROM 
    customer cs
LEFT JOIN 
    CustomerOrders co ON cs.c_custkey = co.c_custkey
LEFT JOIN 
    RankedOrders ro ON cs.c_custkey = ro.o_orderkey
LEFT JOIN 
    SupplierStats ss ON ss.ps_partkey IN (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey = ro.o_orderkey)
GROUP BY 
    cs.c_custkey, cs.c_name, ss.total_availqty, ss.avg_supplycost
HAVING 
    COALESCE(co.total_spent, 0) > 10000
ORDER BY 
    ranking
LIMIT 50;
