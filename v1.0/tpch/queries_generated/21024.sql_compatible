
WITH NationwideOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS orders_count
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
HighValueCustomers AS (
    SELECT 
        n.n_nationkey,
        SUM(no.total_spent) AS national_total
    FROM 
        national n
    JOIN 
        NationwideOrders no ON n.n_nationkey = (
            SELECT 
                c.c_nationkey 
            FROM 
                customer c 
            WHERE 
                c.c_custkey = no.c_custkey
        )
    GROUP BY 
        n.n_nationkey
),
PartSupplierInfo AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost ASC) AS supplier_rank
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
),
FilteredSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
    HAVING 
        SUM(ps.ps_supplycost) > (
            SELECT 
                AVG(total_supply_cost)
            FROM 
                FilteredSuppliers
        )
),
MaxCustomerSpent AS (
    SELECT 
        MAX(total_spent) AS max_spent
    FROM 
        NationwideOrders
),
RecentHighValueOrders AS (
    SELECT 
        l.l_orderkey,
        l.l_quantity,
        l.l_extendedprice,
        l.l_discount,
        CASE
            WHEN l.l_returnflag = 'R' THEN 'Returned'
            ELSE 'Not Returned'
        END AS return_status
    FROM 
        lineitem l
    JOIN 
        orders o ON l.l_orderkey = o.o_orderkey
    WHERE 
        o.o_orderdate >= DATE '1998-10-01' - INTERVAL '1 month'
        AND o.o_totalprice > (SELECT max_spent FROM MaxCustomerSpent)
)
SELECT 
    ps.p_partkey,
    ps.ps_availqty,
    ps.ps_supplycost,
    COALESCE(NULLIF(ps_total, 0), 'No supply available') AS supply_status,
    COUNT(DISTINCT r.n_nationkey) AS supplier_count,
    SUM(CASE WHEN r.n_name IS NOT NULL THEN r.n_regionkey ELSE 0 END) AS influential_regions
FROM 
    PartSupplierInfo ps
LEFT JOIN 
    FilteredSuppliers s ON ps.supplier_rank <= 3
LEFT JOIN 
    nation r ON s.s_nationkey = r.n_nationkey
GROUP BY 
    ps.p_partkey, ps.ps_availqty, ps.ps_supplycost
ORDER BY 
    ps.ps_supplycost DESC
LIMIT 50 OFFSET 10;
