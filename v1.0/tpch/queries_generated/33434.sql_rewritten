WITH RECURSIVE OrderHierarchy AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, 1 AS Level
    FROM orders o
    WHERE o.o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, oh.Level + 1
    FROM orders o
    JOIN OrderHierarchy oh ON o.o_orderkey = oh.o_orderkey
    WHERE o.o_orderdate > oh.o_orderdate
),
CustomerSummary AS (
    SELECT c.c_custkey, c.c_name, 
           SUM(o.o_totalprice) AS TotalSpent,
           COUNT(o.o_orderkey) AS OrderCount
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
PartSupplierInfo AS (
    SELECT p.p_partkey, p.p_name, 
           SUM(ps.ps_availqty) AS TotalAvailable,
           AVG(ps.ps_supplycost) AS AvgSupplyCost
    FROM part p
    INNER JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
LineItemAnalytics AS (
    SELECT l.l_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS NetRevenue,
           COUNT(DISTINCT l.l_partkey) AS DistinctParts,
           RANK() OVER (PARTITION BY l.l_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS RevenueRank
    FROM lineitem l
    WHERE l.l_shipdate >= DATE '1996-01-01' AND l.l_shipdate < DATE '1997-01-01'
    GROUP BY l.l_orderkey
)
SELECT cs.c_name, 
       cs.TotalSpent,
       p.p_name, 
       psi.TotalAvailable,
       li.NetRevenue,
       li.RevenueRank,
       CASE 
           WHEN cs.TotalSpent > 1000 THEN 'High Value Customer'
           WHEN cs.TotalSpent BETWEEN 500 AND 1000 THEN 'Medium Value Customer'
           ELSE 'Low Value Customer'
       END AS CustomerTier
FROM CustomerSummary cs
LEFT JOIN PartSupplierInfo psi ON cs.TotalSpent > 1000
LEFT JOIN LineItemAnalytics li ON li.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cs.c_custkey)
JOIN part p ON p.p_partkey IN (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey = li.l_orderkey)
WHERE cs.TotalSpent IS NOT NULL
ORDER BY cs.TotalSpent DESC, li.NetRevenue DESC;