
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderstatus,
        o.o_totalprice,
        o.o_orderdate,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank_status
    FROM orders o
),
CustomerSuppliers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        c.c_mktsegment,
        s.s_suppkey,
        s.s_acctbal AS supplier_acctbal
    FROM customer c
    JOIN supplier s ON c.c_nationkey = s.s_nationkey
),
ProductInfo AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        AVG(ps.ps_supplycost) AS avg_supplycost,
        SUM(ps.ps_availqty) AS total_availqty
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
DateRange AS (
    SELECT
        MIN(l_shipdate) AS min_shipdate,
        MAX(l_shipdate) AS max_shipdate
    FROM lineitem
    WHERE l_shipdate IS NOT NULL
),
CustomerRanked AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        ROW_NUMBER() OVER (ORDER BY c.c_acctbal DESC) AS cust_rank
    FROM customer c
    WHERE c.c_acctbal IS NOT NULL
),
QualifiedLineItems AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price,
        COUNT(l.l_orderkey) AS lineitem_count
    FROM lineitem l
    WHERE l.l_returnflag = 'N'
    GROUP BY l.l_orderkey
)
SELECT 
    DISTINCT cs.c_name,
    cs.c_acctbal,
    CASE 
        WHEN cr.cust_rank > 10 THEN 'High Value'
        ELSE 'Regular'
    END AS customer_type,
    pi.p_name,
    pi.avg_supplycost,
    COALESCE(li.total_price, 0) AS order_total,
    d.min_shipdate,
    d.max_shipdate,
    SUM(li.total_price) OVER (PARTITION BY cs.c_custkey ORDER BY cs.c_custkey) AS cumulative_order_value
FROM CustomerSuppliers cs
JOIN CustomerRanked cr ON cs.c_custkey = cr.c_custkey
JOIN ProductInfo pi ON pi.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_availqty > 0)
LEFT JOIN QualifiedLineItems li ON li.l_orderkey IN (SELECT o.o_orderkey FROM RankedOrders o WHERE o.o_orderstatus = 'O')
CROSS JOIN DateRange d
WHERE cs.supplier_acctbal > (SELECT AVG(s.s_acctbal) FROM supplier s WHERE s.s_acctbal IS NOT NULL)
  AND d.min_shipdate < DATE '1998-10-01'
ORDER BY cs.c_acctbal DESC, pi.avg_supplycost;
