
WITH RECURSIVE PriceHierarchy AS (
    SELECT 
        p_partkey,
        p_name,
        p_size,
        p_retailprice,
        CAST(p_name AS CHAR(100)) AS full_description
    FROM 
        part
    WHERE 
        p_retailprice IS NOT NULL
    UNION ALL
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_size,
        p.p_retailprice,
        CAST(ph.full_description || ' (Size: ' || p.p_size || ')' AS CHAR(100))
    FROM 
        part p
    INNER JOIN 
        PriceHierarchy ph ON p.p_partkey = ph.p_partkey
    WHERE 
        p.p_size > ph.p_size
),
CustomerOrderStats AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
SupplierPricing AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
RankedCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        cs.total_spent,
        cs.total_orders,
        RANK() OVER (ORDER BY cs.total_spent DESC) AS rank
    FROM 
        CustomerOrderStats cs
    JOIN 
        customer c ON cs.c_custkey = c.c_custkey
)
SELECT 
    ph.full_description,
    rc.c_name,
    rc.total_spent,
    COALESCE(sp.total_cost, 0) AS total_supplier_cost,
    CASE 
        WHEN rc.total_orders > 0 THEN rc.total_spent / rc.total_orders
        ELSE 0
    END AS avg_order_value
FROM 
    PriceHierarchy ph
LEFT JOIN 
    RankedCustomers rc ON rc.rank <= 10
LEFT JOIN 
    SupplierPricing sp ON sp.s_suppkey IN (
        SELECT 
            ps.ps_suppkey 
        FROM 
            partsupp ps 
        WHERE 
            ps.ps_partkey = ph.p_partkey
    )
WHERE 
    ph.p_retailprice > 100
ORDER BY 
    avg_order_value DESC;
