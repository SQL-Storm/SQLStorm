WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderstatus,
        o.o_totalprice,
        o.o_orderdate,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) as OrderRank
    FROM orders o
    WHERE o.o_orderdate >= DATE '1996-01-01' 
      AND o.o_orderdate < DATE '1997-01-01'
),
CustomerSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
SalesAnalysis AS (
    SELECT 
        l.l_partkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
        COUNT(l.l_orderkey) AS line_count,
        AVG(l.l_quantity) AS avg_quantity
    FROM lineitem l
    WHERE l.l_shipdate >= DATE '1996-01-01' 
      AND l.l_shipdate < DATE '1997-01-01'
    GROUP BY l.l_partkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    COALESCE(sa.total_sales, 0) AS total_sales,
    COALESCE(cs.total_spent, 0) AS total_spent_by_customers,
    ss.total_supply_cost,
    CASE 
        WHEN cs.order_count IS NULL THEN 'No Orders'
        WHEN cs.total_spent > 10000 THEN 'High Value Customer'
        ELSE 'Regular Customer'
    END AS customer_segment
FROM part p
LEFT JOIN SalesAnalysis sa ON p.p_partkey = sa.l_partkey
LEFT JOIN CustomerSummary cs ON cs.order_count >= 1
LEFT JOIN SupplierStats ss ON p.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = ss.s_suppkey)
WHERE p.p_retailprice IS NOT NULL
ORDER BY total_sales DESC, p.p_partkey;