
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_custkey, c_name, c_nationkey, c_acctbal, 1 AS level
    FROM customer
    WHERE c_acctbal > 5000
    UNION ALL
    SELECT c.c_custkey, c.c_name, c.c_nationkey, c.c_acctbal, ch.level + 1
    FROM customer c
    JOIN CustomerHierarchy ch ON c.c_nationkey = ch.c_nationkey
    WHERE c.c_acctbal > 5000 AND ch.level < 5
),
AggregatedSupplierCosts AS (
    SELECT ps.ps_partkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supplycost
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
QualifiedParts AS (
    SELECT p.p_partkey, p.p_name, 
           CASE 
               WHEN p.p_size > 30 THEN 'Large'
               WHEN p.p_size BETWEEN 15 AND 30 THEN 'Medium'
               ELSE 'Small'
           END AS size_category,
           AVG(l.l_discount) AS avg_discount
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    WHERE l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY p.p_partkey, p.p_name, p.p_size
),
RankedOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate,
           RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS total_price_rank
    FROM orders o
)
SELECT 
    ch.c_name,
    ch.c_acctbal,
    p.p_name,
    p.size_category,
    COALESCE(agg.total_supplycost, 0) AS total_supplycost,
    ro.o_orderkey,
    ro.o_totalprice,
    ro.o_orderdate,
    ro.total_price_rank
FROM CustomerHierarchy ch
LEFT JOIN QualifiedParts p ON p.p_partkey IN (
    SELECT ps.ps_partkey 
    FROM partsupp ps
    LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE s.s_nationkey = ch.c_nationkey
)
LEFT JOIN AggregatedSupplierCosts agg ON p.p_partkey = agg.ps_partkey
LEFT JOIN RankedOrders ro ON ro.o_orderkey IN (
    SELECT o.o_orderkey 
    FROM orders o 
    WHERE o.o_custkey = ch.c_custkey AND o.o_orderstatus = 'O'
)
WHERE ch.c_acctbal IS NOT NULL 
ORDER BY ch.c_acctbal DESC, p.p_name ASC;
