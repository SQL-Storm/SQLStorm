
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier) AND sh.level < 5
),
sales_summary AS (
    SELECT
        c.c_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        RANK() OVER (ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS sales_rank
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus = 'F' AND l.l_returnflag = 'N'
    GROUP BY c.c_name
),
top_sales AS (
    SELECT c_name, total_sales, total_orders
    FROM sales_summary
    WHERE sales_rank <= 10
)
SELECT
    ph.p_name,
    ph.p_brand,
    ph.p_container,
    SUM(ps.ps_availqty) AS total_avail_qty,
    COALESCE(SUM(ps.ps_supplycost), 0) AS total_supply_cost,
    COALESCE(s.total_sales, 0) AS associated_sales
FROM part ph
LEFT JOIN partsupp ps ON ph.p_partkey = ps.ps_partkey
LEFT JOIN top_sales s ON ph.p_brand = s.c_name
GROUP BY ph.p_name, ph.p_brand, ph.p_container
HAVING SUM(ps.ps_availqty) > 100 OR COALESCE(s.total_sales, 0) > 5000
ORDER BY total_avail_qty DESC, associated_sales ASC;
