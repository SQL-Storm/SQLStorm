
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_totalprice, 
        o.o_orderstatus, 
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderdate >= CURRENT_DATE - INTERVAL '1 year'
),
SupplierSummary AS (
    SELECT 
        s.s_suppkey, 
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT ps.ps_partkey) AS part_count
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
),
TopSuppliers AS (
    SELECT 
        s.s_suppkey, 
        s.s_name
    FROM SupplierSummary ss
    JOIN supplier s ON s.s_suppkey = ss.s_suppkey
    WHERE ss.total_supply_cost > (SELECT AVG(total_supply_cost) FROM SupplierSummary)
),
CustomerOrderCount AS (
    SELECT 
        c.c_custkey, 
        COUNT(o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.custkey
)

SELECT 
    co.c_custkey, 
    co.order_count, 
    so.s_suppkey,
    so.s_name,
    ro.o_orderkey, 
    ro.o_totalprice,
    ro.o_orderstatus,
    CASE 
        WHEN ro.o_orderstatus = 'F' THEN 'Finalized'
        WHEN ro.o_orderstatus = 'P' THEN 'Pending'
        ELSE 'Unknown' 
    END AS order_finality_status
FROM CustomerOrderCount co
JOIN TopSuppliers so ON co.order_count > 0
LEFT JOIN RankedOrders ro ON so.s_suppkey = (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey = (SELECT p.p_partkey FROM part p WHERE p.p_size IS NOT NULL ORDER BY p.p_retailprice DESC LIMIT 1))
WHERE co.order_count > (SELECT AVG(order_count) FROM CustomerOrderCount)
ORDER BY co.order_count DESC, ro.o_totalprice DESC;
