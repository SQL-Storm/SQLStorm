WITH RECURSIVE part_hierarchy AS (
    SELECT p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment, 1 AS level
    FROM part
    WHERE p_size <= 20
    
    UNION ALL
    
    SELECT p.p_partkey, p.p_name, p.p_mfgr, p.p_brand, p.p_type, p.p_size, p.p_container, p.p_retailprice, p.p_comment, ph.level + 1
    FROM part p
    JOIN part_hierarchy ph ON p.p_partkey = ph.p_partkey + 1
    WHERE ph.level < 5
),
customer_orders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL AND c.c_acctbal > 100
    GROUP BY c.c_custkey, c.c_name
),
supplier_part AS (
    SELECT s.s_suppkey, s.s_name, ps.ps_partkey, ps.ps_availqty, ps.ps_supplycost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal BETWEEN 100 AND 1000
),
filtered_lineitems AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_quantity, l.l_extendedprice,
           CASE 
               WHEN l.l_discount > 0.1 THEN l.l_extendedprice * (1 - l.l_discount)
               ELSE l.l_extendedprice 
           END AS adjusted_price,
           ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_linenumber) AS row_num
    FROM lineitem l
    WHERE l.l_returnflag = 'N' AND l.l_shipdate >= '1995-01-01'
)
SELECT ph.p_name, ph.p_brand, ph.level, co.c_name, co.total_spent,
       COUNT(sp.ps_partkey) AS supplier_count, 
       SUM(COALESCE(fl.adjusted_price, 0)) AS total_adjusted_price
FROM part_hierarchy ph
JOIN customer_orders co ON co.total_spent > 500
LEFT JOIN supplier_part sp ON sp.ps_partkey = ph.p_partkey
LEFT JOIN filtered_lineitems fl ON fl.l_partkey = ph.p_partkey
GROUP BY ph.p_name, ph.p_brand, ph.level, co.c_name, co.total_spent
HAVING COUNT(sp.ps_partkey) > 2
ORDER BY total_adjusted_price DESC
LIMIT 10;