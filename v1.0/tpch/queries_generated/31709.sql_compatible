
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 0 AS level
    FROM supplier
    WHERE s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
TopCustomers AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal,
           RANK() OVER (ORDER BY c.c_acctbal DESC) AS rank
    FROM customer c
    WHERE c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)
),
PartSupplierStats AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_available,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
OrderDetails AS (
    SELECT o.o_orderkey, o.o_custkey, SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_order_value
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    GROUP BY o.o_orderkey, o.o_custkey
)
SELECT 
    c.c_name, 
    sh.s_name, 
    COUNT(DISTINCT od.o_orderkey) AS total_orders, 
    MAX(od.total_order_value) AS max_order_value, 
    SUM(p.total_available) AS total_inventory
FROM 
    TopCustomers c
LEFT JOIN 
    SupplierHierarchy sh ON c.c_nationkey = sh.s_nationkey
LEFT JOIN 
    OrderDetails od ON c.c_custkey = od.o_custkey
JOIN 
    PartSupplierStats p ON p.total_available > 1000
WHERE 
    od.total_order_value IS NOT NULL OR (od.total_order_value IS NULL AND sh.s_acctbal IS NOT NULL)
GROUP BY 
    c.c_name, sh.s_name
ORDER BY 
    total_orders DESC, max_order_value DESC
LIMIT 10;
