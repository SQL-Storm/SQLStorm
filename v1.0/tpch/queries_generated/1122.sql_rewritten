WITH SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_value,
        COUNT(DISTINCT ps.ps_partkey) AS part_count
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey AND o.o_orderstatus = 'O'
    GROUP BY 
        c.c_custkey, c.c_name
),
LineItemStats AS (
    SELECT 
        l_orderkey,
        SUM(l_extendedprice * (1 - l_discount)) AS total_line_value,
        DENSE_RANK() OVER (PARTITION BY l_orderkey ORDER BY l_shipdate DESC) AS ship_rank
    FROM 
        lineitem
    WHERE 
        l_shipdate >= '1997-01-01'
    GROUP BY 
        l_orderkey
)
SELECT 
    cs.c_name,
    COALESCE(cs.total_spent, 0) AS total_customer_spent,
    COALESCE(ss.total_supply_value, 0) AS total_supplier_supply_value,
    COUNT(DISTINCT li.l_orderkey) AS total_orders_incurred,
    AVG(lis.total_line_value) AS average_line_value,
    SUM(CASE 
        WHEN cs.order_count > 0 THEN 1 
        ELSE 0 
    END) AS customer_order_status
FROM 
    CustomerOrders cs
FULL OUTER JOIN 
    SupplierStats ss ON cs.c_custkey = ss.s_suppkey
JOIN 
    LineItemStats li ON cs.c_custkey = li.l_orderkey
LEFT JOIN 
    lineitem lis ON li.l_orderkey = lis.l_orderkey AND li.ship_rank = 1
GROUP BY 
    cs.c_name, ss.total_supply_value
HAVING 
    COALESCE(cs.total_spent, 0) > 10000
ORDER BY 
    total_customer_spent DESC, total_supplier_supply_value DESC;