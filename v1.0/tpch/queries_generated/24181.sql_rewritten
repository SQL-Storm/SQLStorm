WITH RankedOrders AS (
    SELECT 
        o_orderkey,
        o_orderstatus,
        o_totalprice,
        o_orderdate,
        ROW_NUMBER() OVER(PARTITION BY o_orderstatus ORDER BY o_totalprice DESC) AS rn
    FROM 
        orders
    WHERE 
        o_totalprice > (
            SELECT AVG(o_totalprice) FROM orders WHERE o_orderstatus = 'O'
        )
),
SupplierPartStats AS (
    SELECT 
        s.s_suppkey, 
        SUM(ps.ps_availqty) AS total_avail_qty,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey
),
HighValueSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        CASE 
            WHEN AVG(s.s_acctbal) IS NULL THEN 'No Balance'
            WHEN AVG(s.s_acctbal) > 1000 THEN 'High Value'
            ELSE 'Low Value' 
        END AS value_category
    FROM 
        supplier s
    GROUP BY 
        s.s_suppkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    p.p_retailprice,
    COALESCE(ss.total_avail_qty, 0) AS total_available_quantity,
    CASE
        WHEN r.r_name IS NULL THEN 'Unknown Region'
        ELSE r.r_name
    END AS region_name,
    (SELECT COUNT(*) FROM RankedOrders ro WHERE ro.o_orderstatus = 'O') AS open_orders_count,
    hs.value_category
FROM 
    part p
LEFT JOIN 
    partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN 
    SupplierPartStats ss ON ps.ps_suppkey = ss.s_suppkey
LEFT JOIN 
    nation n ON n.n_nationkey = (
        SELECT MIN(nation.n_nationkey) FROM nation WHERE nation.n_nationkey IS NOT NULL
    )
LEFT JOIN 
    region r ON n.n_regionkey = r.r_regionkey
LEFT JOIN 
    HighValueSuppliers hs ON ss.s_suppkey = hs.s_suppkey
WHERE 
    p.p_retailprice BETWEEN 10.00 AND 100.00
    AND (EXISTS (SELECT 1 FROM lineitem l WHERE l.l_partkey = p.p_partkey AND l.l_shipdate < cast('1998-10-01' as date))
    OR (p.p_comment LIKE '%fragile%' AND p.p_size > 10))
ORDER BY 
    p.p_partkey DESC, 
    total_available_quantity DESC
FETCH FIRST 50 ROWS ONLY
UNION ALL
SELECT 
    NULL AS p_partkey,
    'Aggregated Totals' AS p_name,
    SUM(p.p_retailprice) AS total_retail_price,
    SUM(COALESCE(ss.total_avail_qty, 0)) AS total_available_quantity,
    NULL AS region_name,
    (SELECT COUNT(*) FROM RankedOrders ro WHERE ro.o_orderstatus = 'O') AS open_orders_count,
    NULL AS value_category
FROM 
    part p
LEFT JOIN 
    partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN 
    SupplierPartStats ss ON ps.ps_suppkey = ss.s_suppkey
WHERE 
    p.p_retailprice IS NOT NULL;