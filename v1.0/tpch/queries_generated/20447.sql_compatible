
WITH RECURSIVE price_history AS (
    SELECT 
        ps_partkey,
        ps_suppkey,
        ps_supplycost,
        ROW_NUMBER() OVER (PARTITION BY ps_partkey ORDER BY ps_supplycost DESC) AS rank
    FROM 
        partsupp
    WHERE 
        ps_supplycost IS NOT NULL
),
supplier_details AS (
    SELECT 
        s.s_suppkey,
        COUNT(l.l_orderkey) AS order_count,
        AVG(l.l_extendedprice) AS avg_extended_price,
        SUM(l.l_discount) AS total_discount,
        MAX(l.l_tax) AS max_tax,
        MIN(l.l_shipdate) AS earliest_ship_date
    FROM 
        supplier s
    LEFT JOIN 
        lineitem l ON s.s_suppkey = l.l_suppkey
    GROUP BY 
        s.s_suppkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    p.p_mfgr,
    CASE 
        WHEN COALESCE(sd.order_count, 0) > 0 THEN 'Supplier Exists'
        ELSE 'No Supplier'
    END AS supplier_status,
    ph.ps_supplycost AS highest_cost,
    ph2.ps_supplycost AS second_highest_cost,
    sd.avg_extended_price,
    sd.total_discount,
    sd.max_tax,
    sd.earliest_ship_date,
    RANK() OVER (ORDER BY p.p_retailprice DESC) AS retail_rank,
    STRING_AGG(DISTINCT n.n_name, ', ') AS nation_names
FROM 
    part p
LEFT JOIN 
    price_history ph ON p.p_partkey = ph.ps_partkey AND ph.rank = 1
LEFT JOIN 
    price_history ph2 ON p.p_partkey = ph2.ps_partkey AND ph2.rank = 2
LEFT JOIN 
    supplier_details sd ON p.p_partkey = sd.s_suppkey
JOIN 
    partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN 
    supplier s ON ps.ps_suppkey = s.s_suppkey
JOIN 
    nation n ON s.s_nationkey = n.n_nationkey
WHERE 
    (p.p_size BETWEEN 1 AND 10 OR p.p_retailprice IS NOT NULL) 
    AND (sd.order_count > 5 OR sd.total_discount IS NULL)
GROUP BY 
    p.p_partkey, p.p_name, p.p_mfgr, ph.ps_supplycost, ph2.ps_supplycost, 
    sd.avg_extended_price, sd.total_discount, sd.max_tax, sd.earliest_ship_date, 
    retail_rank
ORDER BY 
    retail_rank DESC, p.p_partkey;
