
WITH RECURSIVE order_hierarchy AS (
    SELECT o.o_orderkey, o.o_orderdate, c.c_name, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate, c.c_name
    HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 1000

    UNION ALL

    SELECT oh.o_orderkey, oh.o_orderdate, oh.c_name, oh.total_price
    FROM order_hierarchy oh
    JOIN orders o ON oh.o_orderkey = o.o_orderkey
    WHERE o.o_orderstatus = 'F'
),
total_order_value AS (
    SELECT 
        n.n_name,
        SUM(oh.total_price) AS total_sales
    FROM order_hierarchy oh
    JOIN customer c ON oh.c_name = c.c_name
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    GROUP BY n.n_name
),
supplier_performance AS (
    SELECT 
        s.s_name,
        COUNT(DISTINCT ps.ps_partkey) AS part_count,
        AVG(ps.ps_supplycost) AS avg_supplycost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_name
    HAVING COUNT(DISTINCT ps.ps_partkey) > 10
),
part_analysis AS (
    SELECT 
        p.p_name,
        RANK() OVER (ORDER BY AVG(ps.ps_supplycost) DESC) AS supply_rank
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_name
)
SELECT 
    np.n_name,
    COALESCE(tov.total_sales, 0) AS total_sales,
    COALESCE(sp.part_count, 0) AS supplier_part_count,
    pa.p_name,
    pa.supply_rank
FROM total_order_value tov
FULL OUTER JOIN nation np ON np.n_name = 'France'
LEFT JOIN supplier_performance sp ON np.n_nationkey = sp.part_count 
LEFT JOIN part_analysis pa ON sp.part_count = pa.supply_rank
WHERE np.r_regionkey IN (SELECT r_regionkey FROM region WHERE r_name LIKE 'E%')
ORDER BY np.r_regionkey, total_sales DESC;
