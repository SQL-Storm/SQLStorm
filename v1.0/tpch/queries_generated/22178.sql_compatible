
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn
    FROM 
        part p
    WHERE 
        p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2)
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        o.o_orderkey,
        COUNT(l.l_orderkey) AS line_count,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_spent
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderstatus = 'O'
    GROUP BY 
        c.c_custkey, o.o_orderkey
),
SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        COUNT(DISTINCT ps.ps_partkey) AS unique_parts,
        SUM(ps.ps_availqty) AS total_available
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
)
SELECT 
    r.p_partkey, 
    r.p_name, 
    r.p_brand, 
    co.c_custkey,
    SUM(co.total_spent) AS total_spent_by_customer,
    si.unique_parts,
    si.total_available,
    CASE 
        WHEN COUNT(DISTINCT co.o_orderkey) > 5 THEN 'Active'
        ELSE 'Inactive'
    END AS customer_status,
    COALESCE(NULLIF(r.p_retailprice, SUM(co.total_spent)), 0) AS price_difference
FROM 
    RankedParts r
JOIN 
    CustomerOrders co ON r.p_partkey = co.o_orderkey
JOIN 
    SupplierInfo si ON r.p_partkey = si.s_suppkey
GROUP BY 
    r.p_partkey, r.p_name, r.p_brand, co.c_custkey, si.unique_parts, si.total_available
HAVING 
    COUNT(DISTINCT co.o_orderkey) < 10 
    OR r.p_retailprice > 100.00
ORDER BY 
    r.p_brand ASC, total_spent_by_customer DESC;
