WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > 10000
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O' AND o.o_totalprice > (
        SELECT AVG(o2.o_totalprice)
        FROM orders o2
        WHERE o2.o_orderdate > DATE '1996-01-01'
    )
),
PartSuppliers AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available_qty,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
)
SELECT 
    ch.c_custkey,
    ch.c_name,
    ps.p_name,
    ps.total_available_qty,
    co.o_orderkey,
    co.o_orderdate,
    co.o_totalprice,
    ROW_NUMBER() OVER (PARTITION BY ch.c_custkey ORDER BY co.o_totalprice DESC) AS order_rank,
    CASE 
        WHEN ps.total_available_qty IS NULL THEN 'Out Of Stock'
        ELSE 'In Stock'
    END AS stock_status,
    REPLACE(ch.c_name, 'Customer', 'Client') AS modified_customer_name
FROM CustomerOrders co
JOIN PartSuppliers ps ON co.o_orderkey = (
    SELECT l.l_orderkey
    FROM lineitem l
    WHERE l.l_orderkey = co.o_orderkey
    LIMIT 1
)
JOIN SupplierHierarchy sh ON sh.s_nationkey = co.o_orderdate
WHERE co.o_orderdate >= (cast('1998-10-01' as date) - INTERVAL '1 year')
ORDER BY stock_status, order_rank DESC;