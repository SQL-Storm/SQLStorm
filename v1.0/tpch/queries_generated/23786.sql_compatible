
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        RANK() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS rnk
    FROM 
        supplier s
), 
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY o.o_orderdate DESC) AS order_rank
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        o.o_orderstatus = 'O'
), 
SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_availqty * ps.ps_supplycost) AS total_supply_value
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey
), 
CustomerOrderSummary AS (
    SELECT 
        co.c_custkey,
        SUM(co.o_totalprice) AS total_spent
    FROM 
        CustomerOrders co
    WHERE 
        co.order_rank <= 5
    GROUP BY 
        co.c_custkey
)

SELECT 
    n.n_name AS nation_name,
    COUNT(DISTINCT c.c_custkey) AS total_customers,
    SUM(ps.total_supply_value) AS total_supply_value,
    AVG(ss.s_acctbal) AS average_supplier_acctbal
FROM 
    nation n
LEFT JOIN 
    customer c ON c.c_nationkey = n.n_nationkey
LEFT JOIN 
    CustomerOrderSummary co ON c.c_custkey = co.c_custkey
LEFT JOIN 
    RankedSuppliers ss ON ss.s_nationkey = n.n_nationkey AND ss.rnk <= 3
LEFT JOIN 
    SupplierParts ps ON ps.ps_suppkey = ss.s_suppkey
WHERE 
    ps.ps_supplycost IS NOT NULL OR co.total_spent IS NOT NULL
GROUP BY 
    n.n_name,
    c.c_custkey,
    ps.total_supply_value,
    ss.s_acctbal
HAVING 
    COUNT(DISTINCT ss.s_suppkey) > 0
ORDER BY 
    total_customers DESC, nation_name ASC;
