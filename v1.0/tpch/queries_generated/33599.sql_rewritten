WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal > (
        SELECT AVG(s_acctbal) FROM supplier 
        WHERE s_acctbal IS NOT NULL
    )
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'USA')
    WHERE sh.level < 5
)
SELECT c.c_name,
       SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
       COUNT(DISTINCT o.o_orderkey) AS order_count,
       ROUND(AVG(s.s_acctbal), 2) AS avg_supplier_balance,
       CASE 
           WHEN COUNT(DISTINCT o.o_orderkey) > 10 THEN 'High Value'
           ELSE 'Low Value'
       END AS customer_value,
       ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
FROM customer c
LEFT JOIN orders o ON c.c_custkey = o.o_custkey
LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
INNER JOIN SupplierHierarchy sh ON sh.s_nationkey = c.c_nationkey
WHERE o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
GROUP BY c.c_name, c.c_nationkey
HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > (SELECT AVG(total_revenue) FROM (
    SELECT SUM(l_extendedprice * (1 - l_discount)) AS total_revenue
    FROM lineitem l
    JOIN orders o ON l.l_orderkey = o.o_orderkey
    GROUP BY o.o_orderkey
) AS subquery)
ORDER BY revenue_rank
FETCH FIRST 10 ROWS ONLY;