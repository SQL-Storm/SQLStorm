WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM 
        part p
    WHERE 
        p.p_size IN (SELECT DISTINCT ps.ps_availqty 
                      FROM partsupp ps 
                      WHERE ps.ps_supplycost < 
                          (SELECT AVG(ps1.ps_supplycost) 
                           FROM partsupp ps1 
                           WHERE ps1.ps_availqty > 5))
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        SUM(CASE WHEN o.o_orderstatus = 'O' THEN o.o_totalprice ELSE 0 END) AS total_open_orders,
        COUNT(DISTINCT o.o_orderkey) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
    HAVING 
        SUM(o.o_totalprice) IS NOT NULL
),
SupplierNation AS (
    SELECT 
        s.s_suppkey,
        n.n_name,
        SUM(ps.ps_supplycost) AS total_supply_cost
    FROM 
        supplier s
    INNER JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    LEFT JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, n.n_name
    HAVING 
        SUM(ps.ps_supplycost) > 0
)
SELECT 
    cp.c_custkey,
    cp.total_open_orders,
    rp.p_name,
    COUNT(lp.l_orderkey) AS total_line_items,
    COALESCE(SUM(lp.l_extendedprice * (1 - lp.l_discount)), 0) AS total_revenue,
    JSON_OBJECT(
        'supplier_name', sn.n_name,
        'total_supply_cost', sn.total_supply_cost
    ) AS supplier_info
FROM 
    CustomerOrders cp
LEFT JOIN 
    lineitem lp ON cp.c_custkey = lp.l_orderkey
LEFT JOIN 
    RankedParts rp ON lp.l_partkey = rp.p_partkey AND rp.price_rank <= 5
LEFT JOIN 
    SupplierNation sn ON lp.l_suppkey = sn.s_suppkey
WHERE 
    lp.l_shipdate BETWEEN cast('1998-10-01' as date) - INTERVAL '30 days' AND cast('1998-10-01' as date)
    AND (sn.total_supply_cost IS NOT NULL OR sn.total_supply_cost IS NULL)
GROUP BY 
    cp.c_custkey, cp.total_open_orders, rp.p_name, sn.n_name, sn.total_supply_cost
HAVING 
    COUNT(lp.l_orderkey) > 0
ORDER BY 
    total_revenue DESC NULLS LAST;