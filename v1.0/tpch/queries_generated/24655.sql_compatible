
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 
           CAST(NULL AS integer) AS parent_suppkey,
           1 AS level
    FROM supplier
    WHERE s_acctbal > (
        SELECT AVG(s_acctbal) FROM supplier
    )
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 
           sh.s_suppkey AS parent_suppkey,
           sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_suppkey <> sh.s_suppkey
),
ProductInfo AS (
    SELECT p.p_partkey, p.p_name, p.p_brand,
           SUM(CASE WHEN l.l_returnflag = 'R' THEN l.l_quantity ELSE 0 END) AS total_returned,
           COUNT(l.l_orderkey) AS total_orders,
           AVG(l.l_discount) AS avg_discount
    FROM part p
    LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_brand
),
FilteredProducts AS (
    SELECT p.*, ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.total_orders DESC) AS rank
    FROM ProductInfo p
    WHERE p.total_returned < 100
)
SELECT r.r_name, COUNT(DISTINCT nh.c_nationkey) AS nation_count,
       SUM(sh.s_acctbal) AS total_supplier_balance,
       STRING_AGG(DISTINCT fp.p_name, ', ') AS top_products
FROM region r
LEFT JOIN nation n ON n.n_regionkey = r.r_regionkey
LEFT JOIN SupplierHierarchy sh ON sh.n_nationkey = n.n_nationkey
LEFT JOIN FilteredProducts fp ON fp.p_partkey IN (
    SELECT DISTINCT ps.ps_partkey
    FROM partsupp ps
    WHERE ps.ps_supplycost > 50.00
)
LEFT JOIN (
    SELECT c.c_nationkey, SUM(o.o_totalprice) AS nation_total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY c.c_nationkey
) AS nh ON nh.c_nationkey = n.n_nationkey
WHERE sh.level IS NOT NULL
GROUP BY r.r_name
HAVING SUM(sh.s_acctbal) > (
    SELECT AVG(s_acctbal) FROM supplier WHERE s_nationkey = r.r_regionkey
)
ORDER BY nation_count DESC, total_supplier_balance DESC;
