
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 0 AS depth
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s.s_acctbal) FROM supplier)  
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.depth + 1
    FROM supplier_hierarchy sh
    JOIN partsupp ps ON sh.s_suppkey = ps.ps_suppkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_retailprice > 50  
),
order_summary AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate >= DATE '1995-01-01' AND l.l_shipdate < DATE '1996-01-01'  
    GROUP BY o.o_orderkey
),
ranked_orders AS (
    SELECT os.o_orderkey, os.total_revenue, 
           RANK() OVER (ORDER BY os.total_revenue DESC) AS revenue_rank
    FROM order_summary os
),
top_suppliers AS (
    SELECT sh.s_suppkey, sh.s_name, sh.s_acctbal, COUNT(DISTINCT l.l_orderkey) AS order_count
    FROM supplier_hierarchy sh
    LEFT JOIN partsupp ps ON sh.s_suppkey = ps.ps_suppkey
    LEFT JOIN lineitem l ON ps.ps_partkey = l.l_partkey
    GROUP BY sh.s_suppkey, sh.s_name, sh.s_acctbal
    HAVING COUNT(DISTINCT l.l_orderkey) > 5  
)
SELECT ts.s_name, ts.s_acctbal, ro.total_revenue, ro.revenue_rank
FROM top_suppliers ts
JOIN ranked_orders ro ON ts.order_count = ro.revenue_rank
ORDER BY ro.revenue_rank ASC
LIMIT 10;
