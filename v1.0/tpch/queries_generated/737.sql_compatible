
WITH RankedOrders AS (
    SELECT
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rn
    FROM
        orders o
    WHERE
        o.o_orderdate >= DATE '1996-01-01'
),

SupplierPartDetails AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        RANK() OVER (PARTITION BY s.s_suppkey ORDER BY ps.ps_supplycost ASC) AS rank_cost
    FROM
        supplier s
    JOIN
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN
        part p ON ps.ps_partkey = p.p_partkey
),

CustomerOrderSummary AS (
    SELECT
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent
    FROM
        customer c
    LEFT JOIN
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY
        c.c_custkey, c.c_name
    HAVING
        SUM(o.o_totalprice) > 1000
)

SELECT
    co.c_custkey,
    co.c_name,
    co.total_spent,
    COALESCE(s.s_name, 'Not Available') AS supplier_name,
    COALESCE(p.p_name, 'Unknown Part') AS part_name,
    COUNT(DISTINCT po.o_orderkey) AS order_count,
    SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue
FROM
    CustomerOrderSummary co
LEFT JOIN
    RankedOrders po ON co.c_custkey = po.o_orderkey
LEFT JOIN
    lineitem li ON li.l_orderkey = po.o_orderkey
LEFT JOIN
    SupplierPartDetails s ON s.p_partkey = li.l_partkey AND s.rank_cost = 1
LEFT JOIN
    part p ON p.p_partkey = li.l_partkey
WHERE
    co.total_spent > 500
GROUP BY
    co.c_custkey, co.c_name, s.s_name, p.p_name
HAVING
    SUM(li.l_extendedprice * (1 - li.l_discount)) IS NOT NULL
ORDER BY
    total_revenue DESC
LIMIT 10;
