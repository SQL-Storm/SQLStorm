
WITH ranked_parts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        RANK() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    WHERE p.p_size > 10
),
supplier_details AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        COUNT(DISTINCT ps.ps_partkey) AS available_parts,
        SUM(ps.ps_supplycost) AS total_supply_cost
    FROM supplier s 
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier) 
    GROUP BY s.s_suppkey, s.s_name
),
customer_orders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    rp.p_partkey,
    rp.p_name,
    rp.p_retailprice,
    sd.s_name,
    co.c_name,
    co.order_count,
    co.total_spent,
    CASE 
        WHEN co.total_spent IS NULL THEN 'NO ORDERS' 
        ELSE 'HAS ORDERS' 
    END AS order_status
FROM ranked_parts rp
LEFT JOIN supplier_details sd ON rp.p_partkey IN (
    SELECT ps.ps_partkey 
    FROM partsupp ps 
    WHERE ps.ps_availqty > 0 AND ps.ps_supplycost < (SELECT AVG(ps_supplycost) FROM partsupp)
)
LEFT JOIN customer_orders co ON co.total_spent > 1000
WHERE rp.price_rank = 1
ORDER BY rp.p_retailprice DESC, sd.total_supply_cost ASC
LIMIT 20 OFFSET 10;
