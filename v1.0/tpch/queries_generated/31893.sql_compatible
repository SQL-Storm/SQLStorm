
WITH RECURSIVE SupplyCosts AS (
    SELECT ps.ps_partkey,
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
           RANK() OVER (PARTITION BY ps.ps_partkey ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS cost_rank
    FROM partsupp ps
    GROUP BY ps.ps_partkey
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 1000
),
CustomerOrders AS (
    SELECT c.c_custkey, 
           c.c_name, 
           COUNT(DISTINCT o.o_orderkey) AS order_count,
           SUM(o.o_totalprice) AS total_spent,
           ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(o.o_totalprice) DESC) AS rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(DISTINCT o.o_orderkey) > 0
)
SELECT r.r_name,
       SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
       COUNT(DISTINCT co.c_custkey) AS customer_count,
       COALESCE(SUM(s.s_acctbal), 0) AS total_account_balance,
       CASE 
           WHEN SUM(l.l_extendedprice * (1 - l.l_discount)) IS NULL THEN 'No Sales'
           ELSE 'Sales Available'
       END AS sales_status
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN lineitem l ON s.s_suppkey = l.l_suppkey
LEFT JOIN CustomerOrders co ON co.order_count > 0
JOIN SupplyCosts sc ON sc.ps_partkey = l.l_partkey
WHERE l.l_shipdate >= DATE '1997-01-01' AND (l.l_returnflag = 'N' OR l.l_returnflag IS NULL)
GROUP BY r.r_name
HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 10000
ORDER BY revenue DESC, r.r_name;
