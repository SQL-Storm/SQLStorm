
WITH RECURSIVE order_hierarchy AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, 1 AS level
    FROM orders o
    WHERE o.o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, oh.level + 1
    FROM orders o
    JOIN order_hierarchy oh ON o.o_custkey = oh.o_orderkey
    WHERE o.o_orderstatus != 'O'
),
supplier_performance AS (
    SELECT s.s_suppkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_value
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
),
lineitem_summary AS (
    SELECT l.l_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue,
           COUNT(*) AS item_count,
           RANK() OVER (PARTITION BY l.l_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM lineitem l
    GROUP BY l.l_orderkey
)
SELECT n.n_name,
       COALESCE(SUM(sp.total_supply_value), 0) AS total_supplier_value,
       COALESCE(SUM(ls.net_revenue), 0) AS total_net_revenue,
       COUNT(DISTINCT oh.o_orderkey) AS total_orders,
       CASE 
           WHEN COUNT(DISTINCT oh.o_orderkey) > 0 THEN AVG(ls.item_count) ELSE 0 
       END AS avg_items_per_order,
       COUNT(DISTINCT ls.item_count) AS distinct_item_counts
FROM nation n
LEFT JOIN supplier_performance sp ON n.n_nationkey = (
    SELECT s.s_nationkey FROM supplier s WHERE s.s_suppkey IN (SELECT DISTINCT ps.ps_suppkey FROM partsupp ps)
)
LEFT JOIN lineitem_summary ls ON ls.l_orderkey IN (
    SELECT oh.o_orderkey FROM order_hierarchy oh WHERE oh.level = 1
)
LEFT JOIN orders o ON o.o_orderkey = ls.l_orderkey
WHERE n.n_nationkey IS NOT NULL
GROUP BY n.n_name
HAVING COALESCE(SUM(ls.net_revenue), 0) > 1000000
ORDER BY total_net_revenue DESC;
