
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON sh.s_nationkey = s.s_nationkey
    WHERE sh.level < 3
),
PartSupplierDetails AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        COALESCE(SUM(ps.ps_availqty), 0) AS total_availability,
        AVG(ps.ps_supplycost) AS avg_supply_cost,
        ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_retailprice
),
CustomerOrderInfo AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent,
        MAX(o.o_orderdate) AS last_order_date
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    nh.r_name AS region_name,
    ps.p_name,
    ps.total_availability,
    ps.avg_supply_cost,
    c.total_orders,
    c.total_spent,
    CASE 
        WHEN c.total_orders IS NULL THEN 'No Orders'
        ELSE CONCAT('Orders Count: ', c.total_orders)
    END AS order_summary
FROM region nh
JOIN nation n ON n.n_regionkey = nh.r_regionkey
LEFT JOIN SupplierHierarchy sh ON sh.s_nationkey = n.n_nationkey
LEFT JOIN PartSupplierDetails ps ON ps.p_partkey = sh.s_suppkey
LEFT JOIN CustomerOrderInfo c ON c.c_custkey = sh.s_suppkey
WHERE ps.total_availability > 100
ORDER BY nh.r_name, ps.avg_supply_cost DESC
LIMIT 50;
