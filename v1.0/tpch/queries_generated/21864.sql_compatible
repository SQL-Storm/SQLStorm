
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        RANK() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    WHERE p.p_size BETWEEN 10 AND 20
),
SupplierStats AS (
    SELECT 
        s.s_suppkey,
        COUNT(DISTINCT ps.ps_partkey) AS part_count,
        SUM(ps.ps_availqty * ps.ps_supplycost) AS total_supply_value
    FROM supplier s
    INNER JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
),
FilteredCustomers AS (
    SELECT 
        co.c_custkey,
        co.total_spent,
        ROW_NUMBER() OVER (ORDER BY co.total_spent DESC) AS rank
    FROM CustomerOrders co
    WHERE co.total_spent IS NOT NULL AND co.total_spent > 100
),
PartSupplierDetail AS (
    SELECT 
        rp.p_partkey,
        rp.p_name,
        rp.p_retailprice,
        ss.part_count,
        ss.total_supply_value
    FROM RankedParts rp
    LEFT JOIN SupplierStats ss ON ss.part_count > 0
    WHERE rp.price_rank <= 5
),
FinalOutput AS (
    SELECT 
        f.c_custkey,
        f2.p_partkey,
        f2.p_name,
        f2.p_retailprice,
        f2.total_supply_value,
        f.total_spent
    FROM FilteredCustomers f
    JOIN PartSupplierDetail f2 ON f2.part_count IS NOT NULL
    JOIN nation n ON n.n_nationkey = (SELECT n_nationkey FROM nation WHERE n_name LIKE 'N%' LIMIT 1)
    WHERE f.total_spent > f2.p_retailprice / 2

    UNION ALL

    SELECT 
        f.c_custkey,
        f2.p_partkey,
        f2.p_name,
        SUM(f2.p_retailprice) AS avg_price,
        NULL AS total_supply_value,
        COUNT(f.c_custkey) OVER (PARTITION BY f.c_custkey) 
    FROM FilteredCustomers f
    JOIN PartSupplierDetail f2 ON f2.part_count IS NOT NULL
    GROUP BY f.c_custkey, f2.p_partkey, f2.p_name
)
SELECT DISTINCT 
    fo.c_custkey,
    fo.p_partkey,
    fo.p_name,
    COALESCE(fo.p_retailprice, 0) AS retail_price,
    COALESCE(fo.total_supply_value, 0.00) AS supply_value,
    COALESCE(fo.total_spent, 0.00) AS total_spent
FROM FinalOutput fo
WHERE fo.total_spent IS NOT NULL OR fo.total_supply_value IS NULL
ORDER BY fo.total_spent DESC NULLS LAST;
