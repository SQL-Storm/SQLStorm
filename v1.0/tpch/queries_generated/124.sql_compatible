
WITH CustomerOrderSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS order_count,
        ROW_NUMBER() OVER (ORDER BY SUM(o.o_totalprice) DESC) AS customer_rank
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
SupplierPartDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available_qty,
        AVG(ps.ps_supplycost) AS average_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey, s.s_name, p.p_partkey, p.p_name
),
HighValueCustomers AS (
    SELECT 
        cust.c_custkey,
        cust.c_name
    FROM 
        CustomerOrderSummary cust
    WHERE 
        cust.total_spent > (SELECT AVG(total_spent) FROM CustomerOrderSummary)
),
SupplierWithBetterPricing AS (
    SELECT 
        supplier.s_suppkey,
        supplier.s_name,
        p.p_partkey,
        p.p_name
    FROM 
        SupplierPartDetails supplier
    WHERE 
        supplier.average_supply_cost < (SELECT AVG(ps.ps_supplycost) FROM partsupp ps)
)
SELECT 
    hvc.c_name AS High_Value_Customer,
    sp.s_name AS Supplier_Name,
    sp.p_name AS Part_Name,
    COALESCE(sp.total_available_qty, 0) AS Total_Available_Quantity,
    COALESCE(sp.average_supply_cost, 0) AS Average_Supply_Cost
FROM 
    HighValueCustomers hvc
LEFT JOIN 
    SupplierWithBetterPricing sp ON hvc.c_custkey = sp.s_suppkey
ORDER BY 
    hvc.c_name, sp.s_name;
