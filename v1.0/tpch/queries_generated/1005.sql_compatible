
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderstatus,
        o.o_totalprice,
        o.o_orderdate,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= DATE '1998-10-01' - INTERVAL '1 year'
), 
CustomerStats AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        AVG(o.o_totalprice) AS avg_order_value
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
), 
SupplierPartInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_availqty) AS total_available,
        SUM(ps.ps_supplycost) AS total_supply_cost
    FROM 
        supplier s
    INNER JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
)
SELECT 
    cs.c_name,
    cs.total_spent,
    cs.total_orders,
    cs.avg_order_value,
    spi.s_name,
    spi.total_available,
    spi.total_supply_cost,
    ro.o_orderstatus
FROM 
    CustomerStats cs
LEFT JOIN 
    SupplierPartInfo spi ON spi.total_supply_cost > 1000
LEFT JOIN 
    RankedOrders ro ON ro.order_rank = cs.total_orders
WHERE 
    cs.total_spent IS NOT NULL AND
    (cs.avg_order_value > 500 OR cs.total_orders > 10)
ORDER BY 
    cs.total_spent DESC, 
    spi.total_available DESC;
