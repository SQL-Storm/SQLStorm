
WITH SupplierRank AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost,
        RANK() OVER (PARTITION BY p.p_type ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS rank
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey, s.s_name, p.p_type
),
CustomerOrderSummary AS (
    SELECT 
        c.c_custkey, 
        c.c_name, 
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
NationRegion AS (
    SELECT 
        n.n_name AS nation_name,
        r.r_name AS region_name,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM 
        nation n
    JOIN 
        region r ON n.n_regionkey = r.r_regionkey
    LEFT JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY 
        n.n_name, r.r_name
)

SELECT 
    CO.c_name AS customer_name,
    CO.total_spent,
    CO.order_count,
    SR.s_name AS supplier_name,
    SR.total_cost,
    NR.nation_name,
    NR.region_name,
    CASE 
        WHEN CO.total_spent IS NULL THEN 'No Orders'
        ELSE 'Orders Found' 
    END AS order_status
FROM 
    CustomerOrderSummary CO
LEFT JOIN 
    SupplierRank SR ON SR.rank = 1 
LEFT JOIN 
    NationRegion NR ON 1=1 
WHERE 
    CO.total_spent > (SELECT AVG(total_spent) FROM CustomerOrderSummary)
ORDER BY 
    CO.total_spent DESC, NR.supplier_count DESC;
