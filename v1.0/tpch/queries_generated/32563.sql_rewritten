WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (
        SELECT AVG(s_acctbal) FROM supplier
    )
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON sh.s_suppkey = s.s_suppkey
    WHERE sh.level < 3
),
CustomerRanked AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal,
           RANK() OVER (PARTITION BY c.c_nationkey ORDER BY c.c_acctbal DESC) as rank
    FROM customer c
    WHERE c.c_acctbal IS NOT NULL
),
AggregatedLineItems AS (
    SELECT l.l_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(*) AS item_count
    FROM lineitem l
    WHERE l.l_shipdate >= '1997-01-01' AND l.l_shipdate < '1997-12-31'
    GROUP BY l.l_orderkey
),
SupplierOrderStats AS (
    SELECT ps.ps_supplierkey, AVG(l.l_extendedprice) AS avg_price,
           COUNT(DISTINCT o.o_orderkey) AS orders_count
    FROM partsupp ps
    JOIN lineitem l ON ps.ps_partkey = l.l_partkey
    JOIN orders o ON l.l_orderkey = o.o_orderkey
    GROUP BY ps.ps_supplierkey
)
SELECT n.n_name AS nation, 
       COUNT(DISTINCT o.o_orderkey) AS total_orders,
       SUM(CASE WHEN c.rank <= 3 THEN c.c_acctbal ELSE 0 END) AS top_customers_revenue,
       COALESCE(AVG(ss.avg_price), 0) AS avg_supplier_price
FROM nation n
LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
LEFT JOIN orders o ON c.c_custkey = o.o_custkey
LEFT JOIN SupplierOrderStats ss ON ss.ps_supplierkey = (
    SELECT MIN(s.s_suppkey) FROM SupplierHierarchy s WHERE s.s_nationkey = n.n_nationkey
)
GROUP BY n.n_name
HAVING SUM(CASE WHEN o.o_orderstatus = 'F' THEN 1 ELSE 0 END) > 100
ORDER BY total_orders DESC;