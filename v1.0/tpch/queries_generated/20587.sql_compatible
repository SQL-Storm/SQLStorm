
WITH RECURSIVE SuppCount AS (
    SELECT s.s_suppkey, 
           s.s_name, 
           COUNT(DISTINCT ps.ps_partkey) AS part_count 
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey 
    GROUP BY s.s_suppkey, s.s_name
),
CustOrders AS (
    SELECT c.c_custkey, 
           c.c_name, 
           SUM(o.o_totalprice) AS total_spent,
           ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY SUM(o.o_totalprice) DESC) AS rn
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1995-12-31'
    GROUP BY c.c_custkey, c.c_name
),
PartInfo AS (
    SELECT p.p_partkey, 
           p.p_name, 
           AVG(ps.ps_supplycost) AS avg_supply_cost,
           STRING_AGG(DISTINCT s.s_name, ', ') AS supplier_names
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY p.p_partkey, p.p_name
)
SELECT 
    COALESCE(p.p_size, 0) AS part_size,
    ci.c_name, 
    COALESCE(supp.part_count, 0) AS supplier_count,
    pi.avg_supply_cost,
    ci.total_spent
FROM PartInfo pi
LEFT JOIN CustOrders ci ON ci.rn = 1 AND pi.p_partkey IN (
    SELECT ps.ps_partkey 
    FROM partsupp ps 
    WHERE ps.ps_supplycost > 50
    UNION 
    SELECT ps.ps_partkey 
    FROM partsupp ps 
    WHERE ps.ps_supplycost IS NULL
)
LEFT JOIN SuppCount supp ON supp.s_suppkey IN (
    SELECT ps.ps_suppkey 
    FROM partsupp ps 
    WHERE ps.ps_availqty < 100
    INTERSECT 
    SELECT ps.ps_suppkey 
    FROM partsupp ps 
    WHERE ps.ps_supplycost < (
        SELECT AVG(ps2.ps_supplycost) FROM partsupp ps2
    )
)
ORDER BY part_size DESC, ci.total_spent DESC;
