
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        RANK() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    WHERE p.p_retailprice IS NOT NULL AND p.p_size > 10
),
SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        AVG(ps.ps_supplycost) AS avg_supply_cost,
        SUM(ps.ps_availqty) AS total_avail_qty
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    rp.p_name,
    rp.p_brand,
    rp.p_retailprice,
    ss.avg_supply_cost,
    co.total_spent,
    CASE 
        WHEN co.total_spent IS NULL THEN 'No Orders'
        WHEN co.total_spent > (SELECT AVG(total_spent) FROM CustomerOrders) THEN 'High Roller'
        ELSE 'Regular Customer'
    END AS customer_type
FROM RankedParts rp
LEFT JOIN SupplierStats ss ON rp.p_partkey = (
    SELECT ps.ps_partkey 
    FROM partsupp ps 
    WHERE ps.ps_supplycost = (
        SELECT MAX(ps_supplycost) 
        FROM partsupp 
        WHERE ps.partkey = rp.p_partkey
    )
    LIMIT 1
)
LEFT JOIN CustomerOrders co ON co.order_count > 2
WHERE EXISTS (
    SELECT 1 
    FROM nation n
    WHERE n.n_nationkey = (
        SELECT c.c_nationkey 
        FROM customer c 
        WHERE c.c_custkey = co.c_custkey
    )
)
ORDER BY rp.p_brand, rp.p_retailprice DESC, co.total_spent DESC
LIMIT 100;
