
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON sh.s_nationkey = s.s_nationkey
    WHERE s.s_acctbal IS NOT NULL
),
CustomerOrders AS (
    SELECT c.c_custkey, COUNT(DISTINCT o.o_orderkey) AS order_count, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal > 1000
    GROUP BY c.c_custkey
),
LineItemStats AS (
    SELECT l.l_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
           AVG(l.l_quantity) AS avg_quantity,
           COUNT(*) AS item_count,
           RANK() OVER (PARTITION BY l.l_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS sales_rank
    FROM lineitem l
    GROUP BY l.l_orderkey
)
SELECT 
    n.n_name AS nation_name,
    p.p_name AS part_name,
    SUM(ls.total_sales) AS total_sales,
    COALESCE(SUM(co.order_count), 0) AS customer_order_count,
    COUNT(DISTINCT sh.s_suppkey) AS supplier_count,
    MAX(ls.avg_quantity) AS max_average_quantity
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
JOIN nation n ON s.s_nationkey = n.n_nationkey
JOIN LineItemStats ls ON ls.l_orderkey IN (
    SELECT o.o_orderkey 
    FROM orders o 
    WHERE o.o_orderstatus = 'F'
)
LEFT JOIN CustomerOrders co ON co.c_custkey IN (
    SELECT DISTINCT o.o_custkey 
    FROM orders o 
    WHERE o.o_orderkey IN (SELECT l.l_orderkey FROM lineitem l WHERE l.l_partkey = p.p_partkey)
)
WHERE p.p_size > 10 AND s.s_acctbal IS NOT NULL
GROUP BY n.n_name, p.p_name
HAVING SUM(ls.total_sales) > 50000
ORDER BY total_sales DESC
LIMIT 10;
