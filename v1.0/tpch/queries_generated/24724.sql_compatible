
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_mfgr,
        p.p_brand,
        p.p_retailprice,
        DENSE_RANK() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM 
        part p
    WHERE 
        p.p_retailprice IS NOT NULL
),
SuppCount AS (
    SELECT 
        ps.ps_partkey,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey
),
QualifiedParts AS (
    SELECT 
        r.n_nationkey,
        r.r_name AS region_name,
        np.p_partkey,
        np.p_name,
        np.p_retailprice,
        sc.supplier_count
    FROM 
        RankedParts np
    LEFT JOIN 
        SuppCount sc ON np.p_partkey = sc.ps_partkey
    LEFT JOIN 
        supplier s ON s.s_suppkey IN (
            SELECT ps.ps_suppkey
            FROM partsupp ps
            WHERE ps.ps_partkey = np.p_partkey
        )
    LEFT JOIN 
        nation n ON n.n_nationkey = s.s_nationkey
    LEFT JOIN 
        region r ON r.r_regionkey = n.n_regionkey
    WHERE 
        np.price_rank = 1 AND
        (sc.supplier_count IS NULL OR sc.supplier_count > 1)
),
OrderSummary AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        DENSE_RANK() OVER (ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderstatus IN ('F', 'O')
    GROUP BY 
        o.o_orderkey
)
SELECT 
    qp.region_name,
    qp.p_name,
    qp.p_retailprice,
    os.total_revenue,
    CASE 
        WHEN qp.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2) THEN 'Above Average'
        ELSE 'Below Average'
    END AS price_comparison,
    CASE 
        WHEN os.revenue_rank <= 10 THEN 'Top Revenue'
        ELSE 'Low Revenue'
    END AS revenue_classification
FROM 
    QualifiedParts qp
FULL OUTER JOIN 
    OrderSummary os ON qp.p_partkey = os.o_orderkey
WHERE 
    qp.n_nationkey IS NOT NULL
    OR os.total_revenue IS NOT NULL
ORDER BY 
    qp.region_name, os.total_revenue DESC;
