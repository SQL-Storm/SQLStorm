WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_custkey, c.c_name, c.c_nationkey, 0 AS level
    FROM customer c
    WHERE c.c_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_name = 'USA')
    
    UNION ALL

    SELECT ch.c_custkey, ch.c_name, ch.c_nationkey, level + 1
    FROM CustomerHierarchy ch
    JOIN orders o ON ch.c_custkey = o.o_custkey
    JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE ch.level < 5 AND o.o_orderstatus = 'O'
),
OrderSummary AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        COUNT(DISTINCT l.l_linenumber) AS line_count,
        DENSE_RANK() OVER (PARTITION BY l.l_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate >= '1996-01-01' 
      AND l.l_shipdate < '1997-01-01'
    GROUP BY o.o_orderkey
),
SupplierCost AS (
    SELECT 
        ps.ps_suppkey, 
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM partsupp ps
    GROUP BY ps.ps_suppkey
)
SELECT 
    ch.c_name AS customer_name,
    ch.c_custkey AS customer_id,
    SUM(os.total_revenue) AS total_revenue,
    sc.total_supply_cost,
    CASE 
        WHEN sc.total_supply_cost IS NULL THEN 'No Supplier Costs'
        ELSE 'Supplier Costs Available'
    END AS cost_availability,
    COALESCE(s.s_name, 'Unknown Supplier') AS supplier_name
FROM CustomerHierarchy ch
LEFT JOIN OrderSummary os ON ch.c_custkey = os.o_orderkey
LEFT JOIN SupplierCost sc ON sc.ps_suppkey = (SELECT ps.ps_suppkey 
                                                FROM partsupp ps 
                                                WHERE ps.ps_partkey IN (SELECT p.p_partkey 
                                                                        FROM part p 
                                                                        WHERE p.p_container LIKE '%BOX%'))
GROUP BY ch.c_name, ch.c_custkey, sc.total_supply_cost, s.s_name
HAVING SUM(os.total_revenue) IS NOT NULL
ORDER BY total_revenue DESC
LIMIT 10;