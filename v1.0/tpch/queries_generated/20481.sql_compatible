
WITH RecursiveSupplier AS (
    SELECT s_suppkey, s_name, s_acctbal, s_comment,
           COALESCE(NULLIF(s_comment, ''), 'No Comment') AS normalized_comment
    FROM supplier
    WHERE s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, s.s_comment,
           COALESCE(NULLIF(s.s_comment, ''), 'No Comment')
    FROM supplier s
    JOIN RecursiveSupplier rs ON s.s_nationkey = rs.s_suppkey
),
CustomerStatus AS (
    SELECT c.c_custkey, 
           c.c_name,
           COUNT(DISTINCT o.o_orderkey) AS order_count,
           SUM(o.o_totalprice) AS total_spent,
           ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(o.o_totalprice) DESC) AS rank_within_nation
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey 
    GROUP BY c.c_custkey, c.c_name, c.c_nationkey
),
PartSupplierInfo AS (
    SELECT p.p_partkey, COUNT(DISTINCT ps.ps_suppkey) AS supplier_count,
           AVG(ps.ps_supplycost) AS average_supply_cost,
           STRING_AGG(s.s_name, ', ') AS supplier_names
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    JOIN supplier s ON s.s_suppkey = ps.ps_suppkey
    GROUP BY p.p_partkey
)
SELECT cs.c_name, cs.total_spent, pi.supplier_names,
       CASE
           WHEN pi.supplier_count > 5 THEN 'High Supply'
           WHEN pi.supplier_count BETWEEN 3 AND 5 THEN 'Medium Supply'
           ELSE 'Low Supply'
       END AS supply_category,
       ROW_NUMBER() OVER (ORDER BY cs.total_spent DESC) AS customer_rank
FROM CustomerStatus cs
JOIN PartSupplierInfo pi ON cs.order_count > 0
WHERE cs.rank_within_nation <= 5
  AND cs.total_spent IS NOT NULL
  AND pi.supplier_count IS NOT NULL
  AND EXISTS (SELECT 1 FROM lineitem l
              WHERE l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cs.c_custkey)
              AND l.l_discount > 0.1)
ORDER BY cs.total_spent DESC, supply_category DESC
OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;
