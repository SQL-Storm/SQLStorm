WITH RECURSIVE OrderHierarchy AS (
    SELECT o_orderkey, o_custkey, o_orderdate, o_totalprice,
           ROW_NUMBER() OVER (PARTITION BY o_custkey ORDER BY o_orderdate) AS order_rank
    FROM orders
    WHERE o_orderstatus = 'O'
    UNION ALL
    SELECT oh.o_orderkey, oh.o_custkey, oh.o_orderdate, oh.o_totalprice,
           oh.order_rank
    FROM orders oh
    INNER JOIN OrderHierarchy oh_parent ON oh.o_custkey = oh_parent.o_custkey
    WHERE oh.o_orderdate > oh_parent.o_orderdate
),
AggregatedSuppliers AS (
    SELECT ps.s_suppkey, SUM(ps.ps_availqty) AS total_availability,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM partsupp ps
    GROUP BY ps.s_suppkey
),
ProductAvailability AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_type,
           COALESCE(SUM(ps.ps_availqty), 0) AS total_available,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_brand, p.p_type
)
SELECT 
    c.c_name,
    rh.o_orderdate,
    rh.o_totalprice,
    pa.p_name,
    pa.total_available,
    pa.avg_supply_cost,
    CASE 
        WHEN pa.total_available IS NULL THEN 'Not Available'
        WHEN pa.total_available < 100 THEN 'Low Stock'
        ELSE 'In Stock'
    END AS stock_status,
    COUNT(DISTINCT l.l_orderkey) OVER (PARTITION BY c.c_custkey) AS total_orders
FROM customer c
JOIN OrderHierarchy rh ON c.c_custkey = rh.o_custkey
LEFT JOIN lineitem l ON rh.o_orderkey = l.l_orderkey
JOIN ProductAvailability pa ON l.l_partkey = pa.p_partkey
WHERE rh.o_orderdate >= DATEADD(MONTH, -6, cast('1998-10-01' as date)) 
  AND (rh.o_totalprice - pa.avg_supply_cost) > 50
ORDER BY c.c_name, rh.o_orderdate DESC;