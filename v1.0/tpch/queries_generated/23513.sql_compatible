
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= CURRENT_DATE - INTERVAL '6 months'
),
SupplierOrder AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(l.l_quantity) AS total_quantity,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
        RANK() OVER (PARTITION BY ps.ps_partkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS sales_rank
    FROM 
        lineitem l
    JOIN 
        partsupp ps ON l.l_partkey = ps.ps_partkey
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey
),
FilteredSupplier AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        COALESCE(s.s_acctbal / NULLIF(SUM(ps.ps_supplycost), 0), 0) AS adjusted_balance
    FROM 
        supplier s
    LEFT JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE
        s.s_acctbal > 1000 AND 
        (s.s_comment IS NULL OR s.s_comment NOT LIKE '%test%')
    GROUP BY 
        s.s_suppkey, s.s_name, s.s_acctbal
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent,
        CASE 
            WHEN COUNT(o.o_orderkey) > 0 THEN SUM(o.o_totalprice) / COUNT(o.o_orderkey)
            ELSE 0
        END AS avg_order_value
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        c.c_acctbal > 0
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    COALESCE(c.c_name, 'No Customer') AS customer_name,
    COALESCE(s.s_name, 'No Supplier') AS supplier_name,
    COALESCE(fo.adjusted_balance, 0) AS supplier_balance_adjusted,
    COALESCE(ro.o_orderkey, 0) AS recent_order,
    co.total_spent,
    so.total_quantity,
    so.total_sales
FROM 
    CustomerOrders co
FULL OUTER JOIN 
    FilteredSupplier fo ON TRUE
FULL OUTER JOIN 
    RankedOrders ro ON co.order_count > 0 AND ro.order_rank = 1
FULL OUTER JOIN 
    SupplierOrder so ON so.ps_suppkey = fo.s_suppkey
ORDER BY 
    total_spent DESC NULLS LAST,
    supplier_balance_adjusted ASC,
    customer_name ASC;
