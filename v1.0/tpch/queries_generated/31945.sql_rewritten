WITH RECURSIVE RecursiveOrder AS (
    SELECT o_orderkey, o_orderdate, o_totalprice, 1 AS order_level
    FROM orders
    WHERE o_orderstatus = 'O'

    UNION ALL

    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, r.order_level + 1
    FROM orders o
    JOIN RecursiveOrder r ON o.o_orderkey = r.o_orderkey
    WHERE o.o_orderstatus = 'O' AND o.o_orderdate < r.o_orderdate
),

RankedSuppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal,
           RANK() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS supplier_rank
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL
),

TotalSales AS (
    SELECT l.l_partkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM lineitem l
    WHERE l.l_shipdate >= '1997-01-01' AND l.l_shipdate < '1998-01-01'
    GROUP BY l.l_partkey
)

SELECT p.p_name, p.p_mfgr, p.p_brand,
       COALESCE(ts.total_sales, 0) AS total_sales,
       rs.s_name AS top_supplier,
       rs.s_acctbal AS top_supplier_balance,
       CASE WHEN rs.s_suppkey IS NULL THEN 'No Supplier' ELSE 'Has Supplier' END AS supplier_status
FROM part p
LEFT JOIN TotalSales ts ON p.p_partkey = ts.l_partkey
LEFT JOIN RankedSuppliers rs ON rs.s_suppkey = (
    SELECT ps.ps_suppkey
    FROM partsupp ps
    WHERE ps.ps_partkey = p.p_partkey
    AND ps.ps_availqty > 0
    ORDER BY ps.ps_supplycost ASC
    LIMIT 1
)
WHERE (p.p_color IS NULL OR p.p_size > 10) 
AND (p.p_retailprice > (SELECT AVG(p_retailprice) FROM part) OR p.p_type LIKE '%brass%')
ORDER BY total_sales DESC NULLS LAST, p.p_name;