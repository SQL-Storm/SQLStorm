
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_acctbal, s_nationkey, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, s.s_nationkey, sh.level + 1
    FROM supplier s
    INNER JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
), RankedOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_totalprice, 
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
), AvgLineItemPrice AS (
    SELECT 
        l.l_orderkey,
        AVG(l.l_extendedprice * (1 - l.l_discount)) AS avg_price
    FROM lineitem l
    GROUP BY l.l_orderkey
), CustomerOrderSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        MAX(o.o_orderdate) AS last_order_date
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    ps.ps_partkey,
    p.p_name,
    SUM(ps.ps_availqty) AS total_available_quantity,
    SUM(COALESCE(r_rank.total_rank, 0)) AS total_rank,
    cs.total_spent,
    cs.order_count,
    COUNT(DISTINCT s.s_suppkey) AS supplier_count,
    CASE 
        WHEN cs.last_order_date IS NOT NULL AND cs.total_spent > 1000 THEN 'High Value'
        ELSE 'Standard Value'
    END AS customer_value_segment
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN (
    SELECT o.o_orderkey, 
           ROW_NUMBER() OVER (ORDER BY o.o_totalprice DESC) AS total_rank
    FROM RankedOrders
    WHERE order_rank <= 5
) r_rank ON ps.ps_suppkey = r_rank.o_orderkey
LEFT JOIN CustomerOrderSummary cs ON cs.c_custkey = ps.ps_suppkey
JOIN SupplierHierarchy sh ON sh.s_suppkey = ps.ps_suppkey
GROUP BY ps.ps_partkey, p.p_name, cs.total_spent, cs.order_count, sh.s_name -- Included ungrouped columns
ORDER BY total_available_quantity DESC, customer_value_segment, p.p_name;
