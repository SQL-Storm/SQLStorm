
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_custkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_custkey ORDER BY o.o_orderdate DESC) AS rn
    FROM 
        orders o
    WHERE 
        o.o_orderstatus = 'O'
),
CustomerSummary AS (
    SELECT 
        c.c_custkey,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent,
        AVG(o.o_totalprice) AS avg_order_value
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
),
TotalLineItems AS (
    SELECT 
        l.l_orderkey, 
        SUM(l.l_quantity) AS total_quantity,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        lineitem l
    JOIN 
        orders o ON l.l_orderkey = o.o_orderkey
    WHERE 
        l.l_shipdate >= '1997-01-01'
    GROUP BY 
        l.l_orderkey
),
SupplierEvaluation AS (
    SELECT 
        s.s_suppkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey
),
FinalEvaluation AS (
    SELECT 
        n.n_name,
        COALESCE(SUM(cs.total_orders), 0) AS total_orders,
        COALESCE(SUM(cs.total_spent), 0) AS total_spent,
        COALESCE(SUM(tli.total_quantity), 0) AS total_quantity,
        COALESCE(SUM(se.total_supply_cost), 0) AS total_supply_cost
    FROM 
        nation n
    LEFT JOIN 
        customer c ON n.n_nationkey = c.c_nationkey
    LEFT JOIN 
        CustomerSummary cs ON c.c_custkey = cs.c_custkey
    LEFT JOIN 
        TotalLineItems tli ON tli.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = c.c_custkey)
    LEFT JOIN 
        SupplierEvaluation se ON se.s_suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey IN 
            (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey = tli.l_orderkey))
    GROUP BY 
        n.n_name
)
SELECT 
    fe.n_name,
    fe.total_orders,
    fe.total_spent,
    fe.total_quantity,
    fe.total_supply_cost,
    CASE 
        WHEN fe.total_spent IS NULL OR fe.total_spent = 0 THEN 'No Spending'
        ELSE 'Active Customer'
    END AS customer_status
FROM 
    FinalEvaluation fe
WHERE 
    fe.total_quantity > 100
ORDER BY 
    fe.total_spent DESC, fe.total_quantity DESC
FETCH FIRST 10 ROWS ONLY;
