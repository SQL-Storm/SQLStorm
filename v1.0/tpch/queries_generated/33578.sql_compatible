
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_suppkey <> sh.s_suppkey AND s.s_acctbal > sh.level * 1000
),
CustomerOrderSummary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent,
           DENSE_RANK() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(o.o_totalprice) DESC) AS spending_rank,
           COUNT(o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O' OR o.o_orderstatus IS NULL
    GROUP BY c.c_custkey, c.c_name
),
PartSupplyStatistics AS (
    SELECT p.p_partkey, p.p_name, AVG(ps.ps_supplycost) AS avg_supply_cost,
           COUNT(ps.ps_suppkey) AS supplier_count
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE p.p_retailprice > 100.00
    GROUP BY p.p_partkey, p.p_name
)
SELECT 
    c.c_name AS customer_name,
    COALESCE(cos.total_spent, 0) AS total_spent,
    cos.order_count,
    ph.avg_supply_cost,
    ph.supplier_count,
    'High Spending' AS customer_category 
FROM CustomerOrderSummary cos
FULL OUTER JOIN SupplierHierarchy sh ON cos.c_custkey = sh.s_suppkey
FULL OUTER JOIN PartSupplyStatistics ph ON ph.supplier_count > 5
WHERE cos.spending_rank <= 10 OR ph.avg_supply_cost IS NULL
ORDER BY total_spent DESC, customer_name;
