
WITH RegionsWithHighSupplyCost AS (
    SELECT r.r_regionkey, r.r_name, 
        SUM(ps.ps_supplycost) AS total_supply_cost
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY r.r_regionkey, r.r_name
    HAVING SUM(ps.ps_supplycost) > (
        SELECT AVG(ps_supplycost) 
        FROM partsupp
    )
), PartDetails AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, 
        COALESCE(MAX(l.l_shipdate), DATE '2000-01-01') AS max_shipdate, 
        COUNT(l.l_partkey) AS total_lines
    FROM part p
    LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_brand
), CustomerOrderInfo AS (
    SELECT c.c_custkey, c.c_name, 
        SUM(o.o_totalprice) AS total_price, 
        RANK() OVER (PARTITION BY c.c_custkey ORDER BY SUM(o.o_totalprice) DESC) AS order_rank
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 1000
)
SELECT DISTINCT r.r_name,
    pd.p_name, pd.p_brand, 
    COALESCE(c.c_name, 'Unknown') AS customer_name, 
    ci.total_price,
    CASE 
        WHEN pd.total_lines > 10 THEN 'High Volume'
        ELSE 'Low Volume' 
    END AS volume_category,
    ROW_NUMBER() OVER (PARTITION BY r.r_name ORDER BY ci.total_price DESC) AS region_rank
FROM RegionsWithHighSupplyCost r
JOIN PartDetails pd ON pd.p_partkey IN (
    SELECT ps.ps_partkey
    FROM partsupp ps
    WHERE ps.ps_availqty > 50 
      AND ps.ps_supplycost IN (
          SELECT MIN(ps_supplycost)
          FROM partsupp
          WHERE ps_partkey IN (
              SELECT p.p_partkey
              FROM part p
              WHERE p.p_size IS NOT NULL AND p.p_size > 0
          )
      )
)
LEFT JOIN CustomerOrderInfo ci ON ci.order_rank = 1
ORDER BY r.r_name, ci.total_price DESC, pd.p_name;
