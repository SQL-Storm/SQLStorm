
WITH RECURSIVE HighValueSuppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal
    FROM supplier s
    WHERE s.s_acctbal > 10000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal
    FROM supplier s
    JOIN HighValueSuppliers h ON s.s_suppkey = h.s_suppkey
    WHERE s.s_acctbal > h.s_acctbal * 0.9
), AggregatedOrders AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= '1997-01-01'
    GROUP BY o.o_orderkey
), CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count, SUM(a.total_revenue) AS total_spend
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN AggregatedOrders a ON o.o_orderkey = a.o_orderkey
    GROUP BY c.c_custkey, c.c_name
), SupplierPartStats AS (
    SELECT ps.ps_partkey, COUNT(DISTINCT ps.ps_suppkey) AS supplier_count,
           SUM(ps.ps_availqty) AS total_available_quantity, AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM partsupp ps
    GROUP BY ps.ps_partkey
)
SELECT c.c_name, co.order_count, co.total_spend, s.s_name, s.s_acctbal,
       ps.supplier_count, ps.total_available_quantity, ps.avg_supply_cost
FROM CustomerOrders co
INNER JOIN supplier s ON s.s_suppkey IN (
    SELECT DISTINCT ps.ps_suppkey 
    FROM partsupp ps 
    WHERE ps.ps_partkey IN (
        SELECT p.p_partkey 
        FROM part p 
        WHERE p.p_retailprice BETWEEN 50 AND 100
    )
)
INNER JOIN SupplierPartStats ps ON ps.supplier_count > 1
WHERE co.order_count > 5 AND co.total_spend IS NOT NULL
ORDER BY co.total_spend DESC, ps.avg_supply_cost ASC;
