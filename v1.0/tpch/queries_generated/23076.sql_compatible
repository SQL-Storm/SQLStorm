
WITH RankedOrders AS (
    SELECT 
        o_orderkey, 
        o_custkey, 
        o_orderdate, 
        o_totalprice,
        DENSE_RANK() OVER (PARTITION BY o_orderdate ORDER BY o_totalprice DESC) AS order_rank
    FROM 
        orders
    WHERE 
        o_orderstatus IN ('O', 'P')
), 
SupplierData AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT p.p_partkey) AS part_count
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey, s.s_name
), 
HighCostSuppliers AS (
    SELECT 
        sds.s_suppkey, 
        sds.s_name
    FROM 
        SupplierData sds
    WHERE 
        sds.total_supply_cost > (
            SELECT AVG(total_supply_cost)
            FROM SupplierData
        )
), 
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(DISTINCT ro.o_orderkey) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        RankedOrders ro ON c.c_custkey = ro.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    co.c_custkey,
    co.c_name,
    CASE 
        WHEN co.order_count > 0 THEN 'Active'
        ELSE 'Inactive'
    END AS customer_status,
    hs.s_name AS high_cost_supplier_name,
    COALESCE(SUM(l.l_extendedprice), 0) AS total_sales,
    MAX(l.l_shipdate) AS last_ship_date
FROM 
    CustomerOrders co
LEFT JOIN 
    lineitem l ON l.l_orderkey IN (SELECT o_orderkey FROM RankedOrders WHERE o_custkey = co.c_custkey)
LEFT JOIN 
    HighCostSuppliers hs ON hs.s_suppkey IN (
        SELECT ps.ps_suppkey
        FROM partsupp ps
        JOIN lineitem li ON li.l_partkey = ps.ps_partkey
        WHERE li.l_orderkey IN (SELECT o_orderkey FROM RankedOrders WHERE o_custkey = co.c_custkey)
    )
GROUP BY 
    co.c_custkey, co.c_name, hs.s_name
HAVING 
    COUNT(DISTINCT l.l_orderkey) > 2
ORDER BY 
    total_sales DESC;
