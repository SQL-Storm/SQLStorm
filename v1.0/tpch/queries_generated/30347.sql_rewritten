WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    INNER JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
RankedLineItems AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_extendedprice, 
           RANK() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS price_rank,
           SUM(l.l_quantity) OVER (PARTITION BY l.l_orderkey) AS total_quantity
    FROM lineitem l
    WHERE l.l_shipdate >= DATE '1997-01-01'
),
MaxTotalPrice AS (
    SELECT o.o_orderkey, MAX(o.o_totalprice) AS max_price
    FROM orders o
    JOIN RankedLineItems r ON o.o_orderkey = r.l_orderkey
    GROUP BY o.o_orderkey
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O' OR o.o_orderstatus IS NULL
),
PartSupplier AS (
    SELECT p.p_name, ps.ps_supplycost, ps.ps_availqty,
           COALESCE(s.s_name, 'Unknown') AS supplier_name
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    LEFT JOIN SupplierHierarchy s ON ps.ps_suppkey = s.s_suppkey
)
SELECT
    co.c_name,
    COUNT(DISTINCT co.o_orderkey) AS total_orders,
    SUM(mtp.max_price) AS total_max_price,
    AVG(ps.ps_supplycost) AS avg_supply_cost,
    STRING_AGG(DISTINCT ph.supplier_name, ', ') AS supplier_names
FROM CustomerOrders co
LEFT JOIN MaxTotalPrice mtp ON co.o_orderkey = mtp.o_orderkey 
LEFT JOIN PartSupplier ps ON co.o_orderkey = ps.ps_partkey
JOIN nation n ON co.c_custkey = n.n_nationkey
WHERE n.n_regionkey = 1
GROUP BY co.c_custkey, co.c_name
HAVING SUM(mtp.max_price) > 10000
ORDER BY total_orders DESC, total_max_price DESC;