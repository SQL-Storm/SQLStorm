WITH ranked_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        c.c_mktsegment,
        ROW_NUMBER() OVER (PARTITION BY c.c_mktsegment ORDER BY o.o_totalprice DESC) AS rn
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1997-12-31'
),
supplier_part_summary AS (
    SELECT 
        ps.ps_partkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM 
        partsupp ps
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY 
        ps.ps_partkey
),
lineitem_summary AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        COUNT(CASE WHEN l.l_returnflag = 'Y' THEN 1 END) AS returned_items
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey
)
SELECT 
    r.o_orderkey,
    r.o_orderdate,
    r.o_totalprice,
    r.c_mktsegment,
    s.total_supply_cost,
    l.total_revenue,
    l.returned_items,
    CASE 
        WHEN l.total_revenue IS NULL THEN 'No Revenue'
        WHEN s.total_supply_cost IS NULL THEN 'No Supply Cost'
        ELSE CAST(l.total_revenue - s.total_supply_cost AS DECIMAL(12, 2))
    END AS profit_or_loss
FROM 
    ranked_orders r
LEFT JOIN 
    supplier_part_summary s ON s.ps_partkey = (
        SELECT ps.ps_partkey 
        FROM partsupp ps
        WHERE ps.ps_partkey IN (
            SELECT l.l_partkey 
            FROM lineitem l 
            WHERE l.l_orderkey = r.o_orderkey
        )
        LIMIT 1
    )
LEFT JOIN 
    lineitem_summary l ON l.l_orderkey = r.o_orderkey
WHERE 
    r.rn <= 5
ORDER BY 
    r.o_orderdate DESC, 
    r.o_orderkey;