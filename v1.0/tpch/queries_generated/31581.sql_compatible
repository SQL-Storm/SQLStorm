
WITH RECURSIVE supplier_hierarchy AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_nationkey, 
        0 AS level
    FROM 
        supplier s
    WHERE 
        s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL

    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_nationkey, 
        sh.level + 1
    FROM 
        supplier s
    JOIN 
        supplier_hierarchy sh ON sh.s_nationkey = s.s_nationkey
    WHERE 
        sh.level < 3
),
order_stats AS (
    SELECT 
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS total_orders,
        ROW_NUMBER() OVER(PARTITION BY c.c_custkey ORDER BY SUM(o.o_totalprice) DESC) AS order_rank
    FROM 
        customer c 
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
)
SELECT 
    p.p_name,
    p.p_mfgr,
    COALESCE(SUM(ps.ps_supplycost * ps.ps_availqty), 0) AS total_supply_cost,
    COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_revenue,
    CASE 
        WHEN COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) > 0 THEN (SELECT MAX(o.total_spent) FROM order_stats o WHERE o.order_rank <= 5) 
        ELSE NULL 
    END AS max_top_spent_customers,
    rh.r_name
FROM 
    part p
LEFT JOIN 
    partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN 
    lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN 
    nation n ON n.n_nationkey = (SELECT s.n_nationkey FROM supplier s WHERE s.s_suppkey = ps.ps_suppkey)
LEFT JOIN 
    region rh ON n.n_regionkey = rh.r_regionkey
INNER JOIN 
    supplier_hierarchy sh ON sh.s_nationkey = n.n_nationkey
GROUP BY 
    p.p_name, p.p_mfgr, rh.r_name
HAVING 
    COALESCE(SUM(ps.ps_supplycost * ps.ps_availqty), 0) > 10000
ORDER BY 
    total_revenue DESC, p.p_size ASC
OFFSET 10 ROWS;
