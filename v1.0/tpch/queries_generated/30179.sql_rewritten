WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
), 
total_orders AS (
    SELECT o.o_custkey, SUM(o.o_totalprice) AS total_price
    FROM orders o
    GROUP BY o.o_custkey
),
lineitem_analysis AS (
    SELECT l.l_orderkey, 
           l.l_partkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(*) AS total_lineitems,
           ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_shipdate DESC) AS rn
    FROM lineitem l
    WHERE l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY l.l_orderkey, l.l_partkey
)
SELECT p.p_name, 
       p.p_brand,
       p.p_retailprice,
       CASE WHEN s_h.level IS NOT NULL THEN 'High Value' ELSE 'Normal' END AS supplier_status,
       total_orders.total_price,
       la.total_revenue AS revenue_per_order
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN supplier_hierarchy s_h ON ps.ps_suppkey = s_h.s_suppkey
JOIN total_orders ON total_orders.o_custkey = ps.ps_suppkey
LEFT JOIN lineitem_analysis la ON la.l_partkey = p.p_partkey
WHERE p.p_size BETWEEN 20 AND 30
  AND (s_h.s_acctbal IS NULL OR s_h.s_acctbal > 1000)
ORDER BY p.p_retailprice DESC, total_orders.total_price ASC;