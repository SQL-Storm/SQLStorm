WITH RECURSIVE CustomerOrderCTE AS (
    SELECT
        c.c_custkey,
        c.c_name,
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY o.o_orderdate DESC) AS order_rank
    FROM
        customer c
    JOIN
        orders o ON c.c_custkey = o.o_custkey
    WHERE
        o.o_orderdate >= DATE '1997-01-01'
),
HighValueOrders AS (
    SELECT
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent
    FROM
        customer c
    JOIN
        orders o ON c.c_custkey = o.o_custkey
    WHERE
        o.o_orderstatus = 'O'
    GROUP BY
        c.c_custkey
    HAVING
        SUM(o.o_totalprice) > 10000
),
SupplierHighlights AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_value
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
    HAVING 
        SUM(ps.ps_supplycost * ps.ps_availqty) > 50000
),
OrderDetails AS (
    SELECT 
        o.o_orderkey,
        l.l_partkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue
    FROM 
        lineitem l
    JOIN 
        orders o ON l.l_orderkey = o.o_orderkey
    GROUP BY 
        o.o_orderkey, l.l_partkey
    HAVING 
        SUM(l.l_extendedprice * (1 - l.l_discount)) > 1000
)
SELECT 
    co.c_name,
    COALESCE(SUM(od.revenue), 0) AS total_revenue,
    COALESCE(SUM(s.total_supply_value), 0) AS total_supply_value,
    CASE 
        WHEN SUM(od.revenue) IS NULL THEN 'No Revenue'
        WHEN SUM(od.revenue) >= 5000 THEN 'High Revenue'
        ELSE 'Low Revenue'
    END AS revenue_category
FROM 
    CustomerOrderCTE co
LEFT JOIN
    OrderDetails od ON co.o_orderkey = od.o_orderkey
LEFT JOIN 
    SupplierHighlights s ON s.s_suppkey IN (
        SELECT ps.ps_suppkey
        FROM partsupp ps
        WHERE ps.ps_partkey = od.l_partkey
    )
GROUP BY 
    co.c_name
HAVING 
    revenue_category = 'High Revenue'
ORDER BY 
    total_revenue DESC
LIMIT 10;