
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderdate ORDER BY o.o_totalprice DESC) AS price_rank
    FROM 
        orders o
    WHERE 
        o.o_orderstatus IN ('O', 'F')
),
SupplierParts AS (
    SELECT 
        ps.ps_partkey, 
        ps.ps_suppkey,
        s.s_name,
        SUM(ps.ps_availqty) AS total_avail_qty,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        partsupp ps
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY 
        ps.ps_partkey, s.s_name
),
CustomerSpend AS (
    SELECT 
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS order_count,
        MAX(o.o_orderdate) AS last_order_date
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
),
TotalSales AS (
    SELECT 
        l.l_partkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM 
        lineitem l
    GROUP BY 
        l.l_partkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    R1.total_sales,
    COALESCE(R2.total_avail_qty, 0) AS total_avail_qty,
    COALESCE(c.total_spent / NULLIF(c.order_count, 0), 0) AS avg_customer_spending,
    R3.price_rank
FROM 
    part p
LEFT JOIN 
    TotalSales R1 ON p.p_partkey = R1.l_partkey
LEFT JOIN 
    SupplierParts R2 ON R2.ps_partkey = p.p_partkey
LEFT JOIN 
    (SELECT 
         o_orderdate, 
         MAX(price_rank) AS max_rank 
     FROM 
         RankedOrders 
     GROUP BY 
         o_orderdate 
     HAVING 
         COUNT(*) > 1) R3 ON R3.max_rank = 
         (SELECT MAX(price_rank) FROM RankedOrders R4 WHERE R4.o_orderdate = R3.o_orderdate)
LEFT JOIN 
    CustomerSpend c ON c.c_custkey = (SELECT c2.c_custkey FROM customer c2 WHERE c2.c_name LIKE '%Customer%' LIMIT 1)
WHERE 
    (p.p_size BETWEEN 1 AND 20 OR p.p_type = 'Small') 
    AND (R1.total_sales > 1000 OR R1.total_sales IS NULL)
ORDER BY 
    p.p_partkey DESC;
