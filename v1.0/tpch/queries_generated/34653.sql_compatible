
WITH RECURSIVE SupplierHierarchy AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_address,
        s.nationkey,
        s.s_acctbal,
        1 AS level
    FROM 
        supplier s
    WHERE 
        s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT 
        s2.s_suppkey,
        s2.s_name,
        s2.s_address,
        s2.nationkey,
        s2.s_acctbal,
        sh.level + 1
    FROM 
        supplier s2
    JOIN 
        SupplierHierarchy sh ON s2.nationkey = sh.nationkey
    WHERE 
        sh.level < 3
),
RegionSupplierStats AS (
    SELECT 
        r.r_name,
        COUNT(DISTINCT s.s_suppkey) AS total_suppliers,
        SUM(s.s_acctbal) AS total_balance
    FROM 
        region r
    LEFT JOIN 
        nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN 
        supplier s ON n.n_nationkey = s.n_nationkey
    WHERE 
        s.s_acctbal IS NOT NULL
    GROUP BY 
        r.r_name
),
CustomerOrderSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
PartStats AS (
    SELECT 
        p.p_partkey,
        SUM(li.l_extendedprice * (1 - li.l_discount)) AS revenue,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM 
        part p
    JOIN 
        lineitem li ON p.p_partkey = li.l_partkey
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY 
        p.p_partkey
),
FinalReport AS (
    SELECT 
        r.r_name,
        rss.total_suppliers,
        rss.total_balance,
        cus.c_custkey,
        cus.c_name,
        cus.order_count,
        cus.total_spent,
        ps.p_partkey,
        ps.revenue,
        ps.supplier_count
    FROM 
        RegionSupplierStats rss
    CROSS JOIN 
        CustomerOrderSummary cus
    JOIN 
        PartStats ps ON ps.supplier_count > 5
)
SELECT 
    r.r_name,
    COALESCE(cus.c_name, 'No Orders') AS customer_name,
    COALESCE(ps.revenue, 0) AS revenue,
    rss.total_balance,
    CASE 
        WHEN ps.revenue IS NULL THEN 'No Revenue'
        ELSE 'Revenue Generated'
    END AS revenue_status
FROM 
    FinalReport r
LEFT JOIN 
    CustomerOrderSummary cus ON cus.c_custkey = r.c_custkey
LEFT JOIN 
    PartStats ps ON ps.p_partkey = r.p_partkey
WHERE 
    (cus.order_count > 0 OR ps.revenue > 0)
ORDER BY 
    r.r_name, ps.revenue DESC;
