WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS price_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= DATE '1996-01-01'
        AND o.o_orderdate < DATE '1997-01-01'
),
SufficientSupply AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_availqty) AS total_supply
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey, 
        ps.ps_suppkey
    HAVING 
        SUM(ps.ps_availqty) > 100
),
CustomerStats AS (
    SELECT 
        c.c_custkey,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        AVG(o.o_totalprice) AS avg_order_value
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        c.c_acctbal IS NOT NULL
    GROUP BY 
        c.c_custkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    p.p_mfgr,
    COALESCE(SUM(l.l_discount), 0) AS total_discount,
    COUNT(DISTINCT o.o_orderkey) AS total_orders,
    SUM(CASE WHEN W3.avg_order_value > 500 THEN 1 ELSE 0 END) AS high_value_customers,
    (SELECT MAX(total_supply) FROM SufficientSupply ss WHERE ss.ps_partkey = p.p_partkey) AS max_supply
FROM 
    part p
LEFT JOIN 
    lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN 
    RankedOrders ro ON l.l_orderkey = ro.o_orderkey
LEFT JOIN 
    CustomerStats W3 ON W3.total_orders > 0
LEFT JOIN 
    supplier s ON s.s_suppkey = l.l_suppkey 
WHERE 
    p.p_retailprice IS NOT NULL
    AND (p.p_size BETWEEN 1 AND 50 OR p.p_brand IS NOT NULL)
    OR (p.p_comment LIKE '%special%' AND p.p_type IS NOT NULL)
GROUP BY 
    p.p_partkey, p.p_name, p.p_mfgr
HAVING 
    COUNT(DISTINCT o.o_orderkey) > 5 
    AND (SUM(l.l_extendedprice * (1 - l.l_discount)) > 1000 OR COUNT(DISTINCT s.s_nationkey) > 3)
ORDER BY 
    total_discount DESC, total_orders ASC
LIMIT 10;