
WITH RankedOrders AS (
    SELECT 
        o_orderkey,
        o_custkey,
        o_orderdate,
        o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o_custkey ORDER BY o_orderdate DESC) AS OrderRank
    FROM 
        orders
), CustomerSpending AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS TotalSpent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
), HighSpendingCustomers AS (
    SELECT 
        cs.c_custkey,
        cs.c_name,
        cs.TotalSpent
    FROM 
        CustomerSpending cs
    WHERE 
        cs.TotalSpent > (SELECT AVG(TotalSpent) FROM CustomerSpending)
), SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_availqty * COALESCE(ps.ps_supplycost, 0)) AS TotalAvailableValue
    FROM
        partsupp ps
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    p.p_brand,
    p.p_retailprice,
    COALESCE(SUM(lp.l_extendedprice * (1 - lp.l_discount)), 0) AS Revenue,
    RANK() OVER (ORDER BY COALESCE(SUM(lp.l_extendedprice * (1 - lp.l_discount)), 0) DESC) AS RevenueRank,
    ns.n_name AS SupplierNation,
    cs.c_name AS CustomerName
FROM 
    part p
LEFT JOIN 
    lineitem lp ON p.p_partkey = lp.l_partkey
LEFT JOIN 
    supplier s ON lp.l_suppkey = s.s_suppkey
LEFT JOIN 
    nation ns ON s.s_nationkey = ns.n_nationkey
LEFT JOIN 
    RankedOrders ro ON lp.l_orderkey = ro.o_orderkey
LEFT JOIN 
    HighSpendingCustomers cs ON cs.c_custkey = ro.o_custkey
WHERE 
    p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2 WHERE p2.p_size IS NOT NULL)
    AND (ns.r_regionkey IS NULL OR ns.r_regionkey IN (SELECT r_regionkey FROM region))
    AND (lp.l_returnflag = 'N' OR lp.l_returnflag IS NULL)
GROUP BY 
    p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, ns.n_name, cs.c_name
HAVING 
    COUNT(lp.l_orderkey) > 10
ORDER BY 
    Revenue DESC, p.p_partkey ASC;
