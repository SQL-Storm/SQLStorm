
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_nationkey, s_suppkey, s_name, s_acctbal, s_comment
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.n_nationkey, s.s_suppkey, s.s_name, s.s_acctbal, s.s_comment
    FROM supplier s
    INNER JOIN nation n ON s.s_nationkey = n.n_nationkey
    INNER JOIN SupplierHierarchy sh ON n.n_regionkey = sh.s_nationkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_revenue,
    ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank,
    CASE 
        WHEN COUNT(DISTINCT o.o_orderkey) > 0 THEN 'Has Orders' 
        ELSE 'No Orders' 
    END AS order_status,
    CASE 
        WHEN COUNT(DISTINCT sh.s_suppkey) > 5 THEN CONCAT('High Supply: ', COUNT(DISTINCT sh.s_suppkey)) 
        ELSE CONCAT('Low Supply: ', COUNT(DISTINCT sh.s_suppkey)) 
    END AS supply_level
FROM part p
LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN orders o ON l.l_orderkey = o.o_orderkey
LEFT JOIN SupplierHierarchy sh ON l.l_suppkey = sh.s_suppkey
WHERE p.p_size IN (SELECT DISTINCT p_size FROM part WHERE p_retailprice > 100.00)
GROUP BY p.p_partkey, p.p_name
HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > (SELECT AVG(total_revenue) FROM (
    SELECT 
        SUM(l_extendedprice * (1 - l_discount)) AS total_revenue
    FROM lineitem
    GROUP BY l_partkey
) AS avg_rev)
ORDER BY total_revenue DESC
LIMIT 10;
