WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_acctbal, 0 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_suppkey = sh.s_suppkey
    WHERE sh.level < 3
),
customer_stats AS (
    SELECT c.c_custkey, c.c_name, 
           SUM(o.o_totalprice) AS total_spent,
           COUNT(o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name
),
part_supplier_stats AS (
    SELECT p.p_partkey, p.p_name, 
           SUM(ps.ps_availqty) AS total_available,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
)
SELECT 
    cs.c_name,
    ps.p_name,
    ps.total_available,
    ps.avg_supply_cost,
    ROW_NUMBER() OVER (PARTITION BY cs.c_custkey ORDER BY ps.total_available DESC) AS rank,
    CASE 
        WHEN cs.total_spent > 1000 THEN 'High Roller'
        WHEN cs.total_spent BETWEEN 500 AND 1000 THEN 'Moderate Spender'
        ELSE 'Low Spender'
    END AS spending_category 
FROM customer_stats cs
JOIN part_supplier_stats ps ON cs.c_custkey = ps.p_partkey % (SELECT COUNT(*) FROM customer)  
LEFT OUTER JOIN supplier_hierarchy sh ON sh.s_acctbal < cs.total_spent
WHERE ps.avg_supply_cost IS NOT NULL
ORDER BY cs.c_name, ps.p_name;