
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        RANK() OVER (PARTITION BY s.s_nationkey ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS supplier_rank
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name, s.s_nationkey
),
HighValueCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        CASE 
            WHEN c.c_acctbal > 5000 THEN 'High'
            WHEN c.c_acctbal BETWEEN 1000 AND 5000 THEN 'Medium'
            ELSE 'Low'
        END AS customer_value_segment
    FROM 
        customer c
    WHERE 
        c.c_acctbal IS NOT NULL
),
OrderDetails AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderdate,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_line_item_value,
        COUNT(DISTINCT l.l_partkey) AS item_count
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderstatus = 'O' AND 
        l.l_shipdate >= DATE '1996-01-01' AND 
        l.l_shipdate < DATE '1997-01-01'
    GROUP BY 
        o.o_orderkey, o.o_totalprice, o.o_orderdate
)
SELECT 
    c.c_name,
    c.c_acctbal,
    hvc.customer_value_segment,
    od.o_orderkey,
    od.total_line_item_value,
    od.item_count,
    COALESCE(rs.s_name, 'N/A') AS top_supplier_name,
    COALESCE(rs.total_supply_cost, 0) AS top_supplier_cost
FROM 
    HighValueCustomers hvc
LEFT JOIN 
    OrderDetails od ON hvc.c_custkey = od.o_orderkey
LEFT JOIN 
    RankedSuppliers rs ON hvc.c_custkey = rs.s_suppkey AND rs.supplier_rank = 1
WHERE 
    hvc.customer_value_segment = 'High'
ORDER BY 
    od.total_line_item_value DESC, 
    hvc.c_acctbal DESC;
