WITH supplier_summary AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        COUNT(DISTINCT ps.ps_partkey) AS total_parts,
        SUM(ps.ps_availqty) AS total_available,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
customer_orders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
lineitem_analysis AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
        DENSE_RANK() OVER (ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM lineitem l
    WHERE l.l_shipdate >= '1997-01-01' AND l.l_shipdate < '1998-01-01'
    GROUP BY l.l_orderkey
)

SELECT 
    n.n_name AS nation_name,
    COUNT(DISTINCT s.s_suppkey) AS num_suppliers,
    SUM(ss.total_available) AS total_available_parts,
    AVG(cs.total_spent) AS avg_spent_per_customer,
    MAX(ls.revenue) AS max_order_revenue
FROM nation n
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN supplier_summary ss ON s.s_suppkey = ss.s_suppkey
LEFT JOIN customer_orders cs ON s.s_suppkey = cs.c_custkey
LEFT JOIN lineitem_analysis ls ON cs.total_orders > 0 AND ls.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cs.c_custkey)
WHERE n.n_comment IS NOT NULL AND n.n_name NOT LIKE '%Temp%'
GROUP BY n.n_name
HAVING COUNT(DISTINCT s.s_suppkey) > 0 AND AVG(cs.total_spent) > 1000
ORDER BY total_available_parts DESC, nation_name ASC;