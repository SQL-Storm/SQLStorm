
WITH RECURSIVE PartHierarchy AS (
    SELECT p_partkey, p_name, p_size, p_retailprice, p_comment, 0 AS level
    FROM part
    WHERE p_size < 20
    UNION ALL
    SELECT p.p_partkey, p.p_name, p.p_size, p.p_retailprice, p.p_comment, ph.level + 1
    FROM part p
    JOIN PartHierarchy ph ON p.p_size >= 20 AND p.p_partkey IN (
        SELECT ps.partkey 
        FROM partsupp ps 
        WHERE ps.ps_availqty > 0
    )
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O' AND o.o_orderdate >= DATE_SUB('1998-10-01', INTERVAL 1 YEAR)
    GROUP BY c.c_custkey, c.c_name
),
SupplierRank AS (
    SELECT s.s_suppkey, s.s_name, RANK() OVER (ORDER BY SUM(ps.ps_supplycost) DESC) AS supplier_rank
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
)
SELECT 
    c.c_name AS customer_name,
    p.p_name AS part_name,
    ph.p_size AS part_size,
    ph.p_retailprice AS part_price,
    COALESCE(co.total_spent, 0) AS total_spent,
    sr.supplier_rank AS supplier_ranking,
    ph.p_comment AS part_comment
FROM PartHierarchy ph
LEFT JOIN CustomerOrders co ON ph.p_partkey = CAST(co.c_custkey AS CHAR)
LEFT JOIN SupplierRank sr ON sr.supplier_rank <= 10
JOIN part p ON p.p_partkey = ph.p_partkey
ORDER BY total_spent DESC, part_size DESC
LIMIT 50;
