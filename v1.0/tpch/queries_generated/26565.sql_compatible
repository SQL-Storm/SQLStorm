
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_address, s.s_nationkey, s.s_acctbal, s.s_comment, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > 0
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_address, s.s_nationkey, s.s_acctbal, s.s_comment, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
AggregatedData AS (
    SELECT 
        s.s_nationkey,
        SUM(ps.ps_availqty) AS total_available_quantity,
        AVG(p.p_retailprice) AS avg_retail_price,
        COUNT(DISTINCT c.c_custkey) AS distinct_customers
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    JOIN customer c ON s.s_nationkey = c.c_nationkey
    GROUP BY s.s_nationkey
),
FilteredSuppliers AS (
    SELECT DISTINCT sh.s_suppkey, sh.s_name, ad.total_available_quantity, ad.avg_retail_price, ad.distinct_customers
    FROM SupplierHierarchy sh
    JOIN AggregatedData ad ON sh.s_nationkey = ad.s_nationkey
    WHERE sh.s_acctbal > 1000
)
SELECT 
    fs.s_name,
    fs.total_available_quantity,
    fs.avg_retail_price,
    fs.distinct_customers,
    CONCAT('Supplier ', fs.s_name, ' has ', fs.total_available_quantity, ' units available, with an average price of $', ROUND(fs.avg_retail_price, 2), ' and serves ', fs.distinct_customers, ' distinct customers.') AS supplier_summary
FROM FilteredSuppliers fs
ORDER BY fs.total_available_quantity DESC;
