WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS PriceRank
    FROM orders o
    WHERE o.o_orderdate >= '1997-01-01' AND o.o_orderdate <= '1997-12-31'
),
SupplierAvailability AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_availqty) AS TotalAvailable,
        COUNT(DISTINCT ps.ps_suppkey) AS SupplierCount
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
TopSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        COALESCE(SUM(ps.ps_supplycost * ps.ps_availqty), 0) AS TotalSupplyValue
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING COUNT(ps.ps_partkey) > 10
),
OverlappingCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(DISTINCT o.o_orderkey) AS OrderCount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal > 1000.00 AND o.o_orderstatus IN ('O', 'P')
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(DISTINCT o.o_orderkey) > 5
)
SELECT 
    r.o_orderkey,
    r.o_totalprice,
    s.s_name,
    c.c_name,
    sa.TotalAvailable,
    c.c_acctbal AS CustomerBalance,
    CASE 
        WHEN r.PriceRank = 1 THEN 'Top Price Order'
        ELSE 'Regular Order'
    END AS OrderCategory,
    CASE 
        WHEN sa.TotalAvailable > 100 THEN 'Ample Supply'
        ELSE 'Limited Supply'
    END AS SupplyStatus
FROM RankedOrders r
FULL OUTER JOIN TopSuppliers s ON r.o_orderkey = (SELECT l.l_orderkey FROM lineitem l WHERE l.l_orderkey = r.o_orderkey LIMIT 1)
LEFT JOIN SupplierAvailability sa ON s.s_suppkey = sa.ps_suppkey
JOIN OverlappingCustomers c ON c.c_custkey = r.o_orderkey 
WHERE r.o_orderstatus IS NOT NULL OR c.c_name IS NOT NULL
ORDER BY r.o_totalprice DESC, s.s_name ASC NULLS LAST;