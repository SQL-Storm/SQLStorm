
WITH RECURSIVE CustomerOrderSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_spent,
        COUNT(o.o_orderkey) AS total_orders,
        RANK() OVER (PARTITION BY c.c_custkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS rank
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        c.c_custkey, c.c_name
),
SupplierPartDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS avg_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    WHERE 
        s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)  
    GROUP BY 
        s.s_suppkey, s.s_name, p.p_partkey, p.p_name
)
SELECT 
    co.c_name,
    co.total_spent,
    co.total_orders,
    sp.s_name AS supplier_name,
    sp.total_available,
    sp.avg_cost
FROM 
    CustomerOrderSummary co
FULL OUTER JOIN 
    SupplierPartDetails sp ON co.c_custkey = (SELECT MAX(c.c_custkey) FROM customer c WHERE c.c_name LIKE 'A%')  
WHERE 
    (co.rank = 1 OR co.rank IS NULL) OR sp.avg_cost < 100.00  
ORDER BY 
    co.total_spent DESC NULLS LAST, sp.avg_cost ASC;
