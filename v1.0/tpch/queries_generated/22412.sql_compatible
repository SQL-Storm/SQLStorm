
WITH RECURSIVE customer_sales AS (
    SELECT c.c_custkey,
           c.c_name,
           SUM(o.o_totalprice) AS total_sales
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    UNION ALL
    SELECT cs.c_custkey,
           cs.c_name,
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM customer_sales cs
    JOIN lineitem l ON l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cs.c_custkey)
    GROUP BY cs.c_custkey, cs.c_name
),
ranked_sales AS (
    SELECT cs.c_custkey,
           cs.c_name,
           cs.total_sales,
           ROW_NUMBER() OVER (PARTITION BY CASE WHEN cs.total_sales > 1000 THEN 'High' ELSE 'Low' END ORDER BY cs.total_sales DESC) AS sales_rank
    FROM customer_sales cs
)
SELECT r.r_name,
       n.n_name,
       p.p_name,
       COALESCE(MAX(ps.ps_availqty), 0) AS available_quantity,
       AVG(CASE WHEN s.s_acctbal IS NOT NULL THEN s.s_acctbal * 0.9 ELSE 0 END) AS average_adjusted_balance,
       STRING_AGG(DISTINCT cs.c_name) AS customer_names
FROM region r
JOIN nation n ON n.n_regionkey = r.r_regionkey
JOIN supplier s ON s.s_nationkey = n.n_nationkey
LEFT JOIN partsupp ps ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN part p ON p.p_partkey = ps.ps_partkey
LEFT JOIN ranked_sales cs ON cs.c_custkey IN (SELECT o.o_custkey FROM orders o WHERE o.o_orderkey IN (SELECT l.l_orderkey FROM lineitem l WHERE l.l_suppkey = s.s_suppkey))
WHERE r.r_name LIKE 'A%' 
  AND p.p_size IS NOT NULL
  AND (p.p_retailprice - ps.ps_supplycost) > 10 
  AND (p.p_comment IS NULL OR p.p_comment ILIKE '%special%')
GROUP BY r.r_name, n.n_name, p.p_name
HAVING COUNT(cs.total_sales) > 1
ORDER BY r.r_name, n.n_name, p.p_name
OFFSET (SELECT COUNT(*) FROM ranked_sales WHERE sales_rank = 1) ROWS FETCH NEXT 5 ROWS ONLY;
