WITH RECURSIVE OrdersCTE AS (
    SELECT o_orderkey, o_custkey, o_orderdate, o_totalprice, 1 AS depth
    FROM orders
    WHERE o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_custkey, o.o_orderdate, o.o_totalprice, depth + 1
    FROM orders o
    JOIN OrdersCTE oc ON o.o_custkey = oc.o_custkey
    WHERE o.o_orderdate > oc.o_orderdate AND depth < 5
),
FilteredParts AS (
    SELECT p.p_partkey, p.p_name, p.p_size, p.p_retailprice
    FROM part p
    WHERE p.p_size > 20 AND p.p_retailprice < 50.00
),
SupplierData AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, COUNT(DISTINCT o.o_orderkey) AS order_count, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    c.c_name AS customer_name,
    co.order_count,
    co.total_spent,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue,
    ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY co.total_spent DESC) AS revenue_rank,
    COALESCE(sd.total_cost, 0) AS supplier_cost
FROM CustomerOrders co
JOIN lineitem l ON l.l_orderkey IN (SELECT o_orderkey FROM OrdersCTE)
JOIN FilteredParts fp ON l.l_partkey = fp.p_partkey
LEFT JOIN SupplierData sd ON sd.s_suppkey = (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey = fp.p_partkey ORDER BY ps.ps_supplycost DESC LIMIT 1)
JOIN customer c ON co.c_custkey = c.c_custkey
WHERE l.l_shipdate >= '1997-01-01' AND l.l_shipdate < '1997-12-31'
GROUP BY c.c_name, co.order_count, co.total_spent, sd.total_cost
HAVING SUM(l.l_discount) > 0.05
ORDER BY net_revenue DESC;