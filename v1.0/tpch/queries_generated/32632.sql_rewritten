WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT sp.s_suppkey, sp.s_name, sp.s_nationkey, sh.level + 1
    FROM supplier sp
    INNER JOIN SupplierHierarchy sh ON sp.s_nationkey = sh.s_nationkey
    WHERE sp.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
),
RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderdate,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS total_price_rank
    FROM orders o
    WHERE o.o_orderdate >= DATE '1997-01-01'
),
PartSuppliers AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_quantity,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
)
SELECT 
    n.n_name,
    r.r_name,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    AVG(l.l_extendedprice) AS avg_extended_price,
    COALESCE(SUM(CASE WHEN l.l_returnflag = 'R' THEN l.l_extendedprice ELSE 0 END), 0) AS returned_value,
    sh.level,
    po.total_quantity,
    po.supplier_count
FROM nation n
JOIN region r ON n.n_regionkey = r.r_regionkey
LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
JOIN lineitem l ON l.l_orderkey IN (SELECT o.o_orderkey FROM RankedOrders o WHERE o.total_price_rank <= 10)
JOIN SupplierHierarchy sh ON n.n_nationkey = sh.s_nationkey
JOIN PartSuppliers po ON l.l_partkey = po.p_partkey
WHERE l.l_discount > (SELECT AVG(l_discount) FROM lineitem)
GROUP BY n.n_name, r.r_name, sh.level, po.total_quantity, po.supplier_count
HAVING AVG(l.l_extendedprice) > 100
ORDER BY total_quantity DESC, customer_count DESC;