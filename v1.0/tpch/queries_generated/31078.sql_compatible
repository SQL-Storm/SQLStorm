
WITH RECURSIVE NationTree AS (
    SELECT n_nationkey, n_name, n_regionkey, 0 AS level
    FROM nation
    WHERE n_name = 'USA'
    UNION ALL
    SELECT n.n_nationkey, n.n_name, n.n_regionkey, nt.level + 1
    FROM nation n
    JOIN NationTree nt ON n.n_regionkey = nt.n_nationkey
),
SupplierStats AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_availqty) AS total_available,
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
           ROW_NUMBER() OVER (PARTITION BY s.n_nationkey ORDER BY SUM(ps.ps_availqty) DESC) AS rn
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, s.n_nationkey
),
OrderSummary AS (
    SELECT o.o_orderkey, o.o_orderdate, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_order_value
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, os.total_order_value,
           ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY os.total_order_value DESC) AS cust_rank
    FROM customer c
    LEFT JOIN OrderSummary os ON c.c_custkey = os.o_orderkey
)
SELECT nt.n_name AS nation_name, ss.s_name AS supplier_name,
       cs.c_name AS customer_name, cs.total_order_value,
       COALESCE(ss.total_available, 0) AS total_available_parts,
       SUM(cs.total_order_value) OVER (PARTITION BY nt.n_nationkey) AS total_nation_order_value
FROM NationTree nt
LEFT JOIN SupplierStats ss ON nt.n_nationkey = ss.n_nationkey AND ss.rn = 1
LEFT JOIN CustomerOrders cs ON nt.n_nationkey = cs.c_nationkey
WHERE cs.total_order_value IS NOT NULL OR ss.total_available IS NOT NULL
ORDER BY nt.n_name, ss.total_supply_cost DESC, cs.total_order_value DESC;
