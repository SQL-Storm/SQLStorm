
WITH RECURSIVE TotalSales AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_orderkey) AS rn
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey
    HAVING 
        SUM(l.l_extendedprice) > 1000
),
SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        COALESCE(MAX(p.p_retailprice), 0) AS max_price
    FROM 
        supplier s
    LEFT JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    LEFT JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey, s.s_name, s.s_acctbal
),
CustomerOrders AS (
    SELECT 
        o.o_orderkey,
        COUNT(DISTINCT c.c_custkey) AS customer_count,
        o.o_totalprice,
        o.o_orderdate,
        RANK() OVER (ORDER BY o.o_totalprice DESC) AS price_rank
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderdate BETWEEN DATE '1998-10-01' - INTERVAL '1 year' AND DATE '1998-10-01'
    GROUP BY 
        o.o_orderkey, o.o_totalprice, o.o_orderdate
)
SELECT 
    c.o_orderkey,
    c.customer_count,
    c.o_totalprice,
    COUNT(s.s_suppkey) AS supplier_count,
    SUM(s.max_price) AS total_supplier_price,
    FIRST_VALUE(s.s_name) OVER (PARTITION BY c.o_orderkey ORDER BY s.max_price DESC) AS top_supplier
FROM 
    CustomerOrders c
LEFT JOIN 
    SupplierInfo s ON c.o_orderkey = s.s_suppkey
GROUP BY 
    c.o_orderkey, c.customer_count, c.o_totalprice
HAVING 
    COUNT(s.s_suppkey) > 0 AND SUM(s.max_price) IS NOT NULL
ORDER BY 
    c.o_totalprice DESC;
