WITH RECURSIVE CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice, o.o_orderstatus
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice, o.o_orderstatus
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN CustomerOrders co ON o.o_orderkey <> co.o_orderkey
    WHERE co.o_totalprice < o.o_totalprice
),
SupplierParts AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, SUM(ps.ps_availqty) AS total_available_qty
    FROM partsupp ps
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE s.s_acctbal > 0
    GROUP BY ps.ps_partkey, ps.ps_suppkey
),
OrderLineItems AS (
    SELECT l.l_orderkey, l.l_partkey, 
           ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS line_rank,
           l.l_discount, l.l_quantity, l.l_extendedprice
    FROM lineitem l
    WHERE l.l_shipdate >= DATE '1997-01-01' AND l.l_shipdate < DATE '1998-01-01'
),
FinalResults AS (
    SELECT c.c_name, COUNT(DISTINCT co.o_orderkey) AS order_count, 
           SUM(ol.l_extendedprice * (1 - ol.l_discount)) AS total_revenue,
           SUM(sp.total_available_qty) AS total_parts_available
    FROM CustomerOrders co
    JOIN customer c ON co.c_custkey = c.c_custkey
    LEFT JOIN OrderLineItems ol ON co.o_orderkey = ol.l_orderkey
    LEFT JOIN SupplierParts sp ON ol.l_partkey = sp.ps_partkey
    GROUP BY c.c_name
)

SELECT fr.c_name, fr.order_count, fr.total_revenue,
       CASE 
           WHEN fr.total_parts_available IS NULL THEN 'No Parts Available'
           WHEN fr.total_parts_available < 1000 THEN 'Low Availability'
           ELSE 'Sufficient Availability' 
       END AS availability_status
FROM FinalResults fr
WHERE fr.total_revenue > 5000
ORDER BY fr.total_revenue DESC;