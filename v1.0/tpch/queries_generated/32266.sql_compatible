
WITH RECURSIVE CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS total_orders
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 1000
),
TopSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_supply_cost DESC
    LIMIT 10
),
LineItemAnalysis AS (
    SELECT 
        l.l_orderkey,
        COUNT(*) AS total_items,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS item_rank
    FROM lineitem l
    GROUP BY l.l_orderkey
)
SELECT 
    c.c_name AS customer_name,
    co.total_spent,
    ts.s_name AS supplier_name,
    la.total_items,
    la.total_revenue,
    la.item_rank
FROM CustomerOrders co
JOIN TopSuppliers ts ON co.total_orders = (SELECT COUNT(DISTINCT o.o_orderkey) FROM orders o WHERE o.o_custkey = co.c_custkey)
LEFT JOIN LineItemAnalysis la ON la.l_orderkey = (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = co.c_custkey ORDER BY o.o_orderdate DESC LIMIT 1)
WHERE ts.total_supply_cost IS NOT NULL
ORDER BY co.total_spent DESC, la.total_revenue DESC
LIMIT 20;
