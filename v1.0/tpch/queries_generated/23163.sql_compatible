
WITH RECURSIVE OrderHierarchy AS (
    SELECT 
        o_orderkey,
        c_custkey,
        o_orderstatus,
        o_totalprice,
        o_orderdate,
        o_orderpriority,
        o_clerk,
        o_shippriority,
        0 AS level
    FROM orders
    WHERE o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT 
        o.o_orderkey,
        oh.c_custkey,
        oh.o_orderstatus,
        oh.o_totalprice,
        oh.o_orderdate,
        oh.o_orderpriority,
        oh.o_clerk,
        oh.o_shippriority,
        oh.level + 1
    FROM OrderHierarchy oh
    JOIN orders o ON oh.o_orderkey = o.o_custkey
    WHERE oh.level < 5
),
PartSupplierSummary AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
CustomerStats AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name
),
SupplierRanked AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        DENSE_RANK() OVER (ORDER BY s.s_acctbal DESC) AS rank,
        COALESCE(s.s_comment, 'No Comment') AS supplier_comment
    FROM supplier s
)
SELECT 
    oh.o_orderkey,
    oh.o_orderdate,
    CONCAT('Customer: ', cs.c_name, '; Total Spent: ', COALESCE(cs.total_spent, 0)::TEXT) AS customer_info,
    pss.p_name,
    pss.total_available,
    CASE 
        WHEN s.rank IS NULL THEN 'Rank Not Available' 
        ELSE CONCAT('Supplier Rank: ', s.rank) 
    END AS supplier_info,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
    ROW_NUMBER() OVER (PARTITION BY oh.o_orderkey ORDER BY l.l_shipdate DESC) AS shipment_order
FROM OrderHierarchy oh
JOIN lineitem l ON oh.o_orderkey = l.l_orderkey
JOIN PartSupplierSummary pss ON pss.p_partkey = l.l_partkey
LEFT JOIN CustomerStats cs ON cs.c_custkey = oh.c_custkey
LEFT JOIN SupplierRanked s ON s.s_suppkey = l.l_suppkey
WHERE l.l_returnflag = 'N' 
  AND l.l_shipmode IN ('AIR', 'RAIL')
  AND oh.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
GROUP BY 
    oh.o_orderkey, 
    oh.o_orderdate,
    cs.c_name,
    pss.p_name,
    pss.total_available,
    s.rank
HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > (SELECT AVG(o_totalprice) FROM orders)
ORDER BY 
    oh.o_orderdate DESC, 
    total_sales DESC
LIMIT 50 OFFSET 10;
