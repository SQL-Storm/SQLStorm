
WITH RECURSIVE supplier_tree AS (
    SELECT s.s_suppkey, s.s_name, s.s_address, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal > 1000.00

    UNION ALL

    SELECT ps.ps_suppkey, s.s_name, s.s_address, s.s_nationkey, st.level + 1
    FROM supplier_tree st
    JOIN partsupp ps ON st.s_suppkey = ps.ps_suppkey
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
)
SELECT 
    st.s_name,
    st.s_address,
    n.n_name,
    r.r_name,
    COUNT(DISTINCT l.l_orderkey) AS orders_count,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
    AVG(l.l_tax) OVER (PARTITION BY st.s_nationkey) AS avg_tax,
    MAX(r.r_name) OVER () AS max_region_name,
    COALESCE(STRING_AGG(DISTINCT p.p_name, '; '), 'No Parts') AS part_names,
    CASE WHEN COUNT(l.l_orderkey) > 10 THEN 'High Volume' ELSE 'Low Volume' END AS volume_category
FROM supplier_tree st
JOIN lineitem l ON st.s_suppkey = l.l_suppkey
JOIN partsupp ps ON l.l_partkey = ps.ps_partkey
JOIN part p ON ps.ps_partkey = p.p_partkey
JOIN customer c ON l.l_orderkey = c.c_custkey
JOIN nation n ON st.s_nationkey = n.n_nationkey
JOIN region r ON n.n_regionkey = r.r_regionkey
WHERE l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
AND st.level < 5
GROUP BY st.s_name, st.s_address, n.n_name, r.r_name, st.s_nationkey
HAVING (SUM(l.l_extendedprice) IS NOT NULL OR COUNT(l.l_orderkey) > 5)
ORDER BY total_revenue DESC, st.s_name ASC
LIMIT 50
OFFSET (SELECT COUNT(*) FROM supplier) % 100;
