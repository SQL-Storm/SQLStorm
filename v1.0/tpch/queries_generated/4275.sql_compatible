
WITH SupplierSales AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM
        supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN lineitem l ON ps.ps_partkey = l.l_partkey
    GROUP BY
        s.s_suppkey, s.s_name
),
TopSuppliers AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        ROW_NUMBER() OVER (ORDER BY ss.total_sales DESC) AS sales_rank
    FROM
        supplier s
    LEFT JOIN SupplierSales ss ON s.s_suppkey = ss.s_suppkey
    WHERE
        s.s_acctbal IS NOT NULL AND s.s_acctbal > 0
)
SELECT
    t.s_suppkey,
    t.s_name,
    t.s_acctbal,
    COALESCE(s.total_sales, 0) AS total_sales,
    CASE
        WHEN t.sales_rank <= 10 THEN 'Top Supplier'
        ELSE 'Regular Supplier'
    END AS supplier_category
FROM
    TopSuppliers t
LEFT JOIN SupplierSales s ON t.s_suppkey = s.s_suppkey
WHERE
    EXISTS (
        SELECT 1
        FROM partsupp ps
        WHERE ps.ps_suppkey = t.s_suppkey AND ps.ps_availqty < 500
    )
UNION ALL
SELECT
    NULL AS s_suppkey,
    'TOTAL' AS s_name,
    SUM(CASE WHEN s.s_acctbal IS NOT NULL THEN s.s_acctbal ELSE 0 END) AS s_acctbal,
    SUM(COALESCE(s.total_sales, 0)) AS total_sales,
    NULL AS supplier_category
FROM
    TopSuppliers t
LEFT JOIN SupplierSales s ON t.s_suppkey = s.s_suppkey
HAVING SUM(COALESCE(s.total_sales, 0)) > 1000000
GROUP BY 
    NULL
ORDER BY total_sales DESC;
