
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_address, s.n_nationkey, 
           s.s_acctbal, 0 AS level
    FROM supplier s 
    WHERE s.s_acctbal > (
        SELECT AVG(s2.s_acctbal) 
        FROM supplier s2 
        WHERE s2.n_nationkey = s.n_nationkey
    )
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_address, s.n_nationkey, 
           s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.n_nationkey = sh.n_nationkey
    WHERE s.s_acctbal > (
        SELECT AVG(s2.s_acctbal) 
        FROM supplier s2 
        WHERE s2.n_nationkey = s.n_nationkey
    )
),
TotalSales AS (
    SELECT l.l_partkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM lineitem l
    JOIN orders o ON l.l_orderkey = o.o_orderkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY l.l_partkey
),
TopParts AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, 
           ts.total_sales, RANK() OVER (ORDER BY ts.total_sales DESC) AS rnk
    FROM part p
    JOIN TotalSales ts ON p.p_partkey = ts.l_partkey
    WHERE p.p_retailprice < (
        SELECT AVG(p2.p_retailprice)
        FROM part p2
    )
)
SELECT r.r_name, np.n_name, sh.s_name, COUNT(DISTINCT o.o_orderkey) AS total_orders,
       SUM(CASE WHEN ts.total_sales > 50000 THEN 1 ELSE 0 END) AS high_sales_parts,
       AVG(sh.s_acctbal) AS avg_supplier_acctbal
FROM region r
JOIN nation np ON r.r_regionkey = np.n_regionkey
LEFT JOIN supplier sh ON np.n_nationkey = sh.n_nationkey
LEFT JOIN orders o ON sh.s_suppkey = o.o_custkey
LEFT JOIN TopParts tp ON tp.p_partkey = ANY(SELECT ps.ps_partkey 
                                             FROM partsupp ps 
                                             WHERE ps.ps_availqty > 50)
LEFT JOIN TotalSales ts ON tp.p_partkey = ts.l_partkey
WHERE sh.s_acctbal IS NOT NULL
GROUP BY r.r_name, np.n_name, sh.s_name
HAVING COUNT(DISTINCT o.o_orderkey) > 5
ORDER BY avg_supplier_acctbal DESC;
