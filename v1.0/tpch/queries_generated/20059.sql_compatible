
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderdate,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rn
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= CURRENT_DATE - INTERVAL '90 days'
), 
SupplierStats AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_supplycost) AS total_supplycost,
        COUNT(*) AS supply_count,
        AVG(ps.ps_availqty) AS avg_avail_qty
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey
    HAVING 
        SUM(ps.ps_supplycost) > 0
), 
CustomerDetails AS (
    SELECT 
        c.c_custkey, 
        c.c_name,
        COALESCE(s.s_nationkey, -1) AS nation_key,
        COUNT(DISTINCT o.o_orderkey) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        supplier s ON c.c_nationkey = s.s_nationkey
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name, s.s_nationkey
    HAVING 
        COUNT(DISTINCT o.o_orderkey) > 2
)
SELECT 
    p.p_partkey,
    p.p_name,
    COUNT(DISTINCT CASE WHEN li.l_returnflag = 'R' THEN li.l_orderkey END) AS returned_orders,
    SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_sales_value,
    (SELECT COUNT(DISTINCT r.r_regionkey) 
     FROM region r 
     WHERE r.r_name LIKE '%East%') AS eastern_region_count,
    RANK() OVER (PARTITION BY c.nation_key ORDER BY SUM(li.l_discount) DESC) AS rank_discount
FROM 
    part p
JOIN 
    lineitem li ON p.p_partkey = li.l_partkey
JOIN 
    SupplierStats ss ON li.l_suppkey = ss.ps_suppkey
LEFT JOIN 
    CustomerDetails c ON li.l_orderkey IN (SELECT o.o_orderkey FROM RankedOrders o WHERE o.rn <= 10)
WHERE 
    (p.p_retailprice IS NOT NULL OR p.p_comment IS NOT NULL)
    AND ss.total_supplycost > (
        SELECT AVG(total_supplycost) FROM SupplierStats
    )
GROUP BY 
    p.p_partkey, 
    p.p_name, 
    c.nation_key
HAVING 
    SUM(li.l_extendedprice * (1 - li.l_discount)) > 50000
ORDER BY 
    returned_orders DESC, 
    total_sales_value ASC;
