WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_acctbal > (sh.s_acctbal * 0.75)
)
SELECT 
    p.p_partkey,
    p.p_name,
    nm.n_name AS national_supplier,
    SUM(CASE WHEN l.l_discount > 0.05 THEN l.l_extendedprice * (1 - l.l_discount) END) AS discounted_revenue,
    AVG(l.l_tax) AS avg_tax,
    STRING_AGG(DISTINCT CAST(s.s_name AS varchar), ', ') AS suppliers,
    ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY SUM(l.l_extendedprice) DESC) AS rn
FROM 
    part p
LEFT JOIN 
    partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN 
    supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN 
    lineitem l ON l.l_partkey = p.p_partkey
LEFT JOIN 
    nation nm ON s.s_nationkey = nm.n_nationkey
WHERE 
    l.l_shipdate BETWEEN cast('1998-10-01' as date) - INTERVAL '1 year' AND cast('1998-10-01' as date)
    AND (ps.ps_availqty IS NOT NULL OR s.s_comment LIKE '%important%')
GROUP BY 
    p.p_partkey, p.p_name, nm.n_name
HAVING 
    SUM(l.l_quantity) > (SELECT AVG(SUM(l2.l_quantity)) FROM lineitem l2 GROUP BY l2.l_orderkey)
ORDER BY 
    discounted_revenue DESC, rn
LIMIT 10;