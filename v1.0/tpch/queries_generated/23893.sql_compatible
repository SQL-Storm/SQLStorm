
WITH regional_supplier AS (
    SELECT 
        r.r_regionkey, 
        r.r_name AS region_name,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count,
        SUM(s.s_acctbal) AS total_account_balance
    FROM 
        region r
    LEFT JOIN 
        nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey 
    GROUP BY 
        r.r_regionkey, r.r_name
), top_customers AS (
    SELECT 
        c.c_custkey, 
        c.c_name,
        SUM(o.o_totalprice) AS total_spent 
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey 
    WHERE 
        o.o_orderstatus = 'O' 
        AND o.o_orderdate > '1997-01-01'
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        SUM(o.o_totalprice) > (SELECT AVG(o2.o_totalprice) 
                                FROM orders o2 
                                WHERE o2.o_orderdate < '1997-01-01')
), part_info AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        SUM(ps.ps_availqty * ps.ps_supplycost) AS total_value,
        ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY SUM(ps.ps_availqty * ps.ps_supplycost) DESC) AS rank
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY 
        p.p_partkey, p.p_name, p.p_type
)
SELECT 
    r.region_name,
    COUNT(DISTINCT c.c_custkey) AS unique_customers,
    SUM(pi.total_value) AS total_part_value,
    MAX(c.total_spent) AS highest_spent_customer,
    COALESCE(subquery.avg_bill, 0) AS avg_order_value
FROM 
    regional_supplier r
LEFT JOIN 
    top_customers c ON r.supplier_count > 5
LEFT JOIN 
    part_info pi ON pi.rank <= 5
LEFT JOIN 
    (SELECT 
         AVG(o.o_totalprice) AS avg_bill 
     FROM 
         orders o 
     WHERE 
         o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
    ) subquery ON true
WHERE 
    r.total_account_balance IS NOT NULL
GROUP BY 
    r.region_name
HAVING 
    COUNT(DISTINCT c.c_custkey) > 0 
    AND SUM(pi.total_value) > 10000
ORDER BY 
    total_part_value DESC, 
    r.region_name;
