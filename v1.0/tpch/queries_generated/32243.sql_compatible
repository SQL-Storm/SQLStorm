
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > 1000
),
OrderSummary AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY o.o_orderkey
),
PartSupplier AS (
    SELECT p.p_partkey, p.p_name, ps.ps_supplycost, ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost ASC) AS rn
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
),
TopSuppliers AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_supplycost) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost) > 50000
)
SELECT 
    COALESCE(n.n_name, 'Unknown') AS nation,
    sh.level,
    COUNT(DISTINCT os.o_orderkey) AS total_orders,
    AVG(os.total_revenue) AS average_revenue,
    STRING_AGG(DISTINCT CONCAT(ps.p_name, ' (', ps.ps_supplycost, ')'), ', ') AS supplies
FROM SupplierHierarchy sh
LEFT JOIN nation n ON sh.s_nationkey = n.n_nationkey
LEFT JOIN OrderSummary os ON os.o_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey IN (SELECT c.c_custkey FROM customer c WHERE c.c_nationkey = sh.s_nationkey))
LEFT JOIN PartSupplier ps ON sh.s_suppkey = ps.p_partkey
LEFT JOIN TopSuppliers ts ON sh.s_suppkey = ts.s_suppkey
WHERE sh.level <= 3
GROUP BY n.n_name, sh.level
ORDER BY n.n_name, sh.level DESC;
