
WITH SupplierRank AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY s.s_acctbal DESC) AS rank
    FROM 
        supplier s
    JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    WHERE 
        s.s_acctbal IS NOT NULL AND s.s_acctbal > 1000
),
PartsDetails AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS avg_supplycost
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY 
        p.p_partkey, p.p_name
),
OrderFacts AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
        COUNT(DISTINCT l.l_orderkey) AS line_count
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        l.l_shipdate >= DATE '1997-01-01' 
        AND l.l_shipdate < DATE '1997-12-31'
    GROUP BY 
        o.o_orderkey
)

SELECT 
    pd.p_name,
    COALESCE(pd.total_available, 0) AS total_available,
    COALESCE(pd.avg_supplycost, 0) AS avg_supplycost,
    COALESCE(SUM(s.s_acctbal), 0) AS total_acctbal,
    COUNT(DISTINCT o.o_orderkey) AS total_orders,
    CASE 
        WHEN SUM(l.l_extendedprice * (1 - l.l_discount)) IS NULL THEN 'No Sales'
        ELSE 'Sales Recorded'
    END AS sales_status,
    RANK() OVER (PARTITION BY r.r_name ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
FROM 
    PartsDetails pd
LEFT OUTER JOIN 
    SupplierRank s ON pd.p_partkey = s.s_suppkey
LEFT JOIN 
    lineitem l ON l.l_partkey = pd.p_partkey
LEFT JOIN 
    orders o ON l.l_orderkey = o.o_orderkey
JOIN 
    nation n ON s.s_nationkey = n.n_nationkey
JOIN 
    region r ON n.n_regionkey = r.r_regionkey
WHERE 
    r.r_name = 'EUROPE'
GROUP BY 
    pd.p_partkey, pd.p_name, pd.total_available, pd.avg_supplycost, r.r_name
ORDER BY 
    revenue_rank, total_orders DESC;
