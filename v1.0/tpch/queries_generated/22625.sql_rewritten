WITH RankedOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice,
           RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderdate >= DATEADD(year, -1, cast('1998-10-01' as date))
),
HighValueSuppliers AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_supplycost) AS total_supplycost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal > 1000
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost) > 50000
),
NationRegion AS (
    SELECT n.n_name, r.r_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM nation n
    JOIN region r ON n.n_regionkey = r.r_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_name, r.r_name
    HAVING COUNT(DISTINCT s.s_suppkey) > 3
),
AggregateStats AS (
    SELECT p.p_name, AVG(l.l_extendedprice * (1 - l.l_discount)) AS avg_price,
           COUNT(DISTINCT o.o_orderkey) AS order_count,
           STRING_AGG(DISTINCT CONCAT(s.s_name, ' ($', ROUND(s.s_acctbal, 2), ')')) AS supplier_info
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    LEFT JOIN orders o ON l.l_orderkey = o.o_orderkey
    LEFT JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE l.l_shipdate < cast('1998-10-01' as date) AND (l.l_returnflag IS NULL OR l.l_returnflag = 'N')
    GROUP BY p.p_name
)
SELECT ar.p_name, 
       CASE
           WHEN ar.order_count > 0 THEN ar.avg_price / ar.order_count 
           ELSE NULL 
       END AS average_price_per_order,
       nr.n_name, 
       nr.r_name, 
       COALESCE(hv.total_supplycost, 0) AS high_value_supplycost,
       nr.supplier_count
FROM AggregateStats ar
LEFT JOIN NationRegion nr ON TRUE
LEFT JOIN HighValueSuppliers hv ON hv.s_suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey = ar.p_partkey)
ORDER BY average_price_per_order DESC NULLS LAST;