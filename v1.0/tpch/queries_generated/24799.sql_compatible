
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderdate >= (DATE '1998-10-01' - INTERVAL '3 months')
),
CustomerPurchases AS (
    SELECT 
        c.c_custkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS total_orders
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY c.c_custkey
    HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > (
        SELECT AVG(total_spent)
        FROM (
            SELECT 
                SUM(l_extendedprice * (1 - l_discount)) AS total_spent
            FROM orders o
            JOIN lineitem l ON o.o_orderkey = l.l_orderkey
            GROUP BY o.o_orderkey
        ) AS avg_spent
    )
),
HighValueProducts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_price,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE p.p_retailprice > 100.00
    GROUP BY p.p_partkey, p.p_name, p.p_price
    HAVING SUM(ps.ps_availqty) > (
        SELECT COUNT(*) FROM supplier s WHERE s.s_acctbal > 5000
    )
)
SELECT 
    c.c_name,
    cp.total_orders,
    cp.total_spent,
    p.p_name,
    p.total_supply_cost
FROM CustomerPurchases cp
JOIN HighValueProducts p ON cp.total_spent > p.total_supply_cost
JOIN nation n ON cp.c_custkey = n.n_nationkey
LEFT JOIN region r ON n.n_regionkey = r.r_regionkey
WHERE r.r_name IS NOT NULL
AND EXISTS (
    SELECT 1 
    FROM RankedOrders ro 
    WHERE ro.o_orderkey = cp.total_orders 
    AND ro.order_rank = 1
)
ORDER BY cp.total_spent DESC, p.p_name ASC;
