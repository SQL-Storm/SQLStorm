
WITH SupplierStats AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM
        supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY
        s.s_suppkey, s.s_name
),
HighValueOrders AS (
    SELECT
        o.o_orderkey,
        o.o_orderdate,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS order_value
    FROM
        orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY
        o.o_orderkey, o.o_orderdate
    HAVING
        SUM(l.l_extendedprice * (1 - l.l_discount)) > 10000
),
PaymentStats AS (
    SELECT
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS total_orders
    FROM
        customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE
        c.c_acctbal IS NOT NULL
    GROUP BY
        c.c_custkey
)
SELECT
    n.n_name,
    ss.s_name,
    COALESCE(pp.total_spent, 0) AS total_customer_spent,
    ss.total_available,
    ss.avg_supply_cost,
    hvo.order_value,
    ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY COALESCE(pp.total_spent, 0) DESC) AS customer_rank
FROM
    nation n
LEFT JOIN supplier s ON s.s_nationkey = n.n_nationkey
LEFT JOIN SupplierStats ss ON s.s_suppkey = ss.s_suppkey
LEFT JOIN HighValueOrders hvo ON hvo.o_orderkey IN (
    SELECT o.o_orderkey
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE c.c_nationkey = n.n_nationkey
)
LEFT JOIN PaymentStats pp ON pp.c_custkey = ss.s_suppkey
WHERE
    n.n_regionkey IS NOT NULL
ORDER BY
    n.n_name, total_customer_spent DESC;
