
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, 1 AS level
    FROM supplier
    WHERE s_name LIKE 'Supplier%'
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
RecentOrders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_totalprice, 
           ROW_NUMBER() OVER (PARTITION BY o.o_custkey ORDER BY o.o_orderdate DESC) AS rn
    FROM orders o
    WHERE o.o_orderdate >= (CURRENT_DATE - INTERVAL '6 months')
),
PartSupplierStats AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_availqty, 
           AVG(ps.ps_supplycost) AS avg_supplycost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
)
SELECT r.r_name, n.n_name, 
       COALESCE(SUM(CASE WHEN li.l_returnflag = 'R' THEN li.l_extendedprice ELSE 0 END), 0) AS total_returned,
       MAX(os.o_totalprice) AS max_order_total,
       STRING_AGG(DISTINCT CONCAT(sh.s_name, ' (Level ', sh.level, ')'), '; ') AS suppliers_info,
       CASE 
           WHEN MAX(ps.total_availqty) IS NULL THEN 'No Parts Available'
           ELSE CONCAT('Available Parts: ', COUNT(DISTINCT ps.p_partkey))
       END AS availability_status
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN lineitem li ON li.l_orderkey IN (SELECT o_orderkey FROM RecentOrders WHERE rn = 1)
LEFT JOIN SupplierHierarchy sh ON n.n_nationkey = sh.s_nationkey
JOIN PartSupplierStats ps ON ps.p_partkey = li.l_partkey
LEFT JOIN RecentOrders os ON n.n_nationkey = os.o_custkey
WHERE r.r_name IS NOT NULL
GROUP BY r.r_name, n.n_name
HAVING COALESCE(SUM(li.l_quantity), 0) > 10000
ORDER BY total_returned DESC, max_order_total DESC;
