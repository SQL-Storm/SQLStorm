WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
filtered_parts AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, 
           CASE 
               WHEN p.p_size BETWEEN 1 AND 10 THEN 'Small'
               WHEN p.p_size BETWEEN 11 AND 20 THEN 'Medium'
               WHEN p.p_size > 20 THEN 'Large'
               ELSE 'Undefined'
           END AS size_category,
           p.p_retailprice * (1 - COALESCE(NULLIF((SELECT AVG(l_discount) FROM lineitem), 0), 0)) AS adjusted_retailprice
    FROM part p
    WHERE p.p_retailprice > 50 AND p.p_comment IS NOT NULL
),
ranked_orders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_orderdate, o.o_totalprice,
           RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS price_rank
    FROM orders o
    WHERE o.o_orderdate > DATEADD('YEAR', -1, cast('1998-10-01' as date))
),
nation_supplier AS (
    SELECT n.n_name, SUM(s.s_acctbal) AS total_acctbal
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_name
)
SELECT 
    n.n_name,
    np.total_acctbal,
    SUM(fp.adjusted_retailprice) AS total_adjusted_price,
    COUNT(DISTINCT lo.o_orderkey) AS total_orders,
    MAX(lo.price_rank) AS highest_rank
FROM nation n
JOIN nation_supplier np ON n.n_name = np.n_name
LEFT JOIN filtered_parts fp ON fp.p_partkey IN (
    SELECT ps.ps_partkey
    FROM partsupp ps
    WHERE ps.ps_availqty < (SELECT AVG(ps_availqty) FROM partsupp WHERE ps_supplycost > 25)
)
LEFT JOIN ranked_orders lo ON lo.o_custkey IN (
    SELECT DISTINCT c.c_custkey
    FROM customer c
    WHERE c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)
)
GROUP BY n.n_name, np.total_acctbal
HAVING SUM(fp.adjusted_retailprice) IS NOT NULL OR COUNT(DISTINCT lo.o_orderkey) >= 1
ORDER BY highest_rank DESC NULLS LAST;