
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, CONCAT(sh.s_name, ' -> ', s.s_name), sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
    WHERE sh.level < 5
),
PartSupplierStats AS (
    SELECT ps.ps_partkey, COUNT(ps.ps_suppkey) AS supplier_count,
           AVG(ps.ps_supplycost) AS avg_supply_cost,
           SUM(ps.ps_availqty) AS total_available_qty
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
CustomerOrderStats AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent,
           COUNT(o.o_orderkey) AS total_orders,
           ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(o.o_totalprice) DESC) AS order_rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
LineItemWithDiscount AS (
    SELECT l.l_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
           MAX(l.l_discount) AS max_discount
    FROM lineitem l
    WHERE l.l_shipdate < DATE '1998-10-01'
    GROUP BY l.l_orderkey
)
SELECT n.n_name, 
       COALESCE(SUM(p.ps_supplycost), 0) AS total_cost,
       COUNT(DISTINCT c.c_custkey) AS customer_count,
       COUNT(DISTINCT o.o_orderkey) AS order_count,
       SUM(l.revenue) AS total_revenue,
       STRING_AGG(DISTINCT sh.s_name, ', ') AS suppliers,
       CASE WHEN AVG(cs.total_spent) IS NULL THEN 'No Orders Yet' 
            ELSE CONCAT('Average spent: $', ROUND(AVG(cs.total_spent), 2)) END AS avg_spent_summary
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN partsupp p ON s.s_suppkey = p.ps_suppkey
LEFT JOIN CustomerOrderStats cs ON cs.c_custkey = s.s_suppkey
LEFT JOIN LineItemWithDiscount l ON l.l_orderkey IN (
    SELECT o.o_orderkey
    FROM orders o
    WHERE o.o_orderstatus = 'F'
)
LEFT JOIN SupplierHierarchy sh ON sh.s_suppkey = s.s_suppkey
GROUP BY n.n_name
ORDER BY total_cost DESC, customer_count DESC;
