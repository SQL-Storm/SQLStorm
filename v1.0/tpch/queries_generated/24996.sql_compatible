
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5 AND s.s_acctbal > sh.s_acctbal
),
TopSuppliers AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 1000000
),
NationDetails AS (
    SELECT n.n_nationkey, n.n_name, COUNT(c.c_custkey) AS num_customers
    FROM nation n
    LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
    GROUP BY n.n_nationkey, n.n_name
),
TopRegions AS (
    SELECT r.r_regionkey, r.r_name, COUNT(n.n_nationkey) AS nation_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    GROUP BY r.r_regionkey, r.r_name
    HAVING COUNT(n.n_nationkey) > 3
)

SELECT
    TH.s_suppkey,
    TH.s_name,
    COALESCE(SH.level, 0) AS supplier_level,
    COALESCE(ND.num_customers, 0) AS customer_count,
    TR.r_name AS region_name,
    CASE 
        WHEN TH.total_supply_cost IS NULL THEN 'Low Supply'
        ELSE 'High Supply'
    END AS supply_status,
    TR.nation_count AS nations_in_region
FROM TopSuppliers TH
LEFT JOIN SupplierHierarchy SH ON TH.s_suppkey = SH.s_suppkey
LEFT JOIN NationDetails ND ON SH.s_nationkey = ND.n_nationkey
JOIN TopRegions TR ON ND.n_nationkey = TR.r_regionkey
WHERE TH.total_supply_cost IS NOT NULL
AND SH.level IS NOT NULL
ORDER BY supply_status DESC, customer_count ASC;
