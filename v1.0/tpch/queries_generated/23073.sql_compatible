
WITH RecursivePart AS (
    SELECT p.p_partkey, p.p_name, p.p_mfgr, p.p_brand, p.p_type, 
           p.p_size, p.p_container, p.p_retailprice, p.p_comment,
           ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_size DESC) AS rn
    FROM part p
    WHERE p.p_retailprice > 100
),
SelectedSuppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, s.s_comment, 
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    INNER JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal IS NOT NULL
    GROUP BY s.s_suppkey, s.s_name, s.s_acctbal, s.s_comment
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > (SELECT AVG(total_cost) FROM (
        SELECT SUM(ps_supplycost * ps_availqty) AS total_cost
        FROM supplier s
        INNER JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
        GROUP BY s.s_suppkey
    ) AS avg_cost)
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal, COUNT(o.o_orderkey) AS total_orders
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 5
)
SELECT pp.p_name, pp.p_retailprice, 
       COUNT(ls.l_orderkey) AS order_count,
       SUM(ls.l_extendedprice * (1 - ls.l_discount)) AS total_revenue,
       CASE 
           WHEN AVG(ls.l_tax) IS NULL THEN 'N/A'
           ELSE CAST(AVG(ls.l_tax) AS VARCHAR)
       END AS avg_tax,
       EXISTS (SELECT 1 FROM SelectedSuppliers ss WHERE ss.s_suppkey = p.ps_suppkey) AS is_top_supplier
FROM lineitem ls
JOIN orders o ON ls.l_orderkey = o.o_orderkey
JOIN RecursivePart pp ON ls.l_partkey = pp.p_partkey
LEFT JOIN CustomerOrders co ON o.o_custkey = co.c_custkey
LEFT JOIN part p ON ls.l_partkey = p.p_partkey
WHERE o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
  AND (o.o_orderstatus = 'F' OR o.o_orderstatus = 'O')
  AND pp.rn = 1
GROUP BY pp.p_name, pp.p_retailprice
ORDER BY total_revenue DESC, avg_tax ASC
LIMIT 10;
