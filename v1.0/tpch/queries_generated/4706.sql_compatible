
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_type,
        p.p_size,
        p.p_retailprice,
        RANK() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    WHERE p.p_retailprice > 100.00
),
SupplierAvailability AS (
    SELECT 
        ps.ps_partkey,
        SUM(ps.ps_availqty) AS total_avail_qty
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal > 1000.00
    GROUP BY c.c_custkey, c.c_name
),
HighValueCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        COALESCE(co.total_orders, 0) AS total_orders,
        COALESCE(co.total_spent, 0) AS total_spent
    FROM customer c
    LEFT JOIN CustomerOrders co ON c.c_custkey = co.c_custkey
)
SELECT 
    np.p_name,
    np.p_brand,
    np.p_size,
    np.p_retailprice,
    sa.total_avail_qty,
    hvc.c_name AS customer_name,
    hvc.total_orders,
    hvc.total_spent,
    CASE 
        WHEN hvc.total_spent IS NULL OR hvc.total_spent = 0 THEN 'No Orders'
        WHEN hvc.total_spent > 1000 THEN 'High Value'
        ELSE 'Regular'
    END AS customer_segment
FROM RankedParts np
LEFT JOIN SupplierAvailability sa ON np.p_partkey = sa.ps_partkey
LEFT JOIN HighValueCustomers hvc ON sa.total_avail_qty > 0 AND hvc.total_orders > 0
WHERE (np.price_rank <= 5 OR sa.total_avail_qty IS NULL)
ORDER BY np.p_brand, np.p_partkey;
