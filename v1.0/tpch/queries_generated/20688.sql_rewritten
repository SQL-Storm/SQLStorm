WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
ranked_orders AS (
    SELECT o.o_orderkey, o.o_totalprice, 
           ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderdate >= DATE '1996-01-01' AND o.o_orderdate < DATE '1997-01-01'
),
customer_orders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) IS NOT DISTINCT FROM 0
),
filtered_lineitems AS (
    SELECT l.l_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS adjusted_price
    FROM lineitem l
    WHERE l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY l.l_orderkey
)
SELECT p.p_name, 
       s.s_name AS supplier_name, 
       r.r_name AS region_name, 
       COALESCE(c.o_order_count, 0) AS customer_order_count,
       COALESCE(c.total_spent, 0) AS total_spent,
       li.adjusted_price,
       ROW_NUMBER() OVER (PARTITION BY r.r_regionkey ORDER BY li.adjusted_price DESC) AS price_rank
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey 
JOIN nation n ON s.s_nationkey = n.n_nationkey 
JOIN region r ON n.n_regionkey = r.r_regionkey 
LEFT JOIN customer_orders c ON c.c_custkey = (SELECT MIN(c2.c_custkey) FROM customer c2 WHERE c2.c_acctbal > c.c_acctbal)
JOIN filtered_lineitems li ON li.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_orderkey = ANY (ARRAY(SELECT l.l_orderkey FROM lineitem l WHERE l.l_suppkey = s.s_suppkey)))
WHERE p.p_retailprice IS NOT NULL AND p.p_size BETWEEN 10 AND 20
  AND (s.s_acctbal IS NULL OR s.s_acctbal > 1000) 
ORDER BY r.r_regionkey, adjusted_price DESC
LIMIT 100;