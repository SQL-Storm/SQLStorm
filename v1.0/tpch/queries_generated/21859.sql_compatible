
WITH RECURSIVE supplier_cust AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier WHERE s_acctbal IS NOT NULL)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sc.level + 1
    FROM supplier_cust sc
    JOIN partsupp ps ON ps.ps_suppkey = sc.s_suppkey
    JOIN lineitem l ON l.l_partkey = ps.ps_partkey
    WHERE sc.level < 5 AND l.l_discount BETWEEN 0.05 AND 0.2
),
region_supplier AS (
    SELECT r.r_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM region r
    LEFT JOIN nation n ON n.n_regionkey = r.r_regionkey 
    LEFT JOIN supplier s ON s.s_nationkey = n.n_nationkey
    GROUP BY r.r_name
),
order_line AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey
)
SELECT r.r_name,
       COALESCE(rs.supplier_count, 0) AS supplier_count,
       ol.total_price,
       ROW_NUMBER() OVER (PARTITION BY r.r_name ORDER BY ol.total_price DESC) AS price_rank,
       CASE 
           WHEN ol.total_price IS NULL THEN 'NO ORDERS' 
           ELSE 'HAS ORDERS' 
       END AS order_status
FROM region r
LEFT JOIN region_supplier rs ON r.r_name = rs.r_name
LEFT JOIN order_line ol ON ol.o_orderkey IN (
    SELECT o.o_orderkey 
    FROM orders o 
    WHERE o.o_orderstatus = 'F' 
    AND EXISTS (
        SELECT 1 
        FROM supplier_cust sc 
        WHERE sc.s_acctbal > 500
    )
)
ORDER BY r.r_name, price_rank
OFFSET 5 ROWS;
