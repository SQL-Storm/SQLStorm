WITH RECURSIVE revenue_calculation AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS rank
    FROM 
        part p
    JOIN 
        lineitem l ON p.p_partkey = l.l_partkey
    JOIN 
        orders o ON l.l_orderkey = o.o_orderkey
    WHERE 
        o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1998-01-01'
    GROUP BY 
        p.p_partkey, p.p_name
),
filtered_revenue AS (
    SELECT 
        p_partkey, 
        p_name, 
        total_revenue 
    FROM 
        revenue_calculation 
    WHERE 
        rank <= 5
)
SELECT 
    f.p_partkey,
    f.p_name,
    f.total_revenue,
    COALESCE(s.s_name, 'Unknown Supplier') AS supplier_name,
    COALESCE(s.s_acctbal, 0) AS supplier_balance,
    COUNT(DISTINCT o.o_orderkey) AS order_count,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    SUM(CASE WHEN l.l_returnflag = 'R' THEN 1 ELSE 0 END) AS returned_items
FROM 
    filtered_revenue f
LEFT JOIN 
    partsupp ps ON f.p_partkey = ps.ps_partkey
LEFT JOIN 
    supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN 
    lineitem l ON f.p_partkey = l.l_partkey
LEFT JOIN 
    orders o ON l.l_orderkey = o.o_orderkey
LEFT JOIN 
    customer c ON o.o_custkey = c.c_custkey
GROUP BY 
    f.p_partkey, f.p_name, supplier_name, supplier_balance
ORDER BY 
    f.total_revenue DESC;