WITH RankedParts AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        p.p_brand, 
        p.p_retailprice, 
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rank
    FROM 
        part p
), SupplierStats AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_acctbal,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT ps.ps_partkey) AS unique_parts
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name, s.s_acctbal
), CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent,
        AVG(o.o_totalprice) AS avg_order_value
    FROM 
        customer c 
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.custkey, c.c_name
), HighValueNations AS (
    SELECT 
        n.n_nationkey, 
        n.n_name,
        SUM(c.c_acctbal) AS total_cash,
        COUNT(DISTINCT s.s_suppkey) AS total_suppliers
    FROM 
        nation n
    JOIN 
        customer c ON c.c_nationkey = n.n_nationkey
    JOIN 
        supplier s ON s.s_nationkey = n.n_nationkey
    GROUP BY 
        n.n_nationkey, n.n_name
    HAVING 
        SUM(c.c_acctbal) > (SELECT AVG(c2.c_acctbal) FROM customer c2)
), Summary AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        p.p_brand,
        COALESCE(ss.total_supply_cost, 0) AS total_supply_cost,
        COALESCE(cs.total_spent, 0) AS total_spent,
        hs.total_cash,
        hs.total_suppliers
    FROM 
        RankedParts p
    LEFT JOIN 
        SupplierStats ss ON p.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = ss.s_suppkey)
    LEFT JOIN 
        CustomerOrders cs ON cs.order_count > 5 
    LEFT JOIN 
        HighValueNations hs ON hs.n_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_name = 'Germany')
)
SELECT 
    s.custkey, 
    s.c_name, 
    s.total_spent, 
    p.p_name, 
    s.total_supply_cost, 
    s.total_cash, 
    s.total_suppliers
FROM 
    Summary s
WHERE 
    s.total_supply_cost IS NOT NULL AND
    s.total_spent > (SELECT AVG(sp.total_spent) FROM Summary sp) 
ORDER BY 
    s.total_spent DESC
FETCH FIRST 10 ROWS ONLY;