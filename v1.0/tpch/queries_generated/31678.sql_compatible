
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_custkey, c.c_name, c.c_nationkey, 1 AS level
    FROM customer c
    WHERE c.c_acctbal > (SELECT AVG(c_acctbal) FROM customer)
    UNION ALL
    SELECT c.c_custkey, c.c_name, c.c_nationkey, ch.level + 1
    FROM customer c
    JOIN CustomerHierarchy ch ON c.c_nationkey = ch.c_nationkey
    WHERE ch.level < 5
),
SupplierCost AS (
    SELECT ps.ps_partkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
QualifiedOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate, SUM(li.l_extendedprice * (1 - li.l_discount)) AS net_revenue
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    WHERE o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY o.o_orderkey, o.o_totalprice, o.o_orderdate
),
HighRevenueSuppliers AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_supplycost) AS total_supply_cost
    FROM supplier s
    JOIN SupplierCost sc ON s.s_suppkey = sc.ps_partkey
    WHERE s.s_acctbal IS NOT NULL
    GROUP BY s.s_suppkey, s.s_name
),
FinalReport AS (
    SELECT ch.c_name, ch.c_custkey, SUM(qo.net_revenue) AS total_revenue,
           RANK() OVER (PARTITION BY ch.c_nationkey ORDER BY SUM(qo.net_revenue) DESC) AS revenue_rank,
           COUNT(DISTINCT hs.s_suppkey) AS supplier_count
    FROM CustomerHierarchy ch
    LEFT JOIN QualifiedOrders qo ON qo.o_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = ch.c_custkey)
    LEFT JOIN HighRevenueSuppliers hs ON hs.total_supply_cost > 1000
    GROUP BY ch.c_name, ch.c_custkey, ch.c_nationkey
)
SELECT f.c_name, f.total_revenue, f.revenue_rank, f.supplier_count
FROM FinalReport f
WHERE f.revenue_rank <= 10
ORDER BY f.total_revenue DESC;
