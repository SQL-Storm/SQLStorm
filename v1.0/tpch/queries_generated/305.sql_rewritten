WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        c.c_name,
        ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderstatus = 'O' AND 
        o.o_orderdate >= DATE '1997-01-01'
),
SupplierDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_partkey,
        p.p_name,
        COALESCE(SUM(ps.ps_availqty), 0) AS total_available_qty,
        AVG(ps.ps_supplycost) AS avg_supplycost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey, 
        s.s_name, 
        p.p_partkey, 
        p.p_name
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, 
        c.c_name
)
SELECT 
    co.c_name AS customer_name,
    ro.o_orderkey,
    ro.o_orderdate,
    ro.o_totalprice,
    sd.s_name AS supplier_name,
    sd.total_available_qty,
    sd.avg_supplycost,
    co.total_orders
FROM 
    RankedOrders ro
LEFT JOIN 
    SupplierDetails sd ON ro.o_orderkey = (
        SELECT 
            l.l_orderkey 
        FROM 
            lineitem l 
        WHERE 
            l.l_orderkey = ro.o_orderkey
        ORDER BY 
            l.l_extendedprice DESC 
        LIMIT 1
    )
JOIN 
    CustomerOrders co ON ro.o_custkey = co.c_custkey
WHERE 
    sd.total_available_qty IS NOT NULL
ORDER BY 
    co.total_orders DESC, 
    ro.o_orderdate DESC
LIMIT 50;