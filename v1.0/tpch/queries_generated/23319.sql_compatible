
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    INNER JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_suppkey <> sh.s_suppkey
),
ranked_orders AS (
    SELECT o.o_orderkey, o.o_totalprice, 
           ROW_NUMBER() OVER (PARTITION BY o.o_orderpriority ORDER BY o.o_totalprice DESC) AS price_rank
    FROM orders o
    WHERE o.o_orderdate >= DATE '1998-10-01' - INTERVAL '1 year'
),
collective_sales AS (
    SELECT ns.n_nationkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM lineitem l
    INNER JOIN orders o ON l.l_orderkey = o.o_orderkey
    INNER JOIN customer c ON o.o_custkey = c.c_custkey
    INNER JOIN nation ns ON c.c_nationkey = ns.n_nationkey
    WHERE l.l_discount BETWEEN 0.01 AND 0.05
    GROUP BY ns.n_nationkey
)
SELECT 
    p.p_name,
    COALESCE(SUM(ps.ps_availqty), 0) AS total_available,
    COALESCE(MAX(s.s_acctbal), 0) AS max_supplier_balance,
    p.p_retailprice * SUM(l.l_quantity) AS estimated_revenue,
    CASE 
        WHEN SUM(l.l_quantity) > 1000 THEN 'High Volume' 
        WHEN SUM(l.l_quantity) BETWEEN 500 AND 1000 THEN 'Medium Volume' 
        ELSE 'Low Volume' 
    END AS volume_category,
    r.r_name,
    ns.n_name,
    rank_orders.price_rank AS order_rank 
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN nation ns ON s.s_nationkey = ns.n_nationkey
LEFT JOIN region r ON ns.n_regionkey = r.r_regionkey
LEFT JOIN ranked_orders rank_orders ON rank_orders.o_orderkey = l.l_orderkey
WHERE r.r_name LIKE 'A%' 
    AND (p.p_container IS NULL OR p.p_container <> ' SMALL BOX')
    AND p.p_size BETWEEN 5 AND 15
GROUP BY p.p_name, r.r_name, ns.n_name, rank_orders.price_rank
HAVING SUM(ps.ps_availqty) > 0
ORDER BY estimated_revenue DESC, total_available ASC;
