WITH RankedSuppliers AS (
    SELECT 
        ps.partkey,
        s.s_name,
        DENSE_RANK() OVER (PARTITION BY ps.partkey ORDER BY s.s_acctbal DESC) AS supplier_rank,
        ps.ps_availqty * ps.ps_supplycost AS total_cost
    FROM 
        partsupp ps
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE 
        ps.ps_availqty > 0
), 
OrderAmounts AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_order_value
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderdate >= '1997-01-01' AND o.o_orderstatus = 'O'
    GROUP BY 
        o.o_orderkey
), 
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(COALESCE(oa.total_order_value, 0)) AS total_spend
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        OrderAmounts oa ON o.o_orderkey = oa.o_orderkey
    WHERE 
        c.c_acctbal > 1000
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        COUNT(o.o_orderkey) > 5
), 
HighValueCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        DENSE_RANK() OVER (ORDER BY c.c_acctbal DESC) AS rank
    FROM 
        customer c
    WHERE 
        c.c_acctbal IS NOT NULL AND c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)
)

SELECT 
    hvc.c_custkey,
    hvc.c_name,
    hvc.c_acctbal,
    COALESCE(co.total_spend, 0) AS total_spend,
    rs.s_name AS top_supplier,
    rs.total_cost AS top_supplier_cost
FROM 
    HighValueCustomers hvc
LEFT JOIN 
    CustomerOrders co ON hvc.c_custkey = co.c_custkey
LEFT JOIN 
    RankedSuppliers rs ON hvc.c_custkey = rs.partkey AND rs.supplier_rank = 1
WHERE 
    hvc.rank <= 10
ORDER BY 
    hvc.c_acctbal DESC, co.total_spend DESC;