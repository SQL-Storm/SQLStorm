WITH RankedSales AS (
    SELECT 
        li.l_orderkey,
        li.l_partkey,
        li.l_suppkey,
        li.l_quantity,
        li.l_extendedprice,
        li.l_discount,
        SUM(li.l_extendedprice * (1 - li.l_discount)) OVER (PARTITION BY li.l_orderkey ORDER BY li.l_linenumber) AS cumulative_sales,
        ROW_NUMBER() OVER (PARTITION BY li.l_orderkey ORDER BY li.l_extendedprice DESC) AS rank
    FROM 
        lineitem li
    WHERE 
        li.l_shipdate BETWEEN '1995-01-01' AND '1996-12-31'
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        SUM(o.o_totalprice) AS total_order_value
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        c.c_acctbal IS NOT NULL AND c.c_acctbal > 1000
    GROUP BY 
        c.c_custkey, c.c_name, c.c_acctbal
),
SupplierStats AS (
    SELECT 
        s.s_nationkey,
        COUNT(DISTINCT ps.ps_suppkey) AS unique_suppliers,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        supplier s
    INNER JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_nationkey
),
FinalResults AS (
    SELECT 
        cs.c_name,
        COUNT(DISTINCT cs.c_custkey) AS number_of_customers,
        SUM(cs.total_order_value) AS total_value,
        COALESCE(ss.avg_supply_cost, 0) AS average_supply_cost,
        COALESCE(ss.unique_suppliers, 0) AS number_of_unique_suppliers
    FROM 
        CustomerOrders cs
    LEFT JOIN 
        SupplierStats ss ON cs.c_custkey = ss.s_nationkey 
    GROUP BY 
        cs.c_name
)
SELECT 
    fr.c_name,
    fr.number_of_customers,
    fr.total_value,
    CASE 
        WHEN fr.average_supply_cost < 0 THEN 'Negative' 
        WHEN fr.average_supply_cost BETWEEN 0 AND 50 THEN 'Low' 
        WHEN fr.average_supply_cost BETWEEN 51 AND 100 THEN 'Medium' 
        ELSE 'High' 
    END AS supply_cost_category,
    REGEXP_REPLACE(fr.c_name, '^(.*)([^ ]+)$', '\\2, \\1') AS name_reversed,
    EXISTS (SELECT 1 FROM lineitem li WHERE li.l_returnflag = 'R' AND li.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_orderdate < cast('1998-10-01' as date))) AS has_returns
FROM 
    FinalResults fr
WHERE 
    fr.total_value IS NOT NULL
ORDER BY 
    fr.total_value DESC, fr.number_of_customers ASC;