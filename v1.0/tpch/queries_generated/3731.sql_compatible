
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        RANK() OVER (PARTITION BY o.o_orderdate ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM 
        orders o 
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderdate >= DATE '1996-01-01' AND o.o_orderdate < DATE '1997-01-01'
    GROUP BY 
        o.o_orderkey, o.o_orderdate
), SupplierStats AS (
    SELECT 
        s.s_nationkey,
        COUNT(DISTINCT ps.ps_partkey) AS part_count,
        SUM(ps.ps_supplycost) AS total_supplycost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_nationkey
), NationRevenue AS (
    SELECT 
        n.n_name,
        COALESCE(SUM(ro.total_revenue), 0) AS total_revenue,
        ss.part_count,
        ss.total_supplycost
    FROM 
        nation n
    LEFT JOIN 
        RankedOrders ro ON EXISTS (
            SELECT 1 
            FROM customer c 
            WHERE c.c_nationkey = n.n_nationkey 
            AND LAG(c.c_custkey) OVER (ORDER BY c.c_custkey) IS NOT NULL
        )
    LEFT JOIN 
        SupplierStats ss ON ss.s_nationkey = n.n_nationkey
    GROUP BY 
        n.n_name, ss.part_count, ss.total_supplycost
)
SELECT 
    n.n_name,
    nr.total_revenue,
    nr.part_count,
    nr.total_supplycost,
    CASE 
        WHEN nr.total_revenue > 0 THEN 
            ROUND(nr.total_supplycost / nr.total_revenue, 2)
        ELSE 
            NULL
    END AS cost_to_revenue_ratio
FROM 
    nation n
JOIN 
    NationRevenue nr ON n.n_name = nr.n_name
ORDER BY 
    cost_to_revenue_ratio DESC;
