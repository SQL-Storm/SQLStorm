
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > 10000

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = (
        SELECT n.n_nationkey 
        FROM nation n 
        WHERE n.n_name = 'GERMANY'
    )
    WHERE s.s_acctbal > 10000
),
PartAvailability AS (
    SELECT ps.ps_partkey, SUM(ps.ps_availqty) AS total_avail_qty
    FROM partsupp ps
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_retailprice > (
        SELECT AVG(p2.p_retailprice)
        FROM part p2
    )
    GROUP BY ps.ps_partkey
),
CustomerOrders AS (
    SELECT c.c_custkey, COUNT(DISTINCT o.o_orderkey) AS order_count, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL AND c.c_mktsegment = 'BUILDING'
    GROUP BY c.c_custkey
),
HighValueCustomers AS (
    SELECT c.c_custkey, c.c_name
    FROM CustomerOrders co
    JOIN customer c ON co.c_custkey = c.c_custkey
    WHERE co.total_spent > 100000
)
SELECT 
    ph.ps_partkey AS p_partkey, -- Assuming p_name is meant to refer to ps_partkey
    AVG(ph.total_avail_qty) AS avg_avail_qty,
    COUNT(DISTINCT hvc.c_custkey) AS high_value_customer_count
FROM PartAvailability ph
LEFT JOIN HighValueCustomers hvc ON EXISTS (
    SELECT 1 
    FROM lineitem l 
    WHERE l.l_partkey = ph.ps_partkey 
    AND l.l_discount > 0.05
)
GROUP BY ph.ps_partkey
ORDER BY avg_avail_qty DESC, high_value_customer_count ASC;
