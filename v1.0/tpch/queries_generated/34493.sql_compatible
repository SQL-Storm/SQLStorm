
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
customer_order_summary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent, COUNT(o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY c.c_custkey, c.c_name
),
part_supplier_summary AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_available, AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
ranked_part AS (
    SELECT p.p_partkey, p.total_available, p.avg_supply_cost,
           RANK() OVER (ORDER BY p.total_available DESC) AS availability_rank
    FROM part_supplier_summary p
),
region_supplier AS (
    SELECT r.r_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_name
)
SELECT c.c_name, COALESCE(s.s_name, 'No supplier') AS supplier_name, 
       COALESCE(ps.p_name, 'No product') AS product_name, 
       cs.total_spent, ps.total_available,
       r.supplier_count,
       ROW_NUMBER() OVER (PARTITION BY r.r_name ORDER BY cs.total_spent DESC) AS customer_rank
FROM customer_order_summary cs
LEFT JOIN supplier_hierarchy s ON cs.c_custkey = s.s_suppkey
LEFT JOIN ranked_part ps ON s.s_suppkey = ps.p_partkey
LEFT JOIN region_supplier r ON r.supplier_count > 0
WHERE (cs.total_spent IS NOT NULL AND cs.total_spent > 1000) 
  OR (ps.total_available IS NULL)
ORDER BY cs.total_spent DESC, ps.total_available ASC;
