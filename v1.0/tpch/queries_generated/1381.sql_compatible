
WITH RECURSIVE nation_sales AS (
    SELECT 
        n.n_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM 
        nation n
    JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    JOIN 
        lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY 
        n.n_name
), 
ranked_sales AS (
    SELECT 
        n.n_name,
        ns.total_sales,
        RANK() OVER (ORDER BY ns.total_sales DESC) AS sales_rank
    FROM 
        nation_sales ns
    JOIN 
        nation n ON ns.n_name = n.n_name
), 
high_value_customers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        CASE 
            WHEN c.c_acctbal IS NULL THEN 'No Balance' 
            WHEN c.c_acctbal < 1000 THEN 'Low Value' 
            ELSE 'High Value' 
        END AS customer_value
    FROM 
        customer c
    WHERE 
        c.c_acctbal IS NOT NULL
), 
outstanding_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        CASE 
            WHEN o.o_totalprice > 50000 THEN 'Large Order'
            ELSE 'Standard Order'
        END AS order_type
    FROM 
        orders o
    WHERE 
        o.o_totalprice > (SELECT AVG(o_totalprice) FROM orders)
)

SELECT 
    r.n_name,
    rs.total_sales,
    rs.sales_rank,
    cv.c_name AS customer_name,
    cv.customer_value,
    oo.o_orderkey,
    oo.o_totalprice,
    oo.order_type
FROM 
    ranked_sales rs
LEFT JOIN 
    high_value_customers cv ON cv.c_custkey IN (SELECT s.s_nationkey FROM nation n WHERE n.n_name = rs.n_name)
LEFT JOIN 
    outstanding_orders oo ON oo.o_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cv.c_custkey)
WHERE 
    rs.total_sales > 100000
ORDER BY 
    rs.total_sales DESC, cv.c_acctbal DESC;
