WITH RegionStats AS (
    SELECT r.r_regionkey, 
           r.r_name, 
           SUM(s.s_acctbal) AS total_supplier_balance,
           COUNT(DISTINCT n.n_nationkey) AS nation_count,
           ROW_NUMBER() OVER (PARTITION BY r.r_regionkey ORDER BY SUM(s.s_acctbal) DESC) AS rn
    FROM region r
    JOIN nation n ON n.n_regionkey = r.r_regionkey
    JOIN supplier s ON s.s_nationkey = n.n_nationkey
    GROUP BY r.r_regionkey, r.r_name
),
PartSupplierStats AS (
    SELECT ps.ps_partkey,
           SUM(ps.ps_availqty) AS total_available_quantity,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM partsupp ps
    JOIN part p ON p.p_partkey = ps.ps_partkey
    GROUP BY ps.ps_partkey
),
OrderSummary AS (
    SELECT o.o_orderkey,
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           o.o_orderdate,
           o.o_orderstatus,
           SUM(CASE WHEN l.l_returnflag = 'R' THEN 1 ELSE 0 END) AS total_returns
    FROM orders o
    JOIN lineitem l ON l.l_orderkey = o.o_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate, o.o_orderstatus
)
SELECT r.r_name,
       p.p_name,
       REGEXP_REPLACE(SUBSTRING_INDEX(n.n_name, ' ', -1), '[^A-Za-z]', '') AS parsed_nation_name,
       COALESCE(ps.total_available_quantity, 0) AS available_quantity,
       os.total_revenue,
       COUNT(DISTINCT os.o_orderkey) AS related_orders,
       SUM(DISTINCT CASE WHEN os.total_returns > 0 THEN os.total_revenue ELSE 0 END) AS returns_revenue
FROM RegionStats r
LEFT JOIN nation n ON n.n_regionkey = r.r_regionkey
LEFT JOIN PartSupplierStats ps ON ps.ps_partkey = (SELECT p.p_partkey FROM part p WHERE p.p_name LIKE CONCAT('%', REPLACE(r.r_name, ' ', '%'), '%') LIMIT 1) 
                                                  OR ps.ps_partkey IS NULL
LEFT JOIN OrderSummary os ON os.o_orderkey IN (SELECT DISTINCT o.o_orderkey 
                                                 FROM orders o 
                                                 WHERE o.o_orderdate < cast('1998-10-01' as date) - INTERVAL '1' YEAR)
WHERE r.rn = 1
GROUP BY r.r_name, p.p_name, parsed_nation_name, available_quantity, os.total_revenue
HAVING available_quantity > 0 AND (related_orders > 5 OR SUM(os.total_returns) < 1) 
ORDER BY r.r_name DESC, total_revenue DESC;