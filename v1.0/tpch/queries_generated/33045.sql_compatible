
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.nationkey, sh.level + 1
    FROM supplier_hierarchy sh
    JOIN supplier s ON sh.nationkey = s.nationkey
    WHERE sh.level < 5
),
part_supply AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM part p
    INNER JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
most_popular_items AS (
    SELECT l.l_partkey, SUM(l.l_quantity) AS total_quantity
    FROM lineitem l
    WHERE l.l_shipdate >= '1997-01-01'
    GROUP BY l.l_partkey
),
customer_orders AS (
    SELECT c.c_custkey, COUNT(o.o_orderkey) AS order_count, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
),
ranked_orders AS (
    SELECT c.c_custkey, c.c_name, co.order_count, co.total_spent,
           RANK() OVER (ORDER BY co.total_spent DESC) AS rank
    FROM customer_orders co
    JOIN customer c ON co.c_custkey = c.c_custkey
)
SELECT s.s_name, p.p_name, ps.total_supply_cost, mi.total_quantity,
       ro.c_name, ro.total_spent, ro.rank
FROM supplier_hierarchy s
FULL OUTER JOIN part_supply ps ON s.s_suppkey = ps.p_partkey
JOIN most_popular_items mi ON ps.p_partkey = mi.l_partkey
JOIN ranked_orders ro ON s.nationkey = ro.c_custkey
WHERE ps.total_supply_cost IS NOT NULL
  AND (ro.order_count > 0 OR ro.total_spent IS NULL)
  AND (mi.total_quantity BETWEEN 100 AND 1000 OR mi.total_quantity IS NULL)
ORDER BY ro.rank, ps.total_supply_cost DESC;
