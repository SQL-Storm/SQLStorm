
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_acctbal, s_nationkey, 0 AS level
    FROM supplier
    WHERE s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON sh.s_nationkey = s.s_nationkey
    WHERE s.s_acctbal IS NOT NULL AND sh.level < 5
),
lineitem_analytics AS (
    SELECT l_orderkey,
           SUM(l_extendedprice * (1 - l_discount)) AS revenue,
           RANK() OVER (PARTITION BY l_orderkey ORDER BY SUM(l_extendedprice * (1 - l_discount)) DESC) AS order_rank
    FROM lineitem
    GROUP BY l_orderkey
),
customer_orders AS (
    SELECT c.c_custkey, 
           COUNT(o.o_orderkey) AS total_orders,
           AVG(l.revenue) AS avg_revenue_per_order
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN lineitem_analytics l ON o.o_orderkey = l.l_orderkey
    GROUP BY c.c_custkey
)
SELECT n.n_name,
       COUNT(DISTINCT c.c_custkey) AS customer_count,
       MAX(co.total_orders) AS max_orders,
       COALESCE(AVG(co.avg_revenue_per_order), 0) AS avg_revenue,
       CASE WHEN MAX(co.total_orders) IS NULL THEN 'NO ORDERS'
            WHEN MAX(co.total_orders) > 10 THEN 'HIGH'
            ELSE 'LOW' END AS order_category
FROM nation n
LEFT JOIN customer_orders co ON co.c_custkey IN (
    SELECT c.c_custkey 
    FROM customer c 
    WHERE c.c_nationkey = n.n_nationkey 
    AND c.c_acctbal IS NOT NULL)
GROUP BY n.n_name
HAVING COUNT(DISTINCT c.c_custkey) > 0

UNION ALL 

SELECT 'Unknown' AS n_name, 0 AS customer_count, 0 AS max_orders, 0 AS avg_revenue, 'NO ORDERS' AS order_category
WHERE NOT EXISTS (SELECT 1 FROM customer)

ORDER BY n.n_name;
