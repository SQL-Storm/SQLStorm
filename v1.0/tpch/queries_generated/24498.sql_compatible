
WITH ranked_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderstatus,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
),
customer_summary AS (
    SELECT 
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
),
lineitem_analysis AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_line_revenue,
        STRING_AGG(DISTINCT l.l_returnflag) AS return_flags
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey
),
supplier_counts AS (
    SELECT 
        ps.ps_partkey,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM 
        partsupp ps 
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY 
        ps.ps_partkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    ns.n_name AS supplier_nation,
    cs.total_spent,
    cs.total_orders,
    ra.order_rank,
    la.total_line_revenue,
    COALESCE(sc.supplier_count, 0) AS supplier_count,
    CASE 
        WHEN la.return_flags LIKE '%R%' AND la.total_line_revenue > 1000 THEN 'High Return'
        WHEN la.return_flags LIKE '%R%' THEN 'Return'
        ELSE 'No Return'
    END AS return_status
FROM 
    part p
LEFT JOIN 
    supplier_counts sc ON p.p_partkey = sc.ps_partkey
LEFT JOIN 
    customer_summary cs ON cs.c_custkey = (
        SELECT c.c_custkey 
        FROM customer c 
        WHERE c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)
        ORDER BY c.c_acctbal DESC
        LIMIT 1
    )
LEFT JOIN 
    lineitem_analysis la ON la.l_orderkey = (
        SELECT o.o_orderkey
        FROM ranked_orders o 
        WHERE o.order_rank = 1
        LIMIT 1
    )
LEFT JOIN 
    nation ns ON ns.n_nationkey = (
        SELECT s.s_nationkey
        FROM supplier s 
        WHERE s.s_suppkey = (
            SELECT MIN(s2.s_suppkey)
            FROM supplier s2
            WHERE s2.s_acctbal > 5000
            LIMIT 1
        )
    )
WHERE 
    p.p_retailprice IS NOT NULL
ORDER BY 
    p.p_partkey;
