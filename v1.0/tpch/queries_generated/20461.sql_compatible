
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_custkey, c_name, c_address, c_nationkey, c_acctbal, c_mktsegment, 
           1 AS level, CAST(c_name AS VARCHAR(255)) AS path
    FROM customer
    WHERE c_acctbal > (SELECT AVG(c_acctbal) FROM customer)
    
    UNION ALL
    
    SELECT c.c_custkey, c.c_name, c.c_address, c.c_nationkey, c.c_acctbal, 
           c.c_mktsegment, ch.level + 1,
           CAST(CONCAT(ch.path, '->', c.c_name) AS VARCHAR(255))
    FROM customer c
    JOIN CustomerHierarchy ch ON c.c_nationkey = ch.c_nationkey
    WHERE ch.path <> c.c_name 
    AND ch.level < 5
),
SupplierAggregate AS (
    SELECT ps.ps_partkey, SUM(ps.ps_availqty) AS total_avail_qty,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM partsupp ps
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE s.s_acctbal IS NOT NULL
    GROUP BY ps.ps_partkey
),
OrderDetails AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate, l.l_quantity, 
           ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY l.linenumber) AS line_num,
           CASE 
               WHEN l.l_discount > 0.1 THEN 'High Discount' 
               ELSE 'Low Discount' 
           END AS discount_category
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus = 'O' 
      AND l.l_quantity IS NOT NULL
)
SELECT 
    ch.c_name AS customer_name, 
    ch.level AS customer_level, 
    SUM(da.total_avail_qty) AS total_available_quantity,
    AVG(da.avg_supply_cost) AS average_supply_cost,
    COUNT(DISTINCT od.o_orderkey) AS total_orders,
    SUM(od.o_totalprice) AS total_revenue,
    STRING_AGG(CASE WHEN od.discount_category = 'High Discount' THEN 'H' END, '') AS high_discount_orders,
    STRING_AGG(CASE WHEN od.discount_category = 'Low Discount' THEN 'L' END, '') AS low_discount_orders
FROM CustomerHierarchy ch
LEFT JOIN SupplierAggregate da ON da.ps_partkey IN (
    SELECT ps_partkey 
    FROM partsupp 
    WHERE ps_supplycost IS NOT NULL AND ps_availqty > 0
)
LEFT JOIN OrderDetails od ON ch.c_custkey = od.o_orderkey
GROUP BY ch.c_name, ch.level
HAVING SUM(da.total_avail_qty) IS NOT NULL 
   OR COUNT(od.o_orderkey) > 0
ORDER BY ch.level DESC, total_revenue DESC
LIMIT 100 OFFSET 0;
