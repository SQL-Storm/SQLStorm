
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, s_comment, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, s.s_comment, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
QualifiedParts AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, 
           COALESCE(ps.ps_availqty, 0) AS available_qty, 
           CASE 
               WHEN p.p_size IS NULL THEN 'Not Specified' 
               ELSE CAST(p.p_size AS VARCHAR(255))
           END AS part_size_desc
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE p.p_retailprice > (SELECT AVG(p_retailprice) FROM part) 
      AND EXISTS (SELECT 1 FROM SupplierHierarchy sh WHERE sh.s_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_nationkey = p.p_partkey % 5))
),
AggregatedSales AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales, 
           ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY o.o_orderdate DESC) AS sales_rank
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate > DATE '1998-10-01' - INTERVAL '1 year'
    GROUP BY o.o_orderkey
),
FinalResult AS (
    SELECT DISTINCT q.p_partkey, q.p_name, q.available_qty, 
           MAX(as.total_sales) OVER (PARTITION BY q.p_partkey) AS max_sales,
           CASE 
               WHEN MAX(as.total_sales) IS NULL THEN 'No Sales'
               ELSE 'Sales Present'
           END AS sales_status
    FROM QualifiedParts q
    LEFT JOIN AggregatedSales as ON as.o_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_orderstatus = 'O')
    WHERE q.available_qty IS NOT NULL
      AND (q.available_qty > 0 OR q.p_brand LIKE '%%%')
)
SELECT f.p_partkey, f.p_name, f.available_qty, f.max_sales, f.sales_status
FROM FinalResult f
WHERE f.sales_status = 'Sales Present'
ORDER BY f.available_qty DESC, f.max_sales DESC;
