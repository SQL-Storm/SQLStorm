
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_address,
        s.s_nationkey,
        ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY s.s_acctbal DESC) AS rank,
        s.s_acctbal
    FROM 
        supplier s
    JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    WHERE 
        s.s_acctbal IS NOT NULL
),
TopSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        n.n_name
    FROM 
        RankedSuppliers s
    JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    WHERE 
        s.rank <= 5
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        SUM(o.o_totalprice) > 1000
),
PartSupplies AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty * ps.ps_supplycost) AS total_supply_cost
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY 
        p.p_partkey, p.p_name
),
OrdersLineItem AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
        SUM(CASE WHEN l.l_returnflag = 'R' THEN 1 ELSE 0 END) AS returns
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey
)
SELECT 
    c.c_name AS customer_name,
    c.total_spent AS customer_total_spent,
    s.s_name AS supplier_name,
    p.p_name AS part_name,
    ps.total_supply_cost AS part_supply_cost,
    ol.revenue AS order_revenue,
    ol.returns AS return_count
FROM 
    CustomerOrders c
JOIN 
    TopSuppliers s ON c.c_custkey = s.s_suppkey
JOIN 
    PartSupplies ps ON ps.p_partkey = (
        SELECT p.p_partkey
        FROM part p
        ORDER BY p.p_retailprice DESC
        LIMIT 1
    )
JOIN 
    OrdersLineItem ol ON ol.l_orderkey = (
        SELECT o.o_orderkey
        FROM orders o
        WHERE o.o_custkey = c.c_custkey
        ORDER BY o.o_orderdate DESC
        LIMIT 1
    )
WHERE 
    c.total_spent IS NOT NULL AND s.s_acctbal > 1000
ORDER BY 
    customer_total_spent DESC, part_supply_cost ASC;
