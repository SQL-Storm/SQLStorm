WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier WHERE s_nationkey = sh.s_nationkey)
),
PartitionedLineItems AS (
    SELECT 
        l.l_orderkey,
        l.l_partkey,
        l.l_quantity,
        l_discount,
        ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_linenumber) AS rn,
        SUM(l.l_extendedprice * (1 - l.l_discount)) OVER (PARTITION BY l.l_orderkey) AS total_discounted_price
    FROM lineitem l
    WHERE l.l_shipdate < cast('1998-10-01' as date) - INTERVAL '1 year'
),
FilteredCustomers AS (
    SELECT c.c_custkey, COUNT(DISTINCT o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL AND c.c_acctbal > 0
    GROUP BY c.c_custkey
    HAVING COUNT(DISTINCT o.o_orderkey) > 5
)
SELECT
    n.n_name,
    SUM(p.ps_supplycost * pl.l_quantity) AS total_supply_cost,
    COALESCE(MAX(sh.level), 0) AS supplier_levels,
    s.s_name AS best_supplier,
    STRING_AGG(DISTINCT c.c_name, ', ') AS customer_names
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN lineitem pl ON ps.ps_suppkey = pl.l_suppkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
JOIN nation n ON s.s_nationkey = n.n_nationkey
LEFT JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
JOIN FilteredCustomers c ON c.c_custkey = o.o_custkey
JOIN orders o ON pl.l_orderkey = o.o_orderkey
GROUP BY n.n_name, s.s_name
HAVING SUM(p.ps_supplycost * pl.l_quantity) > 10000
ORDER BY total_supply_cost DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;