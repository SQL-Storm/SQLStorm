
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
OrderSummary AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_value
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey
),
TopCustomers AS (
    SELECT c.c_custkey, c.c_name, SUM(os.total_value) AS total_spent
    FROM customer c
    JOIN OrderSummary os ON os.o_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = c.c_custkey)
    GROUP BY c.c_custkey, c.c_name
    ORDER BY total_spent DESC
    LIMIT 5
)
SELECT p.p_name, ps.ps_availqty, ps.ps_supplycost, 
       COALESCE(SHM.total_high_spent, 0) AS high_spender_count, 
       CASE WHEN p.p_retailprice > 100 THEN 'Expensive' ELSE 'Affordable' END AS price_category,
       AVG(ps.ps_supplycost) OVER(PARTITION BY p.p_type) AS avg_supply_cost
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN (
    SELECT sh.s_nationkey, COUNT(DISTINCT c.c_custkey) AS total_high_spent
    FROM SupplierHierarchy sh
    JOIN TopCustomers c ON sh.s_nationkey = c.c_nationkey
    GROUP BY sh.s_nationkey
) SHM ON p.p_partkey = ps.ps_partkey
WHERE p.p_size BETWEEN 10 AND 20
AND (p.p_mfgr LIKE 'MFGR%' OR p.p_brand IS NULL)
ORDER BY price_category DESC, p.p_name ASC;
