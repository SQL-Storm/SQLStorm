
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2)
    
    UNION ALL
    
    SELECT s2.s_suppkey, s2.s_name, s2.s_nationkey, s2.s_acctbal, sh.level + 1
    FROM supplier s2
    JOIN SupplierHierarchy sh ON s2.s_nationkey = sh.s_nationkey
    WHERE s2.s_acctbal > (SELECT AVG(s3.s_acctbal) FROM supplier s3 WHERE s3.s_nationkey = s2.s_nationkey)
),
RecentOrders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_orderdate, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= DATEADD(month, -6, CAST('1998-10-01' AS DATE))
    GROUP BY o.o_orderkey, o.o_custkey, o.o_orderdate
),
CustomerMetrics AS (
    SELECT c.c_custkey, c.c_name, COUNT(DISTINCT o.o_orderkey) AS order_count, SUM(ro.total_revenue) AS total_revenue
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN RecentOrders ro ON o.o_orderkey = ro.o_orderkey
    GROUP BY c.c_custkey, c.c_name
),
NationSupplier AS (
    SELECT n.n_name, SUM(s.s_acctbal) AS total_acctbal
    FROM nation n
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_name
)
SELECT 
    n.n_name,
    SUM(CASE WHEN cm.order_count > 0 THEN cm.total_revenue ELSE 0 END) AS revenue_from_customers,
    COALESCE(SUM(sh.s_acctbal), 0) AS total_supplier_acctbal,
    COALESCE(SUM(nsu.total_acctbal), 0) AS total_nation_supplier_acctbal,
    COUNT(DISTINCT cm.c_custkey) AS unique_customers,
    ROW_NUMBER() OVER (ORDER BY SUM(CASE WHEN cm.order_count > 0 THEN cm.total_revenue ELSE 0 END) DESC) AS revenue_rank
FROM nation n
LEFT JOIN CustomerMetrics cm ON n.n_nationkey = cm.c_custkey
LEFT JOIN SupplierHierarchy sh ON n.n_nationkey = sh.s_nationkey
LEFT JOIN NationSupplier nsu ON n.n_name = nsu.n_name
WHERE n.n_comment IS NOT NULL
GROUP BY n.n_name
HAVING SUM(CASE WHEN cm.order_count > 0 THEN cm.total_revenue ELSE 0 END) > 10000
ORDER BY revenue_rank;
