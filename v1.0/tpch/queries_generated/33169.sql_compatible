
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, CAST(s_name AS VARCHAR(255)) AS full_name
    FROM supplier
    WHERE s_acctbal > 1000
    UNION ALL
    SELECT sp.s_suppkey, sp.s_name, sp.s_nationkey, sp.s_acctbal, 
           CONCAT(sh.full_name, ' -> ', sp.s_name)
    FROM supplier sp
    JOIN SupplierHierarchy sh ON sp.s_nationkey = sh.s_nationkey
    WHERE sp.s_acctbal > sh.s_acctbal
),
OrderLineAggregates AS (
    SELECT l.l_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           AVG(l.l_discount) AS avg_discount, COUNT(*) AS item_count
    FROM lineitem l
    WHERE l.l_shipdate >= '1997-01-01' AND l.l_shipdate < '1998-01-01'
    GROUP BY l.l_orderkey
),
CustomerOrderSummary AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderstatus, o.o_totalprice,
           COALESCE(oa.total_revenue, 0) AS total_revenue,
           COUNT(DISTINCT o.o_orderkey) OVER (PARTITION BY c.c_custkey) AS order_count
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN OrderLineAggregates oa ON o.o_orderkey = oa.l_orderkey
),
RegionSupplierCounts AS (
    SELECT r.r_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_name
)
SELECT cs.c_name, cs.o_orderkey, cs.total_revenue, cs.order_count,
       COALESCE(rs.supplier_count, 0) AS supplier_count,
       CASE 
           WHEN cs.total_revenue > 10000 THEN 'High Value'
           WHEN cs.total_revenue BETWEEN 5000 AND 10000 THEN 'Medium Value'
           ELSE 'Low Value' 
       END AS revenue_category
FROM CustomerOrderSummary cs
LEFT JOIN RegionSupplierCounts rs ON rs.supplier_count > 5
WHERE cs.o_orderstatus = 'O' 
  AND cs.total_revenue IS NOT NULL 
  AND cs.total_revenue > (SELECT AVG(total_revenue) FROM OrderLineAggregates)
ORDER BY cs.total_revenue DESC
FETCH FIRST 50 ROWS ONLY;
