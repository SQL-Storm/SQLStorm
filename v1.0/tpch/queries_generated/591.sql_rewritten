WITH ranked_orders AS (
    SELECT
        o.o_orderkey,
        o.o_orderdate,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        RANK() OVER (PARTITION BY o.o_orderdate ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM
        orders o
    JOIN
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE
        o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY
        o.o_orderkey,
        o.o_orderdate
),
supplier_details AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        COUNT(DISTINCT ps.ps_partkey) AS parts_supplied,
        MAX(s.s_acctbal) AS max_acctbal
    FROM
        supplier s
    JOIN
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY
        s.s_suppkey,
        s.s_name
)
SELECT
    r.o_orderdate,
    r.o_orderkey,
    r.total_revenue,
    COALESCE(s.parts_supplied, 0) AS parts_supplied,
    CASE 
        WHEN r.total_revenue > 10000 THEN 'High Revenue'
        WHEN r.total_revenue <= 10000 AND r.total_revenue > 5000 THEN 'Medium Revenue'
        ELSE 'Low Revenue'
    END AS revenue_category,
    ROW_NUMBER() OVER (PARTITION BY r.o_orderdate ORDER BY r.total_revenue DESC) AS order_rank
FROM
    ranked_orders r
LEFT JOIN
    supplier_details s ON s.s_suppkey = (SELECT MAX(ps.ps_suppkey) 
                                           FROM partsupp ps 
                                           WHERE ps.ps_partkey IN (SELECT l.l_partkey 
                                                                   FROM lineitem l 
                                                                   WHERE l.l_orderkey = r.o_orderkey)
                                           GROUP BY ps.ps_suppkey)
WHERE
    r.revenue_rank <= 10
ORDER BY
    r.o_orderdate, r.total_revenue DESC;