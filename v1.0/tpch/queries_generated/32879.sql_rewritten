WITH RECURSIVE SupplierSales AS (
    SELECT s.s_suppkey, s.s_name, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN lineitem l ON ps.ps_partkey = l.l_partkey
    WHERE l.l_shipdate >= '1996-01-01' 
    GROUP BY s.s_suppkey, s.s_name

    UNION ALL

    SELECT ss.s_suppkey, ss.s_name, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM SupplierSales ss
    JOIN partsupp ps ON ss.s_suppkey = ps.ps_suppkey
    JOIN lineitem l ON ps.ps_partkey = l.l_partkey
    WHERE l.l_shipdate >= '1996-01-01' 
    GROUP BY ss.s_suppkey, ss.s_name
)

SELECT 
    s.s_suppkey,
    s.s_name,
    COALESCE(ss.total_sales, 0) AS total_sales,
    CASE 
        WHEN COALESCE(ss.total_sales, 0) > 100000 THEN 'High'
        WHEN COALESCE(ss.total_sales, 0) BETWEEN 50000 AND 100000 THEN 'Medium'
        ELSE 'Low'
    END AS sales_category,
    p.p_type,
    AVG(l.l_discount) AS avg_discount
FROM supplier s
LEFT JOIN SupplierSales ss ON s.s_suppkey = ss.s_suppkey
LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
LEFT JOIN part p ON ps.ps_partkey = p.p_partkey
LEFT JOIN lineitem l ON ps.ps_partkey = l.l_partkey
WHERE p.p_mfgr IS NOT NULL
    AND (p.p_size IS NULL OR p.p_size BETWEEN 10 AND 50)
GROUP BY s.s_suppkey, s.s_name, p.p_type
HAVING AVG(l.l_discount) < 0.1
ORDER BY total_sales DESC, s.s_name ASC;