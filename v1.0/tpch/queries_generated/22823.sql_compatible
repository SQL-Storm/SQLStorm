
WITH RECURSIVE part_cycle AS (
    SELECT p_partkey, p_name, p_retailprice, p_comment,
           LEAD(p_retailprice, 1, 0) OVER (ORDER BY p_partkey) AS next_price
    FROM part
    WHERE p_retailprice IS NOT NULL
),
supplier_info AS (
    SELECT s.n_nationkey, s.s_suppkey, SUM(s.s_acctbal) AS total_balance,
           COUNT(*) FILTER (WHERE s.s_acctbal > 10000) AS high_balance_count
    FROM supplier s
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    GROUP BY s.n_nationkey, s.s_suppkey
),
order_summary AS (
    SELECT o.o_orderkey, o.o_totalprice,
           ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderstatus IN ('F', 'O')
),
filtered_lineitems AS (
    SELECT l.*, 
           CASE 
               WHEN l.l_shipdate < DATE '1998-10-01' THEN 'Shipped'
               ELSE 'Not Shipped' 
           END AS shipping_status
    FROM lineitem l 
    WHERE l.l_discount BETWEEN 0.05 AND 0.15
)
SELECT p.p_partkey, p.p_name, p.p_retailprice,
       COALESCE(si.total_balance, 0) AS total_balance,
       COALESCE(ls.shipping_status, 'N/A') AS shipping_status_desc,
       COUNT(DISTINCT os.o_orderkey) AS order_count,
       AVG(CASE WHEN os.order_rank = 1 THEN os.o_totalprice END) AS average_high_price,
       SUM(CASE WHEN pc.next_price > p.p_retailprice THEN 1 ELSE 0 END) AS price_increase_count
FROM part p
LEFT JOIN supplier_info si ON si.n_nationkey = (
    SELECT n.n_regionkey FROM nation n WHERE n.n_nationkey = 1
)
LEFT JOIN filtered_lineitems ls ON ls.l_partkey = p.p_partkey
LEFT JOIN order_summary os ON os.o_orderkey = (
    SELECT l.l_orderkey FROM lineitem l WHERE l.l_partkey = p.p_partkey LIMIT 1
)
LEFT JOIN part_cycle pc ON pc.p_partkey = p.p_partkey
WHERE p.p_comment NOT LIKE '%obsolete%' AND 
      p.p_size BETWEEN 10 AND 20
GROUP BY p.p_partkey, p.p_name, p.p_retailprice, si.total_balance, ls.shipping_status
ORDER BY p.p_partkey DESC
LIMIT 100;
