
WITH RECURSIVE OrderHierarchy AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, 1 AS order_level
    FROM orders o
    WHERE o.o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, oh.order_level + 1
    FROM orders o
    INNER JOIN OrderHierarchy oh ON o.o_custkey = oh.o_orderkey
    WHERE oh.order_level < 5
), SupplierParts AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, SUM(ps.ps_availqty) AS total_available
    FROM partsupp ps
    GROUP BY ps.ps_partkey, ps.ps_suppkey
), PartsDetails AS (
    SELECT p.p_partkey, p.p_name, p.p_mfgr, p.p_brand, p.p_type, p.p_size, p.p_retailprice,
           ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn,
           COALESCE(SUM(l.l_quantity * (1 - l.l_discount)), 0) AS total_sales
    FROM part p
    LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_mfgr, p.p_brand, p.p_type, p.p_size, p.p_retailprice
)
SELECT 
    r.r_name, 
    n.n_name, 
    s.s_name, 
    COUNT(DISTINCT o.o_orderkey) AS total_orders, 
    SUM(p.p_retailprice) AS total_value,
    COALESCE(SUM(ps.total_available), 0) AS total_available_qty,
    AVG(pd.total_sales) AS avg_sales_per_part,
    MAX(pd.p_retailprice) AS max_retail_price,
    MIN(pd.p_retailprice) AS min_retail_price
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
LEFT JOIN PartsDetails pd ON ps.ps_partkey = pd.p_partkey
LEFT JOIN orders o ON o.o_custkey = s.s_suppkey
WHERE 
    o.o_orderdate BETWEEN DATE '1996-01-01' AND DATE '1996-12-31'
    AND (s.s_acctbal IS NOT NULL AND s.s_acctbal > 0)
    AND (pd.rn <= 3 OR pd.total_sales >= 1000)
GROUP BY r.r_name, n.n_name, s.s_name
ORDER BY total_orders DESC, total_value DESC;
