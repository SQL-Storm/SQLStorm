
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey,
           s_name,
           s_nationkey,
           s_acctbal,
           CAST(s_name AS VARCHAR(255)) AS full_path,
           1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey,
           s.s_name,
           s.s_nationkey,
           s.s_acctbal,
           CONCAT(sh.full_path, ' > ', s.s_name),
           sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal < sh.s_acctbal
),
HighValueOrders AS (
    SELECT o.o_orderkey,
           o.o_totalprice,
           o.o_orderdate,
           ROW_NUMBER() OVER (PARTITION BY o.o_custkey ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderstatus = 'O'
      AND o.o_totalprice > 10000
),
PartDetails AS (
    SELECT p.p_partkey,
           p.p_name,
           SUM(ps.ps_availqty) AS total_available,
           AVG(ps.ps_supplycost) AS average_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
)
SELECT r.r_name AS region_name,
       n.n_name AS nation_name,
       sh.full_path AS supplier_hierarchy,
       COUNT(DISTINCT o.o_orderkey) AS total_orders,
       SUM(o.o_totalprice) AS total_revenue,
       AVG(pd.average_cost) AS average_part_cost
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN HighValueOrders o ON s.s_suppkey = o.o_custkey
LEFT JOIN PartDetails pd ON pd.p_partkey IN (
    SELECT l.l_partkey
    FROM lineitem l
    WHERE l.l_orderkey IN (SELECT o.o_orderkey FROM HighValueOrders)
)
JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
GROUP BY r.r_name, n.n_name, sh.full_path
ORDER BY total_revenue DESC, region_name, nation_name;
