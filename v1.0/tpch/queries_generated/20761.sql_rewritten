WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, s_comment, 
           CAST(s_name AS varchar(255)) AS full_name, 
           0 AS level
    FROM supplier
    WHERE s_acctbal IS NOT NULL AND s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, s.s_comment, 
           CONCAT(sh.full_name, ' -> ', s.s_name),
           sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON sh.s_nationkey = s.s_nationkey
    WHERE sh.level < 2
),
part_details AS (
    SELECT p.p_partkey, p.p_name, p.p_mfgr, p.p_brand, p.p_type, p.p_size,
           p.p_container, p.p_retailprice, p.p_comment,
           ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn
    FROM part p
    WHERE p.p_retailprice IS NOT NULL AND p.p_size BETWEEN 1 AND 20
),
nation_summary AS (
    SELECT n.n_nationkey, n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_nationkey, n.n_name
)
SELECT 
    ns.n_name,
    COUNT(DISTINCT od.o_orderkey) AS total_orders,
    SUM(COALESCE(l.l_extendedprice, 0) * (1 - l.l_discount)) AS total_revenue,
    ARRAY_AGG(DISTINCT CONCAT(pd.p_name, ' (', pd.p_container, ')')) AS part_names,
    MAX(sh.full_name) AS highest_account_supplier
FROM orders od
JOIN lineitem l ON od.o_orderkey = l.l_orderkey
JOIN part_details pd ON l.l_partkey = pd.p_partkey
LEFT JOIN supplier_hierarchy sh ON sh.s_suppkey = l.l_suppkey
JOIN nation_summary ns ON ns.n_nationkey = (
    SELECT c.c_nationkey 
    FROM customer c 
    WHERE c.c_custkey = od.o_custkey
)
WHERE od.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
AND l.l_quantity IS NOT NULL
GROUP BY ns.n_name
HAVING SUM(COALESCE(l.l_tax, 0) + COALESCE(l.l_discount, 0)) < 500
ORDER BY total_revenue DESC NULLS LAST;