
WITH RECURSIVE PriceBreakdown AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        ps.ps_supplycost,
        ps.ps_availqty,
        (ps.ps_availqty * ps.ps_supplycost) AS total_cost
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE 
        ps.ps_availqty > 0
    UNION ALL
    SELECT 
        pb.p_partkey,
        pb.p_name,
        pb.ps_supplycost,
        pb.ps_availqty - 1,
        (pb.ps_availqty - 1) * pb.ps_supplycost
    FROM 
        PriceBreakdown pb
    WHERE 
        pb.ps_availqty > 1
),
CustomerSpending AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        RANK() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(o.o_totalprice) DESC) AS spending_rank
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name, c.c_nationkey
),
NationsWithSuppliers AS (
    SELECT 
        n.n_nationkey,
        n.n_name,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM 
        nation n
    LEFT JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY 
        n.n_nationkey, n.n_name
)
SELECT 
    pb.p_partkey,
    pb.p_name,
    pb.total_cost,
    cs.c_name,
    cs.total_spent,
    nw.supplier_count,
    CASE 
        WHEN cs.spending_rank <= 3 THEN 'Top Customer'
        ELSE 'Regular Customer'
    END AS customer_status
FROM 
    PriceBreakdown pb
JOIN 
    CustomerSpending cs ON pb.p_partkey = cs.c_custkey
JOIN 
    NationsWithSuppliers nw ON cs.c_nationkey = nw.n_nationkey
WHERE 
    pb.total_cost > 1000
    AND cs.total_spent IS NOT NULL
ORDER BY 
    pb.total_cost DESC, cs.total_spent ASC;
