WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_supkey, s_name, 0 AS level, CAST(s_name AS VARCHAR(1000)) AS path
    FROM supplier
    WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany')
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, sh.level + 1, CONCAT(sh.path, ' -> ', s.s_name)
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_suppkey
),
TopCustomers AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate >= cast('1998-10-01' as date) - INTERVAL '1 year'
    GROUP BY c.c_custkey, c.c_name
    ORDER BY total_spent DESC
    LIMIT 10
),
AdjustedLineItems AS (
    SELECT l.l_orderkey, 
           l.l_partkey, 
           l.l_suppkey, 
           l.l_quantity, 
           l.l_extendedprice * (1 - l.l_discount) AS adjusted_price,
           RANK() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS price_rank
    FROM lineitem l
    WHERE l.l_shipdate > '1997-01-01'
)
SELECT p.p_name, 
       sh.path AS supplier_hierarchy, 
       tc.c_name AS top_customer,
       SUM(ali.adjusted_price) AS total_sales,
       AVG(COALESCE(ali.l_quantity, 0)) AS avg_quantity,
       COUNT(DISTINCT ali.l_orderkey) AS total_orders
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_supkey
JOIN AdjustedLineItems ali ON ali.l_partkey = p.p_partkey
JOIN TopCustomers tc ON ali.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = tc.c_custkey)
GROUP BY p.p_name, sh.path, tc.c_name
HAVING SUM(ali.adjusted_price) > 10000.00
ORDER BY total_sales DESC;