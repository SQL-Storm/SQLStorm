
WITH RECURSIVE RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderdate DESC) AS order_rank
    FROM 
        orders o
),
TopCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        c.c_acctbal IS NOT NULL
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        SUM(o.o_totalprice) > (SELECT AVG(o_totalprice) FROM orders) 
),
SupplierDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
PartPriceComparison AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        p.p_retailprice, 
        AVG(pi.price) AS avg_part_price
    FROM 
        part p
    LEFT JOIN (
        SELECT 
            ps.ps_partkey, 
            ps.ps_supplycost AS price 
        FROM 
            partsupp ps 
        WHERE 
            ps.ps_availqty > 0
    ) pi ON p.p_partkey = pi.ps_partkey
    GROUP BY 
        p.p_partkey, p.p_name, p.p_retailprice
),
SuspiciousLineitems AS (
    SELECT 
        l.l_orderkey,
        l.l_partkey,
        SUM(l.l_discount) AS total_discount,
        COUNT(CASE WHEN l.l_returnflag = 'R' THEN 1 END) AS return_count
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey, l.l_partkey
    HAVING 
        SUM(l.l_discount) > 100 OR COUNT(CASE WHEN l.l_returnflag = 'R' THEN 1 END) > 5
)
SELECT 
    tc.c_name,
    tc.total_spent,
    p.p_name,
    pp.avg_part_price,
    sd.total_supply_cost,
    CASE 
        WHEN pp.avg_part_price IS NULL THEN 'Not Available'
        ELSE 
            CASE 
                WHEN pp.avg_part_price < 100 THEN 'Cheap'
                WHEN pp.avg_part_price >= 100 AND pp.avg_part_price <= 200 THEN 'Moderate'
                ELSE 'Expensive'
            END
    END AS price_category,
    ro.o_orderdate,
    ro.o_orderstatus
FROM 
    TopCustomers tc
JOIN 
    PartPriceComparison pp ON pp.p_retailprice < tc.total_spent
JOIN 
    SupplierDetails sd ON sd.total_supply_cost > 5000
LEFT JOIN 
    RankedOrders ro ON ro.o_orderkey IN (
        SELECT DISTINCT l.l_orderkey
        FROM lineitem l 
        WHERE l.l_partkey = pp.p_partkey
    )
ORDER BY 
    tc.total_spent DESC, 
    ro.o_orderdate DESC NULLS LAST 
FETCH FIRST 100 ROWS ONLY;
