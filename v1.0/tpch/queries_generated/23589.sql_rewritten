WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderstatus,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderdate DESC) AS rnk
    FROM 
        orders o
    WHERE 
        o.o_orderdate > DATE '1997-01-01' AND o.o_orderstatus IN ('O', 'F')
), 
SupplierDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
), 
PartConsumer AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        c.c_acctbal > 1000
    GROUP BY 
        c.c_custkey, c.c_name
), 
HighValueParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        COALESCE(ps.ps_availqty, 0) AS available_quantity
    FROM 
        part p
    LEFT JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE 
        p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2)
        OR p.p_comment LIKE '%premium%'
), 
CombinedMetrics AS (
    SELECT 
        pc.c_name AS customer_name,
        pc.total_spent,
        HAVING SUM(hp.available_quantity) AS total_available_quantity,
        COUNT(hp.p_partkey) AS part_count
    FROM 
        PartConsumer pc
    JOIN 
        HighValueParts hp ON pc.total_spent > 5000
    GROUP BY 
        pc.c_custkey, pc.c_name
    HAVING 
        total_available_quantity > 10
)

SELECT 
    r.o_orderkey,
    r.o_orderstatus,
    COALESCE(sd.total_supply_cost, 0) AS supplier_total_cost,
    ROUND(AVG(cm.total_spent), 2) AS average_spent_per_customer
FROM 
    RankedOrders r
LEFT JOIN 
    SupplierDetails sd ON sd.total_supply_cost > 10000
LEFT JOIN 
    CombinedMetrics cm ON cm.customer_name IS NOT NULL
WHERE 
    r.o_orderstatus IS NOT NULL
GROUP BY 
    r.o_orderkey, r.o_orderstatus
ORDER BY 
    r.o_orderkey DESC, supplier_total_cost ASC
LIMIT 10;