
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal < (SELECT AVG(s_acctbal) FROM supplier)

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal < (SELECT AVG(s_acctbal) FROM supplier)
),
CustomerStats AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count, AVG(o.o_totalprice) AS avg_order_value
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
RegionStats AS (
    SELECT n.n_regionkey, r.r_name, SUM(ps.ps_supplycost) AS total_supply_cost
    FROM nation n
    JOIN region r ON n.n_regionkey = r.r_regionkey
    JOIN partsupp ps ON n.n_nationkey = ps.ps_suppkey
    GROUP BY n.n_regionkey, r.r_name
)
SELECT 
    c.c_name AS customer_name,
    cs.order_count,
    cs.avg_order_value,
    r.r_name AS region_name,
    COUNT(DISTINCT sh.s_suppkey) AS supplier_count,
    COALESCE(AVG(l.l_discount * l.l_extendedprice), 0) AS avg_discounted_price
FROM CustomerStats cs
JOIN customer c ON cs.c_custkey = c.c_custkey
LEFT JOIN lineitem l ON l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = c.c_custkey)
LEFT JOIN RegionStats r ON r.n_regionkey = c.c_nationkey
LEFT JOIN SupplierHierarchy sh ON sh.s_nationkey = c.c_nationkey
WHERE cs.order_count > 0 AND r.total_supply_cost IS NOT NULL
GROUP BY c.c_custkey, c.c_name, cs.order_count, cs.avg_order_value, r.r_name
HAVING SUM(CASE WHEN l.l_returnflag = 'R' THEN 1 ELSE 0 END) = 0
ORDER BY customer_name ASC, avg_order_value DESC;
