
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_custkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_custkey ORDER BY o.o_orderdate DESC) AS order_rank
    FROM 
        orders o
), 
SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_availqty) AS total_available_quantity,
        MAX(ps.ps_supplycost) AS max_supply_cost
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey
), 
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c 
    LEFT JOIN 
        RankedOrders ro ON c.c_custkey = ro.o_custkey
    GROUP BY 
        c.c_custkey
),
HighValueCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        co.total_orders,
        co.total_spent
    FROM 
        customer c
    JOIN 
        CustomerOrders co ON c.c_custkey = co.c_custkey
    WHERE 
        co.total_spent > (SELECT AVG(total_spent) FROM CustomerOrders)
),
NationSupplier AS (
    SELECT 
        n.n_nationkey,
        n.n_name,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM 
        nation n
    LEFT JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY 
        n.n_nationkey, n.n_name
),
JoinResults AS (
    SELECT 
        hvc.c_custkey,
        hvc.c_name,
        ns.n_name,
        COUNT(DISTINCT l.l_orderkey) AS order_count,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        HighValueCustomers hvc
    LEFT JOIN 
        orders o ON hvc.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    LEFT JOIN 
        supplier s ON l.l_suppkey = s.s_suppkey
    LEFT JOIN 
        NationSupplier ns ON s.s_nationkey = ns.n_nationkey
    GROUP BY 
        hvc.c_custkey, hvc.c_name, ns.n_name
)

SELECT 
    j.c_custkey,
    j.c_name,
    COALESCE(j.order_count, 0) AS order_count,
    COALESCE(j.total_revenue, 0.00) AS total_revenue,
    CASE 
        WHEN j.order_count = 0 THEN 'No Orders'
        WHEN j.total_revenue = 0 THEN 'No Revenue'
        ELSE 'Active Customer'
    END AS customer_status
FROM 
    JoinResults j
FULL OUTER JOIN 
    HighValueCustomers hvc ON j.c_custkey = hvc.c_custkey
WHERE 
    j.order_count = 0 OR j.total_revenue IS NOT NULL OR 
    hvc.c_acctbal > (SELECT AVG(c_acctbal) FROM customer)
ORDER BY 
    j.total_revenue DESC
