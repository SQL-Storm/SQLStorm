WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        c.c_name,
        ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderdate BETWEEN '1997-01-01' AND '1997-10-31'
),
PartSupplier AS (
    SELECT 
        p.p_partkey,
        ps.ps_suppkey,
        s.s_name,
        ps.ps_availqty,
        ps.ps_supplycost
    FROM 
        partsupp ps
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE 
        ps.ps_availqty > 0 AND ps.ps_supplycost < (SELECT AVG(ps_supplycost) FROM partsupp)
),
TotalSales AS (
    SELECT 
        l.l_partkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM 
        lineitem l
    GROUP BY 
        l.l_partkey
)
SELECT 
    r.o_orderkey,
    r.o_orderdate,
    r.o_totalprice,
    r.c_name,
    p.p_name,
    ps.s_name,
    ps.ps_availqty,
    ts.total_sales,
    COALESCE(ts.total_sales, 0) AS sales_or_zero,
    CASE 
        WHEN ts.total_sales > 1000 THEN 'High'
        WHEN ts.total_sales BETWEEN 500 AND 1000 THEN 'Medium'
        ELSE 'Low'
    END AS sales_category
FROM 
    RankedOrders r
LEFT JOIN 
    TotalSales ts ON r.o_orderkey IN (SELECT l.l_orderkey FROM lineitem l WHERE l.l_partkey IN (SELECT p.p_partkey FROM part p))
LEFT JOIN 
    PartSupplier ps ON ps.ps_partkey IN (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey = r.o_orderkey)
WHERE 
    r.order_rank = 1
ORDER BY 
    r.o_totalprice DESC, sales_or_zero DESC;