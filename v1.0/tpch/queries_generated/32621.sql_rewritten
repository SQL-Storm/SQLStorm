WITH RECURSIVE price_summary AS (
    SELECT p.p_partkey, p.p_name, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY o.o_orderdate DESC) AS rn
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    JOIN orders o ON l.l_orderkey = o.o_orderkey
    WHERE o.o_orderdate >= DATE '1997-01-01'
    GROUP BY p.p_partkey, p.p_name
), 
supplier_info AS (
    SELECT s.s_suppkey, s.s_name, 
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
), 
customer_orders AS (
    SELECT c.c_custkey, c.c_name, 
           COUNT(o.o_orderkey) AS order_count, 
           SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
), 
high_value_customers AS (
    SELECT c.c_custkey, c.c_name 
    FROM customer_orders c
    WHERE c.total_spent > (SELECT AVG(total_spent) FROM customer_orders)
)
SELECT ps.p_partkey, ps.p_name, ps.total_revenue, si.total_cost, 
       CASE
           WHEN hs.c_custkey IS NOT NULL THEN 'High Value'
           ELSE 'Regular'
       END AS customer_status
FROM price_summary ps
LEFT JOIN supplier_info si ON si.total_cost = (SELECT MAX(total_cost) FROM supplier_info)
LEFT JOIN high_value_customers hs ON ps.p_partkey IN (SELECT ps_partkey FROM partsupp WHERE ps_supplycost > 100)
WHERE ps.rn = 1
ORDER BY ps.total_revenue DESC
LIMIT 10;