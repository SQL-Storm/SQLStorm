WITH RECURSIVE part_hierarchy AS (
    SELECT p_partkey, p_name, p_size, p_retailprice, 0 AS level
    FROM part
    WHERE p_size > 10

    UNION ALL

    SELECT p.p_partkey, p.p_name, p.p_size, p.p_retailprice * ph.p_retailprice AS retailprice, ph.level + 1
    FROM part p
    JOIN part_hierarchy ph ON p.p_partkey = ph.p_partkey
    WHERE ph.level < 3
),

supplier_summary AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, s.s_acctbal
),

order_info AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, COUNT(l.l_orderkey) AS lineitem_count
    FROM orders o
    LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= '1996-01-01'
    GROUP BY o.o_orderkey, o.o_orderdate, o.o_totalprice
)

SELECT ph.p_name,
       ph.retailprice,
       ss.s_name,
       ss.total_supply_cost,
       oi.o_totalprice,
       oi.lineitem_count,
       ROW_NUMBER() OVER (PARTITION BY ph.p_partkey ORDER BY oi.o_totalprice DESC) AS order_rank
FROM part_hierarchy ph
JOIN supplier_summary ss ON ph.p_partkey % 10 = ss.s_suppkey % 10
JOIN order_info oi ON oi.lineitem_count > 5
WHERE ph.retailprice < COALESCE((SELECT AVG(p_retailprice) FROM part WHERE p_size < 20), 0)
  AND ss.total_supply_cost IS NOT NULL
ORDER BY ph.level DESC, ss.total_supply_cost DESC, oi.o_totalprice ASC;