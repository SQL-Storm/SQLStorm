
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier WHERE s_acctbal IS NOT NULL)

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),

PartSupplierStats AS (
    SELECT ps.ps_partkey, 
           SUM(ps.ps_availqty) AS total_availqty, 
           AVG(ps.ps_supplycost) AS avg_supplycost,
           ROW_NUMBER() OVER (PARTITION BY ps.ps_partkey ORDER BY SUM(ps.ps_availqty) DESC) AS rn
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),

CustomerOrders AS (
    SELECT c.c_custkey, 
           SUM(o.o_totalprice) AS total_spent,
           COUNT(o.o_orderkey) AS order_count
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
),

RankedRevenue AS (
    SELECT c.c_custkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
           RANK() OVER (ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS rev_rank
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY c.c_custkey
)

SELECT 
    p.p_name,
    s.s_name,
    p_s.total_availqty,
    p_s.avg_supplycost,
    c.total_spent,
    r.revenue,
    COALESCE(hero.level, 'No hierarchy') AS hierarchy_level
FROM part p
LEFT JOIN PartSupplierStats p_s ON p.p_partkey = p_s.ps_partkey AND p_s.rn = 1
LEFT JOIN supplier s ON p_s.ps_partkey = s.s_suppkey
LEFT JOIN CustomerOrders c ON c.c_custkey = s.s_nationkey
LEFT JOIN RankedRevenue r ON r.c_custkey = c.c_custkey
LEFT JOIN SupplierHierarchy hero ON s.s_suppkey = hero.s_suppkey
WHERE (c.total_spent IS NOT NULL AND c.order_count > 5) 
   OR (r.revenue IS NOT NULL AND r.rev_rank <= 10)
ORDER BY r.revenue DESC, p.p_name;
