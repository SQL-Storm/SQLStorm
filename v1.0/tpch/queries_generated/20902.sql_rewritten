WITH RankedOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice,
           ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank_price,
           SUM(l.l_extendedprice) OVER (PARTITION BY o.o_orderkey) AS total_lineitem_price
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus IN ('F', 'O')
), CustomerRegion AS (
    SELECT c.c_custkey, c.c_name, n.n_regionkey,
           CASE WHEN n.n_regionkey IS NULL THEN 'Unknown Region' ELSE r.r_name END as region_name
    FROM customer c
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    LEFT JOIN region r ON n.n_regionkey = r.r_regionkey
), SupplierStatistics AS (
    SELECT s.s_suppkey, 
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_weight,
           AVG(s.s_acctbal) AS avg_balance,
           COUNT(DISTINCT p.p_partkey) AS parts_supplied,
           STRING_AGG(DISTINCT p.p_name, ', ') AS supplied_part_names
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    GROUP BY s.s_suppkey
)
SELECT cr.region_name,
       COUNT(DISTINCT ro.o_orderkey) AS order_count,
       COALESCE(SUM(ro.o_totalprice), 0) AS total_revenue,
       SUM(ss.total_supply_weight) AS total_supply_weight,
       MAX(ss.avg_balance) AS max_supplier_balance,
       STRING_AGG(DISTINCT ss.supplied_part_names, '; ') AS all_supplied_parts
FROM CustomerRegion cr
LEFT JOIN RankedOrders ro ON cr.c_custkey = ro.o_orderkey
LEFT JOIN SupplierStatistics ss ON ss.total_supply_weight > 0
WHERE cr.region_name IS NOT NULL
  AND ro.o_orderdate >= DATEADD(MONTH, -6, cast('1998-10-01' as date))
GROUP BY cr.region_name
HAVING COUNT(DISTINCT ro.o_orderkey) > 10 
   OR MAX(ss.avg_balance) IS NULL
ORDER BY total_revenue DESC
LIMIT 10;