
WITH RECURSIVE TopSuppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 
           ROW_NUMBER() OVER (ORDER BY s.s_acctbal DESC) AS rank
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL
), 
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_totalprice, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_order_value
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY c.c_custkey, c.c_name, o.o_orderkey, o.o_totalprice
),
SupplierParts AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, ps.ps_availqty,
           p.p_retailprice, 
           (ps.ps_supplycost * ps.ps_availqty) AS supply_total_cost
    FROM partsupp ps
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE ps.ps_availqty > 0
)
SELECT 
    r.r_name,
    n.n_name,
    SUM(COALESCE(c.total_order_value, 0)) AS total_value,
    AVG(s.s_acctbal) AS average_supplier_balance,
    COUNT(DISTINCT c.o_orderkey) AS number_of_orders,
    STRING_AGG(DISTINCT p.p_name, ', ') AS part_names
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN SupplierParts sp ON sp.ps_partkey IN (SELECT DISTINCT ps_partkey 
                                                   FROM partsupp 
                                                   WHERE ps_supplycost < 50)
LEFT JOIN TopSuppliers s ON sp.ps_suppkey = s.s_suppkey
LEFT JOIN CustomerOrders c ON c.o_orderkey IN (SELECT o.o_orderkey 
                                                FROM orders o
                                                WHERE o.o_totalprice > 1000)
JOIN lineitem l ON c.o_orderkey = l.l_orderkey
LEFT JOIN part p ON l.l_partkey = p.p_partkey
WHERE n.n_name LIKE 'A%'
GROUP BY r.r_name, n.n_name, s.s_acctbal
ORDER BY total_value DESC;
