
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY p.p_retailprice DESC) AS rn
    FROM 
        part p
    WHERE 
        p.p_retailprice IS NOT NULL
),
SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT ps.ps_partkey) AS part_count
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
HighValueSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name
    FROM 
        SupplierInfo s
    WHERE 
        s.total_supply_cost > (SELECT AVG(total_supply_cost) FROM SupplierInfo)
)
SELECT 
    p.p_partkey,
    p.p_name,
    COALESCE(s.s_name, 'No Supplier') AS supplier_name,
    RANK() OVER (PARTITION BY p.p_type ORDER BY MAX(l.l_extendedprice) DESC) AS price_rank,
    CASE 
        WHEN p.p_retailprice > 100 THEN 'High'
        WHEN p.p_retailprice BETWEEN 50 AND 100 THEN 'Medium'
        ELSE 'Low'
    END AS price_category,
    COUNT(DISTINCT l.l_orderkey) AS total_orders,
    SUM(l.l_quantity) AS total_quantity
FROM 
    RankedParts p
LEFT JOIN 
    lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN 
    HighValueSuppliers s ON l.l_suppkey = s.s_suppkey
GROUP BY 
    p.p_partkey, p.p_name, s.s_name, p.p_type, p.p_retailprice
HAVING 
    COUNT(DISTINCT l.l_orderkey) > 5
ORDER BY 
    MAX(l.l_extendedprice) DESC
