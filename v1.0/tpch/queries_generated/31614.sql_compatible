
WITH RECURSIVE OrderHierarchy AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderstatus, 0 AS Level
    FROM orders o
    WHERE o.o_orderstatus = 'O' 
    UNION ALL
    SELECT o.o_orderkey, o.o_totalprice * 0.9 AS o_totalprice, o.o_orderstatus, h.Level + 1
    FROM orders o
    JOIN OrderHierarchy h ON o.o_orderkey = h.o_orderkey
    WHERE h.Level < 5
), RankedSuppliers AS (
    SELECT ps.ps_suppkey, s.s_name, RANK() OVER (PARTITION BY ps.ps_partkey ORDER BY ps.ps_supplycost ASC) AS SupplierRank
    FROM partsupp ps
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
), PartDetails AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice, 
           COALESCE(supplycosts.min_supplycost, 0) AS MinSupplyCost,
           COALESCE(supplycosts.avg_supplycost, 0) AS AvgSupplyCost
    FROM part p
    LEFT JOIN (
        SELECT ps.ps_partkey, 
               MIN(ps.ps_supplycost) AS min_supplycost,
               AVG(ps.ps_supplycost) AS avg_supplycost
        FROM partsupp ps
        GROUP BY ps.ps_partkey
    ) supplycosts ON p.p_partkey = supplycosts.ps_partkey
), CustomerOrderStats AS (
    SELECT c.c_custkey, c.c_name, 
           COUNT(o.o_orderkey) AS TotalOrders,
           SUM(o.o_totalprice) AS TotalSpent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    pd.p_name,
    pd.p_retailprice,
    ps.s_name AS SupplierName,
    oh.o_orderkey,
    oh.o_totalprice AS OpenOrderTotal,
    cos.TotalOrders,
    cos.TotalSpent
FROM PartDetails pd
LEFT JOIN RankedSuppliers ps ON pd.p_partkey = ps.ps_partkey AND ps.SupplierRank = 1
LEFT JOIN OrderHierarchy oh ON oh.o_orderkey = (SELECT MIN(o.o_orderkey) FROM orders o WHERE o.o_orderstatus = 'O')
LEFT JOIN CustomerOrderStats cos ON cos.TotalOrders > 0
WHERE pd.MinSupplyCost < pd.p_retailprice
ORDER BY pd.p_retailprice DESC, cos.TotalSpent DESC;
