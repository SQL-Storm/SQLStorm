
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (
        SELECT AVG(s2.s_acctbal)
        FROM supplier s2
        WHERE s2.s_nationkey = s.s_nationkey
    )
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
OrderSummaries AS (
    SELECT o.o_orderkey, o.o_orderdate, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_returnflag = 'N'
    GROUP BY o.o_orderkey, o.o_orderdate
),
PartSupplierCosts AS (
    SELECT p.p_partkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey
),
CustomerOrderStatus AS (
    SELECT c.c_custkey, COUNT(DISTINCT o.o_orderkey) AS total_orders, 
           MAX(CASE WHEN o.o_orderstatus = 'F' THEN 1 ELSE 0 END) AS finished_orders
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
)
SELECT 
    r.r_name AS region_name,
    SUM(COALESCE(os.total_revenue, 0)) AS total_region_revenue,
    COUNT(DISTINCT sch.s_suppkey) AS total_suppliers,
    SUM(COALESCE(ps.total_supply_cost, 0)) AS total_part_supply_cost,
    AVG(cos.total_orders) AS avg_orders_per_customer
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN OrderSummaries os ON s.s_suppkey = os.o_orderkey
LEFT JOIN PartSupplierCosts ps ON ps.p_partkey IN (
    SELECT ps_partkey 
    FROM partsupp 
    WHERE ps_suppkey = s.s_suppkey
) 
LEFT JOIN CustomerOrderStatus cos ON cos.c_custkey = s.s_nationkey
JOIN SupplierHierarchy sch ON sch.s_nationkey = n.n_nationkey
GROUP BY r.r_name
HAVING SUM(COALESCE(os.total_revenue, 0)) > 100000
ORDER BY total_region_revenue DESC;
