
WITH RECURSIVE OrderHierarchy AS (
    SELECT o_orderkey, o_custkey, o_orderdate, o_totalprice,
           ROW_NUMBER() OVER (PARTITION BY o_custkey ORDER BY o_orderdate) AS rn
    FROM orders
    WHERE o_orderstatus IN ('O', 'P')  
), SupplierDetails AS (
    SELECT s.s_suppkey, s.s_name, ps.ps_availqty, ps.ps_supplycost,
           ROW_NUMBER() OVER (PARTITION BY ps.ps_partkey ORDER BY ps.ps_supplycost) AS supp_rank
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal > 10000 
), CustomerSpending AS (
    SELECT c.c_custkey, SUM(o.o_totalprice) AS total_spent,
           COUNT(DISTINCT o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
), ComplexLineItems AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_quantity, l.l_discount,
           l.l_extendedprice * (1 - l.l_discount) AS net_price,
           CASE 
               WHEN l.l_returnflag = 'R' THEN 'Returned'
               ELSE 'Not Returned'
           END AS return_status
    FROM lineitem l
    WHERE l.l_shipdate >= DATE '1998-10-01' - INTERVAL '1 year'
)
SELECT DISTINCT c.c_name, 
       COALESCE(cs.total_spent, 0) AS total_spent,
       oh.o_orderkey,
       SUM(cli.net_price) AS total_lineitem_value,
       MAX(sd.ps_supplycost) AS max_supply_cost,
       COUNT(sd.s_suppkey) FILTER (WHERE sd.supp_rank = 1) AS top_suppliers_count
FROM CustomerSpending cs
FULL OUTER JOIN OrderHierarchy oh ON cs.c_custkey = oh.o_custkey
LEFT JOIN ComplexLineItems cli ON oh.o_orderkey = cli.l_orderkey
LEFT JOIN SupplierDetails sd ON cli.l_partkey = sd.ps_partkey
WHERE sd.ps_supplycost IS NOT NULL OR (cs.order_count > 5 AND cli.l_quantity > 10)
GROUP BY c.c_name, oh.o_orderkey, cs.total_spent
HAVING SUM(cli.net_price) > 10000
ORDER BY total_lineitem_value DESC, c.c_name;
