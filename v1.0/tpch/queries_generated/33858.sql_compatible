
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_supkey, s_name, s_acctbal, NULL AS parent_suppkey, s_nationkey
    FROM supplier
    WHERE s_acctbal > 1000

    UNION ALL

    SELECT s.s_supkey, s.s_name, s.s_acctbal, sh.s_supkey, s.s_nationkey
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > 500
),
RankedParts AS (
    SELECT p.p_partkey, p.p_name, p.p_mfgr, SUM(ps.ps_availqty) AS total_avail_qty,
           ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY SUM(ps.ps_supplycost) DESC) AS rank
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE p.p_size BETWEEN 10 AND 20
    GROUP BY p.p_partkey, p.p_name, p.p_mfgr, p.p_type
),
FilteredOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice,
           CASE WHEN o.o_orderstatus = 'F' THEN 'Finalized'
                ELSE 'Pending' END AS order_status
    FROM orders o
    WHERE o.o_totalprice > 1000
),
CustomerStats AS (
    SELECT c.c_custkey, COUNT(DISTINCT o.o_orderkey) AS order_count,
           AVG(o.o_totalprice) AS avg_order_value
    FROM customer c
    LEFT JOIN FilteredOrders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
)
SELECT c.c_name, cs.order_count, cs.avg_order_value, rp.p_name, rp.total_avail_qty
FROM CustomerStats cs
JOIN customer c ON cs.c_custkey = c.c_custkey
LEFT JOIN RankedParts rp ON rp.rank <= 5
WHERE EXISTS (
    SELECT 1
    FROM lineitem l
    WHERE l.l_orderkey IN (SELECT o.o_orderkey FROM FilteredOrders o WHERE o.o_totalprice > 1500)
    AND l.l_discount > 0.1
)
ORDER BY cs.avg_order_value DESC, cs.order_count ASC;
