WITH RankedOrders AS (
    SELECT
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM
        orders o
    WHERE
        o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate <= DATE '1997-12-31'
),
SupplierStats AS (
    SELECT
        s.s_suppkey,
        COUNT(ps.ps_partkey) AS num_parts,
        SUM(ps.ps_supplycost) AS total_supply_cost
    FROM
        supplier s
    LEFT JOIN
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY
        s.s_suppkey
),
CustomerMetrics AS (
    SELECT
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS total_orders
    FROM
        customer c
    JOIN
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY
        c.c_custkey
)
SELECT
    COALESCE(r.o_orderkey, 'No Orders') AS OrderID,
    COALESCE(c.c_custkey, 'No Customer') AS CustomerID,
    r.o_orderdate,
    r.o_totalprice,
    ss.num_parts,
    cm.total_spent,
    CASE
        WHEN r.order_rank <= 10 THEN 'Top Order'
        ELSE 'Regular Order'
    END AS order_category,
    STRING_AGG(s.s_name, ', ') AS supplier_names
FROM
    RankedOrders r
FULL OUTER JOIN
    CustomerMetrics cm ON r.o_orderkey = cm.total_orders
LEFT JOIN
    SupplierStats ss ON ss.s_suppkey IN (
        SELECT ps.ps_suppkey
        FROM partsupp ps
        JOIN lineitem l ON ps.ps_partkey = l.l_partkey
        WHERE l.l_orderkey = r.o_orderkey
    )
LEFT JOIN
    supplier s ON ss.s_suppkey = s.s_suppkey
GROUP BY
    r.o_orderkey, cm.c_custkey, r.o_orderdate, r.o_totalprice, ss.num_parts, cm.total_spent, r.order_rank
ORDER BY
    r.o_orderdate DESC, r.o_totalprice DESC
LIMIT 100;