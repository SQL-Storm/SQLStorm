
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
),
TopRegions AS (
    SELECT r.r_regionkey, r.r_name, COUNT(n.n_nationkey) AS nation_count
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    GROUP BY r.r_regionkey, r.r_name
    HAVING COUNT(n.n_nationkey) > 2
),
ExpensiveParts AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice, p.p_size,
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_retailprice, p.p_size
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 10000
)
SELECT
    c.c_name AS customer_name,
    o.o_orderkey,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
    r.r_name AS region_name,
    ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS line_item_rank,
    COALESCE(sh.level, 'No Hierarchy') AS supplier_level
FROM orders o
JOIN customer c ON o.o_custkey = c.c_custkey
JOIN lineitem l ON o.o_orderkey = l.l_orderkey
JOIN ExpensiveParts ep ON l.l_partkey = ep.p_partkey
LEFT JOIN TopRegions r ON r.r_regionkey = c.c_nationkey
LEFT JOIN SupplierHierarchy sh ON sh.s_nationkey = c.c_nationkey
WHERE o.o_orderdate >= '1997-01-01'
AND (l.l_discount IS NULL OR l.l_discount < 0.1)
GROUP BY c.c_name, o.o_orderkey, r.r_name, sh.level
HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 50000
ORDER BY total_revenue DESC;
