
WITH RECURSIVE SuppCTE AS (
    SELECT s_suppkey, s_name, s_acctbal, 
           ROW_NUMBER() OVER (PARTITION BY s_nationkey ORDER BY s_acctbal DESC) AS rn
    FROM supplier
    WHERE s_acctbal IS NOT NULL
),
FilteredParts AS (
    SELECT p_partkey, p_retailprice, 
           (SELECT COUNT(*) FROM partsupp ps WHERE ps.ps_partkey = p.p_partkey AND ps.ps_availqty > 0) AS available_count
    FROM part p
    WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part) 
),
NationRanked AS (
    SELECT n_nationkey, n_name, 
           DENSE_RANK() OVER (ORDER BY COUNT(DISTINCT s_suppkey) DESC) AS nation_rank
    FROM nation n
    JOIN supplier s ON s.s_nationkey = n.n_nationkey
    GROUP BY n_nationkey, n_name
)
SELECT 
    n.n_name AS nation_name,
    COUNT(DISTINCT s.s_suppkey) AS total_suppliers,
    SUM(lp.l_extendedprice * (1 - lp.l_discount)) AS total_revenue,
    AVG(lp.l_quantity) AS avg_quantity,
    p.p_name AS part_name,
    CASE 
        WHEN COUNT(DISTINCT s.s_suppkey) > 3 THEN 'High' 
        WHEN COUNT(DISTINCT s.s_suppkey) BETWEEN 2 AND 3 THEN 'Medium' 
        ELSE 'Low' 
    END AS supplier_availability,
    ROW_NUMBER() OVER (PARTITION BY n.n_nationkey ORDER BY SUM(lp.l_extendedprice) DESC) AS revenue_rank,
    n.n_nationkey
FROM lineitem lp
JOIN orders o ON lp.l_orderkey = o.o_orderkey
JOIN customer c ON o.o_custkey = c.c_custkey
JOIN supplier s ON lp.l_suppkey = s.s_suppkey
JOIN FilteredParts p ON lp.l_partkey = p.p_partkey
JOIN NationRanked n ON s.s_nationkey = n.n_nationkey
WHERE lp.l_shipdate BETWEEN '1996-01-01' AND '1997-12-31'
  AND (c.c_acctbal IS NULL OR c.c_acctbal < 1000.00) 
GROUP BY n.n_nationkey, n.n_name, p.p_name
HAVING SUM(lp.l_extendedprice * (1 - lp.l_discount)) > 100000
ORDER BY nation_rank, total_revenue DESC;
