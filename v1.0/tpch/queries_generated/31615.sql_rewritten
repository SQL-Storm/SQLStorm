WITH RECURSIVE SupplierCost AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, ps.ps_supplycost, 
           (s.s_acctbal * ps.ps_supplycost) AS total_cost,
           1 AS level
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE ps.ps_availqty > 100

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_acctbal, ps.ps_supplycost, 
           (sc.total_cost + ps.ps_supplycost * 0.1) AS total_cost,
           sc.level + 1
    FROM SupplierCost sc
    JOIN supplier s ON sc.s_suppkey = s.s_suppkey
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE sc.level < 5
),
OrderDetails AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price,
           COUNT(l.l_orderkey) AS line_count,
           ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS rn
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= '1997-01-01' AND o.o_orderstatus IN ('O', 'P')
    GROUP BY o.o_orderkey
)
SELECT 
    n.n_name AS nation_name,
    p.p_name AS part_name,
    COUNT(DISTINCT s.s_suppkey) AS supplier_count,
    SUM(sc.total_cost) AS total_supplier_cost,
    od.total_price AS order_total_price
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN nation n ON s.s_nationkey = n.n_nationkey
LEFT JOIN SupplierCost sc ON s.s_suppkey = sc.s_suppkey
JOIN OrderDetails od ON od.line_count > 5
WHERE p.p_size BETWEEN 1 AND 20 AND sc.total_cost IS NOT NULL
GROUP BY n.n_name, p.p_name, od.total_price
HAVING AVG(sc.total_cost) > 1000
ORDER BY n.n_name, total_supplier_cost DESC;