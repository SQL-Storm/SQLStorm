
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_nationkey, s_suppkey, s_name, s_acctbal, s_comment, 0 AS level
    FROM supplier
    WHERE s_acctbal > 10000
    UNION ALL
    SELECT s.n_nationkey, s.s_suppkey, s.s_name, s.s_acctbal, s.s_comment, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal < sh.s_acctbal
),
TotalOrders AS (
    SELECT o_custkey, SUM(o_totalprice) AS total_spent
    FROM orders
    GROUP BY o_custkey
),
LineItemStats AS (
    SELECT l_partkey, 
           COUNT(*) AS line_count, 
           SUM(l_extendedprice) AS total_extended_price,
           AVG(l_discount) AS avg_discount,
           ROW_NUMBER() OVER (PARTITION BY l_partkey ORDER BY SUM(l_quantity) DESC) AS rn
    FROM lineitem
    GROUP BY l_partkey
),
RegionalSummary AS (
    SELECT r.r_name, 
           COUNT(DISTINCT n.n_nationkey) AS nation_count,
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supplycost
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN partsupp ps ON n.n_nationkey = ps.ps_suppkey
    GROUP BY r.r_name
),
FilteredSupplies AS (
    SELECT s.s_name, s.s_acctbal, sh.level
    FROM SupplierHierarchy sh
    JOIN supplier s ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level = 1
)
SELECT DISTINCT
    cs.c_name AS customer_name,
    cs.c_acctbal AS customer_balance,
    r.r_name AS region_name,
    ls.total_extended_price AS line_total,
    fs.s_name AS supplier_name,
    fs.level AS supplier_level
FROM customer cs
JOIN TotalOrders to ON cs.c_custkey = to.o_custkey
JOIN lineitem li ON li.l_orderkey = to.o_custkey
JOIN LineItemStats ls ON li.l_partkey = ls.l_partkey
JOIN RegionalSummary r ON r.nation_count > 1
LEFT JOIN FilteredSupplies fs ON fs.s_acctbal > 50000
WHERE cs.c_acctbal IS NOT NULL
  AND (ls.avg_discount > 0.10 OR ls.line_count > 5)
ORDER BY r.r_name, fs.s_name;
