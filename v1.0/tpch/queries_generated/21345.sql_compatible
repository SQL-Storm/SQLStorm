
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rnk
    FROM 
        part p
    WHERE 
        p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2 WHERE p2.p_size > 10)
    UNION ALL
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice
    FROM 
        part p
    WHERE 
        NOT EXISTS (SELECT 1 FROM part p2 WHERE p2.p_brand = p.p_brand AND p2.p_retailprice < p.p_retailprice)
),
OrdersData AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_value,
        c.c_nationkey
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderstatus = 'F' 
        AND l.l_shipmode IN ('SHIP', 'AIR')
    GROUP BY 
        o.o_orderkey, c.c_nationkey
),
NationCustomer AS (
    SELECT 
        n.n_name, 
        n.n_nationkey, 
        COUNT(DISTINCT c.c_custkey) AS cust_count
    FROM 
        nation n
    LEFT JOIN 
        customer c ON n.n_nationkey = c.c_nationkey
    GROUP BY 
        n.n_name, n.n_nationkey
),
FinalOutput AS (
    SELECT 
        np.n_name, 
        rp.p_name, 
        od.total_value, 
        CASE 
            WHEN od.total_value IS NULL THEN 'NO ORDERS'
            WHEN rp.rnk = 1 AND od.total_value > 5000 THEN 'HIGH VALUE'
            ELSE 'NORMAL'
        END AS order_status
    FROM 
        RankedParts rp
    LEFT JOIN 
        OrdersData od ON rp.p_partkey = (SELECT ps.ps_partkey FROM partsupp ps 
                                           WHERE ps.ps_availqty > 0 
                                           ORDER BY ps.ps_supplycost DESC LIMIT 1)
    JOIN 
        NationCustomer np ON od.c_nationkey = np.n_nationkey
    WHERE 
        rp.rnk <= 5
    ORDER BY 
        np.n_name, order_status DESC, rp.p_retailprice
)
SELECT 
    n_name, 
    p_name, 
    total_value, 
    order_status
FROM 
    FinalOutput
WHERE
    (order_status = 'HIGH VALUE' OR order_status = 'NO ORDERS') 
    AND (total_value IS NOT NULL OR total_value < 10000)
ORDER BY 
    n_name, total_value DESC;
