
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        ROW_NUMBER() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS rank
    FROM 
        supplier s
),
FilteredParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_avail_qty,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY 
        p.p_partkey, p.p_name
    HAVING 
        SUM(ps.ps_availqty) > 1000
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        o.o_orderkey,
        o.o_totalprice,
        ROW_NUMBER() OVER (ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        o.o_orderstatus = 'O' AND 
        o.o_orderdate >= DATEADD(YEAR, -1, '1998-10-01')
)
SELECT 
    r.r_name,
    fo.p_name,
    s.s_name,
    COALESCE(fo.total_avail_qty, 0) AS total_avail_qty,
    COALESCE(fo.avg_supply_cost, 0.00) AS avg_supply_cost,
    COALESCE(c.o_totalprice, 0.00) AS total_order_price,
    CASE 
        WHEN s.rank = 1 THEN 'Top Supplier' 
        ELSE 'Other Supplier' 
    END AS supplier_category
FROM 
    RankedSuppliers s
LEFT JOIN 
    nation n ON s.s_nationkey = n.n_nationkey
LEFT JOIN 
    region r ON n.n_regionkey = r.r_regionkey
LEFT JOIN 
    FilteredParts fo ON s.s_suppkey = fo.p_partkey
FULL OUTER JOIN 
    CustomerOrders c ON s.s_suppkey = c.o_orderkey
WHERE 
    (s.s_acctbal IS NOT NULL OR c.o_totalprice IS NOT NULL)
ORDER BY 
    r.r_name, fo.p_name, s.s_name;
