
WITH RECURSIVE PartHierarchy AS (
    SELECT p_partkey, p_name, p_mfgr, 0 AS depth
    FROM part
    WHERE p_size IS NOT NULL
    UNION ALL
    SELECT ps.ps_partkey, p.p_name, p.p_mfgr, ph.depth + 1
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    JOIN PartHierarchy ph ON ph.p_partkey = ps.ps_partkey
    WHERE p.p_size > ph.depth
),
RegionStats AS (
    SELECT r.r_regionkey, r.r_name, COUNT(DISTINCT n.n_nationkey) AS nation_count
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    GROUP BY r.r_regionkey, r.r_name
),
SupplierRanked AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal,
           RANK() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS rank_within_nation
    FROM supplier s
),
OrderDetails AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price,
           COUNT(*) AS item_count, 
           ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY l.l_linenumber) AS line_number
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= '1997-01-01'
    GROUP BY o.o_orderkey
),
UnusualOrders AS (
    SELECT od.o_orderkey, od.total_price,
           ROLLUP(l.l_orderkey) AS unusual_rollup
    FROM OrderDetails od
    LEFT JOIN lineitem l ON od.o_orderkey = l.l_orderkey
    WHERE od.total_price IS NOT NULL AND od.item_count > 2
)

SELECT ph.p_name, ph.p_mfgr, rs.r_name, sr.s_name, sr.s_acctbal
FROM PartHierarchy ph
JOIN RegionStats rs ON rs.nation_count = (
    SELECT COUNT(*) FROM nation WHERE n_regionkey IN (SELECT r_regionkey FROM region)
)
LEFT JOIN SupplierRanked sr ON sr.rank_within_nation = (
    SELECT MAX(rank_within_nation) FROM SupplierRanked WHERE s_acctbal > 1000
)
WHERE sr.s_acctbal IS NOT NULL OR sr.s_name IN (SELECT s_name FROM supplier WHERE s_acctbal < 100.00)
ORDER BY ph.depth DESC, rs.r_name, sr.s_acctbal DESC;
