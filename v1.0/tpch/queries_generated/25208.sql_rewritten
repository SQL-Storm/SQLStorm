WITH supplier_part_details AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_name,
        p.p_container,
        p.p_retailprice,
        ps.ps_supplycost,
        ps.ps_availqty,
        CONCAT(s.s_name, ' - ', p.p_name) AS supplier_part_name,
        CASE 
            WHEN ps.ps_supplycost > p.p_retailprice * 0.9 THEN 'High Cost'
            WHEN ps.ps_supplycost < p.p_retailprice * 0.5 THEN 'Low Cost'
            ELSE 'Moderate Cost'
        END AS cost_rating
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
),
customer_order_summary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent,
        AVG(o.o_totalprice) AS avg_order_value
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    DISTINCT spd.supplier_part_name,
    spd.p_container,
    spd.p_retailprice,
    spd.ps_supplycost,
    spd.cost_rating,
    cos.c_name AS customer_name,
    cos.total_orders,
    cos.total_spent,
    cos.avg_order_value
FROM 
    supplier_part_details spd
JOIN 
    customer_order_summary cos ON random() < 0.5 
WHERE 
    spd.ps_availqty > 10
ORDER BY 
    spd.cost_rating ASC, cos.total_spent DESC
LIMIT 100;