
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        c.c_name,
        c.c_nationkey,
        c.c_acctbal,
        ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY o.o_orderdate DESC) AS order_rank
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderstatus = 'O'
),
TopOrders AS (
    SELECT 
        r.o_orderkey,
        r.o_orderdate,
        r.c_name,
        r.c_nationkey,
        r.c_acctbal
    FROM 
        RankedOrders r
    WHERE 
        r.order_rank <= 5
),
SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        p.p_brand,
        p.p_type,
        SUM(ps.ps_availqty) AS total_availqty,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM 
        partsupp ps
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey, p.p_brand, p.p_type
),
CustomerSpending AS (
    SELECT 
        c.c_custkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_spent
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        c.c_custkey
)
SELECT 
    s.s_name,
    s.s_nationkey,
    sp.p_brand,
    sp.p_type,
    COUNT(DISTINCT cs.c_custkey) AS unique_customers,
    AVG(cs.total_spent) AS avg_spending,
    SUM(sp.total_availqty) AS total_avail_qty,
    SUM(sp.total_cost) AS total_supply_cost
FROM 
    SupplierParts sp
JOIN 
    supplier s ON sp.ps_suppkey = s.s_suppkey
JOIN 
    TopOrders to ON to.o_orderkey IN (
        SELECT l.l_orderkey 
        FROM lineitem l 
        WHERE l.l_partkey = sp.ps_partkey
    )
JOIN 
    CustomerSpending cs ON cs.c_custkey = to.c_custkey
GROUP BY 
    s.s_name, s.s_nationkey, sp.p_brand, sp.p_type
ORDER BY 
    total_supply_cost DESC, avg_spending DESC
LIMIT 10;
