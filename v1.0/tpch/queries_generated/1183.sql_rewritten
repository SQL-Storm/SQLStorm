WITH SupplierPerformance AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS TotalSupplyCost,
        COUNT(DISTINCT l.l_orderkey) AS TotalOrders
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    LEFT JOIN 
        lineitem l ON ps.ps_partkey = l.l_partkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
OrderSummary AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderdate,
        o.o_orderstatus,
        DENSE_RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS OrderRank,
        (SELECT COUNT(DISTINCT c.c_custkey) FROM customer c) AS TotalCustomers
    FROM 
        orders o
),
DetailedLineItems AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS Revenue,
        AVG(l.l_quantity) AS AvgQuantity,
        COUNT(l.l_linenumber) AS LineCount
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate >= '1997-01-01'
    GROUP BY 
        l.l_orderkey
)
SELECT 
    sp.s_name,
    sp.TotalSupplyCost,
    os.TotalOrders,
    ol.Revenue,
    ol.AvgQuantity,
    ol.LineCount,
    CASE 
        WHEN os.o_orderstatus = 'F' THEN 'Completed'
        WHEN os.o_orderstatus = 'P' THEN 'Pending'
        ELSE 'Unknown'
    END AS OrderStatusDescription,
    COALESCE(ol.Revenue, 0) AS LineItemRevenue
FROM 
    SupplierPerformance sp
FULL OUTER JOIN 
    OrderSummary os ON sp.TotalOrders > 0
LEFT JOIN 
    DetailedLineItems ol ON os.o_orderkey = ol.l_orderkey
WHERE 
    sp.TotalSupplyCost > (
        SELECT AVG(TotalSupplyCost) FROM SupplierPerformance
    ) OR ol.Revenue IS NOT NULL
ORDER BY 
    sp.TotalSupplyCost DESC, os.o_orderdate ASC;