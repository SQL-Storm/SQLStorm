
WITH SupplierSummary AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal,
           COUNT(ps.ps_partkey) AS total_parts,
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_value
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, s.s_acctbal
),
CustomerOrderSummary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_order_value,
           COUNT(o.o_orderkey) AS order_count
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY c.c_custkey, c.c_name
),
LargeOrders AS (
    SELECT o.o_orderkey, o.o_custkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS order_value
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY o.o_orderkey, o.o_custkey
    HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 1000
)
SELECT cs.c_name AS customer_name, 
       ss.s_name AS supplier_name, 
       ss.total_supply_value,
       cs.total_order_value,
       cs.order_count,
       CASE WHEN ss.total_parts IS NOT NULL AND cs.total_order_value IS NOT NULL THEN 'Both Available'
            WHEN ss.total_parts IS NULL THEN 'Supplier Only'
            WHEN cs.total_order_value IS NULL THEN 'Customer Only'
            ELSE 'None' END AS availability_status
FROM SupplierSummary ss
FULL OUTER JOIN CustomerOrderSummary cs ON ss.s_suppkey = (
    SELECT ps.ps_suppkey 
    FROM partsupp ps 
    WHERE ps.ps_partkey IN (
        SELECT l.l_partkey 
        FROM LargeOrders l 
        WHERE l.o_custkey = cs.c_custkey 
        FETCH FIRST 1 ROW ONLY
    )
)
WHERE ss.total_supply_value IS NOT NULL OR cs.total_order_value IS NOT NULL
ORDER BY availability_status, ss.total_supply_value DESC, cs.total_order_value DESC;
