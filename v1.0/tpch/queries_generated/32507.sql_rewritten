WITH RECURSIVE CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice 
    FROM customer c 
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate >= '1996-01-01'
    UNION ALL
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice 
    FROM customer c 
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN CustomerOrders co ON co.o_orderkey = o.o_orderkey
)
, RankedPrices AS (
    SELECT 
        co.c_custkey,
        co.c_name,
        SUM(co.o_totalprice) AS total_spent,
        RANK() OVER (PARTITION BY co.c_custkey ORDER BY SUM(co.o_totalprice) DESC) AS price_rank
    FROM CustomerOrders co
    GROUP BY co.c_custkey, co.c_name
)
SELECT 
    c.c_custkey,
    c.c_name,
    r.total_spent,
    CASE 
        WHEN r.price_rank = 1 THEN 'Top Spender'
        ELSE 'Regular Spender'
    END AS spender_category
FROM customer c
LEFT JOIN RankedPrices r ON c.c_custkey = r.c_custkey
WHERE r.total_spent IS NOT NULL
AND EXISTS (
    SELECT 1
    FROM orders o
    WHERE o.o_custkey = c.c_custkey AND o.o_orderstatus = 'O'
)
ORDER BY r.total_spent DESC
LIMIT 10;