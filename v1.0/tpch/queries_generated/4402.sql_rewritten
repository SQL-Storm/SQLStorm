WITH CustomerOrders AS (
    SELECT 
        c.c_custkey, 
        c.c_name, 
        SUM(o.o_totalprice) AS TotalSpent, 
        COUNT(o.o_orderkey) AS OrderCount
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
SupplierParts AS (
    SELECT 
        s.s_suppkey,
        s.s_name, 
        SUM(ps.ps_supplycost * ps.ps_availqty) AS TotalSupplyCost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
LineItemStats AS (
    SELECT 
        l.l_partkey, 
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS TotalRevenue,
        AVG(l.l_quantity) AS AvgQuantity,
        RANK() OVER (PARTITION BY l.l_partkey ORDER BY SUM(l.l_extendedprice) DESC) AS RevenueRank
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate >= DATE '1997-01-01' AND l.l_shipdate < DATE '1998-01-01'
    GROUP BY 
        l.l_partkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    COALESCE(co.TotalSpent, 0) AS CustomerTotalSpent,
    COALESCE(sp.TotalSupplyCost, 0) AS SupplierTotalSupplyCost,
    ls.TotalRevenue,
    ls.AvgQuantity,
    CASE 
        WHEN ls.RevenueRank = 1 THEN 'Top Seller'
        ELSE 'Regular'
    END AS SalesStatus
FROM 
    part p
LEFT JOIN 
    CustomerOrders co ON p.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey IN (SELECT s.s_suppkey FROM supplier s WHERE s.s_acctbal > 1000))
LEFT JOIN 
    SupplierParts sp ON p.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = sp.s_suppkey)
LEFT JOIN 
    LineItemStats ls ON p.p_partkey = ls.l_partkey
WHERE 
    p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2)
ORDER BY 
    ls.TotalRevenue DESC, p.p_name;