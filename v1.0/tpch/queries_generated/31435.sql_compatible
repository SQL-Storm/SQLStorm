
WITH RECURSIVE SupplierHierarchy AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_nationkey,
        1 AS level
    FROM 
        supplier s
    WHERE 
        s.s_acctbal > (
            SELECT AVG(s_acctbal) 
            FROM supplier 
            WHERE s_nationkey = s.s_nationkey
        )
    
    UNION ALL

    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_nationkey,
        sh.level + 1
    FROM 
        supplier s
    JOIN 
        SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE 
        s.s_acctbal > (
            SELECT AVG(s_acctbal) 
            FROM supplier 
            WHERE s_nationkey = s.nationkey
        )
),
OrderSummary AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        COUNT(l.l_orderkey) AS item_count,
        o.o_orderdate,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        o.o_orderkey, o.o_orderdate, o.o_orderstatus
),
CustomerRevenue AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COALESCE(SUM(os.total_revenue), 0) AS total_revenue
    FROM 
        customer c
    LEFT JOIN 
        OrderSummary os ON c.c_custkey = os.o_orderkey
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    n.n_name,
    SUM(cr.total_revenue) AS total_revenue,
    COUNT(DISTINCT cr.c_custkey) AS customer_count,
    MAX(cr.total_revenue) AS highest_revenue,
    STRING_AGG(DISTINCT s.s_name ORDER BY s.s_name) AS suppliers
FROM 
    nation n
JOIN 
    customer c ON n.n_nationkey = c.c_nationkey
JOIN 
    CustomerRevenue cr ON c.c_custkey = cr.c_custkey
LEFT JOIN 
    supplier s ON s.s_nationkey = n.n_nationkey
WHERE 
    cr.total_revenue > 10000 AND 
    n.n_name IS NOT NULL 
GROUP BY 
    n.n_name
HAVING 
    SUM(cr.total_revenue) > 50000
ORDER BY 
    total_revenue DESC;
