WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        c.c_name,
        c.c_acctbal,
        RANK() OVER (PARTITION BY c.c_nationkey ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderdate BETWEEN DATE '1996-01-01' AND DATE '1997-12-31'
),
TopRankedOrders AS (
    SELECT 
        ro.o_orderkey,
        ro.o_orderdate,
        ro.o_totalprice,
        ro.c_name,
        ro.c_acctbal
    FROM 
        RankedOrders ro
    WHERE 
        ro.order_rank <= 10
),
PartSupplier AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_availqty) AS total_available,
        SUM(ps.ps_supplycost) AS total_supplycost
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey
),
OrdersWithParts AS (
    SELECT 
        l.l_orderkey,
        l.l_partkey,
        l.l_quantity,
        l.l_extendedprice,
        l.l_discount,
        l.l_tax,
        o.o_totalprice,
        ps.total_available,
        ps.total_supplycost
    FROM 
        lineitem l
    JOIN 
        TopRankedOrders o ON l.l_orderkey = o.o_orderkey
    JOIN 
        PartSupplier ps ON l.l_partkey = ps.ps_partkey
)
SELECT 
    o.c_name,
    SUM(op.l_extendedprice * (1 - op.l_discount)) AS revenue,
    AVG(op.total_supplycost) AS average_supply_cost,
    COUNT(DISTINCT op.l_partkey) AS unique_parts_count
FROM 
    OrdersWithParts op
JOIN 
    customer o ON o.c_custkey = op.o_custkey
GROUP BY 
    o.c_name
HAVING 
    SUM(op.l_extendedprice * (1 - op.l_discount)) > 1000
ORDER BY 
    revenue DESC
LIMIT 10;