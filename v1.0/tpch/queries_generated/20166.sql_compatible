
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        ROW_NUMBER() OVER (PARTITION BY s.s_nationkey ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS rn
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name, s.s_nationkey
), HighCostSuppliers AS (
    SELECT 
        s.s_suppkey, 
        s.s_name 
    FROM 
        RankedSuppliers s 
    WHERE 
        s.rn = 1
), OrderDetails AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price,
        COUNT(DISTINCT l.l_partkey) AS distinct_parts
    FROM 
        orders o 
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        o.o_orderkey
), JoinedOrders AS (
    SELECT 
        od.o_orderkey, 
        od.total_price,
        CASE 
            WHEN od.distinct_parts > 5 THEN 'High'
            WHEN od.distinct_parts BETWEEN 1 AND 5 THEN 'Medium'
            ELSE 'Low'
        END AS order_type
    FROM 
        OrderDetails od
)
SELECT 
    ns.n_name,
    COUNT(DISTINCT lo.o_orderkey) AS order_count,
    SUM(lo.total_price) AS total_sales,
    MIN(ns.r_comment) AS sample_comment,
    STRING_AGG(DISTINCT hs.s_name, ', ') AS top_suppliers
FROM 
    nation ns
LEFT JOIN 
    customer c ON ns.n_nationkey = c.c_nationkey
LEFT JOIN 
    orders lo ON c.c_custkey = lo.o_custkey
LEFT JOIN 
    JoinedOrders od ON lo.o_orderkey = od.o_orderkey
LEFT JOIN 
    HighCostSuppliers hs ON hs.s_suppkey IN (
        SELECT 
            ps.ps_suppkey 
        FROM 
            partsupp ps 
        JOIN 
            lineitem l ON ps.ps_partkey = l.l_partkey 
        WHERE 
            l.l_orderkey = lo.o_orderkey
    )
WHERE 
    ns.n_nationkey IS NOT NULL
GROUP BY 
    ns.n_name
HAVING 
    COUNT(DISTINCT lo.o_orderkey) > 0
ORDER BY 
    total_sales DESC 
OFFSET 5 ROWS 
FETCH NEXT 10 ROWS ONLY;
