
WITH RankedOrders AS (
    SELECT
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank_order
    FROM
        orders o
    WHERE
        o.o_orderdate BETWEEN DATE '1996-01-01' AND DATE '1997-12-31'
),
SupplierSummary AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT ps.ps_partkey) AS part_count
    FROM
        supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY
        s.s_suppkey, s.s_name
),
CustomerSpend AS (
    SELECT
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS order_count
    FROM
        customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY
        c.c_custkey, c.c_name
)
SELECT
    r.o_orderkey,
    r.o_orderdate,
    r.o_totalprice,
    ss.s_name AS supplier_name,
    cs.c_name AS customer_name,
    cs.total_spent AS customer_spent,
    cs.order_count AS customer_orders,
    COALESCE(ss.total_supply_cost, 0) AS supplier_total_cost,
    ss.part_count AS supplier_part_count
FROM
    RankedOrders r
LEFT JOIN SupplierSummary ss ON r.o_orderkey = (SELECT l.l_orderkey FROM lineitem l WHERE l.l_orderkey = r.o_orderkey LIMIT 1)
LEFT JOIN CustomerSpend cs ON r.o_orderkey = (SELECT o.o_orderkey FROM orders o WHERE o.o_orderkey = r.o_orderkey LIMIT 1)
WHERE
    r.rank_order <= 10
ORDER BY
    r.o_totalprice DESC, cs.total_spent ASC;
