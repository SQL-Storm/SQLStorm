
WITH RECURSIVE SupplierCTE AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 
           CASE WHEN s.s_acctbal IS NULL THEN 'Unknown' ELSE CAST(s.s_acctbal AS VARCHAR(255)) END AS acctbal_display
    FROM supplier s
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal + 100, 
           CASE WHEN s.s_acctbal + 100 IS NULL THEN 'Unknown' ELSE CAST(s.s_acctbal + 100 AS VARCHAR(255)) END
    FROM supplier s
    JOIN SupplierCTE cte ON s.s_suppkey = cte.s_suppkey
    WHERE s.s_acctbal < 1000
),
OrderSummary AS (
    SELECT o.o_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(DISTINCT l.l_linenumber) AS item_count,
           RANK() OVER (PARTITION BY o.o_custkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey, o.o_custkey
),
FilteredOrders AS (
    SELECT os.o_orderkey, os.total_revenue, os.item_count
    FROM OrderSummary os
    WHERE os.total_revenue > (
        SELECT AVG(total_revenue) * 0.8
        FROM OrderSummary
    )
)
SELECT p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, 
       COALESCE(SUM(ps.ps_availqty), 0) AS total_available_qty,
       STRING_AGG(DISTINCT COALESCE(s.s_name, 'No Supplier') || ' (' || cte.acctbal_display || ')', ', ') AS suppliers,
       COUNT(DISTINCT fo.o_orderkey) AS total_orders,
       SUM(fo.total_revenue) OVER (PARTITION BY p.p_partkey) AS total_revenue_per_part
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN SupplierCTE cte ON s.s_suppkey = cte.s_suppkey
LEFT JOIN FilteredOrders fo ON ps.ps_partkey = fo.o_orderkey
GROUP BY p.p_partkey, p.p_name, p.p_brand, p.p_retailprice
HAVING COALESCE(SUM(ps.ps_availqty), 0) IS NOT NULL
   OR EXISTS (
       SELECT 1 
       FROM lineitem l 
       WHERE l.l_partkey = p.p_partkey AND l.l_discount > 0.5
   )
ORDER BY total_revenue_per_part DESC, p.p_brand;
