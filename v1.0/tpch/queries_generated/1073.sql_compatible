
WITH SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT ps.ps_partkey) AS unique_parts_supplied
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_orders,
        COUNT(DISTINCT o.o_orderkey) AS order_count
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
LineItemRanking AS (
    SELECT 
        l.l_orderkey,
        l.l_partkey,
        RANK() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS price_rank
    FROM 
        lineitem l
),
PartAnalysis AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(l.l_quantity) AS total_quantity,
        AVG(l.l_discount) AS average_discount
    FROM 
        part p
    JOIN 
        lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY 
        p.p_partkey, p.p_name
)
SELECT 
    c.c_name,
    ss.s_name,
    ps.p_name,
    ps.average_discount,
    ss.total_supply_cost,
    COALESCE(la.total_quantity, 0) AS total_quantity,
    ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY COALESCE(ss.total_supply_cost, 0) DESC) AS rank
FROM 
    CustomerOrders co
JOIN 
    SupplierStats ss ON ss.unique_parts_supplied > 5
LEFT JOIN 
    LineItemRanking lrank ON lrank.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = co.c_custkey)
JOIN 
    PartAnalysis ps ON lrank.l_partkey = ps.p_partkey
JOIN 
    customer c ON co.c_custkey = c.c_custkey
WHERE 
    c.c_acctbal IS NOT NULL AND 
    ss.total_supply_cost > (SELECT AVG(total_supply_cost) FROM SupplierStats) 
ORDER BY 
    rank, total_quantity DESC;
