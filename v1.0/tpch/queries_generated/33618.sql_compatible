
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 2
),
PartSuppliers AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supplycost
    FROM partsupp ps
    JOIN SupplierHierarchy sh ON ps.ps_suppkey = sh.s_suppkey
    GROUP BY ps.ps_partkey, ps.ps_suppkey
),
HighValueOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate, c.c_name
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE o.o_totalprice > (SELECT AVG(o_totalprice) FROM orders)
      AND o.o_orderdate >= DATE '1997-01-01'
),
RankedLineItems AS (
    SELECT l.*, 
           RANK() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS price_rank
    FROM lineitem l
    WHERE l.l_returnflag = 'N'
)
SELECT 
    p.p_name,
    SUM(pl.total_supplycost) AS total_supplycost,
    COUNT(DISTINCT o.o_orderkey) AS order_count,
    AVG(rli.l_extendedprice) AS avg_extended_price,
    MAX(rli.l_discount) AS max_discount
FROM part p
LEFT JOIN PartSuppliers pl ON p.p_partkey = pl.ps_partkey
LEFT JOIN HighValueOrders o ON o.o_orderkey = pl.ps_partkey  
LEFT JOIN RankedLineItems rli ON rli.l_orderkey = o.o_orderkey
WHERE p.p_size > 10
GROUP BY p.p_partkey, p.p_name
HAVING SUM(pl.total_supplycost) IS NOT NULL
ORDER BY total_supplycost DESC;
