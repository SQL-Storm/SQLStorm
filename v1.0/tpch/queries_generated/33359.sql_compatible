
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 0 AS level
    FROM supplier
    WHERE s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > 500
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS number_of_orders
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name
),
HighValueParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        AVG(ps.ps_supplycost) AS avg_supplycost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE p.p_retailprice > 50
    GROUP BY p.p_partkey, p.p_name
),
OrderLineStats AS (
    SELECT 
        l.l_orderkey,
        COUNT(*) AS lines_count,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM lineitem l
    GROUP BY l.l_orderkey
)
SELECT 
    co.c_name,
    COALESCE(sh.level, 0) AS supplier_level,
    COALESCE(co.total_spent, 0) AS customer_spending,
    hvp.p_name AS high_value_part,
    ols.lines_count,
    ols.total_revenue
FROM CustomerOrders co
FULL OUTER JOIN SupplierHierarchy sh ON co.c_custkey = sh.s_nationkey
FULL OUTER JOIN HighValueParts hvp ON hvp.avg_supplycost > 30
LEFT JOIN OrderLineStats ols ON ols.l_orderkey = co.c_custkey
WHERE COALESCE(co.total_spent, 0) > 500 OR ols.lines_count > 2
ORDER BY supplier_level DESC, co.total_spent DESC;
