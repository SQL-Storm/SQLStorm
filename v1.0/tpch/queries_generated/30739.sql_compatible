
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2)
    UNION ALL
    SELECT s2.s_suppkey, s2.s_name, s2.s_nationkey, s2.s_acctbal, sh.level + 1
    FROM supplier s2
    JOIN SupplierHierarchy sh ON s2.s_nationkey = sh.s_nationkey
    WHERE s2.s_acctbal > (SELECT AVG(s3.s_acctbal) FROM supplier s3)
),

CustomerOrderDetails AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),

LineItemAnalysis AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_suppkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_amount,
           ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS line_rank
    FROM lineitem l
    GROUP BY l.l_orderkey, l.l_partkey, l.l_suppkey
),

MostPopularProducts AS (
    SELECT p.p_partkey, p.p_name, COUNT(li.l_orderkey) AS order_count
    FROM part p
    JOIN lineitem li ON p.p_partkey = li.l_partkey
    GROUP BY p.p_partkey, p.p_name
    HAVING COUNT(li.l_orderkey) > (
        SELECT AVG(order_count) FROM (
            SELECT COUNT(l_orderkey) AS order_count
            FROM lineitem
            GROUP BY l_partkey
        ) AS part_orders
    )
)

SELECT 
    c.c_name AS customer_name,
    sh.s_name AS supplier_name,
    p.p_name AS part_name,
    l.net_amount AS line_item_net_amount,
    ca.total_spent AS customer_total_spent,
    sh.level AS supplier_level
FROM CustomerOrderDetails ca
LEFT JOIN LineItemAnalysis l ON l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = ca.c_custkey)
LEFT JOIN MostPopularProducts p ON p.p_partkey = l.l_partkey
JOIN supplier sh ON l.l_suppkey = sh.s_suppkey
WHERE sh.s_acctbal IS NOT NULL
AND l.line_rank = 1
ORDER BY customer_name, supplier_name, line_item_net_amount DESC;
