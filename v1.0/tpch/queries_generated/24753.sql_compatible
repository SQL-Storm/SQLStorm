
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, 1 AS level
    FROM supplier
    WHERE s_acctbal IS NOT NULL AND s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),

FilteredOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, c.c_mktsegment
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE o.o_totalprice > 1000 AND c.c_mktsegment IS NOT NULL
),

LineitemAggregates AS (
    SELECT l.l_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM lineitem l
    GROUP BY l.l_orderkey
),

NationInfo AS (
    SELECT n.n_nationkey, n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_nationkey
    HAVING COUNT(s.s_suppkey) > 0
)

SELECT 
    p.p_name,
    COUNT(DISTINCT ps.ps_suppkey) AS available_suppliers,
    AVG(o.o_totalprice) AS avg_order_value,
    n.n_name AS nation_name,
    'Revenue for order ' || COALESCE(CAST(l.total_revenue AS VARCHAR), 'NULL') AS order_revenue_info
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN FilteredOrders o ON o.o_orderkey IN (SELECT l.l_orderkey FROM lineitem l WHERE l.l_partkey = p.p_partkey)
LEFT JOIN LineitemAggregates l ON o.o_orderkey = l.l_orderkey
JOIN NationInfo n ON p.p_partkey % (n.supplier_count + 1) = 0
WHERE p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2)
    AND EXISTS (SELECT 1 FROM SupplierHierarchy sh WHERE sh.s_nationkey = n.n_nationkey)
GROUP BY p.p_name, n.n_name
HAVING SUM(ps.ps_availqty) IS NOT NULL
ORDER BY available_suppliers DESC, avg_order_value DESC
OFFSET 10 ROWS FETCH NEXT 5 ROWS ONLY;
