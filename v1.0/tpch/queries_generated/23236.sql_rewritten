WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        p.p_brand,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn
    FROM 
        part p
    WHERE 
        p.p_retailprice IS NOT NULL
),
SupplierAvailability AS (
    SELECT 
        ps.ps_partkey,
        s.s_suppkey,
        s.s_acctbal,
        ps.ps_availqty,
        CASE 
            WHEN s.s_acctbal IS NULL THEN 0
            ELSE s.s_acctbal
        END AS effective_acctbal
    FROM 
        partsupp ps
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE 
        ps.ps_availqty > 0
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
),
HighValueSuppliers AS (
    SELECT 
        s.s_nationkey,
        AVG(s.s_acctbal) AS avg_acctbal
    FROM 
        supplier s
    WHERE 
        s.s_acctbal > (
            SELECT 
                AVG(s1.s_acctbal)
            FROM 
                supplier s1
            WHERE 
                s1.s_nationkey IS NOT NULL
        )
    GROUP BY 
        s.s_nationkey
)
SELECT 
    r.r_name,
    p.p_name,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
    COALESCE(c.total_orders, 0) AS total_orders_by_customer,
    COALESCE(c.total_spent, 0) AS total_spent_by_customer,
    s.avg_acctbal AS supplier_avg_acctbal,
    DENSE_RANK() OVER (PARTITION BY r.r_name ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS rank_sales
FROM 
    lineitem l
JOIN 
    RankedParts p ON l.l_partkey = p.p_partkey AND p.rn <= 10
JOIN 
    supplier s ON l.l_suppkey = s.s_suppkey
JOIN 
    nation n ON s.s_nationkey = n.n_nationkey
JOIN 
    region r ON n.n_regionkey = r.r_regionkey
LEFT JOIN 
    CustomerOrders c ON c.c_custkey = l.l_orderkey
LEFT JOIN 
    HighValueSuppliers hv ON hv.s_nationkey = n.n_nationkey
WHERE 
    l.l_returnflag = 'N' 
    AND l.l_shipdate >= '1997-01-01'
    AND r.r_name IS NOT NULL
GROUP BY 
    r.r_name, p.p_name, c.total_orders, c.total_spent, s.avg_acctbal
HAVING 
    SUM(l.l_extendedprice * (1 - l.l_discount)) > 1000
ORDER BY 
    r.r_name, total_sales DESC;