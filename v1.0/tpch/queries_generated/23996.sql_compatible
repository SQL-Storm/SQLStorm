
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost,
        ROW_NUMBER() OVER (PARTITION BY n.n_nationkey ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS rank
    FROM 
        supplier s 
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey 
    JOIN 
        nation n ON s.s_nationkey = n.n_nationkey 
    GROUP BY 
        s.s_suppkey, s.s_name, n.n_nationkey
),
EligibleCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c 
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2 WHERE c2.c_mktsegment = c.c_mktsegment)
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    p.p_partkey,
    p.p_name,
    COALESCE(s.s_name, 'N/A') AS supplier_name,
    COALESCE(ec.c_name, 'No Customer') AS customer_name,
    COUNT(DISTINCT l.l_orderkey) AS order_count,
    AVG(l.l_extendedprice * (1 - l.l_discount)) AS avg_revenue,
    STRING_AGG(DISTINCT n.n_name, ', ') AS nation_names,
    CASE WHEN SUM(l.l_quantity) IS NULL THEN 'No Quantity' ELSE 'Has Quantity' END AS quantity_status
FROM 
    part p 
LEFT JOIN 
    lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN 
    RankedSuppliers s ON l.l_suppkey = s.s_suppkey AND s.rank = 1
LEFT JOIN 
    EligibleCustomers ec ON l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = ec.c_custkey)
JOIN 
    nation n ON n.n_nationkey = (SELECT s.s_nationkey FROM supplier s WHERE s.s_suppkey = l.l_suppkey)
GROUP BY 
    p.p_partkey, p.p_name, s.s_name, ec.c_name
HAVING 
    AVG(l.l_extendedprice * (1 - l.l_discount)) > (SELECT AVG(l2.l_extendedprice * (1 - l2.l_discount)) FROM lineitem l2)
ORDER BY 
    p.p_partkey ASC, avg_revenue DESC
LIMIT 100;
