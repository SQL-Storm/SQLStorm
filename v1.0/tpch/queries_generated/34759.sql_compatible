
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_acctbal, CAST(s_name AS VARCHAR(100)) AS path 
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT ps.ps_suppkey, s.s_name, s.s_acctbal, CONCAT(sh.path, ' -> ', s.s_name) 
    FROM partsupp ps
    INNER JOIN SupplierHierarchy sh ON ps.ps_suppkey = sh.s_suppkey
    INNER JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
)

SELECT 
    p.p_name,
    COUNT(l.l_orderkey) AS order_count,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
    AVG(l.l_quantity) AS avg_quantity,
    RANK() OVER (PARTITION BY p.p_partkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank,
    MAX(s.s_acctbal) AS max_supplier_acctbalance
FROM part p
LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN SupplierHierarchy sh ON ps.ps_suppkey = sh.s_suppkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
WHERE 
    l.l_shipdate > '1997-01-01' 
    AND (l.l_returnflag = 'R' OR l.l_returnflag IS NULL)
GROUP BY 
    p.p_name, p.p_partkey
HAVING 
    SUM(l.l_extendedprice * (1 - l.l_discount)) > 10000
ORDER BY 
    total_revenue DESC
LIMIT 10;
