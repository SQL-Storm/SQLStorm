
WITH RECURSIVE OrderHierarchy AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_orderdate, o.o_totalprice, 1 AS level
    FROM orders o
    WHERE o.o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_custkey, o.o_orderdate, o.o_totalprice, oh.level + 1
    FROM orders o
    JOIN OrderHierarchy oh ON o.o_custkey = oh.o_custkey
    WHERE o.o_orderdate > (SELECT MAX(o_orderdate) FROM orders WHERE o_orderkey = oh.o_orderkey) 
      AND o.o_orderstatus = 'O'
),

CustomerSummary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),

SupplierMetrics AS (
    SELECT s.s_suppkey, s.s_name, COUNT(DISTINCT ps.ps_partkey) AS total_parts,
           SUM(ps.ps_supplycost) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),

TopCustomers AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal, cs.total_spent,
           ROW_NUMBER() OVER (ORDER BY cs.total_spent DESC) AS rank
    FROM customer c
    JOIN CustomerSummary cs ON c.c_custkey = cs.c_custkey
    WHERE c.c_acctbal IS NOT NULL
),

RegionStats AS (
    SELECT r.r_regionkey, r.r_name, 
           COUNT(DISTINCT n.n_nationkey) AS nation_count,
           SUM(s.s_acctbal) AS total_account_balance
    FROM region r
    LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
)

SELECT th.rank, th.c_name, th.total_spent, rm.r_name, rm.nation_count, sm.total_parts, sm.total_supply_cost
FROM TopCustomers th
JOIN RegionStats rm ON th.c_custkey % NULLIF(COUNT(rm.nation_count) OVER (), 0) = 0
JOIN SupplierMetrics sm ON th.c_custkey % NULLIF(sm.total_parts, 0) = 0
WHERE th.total_spent IS NOT NULL
ORDER BY th.rank, rm.total_account_balance DESC;
