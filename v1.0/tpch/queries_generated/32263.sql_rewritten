WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > 5000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
HighValueOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_value
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= DATE '1997-01-01' AND l.l_returnflag = 'N'
    GROUP BY o.o_orderkey, o.o_orderdate
    HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 100000
),
SupplierStats AS (
    SELECT s.s_suppkey, COUNT(ps.ps_partkey) AS total_parts, AVG(ps.ps_supplycost) AS avg_supplycost
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
),
RankedOrders AS (
    SELECT ho.o_orderkey, ho.o_orderdate, ho.total_value,
           RANK() OVER (ORDER BY ho.total_value DESC) AS order_rank
    FROM HighValueOrders ho
)
SELECT nh.n_name, r.r_name, 
       COALESCE(SUM(s.total_parts), 0) AS total_parts_supplied,
       COALESCE(SUM(st.avg_supplycost), 0) AS avg_supply_cost_of_parts,
       SUM(CASE WHEN ro.order_rank IS NOT NULL THEN 1 ELSE 0 END) AS count_high_value_orders
FROM nation nh
JOIN region r ON nh.n_regionkey = r.r_regionkey
LEFT JOIN SupplierStats s ON s.s_nationkey = nh.n_nationkey
LEFT JOIN RankedOrders ro ON ro.o_orderkey IN (
    SELECT o.o_orderkey
    FROM orders o
    WHERE o.o_custkey IN (
        SELECT c.c_custkey
        FROM customer c
        WHERE c.c_nationkey = nh.n_nationkey
    )
)
GROUP BY nh.n_name, r.r_name
ORDER BY nh.n_name, r.r_name;