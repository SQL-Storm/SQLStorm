
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY p.p_retailprice DESC) AS rank
    FROM part p
),
SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
),
FilteredCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        co.total_spent,
        co.order_count,
        CASE 
            WHEN co.total_spent > 10000 THEN 'VIP'
            WHEN co.order_count > 5 THEN 'Frequent Buyer'
            ELSE 'Casual'
        END AS customer_type
    FROM CustomerOrders co
    JOIN customer c ON c.c_custkey = co.c_custkey
    WHERE co.total_spent IS NOT NULL
),
PartSupplierAnalysis AS (
    SELECT 
        rp.p_partkey,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count,
        AVG(ps.ps_supplycost) AS avg_supply_cost,
        SUM(ps.ps_availqty) AS total_avail_qty
    FROM RankedParts rp
    LEFT JOIN partsupp ps ON rp.p_partkey = ps.ps_partkey
    WHERE rp.rank <= 5
    GROUP BY rp.p_partkey
)
SELECT 
    fc.c_custkey,
    fc.c_name,
    psa.p_partkey,
    psa.supplier_count,
    psa.avg_supply_cost,
    fc.customer_type,
    CASE 
        WHEN psa.total_avail_qty < 100 THEN 'Low Stock'
        WHEN psa.total_avail_qty BETWEEN 100 AND 500 THEN 'Average Stock'
        ELSE 'High Stock'
    END AS stock_status
FROM FilteredCustomers fc
JOIN PartSupplierAnalysis psa ON fc.order_count > 3
ORDER BY 
    fc.total_spent DESC,
    psa.avg_supply_cost ASC

UNION ALL

SELECT 
    NULL AS c_custkey,
    'Aggregate Stats' AS c_name,
    NULL AS p_partkey,
    COUNT(DISTINCT s.s_suppkey) AS supplier_count,
    AVG(ps.ps_supplycost) AS avg_supply_cost,
    'None' AS customer_type,
    CASE 
        WHEN SUM(ps.ps_availqty) < 100 THEN 'Low Stock'
        WHEN SUM(ps.ps_availqty) BETWEEN 100 AND 500 THEN 'Average Stock'
        ELSE 'High Stock'
    END AS stock_status
FROM partsupp ps
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
WHERE ps.ps_availqty IS NOT NULL
GROUP BY s.s_suppkey, s.s_name
ORDER BY NULL;
