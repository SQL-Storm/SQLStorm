
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_orderdate, 
        o.o_totalprice, 
        o.o_orderstatus, 
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank
    FROM orders o
    WHERE o.o_orderdate >= CURRENT_DATE - INTERVAL '1 year'
),
SupplierSummary AS (
    SELECT 
        s.s_suppkey, 
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_value,
        COUNT(DISTINCT ps.ps_partkey) AS part_count
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
),
HighValueSuppliers AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        ss.total_supply_value, 
        ss.part_count
    FROM supplier s
    JOIN SupplierSummary ss ON s.s_suppkey = ss.s_suppkey
    WHERE ss.total_supply_value > 100000
),
CustomerOrders AS (
    SELECT 
        c.c_custkey, 
        c.c_name, 
        COUNT(o.o_orderkey) AS order_count, 
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    ro.o_orderkey,
    ro.o_orderdate,
    ro.o_totalprice,
    COALESCE(co.c_name, 'Unknown Customer') AS customer_name,
    COALESCE(hv.part_count, 0) AS supplier_part_count,
    CASE 
        WHEN ro.rank <= 10 THEN 'Top Order'
        ELSE 'Regular Order'
    END AS order_classification
FROM RankedOrders ro
LEFT JOIN CustomerOrders co ON ro.o_orderkey = co.custkey
LEFT JOIN HighValueSuppliers hv ON hv.s_suppkey IN (
    SELECT DISTINCT l.l_suppkey
    FROM lineitem l
    WHERE l.l_orderkey = ro.o_orderkey
)
WHERE ro.o_orderstatus IN ('O', 'F')
ORDER BY ro.o_totalprice DESC, ro.o_orderdate ASC;
