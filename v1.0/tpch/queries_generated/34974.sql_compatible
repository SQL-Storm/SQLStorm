
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 0 AS level
    FROM supplier
    WHERE s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > sh.s_acctbal
),
OrderSummary AS (
    SELECT o.o_orderkey, SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue,
           COUNT(DISTINCT o.o_custkey) AS customer_count
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    WHERE o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1998-01-01'
    GROUP BY o.o_orderkey
),
EnhancedCustomer AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal,
           CASE WHEN c.c_acctbal IS NULL THEN 'Unknown'
                WHEN c.c_acctbal < 500 THEN 'Low Balance'
                ELSE 'High Balance' END AS balance_status
    FROM customer c
)
SELECT n.n_name AS nation_name, 
       SUM(os.total_revenue) AS total_revenue,
       COUNT(DISTINCT ec.c_custkey) AS distinct_customers,
       AVG(ec.c_acctbal) AS average_account_balance,
       COUNT(DISTINCT sh.s_suppkey) AS total_suppliers,
       STRING_AGG(DISTINCT ec.balance_status, ', ') AS balance_statuses 
FROM nation n
LEFT JOIN EnhancedCustomer ec ON n.n_nationkey = ec.c_nationkey
LEFT JOIN OrderSummary os ON ec.c_custkey = os.customer_count
LEFT JOIN SupplierHierarchy sh ON ec.c_nationkey = sh.s_nationkey
WHERE n.n_name IS NOT NULL 
GROUP BY n.n_name
HAVING SUM(os.total_revenue) > 100000
ORDER BY total_revenue DESC
LIMIT 10;
