
WITH ranked_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderdate,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS price_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= DATEADD(year, -1, '1998-10-01')
),
popular_parts AS (
    SELECT 
        ps.ps_partkey,
        SUM(l.l_quantity) AS total_sold,
        AVG(ps.ps_supplycost) AS avg_cost
    FROM 
        partsupp ps
    JOIN 
        lineitem l ON ps.ps_partkey = l.l_partkey
    GROUP BY 
        ps.ps_partkey
    HAVING 
        SUM(l.l_quantity) > 1000
),
distinct_suppliers AS (
    SELECT 
        s.s_suppkey,
        COUNT(DISTINCT p.p_partkey) AS supplied_parts
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey
    HAVING 
        COUNT(DISTINCT p.p_partkey) >= 5
)
SELECT 
    r.r_name,
    CASE 
        WHEN COUNT(DISTINCT o.o_orderkey) = 0 THEN 'No Orders'
        ELSE CONCAT('Total Orders: ', COUNT(DISTINCT o.o_orderkey), ', Avg Price: ', AVG(o.o_totalprice))
    END AS order_info,
    SUM(CASE WHEN l.l_discount > 0 THEN l.l_extendedprice * l.l_discount ELSE 0 END) AS total_discounted_sales,
    MAX(p.total_sold) AS max_part_sales,
    s.s_name,
    COALESCE(SUM(CASE WHEN l.l_returnflag = 'R' THEN l.l_quantity ELSE 0 END), 0) AS total_returns,
    RANK() OVER (ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount))) AS revenue_rank
FROM 
    region r
LEFT JOIN 
    nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN 
    customer c ON n.n_nationkey = c.c_nationkey
LEFT JOIN 
    orders o ON c.c_custkey = o.o_custkey
LEFT JOIN 
    lineitem l ON o.o_orderkey = l.l_orderkey
LEFT JOIN 
    popular_parts p ON p.ps_partkey = l.l_partkey
LEFT JOIN 
    distinct_suppliers ds ON ds.s_suppkey = l.l_suppkey
LEFT JOIN 
    supplier s ON ds.s_supkey = s.s_suppkey
GROUP BY 
    r.r_name, s.s_name
ORDER BY 
    order_info DESC, total_discounted_sales DESC
LIMIT 10;
