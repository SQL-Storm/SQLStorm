
WITH RECURSIVE RankedSuppliers AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        ROW_NUMBER() OVER (PARTITION BY s.n_nationkey ORDER BY s.s_acctbal DESC) AS rank
    FROM
        supplier s
    JOIN
        nation n ON s.s_nationkey = n.n_nationkey
),
CustomerOrders AS (
    SELECT
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent,
        MAX(o.o_orderdate) AS last_order_date
    FROM
        customer c
    LEFT JOIN
        orders o ON c.c_custkey = o.o_custkey
    WHERE
        o.o_orderstatus = 'F'
    GROUP BY
        c.c_custkey
),
PartSupplierDetails AS (
    SELECT
        p.p_partkey,
        SUM(ps.ps_availqty) AS total_available,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM
        part p
    JOIN
        partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY
        p.p_partkey
)
SELECT
    r.r_name,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    AVG(co.total_spent) AS avg_customer_spent,
    SUM(p.total_available) AS total_available_parts,
    MAX(rs.s_acctbal) AS highest_supplier_balance
FROM
    region r
LEFT JOIN
    nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN
    customer c ON n.n_nationkey = c.c_nationkey
LEFT JOIN
    CustomerOrders co ON c.c_custkey = co.c_custkey
LEFT JOIN
    PartSupplierDetails p ON p.p_partkey IN (
        SELECT DISTINCT ps.ps_partkey
        FROM partsupp ps
        JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
        WHERE s.s_acctbal > 10000
    )
LEFT JOIN
    RankedSuppliers rs ON rs.s_suppkey IN (
        SELECT ps.ps_suppkey
        FROM partsupp ps
        WHERE ps.ps_availqty < (
            SELECT AVG(ps2.ps_availqty)
            FROM partsupp ps2
        )
    )
WHERE
    r.r_name IS NOT NULL
GROUP BY
    r.r_name
ORDER BY
    customer_count DESC, avg_customer_spent DESC;
