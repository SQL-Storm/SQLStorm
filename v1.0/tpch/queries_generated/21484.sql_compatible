
WITH RecursiveSupp AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        r.r_name AS region_name,
        n.n_name AS nation_name,
        ROW_NUMBER() OVER (PARTITION BY r.r_regionkey ORDER BY s.s_acctbal DESC) AS rank
    FROM 
        supplier s
    JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    JOIN 
        region r ON n.n_regionkey = r.r_regionkey
    WHERE 
        s.s_acctbal IS NOT NULL AND s.s_acctbal > 0
),
TopSuppliers AS (
    SELECT 
        rs.s_suppkey, 
        rs.s_name, 
        rs.s_acctbal, 
        rs.region_name,
        CASE 
            WHEN rs.rank <= 2 THEN 'Top Supplier'
            ELSE 'Other Supplier'
        END AS supplier_tier
    FROM 
        RecursiveSupp rs
),
CustomerPurchases AS (
    SELECT 
        c.c_custkey, 
        c.c_name, 
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS total_orders
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    cp.c_custkey,
    cp.c_name,
    COALESCE(tp.supp_count, 0) AS supplier_count,
    cp.total_spent,
    CASE
        WHEN cp.total_spent > 1000 THEN 'High Value'
        WHEN cp.total_spent BETWEEN 500 AND 1000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS customer_value_segment,
    STRING_AGG(DISTINCT tp.region_name, ', ') AS regions_supplied
FROM 
    CustomerPurchases cp
LEFT JOIN 
    (SELECT c.c_custkey, COUNT(DISTINCT ts.s_suppkey) AS supp_count
     FROM customer c
     JOIN lineitem l ON c.c_custkey IN (
         SELECT DISTINCT o.o_custkey FROM orders o WHERE o.o_orderstatus = 'F'
     )
     JOIN partsupp ps ON l.l_partkey = ps.ps_partkey
     JOIN TopSuppliers ts ON ps.ps_suppkey = ts.s_suppkey
     GROUP BY c.c_custkey) tp ON cp.c_custkey = tp.c_custkey
WHERE 
    cp.total_orders > 0
GROUP BY 
    cp.c_custkey, cp.c_name, cp.total_spent
HAVING 
    COUNT(CASE WHEN cp.total_spent IS NULL THEN 1 END) = 0
ORDER BY 
    cp.total_spent DESC
LIMIT 10;
