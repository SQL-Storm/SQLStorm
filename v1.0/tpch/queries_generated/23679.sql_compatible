
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        RANK() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    WHERE p.p_size = (SELECT MAX(p2.p_size) FROM part p2 WHERE p2.p_mfgr = p.p_mfgr)
),
TopSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal IS NOT NULL
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 1000
),
OrderSummary AS (
    SELECT 
        o.o_orderkey,
        COUNT(l.l_orderkey) AS total_lines,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price
    FROM orders o
    LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus = 'O' AND l.l_returnflag = 'N'
    GROUP BY o.o_orderkey
),
CustomerStats AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL AND c.c_mktsegment IN ('BUILDING', 'FURNITURE')
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    r.p_name,
    r.p_retailprice,
    COALESCE(ts.total_supply_cost, 0) AS supply_cost,
    os.total_lines,
    cs.order_count,
    cs.total_spent
FROM RankedParts r
FULL OUTER JOIN TopSuppliers ts ON r.p_partkey = ts.s_suppkey
FULL OUTER JOIN OrderSummary os ON os.o_orderkey = (SELECT o.o_orderkey FROM orders o ORDER BY o.o_orderdate DESC LIMIT 1)
LEFT JOIN CustomerStats cs ON cs.order_count = (SELECT MAX(order_count) FROM CustomerStats)
WHERE 
    (r.price_rank <= 3 OR r.p_retailprice IS NULL) AND 
    (ts.total_supply_cost IS NOT NULL OR os.total_lines IS NULL)
ORDER BY r.p_retailprice DESC, cs.total_spent ASC;
