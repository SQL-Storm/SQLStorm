WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 0 AS level
    FROM supplier
    WHERE s_suppkey = 1 
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5 
),
TotalCost AS (
    SELECT 
        p.p_partkey,
        SUM(ps.ps_supplycost * l.l_quantity) AS total_supply_cost,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey
    GROUP BY p.p_partkey
),
FilteredOrders AS (
    SELECT 
        DISTINCT o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY o.o_orderdate DESC) AS order_rn
    FROM orders o
    WHERE o.o_orderdate >= DATE '1997-01-01' 
      AND o.o_orderstatus IN ('O', 'P')
),
JoinResults AS (
    SELECT 
        n.n_name,
        COALESCE(SUM(tc.total_supply_cost), 0) AS total_supply_cost,
        COALESCE(SUM(tc.total_revenue), 0) AS total_revenue,
        COUNT(DISTINCT fo.o_orderkey) AS order_count
    FROM nation n
    LEFT JOIN TotalCost tc ON n.n_nationkey IN (SELECT s_nationkey FROM supplier WHERE s_suppkey IN (SELECT s_suppkey FROM SupplierHierarchy))
    LEFT JOIN FilteredOrders fo ON fo.o_orderkey = tc.p_partkey
    GROUP BY n.n_name
)
SELECT 
    n_name,
    SUM(total_supply_cost) AS total_cost,
    SUM(total_revenue) AS total_revenue,
    AVG(total_revenue) OVER (PARTITION BY n_name ORDER BY total_supply_cost DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_avg_revenue
FROM JoinResults
GROUP BY n_name
HAVING SUM(total_revenue) > 10000 
ORDER BY total_cost DESC;