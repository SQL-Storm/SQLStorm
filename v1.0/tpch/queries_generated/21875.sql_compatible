
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_mfgr,
        p.p_brand,
        p.p_type,
        p.p_size,
        p.p_retailprice,
        p.p_comment,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM 
        part p
    WHERE 
        p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2 WHERE p2.p_size IS NOT NULL)
),
SupplierDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_nationkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name, s.s_nationkey
    HAVING 
        SUM(ps.ps_supplycost * ps.ps_availqty) > (SELECT AVG(ps2.ps_supplycost * ps2.ps_availqty) FROM partsupp ps2)
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        SUM(o.o_totalprice) > 1000 AND COUNT(o.o_orderkey) > 5
)
SELECT 
    n.n_name,
    nd.part_info,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    AVG(sp.total_supply_cost) AS average_supply_cost,
    SUM(lp.l_extendedprice) AS total_lineitem_revenue
FROM 
    nation n
JOIN 
    (SELECT 
        r.r_regionkey, 
        r.r_name, 
        CONCAT(pp.p_name, '|', pp.p_type) AS part_info 
     FROM 
        region r 
     JOIN 
        RankedParts pp ON r.r_regionkey IN (SELECT DISTINCT n.n_regionkey FROM nation n WHERE n.n_nationkey = pp.p_partkey)
    ) AS nd ON n.n_regionkey = nd.r_regionkey
LEFT JOIN 
    SupplierDetails sp ON n.n_nationkey = sp.s_nationkey
LEFT JOIN 
    lineitem lp ON lp.l_partkey IN (SELECT p.p_partkey FROM RankedParts p WHERE price_rank <= 3)
LEFT JOIN 
    CustomerOrders cust ON cust.c_custkey = lp.l_custkey
WHERE 
    n.n_name IS NOT NULL
GROUP BY 
    n.n_name, nd.part_info
HAVING 
    COUNT(DISTINCT c.c_custkey) < (SELECT COUNT(*) FROM customer) / 10
ORDER BY 
    total_lineitem_revenue DESC;
