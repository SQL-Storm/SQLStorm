
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_suppkey IN (SELECT DISTINCT ps_suppkey FROM partsupp WHERE ps_availqty > 0)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
CustomerOrderStats AS (
    SELECT c.c_custkey, c.c_name, COUNT(DISTINCT o.o_orderkey) AS order_count, 
           SUM(o.o_totalprice) AS total_spent, AVG(o.o_totalprice) AS avg_order_value
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
HighValueParts AS (
    SELECT ps.ps_partkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_value
    FROM partsupp ps
    GROUP BY ps.ps_partkey
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 1000000
)
SELECT 
    p.p_name,
    p.p_mfgr,
    COALESCE(sp.level, 0) AS supplier_level,
    c.c_name,
    co.order_count,
    co.total_spent,
    ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY co.total_spent DESC) AS rank,
    CASE 
        WHEN co.total_spent IS NULL THEN 'No Orders'
        ELSE 'Has Orders'
    END AS order_status
FROM part p
LEFT JOIN HighValueParts hvp ON p.p_partkey = hvp.ps_partkey
LEFT JOIN SupplierHierarchy sp ON sp.s_nationkey = p.p_partkey 
LEFT JOIN CustomerOrderStats co ON co.c_custkey IN (SELECT DISTINCT o.o_custkey FROM orders o JOIN lineitem li ON o.o_orderkey = li.l_orderkey WHERE li.l_partkey = p.p_partkey)
WHERE p.p_retailprice BETWEEN 50 AND 200
GROUP BY 
    p.p_name, 
    p.p_mfgr, 
    sp.level, 
    c.c_name, 
    co.order_count, 
    co.total_spent
ORDER BY co.total_spent DESC NULLS LAST, p.p_name;
