WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank_price
    FROM orders o
    WHERE o.o_orderdate >= DATE '1996-01-01' AND o.o_orderdate < DATE '1997-01-01'
), 
SupplierStats AS (
    SELECT 
        s.s_nationkey,
        COUNT(DISTINCT ps.ps_suppkey) AS unique_suppliers,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS avg_cost,
        CASE 
            WHEN SUM(ps.ps_availqty) > 1000 THEN 'High Availability' 
            WHEN SUM(ps.ps_availqty) BETWEEN 500 AND 1000 THEN 'Moderate Availability'
            ELSE 'Low Availability' 
        END AS availability_status
    FROM partsupp ps
    INNER JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY s.s_nationkey
), 
CustomerBalances AS (
    SELECT 
        c.c_custkey,
        SUM(CASE WHEN o.o_orderstatus = 'O' THEN o.o_totalprice ELSE 0 END) AS total_orders,
        (c.c_acctbal + COALESCE((SELECT SUM(l.l_discount) FROM lineitem l WHERE l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = c.c_custkey)), 0)) AS adjusted_balance
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_acctbal
)
SELECT 
    r.r_name,
    COALESCE(SUM(ss.unique_suppliers), 0) AS total_suppliers,
    COALESCE(SUM(ss.total_available), 0) AS total_parts_available,
    COUNT(DISTINCT cb.c_custkey) AS total_customers,
    AVG(cb.adjusted_balance) AS avg_adjusted_balance,
    MAX(ro.o_orderdate) AS last_order_date,
    COUNT(DISTINCT ro.o_orderkey) FILTER (WHERE ro.rank_price = 1) AS top_orders_count
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN SupplierStats ss ON n.n_nationkey = ss.s_nationkey
LEFT JOIN CustomerBalances cb ON n.n_nationkey = cb.c_custkey
LEFT JOIN RankedOrders ro ON ro.o_orderkey IS NOT NULL
WHERE r.r_name IS NOT NULL AND r.r_comment NOT LIKE '%example%'
GROUP BY r.r_name
HAVING COUNT(DISTINCT cb.c_custkey) > 5 AND MAX(ro.o_orderdate) IS NOT NULL
ORDER BY avg_adjusted_balance DESC NULLS LAST;