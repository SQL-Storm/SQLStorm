WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
QualifiedOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate, c.c_mktsegment, c.c_name
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE o.o_totalprice > 1000 AND c.c_mktsegment IN ('BUILDING', 'CONSTRUCTION')
),
AggregateSales AS (
    SELECT l.l_partkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM lineitem l
    WHERE l.l_shipdate BETWEEN '1996-01-01' AND '1996-12-31'
    GROUP BY l.l_partkey
)
SELECT 
    p.p_name,
    p.p_brand,
    p.p_retailprice,
    COALESCE(asales.total_sales, 0) AS total_sales,
    sh.level AS supplier_level,
    CASE 
        WHEN sh.level IS NOT NULL THEN 'Qualified Supplier'
        ELSE 'Unqualified Supplier'
    END AS supplier_status,
    COUNT(DISTINCT qo.o_orderkey) AS qualified_order_count
FROM part p
LEFT JOIN AggregateSales asales ON p.p_partkey = asales.l_partkey
LEFT JOIN SupplierHierarchy sh ON p.p_mfgr = sh.s_name
LEFT JOIN QualifiedOrders qo ON p.p_partkey = qo.o_orderkey
WHERE p.p_retailprice > (SELECT AVG(p_retailprice) FROM part)
GROUP BY p.p_name, p.p_brand, p.p_retailprice, sh.level
ORDER BY total_sales DESC, supplier_status, p.p_name;