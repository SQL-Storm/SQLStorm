
WITH RankedOrders AS (
    SELECT 
        o_orderkey,
        o_custkey,
        o_orderdate,
        RANK() OVER (PARTITION BY o_custkey ORDER BY o_orderdate DESC) AS rank_order
    FROM 
        orders
),
SuppliersWithHighCost AS (
    SELECT 
        ps.suppkey,
        SUM(ps.ps_supplycost) AS total_supplycost
    FROM 
        partsupp ps
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        ps.suppkey
    HAVING 
        SUM(ps.ps_supplycost) > 10000
),
CustomerOrderStats AS (
    SELECT 
        c.c_custkey,
        COUNT(o.o_orderkey) AS order_count,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_spent,
        AVG(l.l_quantity) AS avg_quantity
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        c.c_custkey
)
SELECT 
    COALESCE(cosc.c_custkey, 0) AS customer_key,
    COALESCE(cosc.order_count, 0) AS order_count,
    cosc.total_spent,
    ROW_NUMBER() OVER (ORDER BY cosc.total_spent DESC) AS spending_rank,
    r.r_name AS region_name,
    CASE 
        WHEN s.total_supplycost IS NOT NULL THEN 'High Cost Supplier'
        ELSE 'No Info'
    END AS supplier_status
FROM 
    CustomerOrderStats cosc
LEFT JOIN 
    nation n ON cosc.c_custkey = n.n_nationkey
LEFT JOIN 
    region r ON n.n_regionkey = r.r_regionkey
LEFT JOIN 
    SuppliersWithHighCost s ON s.suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey IN (SELECT p.p_partkey FROM part p WHERE p.p_size BETWEEN 1 AND 20))
WHERE 
    cosc.order_count > (
        SELECT AVG(order_count) 
        FROM CustomerOrderStats
    )
ORDER BY 
    cosc.total_spent DESC
LIMIT 100;
