WITH RECURSIVE SupplierHierachy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierachy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
RankedLineItems AS (
    SELECT l.l_orderkey, 
           l.l_partkey, 
           l.l_suppkey, 
           l.l_quantity, 
           l.l_extendedprice, 
           DENSE_RANK() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS price_rank
    FROM lineitem l
    WHERE l.l_returnflag = 'N' AND l.l_shipdate > '1996-01-01'
),
AggregatedLineItems AS (
    SELECT li.l_orderkey,
           SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_price,
           COUNT(li.l_partkey) AS total_parts
    FROM RankedLineItems li
    WHERE li.price_rank <= 5
    GROUP BY li.l_orderkey
)
SELECT r.r_name, 
       AVG(agg.total_price) AS avg_total_price, 
       COUNT(DISTINCT c.c_custkey) AS unique_customers,
       STRING_AGG(DISTINCT CONCAT(s.s_name, ' (', s.s_acctbal, ')'), '; ') AS suppliers_info
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN customer c ON s.s_nationkey = c.c_nationkey
LEFT JOIN AggregatedLineItems agg ON c.c_custkey IN (SELECT o.o_custkey FROM orders o WHERE o.o_orderkey IN (SELECT l.l_orderkey FROM lineitem l WHERE l.l_partkey = agg.l_orderkey))
GROUP BY r.r_name
HAVING AVG(agg.total_price) > COALESCE((SELECT AVG(total_price) FROM AggregatedLineItems), 0) * 0.5 
   AND COUNT(DISTINCT s.s_suppkey) > 3 
   AND NULLIF(STRING_AGG(s.s_name, ', '), '') IS NOT NULL
ORDER BY avg_total_price DESC
LIMIT 10 OFFSET 5;