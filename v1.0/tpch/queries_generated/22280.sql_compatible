
WITH RECURSIVE parts AS (
    SELECT p_partkey, p_name, p_mfgr, p_retailprice, 
           (SELECT COUNT(DISTINCT ps_suppkey) FROM partsupp WHERE ps_partkey = p.p_partkey) AS supplier_count
    FROM part p
    WHERE p_size IS NOT NULL
    UNION ALL
    SELECT p.p_partkey, p.p_name, p.p_mfgr, p.p_retailprice,
           (SELECT COUNT(DISTINCT ps_suppkey) FROM partsupp WHERE ps_partkey = p.p_partkey) 
    FROM part p 
    JOIN parts pt ON p.p_partkey = pt.p_partkey
),
customer_summary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey 
    GROUP BY c.c_custkey, c.c_name
),
supplier_ranked AS (
    SELECT s.s_suppkey, s.s_name, 
           DENSE_RANK() OVER (PARTITION BY n.n_name ORDER BY SUM(ps.ps_supplycost) DESC) AS rank,
           SUM(ps.ps_supplycost) AS total_supply_cost
    FROM supplier s
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, n.n_name
)
SELECT 
    cs.c_name,
    cs.total_spent,
    COALESCE(pr.supplier_count, 0) AS unique_parts,
    COALESCE(sr.rank, 0) AS supplier_rank,
    pr.p_retailprice - COALESCE(NULLIF(cs.total_spent, 0), 1) AS price_adjusted,
    CASE 
        WHEN pr.p_mfgr LIKE '%A%' THEN 'Manufacturer A'
        ELSE 'Other Manufacturers'
    END AS manufacturer_group
FROM customer_summary cs
FULL OUTER JOIN parts pr ON cs.total_spent > pr.p_retailprice
LEFT JOIN supplier_ranked sr ON sr.total_supply_cost > cs.total_spent
WHERE EXISTS (SELECT 1 
              FROM lineitem li 
              WHERE li.l_orderkey = (
                  SELECT o.o_orderkey 
                  FROM orders o 
                  WHERE o.o_custkey = cs.c_custkey 
                  LIMIT 1
              ) 
              AND li.l_returnflag = 'R')
ORDER BY cs.total_spent DESC, supplier_rank;
