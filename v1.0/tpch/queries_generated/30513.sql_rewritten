WITH RECURSIVE supply_chain AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, ps.ps_availqty, ps.ps_supplycost,
           ROW_NUMBER() OVER (PARTITION BY s.s_nationkey ORDER BY ps.ps_supplycost DESC) AS rank
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE ps.ps_availqty > 0

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.n_nationkey, ps.ps_availqty + sc.ps_availqty, 
           (ps.ps_supplycost + (SELECT AVG(ps2.ps_supplycost) FROM partsupp ps2 WHERE ps2.ps_partkey = ps.ps_partkey))/2 AS ps_supplycost,
           ROW_NUMBER() OVER (PARTITION BY s.n_nationkey ORDER BY ps.ps_supplycost DESC) AS rank
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN supply_chain sc ON s.s_nationkey = sc.s_nationkey
    WHERE ps.ps_availqty > 0 AND rank < 5
), order_summary AS (
    SELECT o.o_orderkey, o.o_orderdate, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(DISTINCT o.o_custkey) AS unique_customers
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate >= '1997-01-01'
    GROUP BY o.o_orderkey, o.o_orderdate
), nation_revenue AS (
    SELECT n.n_nationkey, n.n_name, SUM(os.total_revenue) AS total_revenue
    FROM order_summary os
    JOIN customer c ON os.o_orderkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    GROUP BY n.n_nationkey, n.n_name
)
SELECT r.r_name, COALESCE(nr.total_revenue, 0) AS total_revenue, 
       CASE 
          WHEN nr.total_revenue IS NULL THEN 'No Revenue'
          ELSE 'Has Revenue'
       END AS revenue_status
FROM region r
LEFT JOIN nation_revenue nr ON r.r_regionkey = nr.n_nationkey
WHERE r.r_name LIKE '%East%'
ORDER BY total_revenue DESC
LIMIT 10;