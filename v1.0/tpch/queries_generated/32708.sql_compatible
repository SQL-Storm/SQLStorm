
WITH RECURSIVE supply_chain AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        ROW_NUMBER() OVER (PARTITION BY s.s_suppkey ORDER BY ps.ps_supplycost DESC) AS row_num
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    WHERE 
        ps.ps_availqty > 0
),
top_suppliers AS (
    SELECT 
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_name
    ORDER BY 
        total_supply_cost DESC
    LIMIT 10
),
date_range AS (
    SELECT 
        MIN(o.o_orderdate) AS start_date,
        MAX(o.o_orderdate) AS end_date
    FROM 
        orders o
),
high_value_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        COALESCE(SUM(NULLIF(l.l_discount, 0) * l.l_extendedprice), 0) AS discounted_value,
        COUNT(DISTINCT l.l_partkey) AS item_count,
        AVG(l.l_quantity) OVER (PARTITION BY o.o_orderkey) AS avg_quantity
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_totalprice > 1000
    GROUP BY 
        o.o_orderkey, o.o_totalprice
),
region_summary AS (
    SELECT 
        n.n_name,
        r.r_name,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_sales
    FROM 
        nation n
    JOIN 
        region r ON n.n_regionkey = r.r_regionkey
    LEFT JOIN 
        customer c ON c.c_nationkey = n.n_nationkey
    LEFT JOIN 
        orders o ON o.o_custkey = c.c_custkey
    LEFT JOIN 
        lineitem li ON li.l_orderkey = o.o_orderkey
    GROUP BY 
        n.n_name, r.r_name
)
SELECT 
    r.r_name,
    rv.r_value,
    tt.total_supply_cost,
    hs.o_orderkey,
    hs.discounted_value,
    hs.item_count,
    hs.avg_quantity
FROM 
    region_summary r
JOIN 
    (SELECT * FROM top_suppliers) tt ON r.r_name = tt.s_name
JOIN 
    high_value_orders hs ON hs.o_orderkey = (SELECT max(o.o_orderkey) FROM orders o WHERE o.o_orderdate BETWEEN (SELECT start_date FROM date_range) AND (SELECT end_date FROM date_range))
WHERE 
    r.order_count IS NOT NULL
ORDER BY 
    r.order_count DESC, tt.total_supply_cost DESC;
