
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.nationkey, 
           1 AS level, 
           CONCAT(s.s_name, ' (Level 1)') AS display_name
    FROM supplier s
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.nationkey,
           sh.level + 1, 
           CONCAT(s.s_name, ' (Level ', sh.level + 1, ')')
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.nationkey
    WHERE sh.level < 3
),
part_price AS (
    SELECT p.p_partkey, p.p_name, 
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
filtered_orders AS (
    SELECT o.o_orderkey, o.o_totalprice, 
           COUNT(DISTINCT l.l_orderkey) OVER (PARTITION BY o.o_orderkey) AS lineitem_count
    FROM orders o
    LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate > '1997-01-01' OR o.o_orderstatus = 'F'
),
national_comparison AS (
    SELECT n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count,
           PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY c.c_acctbal) AS median_acctbal
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.nationkey
    LEFT JOIN customer c ON s.nationkey = c.c_nationkey
    GROUP BY n.n_name
)
SELECT sh.display_name, pp.p_name, 
       CASE 
           WHEN n.median_acctbal IS NULL THEN 'N/A'
           ELSE ROUND(n.median_acctbal, 2)
       END AS median_balance,
       fo.lineitem_count, 
       COALESCE(pp.total_supply_cost, 0) AS total_cost
FROM supplier_hierarchy sh
FULL OUTER JOIN part_price pp ON pp.p_partkey = 
    (SELECT ps.ps_partkey 
     FROM partsupp ps 
     WHERE ps.ps_availqty > 0 
     ORDER BY ps.ps_supplycost DESC 
     LIMIT 1)
LEFT JOIN filtered_orders fo ON fo.o_orderkey = 
    (SELECT MIN(o.o_orderkey) 
     FROM orders o 
     WHERE o.o_totalprice > 100 OR o.o_orderstatus IS NULL)
JOIN national_comparison n ON n.supplier_count = (SELECT COUNT(*) FROM supplier)
WHERE sh.level < 3 AND n.supplier_count < 5 
ORDER BY sh.level, total_cost DESC;
