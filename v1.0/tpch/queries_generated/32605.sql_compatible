
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, NULL AS parent_suppkey
    FROM supplier s
    WHERE s.s_nationkey = 1
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.s_suppkey AS parent_suppkey
    FROM supplier s
    JOIN SupplierHierarchy sh ON sh.s_suppkey = s.s_suppkey
),
OrderStats AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(DISTINCT o.o_orderkey) OVER (PARTITION BY o.o_orderstatus) AS order_count
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate BETWEEN DATE '1996-01-01' AND DATE '1996-12-31'
    GROUP BY o.o_orderkey
),
SuppliersWithDetails AS (
    SELECT s.s_suppkey, s.s_name, r.r_name, n.n_name, COUNT(ps.ps_partkey) AS part_count
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    GROUP BY s.s_suppkey, s.s_name, r.r_name, n.n_name
)
SELECT sh.s_name AS supplier_name, 
       COALESCE(os.total_revenue, 0) AS total_revenue,
       COALESCE(os.order_count, 0) AS total_orders, 
       CASE 
           WHEN swd.part_count IS NOT NULL THEN 'Active Supplier'
           ELSE 'Inactive Supplier' END AS supplier_status
FROM SupplierHierarchy sh
LEFT JOIN OrderStats os ON sh.s_suppkey = os.o_orderkey
LEFT JOIN SuppliersWithDetails swd ON sh.s_suppkey = swd.s_suppkey
WHERE sh.s_acctbal > 10000
ORDER BY supplier_status, total_revenue DESC;
