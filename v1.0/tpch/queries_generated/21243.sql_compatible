
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        c.c_name,
        ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY o.o_totalprice DESC) AS rn
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
    WHERE 
        o.o_orderdate > DATEADD(year, -1, '1998-10-01') 
        AND o.o_orderstatus = 'O'
), 

SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        SUM(ps.ps_supplycost) AS total_supplycost
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey
    HAVING 
        SUM(ps.ps_availqty) > 100 
), 

TopSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        supplier s
    JOIN 
        lineitem l ON s.s_suppkey = l.l_suppkey
    WHERE 
        l.l_returnflag = 'N'
    GROUP BY 
        s.s_suppkey, s.s_name
    ORDER BY 
        total_revenue DESC
    LIMIT 5
)

SELECT 
    ro.o_orderkey,
    ro.o_orderdate,
    ro.c_name,
    p.p_name,
    COALESCE(sp.total_supplycost, 0) AS total_supply_cost,
    ts.total_revenue,
    CASE 
        WHEN ts.total_revenue IS NULL THEN 'No Revenue'
        WHEN ts.total_revenue > 10000 THEN 'High Revenue'
        ELSE 'Normal Revenue'
    END AS revenue_category
FROM 
    RankedOrders ro
LEFT JOIN 
    lineitem l ON ro.o_orderkey = l.l_orderkey
INNER JOIN 
    part p ON l.l_partkey = p.p_partkey
LEFT JOIN 
    SupplierParts sp ON p.p_partkey = sp.ps_partkey
LEFT JOIN 
    TopSuppliers ts ON l.l_suppkey = ts.s_suppkey
WHERE 
    ro.rn <= 3 
    AND p.p_retailprice IS NOT NULL
ORDER BY 
    ro.o_orderdate DESC, 
    total_supply_cost DESC;
