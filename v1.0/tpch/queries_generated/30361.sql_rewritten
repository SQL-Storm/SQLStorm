WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (
        SELECT AVG(s2.s_acctbal) FROM supplier s2
    )
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
TotalSales AS (
    SELECT c.c_custkey, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
),
RankedSuppliers AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, ps.ps_availqty, 
           RANK() OVER (PARTITION BY ps.ps_partkey ORDER BY ps.ps_supplycost DESC) AS rnk
    FROM partsupp ps
),
PartDetails AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, 
           COALESCE(SUM(l.l_quantity), 0) AS total_quantity_sold
    FROM part p
    LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey AND l.l_shipdate >= '1996-01-01'
    GROUP BY p.p_partkey, p.p_name, p.p_brand, p.p_retailprice
)
SELECT r.r_name, pd.p_name, pd.total_quantity_sold,
       t.total_spent,
       CASE 
           WHEN t.total_spent IS NULL THEN 'No Orders'
           ELSE 'Has Orders'
       END AS order_status,
       sh.level AS supplier_level
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
JOIN supplier s ON n.n_nationkey = s.s_nationkey
JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
JOIN RankedSuppliers rs ON s.s_suppkey = rs.ps_suppkey
JOIN PartDetails pd ON rs.ps_partkey = pd.p_partkey
LEFT JOIN TotalSales t ON s.s_nationkey = t.c_custkey
WHERE pd.total_quantity_sold > 100
ORDER BY r.r_name, pd.p_name;