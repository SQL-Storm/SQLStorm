
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, CAST(NULL AS integer) AS parent_suppkey
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2 WHERE s2.s_acctbal IS NOT NULL)

    UNION ALL

    SELECT s2.s_suppkey, s2.s_name, s2.s_acctbal, sh.s_suppkey
    FROM supplier_hierarchy sh
    JOIN supplier s2 ON sh.s_suppkey = s2.s_nationkey
    WHERE sh.s_acctbal > (SELECT AVG(s3.s_acctbal) FROM supplier s3 WHERE s3.s_acctbal IS NOT NULL)
),
part_supplier_info AS (
    SELECT p.p_partkey, p.p_name, AVG(ps.ps_supplycost) AS avg_supply_cost, 
           COUNT(DISTINCT ps.ps_suppkey) AS unique_suppliers,
           SUM(ps.ps_availqty) AS total_avail_qty
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
ranked_part AS (
    SELECT p.*, RANK() OVER (ORDER BY avg_supply_cost DESC) AS supply_rank
    FROM part_supplier_info p
    WHERE total_avail_qty > (SELECT AVG(total_avail_qty) FROM part_supplier_info)
),
overall_stats AS (
    SELECT COUNT(*) AS part_count, SUM(p_retailprice) AS total_retail_value
    FROM part
)
SELECT 
    n.n_name,
    sz.supp_status,
    r.p_partkey,
    r.p_name,
    r.avg_supply_cost, 
    r.unique_suppliers, 
    r.total_avail_qty,
    CASE
        WHEN r.supply_rank <= 10 THEN 'Top 10'
        WHEN r.supply_rank <= 20 THEN 'Top 20'
        ELSE 'Other'
    END AS rank_category,
    COALESCE(sh.s_name, 'No Parent') AS parent_supplier_name,
    os.part_count,
    os.total_retail_value
FROM ranked_part r
LEFT JOIN supplier_hierarchy sh ON r.p_partkey = sh.s_suppkey
JOIN nation n ON n.n_nationkey = (SELECT s_nationkey FROM supplier WHERE s_suppkey = ANY(sh.s_suppkey) LIMIT 1)
CROSS JOIN overall_stats os
LEFT JOIN (
    SELECT s.s_name, 
           CASE 
               WHEN SUM(s.s_acctbal) IS NULL THEN 'Inactive' 
               ELSE 'Active' 
           END AS supp_status
    FROM supplier s
    GROUP BY s.s_name
) sz ON r.p_partkey = sz.supp_status
WHERE r.avg_supply_cost BETWEEN (SELECT AVG(avg_supply_cost) FROM part_supplier_info) AND (SELECT MAX(avg_supply_cost) FROM part_supplier_info)
ORDER BY n.n_name, r.avg_supply_cost DESC;
