
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (
        SELECT AVG(s2.s_acctbal) 
        FROM supplier s2
        WHERE s2.s_nationkey = s.s_nationkey
    )
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
OrderSummary AS (
    SELECT o.o_orderkey, SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    WHERE li.l_returnflag = 'N'
    GROUP BY o.o_orderkey
),
NationStats AS (
    SELECT n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count, 
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY n.n_name
),
RevenueRanked AS (
    SELECT o.o_orderkey, os.total_revenue, 
           RANK() OVER (ORDER BY os.total_revenue DESC) AS revenue_rank
    FROM OrderSummary os
    JOIN orders o ON os.o_orderkey = o.o_orderkey
),
SupplierSummary AS (
    SELECT sh.s_name, n.n_name, sh.level, 
           ns.supplier_count, ns.total_supply_cost
    FROM SupplierHierarchy sh
    JOIN nation n ON sh.s_nationkey = n.n_nationkey
    JOIN NationStats ns ON n.n_name = ns.n_name
)
SELECT ss.s_name, ss.n_name, ss.level, 
       COALESCE(rr.total_revenue, 0) AS total_revenue, 
       COALESCE(rr.revenue_rank, 'NA') AS revenue_rank, 
       ss.supplier_count, 
       ss.total_supply_cost
FROM SupplierSummary ss
LEFT JOIN RevenueRanked rr ON ss.s_name = rr.o_orderkey
WHERE ss.supplier_count > 1 
AND ss.level > 1 
ORDER BY ss.n_name, ss.s_name;
