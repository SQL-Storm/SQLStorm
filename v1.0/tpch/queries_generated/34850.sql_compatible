
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3 AND s.s_acctbal < (SELECT AVG(s_acctbal) FROM supplier)
),
TopParts AS (
    SELECT p.p_partkey, p.p_name, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    WHERE l.l_shipdate >= '1996-01-01'
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_revenue DESC
    LIMIT 5
),
NationSummary AS (
    SELECT n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count,
           SUM(s.s_acctbal) AS total_balance
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    WHERE n.n_name IS NOT NULL
    GROUP BY n.n_name
),
CustomerOrderSummary AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count,
           SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 5000
)
SELECT n.n_name, ns.supplier_count, ns.total_balance,
       ps.p_name, ps.total_revenue,
       cus.c_name, cus.order_count, cus.total_spent
FROM NationSummary ns
FULL OUTER JOIN TopParts ps ON ns.supplier_count > 0
FULL OUTER JOIN CustomerOrderSummary cus ON ns.supplier_count < 3
WHERE ns.total_balance IS NOT NULL OR ps.total_revenue IS NOT NULL OR cus.total_spent IS NOT NULL
ORDER BY ns.n_name;
