
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_mfgr,
        p.p_brand,
        p.p_type,
        p.p_size,
        p.p_retailprice,
        p.p_comment,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn
    FROM part p
    WHERE p.p_size BETWEEN 1 AND 20
),

SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 5000
),

OrderSummary AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderdate,
        COUNT(l.l_orderkey) AS total_lines,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue
    FROM orders o
    LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= DATE '1997-01-01'
    GROUP BY o.o_orderkey, o.o_totalprice, o.o_orderdate
),

HighRevenueOrders AS (
    SELECT 
        os.o_orderkey,
        os.net_revenue,
        CASE 
            WHEN os.net_revenue > 10000 THEN 'High'
            WHEN os.net_revenue BETWEEN 5000 AND 10000 THEN 'Medium'
            ELSE 'Low'
        END AS revenue_class
    FROM OrderSummary os
)

SELECT 
    rp.p_name, 
    rp.p_brand, 
    rp.p_retailprice, 
    si.s_name, 
    ho.revenue_class,
    COALESCE(ho.net_revenue, 0) AS net_revenue
FROM RankedParts rp
LEFT JOIN SupplierInfo si ON rp.p_partkey = (
    SELECT ps.ps_partkey 
    FROM partsupp ps 
    WHERE ps.ps_supplycost = (
        SELECT MAX(ps2.ps_supplycost)
        FROM partsupp ps2 
        WHERE ps2.ps_partkey = rp.p_partkey
    )
)
LEFT JOIN HighRevenueOrders ho ON ho.o_orderkey = (
    SELECT l.l_orderkey 
    FROM lineitem l 
    WHERE l.l_partkey = rp.p_partkey 
    LIMIT 1
)
WHERE rp.rn = 1
ORDER BY rp.p_retailprice DESC, si.total_cost DESC;
