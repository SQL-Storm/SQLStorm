
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_address, s_nationkey, s_acctbal, s_comment, 0 AS level
    FROM supplier
    WHERE s_acctbal > 10000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_address, s.s_nationkey, s.s_acctbal, s.s_comment, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > 5000
),
RankedOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate,
           RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS status_rank
    FROM orders o
    WHERE o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1998-01-01'
),
CustomerOrderSummary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent,
           COUNT(o.o_orderkey) AS total_orders
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 5
),
PartSupplierSummary AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
FinalSummary AS (
    SELECT c.c_name, co.total_spent, ps.p_name, ps.total_cost,
           COALESCE(RANK() OVER (ORDER BY co.total_spent DESC), 0) AS customer_rank,
           COALESCE(RANK() OVER (ORDER BY ps.total_cost DESC), 0) AS part_rank
    FROM CustomerOrderSummary co
    JOIN PartSupplierSummary ps ON co.total_spent > ps.total_cost
    JOIN nation n ON co.c_custkey = n.n_nationkey
),
SupplierOperations AS (
    SELECT sh.s_name, sh.level, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM lineitem l
    JOIN SupplierHierarchy sh ON l.l_suppkey = sh.s_suppkey
    WHERE l.l_shipdate >= '1997-01-01'
    GROUP BY sh.s_name, sh.level
)
SELECT fs.c_name, fs.total_spent, fs.p_name, fs.total_cost,
       so.s_name, so.level, so.total_sales
FROM FinalSummary fs
JOIN SupplierOperations so ON fs.customer_rank = so.level
WHERE fs.total_spent IS NOT NULL AND fs.total_cost IS NOT NULL
ORDER BY fs.total_spent DESC, so.total_sales ASC;
