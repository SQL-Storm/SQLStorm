
WITH RECURSIVE PriceAnalysis AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        (ps.ps_availqty * ps.ps_supplycost) AS total_cost,
        0 AS level
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE 
        ps.ps_availqty > 0
    UNION ALL
    SELECT 
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        (ps.ps_availqty * ps.ps_supplycost) + pa.total_cost AS total_cost,
        level + 1
    FROM 
        PriceAnalysis pa
    JOIN 
        partsupp ps ON pa.p_partkey = ps.ps_partkey
    WHERE 
        ps.ps_availqty > 0 AND level < 5
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
SuppliersRanking AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        SUM(ps.ps_supplycost) AS total_supply_cost,
        RANK() OVER (ORDER BY SUM(ps.ps_supplycost) DESC) AS supplier_rank
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
)
SELECT 
    COUNT(*) AS total_records,
    co.c_name AS customer_name,
    pa.p_name AS part_name,
    sr.s_name AS supplier_name,
    co.total_spent AS total_customer_spent,
    sr.total_supply_cost AS total_supplier_cost,
    pa.total_cost AS part_total_cost
FROM 
    PriceAnalysis pa
INNER JOIN 
    CustomerOrders co ON pa.p_partkey = (
        SELECT ps.ps_partkey 
        FROM partsupp ps 
        ORDER BY ps.ps_availqty DESC 
        LIMIT 1
    )
LEFT JOIN 
    SuppliersRanking sr ON sr.supplier_rank = 1
WHERE 
    co.total_spent > 1000 AND 
    pa.total_cost IS NOT NULL
GROUP BY 
    co.c_name, pa.p_name, sr.s_name, co.total_spent, sr.total_supply_cost, pa.total_cost
ORDER BY 
    co.total_spent DESC, sr.total_supply_cost DESC;
