
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, NULL AS parent_suppkey
    FROM supplier s
    WHERE s.s_acctbal > 10000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.s_suppkey AS parent_suppkey
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_acctbal < sh.s_acctbal
    WHERE s.s_acctbal > 5000
), TopCustomers AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 100000
), PartSupplierInfo AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_available,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
), RankedParts AS (
    SELECT p.*, RANK() OVER (ORDER BY total_available DESC) AS rank
    FROM PartSupplierInfo p
), OrderDetails AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_quantity, l.l_extendedprice,
           o.o_orderdate, o.o_orderstatus,
           SUM(l.l_extendedprice * (1 - l.l_discount)) OVER (PARTITION BY l.l_orderkey) AS total_order_value
    FROM lineitem l
    JOIN orders o ON l.l_orderkey = o.o_orderkey
)
SELECT 
    c.c_name AS customer_name,
    s.s_name AS supplier_name,
    p.p_name AS part_name,
    r.total_available,
    od.total_order_value,
    CASE 
        WHEN od.o_orderstatus = 'O' THEN 'Order is Open'
        ELSE 'Order is Closed'
    END AS order_status,
    sh.parent_suppkey
FROM TopCustomers c
JOIN OrderDetails od ON od.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = c.c_custkey)
JOIN RankedParts p ON od.l_partkey = p.p_partkey
JOIN supplier s ON s.s_suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey = p.p_partkey)
LEFT JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
WHERE r.total_available IS NOT NULL AND s.s_acctbal > 10000
ORDER BY c.c_name, s.s_name, p.p_name;
