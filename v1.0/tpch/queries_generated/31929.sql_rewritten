WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal > 10000

    UNION ALL

    SELECT s.s_suppkey, s.s_name, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
    WHERE sh.level < 5
),
PartPrice AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice,
           ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY p.p_retailprice DESC) AS rn
    FROM part p
),
RecentOrders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_totalprice, o.o_orderdate,
           DATE_PART('year', cast('1998-10-01' as date)) - DATE_PART('year', o.o_orderdate) AS age
    FROM orders o
    WHERE o.o_orderstatus = 'O'
),
AggregatedSupplier AS (
    SELECT s.s_nationkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_nationkey
),
CustomerSegment AS (
    SELECT c.c_nationkey, c.c_mktsegment,
           SUM(o.o_totalprice) AS total_sales
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_nationkey, c.c_mktsegment
),
FinalReport AS (
    SELECT n.n_name, c.c_mktsegment, COALESCE(cs.total_sales, 0) AS total_sales,
           COALESCE(as.total_supply_cost, 0) AS total_supply_cost,
           ph.p_name, ph.p_retailprice
    FROM nation n
    LEFT JOIN CustomerSegment cs ON n.n_nationkey = cs.c_nationkey
    LEFT JOIN AggregatedSupplier as ON n.n_nationkey = as.s_nationkey
    LEFT JOIN PartPrice ph ON cs.c_mktsegment = ph.p_type
    WHERE ph.rn <= 5
)
SELECT r.n_name, fr.c_mktsegment, fr.total_sales, fr.total_supply_cost,
       COUNT(DISTINCT sh.s_suppkey) AS supplier_count
FROM FinalReport fr
LEFT JOIN SupplierHierarchy sh ON fr.n_name LIKE '%' || sh.s_name || '%'
GROUP BY r.n_name, fr.c_mktsegment, fr.total_sales, fr.total_supply_cost
HAVING SUM(fr.total_sales) > 1000000
ORDER BY r.n_name, fr.c_mktsegment;