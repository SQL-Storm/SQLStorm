
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT sp.s_suppkey, sp.s_name, sp.s_nationkey, sp.s_acctbal, sh.level + 1
    FROM supplier sp
    JOIN SupplierHierarchy sh ON sp.s_nationkey = sh.s_nationkey
    WHERE sp.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
),
MaxTotalPrice AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey
),
NationalSales AS (
    SELECT n.n_name, SUM(mt.total_price) AS total_sales
    FROM nation n
    LEFT JOIN MaxTotalPrice mt ON mt.o_orderkey IN (
        SELECT o.o_orderkey 
        FROM orders o
        JOIN customer c ON o.o_custkey = c.c_custkey 
        WHERE c.c_nationkey = n.n_nationkey
    )
    GROUP BY n.n_name
)
SELECT 
    s.s_name,
    CASE 
        WHEN sh.level > 1 THEN 'Intermediate Supplier'
        ELSE 'Top Supplier'
    END AS supplier_level,
    n.n_name AS nation_name,
    ns.total_sales,
    ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY ns.total_sales DESC) AS sales_rank
FROM SupplierHierarchy sh
JOIN supplier s ON sh.s_suppkey = s.s_suppkey
JOIN nation n ON s.s_nationkey = n.n_nationkey
LEFT JOIN NationalSales ns ON n.n_name = ns.n_name
WHERE sh.s_acctbal IS NOT NULL
GROUP BY s.s_name, sh.level, n.n_name, ns.total_sales
ORDER BY ns.total_sales DESC, s.s_name;
