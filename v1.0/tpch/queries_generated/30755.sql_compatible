
WITH RECURSIVE customer_totals AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
supplier_part_availability AS (
    SELECT 
        s.s_suppkey,
        COUNT(DISTINCT ps.ps_partkey) AS available_parts
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey
),
ranked_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank_status
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= DATE '1996-01-01'
),
nation_customer_summary AS (
    SELECT 
        n.n_name,
        COUNT(DISTINCT c.c_custkey) AS num_customers,
        COALESCE(SUM(ct.total_spent), 0) AS total_spent
    FROM 
        nation n
    LEFT JOIN 
        customer c ON n.n_nationkey = c.c_nationkey
    LEFT JOIN 
        customer_totals ct ON c.c_custkey = ct.c_custkey
    GROUP BY 
        n.n_name
)
SELECT 
    p.p_name,
    n.n_name AS nation,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
    COALESCE(supplier_availability.available_parts, 0) AS parts_available,
    CASE 
        WHEN SUM(l.l_extendedprice * (1 - l.l_discount)) > 100000 THEN 'High Revenue'
        ELSE 'Low Revenue'
    END AS revenue_category,
    STRING_AGG(DISTINCT CAST(o.o_orderkey AS TEXT), ', ') AS order_keys
FROM 
    part p
JOIN 
    lineitem l ON p.p_partkey = l.l_partkey
JOIN 
    orders o ON l.l_orderkey = o.o_orderkey
JOIN 
    customer c ON o.o_custkey = c.c_custkey
JOIN 
    nation n ON c.c_nationkey = n.n_nationkey
LEFT JOIN 
    supplier_part_availability supplier_availability ON supplier_availability.s_suppkey = l.l_suppkey
GROUP BY 
    p.p_name, n.n_name
HAVING 
    SUM(l.l_extendedprice * (1 - l.l_discount)) > (SELECT AVG(total_spent) FROM customer_totals)
ORDER BY 
    revenue DESC;
