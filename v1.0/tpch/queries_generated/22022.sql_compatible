
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > sh.s_acctbal
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
PartSupply AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_available, 
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supplycost,
           ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY SUM(ps.ps_supplycost) DESC) AS rank_per_type
    FROM part p
    INNER JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_type
),
AnnualSales AS (
    SELECT EXTRACT(YEAR FROM o.o_orderdate) AS sales_year, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_returnflag = 'N'
    GROUP BY sales_year
),
HighValueCustomers AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal
    FROM customer c
    WHERE c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)
)

SELECT 
    sh.level,
    c.c_name AS customer_name,
    o.order_count,
    p.p_name AS part_name,
    ps.total_available,
    ps.total_supplycost,
    COALESCE(asales.total_sales, 0) AS total_annual_sales,
    CASE
        WHEN c.c_acctbal IS NULL THEN 'No Account Balance'
        ELSE 'Has Balance'
    END AS account_status,
    CONCAT('Supplier: ', p.p_name, ' - ', s.s_name) AS supplier_details
FROM HighValueCustomers c
LEFT JOIN CustomerOrders o ON c.c_custkey = o.c_custkey
LEFT JOIN PartSupply ps ON ps.rank_per_type <= 5
LEFT JOIN supplier s ON s.s_nationkey = c.c_nationkey
JOIN SupplierHierarchy sh ON sh.s_suppkey = s.s_suppkey
LEFT JOIN AnnualSales asales ON EXTRACT(YEAR FROM DATE '1998-10-01') = asales.sales_year
ORDER BY sh.level DESC, o.order_count DESC, ps.total_supplycost DESC;
