
WITH RECURSIVE CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) IS NOT NULL

    UNION ALL

    SELECT c.c_custkey, c.c_name, COALESCE(SUM(o.o_totalprice), 0) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN CustomerOrders co ON c.c_custkey = co.c_custkey
    GROUP BY c.c_custkey, c.c_name
),
TopCustomers AS (
    SELECT c.c_custkey, c.c_name, co.total_spent,
           RANK() OVER (ORDER BY co.total_spent DESC) AS rank
    FROM CustomerOrders co
    JOIN customer c ON co.c_custkey = c.c_custkey
)
SELECT p.p_name, ps.ps_supplycost, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
FROM lineitem l
JOIN partsupp ps ON l.l_partkey = ps.ps_partkey
JOIN part p ON ps.ps_partkey = p.p_partkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
JOIN nation n ON s.s_nationkey = n.n_nationkey
JOIN TopCustomers tc ON s.s_nationkey = tc.c_custkey
WHERE l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
AND (p.p_size IN (SELECT DISTINCT p_size FROM part WHERE p.p_retailprice > 100))
GROUP BY p.p_name, ps.ps_supplycost
HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 5000.00
ORDER BY total_revenue DESC
LIMIT 10;
