WITH RECURSIVE CustomerHierarchy AS (
    SELECT c_custkey, c_name, c_acctbal, c_mktsegment, 1 AS level
    FROM customer
    WHERE c_acctbal IS NULL OR c_acctbal > (SELECT AVG(c_acctbal) FROM customer)
    UNION ALL
    SELECT c.c_custkey, c.c_name, c.c_acctbal, c.c_mktsegment, ch.level + 1
    FROM customer c
    JOIN CustomerHierarchy ch ON c.c_custkey <> ch.c_custkey
    WHERE ch.level < 3
),
HighValueSuppliers AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_supplycost) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost) > (SELECT AVG(ps_supplycost) FROM partsupp)
),
OrderSummary AS (
    SELECT o.o_orderkey, COUNT(l.l_linenumber) AS line_count, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY o.o_orderkey
),
TopNations AS (
    SELECT n.n_name, COUNT(DISTINCT c.c_custkey) AS customer_count
    FROM nation n
    LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
    GROUP BY n.n_name
    ORDER BY customer_count DESC
    LIMIT 5
)
SELECT DISTINCT 
    ph.p_name,
    ph.p_mfgr,
    ph.p_retailprice,
    COALESCE(ch.c_name, 'No Customer') AS top_customer,
    tn.n_name AS top_nation,
    hs.total_supply_cost,
    os.line_count,
    os.total_price,
    CASE 
        WHEN os.total_price IS NULL THEN 'No Orders'
        WHEN os.total_price < 100 THEN 'Low Value Order'
        ELSE 'High Value Order'
    END AS order_value_category
FROM part ph
LEFT JOIN CustomerHierarchy ch ON ph.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_availqty > 10)
LEFT JOIN HighValueSuppliers hs ON ph.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_supplycost > 50)
LEFT JOIN OrderSummary os ON os.o_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = ch.c_custkey)
JOIN TopNations tn ON tn.n_name = (SELECT n.n_name FROM nation n WHERE n.n_nationkey = (SELECT c.c_nationkey FROM customer c WHERE c.c_custkey = ch.c_custkey) LIMIT 1)
WHERE ph.p_retailprice IS NOT NULL
ORDER BY hs.total_supply_cost DESC, os.total_price DESC NULLS LAST;