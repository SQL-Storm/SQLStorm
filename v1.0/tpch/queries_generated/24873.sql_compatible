
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= '1996-01-01' 
        AND o.o_orderdate < '1997-01-01'
),
SupplierStats AS (
    SELECT 
        s.s_suppkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_value,
        COUNT(DISTINCT p.p_partkey) AS part_count
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey
    HAVING 
        SUM(ps.ps_supplycost * ps.ps_availqty) > 10000
),
OrderDetails AS (
    SELECT 
        lo.l_orderkey,
        SUM(lo.l_extendedprice * (1 - lo.l_discount)) AS revenue,
        COUNT(DISTINCT lo.l_partkey) AS item_count
    FROM 
        lineitem lo
    WHERE 
        lo.l_shipdate <= DATEADD(year, -1, '1998-10-01')
    GROUP BY 
        lo.l_orderkey
)

SELECT 
    o.o_orderkey,
    o.o_orderdate,
    o.o_totalprice,
    COALESCE(ds.revenue, 0) AS total_revenue,
    ss.total_supply_value,
    ss.part_count,
    CASE 
        WHEN o.o_totalprice > 10000 THEN 'High Value'
        WHEN o.o_totalprice BETWEEN 5000 AND 10000 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS price_category
FROM 
    RankedOrders o
LEFT JOIN 
    OrderDetails ds ON o.o_orderkey = ds.l_orderkey
LEFT JOIN 
    SupplierStats ss ON ss.part_count > 0
WHERE 
    EXISTS (SELECT 1 
            FROM customer c 
            WHERE c.c_custkey = o.o_custkey 
              AND c.c_acctbal IS NOT NULL 
              AND c.c_acctbal > (
                  SELECT AVG(c2.c_acctbal) 
                  FROM customer c2 
                  WHERE c2.c_nationkey = c.c_nationkey
              ))
ORDER BY 
    price_category, o.o_orderdate DESC;
