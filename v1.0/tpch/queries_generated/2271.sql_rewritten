WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= '1996-01-01'
),
SupplierProduct AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON p.p_partkey = ps.ps_partkey
),
CustomerSales AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
LineItemDetails AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
        COUNT(DISTINCT l.l_partkey) AS part_count
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey
)
SELECT 
    r.o_orderkey,
    r.o_orderdate,
    r.o_totalprice,
    COALESCE(s.s_name, 'No Supplier') AS supplier_name,
    COALESCE(c.c_name, 'No Customer') AS customer_name,
    ls.revenue,
    ls.part_count,
    CASE 
        WHEN r.order_rank = 1 THEN 'Top Order'
        ELSE 'Regular Order'
    END AS order_type
FROM 
    RankedOrders r
LEFT JOIN 
    SupplierProduct s ON s.ps_availqty > 0
LEFT JOIN 
    CustomerSales c ON c.total_spent > 1000
LEFT JOIN 
    LineItemDetails ls ON r.o_orderkey = ls.l_orderkey
WHERE 
    r.o_totalprice BETWEEN 100 AND 10000
ORDER BY 
    r.o_orderdate DESC, 
    r.o_totalprice DESC;