
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderstatus IN ('O', 'F')
),
FilteredSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        COALESCE(SUM(ps.ps_supplycost * ps.ps_availqty), 0) AS total_supply_cost
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, s.s_acctbal
    HAVING COALESCE(SUM(ps.ps_supplycost * ps.ps_availqty), 0) > (
        SELECT AVG(total_supply_cost) FROM (
            SELECT 
                SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
            FROM supplier s2
            LEFT JOIN partsupp ps ON s2.s_suppkey = ps.ps_suppkey
            GROUP BY s2.s_suppkey
        ) AS avg_suppliers
    )
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 1000 OR COUNT(o.o_orderkey) > 10
),
ExpandedLineItems AS (
    SELECT 
        l.l_orderkey,
        l.l_partkey,
        l.l_suppkey,
        CASE 
            WHEN l.l_discount > 0 THEN l.l_extendedprice * (1 - l.l_discount)
            ELSE l.l_extendedprice
        END AS adjusted_price,
        ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_linenumber) AS item_position
    FROM lineitem l
)
SELECT 
    p.p_name,
    ps.s_name,
    COUNT(cli.c_custkey) AS customer_count,
    AVG(cli.total_spent) AS avg_spent,
    SUM(eli.adjusted_price) AS total_revenue,
    COUNT(DISTINCT ro.o_orderkey) AS total_orders,
    STRING_AGG(DISTINCT r.r_name, ', ') AS regions
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN FilteredSuppliers fs ON fs.s_suppkey = ps.ps_suppkey
JOIN ExpandedLineItems eli ON eli.l_partkey = p.p_partkey
LEFT JOIN RankedOrders ro ON ro.o_orderkey = eli.l_orderkey
LEFT JOIN CustomerOrders cli ON cli.c_custkey = ro.o_orderkey
JOIN nation n ON n.n_nationkey = fs.s_nationkey
JOIN region r ON r.r_regionkey = n.n_regionkey
WHERE p.p_size BETWEEN 10 AND 20
  AND p.p_retailprice IS NOT NULL
  AND ((eli.l_shipmode = 'AIR' AND cli.num_orders > 0)
       OR (eli.l_shipmode <> 'AIR' AND cli.num_orders IS NULL))
GROUP BY p.p_name, ps.s_name
HAVING SUM(eli.adjusted_price) > 10000
   AND COUNT(DISTINCT n.n_name) > 1
ORDER BY total_revenue DESC;
