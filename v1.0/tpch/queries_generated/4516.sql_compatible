
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1998-01-01'
),
SupplierStats AS (
    SELECT
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
CustomerOrders AS (
    SELECT
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS orders_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) IS NOT NULL
),
HighValueOrders AS (
    SELECT *
    FROM RankedOrders
    WHERE order_rank <= 10
)
SELECT 
    c.c_name AS customer_name,
    o.o_orderkey AS order_number,
    o.o_orderdate AS order_date,
    s.s_name AS supplier_name,
    ss.total_supply_cost,
    COALESCE(co.total_spent, 0) AS customer_spending
FROM HighValueOrders o
LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
LEFT JOIN supplier s ON l.l_suppkey = s.s_suppkey
LEFT JOIN SupplierStats ss ON s.s_suppkey = ss.s_suppkey
LEFT JOIN CustomerOrders co ON co.c_custkey = (
    SELECT c.c_custkey 
    FROM customer c 
    WHERE c.c_name = (
        SELECT c2.c_name
        FROM customer c2
        JOIN orders o2 ON c2.c_custkey = o2.o_custkey
        WHERE o2.o_orderkey = o.o_orderkey
        LIMIT 1
    )
)
WHERE s.s_nationkey IN (
    SELECT n.n_nationkey 
    FROM nation n 
    WHERE n.n_name IN ('FRANCE', 'GERMANY')
)
ORDER BY o.o_totalprice DESC, customer_name;
