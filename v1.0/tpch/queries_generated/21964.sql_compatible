
WITH RECURSIVE part_hierarchy AS (
    SELECT p_partkey, p_name, p_mfgr, p_brand, p_size, p_container, 
           p_retailprice AS p_retailprice, p_comment, 0 AS level
    FROM part
    WHERE p_size IS NOT NULL
    
    UNION ALL
    
    SELECT p.p_partkey, p.p_name, p.p_mfgr, p.p_brand, 
           p.p_size + ph.level AS modified_size, p.p_container, 
           p.p_retailprice * 1.05 AS inflated_price, p.p_comment, 
           ph.level + 1
    FROM part p
    JOIN part_hierarchy ph ON p.p_partkey = (ph.p_partkey % 10) + 1
    WHERE ph.level < 5
),
region_info AS (
    SELECT r.r_regionkey, COUNT(DISTINCT n.n_nationkey) AS nation_count, 
           STRING_AGG(DISTINCT n.n_name, ', ' ORDER BY n.n_name) AS nation_names
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    GROUP BY r.r_regionkey
),
supplier_info AS (
    SELECT s.s_suppkey, s.s_name, 
           COALESCE(s.s_acctbal, 0) AS acct_balance,
           (SELECT SUM(ps.ps_supplycost) 
            FROM partsupp ps 
            WHERE ps.ps_suppkey = s.s_suppkey) AS total_supply_cost,
           ROW_NUMBER() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS rn
    FROM supplier s
),
customer_orders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent, COUNT(o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus IS NOT NULL AND o.o_totalprice > (SELECT AVG(o2.o_totalprice) FROM orders o2)
    GROUP BY c.c_custkey, c.c_name
),
ranked_orders AS (
    SELECT co.*, RANK() OVER (ORDER BY total_spent DESC) AS spending_rank
    FROM customer_orders co
)
SELECT ph.p_partkey, ph.p_name, ph.modified_size, 
       r.nation_count, r.nation_names, 
       s.s_name, s.acct_balance, s.total_supply_cost,
       COALESCE(ro.total_spent, 0) AS customer_spent, 
       ro.spending_rank
FROM part_hierarchy ph
LEFT JOIN region_info r ON (ph.p_partkey % r.nation_count) = 0
LEFT JOIN supplier_info s ON (ph.p_partkey % 5) = s.rn
LEFT JOIN ranked_orders ro ON s.s_suppkey = ro.c_custkey
WHERE ph.level > 1 AND (p.p_retailprice * 1.05) > 100
ORDER BY ph.modified_size DESC, r.nation_count ASC, ro.spending_rank ASC;
