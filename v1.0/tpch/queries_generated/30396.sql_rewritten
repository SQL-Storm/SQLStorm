WITH RECURSIVE SupplierCTE AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, s.s_comment, p.p_retailprice, p.p_name
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size > 10
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_acctbal - 100, s.s_comment, p.p_retailprice, p.p_name
    FROM SupplierCTE scte
    JOIN partsupp ps ON scte.s_suppkey = ps.ps_suppkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE scte.s_acctbal > 0
), OrderSummary AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
           COUNT(DISTINCT l.l_partkey) AS distinct_parts, o.o_orderdate
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= '1997-01-01'
    GROUP BY o.o_orderkey
), RankedOrders AS (
    SELECT os.o_orderkey, os.total_sales, os.distinct_parts, os.o_orderdate,
           RANK() OVER (ORDER BY os.total_sales DESC) AS sales_rank
    FROM OrderSummary os
), CustomerRanking AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal,
           ROW_NUMBER() OVER (PARTITION BY c.c_mktsegment ORDER BY c.c_acctbal DESC) AS segment_rank
    FROM customer c
    WHERE c.c_acctbal IS NOT NULL
)
SELECT ctr.c_custkey, ctr.c_name, ctr.c_acctbal,
       ro.total_sales, ro.distinct_parts, ro.o_orderdate,
       scte.s_name, scte.p_name, scte.p_retailprice
FROM CustomerRanking ctr
LEFT JOIN RankedOrders ro ON ctr.c_custkey = ro.o_orderkey
LEFT JOIN SupplierCTE scte ON scte.s_acctbal > 1000
WHERE ctr.segment_rank <= 5 AND ro.sales_rank <= 10
ORDER BY ctr.c_custkey, ro.o_orderdate DESC;