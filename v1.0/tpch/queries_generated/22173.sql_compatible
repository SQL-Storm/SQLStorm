
WITH RankedParts AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        p.p_retailprice, 
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn
    FROM 
        part p
    WHERE 
        p.p_retailprice < (SELECT AVG(p2.p_retailprice) FROM part p2 WHERE p2.p_size > 10)
), 
SupplierStats AS (
    SELECT 
        s.s_suppkey, 
        SUM(ps.ps_availqty) AS total_avail_qty, 
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE 
        s.s_acctbal IS NOT NULL
    GROUP BY 
        s.s_suppkey
), 
OrderDetails AS (
    SELECT 
        o.o_orderkey,
        COUNT(l.l_orderkey) AS item_count, 
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        o.o_orderkey
), 
TopSuppliers AS (
    SELECT 
        ss.s_suppkey,
        ss.total_avail_qty,
        ss.avg_supply_cost,
        RANK() OVER (ORDER BY ss.total_avail_qty DESC) AS supplier_rank
    FROM 
        SupplierStats ss
), 
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent,
        MAX(o.o_orderdate) AS last_order_date
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
)

SELECT 
    p.p_partkey, 
    p.p_name, 
    p.p_retailprice, 
    ts.s_suppkey, 
    ts.total_avail_qty, 
    ts.avg_supply_cost, 
    co.c_custkey, 
    co.total_orders,
    co.total_spent,
    (CASE 
        WHEN co.last_order_date < DATE '1998-10-01' - INTERVAL '30 days' THEN 'Inactive'
        ELSE 'Active'
    END) AS customer_status
FROM 
    RankedParts p
JOIN 
    TopSuppliers ts ON p.rn <= 5
JOIN 
    CustomerOrders co ON co.total_orders > 0
WHERE 
    p.p_retailprice > ts.avg_supply_cost + 10
    AND ts.total_avail_qty IS NOT NULL
ORDER BY 
    p.p_retailprice DESC;
