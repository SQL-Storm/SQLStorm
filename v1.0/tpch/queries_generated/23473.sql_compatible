
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY p.p_retailprice DESC) AS rnk
    FROM 
        part p
    WHERE 
        p.p_retailprice IS NOT NULL
),
SupplierOrderStats AS (
    SELECT 
        s.s_suppkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(l.l_orderkey) AS order_count
    FROM 
        supplier s
    LEFT JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    LEFT JOIN 
        lineitem l ON ps.ps_partkey = l.l_partkey
    GROUP BY 
        s.s_suppkey
),
HighValueOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        RANK() OVER (ORDER BY o.o_totalprice DESC) AS price_rank
    FROM 
        orders o
    WHERE 
        o.o_totalprice > (SELECT AVG(o_totalprice) FROM orders)
),
ExtremeVals AS (
    SELECT 
        n.n_name,
        COUNT(DISTINCT c.c_custkey) AS unique_customers,
        SUM(CASE WHEN c.c_acctbal IS NULL THEN 0 ELSE c.c_acctbal END) AS total_account_balance
    FROM 
        nation n
    LEFT JOIN 
        customer c ON n.n_nationkey = c.c_nationkey
    GROUP BY 
        n.n_name
    HAVING 
        COUNT(c.c_custkey) > 10
),
CombinedResults AS (
    SELECT 
        rp.p_partkey,
        rp.p_name,
        rp.p_retailprice,
        s.total_supply_cost,
        o.order_count,
        e.unique_customers,
        e.total_account_balance,
        rp.rnk,
        p.p_type
    FROM 
        RankedParts rp
    JOIN 
        SupplierOrderStats s ON s.order_count > 5
    LEFT JOIN 
        HighValueOrders o ON o.o_orderkey = (SELECT MAX(o2.o_orderkey) FROM HighValueOrders o2 WHERE o2.price_rank <= 10)
    LEFT JOIN 
        ExtremeVals e ON e.n_name = (SELECT n.n_name FROM nation n WHERE n.n_nationkey = (SELECT c.c_nationkey FROM customer c WHERE c.c_acctbal IS NOT NULL ORDER BY c.c_acctbal DESC LIMIT 1))
    WHERE 
        rp.rnk <= 5
)
SELECT 
    p_type,
    COUNT(DISTINCT p_partkey) AS count_parts,
    AVG(p_retailprice) AS avg_price,
    SUM(total_supply_cost) AS total_supply_exp,
    MAX(unique_customers) AS max_unique_customers,
    MAX(total_account_balance) AS max_account_balance
FROM 
    CombinedResults
GROUP BY 
    p_type
ORDER BY 
    count_parts DESC, avg_price ASC
LIMIT 10;
