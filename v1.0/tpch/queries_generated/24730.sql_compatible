
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal,
           CAST(s_name AS VARCHAR(255)) AS full_name,
           1 AS supplier_level
    FROM supplier
    WHERE s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal,
           CONCAT(sh.full_name, ' > ', s.s_name),
           sh.supplier_level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON sh.s_nationkey = s.s_nationkey
    WHERE sh.supplier_level < 5
),
order_stats AS (
    SELECT o.o_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(DISTINCT l.l_orderkey) AS lineitem_count,
           SUM(CASE WHEN l.l_returnflag = 'R' THEN 1 ELSE 0 END) AS returns_count
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey
),
nation_summary AS (
    SELECT n.n_nationkey, n.n_name, 
           COUNT(DISTINCT s.s_suppkey) AS supplier_count,
           SUM(s.s_acctbal) AS total_balance
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_nationkey, n.n_name
),
customer_orders AS (
    SELECT c.c_custkey, c.c_name, 
           EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
           COUNT(o.o_orderkey) AS order_count,
           SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name, order_year
)
SELECT ns.n_name,
       COALESCE(sh.full_name, 'Unknown Supplier') AS supplier_chain,
       os.total_revenue,
       cs.order_year,
       cs.total_spent,
       CASE 
           WHEN cs.order_count > 10 THEN 'High-value Customer'
           WHEN cs.order_count BETWEEN 5 AND 10 THEN 'Medium-value Customer'
           ELSE 'Low-value Customer'
       END AS customer_segment
FROM nation_summary ns
LEFT JOIN supplier_hierarchy sh ON ns.supplier_count = sh.supplier_level
LEFT JOIN order_stats os ON ns.n_nationkey = os.o_orderkey
LEFT JOIN customer_orders cs ON cs.c_custkey = ns.n_nationkey
WHERE ns.total_balance IS NOT NULL
  AND ns.supplier_count > (
     SELECT AVG(supplier_count) FROM nation_summary
   )
ORDER BY ns.n_name, cs.total_spent DESC
OFFSET 10 ROWS;
