WITH ranked_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS price_rank
    FROM orders o
    WHERE o.o_orderdate >= DATE '1997-01-01' 
      AND o.o_orderdate < DATE '1997-12-31'
),
supplier_totals AS (
    SELECT 
        ps.s_suppkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM partsupp ps
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY ps.s_suppkey
),
customer_rank AS (
    SELECT 
        c.c_custkey,
        SUM(o.o_totalprice) AS total_orders,
        RANK() OVER (ORDER BY SUM(o.o_totalprice) DESC) AS order_rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
)
SELECT 
    p.p_name,
    p.p_retailprice,
    COALESCE(cr.total_orders, 0) AS customer_orders,
    COALESCE(st.total_supply_cost, 0) AS supplier_cost,
    COUNT(DISTINCT lo.l_orderkey) AS order_count,
    AVG(lo.l_discount) AS average_discount
FROM part p
LEFT JOIN lineitem lo ON p.p_partkey = lo.l_partkey
LEFT JOIN supplier_totals st ON st.s_suppkey = lo.l_suppkey
LEFT JOIN customer_rank cr ON cr.c_custkey = (SELECT o.o_custkey FROM orders o WHERE o.o_orderkey = lo.l_orderkey LIMIT 1)
GROUP BY p.p_partkey, cr.total_orders, st.total_supply_cost
HAVING AVG(lo.l_discount) > 0.1
   OR COUNT(DISTINCT lo.l_orderkey) > (SELECT COUNT(*) FROM orders) / 10
ORDER BY p.p_retailprice DESC, customer_orders DESC
LIMIT 10;