
WITH RECURSIVE part_hierarchy AS (
    SELECT 
        p_partkey, 
        p_name,
        p_mfgr,
        p_brand,
        p_type,
        p_size,
        p_container,
        p_retailprice,
        p_comment,
        CAST(0 AS INTEGER) AS level,
        p_partkey AS root_partkey
    FROM 
        part
    WHERE 
        p_size = (SELECT MAX(p_size) FROM part WHERE p_size IS NOT NULL)

    UNION ALL

    SELECT 
        p.p_partkey, 
        p.p_name,
        p.p_mfgr,
        p.p_brand,
        p.p_type,
        p.p_size,
        p.p_container,
        p.p_retailprice,
        p.p_comment,
        ph.level + 1,
        ph.root_partkey
    FROM 
        part p
    JOIN 
        part_hierarchy ph ON ph.p_partkey = p.p_partkey
    WHERE 
        ph.level < 5
),

order_statistics AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue,
        COUNT(DISTINCT l.l_partkey) AS unique_parts,
        AVG(l.l_quantity) AS avg_quantity
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY 
        o.o_orderkey
),

supplier_ranked AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        ROW_NUMBER() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS rank
    FROM 
        supplier s
    WHERE 
        s.s_acctbal IS NOT NULL
),

final_results AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        CASE 
            WHEN EXISTS (SELECT * FROM lineitem l WHERE l.l_partkey = p.p_partkey AND l.l_discount > 0.2) THEN 'High Discount'
            ELSE 'Standard'
        END AS discount_category,
        ph.level,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        MAX(os.revenue) AS max_revenue,
        SUM(s.s_acctbal) AS total_supplier_balance
    FROM 
        part p
    LEFT JOIN 
        part_hierarchy ph ON p.p_partkey = ph.p_partkey
    LEFT JOIN 
        orders o ON o.o_orderkey IN (SELECT DISTINCT l.l_orderkey FROM lineitem l WHERE l.l_partkey = p.p_partkey)
    LEFT JOIN 
        order_statistics os ON o.o_orderkey = os.o_orderkey
    LEFT JOIN 
        supplier_ranked s ON s.s_suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey = p.p_partkey)
    WHERE 
        ph.level IS NOT NULL AND 
        (p.p_comment LIKE '%urgent%' OR p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2))
    GROUP BY 
        p.p_partkey, p.p_name, ph.level
    HAVING 
        SUM(s.s_acctbal) IS NOT NULL AND 
        COUNT(DISTINCT o.o_orderkey) > 0
)

SELECT 
    p.p_partkey,
    p.p_name,
    COALESCE(p.total_supplier_balance, 0) AS total_balance,
    p.discount_category,
    p.level,
    COUNT(*) OVER (PARTITION BY p.discount_category) AS category_count
FROM 
    final_results p
WHERE 
    p.max_revenue IS NOT NULL
ORDER BY 
    p.level DESC, total_balance DESC;
