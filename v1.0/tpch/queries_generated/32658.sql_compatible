
WITH RECURSIVE ProductHierarchy AS (
    SELECT p.p_partkey, p.p_name, p.p_size, p.p_retailprice, 1 AS level
    FROM part p
    WHERE p.p_size > 10
    UNION ALL
    SELECT ph.p_partkey, p.p_name, p.p_size, p.p_retailprice * 0.9, ph.level + 1
    FROM ProductHierarchy ph
    JOIN part p ON ph.p_partkey = p.p_partkey
    WHERE ph.level < 3
), AggregatedCosts AS (
    SELECT ps.ps_partkey, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM partsupp ps
    GROUP BY ps.ps_partkey
), SupplierStats AS (
    SELECT s.s_suppkey, COUNT(DISTINCT ps.ps_partkey) AS part_count, AVG(s.s_acctbal) AS avg_acctbal
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
), RecentOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= DATE_SUB(CAST('1998-10-01' AS DATE), INTERVAL 1 YEAR)
    GROUP BY o.o_orderkey
)
SELECT 
    p.p_name,
    COALESCE(pc.total_cost, 0) AS part_cost,
    COALESCE(ss.part_count, 0) AS supplier_count,
    r.o_orderkey,
    r.total_revenue,
    CASE 
        WHEN r.total_revenue > 1000 THEN 'High Value'
        ELSE 'Low Value'
    END AS revenue_category
FROM ProductHierarchy p
LEFT JOIN AggregatedCosts pc ON p.p_partkey = pc.ps_partkey
LEFT JOIN SupplierStats ss ON ss.part_count > 0
LEFT JOIN RecentOrders r ON r.o_orderkey IN (
    SELECT o.o_orderkey
    FROM orders o
    WHERE o.o_orderstatus = 'O'
)
ORDER BY p.p_retailprice DESC, r.total_revenue DESC
LIMIT 50;
