
WITH RECURSIVE OrderHierarchy AS (
    SELECT o_orderkey, o_custkey, o_orderdate, o_totalprice, 1 AS level
    FROM orders
    WHERE o_orderstatus = 'O' 
    UNION ALL
    SELECT o.o_orderkey, o.o_custkey, o.o_orderdate, o.o_totalprice, oh.level + 1
    FROM orders o
    JOIN OrderHierarchy oh ON o.o_custkey = oh.o_custkey
    WHERE o.o_orderdate > oh.o_orderdate
),
SupplierWithStats AS (
    SELECT s.s_suppkey, 
           s.s_name, 
           SUM(ps.ps_availqty) AS total_available_qty, 
           AVG(ps.ps_supplycost) AS average_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
NationRegion AS (
    SELECT n.n_nationkey, 
           n.n_name, 
           r.r_name, 
           COUNT(*) AS suppliers_count
    FROM nation n
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    GROUP BY n.n_nationkey, n.n_name, r.r_name
),
TotalSales AS (
    SELECT c.c_custkey,
           SUM(il.l_extendedprice * (1 - il.l_discount)) AS total_sales,
           SUM(il.l_extendedprice * (1 - il.l_discount) * (1 + il.l_tax)) AS total_taxed_sales
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN lineitem il ON o.o_orderkey = il.l_orderkey
    WHERE o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
    GROUP BY c.c_custkey
)
SELECT 
    CONCAT(n.n_name, ' (', r.r_name, ')') AS nation_region,
    ss.s_name,
    ss.total_available_qty,
    ss.average_supply_cost,
    ts.total_sales,
    COALESCE(ts.total_taxed_sales, 0) AS total_taxed_sales
FROM SupplierWithStats ss
LEFT JOIN NationRegion n ON ss.s_suppkey = n.n_nationkey 
LEFT JOIN TotalSales ts ON ts.total_sales > 10000
ORDER BY ts.total_sales DESC, ss.average_supply_cost ASC
OFFSET 10 ROWS FETCH NEXT 20 ROWS ONLY;
