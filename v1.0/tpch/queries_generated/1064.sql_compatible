
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rank
    FROM 
        part p
    WHERE 
        p.p_retailprice IS NOT NULL
),
TotalSales AS (
    SELECT 
        l.l_partkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        lineitem l
    JOIN 
        orders o ON l.l_orderkey = o.o_orderkey
    WHERE 
        o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1998-01-01'
    GROUP BY 
        l.l_partkey
),
SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        COUNT(DISTINCT ps.ps_partkey) AS part_count,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
)
SELECT 
    RP.p_partkey,
    RP.p_name,
    RP.p_brand,
    COALESCE(TS.total_revenue, 0) AS total_revenue,
    SS.part_count,
    SS.avg_supply_cost,
    CASE 
        WHEN RP.rank <= 10 THEN 'Top 10'
        ELSE 'Others'
    END AS category
FROM 
    RankedParts RP
LEFT JOIN 
    TotalSales TS ON RP.p_partkey = TS.l_partkey
LEFT JOIN 
    SupplierStats SS ON RP.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_supplycost < SS.avg_supply_cost)
WHERE 
    RP.rank <= 20 OR (RP.p_retailprice < 50 AND SS.part_count IS NOT NULL)
ORDER BY 
    RP.p_brand, total_revenue DESC;
