
WITH RankedParts AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY p.p_retailprice DESC) AS rnk
    FROM part p
    WHERE p.p_size IS NOT NULL 
    AND p.p_retailprice > (SELECT AVG(ps.ps_supplycost) FROM partsupp ps WHERE ps.ps_partkey = p.p_partkey)
), 
SupplierStats AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        SUM(ps.ps_availqty) AS total_availqty,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supplycost
    FROM supplier s 
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
), 
HighValueOrders AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS order_value
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY o.o_orderkey
    HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 10000
)
SELECT 
    p.p_partkey,
    p.p_name,
    p.p_retailprice,
    s.s_name,
    COALESCE(h.order_value, 0) AS high_value_order_total,
    CASE 
        WHEN p.p_retailprice > 200 THEN 'Expensive' 
        WHEN p.p_retailprice BETWEEN 100 AND 200 THEN 'Moderate' 
        ELSE 'Cheap' 
    END AS price_category
FROM RankedParts p
LEFT JOIN SupplierStats s ON p.p_partkey = (
    SELECT ps.ps_partkey 
    FROM partsupp ps 
    WHERE ps.ps_availqty > 50 AND ps.ps_supplycost < 200 
    ORDER BY ps.ps_supplycost ASC 
    FETCH FIRST 1 ROWS ONLY
)
LEFT JOIN HighValueOrders h ON h.order_value > s.total_supplycost
WHERE p.rnk <= 5 AND p.p_comment LIKE '%fragile%'
ORDER BY price_category, p.p_retailprice DESC, p.p_name;
