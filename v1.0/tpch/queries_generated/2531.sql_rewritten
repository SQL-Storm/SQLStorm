WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_acctbal,
        RANK() OVER (PARTITION BY ps.ps_partkey ORDER BY s.s_acctbal DESC) AS supplier_rank
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
), 
FilteredOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_orderdate, 
        o.o_totalprice, 
        o.o_orderstatus,
        CASE 
            WHEN o.o_orderstatus = 'O' THEN 'Open'
            ELSE 'Closed'
        END AS order_status
    FROM orders o
    WHERE o.o_orderdate BETWEEN DATE '1996-01-01' AND DATE '1996-12-31'
), 
SupplierStats AS (
    SELECT 
        s.s_name, 
        COUNT(ps.ps_partkey) AS total_parts,
        SUM(ps.ps_availqty) AS total_available_quantity,
        AVG(ps.ps_supplycost) AS average_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_name
)
SELECT 
    o.o_orderkey,
    o.o_orderdate,
    o.total_price,
    COALESCE(s.s_name, 'No Supplier') AS supplier_name,
    ss.total_parts,
    ss.total_available_quantity,
    ss.average_supply_cost,
    RANK() OVER (PARTITION BY o.o_orderkey ORDER BY o.o_totalprice DESC) AS order_rank
FROM FilteredOrders o
LEFT JOIN RankedSuppliers s ON o.o_orderkey = s.s_suppkey
LEFT JOIN SupplierStats ss ON s.s_suppkey = ss.s_suppkey
WHERE ss.total_available_quantity IS NOT NULL
AND (o.o_orderstatus = 'O' OR o.o_totalprice > 1000)
ORDER BY o.o_orderdate DESC, order_rank;