
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderdate DESC) AS rn
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= CURRENT_DATE - INTERVAL '1 MONTH'
),
SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS avg_supplycost
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey,
        ps.ps_suppkey
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
Aggregation AS (
    SELECT 
        n.n_nationkey,
        n.n_name,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count,
        AVG(c_total.total_spent) AS avg_customer_spent
    FROM 
        nation n
    LEFT JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey
    LEFT JOIN 
        CustomerOrders c_total ON s.s_suppkey IN (
            SELECT ps.ps_suppkey
            FROM SupplierParts ps
            WHERE ps.total_available > 0
        )
    GROUP BY 
        n.n_nationkey, n.n_name
)
SELECT 
    a.n_name,
    a.supplier_count,
    COALESCE(a.avg_customer_spent, 0.00) AS avg_customer_spent,
    COUNT(o.o_orderkey) AS recent_order_count,
    SUM(CASE WHEN o.o_orderstatus = 'F' THEN o.o_totalprice ELSE 0 END) AS total_fulfilled
FROM 
    Aggregation a
LEFT JOIN 
    RankedOrders o ON a.n_nationkey = (SELECT s.n_nationkey FROM supplier s WHERE s.s_suppkey = o.o_custkey)
GROUP BY 
    a.n_name, a.supplier_count, a.avg_customer_spent
HAVING 
    AVG(COALESCE(o.o_totalprice, 0)) > 1000
ORDER BY 
    a.supplier_count DESC, a.n_name;
