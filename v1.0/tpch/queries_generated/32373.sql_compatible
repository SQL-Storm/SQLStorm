
WITH RECURSIVE supplier_tree AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_nationkey,
        1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)

    UNION ALL

    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_nationkey,
        st.level + 1
    FROM supplier s
    JOIN supplier_tree st ON s.s_nationkey = st.s_nationkey
    WHERE st.level < 3
),
part_summary AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
order_summary AS (
    SELECT 
        o.o_orderkey,
        COUNT(l.l_orderkey) AS total_lines,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey
)
SELECT 
    p.p_partkey,
    p.p_name,
    ps.total_available,
    ps.avg_supply_cost,
    COUNT(DISTINCT st.s_suppkey) AS supplier_count,
    COALESCE(ROUND(AVG(os.total_revenue), 2), 0) AS avg_revenue_per_order,
    (CASE 
        WHEN COUNT(os.o_orderkey) > 0 THEN 'Has Orders'
        ELSE 'No Orders'
     END) AS order_status
FROM part_summary ps
LEFT JOIN part p ON ps.p_partkey = p.p_partkey
LEFT JOIN supplier_tree st ON st.s_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_nationkey = st.s_nationkey)
LEFT JOIN order_summary os ON os.o_orderkey = (
    SELECT o.o_orderkey 
    FROM orders o 
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey 
    WHERE l.l_partkey = p.p_partkey
    LIMIT 1
)
GROUP BY p.p_partkey, p.p_name, ps.total_available, ps.avg_supply_cost
HAVING ps.avg_supply_cost > (SELECT AVG(avg_supply_cost) FROM part_summary) 
   OR COUNT(os.o_orderkey) = 0
ORDER BY p.p_partkey;
