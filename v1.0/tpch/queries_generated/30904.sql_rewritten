WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, 0 AS level
    FROM supplier
    WHERE s_nationkey IS NOT NULL

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
PartStatistics AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_available,
           AVG(ps.ps_supplycost) AS average_cost,
           STRING_AGG(DISTINCT s.s_name, ', ') AS supplier_names
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY p.p_partkey, p.p_name
),
RecentOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice,
           ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderdate DESC) AS recent_rank
    FROM orders o
    WHERE o.o_orderdate >= '1997-01-01'
)
SELECT r.r_name, COUNT(DISTINCT c.c_custkey) AS customer_count,
       SUM(o.o_totalprice) AS total_order_value,
       SUM(CASE WHEN o.o_orderstatus = 'O' THEN o.o_totalprice ELSE 0 END) AS total_open_orders,
       MAX(ps.total_available) AS max_available_quantity,
       STRING_AGG(DISTINCT p.p_name, '; ') AS part_names,
       STRING_AGG(DISTINCT sh.s_name, ', ') AS suppliers_in_hierarchy
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
LEFT JOIN RecentOrders o ON c.c_custkey = o.o_custkey
LEFT JOIN PartStatistics ps ON ps.total_available IS NOT NULL
LEFT JOIN SupplierHierarchy sh ON sh.s_nationkey = n.n_nationkey
WHERE r.r_name IS NOT NULL
GROUP BY r.r_name
ORDER BY total_order_value DESC, customer_count DESC;