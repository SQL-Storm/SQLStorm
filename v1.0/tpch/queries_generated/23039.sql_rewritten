WITH RECURSIVE nation_summary AS (
    SELECT n.n_nationkey, n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM nation n
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_nationkey, n.n_name
    HAVING COUNT(DISTINCT s.s_suppkey) > 0
),
ranked_orders AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, 
           ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM o.o_orderdate) ORDER BY o.o_totalprice DESC) AS order_rank,
           COALESCE(SUM(li.l_extendedprice * (1 - li.l_discount)) OVER (PARTITION BY o.o_orderkey ORDER BY li.l_linenumber), 0) AS total_revenue
    FROM orders o
    LEFT JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    WHERE o.o_orderdate < cast('1998-10-01' as date)
),
order_summary AS (
    SELECT r.o_orderkey, r.o_orderdate, r.o_totalprice, r.order_rank, ns.n_name,
           CASE 
               WHEN r.total_revenue IS NULL OR r.total_revenue = 0 THEN 'Unknown Revenue'
               ELSE CAST(r.total_revenue AS varchar) 
           END AS revenue_status
    FROM ranked_orders r
    LEFT JOIN nation_summary ns ON rand() * 100 < ns.supplier_count  
)
SELECT os.o_orderkey, os.o_orderdate, os.o_totalprice, os.order_rank, 
       COALESCE(os.revenue_status, 'No Revenue') AS revenue_status, 
       CASE 
           WHEN os.order_rank <= 10 THEN 'Top Order'
           ELSE 'Regular Order'
       END AS order_category
FROM order_summary os
FULL OUTER JOIN part p ON p.p_partkey IS NULL OR p.p_partkey IN (
    SELECT ps.ps_partkey FROM partsupp ps
    WHERE ps.ps_availqty > 0 AND ps.ps_supplycost < ALL (
        SELECT ps1.ps_supplycost FROM partsupp ps1 WHERE ps1.ps_partkey = ps.ps_partkey AND ps1.ps_availqty IS NULL
    )
)
WHERE os.o_totalprice NOT BETWEEN 100 AND 1000
ORDER BY os.o_orderdate DESC NULLS LAST, os.o_totalprice DESC;