
WITH RankedParts AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        p.p_retailprice, 
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    WHERE p.p_size BETWEEN 1 AND 10 
      AND p.p_retailprice IS NOT NULL
),
TopPartSuppliers AS (
    SELECT 
        ps.ps_partkey, 
        s.s_suppkey, 
        s.s_name, 
        ps.ps_availqty,
        DENSE_RANK() OVER (PARTITION BY ps.ps_partkey ORDER BY ps.ps_supplycost) AS supplier_rank
    FROM partsupp ps
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE ps.ps_availqty > 100
),
HighValueOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_orderdate, 
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_value,
        CASE 
            WHEN SUM(l.l_extendedprice * (1 - l.l_discount)) > 100000 THEN 'High Value'
            ELSE 'Standard Value'
        END AS value_category
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate
)
SELECT 
    rp.p_partkey, 
    rp.p_name, 
    rp.p_retailprice, 
    ps.s_name AS supplier_name, 
    ovo.o_orderstatus,
    RANK() OVER (PARTITION BY rp.p_partkey ORDER BY rp.p_retailprice DESC) AS part_rank,
    CASE 
        WHEN HVO.value_category = 'High Value' THEN 'Premium'
        ELSE 'Basic'
    END AS customer_order_value
FROM RankedParts rp
LEFT JOIN TopPartSuppliers ps ON rp.p_partkey = ps.ps_partkey AND ps.supplier_rank = 1
LEFT JOIN (
    SELECT o.o_orderkey, o.o_orderstatus, o.o_orderdate 
    FROM orders o 
    WHERE o.o_orderstatus IN ('O', 'F')
) AS ovo ON EXISTS (
    SELECT 1 
    FROM lineitem l 
    WHERE l.l_orderkey = ovo.o_orderkey 
      AND l.l_discount BETWEEN 0.05 AND 0.2
)
LEFT JOIN HighValueOrders HVO ON HVO.o_orderkey = ovo.o_orderkey
WHERE rp.price_rank <= 5
  AND (ps.ps_availqty IS NULL OR ps.ps_availqty > 200)
ORDER BY rp.p_partkey, ps.s_name DESC, HVO.total_value DESC;
