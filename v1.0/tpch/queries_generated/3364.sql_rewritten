WITH SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS TotalSupplyCost,
        COUNT(DISTINCT ps.ps_partkey) AS PartCount
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
), 
OrderDetails AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS TotalRevenue,
        ROW_NUMBER() OVER (PARTITION BY o.o_custkey ORDER BY o.o_orderdate DESC) AS OrderRank
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate, o.o_custkey
), 
HighValueOrders AS (
    SELECT 
        od.o_orderkey,
        od.TotalRevenue,
        od.o_orderdate,
        c.c_name,
        COALESCE(AVG(ps.TotalSupplyCost) OVER (PARTITION BY c.c_nationkey), 0) AS AvgSupplierCost
    FROM OrderDetails od
    JOIN customer c ON c.c_custkey = od.o_custkey
    WHERE od.TotalRevenue > 10000
)

SELECT 
    hvo.o_orderkey,
    hvo.TotalRevenue,
    hvo.o_orderdate,
    hvo.c_name,
    hvo.AvgSupplierCost,
    CASE 
        WHEN hvo.AvgSupplierCost IS NULL THEN 'No Suppliers'
        WHEN hvo.AvgSupplierCost > 5000 THEN 'High Supplier Cost'
        ELSE 'Normal Supplier Cost'
    END AS SupplierCostCategory
FROM HighValueOrders hvo
LEFT JOIN SupplierStats ss ON hvo.AvgSupplierCost = ss.TotalSupplyCost
WHERE hvo.o_orderdate >= '1997-01-01'
ORDER BY hvo.TotalRevenue DESC, hvo.o_orderdate ASC
OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY;