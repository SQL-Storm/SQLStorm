WITH RankedParts AS (
    SELECT p.p_partkey, 
           p.p_name, 
           p.p_retailprice, 
           ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn
    FROM part p
    WHERE p.p_size IN (SELECT DISTINCT p_size FROM part WHERE p_container = 'SM BOX')
),
SupplierDetails AS (
    SELECT s.s_suppkey, 
           s.s_name, 
           s.s_acctbal,
           SUM(CASE WHEN ps.ps_availqty < 20 THEN ps.ps_supplycost ELSE 0 END) AS low_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name, s.s_acctbal
),
OrderMetrics AS (
    SELECT o.o_orderkey, 
           o.o_orderdate, 
           COUNT(l.l_orderkey) AS lineitem_count,
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate BETWEEN '1996-01-01' AND '1997-01-01'
    GROUP BY o.o_orderkey, o.o_orderdate
),
CustomerAggregate AS (
    SELECT c.c_custkey, 
           c.c_name, 
           SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
ComplexJoin AS (
    SELECT DISTINCT p.p_name, 
           COALESCE(ca.total_spent, 0) AS total_customer_spent,
           sd.low_supply_cost,
           rp.rn
    FROM RankedParts rp
    FULL OUTER JOIN SupplierDetails sd ON sd.low_supply_cost > 0
    LEFT JOIN CustomerAggregate ca ON ca.c_custkey = (SELECT c.c_custkey 
                                                       FROM customer c 
                                                       WHERE c.c_name LIKE 'Customer%')
)
SELECT name_and_costs.p_name,
       CASE 
           WHEN total_customer_spent = 0 THEN 'No Spending' 
           ELSE 'Active Customer' 
       END AS customer_status,
       CONCAT('Supplier Low Cost: ', CAST(low_supply_cost AS VARCHAR)) AS supplier_info
FROM ComplexJoin name_and_costs
WHERE rn <= 5
ORDER BY total_customer_spent DESC, name_and_costs.p_name;