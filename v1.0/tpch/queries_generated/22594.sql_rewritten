WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal IS NOT NULL AND s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey AND s.suppkey <> sh.s_suppkey
),
OrderSummary AS (
    SELECT c.c_name, o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales, 
           COUNT(DISTINCT o.o_orderkey) AS order_count,
           RANK() OVER (PARTITION BY c.custkey ORDER BY SUM(l_extendedprice * (1 - l_discount)) DESC) AS sales_rank
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= cast('1998-10-01' as date) - INTERVAL '1 year'
    GROUP BY c.c_custkey, c.c_name, o.o_orderkey
),
MaxSales AS (
    SELECT c.c_name, MAX(total_sales) AS max_sales
    FROM OrderSummary
    GROUP BY c.c_name
)
SELECT DISTINCT n.n_name, COUNT(DISTINCT ps.ps_partkey) AS part_count, 
       AVG(s.s_acctbal) AS avg_supply_balance,
       STRING_AGG(DISTINCT c.c_name || ' (Total Sales: ' || COALESCE(os.total_sales, 0) || ')', ', ') AS customer_sales
FROM nation n
LEFT JOIN supplier s ON s.s_nationkey = n.n_nationkey
LEFT JOIN partsupp ps ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN OrderSummary os ON os.o_orderkey IN (
    SELECT o.o_orderkey 
    FROM orders o
    WHERE o.o_orderstatus = 'F'
)
WHERE s.s_acctbal BETWEEN (SELECT MIN(ps_supplycost) FROM partsupp) AND
      (SELECT MAX(ps_supplycost) FROM partsupp) OR
      s.s_acctbal IS NULL
GROUP BY n.n_name
HAVING COUNT(DISTINCT ps.ps_partkey) > 0
ORDER BY avg_supply_balance DESC NULLS LAST;