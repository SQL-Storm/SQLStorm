
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate BETWEEN DATE '1994-01-01' AND DATE '1994-12-31'
),
SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        s.s_suppkey,
        s.s_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        RANK() OVER (PARTITION BY ps.ps_partkey ORDER BY ps.ps_supplycost ASC) AS supply_rank
    FROM 
        partsupp ps
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE 
        s.s_acctbal > 100
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    p.p_name,
    rp.o_orderdate,
    so.s_name,
    cp.total_orders,
    cp.total_spent,
    sp.ps_availqty,
    CASE 
        WHEN cp.total_spent > 10000 THEN 'High Value'
        ELSE 'Regular'
    END AS customer_value,
    COALESCE(sp.ps_supplycost, 0) AS effective_supply_cost
FROM 
    part p
LEFT JOIN 
    SupplierParts sp ON p.p_partkey = sp.ps_partkey AND sp.supply_rank = 1
JOIN 
    RankedOrders rp ON rp.o_orderkey IN (SELECT DISTINCT l.l_orderkey FROM lineitem l WHERE l.l_partkey = p.p_partkey)
LEFT JOIN 
    CustomerOrders cp ON cp.c_custkey = (SELECT c.c_custkey FROM customer c WHERE c.c_custkey = cp.c_custkey AND cp.total_orders > 0)
WHERE 
    p.p_size BETWEEN 5 AND 20
ORDER BY 
    rp.o_orderdate DESC, 
    effective_supply_cost ASC
FETCH FIRST 10 ROWS ONLY;
