WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_custkey,
           c.c_name,
           c.c_nationkey,
           c.c_acctbal,
           1 AS depth
    FROM customer c
    WHERE c.c_acctbal IS NOT NULL AND c.c_acctbal > 1000

    UNION ALL

    SELECT ch.c_custkey,
           ch.c_name,
           ch.c_nationkey,
           ch.c_acctbal,
           ch.depth + 1
    FROM customer ch
    JOIN orders o ON ch.c_custkey = o.o_custkey
    WHERE o.o_totalprice > 5000 AND ch.depth < 5
),
TotalSales AS (
    SELECT o.o_custkey,
           SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_sales
    FROM orders o
    JOIN lineitem li ON li.l_orderkey = o.o_orderkey
    WHERE li.l_shipdate BETWEEN '1997-01-01' AND '1997-12-31'
    GROUP BY o.o_custkey
),
SupplierPartData AS (
    SELECT ps.ps_partkey,
           ps.ps_suppkey,
           SUM(ps.ps_availqty) AS total_available,
           AVG(ps.ps_supplycost) AS avg_cost
    FROM partsupp ps
    GROUP BY ps.ps_partkey, ps.ps_suppkey
)
SELECT ch.c_name,
       ch.c_acctbal,
       COALESCE(ts.total_sales, 0) AS total_sales,
       COALESCE(spd.total_available, 0) AS total_available,
       COALESCE(spd.avg_cost, NULL) AS average_cost,
       ROW_NUMBER() OVER (PARTITION BY ch.c_nationkey ORDER BY ch.c_acctbal DESC) AS customer_rank,
       CASE 
           WHEN ch.depth = 1 THEN 'Top Tier'
           WHEN ch.depth BETWEEN 2 AND 3 THEN 'Mid Tier'
           ELSE 'Emerging'
       END AS customer_tier
FROM CustomerHierarchy ch
LEFT JOIN TotalSales ts ON ch.c_custkey = ts.o_custkey
LEFT JOIN SupplierPartData spd ON spd.ps_partkey IN (
    SELECT p.p_partkey
    FROM part p
    WHERE p.p_retailprice BETWEEN 50 AND 200
    AND p.p_size >= 10
)
WHERE ch.c_nationkey IN (
    SELECT n.n_nationkey
    FROM nation n
    WHERE n.n_comment LIKE '%excellent%'
)
ORDER BY ch.c_acctbal DESC, total_sales DESC
FETCH FIRST 50 ROWS ONLY;