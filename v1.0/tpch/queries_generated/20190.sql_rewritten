WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= '1997-01-01' AND o.o_orderdate < '1998-01-01'
),
CustomerSales AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS orders_count
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
PartSupplierDetails AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        COUNT(DISTINCT ps.ps_suppkey) AS supplier_count,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey 
    GROUP BY 
        p.p_partkey, p.p_name
),
LineItemSummary AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_line_value,
        l.l_returnflag,
        l.l_linestatus
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey, l.l_returnflag, l.l_linestatus
)
SELECT 
    c.c_name,
    cs.total_spent,
    ps.supplier_count,
    ps.avg_supply_cost,
    SUM(l.total_line_value) AS total_value_from_lines,
    COALESCE(MAX(ro.o_orderdate), 'Not Ordered') AS last_order_date,
    CASE 
        WHEN cs.total_spent IS NULL THEN 'No Spending'
        WHEN cs.total_spent > 5000 THEN 'High Roller'
        ELSE 'Average Customer'
    END AS customer_category
FROM 
    CustomerSales cs
JOIN 
    customer c ON cs.c_custkey = c.c_custkey
LEFT JOIN 
    PartSupplierDetails ps ON ps.p_partkey IN (
        SELECT p.p_partkey 
        FROM part p 
        WHERE p.p_size BETWEEN 1 AND 50
    )
LEFT JOIN 
    RankedOrders ro ON c.c_custkey IN (
        SELECT o.o_custkey 
        FROM orders o 
        WHERE o.o_orderstatus = 'O' AND o.o_totalprice > 1000
    )
LEFT JOIN 
    LineItemSummary l ON l.l_orderkey IN (
        SELECT DISTINCT o.o_orderkey FROM orders o WHERE o.o_totalprice < 500
    )
GROUP BY 
    c.c_name, cs.total_spent, ps.supplier_count, ps.avg_supply_cost
HAVING 
    SUM(l.total_line_value) IS NOT NULL
ORDER BY 
    cs.total_spent DESC, customer_category;