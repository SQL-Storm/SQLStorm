
WITH RECURSIVE nested_orders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_orderstatus, o.o_totalprice, 
           o.o_orderdate, o.o_orderpriority, o.o_clerk, o.o_shippriority, 
           o.o_comment, 1 AS recursion_level
    FROM orders o
    WHERE o.o_orderstatus = 'O'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_custkey, o.o_orderstatus, o.o_totalprice, 
           o.o_orderdate, o.o_orderpriority, o.o_clerk, o.o_shippriority, 
           o.o_comment, no.recursion_level + 1
    FROM orders o
    JOIN nested_orders no ON o.o_custkey = no.o_custkey 
                           AND o.o_orderdate > no.o_orderdate
    WHERE no.recursion_level < 5
),
part_suppliers AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice, 
           COALESCE(ps.ps_availqty, 0) AS available_qty
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE (p.p_retailprice > 100 OR p.p_comment IS NULL)
),
customer_summary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent,
           COUNT(o.o_orderkey) AS total_orders
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
ranked_customers AS (
    SELECT c.c_custkey, c.c_name, total_spent, total_orders,
           RANK() OVER (ORDER BY total_spent DESC) AS spend_rank
    FROM customer_summary c
)
SELECT n.n_name, 
       COUNT(DISTINCT ps.p_partkey) AS unique_parts,
       AVG(CASE WHEN ps.available_qty > 10 THEN ps.available_qty END) AS avg_available_qty,
       SUM(CASE WHEN lc.l_returnflag = 'R' THEN lc.l_extendedprice * (1 - lc.l_discount) END) AS returned_value,
       ROW_NUMBER() OVER (PARTITION BY r.r_regionkey ORDER BY COUNT(DISTINCT o.o_orderkey) DESC) AS region_order
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN part_suppliers ps ON s.s_suppkey = ps.p_partkey
LEFT JOIN lineitem lc ON lc.l_partkey = ps.p_partkey
LEFT JOIN nested_orders no ON no.o_custkey = s.s_nationkey
LEFT JOIN orders o ON no.o_orderkey = o.o_orderkey -- Ensuring orders are joined
GROUP BY n.n_name, r.r_regionkey
HAVING COUNT(DISTINCT o.o_orderkey) > 5
ORDER BY region_order, unique_parts DESC;
