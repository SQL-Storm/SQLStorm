
WITH RecursiveSupplier AS (
    SELECT s_suppkey, s_name, s_acctbal, s_nationkey, 
           ROW_NUMBER() OVER (PARTITION BY s_nationkey ORDER BY s_acctbal DESC) AS rank
    FROM supplier
    WHERE s_acctbal IS NOT NULL
),
HighValueCustomers AS (
    SELECT c_custkey, c_name, c_acctbal, c_nationkey,
           LAG(c_acctbal) OVER (PARTITION BY c_nationkey ORDER BY c_acctbal DESC) AS previous_acctbal
    FROM customer
    WHERE c_acctbal > 50000
),
OrderStatistics AS (
    SELECT o_orderkey, o_custkey, SUM(l_extendedprice * (1 - l_discount)) AS total_price,
           COUNT(*) AS lineitem_count,
           MAX(CASE WHEN l_returnflag = 'R' THEN 1 ELSE 0 END) AS has_returned_item,
           MAX(l_orderdate) AS last_order_date
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o_orderkey, o_custkey
)
SELECT r.r_name, 
       COALESCE(SUM(ps.ps_supplycost * ps.ps_availqty), 0) AS total_supply_cost,
       COUNT(DISTINCT c.c_custkey) AS total_high_value_customers,
       AVG(o.total_price) AS average_order_value,
       MAX(s.s_acctbal) AS max_supplier_acctbal
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
LEFT JOIN HighValueCustomers c ON s.s_nationkey = c.c_nationkey
LEFT JOIN OrderStatistics o ON c.c_custkey = o.o_custkey
WHERE r.r_name LIKE '%East%' 
  AND (s.s_acctbal > 100000 OR EXISTS (
      SELECT 1 FROM RecursiveSupplier rs
      WHERE s.s_suppkey = rs.s_suppkey AND rs.rank <= 5
  ))
GROUP BY r.r_name 
HAVING COUNT(DISTINCT c.c_custkey) > 5
ORDER BY total_supply_cost DESC;
