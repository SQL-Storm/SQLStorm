
WITH SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost,
        COUNT(DISTINCT ps.ps_partkey) AS part_count
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
CustomerOrderSummary AS (
    SELECT
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
LineItemAnalysis AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_line_price,
        ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_linenumber) AS line_number
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate >= DATE '1997-01-01'
    GROUP BY 
        l.l_orderkey
)

SELECT 
    cs.c_name,
    ss.s_name,
    ss.total_cost,
    cs.total_orders,
    cs.total_spent,
    COALESCE(MAX(l.total_line_price), 0) AS max_line_price
FROM 
    CustomerOrderSummary cs
LEFT JOIN 
    SupplierStats ss ON ss.part_count > cs.total_orders
FULL OUTER JOIN 
    LineItemAnalysis l ON l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cs.c_custkey)
GROUP BY 
    cs.c_name, ss.s_name, ss.total_cost, cs.total_orders, cs.total_spent
HAVING 
    ss.total_cost IS NOT NULL OR cs.total_orders > 0
ORDER BY 
    cs.total_spent DESC, ss.total_cost DESC;
