
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_orderdate, 
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS order_rank
    FROM 
        orders o 
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey 
    GROUP BY 
        o.o_orderkey, o.o_orderdate
),
CustomerSummary AS (
    SELECT 
        c.c_custkey, 
        COUNT(o.o_orderkey) AS total_orders, 
        SUM(COALESCE(o.o_totalprice, 0)) AS total_spent
    FROM 
        customer c 
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey 
    GROUP BY 
        c.c_custkey
),
SuppliersWithParts AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        COUNT(DISTINCT ps.ps_partkey) AS num_parts_supplied
    FROM 
        supplier s 
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey 
    GROUP BY 
        s.s_suppkey, s.s_name
)
SELECT 
    COALESCE(cs.c_custkey, 0) AS customer_key,
    COALESCE(cs.total_orders, 0) AS total_orders,
    COALESCE(cs.total_spent, 0) AS total_spent,
    R.total_revenue,
    sp.num_parts_supplied,
    CASE 
        WHEN R.order_rank = 1 THEN 'Top Order'
        ELSE 'Regular Order'
    END AS order_type
FROM 
    RankedOrders R
FULL OUTER JOIN 
    CustomerSummary cs ON cs.total_orders > 0
FULL OUTER JOIN 
    SuppliersWithParts sp ON sp.num_parts_supplied > 0
WHERE 
    (R.total_revenue IS NOT NULL OR cs.total_orders IS NOT NULL OR sp.num_parts_supplied IS NOT NULL)
ORDER BY 
    total_spent DESC, total_revenue DESC;
