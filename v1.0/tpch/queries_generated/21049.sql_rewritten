WITH RECURSIVE RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_mfgr ORDER BY p.p_retailprice DESC) AS rn
    FROM 
        part p
    WHERE 
        p.p_size IN (SELECT DISTINCT ps.ps_availqty FROM partsupp ps WHERE ps.ps_supplycost > 100)
),
FilteredSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        COUNT(DISTINCT ps.ps_partkey) AS available_parts
    FROM 
        supplier s
    LEFT JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE 
        s.s_acctbal IS NOT NULL AND 
        NOT EXISTS (
            SELECT 1 FROM part p 
            WHERE p.p_partkey = ps.ps_partkey AND p.p_comment LIKE '%defective%'
        )
    GROUP BY 
        s.s_suppkey
    HAVING 
        COUNT(DISTINCT ps.ps_partkey) > 5
)
SELECT 
    r.r_name AS region_name,
    n.n_name AS nation_name,
    p.p_name AS part_name,
    RANK() OVER (PARTITION BY r.r_name ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank,
    COALESCE((SELECT SUM(l.l_extendedprice) 
              FROM lineitem l 
              WHERE l.l_returnflag = 'R' AND 
                    l.l_shipdate BETWEEN (cast('1998-10-01' as date) - INTERVAL '1 year') AND cast('1998-10-01' as date)), 0) AS total_returned_revenue
FROM 
    region r
JOIN 
    nation n ON r.r_regionkey = n.n_regionkey
JOIN 
    supplier s ON n.n_nationkey = s.s_nationkey
JOIN 
    FilteredSuppliers fs ON s.s_suppkey = fs.s_suppkey
JOIN 
    RankedParts p ON p.p_partkey IN (SELECT DISTINCT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = s.s_suppkey)
LEFT JOIN 
    lineitem l ON l.l_partkey = p.p_partkey
WHERE 
    EXISTS (
        SELECT 1 
        FROM orders o 
        WHERE o.o_orderkey = l.l_orderkey AND o.o_orderstatus IN ('O', 'F') 
        AND o.o_orderdate > (cast('1998-10-01' as date) - INTERVAL '6 months')
    )
GROUP BY 
    r.r_name, 
    n.n_name, 
    p.p_name
HAVING 
    revenue_rank IS NOT NULL
ORDER BY 
    region_name, 
    nation_name, 
    revenue_rank DESC, 
    total_returned_revenue;