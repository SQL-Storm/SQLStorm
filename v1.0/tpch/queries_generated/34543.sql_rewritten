WITH RECURSIVE CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
    UNION ALL
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN CustomerOrders co ON c.c_custkey = co.c_custkey
    WHERE o.o_orderdate > co.o_orderdate
),
PartSummary AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_avail_qty, AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),
OrderDetails AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate BETWEEN '1997-01-01' AND '1997-12-31'
    GROUP BY o.o_orderkey
),
RankedOrders AS (
    SELECT co.*, RANK() OVER (PARTITION BY co.c_custkey ORDER BY oc.revenue DESC) as revenue_rank
    FROM CustomerOrders co
    LEFT JOIN OrderDetails oc ON co.o_orderkey = oc.o_orderkey
)
SELECT ro.c_name, ro.o_orderdate, ro.o_totalprice, ps.total_avail_qty, ps.avg_supply_cost
FROM RankedOrders ro
JOIN PartSummary ps ON ps.total_avail_qty > (SELECT AVG(total_avail_qty) FROM PartSummary)
WHERE ro.revenue_rank <= 5
ORDER BY ro.o_totalprice DESC, ro.o_orderdate;