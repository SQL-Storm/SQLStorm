WITH SupplierDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_availqty) AS total_available_qty,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spending
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
TotalLineItems AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_quantity) AS total_quantity,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate >= DATE '1997-01-01'
    GROUP BY 
        l.l_orderkey
),
RankedOrders AS (
    SELECT 
        o.o_orderkey,
        DENSE_RANK() OVER (ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS order_rank
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        o.o_orderkey
)
SELECT 
    s.s_name AS supplier_name,
    cs.c_name AS customer_name,
    COALESCE(oi.total_quantity, 0) AS total_quantity_ordered,
    COALESCE(oi.total_revenue, 0.00) AS total_revenue,
    sd.total_available_qty,
    sd.avg_supply_cost
FROM 
    SupplierDetails sd
FULL OUTER JOIN CustomerOrders cs ON cs.order_count > 0
LEFT JOIN TotalLineItems oi ON oi.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cs.c_custkey)
JOIN RankedOrders ro ON ro.order_rank = 1
WHERE 
    sd.total_available_qty IS NOT NULL 
    OR cs.total_spending > 5000 
    OR oi.total_revenue > 10000
ORDER BY 
    sd.avg_supply_cost DESC, cs.total_spending DESC;