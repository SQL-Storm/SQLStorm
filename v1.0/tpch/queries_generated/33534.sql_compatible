
WITH RECURSIVE CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
    UNION ALL
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_orderdate, o.o_totalprice
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    JOIN CustomerOrders co ON co.o_orderkey = o.o_orderkey
),
SupplierPrice AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, ps.ps_supplycost, p.p_name, s.s_name,
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost ASC) AS rn
    FROM partsupp ps
    JOIN part p ON ps.ps_partkey = p.p_partkey
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
),
AggregateCustomer AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
)
SELECT co.c_custkey, co.c_name, co.o_orderkey, co.o_orderdate, co.o_totalprice,
       sp.p_name, sp.s_name, sp.ps_supplycost,
       COALESCE(ag.total_spent, 0) AS customer_total_spent,
       COUNT(DISTINCT sp.ps_partkey) OVER (PARTITION BY co.c_custkey) AS unique_parts_ordered
FROM CustomerOrders co
LEFT JOIN SupplierPrice sp ON sp.rn = 1
LEFT JOIN AggregateCustomer ag ON ag.c_custkey = co.c_custkey
WHERE co.o_orderdate BETWEEN DATE '1996-01-01' AND DATE '1996-12-31'
  AND sp.ps_supplycost IS NOT NULL
ORDER BY co.c_custkey, co.o_orderdate DESC;
