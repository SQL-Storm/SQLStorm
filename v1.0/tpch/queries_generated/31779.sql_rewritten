WITH RECURSIVE SupplyHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplyHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 2
),
PartInfo AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice, ps.ps_availqty,
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost DESC) AS rn,
           COALESCE(SUM(l.l_discount), 0) AS total_discount
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_retailprice, ps.ps_availqty
),
TopParts AS (
    SELECT pi.*, ROW_NUMBER() OVER (ORDER BY pi.p_retailprice DESC) AS rank
    FROM PartInfo pi
    WHERE pi.ps_availqty > 0
)
SELECT n.n_name, SUM(o.o_totalprice) AS total_sales,
       COUNT(DISTINCT c.c_custkey) AS unique_customers,
       SUM(CASE WHEN pi.total_discount > 100 THEN 1 ELSE 0 END) AS high_discount_parts
FROM nation n
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN customer c ON s.s_suppkey = c.c_nationkey
LEFT JOIN orders o ON c.c_custkey = o.o_custkey
LEFT JOIN TopParts pi ON pi.p_partkey = o.o_orderkey
GROUP BY n.n_name
HAVING SUM(o.o_totalprice) > (SELECT AVG(o_totalprice) FROM orders WHERE o_orderdate > '1997-01-01')
ORDER BY total_sales DESC
LIMIT 10;