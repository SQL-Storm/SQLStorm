WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
RecentOrders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_orderdate, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= DATEADD(MONTH, -6, cast('1998-10-01' as date))
    GROUP BY o.o_orderkey, o.o_custkey, o.o_orderdate
),
CustomerRank AS (
    SELECT c.c_custkey, c.c_name, RANK() OVER (ORDER BY SUM(ro.total_revenue) DESC) AS revenue_rank
    FROM customer c
    JOIN RecentOrders ro ON c.c_custkey = ro.o_custkey
    GROUP BY c.c_custkey, c.c_name
)
SELECT 
    n.n_name AS nation_name,
    SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
    COUNT(DISTINCT sh.s_suppkey) AS num_suppliers,
    COUNT(DISTINCT cr.c_custkey) AS num_customers,
    AVG(sh.level) AS avg_supplier_level,
    STRING_AGG(DISTINCT cr.c_name, ', ') AS customer_names
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
LEFT JOIN SupplierHierarchy sh ON sh.s_nationkey = n.n_nationkey
LEFT JOIN CustomerRank cr ON cr.revenue_rank <= 10
WHERE (s.s_acctbal IS NOT NULL AND s.s_acctbal > 0)
   OR (cr.c_custkey IS NULL)
GROUP BY n.n_name
ORDER BY total_supply_cost DESC;