WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderdate DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1998-01-01'
),
CustomerTotal AS (
    SELECT 
        c.c_custkey,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey
),
SupplierStats AS (
    SELECT 
        s.s_suppkey,
        COUNT(DISTINCT ps.ps_partkey) AS total_parts,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey
),
LineItemAnalysis AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue,
        COUNT(DISTINCT l.l_partkey) AS unique_parts
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate >= DATE '1997-01-01'
    GROUP BY 
        l.l_orderkey
)
SELECT 
    c.c_name,
    c.c_acctbal,
    ct.total_spent,
    r.order_rank,
    COALESCE(s.total_parts, 0) AS total_supplier_parts,
    COALESCE(s.avg_supply_cost, 0) AS avg_supplier_cost,
    la.net_revenue,
    la.unique_parts
FROM 
    customer c
LEFT JOIN 
    CustomerTotal ct ON c.c_custkey = ct.c_custkey
LEFT JOIN 
    RankedOrders r ON EXISTS (
        SELECT 1 
        FROM orders o 
        WHERE o.o_custkey = c.c_custkey 
          AND o.o_orderkey = r.o_orderkey
    )
LEFT JOIN 
    SupplierStats s ON s.s_suppkey = (
        SELECT TOP 1 ps.ps_suppkey 
        FROM partsupp ps 
        JOIN lineitem l ON ps.ps_partkey = l.l_partkey
        WHERE l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = c.c_custkey)
        ORDER BY l.l_quantity DESC
    )
LEFT JOIN 
    LineItemAnalysis la ON la.l_orderkey IN (
        SELECT o.o_orderkey 
        FROM orders o 
        WHERE o.o_custkey = c.c_custkey
    )
WHERE 
    c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)
ORDER BY 
    ct.total_spent DESC, 
    c.c_name;