WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (
        SELECT AVG(s1.s_acctbal)
        FROM supplier s1
        WHERE s1.s_nationkey = s.s_nationkey
    )
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
DateAggregates AS (
    SELECT l_orderkey,
           SUM(l_extendedprice * (1 - l_discount)) AS total_revenue,
           COUNT(*) AS total_items
    FROM lineitem
    WHERE l_shipdate >= DATE '1997-01-01'
    GROUP BY l_orderkey
),
TopNOrders AS (
    SELECT o.o_orderkey, da.total_revenue, da.total_items,
           ROW_NUMBER() OVER (ORDER BY da.total_revenue DESC) AS rn
    FROM orders o
    JOIN DateAggregates da ON o.o_orderkey = da.l_orderkey
    WHERE o.o_orderstatus = 'O'
)
SELECT p.p_name, p.p_brand, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost,
       COUNT(DISTINCT o.o_orderkey) AS order_count,
       AVG(s.s_acctbal) AS avg_supplier_balance,
       COUNT(DISTINCT c.c_custkey) AS unique_customers,
       MAX(COALESCE(o.o_totalprice, 0)) AS max_order_price
FROM part p
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN lineitem l ON l.l_partkey = p.p_partkey
LEFT JOIN orders o ON l.l_orderkey = o.o_orderkey
LEFT JOIN customer c ON o.o_custkey = c.c_custkey
WHERE (p.p_size < 15 OR p.p_container LIKE 'Bottle%')
  AND s.s_suppkey IN (SELECT s_suppkey FROM SupplierHierarchy WHERE level >= 1)
  AND (o.o_orderkey IS NULL OR o.o_orderpriority != '5-LOW')
GROUP BY p.p_name, p.p_brand
HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 1000
ORDER BY total_cost DESC
LIMIT 10;