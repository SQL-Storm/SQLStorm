
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_totalprice,
        o.o_orderdate,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rn
    FROM orders o
    WHERE o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
), 
SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supplycost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
), 
CustomerStats AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_acctbal IS NOT NULL
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > 1000.00
)
SELECT 
    c.c_name,
    c.order_count,
    c.total_spent,
    COALESCE(s.total_supplycost, 0) AS supplier_total_cost,
    ro.o_orderdate,
    ro.o_orderstatus
FROM CustomerStats c
LEFT JOIN SupplierInfo s ON c.order_count > 5
LEFT JOIN RankedOrders ro ON ro.o_orderkey = (
    SELECT o.o_orderkey 
    FROM orders o 
    WHERE o.o_custkey = c.c_custkey 
    ORDER BY o.o_totalprice DESC 
    FETCH FIRST 1 ROW ONLY
)
WHERE ro.rn <= 10
ORDER BY c.total_spent DESC, supplier_total_cost DESC;
