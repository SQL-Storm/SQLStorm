
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > 1000
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > 1000 AND sh.level < 3
),
CustomerSummary AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent, COUNT(o.o_orderkey) AS order_count
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
FrequentSuppliers AS (
    SELECT ps.ps_suppkey, COUNT(DISTINCT ps.ps_partkey) AS part_count
    FROM partsupp ps
    GROUP BY ps.ps_suppkey
    HAVING COUNT(DISTINCT ps.ps_partkey) > 5
),
HighValueOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, c.c_name, ROW_NUMBER() OVER (ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE o.o_orderstatus = 'O'
),
UnsoldParts AS (
    SELECT p.p_partkey, p.p_name
    FROM part p
    LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
    WHERE l.l_partkey IS NULL
)
SELECT 
    cs.c_name AS customer_name,
    STRING_AGG(DISTINCT sh.s_name, ', ') AS suppliers,
    SUM(o.o_totalprice) AS total_orders,
    COUNT(DISTINCT o.o_orderkey) AS order_count,
    MAX(o.o_orderdate) AS last_order_date,
    CASE 
        WHEN NULLIF(SUM(o.o_totalprice), 0) IS NULL THEN 'No Orders'
        ELSE 'Orders Exist'
    END AS order_status,
    STRING_AGG(DISTINCT p.p_name, ', ') AS unsold_parts
FROM 
    CustomerSummary cs
JOIN 
    HighValueOrders o ON cs.c_custkey = o.o_orderkey
LEFT JOIN 
    SupplierHierarchy sh ON sh.s_nationkey = (SELECT c.c_nationkey FROM customer c WHERE c.c_custkey = cs.c_custkey)
LEFT JOIN 
    UnsoldParts p ON TRUE
GROUP BY 
    cs.c_custkey, cs.c_name
HAVING 
    SUM(o.o_totalprice) > 1000
ORDER BY 
    total_orders DESC;
