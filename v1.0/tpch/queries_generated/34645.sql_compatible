
WITH RECURSIVE TopSuppliers AS (
    SELECT s.s_suppkey,
           s.s_name,
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 10000
    UNION ALL
    SELECT s.s_suppkey,
           s.s_name,
           SUM(ps.ps_supplycost * ps.ps_availqty)
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN TopSuppliers ts ON s.s_suppkey <> ts.s_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING SUM(ps.ps_supplycost * ps.ps_availqty) > 0
), OrderDetails AS (
    SELECT o.o_orderkey,
           o.o_orderstatus,
           o.o_totalprice,
           COUNT(DISTINCT l.l_partkey) AS part_count,
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_returnflag = 'N'
    GROUP BY o.o_orderkey, o.o_orderstatus, o.o_totalprice
), CustomerRegions AS (
    SELECT c.c_custkey,
           c.c_name,
           r.r_name AS region_name,
           SUM(COALESCE(o.o_totalprice, 0)) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN nation n ON c.c_nationkey = n.n_nationkey
    LEFT JOIN region r ON n.n_regionkey = r.r_regionkey
    GROUP BY c.c_custkey, c.c_name, r.r_name
)
SELECT cr.region_name,
       COUNT(DISTINCT cr.c_custkey) AS customer_count,
       SUM(od.total_price) AS total_revenue,
       AVG(od.total_price) AS avg_order_value,
       MAX(ts.total_supply_cost) AS max_supplier_cost
FROM CustomerRegions cr
JOIN OrderDetails od ON cr.c_custkey = od.o_orderkey
JOIN TopSuppliers ts ON ts.s_suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps JOIN lineitem l ON ps.ps_partkey = l.l_partkey)
WHERE cr.total_spent IS NOT NULL
GROUP BY cr.region_name
ORDER BY total_revenue DESC
LIMIT 10;
