WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_supplierkey = sh.s_suppkey
), 

RankedLineItems AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_suppkey, l.l_linenumber, 
           l.l_quantity, l.l_extendedprice, 
           ROW_NUMBER() OVER(PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) as rn
    FROM lineitem l
    WHERE l.l_discount > 0.05
), 

SupplierCosts AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, 
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost,
           ROW_NUMBER() OVER(PARTITION BY ps.ps_partkey ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS rank
    FROM partsupp ps
    GROUP BY ps.ps_partkey, ps.ps_suppkey
)

SELECT n.n_name, 
       COUNT(DISTINCT c.c_custkey) AS customer_count,
       SUM(o.o_totalprice) AS total_revenue,
       SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_sales,
       MAX(CASE WHEN l.l_returnflag = 'R' THEN l.l_quantity ELSE NULL END) AS max_returned_quantity,
       COALESCE(SUM(s.s_acctbal), 0) AS total_supplier_balance
FROM customer c
LEFT JOIN orders o ON c.c_custkey = o.o_custkey
LEFT JOIN lineitem l ON o.o_orderkey = l.l_orderkey
LEFT JOIN supplier s ON l.l_suppkey = s.s_suppkey
JOIN nation n ON s.s_nationkey = n.n_nationkey
LEFT JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
JOIN SupplierCosts sc ON l.l_partkey = sc.ps_partkey AND l.l_suppkey = sc.ps_suppkey
WHERE o.o_orderdate >= DATE '1996-01-01' 
  AND (l.l_discount BETWEEN 0.05 AND 0.15 OR l.l_returnflag = 'N')
GROUP BY n.n_name
HAVING SUM(o.o_totalprice) > 10000
ORDER BY total_revenue DESC
LIMIT 10;