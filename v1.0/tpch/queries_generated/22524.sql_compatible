
WITH ranked_parts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_size ORDER BY p.p_retailprice DESC) AS price_rank
    FROM 
        part p
    WHERE 
        p.p_size IN (SELECT DISTINCT p_size FROM part WHERE p_retailprice > 100)
), 
supplier_data AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_availqty) AS total_available,
        MAX(s.s_acctbal) AS max_balance
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
), 
customer_orders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
), 
lineitem_summary AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
        AVG(l.l_quantity) AS avg_quantity,
        MAX(l.l_tax) AS highest_tax
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate BETWEEN '1996-01-01' AND '1998-10-01'
    GROUP BY 
        l.l_orderkey
)
SELECT 
    rp.p_name,
    rp.price_rank,
    COALESCE(sd.total_available, 0) AS total_available,
    COALESCE(sd.max_balance, 0) AS max_balance,
    SUM(co.order_count) AS total_orders,
    SUM(co.total_spent) AS total_spent,
    COUNT(DISTINCT ls.l_orderkey) AS unique_orders
FROM 
    ranked_parts rp
LEFT JOIN 
    supplier_data sd ON rp.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = sd.s_suppkey)
LEFT JOIN 
    customer_orders co ON rp.p_partkey IN (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = co.c_custkey))
LEFT JOIN 
    lineitem_summary ls ON ls.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = co.c_custkey)
WHERE 
    rp.price_rank < 5
GROUP BY 
    rp.p_name, rp.price_rank, sd.total_available, sd.max_balance
ORDER BY 
    total_spent DESC NULLS LAST;
