
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_suppkey
),

order_summary AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(DISTINCT c.c_custkey) AS unique_customers
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN customer c ON o.o_custkey = c.c_custkey
    GROUP BY o.o_orderkey
),

top_orders AS (
    SELECT o.o_orderkey, o.total_revenue, RANK() OVER (ORDER BY o.total_revenue DESC) AS revenue_rank
    FROM order_summary o
),

part_supplier_summary AS (
    SELECT p.p_partkey, p.p_name, COUNT(DISTINCT ps.ps_suppkey) AS supplier_count,
           SUM(ps.ps_availqty * ps.ps_supplycost) AS total_supplier_value
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
),

final_summary AS (
    SELECT o.o_orderkey, o.total_revenue, p.p_name, p.supplier_count,
           COALESCE(h.level, -1) AS supplier_hierarchy_level
    FROM top_orders o
    JOIN part_supplier_summary p ON o.o_orderkey = (SELECT MAX(o2.o_orderkey) FROM orders o2 WHERE o2.o_orderkey <= o.o_orderkey)
    LEFT JOIN supplier_hierarchy h ON p.supplier_count > h.level
)

SELECT f.o_orderkey, f.total_revenue, f.p_name, f.supplier_count, f.supplier_hierarchy_level
FROM final_summary f
WHERE f.supplier_hierarchy_level IS NOT NULL OR f.supplier_count > 0
ORDER BY f.total_revenue DESC, f.supplier_count DESC;
