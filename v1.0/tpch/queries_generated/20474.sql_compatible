
WITH RECURSIVE SupplierHierarchy AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_nationkey, 
        s.s_acctbal,
        1 AS level
    FROM 
        supplier s
    WHERE 
        s.s_acctbal IS NOT NULL

    UNION ALL

    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_nationkey, 
        sh.s_acctbal + (s.s_acctbal * 0.1) AS s_acctbal,
        level + 1
    FROM 
        supplier s
    JOIN 
        SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE 
        level < 3
)

SELECT 
    r.r_name AS Region,
    n.n_name AS Nation,
    COUNT(DISTINCT c.c_custkey) AS CustomerCount,
    SUM(CASE 
        WHEN l.l_discount IS NULL OR l.l_discount = 0 THEN l.l_extendedprice
        ELSE l.l_extendedprice * (1 - l.l_discount)
    END) AS TotalSales,
    AVG(CASE 
        WHEN l.l_returnflag = 'R' THEN l.l_quantity * l.l_extendedprice
        ELSE NULL
    END) AS AvgReturnSales,
    MAX(p.p_retailprice) FILTER (WHERE p.p_size > 10) AS HighestRetailPrice,
    MIN(ps.ps_supplycost) FILTER (WHERE ps.ps_availqty > 0) AS LowestSupplyCost,
    COALESCE(SUM(sh.s_acctbal), 0) AS TotalSupplierBalance
FROM 
    region r
JOIN 
    nation n ON r.r_regionkey = n.n_regionkey
JOIN 
    customer c ON c.c_nationkey = n.n_nationkey
LEFT JOIN 
    orders o ON o.o_custkey = c.c_custkey
LEFT JOIN 
    lineitem l ON l.l_orderkey = o.o_orderkey
LEFT JOIN 
    partsupp ps ON ps.ps_partkey = l.l_partkey
LEFT JOIN 
    part p ON p.p_partkey = ps.ps_partkey
LEFT JOIN 
    SupplierHierarchy sh ON sh.s_nationkey = n.n_nationkey
GROUP BY 
    r.r_name, n.n_name
HAVING 
    COUNT(DISTINCT c.c_custkey) > 10 
    AND SUM(l.l_extendedprice) IS NOT NULL
ORDER BY 
    TotalSales DESC, CustomerCount ASC;
