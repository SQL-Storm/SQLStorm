WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rn
    FROM 
        part p
    WHERE 
        p.p_size > (SELECT AVG(p2.p_size) FROM part p2 WHERE p2.p_size IS NOT NULL)
), SupplierStats AS (
    SELECT 
        s.s_suppkey,
        SUM(p.ps_supplycost * p.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT p.ps_partkey) AS total_parts
    FROM 
        supplier s
    JOIN 
        partsupp p ON s.s_suppkey = p.ps_suppkey
    GROUP BY 
        s.s_suppkey
), CustomerOrderSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        MAX(o.o_orderdate) AS last_order_date
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey 
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        SUM(o.o_totalprice) > (SELECT AVG(o2.o_totalprice) FROM orders o2 WHERE o2.o_totalprice IS NOT NULL)
), OrderLines AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate > '1996-01-01'
    GROUP BY 
        l.l_orderkey
)
SELECT 
    ps.s_suppkey,
    ps.total_supply_cost,
    ps.total_parts,
    cus.c_custkey,
    cus.total_spent,
    cus.order_count,
    cus.last_order_date,
    p.p_partkey,
    p.p_name,
    COALESCE(ol.net_revenue, 0) AS order_revenue
FROM 
    SupplierStats ps
FULL OUTER JOIN 
    CustomerOrderSummary cus ON ps.total_parts = cus.order_count
LEFT JOIN 
    RankedParts p ON p.rn = 1
LEFT JOIN 
    OrderLines ol ON ol.l_orderkey = (SELECT MAX(o.o_orderkey) FROM orders o WHERE o.o_orderkey = ol.l_orderkey)
WHERE 
    (ps.total_supply_cost IS NULL OR ps.total_supply_cost > 500000)
    AND (cus.last_order_date IS NOT NULL OR cus.total_spent < 100.00)
ORDER BY 
    RAND() ASC
LIMIT 10;