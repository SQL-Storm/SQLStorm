
WITH RECURSIVE PartSupplierHierarchy AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        ps.ps_availqty,
        ps.ps_supplycost,
        1 AS level
    FROM 
        partsupp ps
    WHERE 
        ps.ps_availqty > 0

    UNION ALL

    SELECT 
        p.ps_partkey,
        p.ps_suppkey,
        p.ps_availqty,
        p.ps_supplycost,
        h.level + 1
    FROM 
        partsupp p
    JOIN 
        PartSupplierHierarchy h ON p.ps_partkey = h.ps_partkey
    WHERE 
        p.ps_availqty > 0 AND h.level < 10
),

AdvancedAggregations AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        MAX(ps.ps_supplycost) AS max_supply_cost
    FROM 
        part p
    LEFT JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
    LEFT JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY 
        p.p_partkey, p.p_name
),

CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        o.o_orderstatus IN ('O', 'F') 
    GROUP BY 
        c.c_custkey, c.c_name
),

RankedCustomers AS (
    SELECT 
        co.c_custkey,
        co.c_name,
        co.order_count,
        co.total_spent,
        RANK() OVER (ORDER BY co.total_spent DESC) AS rank
    FROM 
        CustomerOrders co
)

SELECT 
    p.p_partkey,
    p.p_name,
    a.supplier_count,
    a.total_supply_cost,
    a.max_supply_cost,
    rc.c_custkey,
    rc.c_name,
    rc.order_count,
    rc.total_spent
FROM 
    AdvancedAggregations a
JOIN 
    PartSupplierHierarchy h ON a.p_partkey = h.ps_partkey
LEFT JOIN 
    RankedCustomers rc ON rc.rank <= 10
WHERE 
    a.total_supply_cost IS NOT NULL
ORDER BY 
    a.total_supply_cost DESC, rc.total_spent DESC
LIMIT 50 OFFSET 0;
