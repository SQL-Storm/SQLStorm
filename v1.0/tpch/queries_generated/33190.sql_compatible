
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'USA')
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count, 
           SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'USA')
    GROUP BY c.c_custkey, c.c_name
),
PartSuppliers AS (
    SELECT p.p_partkey, COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey
)
SELECT 
    n.n_name,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    AVG(co.total_spent) AS avg_spent,
    SUM(ps.ps_supplycost * ps.availqty) AS total_supply_cost,
    STRING_AGG(DISTINCT p.p_name, ', ') AS part_names,
    MAX(CASE WHEN l.l_discount > 0.1 THEN l.l_extendedprice END) AS max_discount_price
FROM nation n
JOIN customer c ON n.n_nationkey = c.c_nationkey
LEFT JOIN CustomerOrders co ON c.c_custkey = co.c_custkey
LEFT JOIN partsupp ps ON c.c_nationkey = ps.ps_suppkey
LEFT JOIN part p ON ps.ps_partkey = p.p_partkey
LEFT JOIN lineitem l ON l.l_partkey = p.p_partkey
WHERE n.n_name IS NOT NULL
GROUP BY n.n_name
HAVING COUNT(DISTINCT c.c_custkey) > 5
ORDER BY avg_spent DESC
LIMIT 10;
