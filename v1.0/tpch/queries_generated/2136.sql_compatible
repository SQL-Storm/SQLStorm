
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        o.o_orderstatus,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderdate DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderdate >= DATEADD(month, -12, CURRENT_TIMESTAMP)
),
CustomerStats AS (
    SELECT 
        c.c_custkey,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey
),
SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
)
SELECT 
    r.r_name,
    COALESCE(cs.total_orders, 0) AS total_orders,
    cs.total_spent,
    s.total_cost,
    o.o_orderstatus,
    COUNT(DISTINCT p.p_partkey) AS total_parts_supplied,
    (SELECT AVG(l.l_extendedprice) 
     FROM lineitem l 
     WHERE l.l_orderkey IN (SELECT o2.o_orderkey FROM orders o2 WHERE o2.o_orderdate >= DATEADD(month, -12, CURRENT_TIMESTAMP))
     ) AS avg_order_value
FROM region r
LEFT JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
LEFT JOIN CustomerStats cs ON c.c_custkey = cs.c_custkey
LEFT JOIN lineitem l ON c.c_custkey = l.l_suppkey
LEFT JOIN supplier s ON s.s_suppkey = l.l_suppkey
LEFT JOIN RankedOrders o ON o.o_orderkey = l.l_orderkey
LEFT JOIN part p ON p.p_partkey = l.l_partkey
WHERE s.s_acctbal IS NOT NULL AND o.o_orderstatus IN ('F', 'O')
GROUP BY r.r_name, cs.total_orders, cs.total_spent, s.total_cost, o.o_orderstatus
HAVING COUNT(DISTINCT p.p_partkey) > 5
ORDER BY r.r_name, total_spent DESC;
