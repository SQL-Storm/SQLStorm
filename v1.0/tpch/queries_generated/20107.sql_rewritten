WITH ranked_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS price_rank
    FROM orders o
    WHERE o.o_orderdate BETWEEN '1996-01-01' AND '1997-01-01'
), supplier_summary AS (
    SELECT 
        s.s_suppkey,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        COUNT(DISTINCT ps.ps_partkey) AS distinct_parts
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey
), high_cost_suppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        ss.total_supply_cost
    FROM supplier s
    JOIN supplier_summary ss ON s.s_suppkey = ss.s_suppkey
    WHERE ss.total_supply_cost > (SELECT AVG(total_supply_cost) FROM supplier_summary)
), order_summary AS (
    SELECT 
        r.n_name AS nation_name,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_revenue
    FROM ranked_orders ro
    JOIN customer c ON c.c_custkey = (SELECT o.o_custkey FROM orders o WHERE o.o_orderkey = ro.o_orderkey)
    JOIN nation r ON c.c_nationkey = r.n_nationkey
    GROUP BY r.n_name
)
SELECT 
    os.nation_name,
    os.order_count,
    os.total_revenue,
    COALESCE(hs.total_supply_cost, 0) AS supplier_cost,
    os.total_revenue - COALESCE(hs.total_supply_cost, 0) AS revenue_minus_supplier_cost,
    CASE 
        WHEN os.total_revenue IS NULL OR hs.total_supply_cost IS NULL THEN 'Check data'
        ELSE 'Data consistent'
    END AS data_consistency,
    ROW_NUMBER() OVER (ORDER BY os.total_revenue DESC) AS revenue_rank
FROM order_summary os
LEFT JOIN high_cost_suppliers hs ON os.nation_name = hs.s_name
WHERE os.order_count > 5 
AND (os.total_revenue IS NOT NULL OR hs.total_supply_cost IS NOT NULL);