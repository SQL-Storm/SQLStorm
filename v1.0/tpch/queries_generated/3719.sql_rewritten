WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY s.s_acctbal DESC) AS rank
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        o.o_orderkey,
        o.o_totalprice,
        SUM(l.l_discount) AS total_discount
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        c.c_custkey, c.c_name, o.o_orderkey, o.o_totalprice
),
TopParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        lineitem l
    JOIN 
        part p ON l.l_partkey = p.p_partkey
    WHERE 
        l.l_shipdate >= DATE '1996-01-01' AND l.l_shipdate < DATE '1997-01-01'
    GROUP BY 
        p.p_partkey, p.p_name
    ORDER BY 
        total_revenue DESC
    LIMIT 10
)
SELECT 
    c.c_custkey,
    c.c_name,
    COALESCE(tp.total_revenue, 0) AS total_revenue,
    COALESCE(rs.s_name, 'No Supplier') AS supplier_name,
    COALESCE(rs.s_acctbal, 0) AS supplier_acctbal,
    COALESCE(co.total_discount, 0) AS total_discount,
    CASE 
        WHEN co.total_discount > 100 THEN 'High Discount'
        WHEN co.total_discount BETWEEN 50 AND 100 THEN 'Medium Discount'
        ELSE 'Low Discount'
    END AS discount_category
FROM 
    CustomerOrders co
LEFT JOIN 
    TopParts tp ON tp.total_revenue > 0 
        AND EXISTS (SELECT 1 FROM RankedSuppliers rs WHERE rs.rank = 1 AND rs.s_suppkey = co.o_orderkey)
LEFT JOIN 
    RankedSuppliers rs ON rs.s_suppkey = co.o_orderkey
ORDER BY 
    c.c_custkey;