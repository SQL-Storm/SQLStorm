WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_totalprice, o.o_orderdate,
           ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY o.o_orderdate DESC) AS rn
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
),
FilteredLineItems AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_suppkey, 
           l.l_quantity, l.l_extendedprice,
           CASE 
               WHEN l.l_discount > 0.1 THEN l.l_extendedprice * (1 - l.l_discount)
               ELSE l.l_extendedprice
           END AS final_price
    FROM lineitem l
    WHERE l.l_shipdate > '1996-01-01' AND l.l_returnflag = 'N'
),
AggregateData AS (
    SELECT ps.ps_partkey, SUM(pl.final_price) AS total_revenue, AVG(pl.l_quantity) AS avg_quantity
    FROM partsupp ps
    LEFT JOIN FilteredLineItems pl ON ps.ps_partkey = pl.l_partkey
    GROUP BY ps.ps_partkey
)
SELECT n.n_name, 
       SUM(ad.total_revenue) AS total_revenue,
       COUNT(DISTINCT co.c_custkey) AS customer_count,
       MAX(ad.avg_quantity) AS max_avg_quantity
FROM nation n
JOIN supplier s ON n.n_nationkey = s.s_nationkey
JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
JOIN AggregateData ad ON ad.ps_partkey IN (SELECT ps_partkey FROM partsupp WHERE ps_suppkey = s.s_suppkey)
LEFT JOIN CustomerOrders co ON co.o_orderkey IN (SELECT l_orderkey FROM lineitem WHERE l_suppkey = s.s_suppkey)
GROUP BY n.n_name
HAVING SUM(ad.total_revenue) IS NOT NULL
ORDER BY total_revenue DESC;