
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 
           0 AS level, 
           s.s_name AS full_path
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier) 

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.n_nationkey, s.s_acctbal, 
           sh.level + 1, 
           CONCAT(sh.full_path, ' -> ', s.s_name)
    FROM supplier_hierarchy sh
    JOIN supplier s ON sh.s_nationkey = s.s_nationkey
    WHERE sh.level < 5
), 

order_summary AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate, 
           RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS price_rank
    FROM orders o
    WHERE o.o_orderdate >= '1997-01-01' AND o.o_orderdate <= '1997-12-31'
), 

product_availability AS (
    SELECT p.p_partkey, 
           SUM(ps.ps_availqty) AS total_available_qty,
           COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM part p 
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey
)

SELECT 
    p.p_name, 
    pa.total_available_qty, 
    pa.supplier_count, 
    os.o_orderkey, 
    os.o_totalprice, 
    sh.full_path,
    CASE 
        WHEN os.o_totalprice > 10000 THEN 'Premium'
        WHEN os.o_totalprice BETWEEN 5000 AND 10000 THEN 'Standard'
        ELSE 'Basic'
    END AS price_category,
    CONCAT('Order Date: ', TO_CHAR(os.o_orderdate, 'YYYY-MM-DD')) AS order_date_info
FROM product_availability pa
JOIN part p ON p.p_partkey = pa.p_partkey
LEFT JOIN order_summary os ON os.price_rank <= 10 AND pa.total_available_qty > 0
LEFT JOIN supplier_hierarchy sh ON sh.s_suppkey = (SELECT ps.ps_suppkey FROM partsupp ps WHERE ps.ps_partkey = pa.p_partkey LIMIT 1)
WHERE pa.total_available_qty IS NOT NULL
ORDER BY pa.total_available_qty DESC, os.o_totalprice ASC
LIMIT 50;
