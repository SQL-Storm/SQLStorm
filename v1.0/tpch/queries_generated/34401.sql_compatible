
WITH RECURSIVE PriceRankings AS (
    SELECT 
        ps_partkey,
        ps_suppkey,
        ps_availqty,
        ps_supplycost,
        RANK() OVER (PARTITION BY ps_partkey ORDER BY ps_supplycost DESC) AS cost_rank
    FROM 
        partsupp
),
TopSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        r.r_name AS region_name
    FROM 
        supplier s
    INNER JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    INNER JOIN 
        region r ON n.n_regionkey = r.r_regionkey
    WHERE 
        s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
),
CustomerOrders AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        DENSE_RANK() OVER (PARTITION BY c.c_custkey ORDER BY o.o_orderdate DESC) AS order_rank
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
),
QueryResult AS (
    SELECT 
        p.p_name,
        COUNT(DISTINCT lo.l_orderkey) AS total_orders,
        SUM(lo.l_extendedprice * (1 - lo.l_discount)) AS total_revenue
    FROM 
        part p
    LEFT JOIN 
        lineitem lo ON p.p_partkey = lo.l_partkey
    INNER JOIN 
        CustomerOrders co ON co.o_orderkey = lo.l_orderkey
    GROUP BY 
        p.p_name
    HAVING 
        SUM(lo.l_extendedprice * (1 - lo.l_discount)) > 1000
)
SELECT 
    q.p_name, 
    COALESCE(q.total_orders, 0) AS total_orders, 
    COALESCE(q.total_revenue, 0) AS total_revenue,
    ts.s_name AS top_supplier_name,
    ts.region_name
FROM 
    QueryResult q
LEFT JOIN 
    PriceRankings pr ON pr.ps_partkey = q.p_partkey AND pr.cost_rank = 1
LEFT JOIN 
    TopSuppliers ts ON pr.ps_suppkey = ts.s_suppkey
ORDER BY 
    total_revenue DESC
LIMIT 10;
