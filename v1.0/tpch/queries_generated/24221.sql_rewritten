WITH recursive_part_sales AS (
    SELECT
        p.p_partkey,
        p.p_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales
    FROM
        part p
    JOIN
        lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY
        p.p_partkey, p.p_name
),
top_sales_part AS (
    SELECT
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        ROW_NUMBER() OVER (ORDER BY SUM(l.l_extendedprice) DESC) AS sales_rank
    FROM
        recursive_part_sales ps
    LEFT JOIN
        partsupp ps ON ps.p_partkey = ps.p_partkey
    LEFT JOIN
        lineitem l ON l.l_partkey = ps.p_partkey
    GROUP BY
        p.p_partkey, p.p_name, ps.ps_availqty, ps.ps_supplycost
    HAVING
        SUM(l.l_extendedprice) > 50000 OR COUNT(DISTINCT l.l_orderkey) > 10
)
SELECT
    n.n_name,
    COALESCE(SUM(case when t.sales_rank <= 5 then t.total_sales end), 0) AS top_5_sales,
    COUNT(DISTINCT c.c_custkey) AS customer_count
FROM
    top_sales_part t
JOIN
    supplier s ON s.s_suppkey = t.p_partkey
JOIN
    nation n ON s.s_nationkey = n.n_nationkey
JOIN
    customer c ON c.c_nationkey = n.n_nationkey 
LEFT JOIN
    orders o ON o.o_custkey = c.c_custkey AND o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
WHERE
    n.r_regionkey = (SELECT MAX(r_regionkey) FROM region) 
    AND (t.total_sales IS NOT NULL OR t.total_sales < 100000)
GROUP BY
    n.n_name
ORDER BY
    top_5_sales DESC
OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;