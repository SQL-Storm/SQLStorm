WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 
           NULL AS parent_suppkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 
           sh.s_suppkey AS parent_suppkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON sh.s_nationkey = s.s_nationkey
    WHERE s.s_acctbal < sh.s_acctbal 
      AND sh.level < 5
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count, 
           SUM(o.o_totalprice) AS total_spent,
           ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(o.o_totalprice) DESC) AS rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_nationkey
),
TopCustomers AS (
    SELECT c.c_nationkey, COUNT(*) AS top_count
    FROM CustomerOrders c
    WHERE c.rank <= 3
    GROUP BY c.c_nationkey
),
PartSuppliers AS (
    SELECT ps.ps_partkey, 
           SUM(CASE 
               WHEN l.l_discount > 0.05 THEN l.l_extendedprice * (1 - l.l_discount) 
               ELSE 0 
           END) AS discounted_total
    FROM partsupp ps
    JOIN lineitem l ON ps.ps_partkey = l.l_partkey
    GROUP BY ps.ps_partkey
),
ComplexQuery AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        COALESCE(MAX(s.s_name), 'No Supplier') AS supplier_name,
        SUM(ps.ps_availqty) AS total_available,
        AVG(ps.ps_supplycost) AS average_supply_cost,
        COUNT(DISTINCT c.c_custkey) AS unique_customers,
        (SELECT COUNT(*) FROM region r) AS total_regions
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    LEFT JOIN CustomerOrders c ON c.c_custkey = (SELECT o.o_custkey FROM orders o WHERE o.o_orderkey = (SELECT MIN(o2.o_orderkey) FROM orders o2 WHERE o2.o_orderstatus = 'O' AND o2.o_orderdate >= '1997-01-01' AND o2.o_orderdate <= '1997-12-31'))
    WHERE p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2)
    GROUP BY p.p_partkey, p.p_name
)
SELECT *,
       CASE 
           WHEN discounted_total IS NULL THEN 'No Discounts Available'
           ELSE CONCAT('Total Discounted: ', discounted_total)
       END AS discount_message
FROM ComplexQuery cq
LEFT JOIN PartSuppliers ps ON ps.ps_partkey = cq.p_partkey
FULL OUTER JOIN TopCustomers tc ON tc.c_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_name = 'ASIA')
WHERE total_available IS NOT NULL OR unique_customers > 0
ORDER BY cq.unique_customers DESC, cq.average_supply_cost;