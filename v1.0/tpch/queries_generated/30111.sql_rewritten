WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal IS NOT NULL AND sh.level < 5
),
RankedOrders AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, 
           ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM orders o
    WHERE o.o_orderdate >= '1997-01-01'
),
PartSupplierAggregates AS (
    SELECT ps.ps_partkey, SUM(ps.ps_availqty) AS total_available_qty,
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
TopSuppliers AS (
    SELECT s.s_suppkey, s.s_name, 
           COALESCE(SUM(l.l_extendedprice * (1 - l.l_discount)), 0) AS total_sales
    FROM supplier s
    LEFT JOIN lineitem l ON s.s_suppkey = l.l_suppkey
    GROUP BY s.s_suppkey, s.s_name
    HAVING total_sales > 20000
)
SELECT 
    p.p_name,
    rh.total_available_qty,
    ts.total_sales,
    RANK() OVER (ORDER BY ts.total_sales DESC) AS sales_rank,
    CASE 
        WHEN ts.total_sales < 10000 THEN 'Low'
        WHEN ts.total_sales BETWEEN 10000 AND 50000 THEN 'Medium'
        ELSE 'High' 
    END AS sales_category
FROM part p
LEFT JOIN PartSupplierAggregates rh ON p.p_partkey = rh.ps_partkey
JOIN TopSuppliers ts ON rh.ps_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = ts.s_suppkey)
WHERE p.p_retailprice BETWEEN 100 AND 500 
AND EXISTS (SELECT 1 FROM supplier s WHERE s.s_nationkey = ts.s_nationkey)
ORDER BY sales_rank, p.p_name;