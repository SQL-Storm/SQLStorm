
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
top_customers AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(o.o_totalprice) > (SELECT AVG(o.o_totalprice) FROM orders)
),
part_supplier_info AS (
    SELECT p.p_partkey, p.p_name, ps.ps_supplycost, ps.ps_availqty,
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost) AS rank
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE ps.ps_availqty > 0
)
SELECT 
    tc.c_name AS customer_name,
    ph.p_name AS part_name,
    ph.ps_supplycost AS supply_cost,
    ph.ps_availqty AS available_qty,
    sh.level AS supplier_level
FROM top_customers tc
JOIN lineitem l ON tc.c_custkey = l.l_orderkey
JOIN part_supplier_info ph ON l.l_partkey = ph.p_partkey AND ph.rank = 1
LEFT JOIN supplier_hierarchy sh ON sh.s_nationkey = tc.c_nationkey
WHERE ph.ps_availqty > 10
  AND ph.ps_supplycost < (SELECT AVG(ps.ps_supplycost) FROM partsupp)
ORDER BY tc.total_spent DESC, ph.ps_supplycost ASC;
