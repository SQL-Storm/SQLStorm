
WITH RECURSIVE customer_orders AS (
    SELECT c.c_custkey, 
           c.c_name, 
           SUM(o.o_totalprice) AS total_spent, 
           ROW_NUMBER() OVER (PARTITION BY c.c_custkey ORDER BY SUM(o.o_totalprice) DESC) AS order_rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
), 
supplier_summary AS (
    SELECT s.s_suppkey,
           s.s_name,
           SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
           COUNT(DISTINCT ps.ps_partkey) AS parts_supplied
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
high_value_suppliers AS (
    SELECT s.s_suppkey,
           s.s_name,
           s.s_acctbal
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
),
ranked_lineitems AS (
    SELECT l.l_orderkey,
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_value,
           RANK() OVER (PARTITION BY l.l_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS line_item_rank
    FROM lineitem l
    WHERE l.l_shipdate >= DATE '1996-01-01' AND l.l_shipdate <= DATE '1996-12-31'
    GROUP BY l.l_orderkey
)
SELECT co.c_name AS customer_name,
       co.total_spent,
       ss.s_name AS supplier_name,
       hvs.s_acctbal AS supplier_account_balance,
       li.total_value AS line_item_value,
       li.line_item_rank
FROM customer_orders co
JOIN supplier_summary ss ON ss.parts_supplied > 5
JOIN high_value_suppliers hvs ON hvs.s_suppkey = ss.s_suppkey
JOIN ranked_lineitems li ON li.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = co.c_custkey)
WHERE co.order_rank <= 10
  AND (co.total_spent IS NOT NULL OR ss.total_supply_cost > 1000)
ORDER BY co.total_spent DESC, li.total_value DESC;
