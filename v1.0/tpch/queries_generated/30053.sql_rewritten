WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 0 AS level
    FROM supplier
    WHERE s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > sh.acctbal
),
ranked_orders AS (
    SELECT o.o_orderkey, 
           o.o_totalprice,
           DENSE_RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank,
           o.o_orderdate
    FROM orders o
    WHERE o.o_orderdate >= '1997-01-01'
),
part_supplier AS (
    SELECT ps.ps_partkey, 
           SUM(ps.ps_availqty * ps.ps_supplycost) AS total_cost,
           COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM partsupp ps
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_retailprice > 100.00
    GROUP BY ps.ps_partkey
)
SELECT n.n_name,
       AVG(c.c_acctbal) AS avg_account_balance,
       MAX(lo.total_cost) AS max_avail_cost,
       COUNT(DISTINCT co.o_orderkey) AS total_orders,
       SUM(CASE WHEN lo.total_cost IS NULL THEN 1 ELSE 0 END) AS null_cost_count
FROM nation n
LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey
LEFT JOIN ranked_orders co ON c.c_custkey = co.o_orderkey
LEFT JOIN part_supplier lo ON lo.ps_partkey = (SELECT ps_partkey FROM partsupp ps WHERE ps.ps_suppkey IN (SELECT DISTINCT sh.s_suppkey FROM supplier_hierarchy sh))
GROUP BY n.n_name
HAVING AVG(c.c_acctbal) > 500
ORDER BY n.n_name;