
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey AND sh.level < 5
),
customer_orders AS (
    SELECT c.c_custkey, c.c_name, c.c_nationkey, o.o_orderkey, o.o_orderstatus, o.o_orderdate
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus IN ('O', 'F')
),
part_supplier AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, p.p_brand, SUM(ps.ps_availqty) AS total_avail
    FROM partsupp ps
    JOIN part p ON ps.ps_partkey = p.p_partkey
    GROUP BY ps.ps_partkey, ps.ps_suppkey, p.p_brand
),
discounted_lineitems AS (
    SELECT l.l_orderkey, 
           l.l_partkey, 
           l.l_quantity, 
           l.l_discount, 
           l.l_extendedprice * (1 - l.l_discount) AS net_price,
           ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_discount DESC) AS rn
    FROM lineitem l
    WHERE l.l_discount IS NOT NULL
),
combined_results AS (
    SELECT 
        so.s_suppkey AS supplier_id,
        so.s_name AS supplier_name,
        co.c_custkey AS customer_id,
        co.c_name AS customer_name,
        SUM(dli.net_price) AS total_spending,
        (SELECT COUNT(*) FROM discounted_lineitems d WHERE d.l_orderkey = co.o_orderkey AND dli.l_discount < 0.05) AS small_discount_count
    FROM supplier_hierarchy so
    LEFT JOIN customer_orders co ON so.s_nationkey = co.c_nationkey
    LEFT JOIN discounted_lineitems dli ON co.o_orderkey = dli.l_orderkey
    GROUP BY so.s_suppkey, so.s_name, co.c_custkey, co.c_name
    HAVING SUM(dli.net_price) IS NOT NULL AND COUNT(so.s_suppkey) > 1
)
SELECT 
    cr.supplier_id,
    cr.supplier_name,
    cr.customer_id,
    cr.customer_name,
    COALESCE(cr.total_spending, 0) AS adjusted_total_spending,
    CASE 
        WHEN cr.total_spending > 1000 THEN 'High Value'
        ELSE 'Regular Value' 
    END AS customer_value_segment
FROM combined_results cr
JOIN region r ON MOD(cr.customer_id, 5) = r.r_regionkey
WHERE r.r_name LIKE '%West%'
ORDER BY adjusted_total_spending DESC
FETCH FIRST 10 ROWS ONLY;
