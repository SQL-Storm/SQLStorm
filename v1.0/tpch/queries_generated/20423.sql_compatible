
WITH RECURSIVE SupplyChain AS (
    SELECT ps_partkey, ps_suppkey, ps_availqty, ps_supplycost, 
           ROW_NUMBER() OVER (PARTITION BY ps_partkey ORDER BY ps_supplycost DESC) AS rn
    FROM partsupp
    WHERE ps_availqty > (SELECT AVG(ps_availqty) FROM partsupp) 
      AND ps_supplycost IS NOT NULL
),
RecentOrders AS (
    SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate,
           EXTRACT(YEAR FROM o_orderdate) AS order_year,
           COUNT(l_orderkey) AS total_lineitems
    FROM orders
    JOIN lineitem ON o_orderkey = l_orderkey
    WHERE o_orderdate >= DATE '1998-10-01' - INTERVAL '1 year'
    GROUP BY o_orderkey, o_custkey, o_totalprice, o_orderdate
),
CustomerSummary AS (
    SELECT c_nationkey, COUNT(DISTINCT c_custkey) AS customer_count,
           SUM(c_acctbal) AS total_balance,
           STRING_AGG(c_comment, '; ') AS all_comments
    FROM customer
    WHERE c_acctbal IS NOT NULL 
    GROUP BY c_nationkey
),
SupplierRank AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 
           RANK() OVER (ORDER BY s.s_acctbal DESC) AS supplier_rank
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
)
SELECT
    p.p_partkey, p.p_name, p.p_retailprice,
    COALESCE(ss.total_balance, 0) AS supplier_total_balance,
    COALESCE(rs.total_lineitems, 0) AS recent_order_lineitems,
    rr.r_name,
    (SELECT COUNT(*) FROM nation WHERE n_regionkey = rr.r_regionkey) AS nation_count,
    CASE 
        WHEN sq.rn IS NOT NULL THEN 'Has Supply'
        ELSE 'No Supply'
    END AS supply_status
FROM part p
LEFT JOIN SupplyChain sq ON p.p_partkey = sq.ps_partkey
LEFT JOIN SupplierRank ss ON sq.ps_suppkey = ss.s_suppkey
LEFT JOIN RecentOrders rs ON p.p_partkey = rs.o_custkey
LEFT JOIN region rr ON rr.r_regionkey = (SELECT n_regionkey FROM nation WHERE nation.n_nationkey = ss.s_suppkey)
WHERE (p.p_retailprice > 100.00 OR p.p_size > 50)
  AND (p.p_comment LIKE '%rare%' OR p.p_comment IS NULL)
ORDER BY p.p_partkey, supplier_total_balance DESC
LIMIT 50;
