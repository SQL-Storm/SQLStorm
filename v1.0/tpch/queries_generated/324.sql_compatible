
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY EXTRACT(YEAR FROM o.o_orderdate) ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
), SupplierPartDetails AS (
    SELECT 
        ps.ps_partkey,
        s.s_name AS supplier_name,
        SUM(ps.ps_availqty) AS total_availability,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        partsupp ps
    JOIN 
        supplier s ON ps.ps_suppkey = s.s_suppkey
    GROUP BY 
        ps.ps_partkey, s.s_name
), OrderLineDetails AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        COUNT(*) AS line_item_count
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey
), CustomerDetails AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        n.n_name AS nation_name,
        c.c_acctbal,
        ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY c.c_acctbal DESC) AS acct_rank
    FROM 
        customer c
    JOIN 
        nation n ON c.c_nationkey = n.n_nationkey
)
SELECT 
    o.o_orderkey,
    o.o_orderdate,
    o.o_totalprice,
    COALESCE(ol.total_revenue, 0) AS total_revenue,
    spd.supplier_name,
    spd.total_availability,
    spd.avg_supply_cost,
    cd.c_name AS customer_name,
    cd.nation_name,
    CASE 
        WHEN cd.acct_rank <= 5 THEN 'Top Customer'
        ELSE 'Regular Customer'
    END AS customer_status
FROM 
    RankedOrders o
LEFT JOIN 
    OrderLineDetails ol ON o.o_orderkey = ol.l_orderkey
JOIN 
    SupplierPartDetails spd ON spd.ps_partkey IN (
        SELECT ps.ps_partkey 
        FROM partsupp ps 
        WHERE ps.ps_availqty > 0
    )
JOIN 
    customer c ON c.c_custkey = o.o_custkey
JOIN 
    CustomerDetails cd ON c.c_custkey = cd.c_custkey
WHERE 
    o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    AND spd.avg_supply_cost IS NOT NULL
ORDER BY 
    o.o_orderdate DESC, 
    o.o_totalprice DESC;
