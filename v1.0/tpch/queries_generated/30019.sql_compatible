
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, 1 AS level
    FROM supplier
    WHERE s_nationkey IS NOT NULL
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
customer_orders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
line_item_summary AS (
    SELECT l.l_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS revenue
    FROM lineitem l
    GROUP BY l.l_orderkey
),
part_supplier_summary AS (
    SELECT p.p_partkey, SUM(ps.ps_availqty) AS total_availqty, AVG(ps.ps_supplycost) AS avg_supplycost
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey
)
SELECT
    r.r_name AS region,
    n.n_name AS nation,
    c.c_name AS customer,
    COALESCE(pss.total_availqty, 0) AS available_quantity,
    SUM(lis.revenue) AS total_revenue,
    AVG(cu.total_spent) AS avg_customer_spending,
    ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY SUM(lis.revenue) DESC) AS revenue_rank
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN customer_orders cu ON cu.total_spent > 0
LEFT JOIN line_item_summary lis ON lis.l_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_orderkey = lis.l_orderkey)
LEFT JOIN part_supplier_summary pss ON pss.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_availqty > 0)
JOIN supplier_hierarchy sh ON sh.s_nationkey = n.n_nationkey
LEFT JOIN customer c ON c.c_custkey IN (SELECT DISTINCT o.o_custkey FROM orders o WHERE o.o_orderkey = lis.l_orderkey)
GROUP BY r.r_name, n.n_name, c.c_name, pss.total_availqty
HAVING SUM(lis.revenue) > 10000 OR COUNT(c.c_custkey) > 5
ORDER BY region, nation, total_revenue DESC;
