
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, s_acctbal, 1 AS level
    FROM supplier
    WHERE s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE s.s_acctbal > sh.s_acctbal
),
top_products AS (
    SELECT p.p_partkey, p.p_name, SUM(ps.ps_availqty) AS total_quantity
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
    HAVING SUM(ps.ps_availqty) > 100
),
order_summary AS (
    SELECT o.o_orderkey, o.o_custkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(l.l_orderkey) AS item_count
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate >= DATE '1997-01-01'
    GROUP BY o.o_orderkey, o.o_custkey
),
nation_avg AS (
    SELECT n.n_nationkey, n.n_name, AVG(s.s_acctbal) AS avg_acctbal
    FROM nation n
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_nationkey, n.n_name
)
SELECT na.n_nationkey, na.n_name, sa.level AS supp_level, tp.p_name, os.total_revenue,
       CASE WHEN os.total_revenue > na.avg_acctbal THEN 'Above Average' ELSE 'Below Average' END AS revenue_comparison
FROM nation_avg na
JOIN supplier_hierarchy sa ON na.n_nationkey = sa.s_nationkey
LEFT JOIN top_products tp ON tp.total_quantity > 200
FULL OUTER JOIN order_summary os ON sa.s_suppkey = os.o_custkey
WHERE sa.level <= 3 AND os.total_revenue IS NOT NULL
ORDER BY na.n_nationkey, os.total_revenue DESC;
