WITH RECURSIVE order_hierarchy AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, 1 AS order_level
    FROM orders o
    WHERE o.o_orderstatus = 'O' AND o.o_orderdate > '1996-01-01'
    
    UNION ALL
    
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, oh.order_level + 1
    FROM orders o
    JOIN order_hierarchy oh ON o.o_custkey = (SELECT c.c_custkey FROM customer c WHERE c.c_custkey = oh.o_orderkey)
    WHERE o.o_orderdate < oh.o_orderdate
), 
supplier_avg_cost AS (
    SELECT ps.ps_suppkey, AVG(ps.ps_supplycost) AS avg_cost
    FROM partsupp ps
    GROUP BY ps.ps_suppkey
),
top_suppliers AS (
    SELECT s.s_suppkey, s.s_name, sac.avg_cost
    FROM supplier s
    JOIN supplier_avg_cost sac ON s.s_suppkey = sac.ps_suppkey
    WHERE sac.avg_cost < (SELECT AVG(pss.ps_supplycost) FROM partsupp pss)
),
lineitem_summary AS (
    SELECT l.l_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(*) AS line_count,
           ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_shipdate DESC) AS line_order
    FROM lineitem l
    WHERE l.l_shipdate >= DATEADD(month, -6, cast('1998-10-01' as date))
    AND l.l_returnflag = 'N'
    GROUP BY l.l_orderkey
)
SELECT oh.o_orderkey, oh.o_orderdate, oh.o_totalprice, 
       ls.total_revenue, ls.line_count, 
       COALESCE(ts.s_name, 'Unknown Supplier') AS supplier_name,
       CASE WHEN ls.line_count > 10 THEN 'High Volume'
            ELSE 'Low Volume' END AS volume_category
FROM order_hierarchy oh
LEFT JOIN lineitem_summary ls ON oh.o_orderkey = ls.l_orderkey
LEFT JOIN top_suppliers ts ON ls.line_order = ts.s_suppkey
WHERE EXISTS (SELECT 1 
              FROM customer c 
              WHERE c.c_custkey = oh.o_custkey AND 
                    c.c_acctbal IS NOT NULL AND 
                    c.c_mktsegment IS NOT NULL)
ORDER BY oh.o_orderdate DESC, ls.total_revenue DESC NULLS LAST
FETCH FIRST 50 ROWS ONLY;