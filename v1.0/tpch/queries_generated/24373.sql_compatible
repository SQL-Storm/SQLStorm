
WITH SupplierSummary AS (
    SELECT s.s_suppkey, 
           s.s_name, 
           COUNT(DISTINCT ps.ps_partkey) AS total_parts, 
           SUM(ps.ps_availqty) AS total_avail_qty, 
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
), 
CustomerOrders AS (
    SELECT c.c_custkey, 
           c.c_name, 
           COUNT(o.o_orderkey) AS order_count, 
           SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
), 
LineItemAnalysis AS (
    SELECT l.l_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue,
           PERCENT_RANK() OVER (PARTITION BY l.l_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount))) AS revenue_rank
    FROM lineitem l
    WHERE l.l_shipdate = DATEADD(day, -1, '1998-10-01') OR l.l_shipdate IS NULL
    GROUP BY l.l_orderkey
)
SELECT COALESCE(ss.s_name, 'Unknown Supplier') AS supplier_name,
       co.c_name AS customer_name,
       COALESCE(la.net_revenue, 0) AS net_revenue,
       ss.total_parts,
       ss.total_avail_qty,
       co.order_count,
       co.total_spent,
       (CASE 
            WHEN ss.avg_supply_cost < 100 THEN 'Cost Effective'
            WHEN ss.avg_supply_cost BETWEEN 100 AND 200 THEN 'Moderate Cost'
            ELSE 'High Cost'
        END) AS cost_category
FROM SupplierSummary ss
FULL OUTER JOIN CustomerOrders co ON ss.s_suppkey = co.c_custkey
LEFT JOIN LineItemAnalysis la ON la.l_orderkey = co.order_count
WHERE ss.total_parts IS NOT NULL OR co.order_count > 0
ORDER BY cost_category DESC, supplier_name, customer_name;
