WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_suppkey IS NOT NULL
    UNION ALL
    SELECT s2.s_suppkey, s2.s_name, s2.s_nationkey, sh.level + 1
    FROM supplier s2
    INNER JOIN SupplierHierarchy sh ON s2.s_nationkey = sh.s_nationkey
    WHERE sh.level < 3
), CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
), PartSupplierInfo AS (
    SELECT p.p_partkey, p.p_name, ps.ps_supplycost, SUM(ps.ps_availqty) AS total_avail_qty
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name, ps.ps_supplycost
)
SELECT 
    r.r_name AS region_name,
    n.n_name AS nation_name,
    c.c_name AS customer_name,
    SUM(lo.l_extendedprice * (1 - lo.l_discount)) AS revenue,
    AVG(lo.l_quantity) AS avg_quantity,
    COUNT(DISTINCT so.s_suppkey) AS supplier_count,
    STRING_AGG(DISTINCT psi.p_name, ', ') AS part_names,
    CASE 
        WHEN SUM(lo.l_tax) IS NULL THEN 0 
        ELSE SUM(lo.l_tax) 
    END AS total_tax,
    COUNT(DISTINCT order_id) FILTER (WHERE lo.l_shipdate < cast('1998-10-01' as date)) AS completed_orders
FROM lineitem lo
JOIN orders o ON lo.l_orderkey = o.o_orderkey
JOIN customer c ON o.o_custkey = c.c_custkey
JOIN nation n ON c.c_nationkey = n.n_nationkey
JOIN region r ON n.n_regionkey = r.r_regionkey
LEFT JOIN SupplierHierarchy sh ON c.c_nationkey = sh.s_nationkey
LEFT JOIN PartSupplierInfo psi ON lo.l_partkey = psi.p_partkey
GROUP BY r.r_name, n.n_name, c.c_name
HAVING SUM(lo.l_extendedprice) > 10000
ORDER BY revenue DESC
LIMIT 10;