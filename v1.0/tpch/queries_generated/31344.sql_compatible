
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 0 AS hierarchy_level
    FROM supplier s
    WHERE s.s_acctbal > 10000
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.hierarchy_level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.hierarchy_level < 3
), 
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count,
           SUM(o.o_totalprice) AS total_spent,
           RANK() OVER (PARTITION BY c.c_nationkey ORDER BY SUM(o.o_totalprice) DESC) AS spending_rank
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_nationkey
), 
PartSupplier AS (
    SELECT p.p_partkey, p.p_name, ps.ps_supplycost, 
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost) AS cost_rank
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
), 
HighValueCustomers AS (
    SELECT cust.c_custkey, cust.c_name, cust.c_acctbal,
           CASE
               WHEN cust.c_acctbal IS NULL THEN 'No Balance'
               WHEN cust.c_acctbal > 50000 THEN 'High Value'
               ELSE 'Regular'
           END AS customer_type
    FROM customer cust
    WHERE cust.c_acctbal IS NOT NULL
)
SELECT 
    c.c_name AS Customer_Name,
    o.o_orderkey AS Order_Number,
    p.p_name AS Part_Name,
    s.s_name AS Supplier_Name,
    SUM(l.l_extendedprice * (1 - l.l_discount)) AS Total_Price,
    CASE 
        WHEN SUM(l.l_extendedprice * (1 - l.l_discount)) = 0 THEN 'No Sales'
        ELSE 'Sales Recorded'
    END AS Sales_Status,
    sh.hierarchy_level AS Supplier_Level,
    cvc.customer_type AS Customer_Category
FROM lineitem l
JOIN orders o ON l.l_orderkey = o.o_orderkey
JOIN CustomerOrders co ON o.o_custkey = co.c_custkey
JOIN part p ON l.l_partkey = p.p_partkey
JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
LEFT JOIN HighValueCustomers cvc ON co.c_custkey = cvc.c_custkey
WHERE COALESCE(l.l_discount, 0) < 0.1
  AND o.o_orderdate BETWEEN DATE '1996-01-01' AND DATE '1997-12-31'
GROUP BY c.c_name, o.o_orderkey, p.p_name, s.s_name, sh.hierarchy_level, cvc.customer_type
ORDER BY Total_Price DESC
FETCH FIRST 100 ROWS ONLY;
