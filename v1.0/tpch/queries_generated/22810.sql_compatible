
WITH RECURSIVE CustomerHierarchy AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal, c.c_mktsegment, 0 AS level
    FROM customer c
    WHERE c.c_acctbal > (SELECT AVG(c2.c_acctbal) FROM customer c2)

    UNION ALL

    SELECT c.c_custkey, c.c_name, c.c_acctbal, c.c_mktsegment, h.level + 1
    FROM customer c
    JOIN CustomerHierarchy h ON c.c_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_name = 'USA') 
                                AND c.c_acctbal < h.c_acctbal
)

SELECT p.p_partkey, p.p_name, p.p_brand, 
       SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
       DENSE_RANK() OVER (PARTITION BY p.p_brand ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank,
       COALESCE(NULLIF(SUM(l.l_discount), 0), NULL) AS discount_sum,
       STRING_AGG(DISTINCT CONCAT(c.c_name, '(', c.c_custkey, ')'), '; ') AS customers
FROM part p
JOIN lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN orders o ON l.l_orderkey = o.o_orderkey
LEFT JOIN CustomerHierarchy ch ON o.o_custkey = ch.c_custkey
WHERE p.p_size BETWEEN 10 AND 20
  AND NOT EXISTS (SELECT 1
                  FROM partsupp ps
                  WHERE ps.ps_partkey = p.p_partkey AND ps.ps_availqty < 100)
  AND (l.l_returnflag IS NULL OR l.l_returnflag = 'N')
GROUP BY p.p_partkey, p.p_name, p.p_brand
HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > 10000
  AND revenue_rank = 1
ORDER BY total_revenue DESC
LIMIT 10;
