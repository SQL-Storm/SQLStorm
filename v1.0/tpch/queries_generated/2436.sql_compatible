
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS TotalRevenue,
        DENSE_RANK() OVER (PARTITION BY o.o_custkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS RevenueRank
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        o.o_orderkey, o.o_orderdate, o.o_custkey
),
HighValueCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_mktsegment,
        COALESCE(SUM(ro.TotalRevenue), 0) AS TotalSpent
    FROM 
        customer c
    LEFT JOIN 
        RankedOrders ro ON c.c_custkey = ro.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name, c.c_mktsegment
    HAVING 
        COALESCE(SUM(ro.TotalRevenue), 0) > 10000
)
SELECT 
    c.c_name AS CustomerName,
    c.c_mktsegment AS MarketSegment,
    COALESCE(hvc.TotalSpent, 0) AS TotalSpent,
    COUNT(o.o_orderkey) AS OrderCount,
    STRING_AGG(DISTINCT CONCAT(p.p_name, ' (', s.s_name, ')'), '; ') AS SuppliedParts
FROM 
    customer c
LEFT JOIN 
    orders o ON c.c_custkey = o.o_custkey
LEFT JOIN 
    lineitem l ON o.o_orderkey = l.l_orderkey
LEFT JOIN 
    partsupp ps ON l.l_partkey = ps.ps_partkey
LEFT JOIN 
    supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN 
    HighValueCustomers hvc ON c.c_custkey = hvc.c_custkey
WHERE 
    (o.o_orderstatus = 'O' OR o.o_orderstatus IS NULL)
GROUP BY 
    c.c_name, c.c_mktsegment, hvc.TotalSpent
HAVING 
    COUNT(o.o_orderkey) > 1
ORDER BY 
    TotalSpent DESC, c.c_name
LIMIT 50;
