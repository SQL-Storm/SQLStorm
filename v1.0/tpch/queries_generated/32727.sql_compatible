
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_balance, 0 AS level
    FROM supplier s
    WHERE s.s_balance IS NOT NULL

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_balance, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
    WHERE sh.level < 5
),
OrderSummary AS (
    SELECT 
        o.o_orderkey,
        SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue,
        COUNT(DISTINCT li.l_partkey) AS total_items,
        o.o_orderdate
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate
),
RankedOrders AS (
    SELECT 
        os.o_orderkey,
        os.total_revenue,
        RANK() OVER (ORDER BY os.total_revenue DESC) AS revenue_rank
    FROM OrderSummary os
),
FilteredSuppliers AS (
    SELECT DISTINCT 
        s.s_suppkey, 
        s.s_name, 
        s.s_acctbal
    FROM supplier s
    LEFT JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE ps.ps_availqty IS NULL OR s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
)
SELECT 
    o.o_orderkey,
    ro.total_revenue,
    fs.s_name AS supplier_name,
    COALESCE(sh.level, -1) AS supplier_level,
    CASE 
        WHEN ro.revenue_rank <= 10 THEN 'Top 10 Revenue'
        ELSE 'Other'
    END AS revenue_category
FROM RankedOrders ro
LEFT JOIN FilteredSuppliers fs ON fs.s_suppkey = (
    SELECT ps.ps_suppkey 
    FROM partsupp ps 
    WHERE ps.ps_partkey IN (
        SELECT l.l_partkey 
        FROM lineitem l 
        WHERE l.l_orderkey = ro.o_orderkey
    ) 
    LIMIT 1
)
LEFT JOIN SupplierHierarchy sh ON sh.s_suppkey = fs.s_suppkey
WHERE ro.total_revenue > 10000
ORDER BY ro.total_revenue DESC, fs.s_name;
