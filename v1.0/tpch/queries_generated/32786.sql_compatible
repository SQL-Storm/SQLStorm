
WITH RECURSIVE price_summary AS (
    SELECT 
        ps_partkey, 
        SUM(ps_supplycost) AS total_supplycost,
        COUNT(DISTINCT ps_suppkey) AS supplier_count
    FROM 
        partsupp
    GROUP BY 
        ps_partkey
),
ranked_parts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_brand,
        p.p_retailprice,
        COALESCE(ps.total_supplycost, 0) AS total_supplycost,
        COALESCE(ps.supplier_count, 0) AS supplier_count,
        RANK() OVER (PARTITION BY p.p_brand ORDER BY COALESCE(ps.total_supplycost, 0) DESC, p.p_retailprice DESC) AS rank
    FROM 
        part p
    LEFT JOIN 
        price_summary ps ON p.p_partkey = ps.ps_partkey
),
recent_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_custkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_amount
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderdate >= DATEADD(month, -12, DATE('1998-10-01'))
    GROUP BY 
        o.o_orderkey, o.o_custkey
)
SELECT 
    r.n_name AS nation_name,
    COUNT(DISTINCT c.c_custkey) AS customer_count,
    SUM(rp.total_supplycost) AS total_supplycost,
    AVG(rp.p_retailprice) AS avg_retailprice,
    MAX(rp.total_supplycost) AS max_supplycost,
    MIN(rp.total_supplycost) AS min_supplycost
FROM 
    nation r
JOIN 
    supplier s ON r.n_nationkey = s.s_nationkey
JOIN 
    partsupp ps ON s.s_suppkey = ps.ps_suppkey
JOIN 
    ranked_parts rp ON ps.ps_partkey = rp.p_partkey
JOIN 
    customer c ON c.c_nationkey = r.n_nationkey
LEFT JOIN 
    recent_orders ro ON c.c_custkey = ro.o_custkey
WHERE 
    rp.rank <= 3
GROUP BY 
    r.n_name
HAVING 
    SUM(rp.total_supplycost) IS NOT NULL
ORDER BY 
    total_supplycost DESC;
