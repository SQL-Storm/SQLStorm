
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS rank
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    GROUP BY 
        s.s_suppkey, s.s_name, n.n_name
),
HighValueCustomers AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        o.o_orderstatus = 'O'
    GROUP BY 
        c.c_custkey, c.c_name
    HAVING 
        SUM(o.o_totalprice) > 100000
),
LineItemSummary AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue,
        COUNT(*) AS line_count
    FROM 
        lineitem l
    GROUP BY 
        l.l_orderkey
)
SELECT 
    n.n_name,
    rs.s_name,
    COALESCE(hvc.total_spent, 0) AS customer_spending,
    l_summary.net_revenue,
    l_summary.line_count
FROM 
    RankedSuppliers rs
LEFT JOIN 
    nation n ON n.n_nationkey = rs.s_nationkey
LEFT JOIN 
    HighValueCustomers hvc ON hvc.c_custkey = rs.s_suppkey
JOIN 
    LineItemSummary l_summary ON l_summary.l_orderkey = rs.s_suppkey
WHERE 
    l_summary.net_revenue IS NOT NULL
ORDER BY 
    n.n_name, rs.total_supply_cost DESC;
