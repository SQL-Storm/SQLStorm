WITH RECURSIVE NationHierarchy AS (
    SELECT n_nationkey, n_name, n_regionkey, 0 AS level
    FROM nation
    WHERE n_regionkey IS NOT NULL
    UNION ALL
    SELECT n.n_nationkey, n.n_name, n.n_regionkey, nh.level + 1
    FROM nation n
    JOIN NationHierarchy nh ON n.n_nationkey = nh.n_regionkey
),
SupplierStats AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_availqty) AS total_avail_qty, 
           AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_suppkey, s.s_name
),
OrderDetails AS (
    SELECT o.o_orderkey, SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue,
           COUNT(DISTINCT li.l_linenumber) AS lineitem_count
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    WHERE o.o_orderdate >= DATE '1997-01-01' AND o.o_orderdate < DATE '1998-01-01'
    GROUP BY o.o_orderkey
),
QualifiedOrders AS (
    SELECT od.o_orderkey, od.total_revenue, ns.n_name
    FROM OrderDetails od
    LEFT JOIN NationHierarchy nh ON nh.n_nationkey = od.o_orderkey % 10 
    LEFT JOIN nation ns ON ns.n_nationkey = nh.n_nationkey
    WHERE od.total_revenue > 1000
),
FinalResult AS (
    SELECT q.o_orderkey, q.total_revenue, COALESCE(s.total_avail_qty, 0) AS total_avail_qty,
           COALESCE(s.avg_supply_cost, 0) AS avg_supply_cost, q.n_name
    FROM QualifiedOrders q
    LEFT JOIN SupplierStats s ON s.total_avail_qty > 100
)
SELECT fr.o_orderkey, fr.total_revenue, fr.total_avail_qty, fr.avg_supply_cost, fr.n_name,
       RANK() OVER (PARTITION BY fr.n_name ORDER BY fr.total_revenue DESC) AS revenue_rank
FROM FinalResult fr
WHERE fr.avg_supply_cost IS NOT NULL
ORDER BY fr.n_name, revenue_rank;