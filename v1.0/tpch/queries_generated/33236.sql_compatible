
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 1 AS level
    FROM supplier s
    WHERE s.s_comment LIKE '%important%'
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN supplier_hierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
nation_supply AS (
    SELECT n.n_nationkey, n.n_name, SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM nation n
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY n.n_nationkey, n.n_name
),
customer_orders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
ranked_orders AS (
    SELECT c.c_custkey, c.c_name, c.total_spent,
           RANK() OVER (PARTITION BY c.c_custkey ORDER BY c.total_spent DESC) AS spending_rank
    FROM customer_orders c
)
SELECT n.n_name, sh.s_name, o.c_name, o.total_spent, o.spending_rank,
       COALESCE(s.total_supply_cost, 0) AS total_supply_cost,
       CASE 
            WHEN o.total_spent > COALESCE(s.total_supply_cost, 0) THEN 'Above Average'
            ELSE 'Below Average'
        END AS spending_analysis
FROM nation_supply s
FULL OUTER JOIN supplier_hierarchy sh ON s.n_nationkey = sh.s_nationkey
JOIN ranked_orders o ON o.order_count > 0
JOIN nation n ON n.n_nationkey = s.n_nationkey
WHERE (o.spending_rank <= 5 OR o.total_spent IS NOT NULL)
  AND s.total_supply_cost IS NOT NULL
ORDER BY n.n_name, o.total_spent DESC
OFFSET 10 ROWS FETCH NEXT 20 ROWS ONLY;
