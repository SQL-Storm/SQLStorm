WITH RECURSIVE OrderHierarchy AS (
    SELECT 
        o.o_orderkey,
        o.o_orderstatus,
        o.o_orderdate,
        c.c_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY l.l_linenumber) AS line_position
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderdate >= '1997-01-01' AND o.o_orderdate < '1997-12-31'
    GROUP BY o.o_orderkey, o.o_orderstatus, o.o_orderdate, c.c_name
    HAVING total_revenue > 5000
),
HighRevenueOrders AS (
    SELECT 
        o_orderkey,
        o_orderstatus,
        o_orderdate,
        c_name,
        total_revenue,
        ROW_NUMBER() OVER (ORDER BY total_revenue DESC) AS revenue_rank
    FROM OrderHierarchy
)
SELECT 
    h.o_orderkey,
    h.o_orderstatus,
    h.o_orderdate,
    h.c_name,
    h.total_revenue,
    COUNT(DISTINCT l.l_suppkey) AS supplier_count,
    AVG(p.p_retailprice) AS avg_part_price
FROM HighRevenueOrders h
JOIN lineitem l ON h.o_orderkey = l.l_orderkey
JOIN partsupp ps ON l.l_partkey = ps.ps_partkey
JOIN part p ON ps.ps_partkey = p.p_partkey
GROUP BY h.o_orderkey, h.o_orderstatus, h.o_orderdate, h.c_name, h.total_revenue
ORDER BY h.total_revenue DESC
LIMIT 10;