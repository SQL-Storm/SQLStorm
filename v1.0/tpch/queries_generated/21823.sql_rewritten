WITH RECURSIVE SupplyChain AS (
    SELECT 
        ps.suppkey,
        SUM(ps_availqty * COALESCE(NULLIF(ps_supplycost, 0), 1)) AS TotalCost,
        ROW_NUMBER() OVER (PARTITION BY ps.suppkey ORDER BY SUM(ps_supplycost) DESC) AS rn
    FROM partsupp ps
    GROUP BY ps.suppkey
),
LatestOrders AS (
    SELECT 
        o.o_orderkey, 
        o.o_orderdate, 
        o.o_totalprice, 
        DENSE_RANK() OVER (PARTITION BY o.o_custkey ORDER BY o.o_orderdate DESC) AS rn
    FROM orders o
    WHERE o.o_orderstatus IN ('O', 'P')
),
FilteredSuppliers AS (
    SELECT 
        s.s_suppkey, 
        s.s_name, 
        s.s_acctbal,
        CASE 
            WHEN s.s_acctbal IS NULL THEN 'Unknown Balance'
            WHEN s.s_acctbal < 500 THEN 'Low Balance'
            ELSE 'Sufficient Balance'
        END AS BalanceStatus
    FROM supplier s
    WHERE s.s_comment NOT LIKE '%bad quality%'
)
SELECT 
    n.n_name AS NationName,
    r.r_name AS Region,
    SUM(ps.TotalCost) AS TotalSupplierCost,
    STRING_AGG(DISTINCT CONCAT(s.s_name, ' (', fs.BalanceStatus, ')') ORDER BY s.s_name) AS SupplierDetails,
    COUNT(DISTINCT lo.o_orderkey) AS OrderCount
FROM SupplyChain ps
FULL OUTER JOIN FilteredSuppliers fs ON ps.suppkey = fs.s_suppkey
JOIN nation n ON fs.s_nationkey = n.n_nationkey
JOIN region r ON n.n_regionkey = r.r_regionkey
LEFT JOIN LatestOrders lo ON lo.o_orderkey IN (
    SELECT o.o_orderkey 
    FROM orders o
    WHERE o.o_totalprice > (SELECT AVG(o_totalprice) FROM orders)
)
WHERE (ps.TotalCost IS NULL OR ps.TotalCost > 1000) AND 
      (lo.o_orderkey IS NULL OR lo.o_orderdate > cast('1998-10-01' as date) - INTERVAL '30 DAY')
GROUP BY n.n_name, r.r_name
HAVING COUNT(CASE WHEN fs.BalanceStatus = 'Low Balance' THEN 1 END) > 2
ORDER BY TotalSupplierCost DESC, NationName;