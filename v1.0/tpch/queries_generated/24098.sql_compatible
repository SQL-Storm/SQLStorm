
WITH RecursiveSupplier AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal > 10000

    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_acctbal, rs.level + 1
    FROM supplier s
    JOIN RecursiveSupplier rs ON s.s_nationkey = (
        SELECT n.n_nationkey 
        FROM nation n 
        WHERE n.n_name = 'GERMANY' 
        LIMIT 1
    )
    WHERE s.s_acctbal IS NOT NULL AND s.s_acctbal >= 10000 + rs.level * 1000
), PartStats AS (
    SELECT p.p_partkey, 
           p.p_name, 
           SUM(ps.ps_availqty) AS total_available,
           AVG(ps.ps_supplycost) AS average_cost
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
), OrderSummary AS (
    SELECT o.o_orderstatus, 
           COUNT(DISTINCT o.o_orderkey) AS total_orders,
           SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue, 
           DENSE_RANK() OVER (ORDER BY SUM(li.l_extendedprice * (1 - li.l_discount)) DESC) AS revenue_rank
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    WHERE o.o_orderdate >= DATE '1997-01-01'
    GROUP BY o.o_orderstatus
), CustomerRegion AS (
    SELECT c.c_custkey, 
           c.c_name, 
           n.n_name AS nation_name,
           COUNT(o.o_orderkey) AS total_orders,
           MAX(o.o_orderdate) AS last_order_date
    FROM customer c
    LEFT JOIN nation n ON c.c_nationkey = n.n_nationkey
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, n.n_name
)
SELECT pr.p_name, 
       pr.total_available, 
       pr.average_cost,
       os.o_orderstatus, 
       os.total_orders, 
       os.total_revenue,
       cr.nation_name, 
       cr.total_orders AS orders_in_region,
       COALESCE(SUM(rs.s_acctbal), 0) AS total_supplier_balance
FROM PartStats pr
LEFT JOIN OrderSummary os ON pr.p_partkey IN (
    SELECT DISTINCT li.l_partkey 
    FROM lineitem li 
    WHERE li.l_discount > 0.05
)
LEFT JOIN CustomerRegion cr ON os.total_orders > cr.total_orders
LEFT JOIN RecursiveSupplier rs ON pr.p_partkey = rs.s_suppkey 
WHERE pr.total_available IS NOT NULL 
  AND (pr.average_cost > 50 OR pr.total_available < 100)
GROUP BY pr.p_name, pr.total_available, pr.average_cost, 
         os.o_orderstatus, os.total_orders, os.total_revenue,
         cr.nation_name, cr.orders_in_region
ORDER BY pr.average_cost DESC, os.total_revenue DESC 
LIMIT 50 OFFSET 5;
