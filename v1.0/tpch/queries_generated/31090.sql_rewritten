WITH RECURSIVE recursive_supplier AS (
    SELECT s_suppkey, s_name, s_acctbal, s_comment
    FROM supplier
    WHERE s_acctbal > 1000
   
    UNION ALL
   
    SELECT ps.s_suppkey, s.s_name, s.s_acctbal + ps.ps_supplycost AS s_acctbal, s.s_comment
    FROM partsupp ps
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    JOIN recursive_supplier rs ON rs.s_suppkey = ps.ps_suppkey
    WHERE rs.s_acctbal < 5000
), customer_orders AS (
    SELECT c.c_custkey, c.c_name, SUM(o.o_totalprice) AS total_spent
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
), filtered_part AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_retailprice, p.p_comment
    FROM part p
    WHERE p.p_retailprice > 50
    AND p.p_size IN (SELECT DISTINCT ps.ps_availqty FROM partsupp ps WHERE ps.ps_supplycost < 20)
), ranked_lineitems AS (
    SELECT l.l_orderkey, l.l_partkey, l.l_quantity, RANK() OVER (PARTITION BY l.l_orderkey ORDER BY l.l_extendedprice DESC) AS rank
    FROM lineitem l
    WHERE l.l_shipdate >= '1997-01-01'
), nation_supplier AS (
    SELECT n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_name
), combined_results AS (
    SELECT c.c_name, co.total_spent, ps.p_name, ps.p_comment, ns.supplier_count
    FROM customer_orders co
    JOIN filtered_part ps ON co.total_spent > ps.p_retailprice
    LEFT JOIN nation_supplier ns ON ns.supplier_count > 0
)
SELECT r.*, 
       CASE 
           WHEN r.total_spent IS NULL THEN 'No Orders' 
           ELSE r.total_spent::varchar 
       END AS order_status
FROM combined_results r
FULL OUTER JOIN recursive_supplier rs ON r.total_spent = rs.s_acctbal
WHERE r.total_spent IS NOT NULL OR rs.s_acctbal IS NOT NULL
ORDER BY r.total_spent DESC NULLS LAST;