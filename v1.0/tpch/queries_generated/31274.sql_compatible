
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_nationkey, 0 AS level
    FROM supplier
    WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'China')
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
AggregatePrices AS (
    SELECT l.l_orderkey,
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           ROW_NUMBER() OVER (PARTITION BY l.l_orderkey ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS revenue_rank
    FROM lineitem l
    JOIN orders o ON l.l_orderkey = o.o_orderkey
    WHERE o.o_orderstatus = 'F'
    GROUP BY l.l_orderkey
),
PartSupplierStats AS (
    SELECT p.p_partkey, 
           p.p_name,
           COUNT(DISTINCT ps.ps_suppkey) AS supplier_count,
           AVG(ps.ps_supplycost) AS average_supply_cost
    FROM part p
    LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey, p.p_name
)
SELECT ns.n_name, 
       sh.s_name, 
       ps.total_revenue,
       CASE 
           WHEN ps.total_revenue > 1000000 THEN 'High Revenue'
           WHEN ps.total_revenue IS NULL THEN 'No Revenue'
           ELSE 'Low Revenue' 
       END AS revenue_category,
       avg_stats.average_supply_cost
FROM nation ns
JOIN SupplierHierarchy sh ON ns.n_nationkey = sh.s_nationkey
LEFT JOIN AggregatePrices ps ON ps.l_orderkey IN (
    SELECT l_orderkey
    FROM lineitem 
    WHERE l_partkey IN (SELECT p_partkey FROM part WHERE p_mfgr = 'Manufacturer#1')
)
LEFT JOIN PartSupplierStats avg_stats ON avg_stats.p_partkey IN (
    SELECT DISTINCT ps_partkey 
    FROM partsupp 
    WHERE ps_suppkey = sh.s_suppkey
)
WHERE ns.r_regionkey IN (
    SELECT r.r_regionkey 
    FROM region r 
    WHERE r.r_name LIKE '%Asia%'
)
ORDER BY ns.n_name, ps.total_revenue DESC;
