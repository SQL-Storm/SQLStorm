
WITH RECURSIVE supplier_hierarchy(s_suppkey, s_name, level) AS (
    SELECT s.s_suppkey, s.s_name, 1
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT ps.s_suppkey, s.s_name, sh.level + 1
    FROM supplier_hierarchy sh
    JOIN partsupp ps ON sh.s_suppkey = ps.ps_suppkey
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    WHERE sh.level < 5
),
order_summary AS (
    SELECT o.o_orderkey, 
           SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           AVG(l.l_quantity) AS avg_quantity, 
           COUNT(DISTINCT l.l_partkey) AS unique_parts
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey
),
region_nation AS (
    SELECT r.r_name, n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_name, n.n_name
)
SELECT
    ps.ps_partkey,
    p.p_name,
    p.p_brand,
    p.p_container,
    COALESCE(SUM(o.total_revenue) FILTER (WHERE o.total_revenue > 10000), 0) AS high_value_orders,
    AVG(COALESCE(l.l_discount, 0)) AS avg_discount,
    COUNT(DISTINCT s.s_suppkey) AS supplier_count,
    ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY AVG(COALESCE(l.l_quantity, 0)) DESC) AS rn
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN order_summary o ON ps.ps_partkey = o.o_orderkey
LEFT JOIN lineitem l ON l.l_partkey = p.p_partkey
LEFT JOIN supplier_hierarchy sh ON s.s_suppkey = sh.s_suppkey
JOIN region_nation rn ON s.s_nationkey = rn.n.n_nationkey
WHERE p.p_size BETWEEN 1 AND 20
  AND EXISTS (SELECT 1 FROM customer c WHERE c.c_custkey = o.o_orderkey AND c.c_acctbal < 500)
GROUP BY ps.ps_partkey, p.p_name, p.p_brand, p.p_container
HAVING COUNT(DISTINCT l.l_orderkey) > 5
   OR ('special case' IS NOT NULL AND 'strange logic' IS NOT NULL)
ORDER BY high_value_orders DESC, avg_discount ASC;
