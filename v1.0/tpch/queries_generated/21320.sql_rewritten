WITH RECURSIVE SupplierHierarchy AS (
    SELECT s_suppkey, s_name, s_address, s_nationkey, s_acctbal, s_comment,
           CAST(s_name AS VARCHAR(200)) AS path,
           1 AS level
    FROM supplier
    WHERE s_acctbal IS NOT NULL
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.s_address, s.s_nationkey, s.s_acctbal, s.s_comment,
           CONCAT(sh.path, '->', s.s_name), sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5 AND s.s_acctbal IS NOT NULL
),
OrderSummary AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
           COUNT(DISTINCT l.l_linenumber) AS item_count,
           o.o_orderdate, ROW_NUMBER() OVER (PARTITION BY o.o_orderdate ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS rn
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey, o.o_orderdate
)
SELECT p.p_partkey, p.p_name, p.p_mfgr, p.p_size,
       NVL(CASE 
           WHEN SUM(CASE WHEN l.l_discount = 0 THEN l.l_extendedprice ELSE 0 END) > 0 AND COUNT(l.l_suppkey) > 2 
           THEN 'High Revenue' ELSE 'Normal Revenue' END, 'Unknown') AS revenue_category,
       COALESCE(sh.path, 'No Supplier') AS supplier_path,
       SUM(l.l_quantity) AS total_quantity,
       AVG(l.l_tax) AS avg_tax,
       COUNT(DISTINCT o.o_orderkey) AS order_count
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN OrderSummary o ON o.o_orderkey = l.l_orderkey
LEFT JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
WHERE (p.p_size BETWEEN 1 AND 10 OR p.p_name LIKE '%steel%')
  AND (l.l_shipdate IS NULL OR l.l_shipdate > '1997-01-01')
GROUP BY p.p_partkey, p.p_name, p.p_mfgr, p.p_size, sh.path
HAVING SUM(l.l_extendedprice) > (SELECT AVG(l_extendedprice) FROM lineitem) 
   OR EXISTS (SELECT 1 FROM customer c WHERE c.c_custkey IN (SELECT DISTINCT o.o_custkey FROM orders o WHERE o.o_orderkey = l.l_orderkey) AND c.c_acctbal < 5000)
ORDER BY total_quantity DESC, order_count DESC
LIMIT 100;