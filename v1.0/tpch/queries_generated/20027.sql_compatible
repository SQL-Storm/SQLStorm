
WITH RECURSIVE region_sales AS (
    SELECT 
        r.r_name AS region_name,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
        ROW_NUMBER() OVER (PARTITION BY r.r_name ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount)) DESC) AS sales_rank
    FROM 
        region r
    JOIN 
        nation n ON r.r_regionkey = n.n_regionkey
    JOIN 
        supplier s ON n.n_nationkey = s.s_nationkey
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    JOIN 
        lineitem l ON ps.ps_partkey = l.l_partkey
    WHERE 
        l.l_shipdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
    GROUP BY 
        r.r_name
), customer_order_details AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        o.o_orderkey,
        COUNT(l.l_orderkey) AS number_of_items,
        MAX(o.o_totalprice) AS max_order_price,
        COALESCE(NULLIF(SUM(o.o_totalprice), 0), 1) AS adjusted_total_price
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        c.c_custkey,
        c.c_name
), high_volume_orders AS (
    SELECT 
        c.c_name,
        cd.number_of_items,
        cd.adjusted_total_price,
        ROW_NUMBER() OVER (PARTITION BY cd.c_custkey ORDER BY cd.adjusted_total_price DESC) AS order_rank
    FROM 
        customer_order_details cd
    JOIN 
        customer c ON cd.c_custkey = c.c_custkey
    WHERE 
        cd.number_of_items > 5
    AND 
        cd.adjusted_total_price > (SELECT AVG(cd2.adjusted_total_price) FROM customer_order_details cd2)
)
SELECT 
    r.region_name,
    r.total_sales AS region_total_sales,
    hvo.c_name,
    hvo.number_of_items,
    hvo.adjusted_total_price
FROM 
    region_sales r
FULL OUTER JOIN 
    high_volume_orders hvo ON r.region_name IS DISTINCT FROM (SELECT d.r_name FROM region d JOIN nation n ON d.r_regionkey = n.n_regionkey WHERE n.n_nationkey IN (SELECT s.s_nationkey FROM supplier s WHERE s.s_acctbal IS NOT NULL))
WHERE 
    r.total_sales IS NOT NULL OR hvo.adjusted_total_price IS NOT NULL
ORDER BY 
    r.total_sales DESC NULLS LAST, 
    hvo.adjusted_total_price DESC;
