WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, NULL AS parent_suppkey
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s2.s_suppkey, s2.s_name, s2.s_acctbal, sh.s_suppkey
    FROM supplier s2
    INNER JOIN SupplierHierarchy sh ON s2.s_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_nationkey = sh.s_suppkey)
    WHERE s2.s_acctbal > sh.s_acctbal
),
PartSupplier AS (
    SELECT ps.ps_partkey, SUM(ps.ps_availqty) AS total_avail_qty, AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM partsupp ps
    GROUP BY ps.ps_partkey
),
HighDemandParts AS (
    SELECT p.p_partkey, p.p_name, p.p_brand, p.p_size, p.p_retailprice,
           ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS price_rank
    FROM part p
    WHERE p.p_size > 20
),
FilteredOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, c.c_mktsegment
    FROM orders o
    INNER JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE o.o_orderdate >= DATE '1997-01-01' AND o.o_orderstatus IN ('O', 'F')
),
AggregateResults AS (
    SELECT d.c_mktsegment,
           COUNT(DISTINCT d.o_orderkey) AS order_count,
           SUM(d.o_totalprice) AS total_revenue
    FROM FilteredOrders d
    GROUP BY d.c_mktsegment
)
SELECT rh.r_name,
       COALESCE(ah.order_count, 0) AS order_count,
       COALESCE(ah.total_revenue, 0) AS total_revenue,
       ph.total_avail_qty,
       ph.avg_supply_cost
FROM region rh
LEFT JOIN AggregateResults ah ON rh.r_regionkey = (SELECT n.n_regionkey FROM nation n WHERE n.n_nationkey = ah.c_mktsegment)
LEFT JOIN PartSupplier ph ON ph.ps_partkey IN (SELECT h.p_partkey FROM HighDemandParts h WHERE h.price_rank < 5)
ORDER BY rh.r_regionkey, total_revenue DESC;