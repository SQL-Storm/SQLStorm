WITH RECURSIVE CustomerHierarchy AS (
    SELECT 
        c.c_custkey AS custkey,
        c.c_name AS custname,
        c.c_acctbal AS acctbal,
        0 AS level
    FROM 
        customer c
    WHERE 
        c.c_acctbal >= 5000

    UNION ALL

    SELECT 
        c.c_custkey,
        c.c_name,
        c.c_acctbal,
        ch.level + 1
    FROM 
        customer c
    JOIN 
        CustomerHierarchy ch ON c.c_custkey = ch.custkey
    WHERE 
        c.c_acctbal < ch.acctbal
),
SupplierAvailability AS (
    SELECT 
        ps.ps_partkey,
        SUM(ps.ps_availqty) AS total_avail_qty
    FROM 
        partsupp ps
    GROUP BY 
        ps.ps_partkey
),
OrdersStats AS (
    SELECT 
        o.o_orderkey,
        COUNT(l.l_orderkey) AS line_items,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        orders o
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderdate BETWEEN DATE '1997-01-01' AND DATE '1997-12-31'
    GROUP BY 
        o.o_orderkey
)
SELECT 
    ph.p_partkey,
    ph.p_name,
    ph.p_mfgr,
    ph.p_brand,
    ph.p_type,
    ph.p_size,
    ph.p_retailprice,
    COALESCE(sav.total_avail_qty, 0) AS available_quantity,
    o.total_revenue,
    ch.custname,
    ch.acctbal,
    COUNT(DISTINCT o.o_orderkey) AS total_orders
FROM 
    part ph
LEFT JOIN 
    SupplierAvailability sav ON ph.p_partkey = sav.ps_partkey
LEFT JOIN 
    lineitem l ON ph.p_partkey = l.l_partkey
LEFT JOIN 
    OrdersStats o ON l.l_orderkey = o.o_orderkey
JOIN 
    CustomerHierarchy ch ON ch.level = 0 
WHERE 
    ph.p_retailprice > 1000 AND
    (ch.acctbal IS NOT NULL OR ch.custkey IS NULL)
GROUP BY 
    ph.p_partkey, ch.custname, ch.acctbal, o.total_revenue, sav.total_avail_qty
ORDER BY 
    total_orders DESC, total_revenue DESC
LIMIT 100;