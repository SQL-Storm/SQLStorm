
WITH RECURSIVE supplier_chain AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2)

    UNION ALL

    SELECT p.s_suppkey, CONCAT(s.s_name, ' -> ', p.s_name), p.s_acctbal, s.level + 1
    FROM supplier_chain s
    JOIN partsupp ps ON ps.ps_suppkey = s.s_suppkey
    JOIN supplier p ON p.s_suppkey = ps.ps_suppkey
    WHERE p.s_acctbal < s.s_acctbal
),
ranked_orders AS (
    SELECT o.o_orderkey, o.o_custkey, o.o_orderstatus, o.o_totalprice, 
           ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderdate DESC) AS order_rank,
           COUNT(*) OVER (PARTITION BY o.o_orderstatus) AS total_count
    FROM orders o
),
expensive_items AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice,
           CASE 
               WHEN p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2) THEN 'Expensive' 
               ELSE 'Cheap' 
           END AS price_category
    FROM part p
),
lineitem_summary AS (
    SELECT l.l_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_sales,
           COUNT(l.l_linenumber) AS num_items
    FROM lineitem l
    GROUP BY l.l_orderkey
)
SELECT n.n_name, r.r_name, 
       COALESCE(ARRAY_AGG(DISTINCT p.p_name) FILTER (WHERE p.p_type LIKE '%widget%'), ARRAY[]::VARCHAR[]) AS widget_parts, 
       SUM(li.total_sales) AS total_sales,
       SUM(CASE WHEN ei.price_category = 'Expensive' THEN ei.p_retailprice ELSE 0 END) AS exp_price_sum,
       COUNT(DISTINCT sc.s_suppkey) AS supplier_count
FROM nation n
LEFT JOIN region r ON n.n_regionkey = r.r_regionkey
JOIN ranked_orders oi ON oi.o_custkey = (SELECT c.c_custkey FROM customer c WHERE c.c_nationkey = n.n_nationkey LIMIT 1)
JOIN lineitem_summary li ON li.l_orderkey = oi.o_orderkey
LEFT JOIN expensive_items ei ON ei.p_partkey IN (SELECT ps.ps_partkey FROM partsupp ps JOIN supplier_chain sc ON ps.ps_suppkey = sc.s_suppkey)
LEFT JOIN part p ON p.p_partkey IN (SELECT l.l_partkey FROM lineitem l WHERE l.l_orderkey = oi.o_orderkey)
GROUP BY n.n_name, r.r_name
HAVING SUM(li.total_sales) > (SELECT AVG(total_sales) FROM lineitem_summary)
ORDER BY r.r_name, n.n_name;
