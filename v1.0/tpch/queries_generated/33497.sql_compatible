
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL

    SELECT s.s_suppkey, s.s_name, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_suppkey = sh.s_suppkey
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier) AND sh.level < 2
),
OrderStats AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY o.o_orderkey
),
NationRegion AS (
    SELECT n.n_name, r.r_name
    FROM nation n
    JOIN region r ON n.n_regionkey = r.r_regionkey
)
SELECT 
    p.p_name,
    COALESCE(SUM(ps.ps_availqty), 0) AS available_quantity,
    COUNT(DISTINCT c.c_custkey) AS number_of_customers,
    STRING_AGG(n.n_name, ', ') AS nation_names,
    MAX(os.total_revenue) AS max_revenue,
    CASE 
        WHEN MAX(os.total_revenue) IS NULL THEN 'No Sales'
        WHEN MAX(os.total_revenue) > 50000 THEN 'High Revenue'
        ELSE 'Low Revenue'
    END AS revenue_category
FROM part p
LEFT JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
LEFT JOIN customer c ON c.c_custkey IN (
    SELECT o.o_custkey
    FROM orders o 
    WHERE o.o_totalprice > (SELECT AVG(o_totalprice) FROM orders)
)
LEFT JOIN lineitem l ON p.p_partkey = l.l_partkey
LEFT JOIN OrderStats os ON os.o_orderkey = l.l_orderkey
LEFT JOIN NationRegion nr ON c.c_nationkey = (
    SELECT n.n_nationkey 
    FROM nation n 
    WHERE n.n_name = nr.n_name
)
LEFT JOIN SupplierHierarchy sh ON sh.s_suppkey IN (
    SELECT ps.ps_suppkey 
    FROM partsupp ps 
    WHERE ps.ps_partkey = p.p_partkey
)
GROUP BY p.p_name
ORDER BY available_quantity DESC, revenue_category;
