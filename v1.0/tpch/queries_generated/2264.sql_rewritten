WITH Supplier_Summary AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        AVG(ps.ps_supplycost) AS avg_supply_cost,
        SUM(ps.ps_availqty) AS total_avail_qty,
        COUNT(DISTINCT ps.ps_partkey) AS supplied_parts_count
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),

Customer_Order_Summary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        SUM(o.o_totalprice) AS total_spent,
        COUNT(o.o_orderkey) AS order_count,
        RANK() OVER (ORDER BY SUM(o.o_totalprice) DESC) AS spending_rank
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
)

SELECT 
    ns.n_name,
    COALESCE(ss.avg_supply_cost, 0) AS avg_supply_cost,
    COALESCE(cs.total_spent, 0) AS total_spent,
    ns.r_regionkey
FROM 
    nation ns
LEFT JOIN 
    Supplier_Summary ss ON ns.n_nationkey = (SELECT n.n_nationkey FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey WHERE s.s_suppkey IN (SELECT ps.ps_suppkey FROM partsupp ps GROUP BY ps.ps_suppkey HAVING SUM(ps.ps_availqty) > 100))
LEFT JOIN 
    Customer_Order_Summary cs ON ns.n_nationkey = (SELECT c.c_nationkey FROM customer c WHERE c.c_custkey IN (SELECT o.o_custkey FROM orders o GROUP BY o.o_custkey HAVING COUNT(o.o_orderkey) > 10))
WHERE 
    (ss.supplied_parts_count IS NOT NULL OR cs.order_count IS NOT NULL)
ORDER BY 
    ns.n_name;