
WITH RECURSIVE SupplierHierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, 1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s_acctbal) FROM supplier)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, s.s_acctbal, sh.level + 1
    FROM supplier s
    JOIN SupplierHierarchy sh ON s.s_nationkey = sh.s_nationkey
    WHERE sh.level < 5
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count,
           SUM(o.o_totalprice) AS total_spent,
           AVG(o.o_totalprice) AS avg_spent,
           MAX(o.o_orderdate) AS last_order_date
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
),
PartSupplierDetails AS (
    SELECT p.p_partkey, p.p_name, ps.ps_availqty, ps.ps_supplycost,
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY ps.ps_supplycost DESC) AS rank
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE ps.ps_availqty > 0
)
SELECT r.r_name, 
       n.n_name, 
       c.c_name, 
       so.total_spent AS customer_total_spent, 
       CASE
           WHEN so.order_count > 10 THEN 'High Value'
           WHEN so.order_count BETWEEN 5 AND 10 THEN 'Medium Value'
           ELSE 'Low Value'
       END AS customer_value_segment,
       p.p_name, 
       p.rank AS supplier_rank, 
       sh.level AS supplier_level
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN CustomerOrders so ON so.order_count > 0
LEFT JOIN PartSupplierDetails p ON p.rank = 1
LEFT JOIN SupplierHierarchy sh ON sh.s_nationkey = n.n_nationkey
WHERE r.r_name IS NOT NULL
AND (so.total_spent > (SELECT AVG(total_spent) FROM CustomerOrders) OR sh.level IS NULL)
GROUP BY r.r_name, n.n_name, c.c_name, so.total_spent, so.order_count, p.p_name, p.rank, sh.level
ORDER BY r.r_name, n.n_name, customer_value_segment DESC;
