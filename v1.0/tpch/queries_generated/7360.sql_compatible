
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        c.c_name,
        o.o_orderdate,
        o.o_totalprice,
        ROW_NUMBER() OVER (PARTITION BY c.c_nationkey ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    JOIN 
        customer c ON o.o_custkey = c.c_custkey
),
TopOrders AS (
    SELECT 
        ro.o_orderkey,
        ro.c_name,
        ro.o_orderdate,
        ro.o_totalprice
    FROM 
        RankedOrders ro
    WHERE 
        ro.order_rank <= 5
),
OrderLineItems AS (
    SELECT 
        lo.l_orderkey,
        lo.l_quantity,
        lo.l_extendedprice,
        lo.l_discount,
        lo.l_shipmode,
        lo.l_returnflag,
        lo.l_linestatus,
        lo.l_partkey
    FROM 
        lineitem lo
    JOIN 
        TopOrders to ON lo.l_orderkey = to.o_orderkey
),
SupplierParts AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_supplycost,
        p.p_brand,
        p.p_mfgr
    FROM 
        partsupp ps
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    WHERE 
        ps.ps_availqty > 0
)
SELECT 
    to.c_name AS Customer_Name,
    to.o_orderkey AS Order_Key,
    SUM(oli.l_extendedprice * (1 - oli.l_discount)) AS Revenue,
    COUNT(oli.l_orderkey) AS Number_of_Items,
    AVG(sp.ps_supplycost) AS Avg_Supply_Cost,
    COUNT(DISTINCT sp.ps_partkey) AS Distinct_Parts_Supplied
FROM 
    TopOrders to
JOIN 
    OrderLineItems oli ON to.o_orderkey = oli.l_orderkey
JOIN 
    SupplierParts sp ON oli.l_partkey = sp.ps_partkey
GROUP BY 
    to.c_name, to.o_orderkey
HAVING 
    AVG(sp.ps_supplycost) > 100
ORDER BY 
    Revenue DESC, to.o_orderkey ASC;
