
WITH RECURSIVE supplier_hierarchy AS (
    SELECT s.s_suppkey, s.s_name, s.nationkey, 0 AS level
    FROM supplier s
    WHERE s.s_acctbal > 1000
    UNION ALL
    SELECT s.s_suppkey, s.s_name, s.nationkey, sh.level + 1
    FROM supplier_hierarchy sh
    JOIN supplier s ON sh.nationkey = s.nationkey
    WHERE sh.level < 5 AND s.s_acctbal > 1000
),
ranked_orders AS (
    SELECT 
        o.o_orderkey, 
        o.o_totalprice, 
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank
    FROM orders o
    WHERE o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
),
avg_line_item AS (
    SELECT 
        l.l_partkey, 
        AVG(l.l_extendedprice * (1 - l.l_discount)) AS avg_price
    FROM lineitem l
    GROUP BY l.l_partkey
),
orders_with_part AS (
    SELECT 
        o.o_orderkey, 
        SUM(l.l_quantity) AS total_quantity, 
        COUNT(DISTINCT l.l_partkey) AS part_count
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus IN ('O', 'F')
    GROUP BY o.o_orderkey
),
high_value_parts AS (
    SELECT 
        p.p_partkey, 
        p.p_name, 
        ps.ps_availqty, 
        ps.ps_supplycost,
        (ps.ps_supplycost * ps.ps_availqty) AS inventory_value
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    WHERE ps.ps_availqty > 100 OR (ps.ps_supplycost IS NOT NULL AND ps.ps_supplycost < 50)
),
final_selection AS (
    SELECT 
        o.o_orderkey, 
        o.o_totalprice, 
        AVG(l_avg.avg_price) AS avg_line_item_price
    FROM ranked_orders o
    LEFT JOIN avg_line_item l_avg ON o.o_orderkey = l_avg.l_partkey
    GROUP BY o.o_orderkey, o.o_totalprice
)
SELECT 
    s.s_name, 
    r.r_name, 
    COUNT(DISTINCT o.o_orderkey) AS total_orders, 
    SUM(f.avg_line_item_price) AS total_avg_line_price
FROM supplier s
JOIN nation n ON s.nationkey = n.n_nationkey
JOIN region r ON n.regionkey = r.r_regionkey
LEFT JOIN orders_with_part o ON s.s_suppkey = o.o_orderkey
LEFT JOIN final_selection f ON o.o_orderkey = f.o_orderkey
GROUP BY s.s_name, r.r_name
HAVING SUM(f.avg_line_item_price) IS NOT NULL
ORDER BY total_orders DESC;
