
WITH RECURSIVE SupplierRank AS (
    SELECT s_suppkey, s_name, s_acctbal, 
           ROW_NUMBER() OVER (PARTITION BY s_nationkey ORDER BY s_acctbal DESC) AS rank
    FROM supplier
),
HighValueParts AS (
    SELECT p_partkey, p_name, p_retailprice, p_type, 
           COALESCE(NULLIF(p_retailprice - ROUND(p_retailprice, 0), 0), p_retailprice) AS price_adjustment
    FROM part
    WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part) 
      AND p_size IN (SELECT DISTINCT p_size FROM part WHERE p_type LIKE '%FRUIT%')
),
SupplierPartDetails AS (
    SELECT ps.ps_partkey, ps.ps_suppkey, ps.ps_availqty, ps.ps_supplycost,
           S.rank, P.p_name, P.price_adjustment
    FROM partsupp ps
    JOIN SupplierRank S ON ps.ps_suppkey = S.s_suppkey AND S.rank <= 5
    JOIN HighValueParts P ON ps.ps_partkey = P.p_partkey
)
SELECT R.r_name, COUNT(DISTINCT C.c_custkey) AS num_customers,
       SUM(COALESCE(L.l_discount * L.l_extendedprice, 0)) AS total_discounted_revenue,
       MAX(SD.ps_supplycost) AS max_supply_cost,
       AVG(CASE WHEN S.rank IS NOT NULL THEN S.s_acctbal ELSE 0 END) AS average_supplier_balance
FROM region R
LEFT JOIN nation N ON N.n_regionkey = R.r_regionkey
LEFT JOIN customer C ON C.c_nationkey = N.n_nationkey
LEFT JOIN orders O ON O.o_custkey = C.c_custkey
LEFT JOIN lineitem L ON L.l_orderkey = O.o_orderkey
LEFT JOIN SupplierPartDetails SD ON L.l_partkey = SD.ps_partkey
GROUP BY R.r_name
HAVING SUM(COALESCE(total_discounted_revenue, 0)) > 10000
   OR COUNT(DISTINCT C.c_custkey) > 50
ORDER BY R.r_name DESC
LIMIT 10;
