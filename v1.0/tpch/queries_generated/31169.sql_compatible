
WITH RECURSIVE TopSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
    ORDER BY 
        total_cost DESC
    LIMIT 5
),
CustomerOrderSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(DISTINCT o.o_orderkey) AS order_count,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        c.c_acctbal > (
            SELECT 
                AVG(c2.c_acctbal)
            FROM 
                customer c2
            WHERE 
                c2.c_nationkey = c.c_nationkey
        )
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    ps.ps_partkey,
    p.p_name,
    SUM(li.l_quantity) AS total_quantity,
    SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_revenue,
    CASE 
        WHEN SUM(li.l_quantity) < 100 THEN 'Low'
        WHEN SUM(li.l_quantity) BETWEEN 100 AND 500 THEN 'Medium'
        ELSE 'High'
    END AS quantity_category,
    STRING_AGG(DISTINCT s.s_name) AS suppliers
FROM 
    lineitem li
JOIN 
    partsupp ps ON li.l_partkey = ps.ps_partkey
JOIN 
    part p ON p.p_partkey = ps.ps_partkey
LEFT JOIN 
    TopSuppliers ts ON ps.ps_suppkey = ts.s_suppkey
GROUP BY 
    ps.ps_partkey, p.p_name
HAVING 
    COUNT(DISTINCT li.l_orderkey) > 5
ORDER BY 
    total_revenue DESC
LIMIT 10;
