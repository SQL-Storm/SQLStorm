WITH RECURSIVE OrderHierarchy AS (
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice, 
           CAST(o.o_orderkey AS varchar) AS order_path
    FROM orders o
    WHERE o.o_orderstatus = 'O'
    UNION ALL
    SELECT o.o_orderkey, o.o_orderdate, o.o_totalprice,
           CAST(oh.order_path || ' -> ' || o.o_orderkey AS varchar)
    FROM orders o
    JOIN OrderHierarchy oh ON oh.o_orderkey = o.o_orderkey
    WHERE o.o_orderstatus = 'O'
),
SupplierStats AS (
    SELECT s.s_nationkey, AVG(ps.ps_supplycost) AS avg_supply_cost, 
           COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY s.s_nationkey
),
OrderDetails AS (
    SELECT o.o_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS net_revenue,
           ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY o.o_orderdate) AS rn
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE l.l_shipdate >= DATE '1997-01-01' AND l.l_shipdate <= DATE '1997-12-31'
    GROUP BY o.o_orderkey
)
SELECT 
    r.r_name AS region, 
    n.n_name AS nation,
    SUM(ds.net_revenue) AS total_net_revenue,
    COALESCE(ss.avg_supply_cost, 0) AS average_supply_cost,
    COUNT(DISTINCT ds.o_orderkey) AS total_orders,
    COUNT(DISTINCT CASE WHEN ds.net_revenue > 1000 THEN ds.o_orderkey END) AS high_value_orders,
    STRING_AGG(CAST(ds.o_orderkey AS varchar), ', ') AS order_path
FROM region r
JOIN nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN SupplierStats ss ON n.n_nationkey = ss.s_nationkey
JOIN OrderDetails ds ON n.n_nationkey = (SELECT c.c_nationkey FROM customer c WHERE c.c_custkey = ds.o_orderkey)
GROUP BY r.r_name, n.n_name
HAVING SUM(ds.net_revenue) > (SELECT AVG(net_revenue) FROM OrderDetails)
ORDER BY total_net_revenue DESC;