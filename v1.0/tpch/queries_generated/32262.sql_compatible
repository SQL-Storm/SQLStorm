
WITH RecursiveCTE AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rank
    FROM 
        part p
    WHERE 
        p.p_retailprice > (SELECT AVG(p2.p_retailprice) FROM part p2)
),
TotalSales AS (
    SELECT 
        l.l_partkey, 
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue
    FROM 
        lineitem l
    JOIN 
        orders o ON l.l_orderkey = o.o_orderkey
    GROUP BY 
        l.l_partkey
),
SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        COALESCE(s.s_acctbal, 0) AS account_balance,
        n.n_name AS nation_name
    FROM 
        supplier s
    LEFT JOIN 
        nation n ON s.s_nationkey = n.n_nationkey
    WHERE 
        s.s_acctbal IS NOT NULL
),
CustomerRank AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        DENSE_RANK() OVER (ORDER BY SUM(o.o_totalprice) DESC) AS customer_rank
    FROM 
        customer c
    JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    c.c_name AS customer_name,
    si.nation_name,
    r.p_name AS part_name,
    r.p_retailprice,
    ts.total_revenue,
    CASE 
        WHEN ts.total_revenue IS NOT NULL THEN 'Sales Data Available'
        ELSE 'No Sales Data'
    END AS sales_status,
    cr.customer_rank
FROM 
    RecursiveCTE r
LEFT JOIN 
    TotalSales ts ON r.p_partkey = ts.l_partkey
JOIN 
    SupplierInfo si ON si.s_suppkey IN (
        SELECT 
            ps.ps_suppkey 
        FROM 
            partsupp ps 
        WHERE 
            ps.ps_partkey = r.p_partkey
    )
JOIN 
    CustomerRank cr ON cr.c_custkey IN (
        SELECT 
            o.o_custkey 
        FROM 
            orders o 
        WHERE 
            o.o_orderkey IN (
                SELECT 
                    l.l_orderkey 
                FROM 
                    lineitem l 
                WHERE 
                    l.l_partkey = r.p_partkey
            )
    )
WHERE 
    r.rank <= 5
ORDER BY 
    r.p_retailprice DESC, 
    cr.customer_rank ASC;
