
WITH SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        COUNT(DISTINCT ps.ps_partkey) AS total_parts,
        SUM(ps.ps_availqty) AS total_available_qty,
        AVG(ps.ps_supplycost) AS avg_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
OrderDetails AS (
    SELECT 
        o.o_orderkey,
        o.o_orderstatus,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS order_total,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_orderkey) AS order_rank
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        o.o_orderkey, o.o_orderstatus
)
SELECT 
    r.r_name AS region_name,
    n.n_name AS nation_name,
    ss.s_name AS supplier_name,
    COALESCE(os.order_total, 0) AS total_order_value,
    CASE 
        WHEN ss.total_parts > 5 THEN 'High Supplier'
        WHEN ss.total_parts BETWEEN 1 AND 5 THEN 'Medium Supplier'
        ELSE 'Low Supplier'
    END AS supplier_category,
    EXTRACT(YEAR FROM o.o_orderdate) AS order_year
FROM 
    region r 
LEFT JOIN 
    nation n ON r.r_regionkey = n.n_regionkey
LEFT JOIN 
    supplier ss ON n.n_nationkey = ss.s_nationkey
LEFT JOIN 
    OrderDetails os ON os.o_orderkey = (
        SELECT 
            od.o_orderkey
        FROM 
            OrderDetails od
        WHERE 
            od.order_rank = 1
        ORDER BY 
            od.order_total DESC 
        LIMIT 1
    )
LEFT JOIN 
    orders o ON os.o_orderkey = o.o_orderkey
WHERE 
    ss.s_acctbal IS NOT NULL
ORDER BY 
    r.r_name, n.n_name, total_order_value DESC;
