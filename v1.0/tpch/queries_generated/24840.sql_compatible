
WITH RankedParts AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        p.p_mfgr,
        p.p_brand,
        p.p_retailprice,
        ROW_NUMBER() OVER (PARTITION BY p.p_brand ORDER BY p.p_retailprice DESC) AS rnk
    FROM 
        part p
    WHERE 
        p.p_size > 10 AND 
        p.p_retailprice IS NOT NULL
),
SupplierDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        CASE 
            WHEN SUM(ps.ps_availqty) > 1000 THEN 'High'
            WHEN SUM(ps.ps_availqty) BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Low'
        END AS availability_status
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
OrderSummaries AS (
    SELECT 
        o.o_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS order_total,
        COUNT(*) AS line_item_count
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    GROUP BY 
        o.o_orderkey
)
SELECT 
    p.p_name,
    p.p_retailprice,
    sd.s_name,
    sd.total_supply_cost,
    os.order_total,
    COALESCE(DENSE_RANK() OVER (PARTITION BY sd.s_suppkey ORDER BY os.order_total DESC), 0) AS rank_by_order_value,
    COALESCE(NULLIF(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY os.order_total), 0), 'N/A') AS median_order_value
FROM 
    RankedParts p
LEFT JOIN 
    SupplierDetails sd ON p.p_partkey = sd.s_suppkey
LEFT JOIN 
    OrderSummaries os ON sd.s_suppkey = os.o_orderkey
WHERE 
    p.rnk <= 10 
    AND (sd.availability_status = 'High' OR sd.total_supply_cost IS NULL)
ORDER BY 
    p.p_retailprice DESC, os.order_total ASC;
