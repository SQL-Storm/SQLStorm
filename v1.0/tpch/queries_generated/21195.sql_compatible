
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_custkey,
        o.o_orderstatus,
        o.o_totalprice,
        o.o_orderdate,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS rank_order
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= CURRENT_DATE - INTERVAL '6 months'
),
SupplierInfo AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
DistinctNations AS (
    SELECT DISTINCT 
        n.n_name
    FROM 
        nation n
    WHERE 
        n.n_nationkey IN (SELECT DISTINCT c.c_nationkey FROM customer c WHERE c.c_acctbal IS NOT NULL)
),
FinalAnalysis AS (
    SELECT 
        r.r_name AS region_name,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        CASE 
            WHEN COUNT(DISTINCT o.o_orderkey) > 10 THEN 'High Volume'
            WHEN COUNT(DISTINCT o.o_orderkey) BETWEEN 5 AND 10 THEN 'Moderate Volume'
            ELSE 'Low Volume' 
        END AS order_volume_category,
        si.total_supply_cost
    FROM 
        region r
    LEFT JOIN 
        nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN 
        customer c ON n.n_nationkey = c.c_nationkey
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    LEFT JOIN 
        SupplierInfo si ON l.l_suppkey = si.s_suppkey
    WHERE 
        l.l_tax IS NOT NULL OR l.l_discount > 0.05
    GROUP BY 
        r.r_name, si.total_supply_cost
    HAVING 
        SUM(l.l_extendedprice * (1 - l.l_discount)) >= 1000 
        AND (si.total_supply_cost IS NOT NULL OR EXISTS (SELECT 1 FROM DistinctNations dn WHERE dn.n_name = n.n_name))
)
SELECT 
    fa.region_name,
    fa.total_orders,
    fa.total_revenue,
    fa.order_volume_category,
    COALESCE(fa.total_supply_cost, 'Unknown') AS supply_cost_info
FROM 
    FinalAnalysis fa
UNION ALL 
SELECT 
    'Total',
    SUM(fa.total_orders),
    SUM(fa.total_revenue),
    NULL,
    SUM(fa.total_supply_cost)
FROM 
    FinalAnalysis fa;
