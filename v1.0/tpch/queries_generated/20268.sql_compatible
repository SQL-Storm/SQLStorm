
WITH RECURSIVE SupplierChain AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, 
           COALESCE(s.s_acctbal, 0) AS effective_acctbal,
           1 AS level
    FROM supplier s
    WHERE s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2)
    
    UNION ALL
    
    SELECT s.s_suppkey, s.s_name, s.s_nationkey,
           COALESCE(s.s_acctbal, 0) AS effective_acctbal,
           sc.level + 1
    FROM supplier s
    JOIN SupplierChain sc ON sc.s_nationkey = s.s_nationkey
    WHERE sc.level < 5 AND s.s_acctbal > 0
),
PartSupplierStats AS (
    SELECT ps.ps_partkey, SUM(ps.ps_supplycost) AS total_supplycost,
           COUNT(DISTINCT ps.ps_suppkey) AS supplier_count
    FROM partsupp ps
    INNER JOIN SupplierChain sc ON ps.ps_suppkey = sc.s_suppkey
    GROUP BY ps.ps_partkey
),
HighValueParts AS (
    SELECT p.p_partkey, p.p_name, p.p_retailprice * 1.20 AS retail_plus_extra,
           COALESCE(hvs.total_supplycost, 0) AS total_supplycost,
           ROW_NUMBER() OVER (PARTITION BY p.p_partkey ORDER BY COALESCE(hvs.total_supplycost, 0) DESC) AS rn
    FROM part p
    LEFT JOIN PartSupplierStats hvs ON p.p_partkey = hvs.ps_partkey
    WHERE p.p_size >= (SELECT AVG(p2.p_size) FROM part p2) 
    AND p.p_retailprice IS NOT NULL
)
SELECT hvp.p_partkey, hvp.p_name, hvp.retail_plus_extra, 
       hvp.total_supplycost, 
       CASE 
           WHEN hvp.rn = 1 THEN 'Highest Supply Cost'
           ELSE 'Lower Supply Cost'
       END AS supply_cost_rank
FROM HighValueParts hvp
WHERE hvp.total_supplycost > (SELECT AVG(total_supplycost) FROM PartSupplierStats)
AND (hvp.total_supplycost IS NOT NULL OR hvp.total_supplycost > 1000)
ORDER BY hvp.retail_plus_extra DESC, hvp.total_supplycost ASC
LIMIT 10 OFFSET 10;
