WITH RECURSIVE RankedSuppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 
           ROW_NUMBER() OVER (PARTITION BY n.n_name ORDER BY s.s_acctbal DESC) AS rank
    FROM supplier s
    JOIN nation n ON s.s_nationkey = n.n_nationkey
),
HighValueCustomers AS (
    SELECT c.c_custkey, c.c_name, c.c_acctbal, 
           CASE WHEN c.c_acctbal > AVG(c2.c_acctbal) OVER () THEN 'Above Average' ELSE 'Below Average' END AS acct_status
    FROM customer c
),
TopPartSupply AS (
    SELECT p.p_partkey, SUM(ps.ps_availqty) AS total_supply
    FROM part p
    JOIN partsupp ps ON p.p_partkey = ps.ps_partkey
    GROUP BY p.p_partkey
    HAVING SUM(ps.ps_availqty) > 100
),
OrderDetails AS (
    SELECT o.o_orderkey, o.o_orderdate, l.l_quantity, l.l_extendedprice,
           (l.l_extendedprice * (1 - l.l_discount)) AS net_price,
           RANK() OVER (PARTITION BY o.o_orderkey ORDER BY l.l_extendedprice DESC) AS price_rank
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE o.o_orderstatus = 'O' AND l.l_shipdate > cast('1998-10-01' as date) - INTERVAL '30 days'
)
SELECT r.s_name, r.s_acctbal, c.c_name, c.c_acctbal, p.p_name, ps.total_supply, od.net_price
FROM RankedSuppliers r
LEFT JOIN HighValueCustomers c ON r.rank <= 3
JOIN TopPartSupply ps ON r.s_suppkey = ps.p_partkey
JOIN OrderDetails od ON od.o_orderkey = r.s_suppkey
WHERE r.s_acctbal IS NOT NULL AND c.c_acctbal IS NOT NULL
ORDER BY r.s_acctbal DESC, c.c_acctbal ASC
LIMIT 50;