
WITH RankedSuppliers AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_acctbal,
        RANK() OVER (PARTITION BY s.s_nationkey ORDER BY s.s_acctbal DESC) AS rank_by_balance
    FROM 
        supplier s
    WHERE 
        s.s_acctbal > (SELECT AVG(s2.s_acctbal) FROM supplier s2)
),
Products AS (
    SELECT 
        p.p_partkey,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        p.p_retailprice,
        (p.p_retailprice - ps.ps_supplycost) AS profit_margin,
        CASE 
            WHEN p.p_size IS NULL THEN 'Unknown Size'
            WHEN p.p_size > 10 THEN 'Large'
            WHEN p.p_size BETWEEN 6 AND 10 THEN 'Medium'
            ELSE 'Small' 
        END AS size_category,
        ROW_NUMBER() OVER (PARTITION BY p.p_type ORDER BY profit_margin DESC) AS rank_by_profit
    FROM 
        part p
    JOIN 
        partsupp ps ON p.p_partkey = ps.ps_partkey
),
CustomerOrderSummary AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent,
        RANK() OVER (ORDER BY SUM(o.o_totalprice) DESC) AS order_rank
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
)
SELECT 
    n.n_name,
    COALESCE(SUM(CASE WHEN l.l_returnflag = 'R' THEN l.l_extendedprice ELSE 0 END), 0) AS total_returns,
    COUNT(DISTINCT cu.c_custkey) AS unique_customers,
    COUNT(DISTINCT ps.ps_partkey) AS unique_parts,
    AVG(pr.profit_margin) AS avg_profit_margin,
    MAX(cus.total_spent) AS max_customer_spent,
    STRING_AGG(DISTINCT pr.size_category, ', ') AS product_sizes
FROM 
    nation n
LEFT JOIN 
    supplier s ON n.n_nationkey = s.s_nationkey
LEFT JOIN 
    partsupp ps ON s.s_suppkey = ps.ps_suppkey
LEFT JOIN 
    lineitem l ON ps.ps_partkey = l.l_partkey
LEFT JOIN 
    Products pr ON pr.p_partkey = ps.ps_partkey
LEFT JOIN 
    CustomerOrderSummary cus ON EXISTS (SELECT 1 FROM customer c2 JOIN nation n2 ON c2.c_nationkey = n2.n_nationkey WHERE c2.c_custkey = cus.c_custkey AND n2.n_nationkey = n.n_nationkey)
WHERE 
    s.s_suppkey IN (SELECT rs.s_suppkey FROM RankedSuppliers rs WHERE rs.rank_by_balance <= 3)
    AND (pr.rank_by_profit <= 5 OR pr.rank_by_profit IS NULL)
GROUP BY 
    n.n_name
ORDER BY 
    total_returns DESC, unique_customers DESC
LIMIT 50;
