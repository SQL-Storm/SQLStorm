WITH RECURSIVE supplier_hierarchy AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        s.s_nationkey,
        s.s_acctbal,
        0 AS level
    FROM supplier s
    WHERE s.s_acctbal > 1000

    UNION ALL

    SELECT 
        ps.ps_suppkey,
        s.s_name,
        s.s_nationkey,
        s.s_acctbal,
        sh.level + 1
    FROM partsupp ps
    JOIN supplier s ON ps.ps_suppkey = s.s_suppkey
    JOIN supplier_hierarchy sh ON ps.ps_partkey = sh.s_suppkey
    WHERE s.s_acctbal > sh.level * 500
),
lineitem_summary AS (
    SELECT 
        l.l_orderkey,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_price,
        COUNT(l.l_orderkey) AS item_count,
        AVG(l.l_quantity) AS avg_quantity
    FROM lineitem l
    WHERE l.l_shipdate >= '1997-01-01' 
    GROUP BY l.l_orderkey
),
nation_summary AS (
    SELECT 
        n.n_nationkey,
        n.n_name,
        ROUND(AVG(s.s_acctbal), 2) AS avg_acctbal,
        COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM nation n
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY n.n_nationkey, n.n_name
)
SELECT 
    sh.s_name AS supplier_name,
    ns.n_name AS nation_name,
    ls.total_price,
    ls.item_count,
    ns.avg_acctbal,
    ns.supplier_count,
    CASE 
        WHEN ls.total_price > 10000 THEN 'High' 
        WHEN ls.total_price > 5000 THEN 'Medium'
        ELSE 'Low'
    END AS price_category
FROM supplier_hierarchy sh
JOIN lineitem_summary ls ON sh.s_suppkey = ls.l_orderkey
JOIN nation_summary ns ON sh.s_nationkey = ns.n_nationkey
WHERE ns.avg_acctbal IS NOT NULL
ORDER BY ns.avg_acctbal DESC, ls.total_price DESC
OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;