
WITH ranked_orders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        SUM(l.l_extendedprice * (1 - l.l_discount)) OVER (PARTITION BY o.o_orderkey) AS order_total,
        ROW_NUMBER() OVER (PARTITION BY o.o_orderkey ORDER BY o.o_orderdate DESC) AS rn
    FROM 
        orders o
    JOIN 
        lineitem l ON o.o_orderkey = l.l_orderkey
    WHERE 
        o.o_orderdate > '1996-01-01' AND 
        l.l_discount BETWEEN 0.05 AND 0.25
),
customer_totals AS (
    SELECT 
        c.c_custkey,
        SUM(o.order_total) AS total_spent,
        COUNT(DISTINCT o.o_orderkey) AS total_orders
    FROM 
        customer c
    LEFT JOIN 
        ranked_orders o ON c.c_custkey = (SELECT o2.o_custkey FROM orders o2 WHERE o2.o_orderkey = o.o_orderkey)
    GROUP BY 
        c.c_custkey
),
part_suppliers AS (
    SELECT 
        ps.ps_partkey,
        ps.ps_suppkey,
        p.p_brand,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost,
        ROW_NUMBER() OVER (PARTITION BY ps.ps_partkey ORDER BY SUM(ps.ps_supplycost * ps.ps_availqty) DESC) AS supplier_rank
    FROM 
        partsupp ps
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        ps.ps_partkey, ps.ps_suppkey, p.p_brand
)
SELECT 
    c.c_name,
    c.total_spent,
    p.p_name,
    COALESCE(pt.total_supply_cost, 0) AS total_supply_cost,
    CASE 
        WHEN c.total_orders > 5 THEN 'High Value Customer' 
        ELSE 'Regular Customer' 
    END AS customer_type
FROM 
    customer_totals c
LEFT JOIN 
    part_suppliers pt ON pt.supplier_rank = 1
JOIN 
    part p ON pt.ps_partkey = p.p_partkey
WHERE 
    c.total_spent > (SELECT AVG(total_spent) FROM customer_totals)
ORDER BY 
    c.total_spent DESC,
    p.p_name ASC
LIMIT 10
UNION ALL
SELECT 
    'Average Spending' AS c_name,
    AVG(total_spent) AS total_spent,
    NULL AS p_name,
    NULL AS total_supply_cost,
    'N/A' AS customer_type
FROM 
    customer_totals
WHERE 
    total_orders > 0
HAVING 
    COUNT(*) > 10;
