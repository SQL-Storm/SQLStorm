
WITH SupplierStats AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        AVG(ps.ps_supplycost) AS avg_supply_cost,
        SUM(ps.ps_availqty) AS total_available,
        COUNT(DISTINCT p.p_partkey) AS part_count
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    GROUP BY 
        s.s_suppkey, s.s_name
),
CustomerOrderStats AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY 
        c.c_custkey, c.c_name
),
LineItemDetails AS (
    SELECT
        l.l_orderkey,
        l.l_partkey,
        l.l_quantity,
        l.l_extendedprice,
        l.l_discount,
        l.l_tax,
        ROW_NUMBER() OVER(PARTITION BY l.l_orderkey ORDER BY l.l_linenumber) AS item_number
    FROM 
        lineitem l
)
SELECT 
    cs.c_name AS customer_name,
    ss.s_name AS supplier_name,
    ss.avg_supply_cost,
    cs.total_orders,
    cs.total_spent,
    SUM(ld.l_extendedprice * (1 - ld.l_discount)) AS total_revenue,
    ROUND(AVG(ld.l_quantity), 2) AS avg_order_quantity,
    MIN(ld.l_shipdate) AS first_ship_date,
    MAX(ld.l_shipdate) AS last_ship_date
FROM 
    CustomerOrderStats cs
JOIN 
    orders o ON cs.c_custkey = o.o_custkey
JOIN 
    LineItemDetails ld ON o.o_orderkey = ld.l_orderkey
JOIN 
    SupplierStats ss ON ld.l_partkey IN (SELECT ps.ps_partkey FROM partsupp ps WHERE ps.ps_suppkey = ss.s_suppkey)
GROUP BY 
    cs.c_name, ss.s_name, ss.avg_supply_cost, cs.total_orders, cs.total_spent
HAVING 
    SUM(ld.l_extendedprice * (1 - ld.l_discount)) > 10000 
ORDER BY 
    total_revenue DESC
FETCH FIRST 10 ROWS ONLY;
