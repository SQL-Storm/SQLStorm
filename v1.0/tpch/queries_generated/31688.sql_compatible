
WITH RECURSIVE part_supplier_hierarchy AS (
    SELECT ps_partkey, ps_suppkey, ps_availqty, ps_supplycost, 1 AS level 
    FROM partsupp 
    WHERE ps_availqty > 0
    
    UNION ALL
    
    SELECT ps.ps_partkey, ps.ps_suppkey, ps.ps_availqty, ps.ps_supplycost, psh.level + 1
    FROM partsupp ps
    INNER JOIN part_supplier_hierarchy psh ON ps.ps_partkey = psh.ps_partkey
    WHERE psh.level < 5
),
order_totals AS (
    SELECT o.o_orderkey, SUM(li.l_extendedprice * (1 - li.l_discount)) AS total_price
    FROM orders o
    JOIN lineitem li ON o.o_orderkey = li.l_orderkey
    GROUP BY o.o_orderkey
),
customer_summary AS (
    SELECT c.c_custkey, c.c_name, COUNT(o.o_orderkey) AS order_count, SUM(ot.total_price) AS total_spent
    FROM customer c
    LEFT JOIN orders o ON c.c_custkey = o.o_custkey
    LEFT JOIN order_totals ot ON o.o_orderkey = ot.o_orderkey
    GROUP BY c.c_custkey, c.c_name
),
supplier_stats AS (
    SELECT s.s_suppkey, s.s_name, SUM(ps.ps_availqty) AS total_avail_qty, 
           AVG(ps.ps_supplycost) AS avg_supply_cost, 
           COUNT(DISTINCT p.p_partkey) AS part_count
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    GROUP BY s.s_suppkey, s.s_name
),
region_nation AS (
    SELECT r.r_name, n.n_name, COUNT(DISTINCT s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    LEFT JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_name, n.n_name
)
SELECT 
    cs.c_custkey, 
    cs.c_name, 
    COALESCE(ss.avg_supply_cost, 0) AS avg_supplier_cost, 
    rss.supplier_count AS total_suppliers_in_region,
    SUM(p.p_retailprice) AS total_material_cost,
    DENSE_RANK() OVER (PARTITION BY cs.order_count ORDER BY cs.total_spent DESC) AS rank_based_on_spent,
    (SELECT COUNT(*) FROM lineitem l WHERE l.l_discount > 0.1) AS high_discount_items
FROM customer_summary cs
LEFT JOIN supplier_stats ss ON cs.order_count > 1
LEFT JOIN region_nation rss ON cs.c_custkey = rss.supplier_count
JOIN part p ON cs.c_custkey = p.p_partkey
GROUP BY cs.c_custkey, cs.c_name, ss.avg_supply_cost, rss.supplier_count
HAVING SUM(p.p_retailprice) IS NOT NULL
ORDER BY cs.total_spent DESC;
