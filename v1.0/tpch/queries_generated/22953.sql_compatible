
WITH RECURSIVE RankedSuppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_acctbal, 
           ROW_NUMBER() OVER (PARTITION BY s.n_nationkey ORDER BY s.s_acctbal DESC) AS ranking
    FROM supplier s
    INNER JOIN nation n ON s.n_nationkey = n.n_nationkey
    WHERE n.n_comment LIKE '%important%'
),
FilteredOrders AS (
    SELECT o.o_orderkey, o.o_totalprice, o.o_orderdate, c.c_nationkey, 
           CASE 
               WHEN o.o_orderstatus = 'O' THEN 'Open'
               WHEN o.o_orderstatus = 'F' THEN 'Finished'
               ELSE 'Unknown'
           END AS order_status
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    WHERE o.o_totalprice > (SELECT AVG(o_totalprice) FROM orders) 
      AND (c.c_acctbal IS NULL OR c.c_acctbal > 1000)
),
HighValueLineItems AS (
    SELECT l.l_orderkey, SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_value
    FROM lineitem l
    LEFT JOIN orders o ON l.l_orderkey = o.o_orderkey
    WHERE l.l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1998-10-01'
    GROUP BY l.l_orderkey
    HAVING SUM(l.l_extendedprice * (1 - l.l_discount)) > (SELECT AVG(l.l_extendedprice * (1 - l.l_discount)) 
                                                             FROM lineitem 
                                                             WHERE l_shipdate BETWEEN DATE '1997-01-01' AND DATE '1998-10-01')
),
AllSuppliers AS (
    SELECT s.s_suppkey, s.s_name, s.s_address, n.n_name AS nation_name, 
           COALESCE(s.s_acctbal, 0) AS adjusted_acctbal
    FROM supplier s
    LEFT JOIN nation n ON s.n_nationkey = n.n_nationkey
),
FinalJoin AS (
    SELECT fo.o_orderkey, fo.o_totalprice, ls.total_value, s.s_name, s.adjusted_acctbal
    FROM FilteredOrders fo
    LEFT JOIN HighValueLineItems ls ON fo.o_orderkey = ls.l_orderkey
    LEFT JOIN AllSuppliers s ON s.s_suppkey IN (
        SELECT ps.ps_suppkey 
        FROM partsupp ps
        JOIN part p ON p.p_partkey = ps.ps_partkey
        WHERE p.p_type LIKE '%steel%' AND p.p_retailprice >= 100
    )
)
SELECT DISTINCT 
    fj.o_orderkey, fj.o_totalprice, fj.total_value, fj.s_name,
    COALESCE(r.ranking, 0) AS supplier_ranking
FROM FinalJoin fj
LEFT JOIN RankedSuppliers r ON fj.s_name = r.s_name
WHERE fj.total_value IS NOT NULL
ORDER BY fj.o_totalprice DESC, fj.total_value DESC
LIMIT 10 OFFSET 5;
