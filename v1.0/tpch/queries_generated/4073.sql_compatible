
WITH RankedOrders AS (
    SELECT 
        o.o_orderkey,
        o.o_orderdate,
        o.o_totalprice,
        RANK() OVER (PARTITION BY o.o_orderstatus ORDER BY o.o_totalprice DESC) AS order_rank
    FROM 
        orders o
    WHERE 
        o.o_orderdate >= DATE '1996-01-01' AND o.o_orderdate < DATE '1997-01-01'
),
CustomerStats AS (
    SELECT 
        c.c_custkey,
        c.c_name,
        COUNT(DISTINCT o.o_orderkey) AS total_orders,
        SUM(o.o_totalprice) AS total_spent
    FROM 
        customer c
    LEFT JOIN 
        orders o ON c.c_custkey = o.o_custkey
    WHERE 
        c.c_acctbal > 1000
    GROUP BY 
        c.c_custkey, c.c_name
),
SupplierPartDetails AS (
    SELECT 
        s.s_suppkey,
        s.s_name,
        p.p_name,
        ps.ps_availqty,
        ps.ps_supplycost,
        ROW_NUMBER() OVER (PARTITION BY s.s_suppkey ORDER BY p.p_retailprice DESC) AS part_rank
    FROM 
        supplier s
    JOIN 
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN 
        part p ON ps.ps_partkey = p.p_partkey
    WHERE 
        ps.ps_availqty > 50
),
LineItemAnalysis AS (
    SELECT 
        l.l_orderkey,
        COUNT(*) AS line_count,
        SUM(l.l_extendedprice * (1 - l.l_discount)) AS total_revenue,
        AVG(l.l_quantity) AS average_quantity
    FROM 
        lineitem l
    WHERE 
        l.l_shipdate >= DATE '1996-01-01'
    GROUP BY 
        l.l_orderkey
)
SELECT 
    c.c_name,
    cs.total_orders,
    cs.total_spent,
    R.order_rank,
    ps.s_name AS primary_supplier,
    pp.p_name AS primary_part_name,
    ps.ps_availqty,
    la.line_count,
    la.total_revenue,
    la.average_quantity
FROM 
    CustomerStats cs
JOIN 
    RankedOrders R ON R.o_orderkey IN (SELECT o.o_orderkey FROM orders o WHERE o.o_custkey = cs.c_custkey)
LEFT JOIN 
    SupplierPartDetails ps ON ps.part_rank = 1
LEFT JOIN 
    part pp ON pp.p_partkey = ps.ps_partkey
LEFT JOIN 
    LineItemAnalysis la ON la.l_orderkey IN (SELECT l.l_orderkey FROM lineitem l WHERE l.l_orderkey = R.o_orderkey)
WHERE 
    cs.total_spent > 5000
ORDER BY 
    cs.total_spent DESC, 
    R.order_rank
FETCH FIRST 10 ROWS ONLY;
