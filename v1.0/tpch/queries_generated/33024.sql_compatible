
WITH RECURSIVE SupplyChain AS (
    SELECT s.s_suppkey, s.s_name, s.s_nationkey, ps.ps_partkey, ps.ps_availqty, ps.ps_supplycost,
           ROW_NUMBER() OVER (PARTITION BY s.s_nationkey ORDER BY ps.ps_supplycost) AS rank
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    WHERE ps.ps_availqty > 0
),
TopSuppliers AS (
    SELECT n.n_name, SUM(ps.ps_availqty) AS total_availqty, SUM(ps.ps_supplycost) AS total_supplycost
    FROM SupplyChain sc
    JOIN nation n ON sc.s_nationkey = n.n_nationkey
    GROUP BY n.n_name
    HAVING SUM(ps.ps_availqty) > 1000
),
CustomerOrders AS (
    SELECT c.c_custkey, c.c_name, o.o_orderkey, o.o_totalprice, o.o_orderdate,
           DENSE_RANK() OVER (PARTITION BY c.c_nationkey ORDER BY o.o_totalprice DESC) AS order_rank
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderstatus = 'O'
)
SELECT n.n_name, co.c_name, SUM(co.o_totalprice) AS total_customer_spending,
       COUNT(DISTINCT o.o_orderkey) AS order_count,
       AVG(co.o_totalprice) AS average_order_value,
       MAX(sc.total_availqty) AS max_avail_qty,
       CASE WHEN SUM(co.o_totalprice) IS NULL THEN 'No Orders' ELSE 'Has Orders' END AS order_status
FROM TopSuppliers ts
JOIN nation n ON ts.n_name = n.n_name
LEFT JOIN CustomerOrders co ON n.n_nationkey = co.c_nationkey
LEFT JOIN SupplyChain sc ON ts.ps_partkey = sc.ps_partkey
GROUP BY n.n_name, co.c_name
HAVING AVG(co.o_totalprice) > 500 OR COUNT(DISTINCT co.o_orderkey) > 5
ORDER BY total_customer_spending DESC, max_avail_qty ASC
LIMIT 10;
